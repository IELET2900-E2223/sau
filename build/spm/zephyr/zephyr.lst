
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200025a8 	.word	0x200025a8
}
   4:	00001e9d 	.word	0x00001e9d
   8:	00007f01 	.word	0x00007f01
   c:	00001e71 	.word	0x00001e71
  10:	00001e71 	.word	0x00001e71
  14:	00001e71 	.word	0x00001e71
  18:	00001e71 	.word	0x00001e71
  1c:	00001e71 	.word	0x00001e71
	...
  2c:	0000186d 	.word	0x0000186d
  30:	00001e71 	.word	0x00001e71
  34:	00000000 	.word	0x00000000
  38:	00001815 	.word	0x00001815
  3c:	00002b11 	.word	0x00002b11

00000040 <_irq_vector_table>:
  40:	000018ed 000018ed 000018ed 000018ed     ................
  50:	000018ed 000018ed 000018ed 000018ed     ................
  60:	000018ed 000018ed 000018ed 000018ed     ................
  70:	000018ed 000018ed 000018ed 000018ed     ................
  80:	000018ed 000018ed 000018ed 000018ed     ................
  90:	000018ed 000018ed 000018ed 000018ed     ................
  a0:	000018ed 000018ed 000018ed 000018ed     ................
  b0:	000018ed 000018ed 000018ed 000018ed     ................
  c0:	000018ed 000018ed 000018ed 000018ed     ................
  d0:	000018ed 000018ed 000018ed 000018ed     ................
  e0:	000018ed 000018ed 000018ed 000018ed     ................
  f0:	000018ed 000018ed 000018ed 000018ed     ................
 100:	000018ed 000018ed 000018ed 000018ed     ................
 110:	000018ed 000018ed 000018ed 000018ed     ................
 120:	000018ed 000018ed 000018ed 000018ed     ................
 130:	000018ed 000018ed 000018ed 000018ed     ................
 140:	000018ed                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00010000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     564:	680b      	ldr	r3, [r1, #0]
     566:	3301      	adds	r3, #1
     568:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     56a:	4b01      	ldr	r3, [pc, #4]	; (570 <char_out+0xc>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	4718      	bx	r3
     570:	20000000 	.word	0x20000000

00000574 <__printk_hook_install>:
	_char_out = fn;
     574:	4b01      	ldr	r3, [pc, #4]	; (57c <__printk_hook_install+0x8>)
     576:	6018      	str	r0, [r3, #0]
}
     578:	4770      	bx	lr
     57a:	bf00      	nop
     57c:	20000000 	.word	0x20000000

00000580 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     580:	b507      	push	{r0, r1, r2, lr}
     582:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     584:	2100      	movs	r1, #0
{
     586:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     588:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     58a:	4803      	ldr	r0, [pc, #12]	; (598 <vprintk+0x18>)
     58c:	a901      	add	r1, sp, #4
     58e:	f000 f805 	bl	59c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     592:	b003      	add	sp, #12
     594:	f85d fb04 	ldr.w	pc, [sp], #4
     598:	00000565 	.word	0x00000565

0000059c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a0:	468b      	mov	fp, r1
     5a2:	4692      	mov	sl, r2
     5a4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5a6:	2500      	movs	r5, #0
{
     5a8:	b091      	sub	sp, #68	; 0x44
     5aa:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5ac:	f89a 0000 	ldrb.w	r0, [sl]
     5b0:	b908      	cbnz	r0, 5b6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5b2:	4628      	mov	r0, r5
     5b4:	e35e      	b.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
		if (*fp != '%') {
     5b6:	2825      	cmp	r0, #37	; 0x25
     5b8:	f10a 0701 	add.w	r7, sl, #1
     5bc:	d007      	beq.n	5ce <cbvprintf+0x32>
			OUTC('%');
     5be:	4659      	mov	r1, fp
     5c0:	9b02      	ldr	r3, [sp, #8]
     5c2:	4798      	blx	r3
     5c4:	2800      	cmp	r0, #0
     5c6:	f2c0 8355 	blt.w	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     5ca:	3501      	adds	r5, #1
			break;
     5cc:	e210      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		} state = {
     5ce:	2218      	movs	r2, #24
     5d0:	2100      	movs	r1, #0
     5d2:	a80a      	add	r0, sp, #40	; 0x28
     5d4:	f007 fcef 	bl	7fb6 <memset>
	if (*sp == '%') {
     5d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     5dc:	2b25      	cmp	r3, #37	; 0x25
     5de:	d078      	beq.n	6d2 <cbvprintf+0x136>
     5e0:	2200      	movs	r2, #0
     5e2:	4694      	mov	ip, r2
     5e4:	4616      	mov	r6, r2
     5e6:	4696      	mov	lr, r2
     5e8:	4610      	mov	r0, r2
     5ea:	4639      	mov	r1, r7
		switch (*sp) {
     5ec:	f817 3b01 	ldrb.w	r3, [r7], #1
     5f0:	2b2b      	cmp	r3, #43	; 0x2b
     5f2:	f000 809d 	beq.w	730 <cbvprintf+0x194>
     5f6:	f200 8094 	bhi.w	722 <cbvprintf+0x186>
     5fa:	2b20      	cmp	r3, #32
     5fc:	f000 809b 	beq.w	736 <cbvprintf+0x19a>
     600:	2b23      	cmp	r3, #35	; 0x23
     602:	f000 809a 	beq.w	73a <cbvprintf+0x19e>
     606:	b128      	cbz	r0, 614 <cbvprintf+0x78>
     608:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     60c:	f040 0004 	orr.w	r0, r0, #4
     610:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     614:	f1be 0f00 	cmp.w	lr, #0
     618:	d005      	beq.n	626 <cbvprintf+0x8a>
     61a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     61e:	f040 0008 	orr.w	r0, r0, #8
     622:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     626:	b12e      	cbz	r6, 634 <cbvprintf+0x98>
     628:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     62c:	f040 0010 	orr.w	r0, r0, #16
     630:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     634:	f1bc 0f00 	cmp.w	ip, #0
     638:	d005      	beq.n	646 <cbvprintf+0xaa>
     63a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     63e:	f040 0020 	orr.w	r0, r0, #32
     642:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     646:	b12a      	cbz	r2, 654 <cbvprintf+0xb8>
     648:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     650:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     654:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     658:	f002 0044 	and.w	r0, r2, #68	; 0x44
     65c:	2844      	cmp	r0, #68	; 0x44
     65e:	d103      	bne.n	668 <cbvprintf+0xcc>
		conv->flag_zero = false;
     660:	f36f 1286 	bfc	r2, #6, #1
     664:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     668:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     66c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     66e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     672:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     676:	d17b      	bne.n	770 <cbvprintf+0x1d4>
		conv->width_star = true;
     678:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     67c:	1c4b      	adds	r3, r1, #1
     67e:	f042 0201 	orr.w	r2, r2, #1
     682:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     686:	781a      	ldrb	r2, [r3, #0]
     688:	2a2e      	cmp	r2, #46	; 0x2e
     68a:	bf0c      	ite	eq
     68c:	2101      	moveq	r1, #1
     68e:	2100      	movne	r1, #0
     690:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     694:	f361 0241 	bfi	r2, r1, #1, #1
     698:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     69c:	d174      	bne.n	788 <cbvprintf+0x1ec>
	if (*sp == '*') {
     69e:	785a      	ldrb	r2, [r3, #1]
     6a0:	2a2a      	cmp	r2, #42	; 0x2a
     6a2:	d06a      	beq.n	77a <cbvprintf+0x1de>
	size_t val = 0;
     6a4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     6a6:	260a      	movs	r6, #10
     6a8:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     6aa:	4618      	mov	r0, r3
     6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
     6b0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6b4:	2f09      	cmp	r7, #9
     6b6:	f240 808e 	bls.w	7d6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     6ba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6be:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6c0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6c4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     6c8:	f361 0241 	bfi	r2, r1, #1, #1
     6cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     6d0:	e05a      	b.n	788 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     6d2:	f10a 0702 	add.w	r7, sl, #2
     6d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     6da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6de:	07d9      	lsls	r1, r3, #31
     6e0:	f140 8149 	bpl.w	976 <CONFIG_ISR_STACK_SIZE+0x176>
			width = va_arg(ap, int);
     6e4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     6e8:	f1b9 0f00 	cmp.w	r9, #0
     6ec:	da07      	bge.n	6fe <cbvprintf+0x162>
				conv->flag_dash = true;
     6ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     6f2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     6f6:	f042 0204 	orr.w	r2, r2, #4
     6fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     6fe:	075a      	lsls	r2, r3, #29
     700:	f140 8142 	bpl.w	988 <CONFIG_ISR_STACK_SIZE+0x188>
			int arg = va_arg(ap, int);
     704:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     708:	f1b8 0f00 	cmp.w	r8, #0
     70c:	f280 8141 	bge.w	992 <CONFIG_ISR_STACK_SIZE+0x192>
				conv->prec_present = false;
     710:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     714:	f36f 0341 	bfc	r3, #1, #1
     718:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     71c:	f04f 38ff 	mov.w	r8, #4294967295
     720:	e137      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		switch (*sp) {
     722:	2b2d      	cmp	r3, #45	; 0x2d
     724:	d00c      	beq.n	740 <cbvprintf+0x1a4>
     726:	2b30      	cmp	r3, #48	; 0x30
     728:	f47f af6d 	bne.w	606 <cbvprintf+0x6a>
			conv->flag_zero = true;
     72c:	2201      	movs	r2, #1
	} while (loop);
     72e:	e75c      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_plus = true;
     730:	f04f 0e01 	mov.w	lr, #1
     734:	e759      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_space = true;
     736:	2601      	movs	r6, #1
     738:	e757      	b.n	5ea <cbvprintf+0x4e>
			conv->flag_hash = true;
     73a:	f04f 0c01 	mov.w	ip, #1
     73e:	e754      	b.n	5ea <cbvprintf+0x4e>
		switch (*sp) {
     740:	2001      	movs	r0, #1
     742:	e752      	b.n	5ea <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     744:	4633      	mov	r3, r6
     746:	fb0c 0202 	mla	r2, ip, r2, r0
     74a:	3a30      	subs	r2, #48	; 0x30
     74c:	461e      	mov	r6, r3
     74e:	f816 0b01 	ldrb.w	r0, [r6], #1
     752:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     756:	2f09      	cmp	r7, #9
     758:	d9f4      	bls.n	744 <cbvprintf+0x1a8>
	if (sp != wp) {
     75a:	4299      	cmp	r1, r3
     75c:	d093      	beq.n	686 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     75e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     762:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     764:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     766:	f362 0141 	bfi	r1, r2, #1, #1
     76a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     76e:	e78a      	b.n	686 <cbvprintf+0xea>
     770:	460b      	mov	r3, r1
	size_t val = 0;
     772:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     774:	f04f 0c0a 	mov.w	ip, #10
     778:	e7e8      	b.n	74c <cbvprintf+0x1b0>
		conv->prec_star = true;
     77a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     77e:	3302      	adds	r3, #2
		conv->prec_star = true;
     780:	f042 0204 	orr.w	r2, r2, #4
     784:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     788:	461f      	mov	r7, r3
     78a:	f817 2b01 	ldrb.w	r2, [r7], #1
     78e:	2a6c      	cmp	r2, #108	; 0x6c
     790:	d041      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     792:	d825      	bhi.n	7e0 <cbvprintf+0x244>
     794:	2a68      	cmp	r2, #104	; 0x68
     796:	d02b      	beq.n	7f0 <cbvprintf+0x254>
     798:	2a6a      	cmp	r2, #106	; 0x6a
     79a:	d046      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     79c:	2a4c      	cmp	r2, #76	; 0x4c
     79e:	d04c      	beq.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     7a0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     7a2:	f817 2b01 	ldrb.w	r2, [r7], #1
     7a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     7aa:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     7ac:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7b0:	f200 80d9 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
     7b4:	2a57      	cmp	r2, #87	; 0x57
     7b6:	d84d      	bhi.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
     7b8:	2a41      	cmp	r2, #65	; 0x41
     7ba:	d003      	beq.n	7c4 <cbvprintf+0x228>
     7bc:	3a45      	subs	r2, #69	; 0x45
     7be:	2a02      	cmp	r2, #2
     7c0:	f200 80d1 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->specifier_cat = SPECIFIER_FP;
     7c4:	2204      	movs	r2, #4
     7c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     7ca:	f362 0302 	bfi	r3, r2, #0, #3
     7ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     7d2:	2301      	movs	r3, #1
			break;
     7d4:	e09e      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		val = 10U * val + *sp++ - '0';
     7d6:	fb06 2101 	mla	r1, r6, r1, r2
     7da:	4603      	mov	r3, r0
     7dc:	3930      	subs	r1, #48	; 0x30
     7de:	e764      	b.n	6aa <cbvprintf+0x10e>
	switch (*sp) {
     7e0:	2a74      	cmp	r2, #116	; 0x74
     7e2:	d026      	beq.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     7e4:	2a7a      	cmp	r2, #122	; 0x7a
     7e6:	d1db      	bne.n	7a0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     7e8:	2206      	movs	r2, #6
     7ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7ee:	e00d      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		if (*++sp == 'h') {
     7f0:	785a      	ldrb	r2, [r3, #1]
     7f2:	2a68      	cmp	r2, #104	; 0x68
     7f4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7f8:	d106      	bne.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
			conv->length_mod = LENGTH_HH;
     7fa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     7fc:	f361 02c6 	bfi	r2, r1, #3, #4
     800:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     804:	1c9f      	adds	r7, r3, #2
     806:	e7cc      	b.n	7a2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     808:	4613      	mov	r3, r2
     80a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     80c:	f362 03c6 	bfi	r3, r2, #3, #4
     810:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     814:	e7c5      	b.n	7a2 <cbvprintf+0x206>
		if (*++sp == 'l') {
     816:	785a      	ldrb	r2, [r3, #1]
     818:	2a6c      	cmp	r2, #108	; 0x6c
     81a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     81e:	d101      	bne.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			conv->length_mod = LENGTH_LL;
     820:	2104      	movs	r1, #4
     822:	e7eb      	b.n	7fc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     824:	4613      	mov	r3, r2
     826:	2203      	movs	r2, #3
     828:	e7f0      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->length_mod = LENGTH_J;
     82a:	2205      	movs	r2, #5
     82c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     830:	e7ec      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->length_mod = LENGTH_T;
     832:	2207      	movs	r2, #7
     834:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     838:	e7e8      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		conv->unsupported = true;
     83a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     83e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     842:	f023 0302 	bic.w	r3, r3, #2
     846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     84a:	f043 0302 	orr.w	r3, r3, #2
     84e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     852:	e7a6      	b.n	7a2 <cbvprintf+0x206>
     854:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     858:	2920      	cmp	r1, #32
     85a:	f200 8084 	bhi.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
     85e:	a001      	add	r0, pc, #4	; (adr r0, 864 <CONFIG_ISR_STACK_SIZE+0x64>)
     860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     864:	00000929 	.word	0x00000929
     868:	00000967 	.word	0x00000967
     86c:	00000967 	.word	0x00000967
     870:	00000967 	.word	0x00000967
     874:	00000967 	.word	0x00000967
     878:	00000967 	.word	0x00000967
     87c:	00000967 	.word	0x00000967
     880:	00000967 	.word	0x00000967
     884:	00000967 	.word	0x00000967
     888:	000007c5 	.word	0x000007c5
     88c:	00000967 	.word	0x00000967
     890:	00000929 	.word	0x00000929
     894:	000008e9 	.word	0x000008e9
     898:	000007c5 	.word	0x000007c5
     89c:	000007c5 	.word	0x000007c5
     8a0:	000007c5 	.word	0x000007c5
     8a4:	00000967 	.word	0x00000967
     8a8:	000008e9 	.word	0x000008e9
     8ac:	00000967 	.word	0x00000967
     8b0:	00000967 	.word	0x00000967
     8b4:	00000967 	.word	0x00000967
     8b8:	00000967 	.word	0x00000967
     8bc:	00000931 	.word	0x00000931
     8c0:	00000929 	.word	0x00000929
     8c4:	0000094d 	.word	0x0000094d
     8c8:	00000967 	.word	0x00000967
     8cc:	00000967 	.word	0x00000967
     8d0:	0000094d 	.word	0x0000094d
     8d4:	00000967 	.word	0x00000967
     8d8:	00000929 	.word	0x00000929
     8dc:	00000967 	.word	0x00000967
     8e0:	00000967 	.word	0x00000967
     8e4:	00000929 	.word	0x00000929
		conv->specifier_cat = SPECIFIER_SINT;
     8e8:	2001      	movs	r0, #1
     8ea:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     8ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     8f2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     8f6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     8f8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     8fc:	bf02      	ittt	eq
     8fe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     902:	f041 0101 	orreq.w	r1, r1, #1
     906:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     90a:	2a63      	cmp	r2, #99	; 0x63
     90c:	d131      	bne.n	972 <CONFIG_ISR_STACK_SIZE+0x172>
			unsupported = (conv->length_mod != LENGTH_NONE);
     90e:	3b00      	subs	r3, #0
     910:	bf18      	it	ne
     912:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     914:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     918:	f3c2 0140 	ubfx	r1, r2, #1, #1
     91c:	430b      	orrs	r3, r1
     91e:	f363 0241 	bfi	r2, r3, #1, #1
     922:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     926:	e6d8      	b.n	6da <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     928:	2002      	movs	r0, #2
     92a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     92e:	e7de      	b.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
		conv->specifier_cat = SPECIFIER_PTR;
     930:	2103      	movs	r1, #3
     932:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     936:	f003 0378 	and.w	r3, r3, #120	; 0x78
     93a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     93e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     942:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     944:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     948:	4143      	adcs	r3, r0
     94a:	e7e3      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->specifier_cat = SPECIFIER_PTR;
     94c:	2103      	movs	r1, #3
     94e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     952:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     956:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     95a:	bf14      	ite	ne
     95c:	2301      	movne	r3, #1
     95e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     960:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     964:	e7d6      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->invalid = true;
     966:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     96a:	f043 0301 	orr.w	r3, r3, #1
     96e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     972:	2300      	movs	r3, #0
     974:	e7ce      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		} else if (conv->width_present) {
     976:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     97a:	2a00      	cmp	r2, #0
		int width = -1;
     97c:	bfac      	ite	ge
     97e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     982:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     986:	e6ba      	b.n	6fe <cbvprintf+0x162>
		} else if (conv->prec_present) {
     988:	079b      	lsls	r3, r3, #30
     98a:	f57f aec7 	bpl.w	71c <cbvprintf+0x180>
			precision = conv->prec_value;
     98e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     992:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     994:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     998:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     99c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     9a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     9a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     9a6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     9aa:	d136      	bne.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
			switch (length_mod) {
     9ac:	1ed3      	subs	r3, r2, #3
     9ae:	2b04      	cmp	r3, #4
     9b0:	d820      	bhi.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
     9b2:	e8df f003 	tbb	[pc, r3]
     9b6:	0703      	.short	0x0703
     9b8:	1f07      	.short	0x1f07
     9ba:	1f          	.byte	0x1f
     9bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9bc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     9c0:	17c1      	asrs	r1, r0, #31
     9c2:	e004      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
					(sint_value_type)va_arg(ap, intmax_t);
     9c4:	3407      	adds	r4, #7
     9c6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     9ca:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     9ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     9d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9d6:	f013 0603 	ands.w	r6, r3, #3
     9da:	d054      	beq.n	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			OUTS(sp, fp);
     9dc:	463b      	mov	r3, r7
     9de:	4652      	mov	r2, sl
     9e0:	4659      	mov	r1, fp
     9e2:	9802      	ldr	r0, [sp, #8]
     9e4:	f007 f9f0 	bl	7dc8 <outs>
     9e8:	2800      	cmp	r0, #0
     9ea:	f2c0 8143 	blt.w	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     9ee:	4405      	add	r5, r0
			continue;
     9f0:	46ba      	mov	sl, r7
     9f2:	e5db      	b.n	5ac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9f4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     9f8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
     9fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a02:	d105      	bne.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
				value->uint = (unsigned char)value->uint;
     a04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a08:	930a      	str	r3, [sp, #40]	; 0x28
     a0a:	2300      	movs	r3, #0
     a0c:	930b      	str	r3, [sp, #44]	; 0x2c
     a0e:	e7e0      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
			} else if (length_mod == LENGTH_H) {
     a10:	2a02      	cmp	r2, #2
     a12:	d1de      	bne.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
				value->sint = (short)value->sint;
     a14:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a18:	e7d2      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a1a:	2b02      	cmp	r3, #2
     a1c:	d123      	bne.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
			switch (length_mod) {
     a1e:	1ed3      	subs	r3, r2, #3
     a20:	2b04      	cmp	r3, #4
     a22:	d813      	bhi.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
     a24:	e8df f003 	tbb	[pc, r3]
     a28:	120a0a03 	.word	0x120a0a03
     a2c:	12          	.byte	0x12
     a2d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     a2e:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     a30:	6820      	ldr	r0, [r4, #0]
     a32:	1d23      	adds	r3, r4, #4
     a34:	900a      	str	r0, [sp, #40]	; 0x28
     a36:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a38:	461c      	mov	r4, r3
     a3a:	e7ca      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
					(uint_value_type)va_arg(ap,
     a3c:	3407      	adds	r4, #7
     a3e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     a42:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     a46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     a4a:	e7f5      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
					(uint_value_type)va_arg(ap, size_t);
     a4c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a50:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     a52:	930a      	str	r3, [sp, #40]	; 0x28
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a5a:	d0d3      	beq.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			} else if (length_mod == LENGTH_H) {
     a5c:	2a02      	cmp	r2, #2
     a5e:	d1b8      	bne.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
				value->uint = (unsigned short)value->uint;
     a60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     a64:	e7d0      	b.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
		} else if (specifier_cat == SPECIFIER_FP) {
     a66:	2b04      	cmp	r3, #4
     a68:	d107      	bne.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			if (length_mod == LENGTH_UPPER_L) {
     a6a:	3407      	adds	r4, #7
     a6c:	f024 0407 	bic.w	r4, r4, #7
     a70:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     a74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     a78:	e7ab      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     a7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     a7c:	bf04      	itt	eq
     a7e:	f854 3b04 	ldreq.w	r3, [r4], #4
     a82:	930a      	streq	r3, [sp, #40]	; 0x28
     a84:	e7a5      	b.n	9d2 <CONFIG_ISR_STACK_SIZE+0x1d2>
		switch (conv->specifier) {
     a86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     a8a:	2878      	cmp	r0, #120	; 0x78
     a8c:	d8b0      	bhi.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     a8e:	2862      	cmp	r0, #98	; 0x62
     a90:	d822      	bhi.n	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     a92:	2825      	cmp	r0, #37	; 0x25
     a94:	f43f ad93 	beq.w	5be <cbvprintf+0x22>
     a98:	2858      	cmp	r0, #88	; 0x58
     a9a:	d1a9      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			bps = encode_uint(value->uint, conv, buf, bpe);
     a9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     aa0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     aa4:	9300      	str	r3, [sp, #0]
     aa6:	aa0c      	add	r2, sp, #48	; 0x30
     aa8:	ab04      	add	r3, sp, #16
     aaa:	f007 f942 	bl	7d32 <encode_uint>
     aae:	4682      	mov	sl, r0
			if (precision >= 0) {
     ab0:	f1b8 0f00 	cmp.w	r8, #0
     ab4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ab8:	db0c      	blt.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
				conv->flag_zero = false;
     aba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     abe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ac2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     ac6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     ac8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     acc:	d902      	bls.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
					conv->pad0_value = precision - (int)len;
     ace:	eba8 0303 	sub.w	r3, r8, r3
     ad2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     ad4:	4680      	mov	r8, r0
     ad6:	e03d      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     ad8:	3863      	subs	r0, #99	; 0x63
     ada:	2815      	cmp	r0, #21
     adc:	d888      	bhi.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     ade:	a101      	add	r1, pc, #4	; (adr r1, ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>)
     ae0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ae4:	00000b65 	.word	0x00000b65
     ae8:	00000bc9 	.word	0x00000bc9
     aec:	000009f1 	.word	0x000009f1
     af0:	000009f1 	.word	0x000009f1
     af4:	000009f1 	.word	0x000009f1
     af8:	000009f1 	.word	0x000009f1
     afc:	00000bc9 	.word	0x00000bc9
     b00:	000009f1 	.word	0x000009f1
     b04:	000009f1 	.word	0x000009f1
     b08:	000009f1 	.word	0x000009f1
     b0c:	000009f1 	.word	0x000009f1
     b10:	00000c27 	.word	0x00000c27
     b14:	00000bf5 	.word	0x00000bf5
     b18:	00000bf9 	.word	0x00000bf9
     b1c:	000009f1 	.word	0x000009f1
     b20:	000009f1 	.word	0x000009f1
     b24:	00000b3d 	.word	0x00000b3d
     b28:	000009f1 	.word	0x000009f1
     b2c:	00000bf5 	.word	0x00000bf5
     b30:	000009f1 	.word	0x000009f1
     b34:	000009f1 	.word	0x000009f1
     b38:	00000bf5 	.word	0x00000bf5
			if (precision >= 0) {
     b3c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b44:	db0a      	blt.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
				len = strnlen(bps, precision);
     b46:	4641      	mov	r1, r8
     b48:	4650      	mov	r0, sl
     b4a:	f007 f9f9 	bl	7f40 <strnlen>
		char sign = 0;
     b4e:	2600      	movs	r6, #0
			bpe = bps + len;
     b50:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     b54:	f1ba 0f00 	cmp.w	sl, #0
     b58:	d10c      	bne.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
     b5a:	e749      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
				len = strlen(bps);
     b5c:	4650      	mov	r0, sl
     b5e:	f007 f9e8 	bl	7f32 <strlen>
     b62:	e7f4      	b.n	b4e <CONFIG_ISR_STACK_SIZE+0x34e>
			break;
     b64:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     b68:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b6c:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     b70:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     b74:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     b78:	b106      	cbz	r6, b7c <CONFIG_ISR_STACK_SIZE+0x37c>
			nj_len += 1U;
     b7a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     b7c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b80:	06d0      	lsls	r0, r2, #27
     b82:	d56b      	bpl.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
			nj_len += 2U;
     b84:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     b86:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     b88:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     b8a:	bf48      	it	mi
     b8c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     b8e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     b90:	bf48      	it	mi
     b92:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     b94:	f1b9 0f00 	cmp.w	r9, #0
     b98:	dd79      	ble.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
			if (!conv->flag_dash) {
     b9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     b9e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     ba2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     ba6:	9303      	str	r3, [sp, #12]
     ba8:	0753      	lsls	r3, r2, #29
     baa:	d470      	bmi.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
				if (conv->flag_zero) {
     bac:	0650      	lsls	r0, r2, #25
     bae:	d564      	bpl.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
					if (sign != 0) {
     bb0:	b146      	cbz	r6, bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
						OUTC(sign);
     bb2:	4659      	mov	r1, fp
     bb4:	4630      	mov	r0, r6
     bb6:	9b02      	ldr	r3, [sp, #8]
     bb8:	4798      	blx	r3
     bba:	2800      	cmp	r0, #0
     bbc:	db5a      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
						sign = 0;
     bbe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     bc0:	3501      	adds	r5, #1
						sign = 0;
     bc2:	461e      	mov	r6, r3
					pad = '0';
     bc4:	2330      	movs	r3, #48	; 0x30
     bc6:	e059      	b.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
			if (conv->flag_plus) {
     bc8:	071e      	lsls	r6, r3, #28
     bca:	d411      	bmi.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				sign = ' ';
     bcc:	f013 0610 	ands.w	r6, r3, #16
     bd0:	bf18      	it	ne
     bd2:	2620      	movne	r6, #32
			sint = value->sint;
     bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     bd8:	2a00      	cmp	r2, #0
     bda:	f173 0100 	sbcs.w	r1, r3, #0
     bde:	f6bf af5d 	bge.w	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
				value->uint = (uint_value_type)-sint;
     be2:	4252      	negs	r2, r2
     be4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     be8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     bea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     bee:	e755      	b.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
				sign = '+';
     bf0:	262b      	movs	r6, #43	; 0x2b
     bf2:	e7ef      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		switch (conv->specifier) {
     bf4:	2600      	movs	r6, #0
     bf6:	e751      	b.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
			if (value->ptr != NULL) {
     bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
     bfa:	b348      	cbz	r0, c50 <CONFIG_ISR_STACK_SIZE+0x450>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bfc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c00:	9300      	str	r3, [sp, #0]
     c02:	2100      	movs	r1, #0
     c04:	ab04      	add	r3, sp, #16
     c06:	aa0c      	add	r2, sp, #48	; 0x30
     c08:	f007 f893 	bl	7d32 <encode_uint>
				conv->altform_0c = true;
     c0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c10:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c12:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c16:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c1a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     c1e:	2600      	movs	r6, #0
				conv->altform_0c = true;
     c20:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     c24:	e744      	b.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
				store_count(conv, value->ptr, count);
     c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c28:	2a07      	cmp	r2, #7
     c2a:	f63f aee1 	bhi.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     c2e:	e8df f002 	tbb	[pc, r2]
     c32:	040d      	.short	0x040d
     c34:	08080d06 	.word	0x08080d06
     c38:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     c3a:	701d      	strb	r5, [r3, #0]
		break;
     c3c:	e6d8      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(short *)dp = (short)count;
     c3e:	801d      	strh	r5, [r3, #0]
		break;
     c40:	e6d6      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(intmax_t *)dp = (intmax_t)count;
     c42:	4628      	mov	r0, r5
     c44:	17e9      	asrs	r1, r5, #31
     c46:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     c4a:	e6d1      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c4c:	601d      	str	r5, [r3, #0]
		break;
     c4e:	e6cf      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			bpe = bps + 5;
     c50:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d18 <CONFIG_ISR_STACK_SIZE+0x518>
     c54:	4606      	mov	r6, r0
			bps = "(nil)";
     c56:	f1a8 0a05 	sub.w	sl, r8, #5
     c5a:	e78b      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
		} else if (conv->altform_0) {
     c5c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c5e:	bf48      	it	mi
     c60:	3301      	addmi	r3, #1
     c62:	e790      	b.n	b86 <CONFIG_ISR_STACK_SIZE+0x386>
					OUTC(pad);
     c64:	4618      	mov	r0, r3
     c66:	9303      	str	r3, [sp, #12]
     c68:	4659      	mov	r1, fp
     c6a:	9b02      	ldr	r3, [sp, #8]
     c6c:	4798      	blx	r3
     c6e:	2800      	cmp	r0, #0
     c70:	9b03      	ldr	r3, [sp, #12]
     c72:	da04      	bge.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
#undef OUTS
#undef OUTC
}
     c74:	b011      	add	sp, #68	; 0x44
     c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     c7a:	2320      	movs	r3, #32
     c7c:	444d      	add	r5, r9
     c7e:	464a      	mov	r2, r9
				while (width-- > 0) {
     c80:	2a00      	cmp	r2, #0
     c82:	eba5 0109 	sub.w	r1, r5, r9
     c86:	f109 39ff 	add.w	r9, r9, #4294967295
     c8a:	dceb      	bgt.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
     c8c:	460d      	mov	r5, r1
		if (sign != 0) {
     c8e:	b136      	cbz	r6, c9e <CONFIG_ISR_STACK_SIZE+0x49e>
			OUTC(sign);
     c90:	4659      	mov	r1, fp
     c92:	4630      	mov	r0, r6
     c94:	9b02      	ldr	r3, [sp, #8]
     c96:	4798      	blx	r3
     c98:	2800      	cmp	r0, #0
     c9a:	dbeb      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     c9c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     c9e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ca2:	06d9      	lsls	r1, r3, #27
     ca4:	d401      	bmi.n	caa <CONFIG_ISR_STACK_SIZE+0x4aa>
     ca6:	071a      	lsls	r2, r3, #28
     ca8:	d506      	bpl.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
				OUTC('0');
     caa:	4659      	mov	r1, fp
     cac:	2030      	movs	r0, #48	; 0x30
     cae:	9b02      	ldr	r3, [sp, #8]
     cb0:	4798      	blx	r3
     cb2:	2800      	cmp	r0, #0
     cb4:	dbde      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cb6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cbc:	06db      	lsls	r3, r3, #27
     cbe:	d507      	bpl.n	cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
				OUTC(conv->specifier);
     cc0:	4659      	mov	r1, fp
     cc2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cc6:	9b02      	ldr	r3, [sp, #8]
     cc8:	4798      	blx	r3
     cca:	2800      	cmp	r0, #0
     ccc:	dbd2      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cce:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     cd0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cd2:	442e      	add	r6, r5
     cd4:	1b73      	subs	r3, r6, r5
     cd6:	2b00      	cmp	r3, #0
     cd8:	dc16      	bgt.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
			OUTS(bps, bpe);
     cda:	4643      	mov	r3, r8
     cdc:	4652      	mov	r2, sl
     cde:	4659      	mov	r1, fp
     ce0:	9802      	ldr	r0, [sp, #8]
     ce2:	f007 f871 	bl	7dc8 <outs>
     ce6:	2800      	cmp	r0, #0
     ce8:	dbc4      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     cea:	4405      	add	r5, r0
		while (width > 0) {
     cec:	44a9      	add	r9, r5
     cee:	eba9 0305 	sub.w	r3, r9, r5
     cf2:	2b00      	cmp	r3, #0
     cf4:	f77f ae7c 	ble.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			OUTC(' ');
     cf8:	4659      	mov	r1, fp
     cfa:	2020      	movs	r0, #32
     cfc:	9b02      	ldr	r3, [sp, #8]
     cfe:	4798      	blx	r3
     d00:	2800      	cmp	r0, #0
     d02:	dbb7      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     d04:	3501      	adds	r5, #1
			--width;
     d06:	e7f2      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
				OUTC('0');
     d08:	4659      	mov	r1, fp
     d0a:	2030      	movs	r0, #48	; 0x30
     d0c:	9b02      	ldr	r3, [sp, #8]
     d0e:	4798      	blx	r3
     d10:	2800      	cmp	r0, #0
     d12:	dbaf      	blt.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
     d14:	3501      	adds	r5, #1
     d16:	e7dd      	b.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
     d18:	00008afd 	.word	0x00008afd

00000d1c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d1c:	4604      	mov	r4, r0
     d1e:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     d20:	f04f 0220 	mov.w	r2, #32
     d24:	f3ef 8311 	mrs	r3, BASEPRI
     d28:	f382 8812 	msr	BASEPRI_MAX, r2
     d2c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
     d30:	f001 ffe0 	bl	2cf4 <sys_clock_disable>

	sys_arch_reboot(type);
     d34:	4620      	mov	r0, r4
     d36:	f001 f8e1 	bl	1efc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d3a:	4803      	ldr	r0, [pc, #12]	; (d48 <sys_reboot+0x2c>)
     d3c:	f006 ffcf 	bl	7cde <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d40:	f000 fcae 	bl	16a0 <arch_cpu_idle>
     d44:	e7fc      	b.n	d40 <sys_reboot+0x24>
     d46:	bf00      	nop
     d48:	00008afe 	.word	0x00008afe

00000d4c <nordicsemi_nrf91_init>:
     d4c:	f04f 0220 	mov.w	r2, #32
     d50:	f3ef 8311 	mrs	r3, BASEPRI
     d54:	f382 8812 	msr	BASEPRI_MAX, r2
     d58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     d5c:	2101      	movs	r1, #1
     d5e:	4a04      	ldr	r2, [pc, #16]	; (d70 <nordicsemi_nrf91_init+0x24>)
     d60:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d64:	f383 8811 	msr	BASEPRI, r3
     d68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d6c:	2000      	movs	r0, #0
     d6e:	4770      	bx	lr
     d70:	50039000 	.word	0x50039000

00000d74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d74:	b120      	cbz	r0, d80 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d76:	4b03      	ldr	r3, [pc, #12]	; (d84 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     d78:	0180      	lsls	r0, r0, #6
     d7a:	f043 0301 	orr.w	r3, r3, #1
     d7e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     d80:	4770      	bx	lr
     d82:	bf00      	nop
     d84:	00008730 	.word	0x00008730

00000d88 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
     d88:	b084      	sub	sp, #16
     d8a:	ab04      	add	r3, sp, #16
     d8c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
     d90:	f89d 3004 	ldrb.w	r3, [sp, #4]
     d94:	2b06      	cmp	r3, #6
     d96:	d107      	bne.n	da8 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     d98:	2201      	movs	r2, #1
     d9a:	4b04      	ldr	r3, [pc, #16]	; (dac <pm_power_state_set+0x24>)
     d9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     da0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     da4:	bf20      	wfe
    while (true)
     da6:	e7fd      	b.n	da4 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
     da8:	b004      	add	sp, #16
     daa:	4770      	bx	lr
     dac:	50004000 	.word	0x50004000

00000db0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     db4:	4605      	mov	r5, r0
	__asm__ volatile(
     db6:	f04f 0320 	mov.w	r3, #32
     dba:	f3ef 8611 	mrs	r6, BASEPRI
     dbe:	f383 8812 	msr	BASEPRI_MAX, r3
     dc2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     dc6:	481e      	ldr	r0, [pc, #120]	; (e40 <pm_state_notify+0x90>)
     dc8:	f002 fd26 	bl	3818 <z_spin_lock_valid>
     dcc:	b940      	cbnz	r0, de0 <pm_state_notify+0x30>
     dce:	491d      	ldr	r1, [pc, #116]	; (e44 <pm_state_notify+0x94>)
     dd0:	481d      	ldr	r0, [pc, #116]	; (e48 <pm_state_notify+0x98>)
     dd2:	2281      	movs	r2, #129	; 0x81
     dd4:	f006 ff83 	bl	7cde <printk>
     dd8:	2181      	movs	r1, #129	; 0x81
     dda:	481a      	ldr	r0, [pc, #104]	; (e44 <pm_state_notify+0x94>)
     ddc:	f007 f80a 	bl	7df4 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
     de0:	4817      	ldr	r0, [pc, #92]	; (e40 <pm_state_notify+0x90>)
     de2:	f002 fd35 	bl	3850 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     de6:	4b19      	ldr	r3, [pc, #100]	; (e4c <pm_state_notify+0x9c>)
     de8:	681c      	ldr	r4, [r3, #0]
     dea:	2c00      	cmp	r4, #0
     dec:	bf38      	it	cc
     dee:	2400      	movcc	r4, #0
     df0:	b19c      	cbz	r4, e1a <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
     df2:	f04f 090c 	mov.w	r9, #12
     df6:	4f16      	ldr	r7, [pc, #88]	; (e50 <pm_state_notify+0xa0>)
     df8:	f8df 8058 	ldr.w	r8, [pc, #88]	; e54 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
     dfc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     e00:	2d00      	cmp	r5, #0
     e02:	bf08      	it	eq
     e04:	4613      	moveq	r3, r2
		if (callback) {
     e06:	b12b      	cbz	r3, e14 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
     e08:	f898 2014 	ldrb.w	r2, [r8, #20]
     e0c:	fb09 f202 	mul.w	r2, r9, r2
     e10:	5cb8      	ldrb	r0, [r7, r2]
     e12:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     e14:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e16:	2c00      	cmp	r4, #0
     e18:	d1f0      	bne.n	dfc <pm_state_notify+0x4c>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e1a:	4809      	ldr	r0, [pc, #36]	; (e40 <pm_state_notify+0x90>)
     e1c:	f002 fd0a 	bl	3834 <z_spin_unlock_valid>
     e20:	b940      	cbnz	r0, e34 <pm_state_notify+0x84>
     e22:	4908      	ldr	r1, [pc, #32]	; (e44 <pm_state_notify+0x94>)
     e24:	4808      	ldr	r0, [pc, #32]	; (e48 <pm_state_notify+0x98>)
     e26:	22ac      	movs	r2, #172	; 0xac
     e28:	f006 ff59 	bl	7cde <printk>
     e2c:	21ac      	movs	r1, #172	; 0xac
     e2e:	4805      	ldr	r0, [pc, #20]	; (e44 <pm_state_notify+0x94>)
     e30:	f006 ffe0 	bl	7df4 <assert_post_action>
	__asm__ volatile(
     e34:	f386 8811 	msr	BASEPRI, r6
     e38:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e40:	20000238 	.word	0x20000238
     e44:	00008b2b 	.word	0x00008b2b
     e48:	00008b51 	.word	0x00008b51
     e4c:	2000023c 	.word	0x2000023c
     e50:	20000248 	.word	0x20000248
     e54:	200009c4 	.word	0x200009c4

00000e58 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e58:	2201      	movs	r2, #1
     e5a:	f000 031f 	and.w	r3, r0, #31
     e5e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     e60:	4b08      	ldr	r3, [pc, #32]	; (e84 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     e62:	0940      	lsrs	r0, r0, #5
     e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e68:	e8d0 3fef 	ldaex	r3, [r0]
     e6c:	ea43 0102 	orr.w	r1, r3, r2
     e70:	e8c0 1fec 	stlex	ip, r1, [r0]
     e74:	f1bc 0f00 	cmp.w	ip, #0
     e78:	d1f6      	bne.n	e68 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
     e7a:	421a      	tst	r2, r3
}
     e7c:	bf14      	ite	ne
     e7e:	2001      	movne	r0, #1
     e80:	2000      	moveq	r0, #0
     e82:	4770      	bx	lr
     e84:	20000254 	.word	0x20000254

00000e88 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
     e88:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     e8a:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     e8c:	4b1a      	ldr	r3, [pc, #104]	; (ef8 <pm_system_resume+0x70>)
{
     e8e:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
     e90:	7d1d      	ldrb	r5, [r3, #20]
     e92:	f005 031f 	and.w	r3, r5, #31
     e96:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e98:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e9a:	4b18      	ldr	r3, [pc, #96]	; (efc <pm_system_resume+0x74>)
     e9c:	0969      	lsrs	r1, r5, #5
     e9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ea2:	e8d3 1fef 	ldaex	r1, [r3]
     ea6:	ea01 0400 	and.w	r4, r1, r0
     eaa:	e8c3 4fec 	stlex	ip, r4, [r3]
     eae:	f1bc 0f00 	cmp.w	ip, #0
     eb2:	d1f6      	bne.n	ea2 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     eb4:	4211      	tst	r1, r2
     eb6:	d017      	beq.n	ee8 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
     eb8:	220c      	movs	r2, #12
     eba:	4c11      	ldr	r4, [pc, #68]	; (f00 <pm_system_resume+0x78>)
     ebc:	ab01      	add	r3, sp, #4
     ebe:	fb02 4205 	mla	r2, r2, r5, r4
     ec2:	ca07      	ldmia	r2, {r0, r1, r2}
     ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     ec8:	4a0e      	ldr	r2, [pc, #56]	; (f04 <pm_system_resume+0x7c>)
     eca:	b17a      	cbz	r2, eec <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
     ecc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     ed0:	f006 ff98 	bl	7e04 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     ed4:	2000      	movs	r0, #0
     ed6:	f7ff ff6b 	bl	db0 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     eda:	230c      	movs	r3, #12
     edc:	2200      	movs	r2, #0
     ede:	436b      	muls	r3, r5
     ee0:	18e1      	adds	r1, r4, r3
     ee2:	50e2      	str	r2, [r4, r3]
     ee4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
     ee8:	b005      	add	sp, #20
     eea:	bd30      	pop	{r4, r5, pc}
     eec:	f382 8811 	msr	BASEPRI, r2
     ef0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     ef4:	e7ee      	b.n	ed4 <pm_system_resume+0x4c>
     ef6:	bf00      	nop
     ef8:	200009c4 	.word	0x200009c4
     efc:	20000244 	.word	0x20000244
     f00:	20000248 	.word	0x20000248
     f04:	00007e05 	.word	0x00007e05

00000f08 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f0c:	4b33      	ldr	r3, [pc, #204]	; (fdc <pm_system_suspend+0xd4>)
{
     f0e:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
     f10:	7d1c      	ldrb	r4, [r3, #20]
{
     f12:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
     f14:	4620      	mov	r0, r4
     f16:	f7ff ff9f 	bl	e58 <atomic_test_and_set_bit.constprop.0>
     f1a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ff4 <pm_system_suspend+0xec>
     f1e:	b960      	cbnz	r0, f3a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
     f20:	250c      	movs	r5, #12
     f22:	466e      	mov	r6, sp
     f24:	fb05 8504 	mla	r5, r5, r4, r8
     f28:	463a      	mov	r2, r7
     f2a:	4621      	mov	r1, r4
     f2c:	4630      	mov	r0, r6
     f2e:	f006 ff81 	bl	7e34 <pm_policy_next_state>
     f32:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     f36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
     f3a:	230c      	movs	r3, #12
     f3c:	4363      	muls	r3, r4
     f3e:	f818 0003 	ldrb.w	r0, [r8, r3]
     f42:	eb08 0203 	add.w	r2, r8, r3
     f46:	0965      	lsrs	r5, r4, #5
     f48:	f004 061f 	and.w	r6, r4, #31
     f4c:	b3a8      	cbz	r0, fba <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     f4e:	1c7b      	adds	r3, r7, #1
     f50:	d00f      	beq.n	f72 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f52:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     f56:	2100      	movs	r1, #0
     f58:	f8d2 e008 	ldr.w	lr, [r2, #8]
     f5c:	4820      	ldr	r0, [pc, #128]	; (fe0 <pm_system_suspend+0xd8>)
     f5e:	2300      	movs	r3, #0
     f60:	fbec 010e 	umlal	r0, r1, ip, lr
     f64:	4a1f      	ldr	r2, [pc, #124]	; (fe4 <pm_system_suspend+0xdc>)
     f66:	f7ff f969 	bl	23c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f6a:	2101      	movs	r1, #1
     f6c:	1a38      	subs	r0, r7, r0
     f6e:	f003 ffa3 	bl	4eb8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f72:	f002 ff51 	bl	3e18 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f76:	2001      	movs	r0, #1
     f78:	f7ff ff1a 	bl	db0 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f7c:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     f7e:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <pm_system_suspend+0xe0>)
     f80:	40b2      	lsls	r2, r6
     f82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     f86:	e8d3 1fef 	ldaex	r1, [r3]
     f8a:	4311      	orrs	r1, r2
     f8c:	e8c3 1fe0 	stlex	r0, r1, [r3]
     f90:	2800      	cmp	r0, #0
     f92:	d1f8      	bne.n	f86 <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
     f94:	230c      	movs	r3, #12
     f96:	fb03 8404 	mla	r4, r3, r4, r8
     f9a:	ab05      	add	r3, sp, #20
     f9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     fa4:	4a11      	ldr	r2, [pc, #68]	; (fec <pm_system_suspend+0xe4>)
     fa6:	b11a      	cbz	r2, fb0 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
     fa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fac:	f7ff feec 	bl	d88 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
     fb0:	f7ff ff6a 	bl	e88 <pm_system_resume>
	k_sched_unlock();
     fb4:	f003 fb66 	bl	4684 <k_sched_unlock>
	bool ret = true;
     fb8:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
     fba:	2301      	movs	r3, #1
     fbc:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fbe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fc0:	4a0b      	ldr	r2, [pc, #44]	; (ff0 <pm_system_suspend+0xe8>)
     fc2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
     fc6:	e8d5 2fef 	ldaex	r2, [r5]
     fca:	401a      	ands	r2, r3
     fcc:	e8c5 2fe1 	stlex	r1, r2, [r5]
     fd0:	2900      	cmp	r1, #0
     fd2:	d1f8      	bne.n	fc6 <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
     fd4:	b008      	add	sp, #32
     fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fda:	bf00      	nop
     fdc:	200009c4 	.word	0x200009c4
     fe0:	000f423f 	.word	0x000f423f
     fe4:	000f4240 	.word	0x000f4240
     fe8:	20000244 	.word	0x20000244
     fec:	00000d89 	.word	0x00000d89
     ff0:	20000254 	.word	0x20000254
     ff4:	20000248 	.word	0x20000248

00000ff8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     ff8:	2800      	cmp	r0, #0
     ffa:	db0d      	blt.n	1018 <CONFIG_MAIN_STACK_SIZE+0x18>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ffc:	2201      	movs	r2, #1
     ffe:	0943      	lsrs	r3, r0, #5
    1000:	f000 001f 	and.w	r0, r0, #31
    1004:	fa02 f000 	lsl.w	r0, r2, r0
    1008:	4a04      	ldr	r2, [pc, #16]	; (101c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    100a:	3320      	adds	r3, #32
    100c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1014:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1018:	4770      	bx	lr
    101a:	bf00      	nop
    101c:	e000e100 	.word	0xe000e100

00001020 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1022:	2800      	cmp	r0, #0
{
    1024:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1026:	bf14      	ite	ne
    1028:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    102c:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    1030:	428a      	cmp	r2, r1
    1032:	d20b      	bcs.n	104c <config_regions+0x2c>
    1034:	2294      	movs	r2, #148	; 0x94
    1036:	4927      	ldr	r1, [pc, #156]	; (10d4 <config_regions+0xb4>)
    1038:	4827      	ldr	r0, [pc, #156]	; (10d8 <config_regions+0xb8>)
    103a:	f006 fe50 	bl	7cde <printk>
    103e:	2194      	movs	r1, #148	; 0x94
    1040:	4824      	ldr	r0, [pc, #144]	; (10d4 <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1042:	b003      	add	sp, #12
    1044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    1048:	f006 bed4 	b.w	7df4 <assert_post_action>
	if (end <= start) {
    104c:	d040      	beq.n	10d0 <config_regions+0xb0>
    104e:	460d      	mov	r5, r1
    1050:	4e22      	ldr	r6, [pc, #136]	; (10dc <config_regions+0xbc>)
		if (ram) {
    1052:	2800      	cmp	r0, #0
    1054:	d039      	beq.n	10ca <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1056:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    105a:	3501      	adds	r5, #1
    105c:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    105e:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1062:	d8f6      	bhi.n	1052 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1064:	fb02 f003 	mul.w	r0, r2, r3
    1068:	3a01      	subs	r2, #1
    106a:	434b      	muls	r3, r1
    106c:	9000      	str	r0, [sp, #0]
    106e:	481c      	ldr	r0, [pc, #112]	; (10e0 <config_regions+0xc0>)
    1070:	f006 fe35 	bl	7cde <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1074:	4b1b      	ldr	r3, [pc, #108]	; (10e4 <config_regions+0xc4>)
    1076:	f014 0f10 	tst.w	r4, #16
    107a:	491b      	ldr	r1, [pc, #108]	; (10e8 <config_regions+0xc8>)
    107c:	481b      	ldr	r0, [pc, #108]	; (10ec <config_regions+0xcc>)
    107e:	bf08      	it	eq
    1080:	4619      	moveq	r1, r3
    1082:	f006 fe2c 	bl	7cde <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1086:	f014 0f04 	tst.w	r4, #4
    108a:	bf14      	ite	ne
    108c:	2172      	movne	r1, #114	; 0x72
    108e:	212d      	moveq	r1, #45	; 0x2d
    1090:	4817      	ldr	r0, [pc, #92]	; (10f0 <config_regions+0xd0>)
    1092:	f006 fe24 	bl	7cde <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1096:	f014 0f02 	tst.w	r4, #2
    109a:	bf14      	ite	ne
    109c:	2177      	movne	r1, #119	; 0x77
    109e:	212d      	moveq	r1, #45	; 0x2d
    10a0:	4813      	ldr	r0, [pc, #76]	; (10f0 <config_regions+0xd0>)
    10a2:	f006 fe1c 	bl	7cde <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    10a6:	f014 0f01 	tst.w	r4, #1
    10aa:	bf0c      	ite	eq
    10ac:	212d      	moveq	r1, #45	; 0x2d
    10ae:	2178      	movne	r1, #120	; 0x78
    10b0:	480f      	ldr	r0, [pc, #60]	; (10f0 <config_regions+0xd0>)
    10b2:	f006 fe14 	bl	7cde <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    10b6:	216c      	movs	r1, #108	; 0x6c
    10b8:	480d      	ldr	r0, [pc, #52]	; (10f0 <config_regions+0xd0>)
    10ba:	f006 fe10 	bl	7cde <printk>
	PRINT("\n");
    10be:	480d      	ldr	r0, [pc, #52]	; (10f4 <config_regions+0xd4>)
}
    10c0:	b003      	add	sp, #12
    10c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    10c6:	f006 be0a 	b.w	7cde <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    10ca:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    10ce:	e7c4      	b.n	105a <config_regions+0x3a>
}
    10d0:	b003      	add	sp, #12
    10d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10d4:	00008b81 	.word	0x00008b81
    10d8:	00008b51 	.word	0x00008b51
    10dc:	50003000 	.word	0x50003000
    10e0:	00008ba2 	.word	0x00008ba2
    10e4:	00008b75 	.word	0x00008b75
    10e8:	00008b6c 	.word	0x00008b6c
    10ec:	00008d53 	.word	0x00008d53
    10f0:	00008bbc 	.word	0x00008bbc
    10f4:	000097f3 	.word	0x000097f3

000010f8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    10f8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    10fa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    10fe:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1100:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1104:	4825      	ldr	r0, [pc, #148]	; (119c <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1106:	4d26      	ldr	r5, [pc, #152]	; (11a0 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1108:	f006 fde9 	bl	7cde <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    110c:	6821      	ldr	r1, [r4, #0]
    110e:	4825      	ldr	r0, [pc, #148]	; (11a4 <spm_jump+0xac>)
    1110:	f006 fde5 	bl	7cde <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1114:	6829      	ldr	r1, [r5, #0]
    1116:	4824      	ldr	r0, [pc, #144]	; (11a8 <spm_jump+0xb0>)
    1118:	f006 fde1 	bl	7cde <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    111c:	2210      	movs	r2, #16
    111e:	2100      	movs	r1, #0
    1120:	4668      	mov	r0, sp
    1122:	f006 ff48 	bl	7fb6 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1126:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1128:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    112a:	9300      	str	r3, [sp, #0]
    112c:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    112e:	f000 ff3f 	bl	1fb0 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1132:	2001      	movs	r0, #1
    1134:	f000 ff6e 	bl	2014 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1138:	2000      	movs	r0, #0
    113a:	f000 ff57 	bl	1fec <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    113e:	2000      	movs	r0, #0
    1140:	f000 ff7c 	bl	203c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1144:	2101      	movs	r1, #1
    1146:	2000      	movs	r0, #0
    1148:	f000 ff96 	bl	2078 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    114c:	f000 ff8a 	bl	2064 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1150:	4816      	ldr	r0, [pc, #88]	; (11ac <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1152:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1154:	f006 fdc3 	bl	7cde <printk>
	NVIC_DisableIRQ(id);
    1158:	2008      	movs	r0, #8
    115a:	f7ff ff4d 	bl	ff8 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    115e:	4a14      	ldr	r2, [pc, #80]	; (11b0 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1160:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1164:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    1168:	2b00      	cmp	r3, #0
    116a:	da07      	bge.n	117c <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    116c:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1170:	3b02      	subs	r3, #2
    1172:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1174:	bf9c      	itt	ls
    1176:	4b0f      	ldrls	r3, [pc, #60]	; (11b4 <spm_jump+0xbc>)
    1178:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    117c:	2101      	movs	r1, #1
    117e:	2008      	movs	r0, #8
    1180:	f006 fe8f 	bl	7ea2 <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1188:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    118c:	0864      	lsrs	r4, r4, #1
    118e:	0064      	lsls	r4, r4, #1
    1190:	4620      	mov	r0, r4
    1192:	4621      	mov	r1, r4
    1194:	4622      	mov	r2, r4
    1196:	4623      	mov	r3, r4
    1198:	f7ff f9ce 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    119c:	00008bbf 	.word	0x00008bbf
    11a0:	00010004 	.word	0x00010004
    11a4:	00008bd6 	.word	0x00008bd6
    11a8:	00008beb 	.word	0x00008beb
    11ac:	00008c09 	.word	0x00008c09
    11b0:	50003000 	.word	0x50003000
    11b4:	80000100 	.word	0x80000100

000011b8 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    11b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    11bc:	4860      	ldr	r0, [pc, #384]	; (1340 <spm_config+0x188>)
    11be:	f006 fd8e 	bl	7cde <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    11c2:	2100      	movs	r1, #0
    11c4:	f240 1317 	movw	r3, #279	; 0x117
    11c8:	4608      	mov	r0, r1
    11ca:	2202      	movs	r2, #2
    11cc:	f7ff ff28 	bl	1020 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11d0:	4d5c      	ldr	r5, [pc, #368]	; (1344 <spm_config+0x18c>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    11d2:	f240 1307 	movw	r3, #263	; 0x107
    11d6:	2220      	movs	r2, #32
    11d8:	2102      	movs	r1, #2
    11da:	2000      	movs	r0, #0
    11dc:	f7ff ff20 	bl	1020 <config_regions>
	PRINT("\n");
    11e0:	4859      	ldr	r0, [pc, #356]	; (1348 <spm_config+0x190>)
    11e2:	f006 fd7c 	bl	7cde <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11e6:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11ea:	4b58      	ldr	r3, [pc, #352]	; (134c <spm_config+0x194>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11ec:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11f0:	429c      	cmp	r4, r3
    11f2:	d208      	bcs.n	1206 <spm_config+0x4e>
    11f4:	4956      	ldr	r1, [pc, #344]	; (1350 <spm_config+0x198>)
    11f6:	4857      	ldr	r0, [pc, #348]	; (1354 <spm_config+0x19c>)
    11f8:	2282      	movs	r2, #130	; 0x82
    11fa:	f006 fd70 	bl	7cde <printk>
    11fe:	2182      	movs	r1, #130	; 0x82
    1200:	4853      	ldr	r0, [pc, #332]	; (1350 <spm_config+0x198>)
    1202:	f006 fdf7 	bl	7df4 <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    1206:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    120a:	4e53      	ldr	r6, [pc, #332]	; (1358 <spm_config+0x1a0>)
    120c:	f1c4 041b 	rsb	r4, r4, #27
    1210:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1214:	b2e4      	uxtb	r4, r4
    1216:	05d2      	lsls	r2, r2, #23
    1218:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    121c:	d50a      	bpl.n	1234 <spm_config+0x7c>
    121e:	494f      	ldr	r1, [pc, #316]	; (135c <spm_config+0x1a4>)
    1220:	484c      	ldr	r0, [pc, #304]	; (1354 <spm_config+0x19c>)
    1222:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1226:	f006 fd5a 	bl	7cde <printk>
    122a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    122e:	484b      	ldr	r0, [pc, #300]	; (135c <spm_config+0x1a4>)
    1230:	f006 fde0 	bl	7df4 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1234:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1238:	05db      	lsls	r3, r3, #23
    123a:	d50a      	bpl.n	1252 <spm_config+0x9a>
    123c:	4947      	ldr	r1, [pc, #284]	; (135c <spm_config+0x1a4>)
    123e:	4845      	ldr	r0, [pc, #276]	; (1354 <spm_config+0x19c>)
    1240:	f240 127b 	movw	r2, #379	; 0x17b
    1244:	f006 fd4b 	bl	7cde <printk>
    1248:	f240 117b 	movw	r1, #379	; 0x17b
    124c:	4843      	ldr	r0, [pc, #268]	; (135c <spm_config+0x1a4>)
    124e:	f006 fdd1 	bl	7df4 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1252:	4b41      	ldr	r3, [pc, #260]	; (1358 <spm_config+0x1a0>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1254:	4842      	ldr	r0, [pc, #264]	; (1360 <spm_config+0x1a8>)
    1256:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    125a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    125e:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1262:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1266:	0152      	lsls	r2, r2, #5
    1268:	f006 fd39 	bl	7cde <printk>
	PRINT("\n");
    126c:	4836      	ldr	r0, [pc, #216]	; (1348 <spm_config+0x190>)
    126e:	f006 fd36 	bl	7cde <printk>
	int err = spm_secure_services_init();
    1272:	f000 f8af 	bl	13d4 <spm_secure_services_init>
	if (err != 0) {
    1276:	4601      	mov	r1, r0
    1278:	b110      	cbz	r0, 1280 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    127a:	483a      	ldr	r0, [pc, #232]	; (1364 <spm_config+0x1ac>)
    127c:	f006 fd2f 	bl	7cde <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1280:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1282:	4839      	ldr	r0, [pc, #228]	; (1368 <spm_config+0x1b0>)
    1284:	f006 fd2b 	bl	7cde <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1288:	f240 1317 	movw	r3, #279	; 0x117
    128c:	2204      	movs	r2, #4
    128e:	2100      	movs	r1, #0
    1290:	2001      	movs	r0, #1
    1292:	f7ff fec5 	bl	1020 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1296:	4d30      	ldr	r5, [pc, #192]	; (1358 <spm_config+0x1a0>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1298:	f240 1307 	movw	r3, #263	; 0x107
    129c:	2220      	movs	r2, #32
    129e:	2104      	movs	r1, #4
    12a0:	2001      	movs	r0, #1
    12a2:	f7ff febd 	bl	1020 <config_regions>
	PRINT("\n");
    12a6:	4828      	ldr	r0, [pc, #160]	; (1348 <spm_config+0x190>)
    12a8:	f006 fd19 	bl	7cde <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    12ac:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    12b0:	482e      	ldr	r0, [pc, #184]	; (136c <spm_config+0x1b4>)
    12b2:	f006 fd14 	bl	7cde <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    12b6:	4e2e      	ldr	r6, [pc, #184]	; (1370 <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    12b8:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    12bc:	4f2d      	ldr	r7, [pc, #180]	; (1374 <spm_config+0x1bc>)
    12be:	4d2e      	ldr	r5, [pc, #184]	; (1378 <spm_config+0x1c0>)
    12c0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1388 <spm_config+0x1d0>
    12c4:	f895 9005 	ldrb.w	r9, [r5, #5]
    12c8:	4621      	mov	r1, r4
    12ca:	f1b9 0f00 	cmp.w	r9, #0
    12ce:	bf14      	ite	ne
    12d0:	4633      	movne	r3, r6
    12d2:	463b      	moveq	r3, r7
    12d4:	4640      	mov	r0, r8
    12d6:	682a      	ldr	r2, [r5, #0]
    12d8:	f006 fd01 	bl	7cde <printk>
		if (!periph[i].nonsecure) {
    12dc:	f1b9 0f00 	cmp.w	r9, #0
    12e0:	d10c      	bne.n	12fc <spm_config+0x144>
			PRINT("\tSKIP\n");
    12e2:	4826      	ldr	r0, [pc, #152]	; (137c <spm_config+0x1c4>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12e4:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    12e6:	f006 fcfa 	bl	7cde <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12ea:	2c20      	cmp	r4, #32
    12ec:	f105 0508 	add.w	r5, r5, #8
    12f0:	d1e8      	bne.n	12c4 <spm_config+0x10c>
	PRINT("\n");
    12f2:	4815      	ldr	r0, [pc, #84]	; (1348 <spm_config+0x190>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    12f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    12f8:	f006 bcf1 	b.w	7cde <printk>
		err = spm_config_peripheral(periph[i].id, false);
    12fc:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    1300:	f995 0004 	ldrsb.w	r0, [r5, #4]
    1304:	f7ff fe78 	bl	ff8 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1308:	ea4f 0389 	mov.w	r3, r9, lsl #2
    130c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1310:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1314:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1318:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    131c:	d006      	beq.n	132c <spm_config+0x174>
	return present && (usel || split);
    131e:	2a00      	cmp	r2, #0
    1320:	da07      	bge.n	1332 <spm_config+0x17a>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1322:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1326:	3a02      	subs	r2, #2
    1328:	2a01      	cmp	r2, #1
    132a:	d802      	bhi.n	1332 <spm_config+0x17a>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    132c:	4a14      	ldr	r2, [pc, #80]	; (1380 <spm_config+0x1c8>)
    132e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1332:	2101      	movs	r1, #1
    1334:	4648      	mov	r0, r9
    1336:	f006 fdb4 	bl	7ea2 <irq_target_state_set>
			PRINT("\tOK\n");
    133a:	4812      	ldr	r0, [pc, #72]	; (1384 <spm_config+0x1cc>)
    133c:	e7d2      	b.n	12e4 <spm_config+0x12c>
    133e:	bf00      	nop
    1340:	00008c3f 	.word	0x00008c3f
    1344:	0000ffe0 	.word	0x0000ffe0
    1348:	000097f3 	.word	0x000097f3
    134c:	00000020 	.word	0x00000020
    1350:	00008b81 	.word	0x00008b81
    1354:	00008b51 	.word	0x00008b51
    1358:	50003000 	.word	0x50003000
    135c:	00008c63 	.word	0x00008c63
    1360:	00008c95 	.word	0x00008c95
    1364:	00008cdb 	.word	0x00008cdb
    1368:	00008d0b 	.word	0x00008d0b
    136c:	00008d2d 	.word	0x00008d2d
    1370:	00008c34 	.word	0x00008c34
    1374:	00008b79 	.word	0x00008b79
    1378:	00008738 	.word	0x00008738
    137c:	00008d56 	.word	0x00008d56
    1380:	80000100 	.word	0x80000100
    1384:	00008d5d 	.word	0x00008d5d
    1388:	00008d49 	.word	0x00008d49

0000138c <fw_info_find>:
 *                              at the allowed offsets from firmware_address.
 *
 * @return  A pointer to the fw_info struct if found. Otherwise NULL.
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
    138c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1390:	4607      	mov	r7, r0
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1392:	2600      	movs	r6, #0
{
    1394:	b085      	sub	sp, #20
    1396:	f8df 9034 	ldr.w	r9, [pc, #52]	; 13cc <fw_info_find+0x40>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    139a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 13d0 <fw_info_find+0x44>
    139e:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    13a0:	f859 4b04 	ldr.w	r4, [r9], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    13a4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	finfo = (const struct fw_info *)(fw_info_addr);
    13a8:	443c      	add	r4, r7
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    13aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    13ae:	220c      	movs	r2, #12
    13b0:	4629      	mov	r1, r5
    13b2:	4620      	mov	r0, r4
    13b4:	f006 fdcd 	bl	7f52 <memcmp>
    13b8:	b900      	cbnz	r0, 13bc <fw_info_find+0x30>
		if (finfo) {
    13ba:	b91c      	cbnz	r4, 13c4 <fw_info_find+0x38>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    13bc:	3601      	adds	r6, #1
    13be:	2e05      	cmp	r6, #5
    13c0:	d1ee      	bne.n	13a0 <fw_info_find+0x14>
			return finfo;
		}
	}
	return NULL;
    13c2:	2400      	movs	r4, #0
}
    13c4:	4620      	mov	r0, r4
    13c6:	b005      	add	sp, #20
    13c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    13cc:	00008838 	.word	0x00008838
    13d0:	00008700 	.word	0x00008700

000013d4 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    13d4:	2200      	movs	r2, #0
    13d6:	4802      	ldr	r0, [pc, #8]	; (13e0 <spm_secure_services_init+0xc>)
    13d8:	4611      	mov	r1, r2
    13da:	f003 bf01 	b.w	51e0 <nrf_cc3xx_platform_ctr_drbg_init>
    13de:	bf00      	nop
    13e0:	20000258 	.word	0x20000258

000013e4 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    13e4:	b570      	push	{r4, r5, r6, lr}
    13e6:	460c      	mov	r4, r1
    13e8:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    13ea:	4606      	mov	r6, r0
    13ec:	b950      	cbnz	r0, 1404 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    13ee:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    13f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    13f6:	4671      	mov	r1, lr
    13f8:	4672      	mov	r2, lr
    13fa:	4673      	mov	r3, lr
    13fc:	46f4      	mov	ip, lr
    13fe:	f38e 8c00 	msr	CPSR_fs, lr
    1402:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1404:	2a00      	cmp	r2, #0
    1406:	d0f2      	beq.n	13ee <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1408:	f006 fd8e 	bl	7f28 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    140c:	2801      	cmp	r0, #1
    140e:	d0ee      	beq.n	13ee <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1410:	4b0b      	ldr	r3, [pc, #44]	; (1440 <__acle_se_spm_request_read_nse+0x5c>)
    1412:	429c      	cmp	r4, r3
    1414:	d90a      	bls.n	142c <__acle_se_spm_request_read_nse+0x48>
    1416:	192a      	adds	r2, r5, r4
    1418:	332d      	adds	r3, #45	; 0x2d
    141a:	429a      	cmp	r2, r3
    141c:	d809      	bhi.n	1432 <__acle_se_spm_request_read_nse+0x4e>
			memcpy(destination, (const void *)addr, len);
    141e:	462a      	mov	r2, r5
    1420:	4621      	mov	r1, r4
    1422:	4630      	mov	r0, r6
    1424:	f006 fdbc 	bl	7fa0 <memcpy>
			return 0;
    1428:	2000      	movs	r0, #0
    142a:	e7e2      	b.n	13f2 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    142c:	4b05      	ldr	r3, [pc, #20]	; (1444 <__acle_se_spm_request_read_nse+0x60>)
    142e:	429c      	cmp	r4, r3
    1430:	d903      	bls.n	143a <__acle_se_spm_request_read_nse+0x56>
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <__acle_se_spm_request_read_nse+0x64>)
    1434:	192a      	adds	r2, r5, r4
    1436:	429a      	cmp	r2, r3
    1438:	d9f1      	bls.n	141e <__acle_se_spm_request_read_nse+0x3a>
	return -EPERM;
    143a:	f04f 30ff 	mov.w	r0, #4294967295
    143e:	e7d8      	b.n	13f2 <__acle_se_spm_request_read_nse+0xe>
    1440:	00ff01ff 	.word	0x00ff01ff
    1444:	00ff012f 	.word	0x00ff012f
    1448:	00ff0138 	.word	0x00ff0138

0000144c <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    144c:	b570      	push	{r4, r5, r6, lr}
    144e:	4606      	mov	r6, r0
    1450:	460d      	mov	r5, r1
    1452:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    1454:	f006 fd68 	bl	7f28 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1458:	2801      	cmp	r0, #1
    145a:	d00d      	beq.n	1478 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    145c:	4620      	mov	r0, r4
    145e:	f006 fd63 	bl	7f28 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    1462:	2801      	cmp	r0, #1
    1464:	d008      	beq.n	1478 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    1466:	4623      	mov	r3, r4
    1468:	462a      	mov	r2, r5
    146a:	4631      	mov	r1, r6
    146c:	4808      	ldr	r0, [pc, #32]	; (1490 <__acle_se_spm_request_random_number_nse+0x44>)
    146e:	f003 feeb 	bl	5248 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    1472:	6823      	ldr	r3, [r4, #0]
    1474:	42ab      	cmp	r3, r5
    1476:	d001      	beq.n	147c <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1478:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    147c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1480:	4671      	mov	r1, lr
    1482:	4672      	mov	r2, lr
    1484:	4673      	mov	r3, lr
    1486:	46f4      	mov	ip, lr
    1488:	f38e 8c00 	msr	CPSR_fs, lr
    148c:	4774      	bxns	lr
    148e:	bf00      	nop
    1490:	20000258 	.word	0x20000258

00001494 <__acle_se_spm_s0_active>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_S0_ACTIVE
__TZ_NONSECURE_ENTRY_FUNC
int spm_s0_active(uint32_t s0_address, uint32_t s1_address, bool *s0_active)
{
    1494:	b570      	push	{r4, r5, r6, lr}
    1496:	4605      	mov	r5, r0
	return arm_cmse_addr_is_secure(ptr) == 1;
    1498:	4610      	mov	r0, r2
{
    149a:	460e      	mov	r6, r1
    149c:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    149e:	f006 fd43 	bl	7f28 <arm_cmse_addr_is_secure>
	const struct fw_info *s0;
	const struct fw_info *s1;
	bool s0_valid;
	bool s1_valid;

	if (ptr_in_secure_area((intptr_t)s0_active)) {
    14a2:	2801      	cmp	r0, #1
    14a4:	d10a      	bne.n	14bc <__acle_se_spm_s0_active+0x28>
		return -EINVAL;
    14a6:	f06f 0015 	mvn.w	r0, #21
	} else {
		*s0_active = s0->version >= s1->version;
	}

	return 0;
}
    14aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    14ae:	4671      	mov	r1, lr
    14b0:	4672      	mov	r2, lr
    14b2:	4673      	mov	r3, lr
    14b4:	46f4      	mov	ip, lr
    14b6:	f38e 8c00 	msr	CPSR_fs, lr
    14ba:	4774      	bxns	lr
	s0 = fw_info_find(s0_address);
    14bc:	4628      	mov	r0, r5
    14be:	f7ff ff65 	bl	138c <fw_info_find>
    14c2:	4605      	mov	r5, r0
	s1 = fw_info_find(s1_address);
    14c4:	4630      	mov	r0, r6
    14c6:	f7ff ff61 	bl	138c <fw_info_find>
    14ca:	4603      	mov	r3, r0
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
    14cc:	b1cd      	cbz	r5, 1502 <__acle_se_spm_s0_active+0x6e>
    14ce:	6a29      	ldr	r1, [r5, #32]
    14d0:	4a0e      	ldr	r2, [pc, #56]	; (150c <__acle_se_spm_s0_active+0x78>)
    14d2:	4291      	cmp	r1, r2
    14d4:	d115      	bne.n	1502 <__acle_se_spm_s0_active+0x6e>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
    14d6:	b148      	cbz	r0, 14ec <__acle_se_spm_s0_active+0x58>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
    14d8:	2001      	movs	r0, #1
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
    14da:	6a19      	ldr	r1, [r3, #32]
    14dc:	4a0b      	ldr	r2, [pc, #44]	; (150c <__acle_se_spm_s0_active+0x78>)
    14de:	4291      	cmp	r1, r2
    14e0:	d102      	bne.n	14e8 <__acle_se_spm_s0_active+0x54>
	} else if (!s0_valid) {
    14e2:	b938      	cbnz	r0, 14f4 <__acle_se_spm_s0_active+0x60>
		*s0_active = false;
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	e7e0      	b.n	14aa <__acle_se_spm_s0_active+0x16>
	if (!s1_valid && !s0_valid) {
    14e8:	2800      	cmp	r0, #0
    14ea:	d0dc      	beq.n	14a6 <__acle_se_spm_s0_active+0x12>
		*s0_active = true;
    14ec:	2301      	movs	r3, #1
	return 0;
    14ee:	2000      	movs	r0, #0
		*s0_active = s0->version >= s1->version;
    14f0:	7023      	strb	r3, [r4, #0]
    14f2:	e7da      	b.n	14aa <__acle_se_spm_s0_active+0x16>
    14f4:	695b      	ldr	r3, [r3, #20]
    14f6:	696a      	ldr	r2, [r5, #20]
    14f8:	429a      	cmp	r2, r3
    14fa:	bf34      	ite	cc
    14fc:	2300      	movcc	r3, #0
    14fe:	2301      	movcs	r3, #1
    1500:	e7f5      	b.n	14ee <__acle_se_spm_s0_active+0x5a>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
    1502:	2b00      	cmp	r3, #0
    1504:	d0cf      	beq.n	14a6 <__acle_se_spm_s0_active+0x12>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
    1506:	2000      	movs	r0, #0
    1508:	e7e7      	b.n	14da <__acle_se_spm_s0_active+0x46>
    150a:	bf00      	nop
    150c:	9102ffff 	.word	0x9102ffff

00001510 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1510:	4801      	ldr	r0, [pc, #4]	; (1518 <nrf_cc3xx_platform_abort_init+0x8>)
    1512:	f003 be5d 	b.w	51d0 <nrf_cc3xx_platform_set_abort>
    1516:	bf00      	nop
    1518:	0000884c 	.word	0x0000884c

0000151c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    151c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    151e:	b1b0      	cbz	r0, 154e <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1520:	6843      	ldr	r3, [r0, #4]
    1522:	2b04      	cmp	r3, #4
    1524:	d10d      	bne.n	1542 <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1526:	2200      	movs	r2, #0
    1528:	6803      	ldr	r3, [r0, #0]
    152a:	e8d3 1fef 	ldaex	r1, [r3]
    152e:	2901      	cmp	r1, #1
    1530:	d103      	bne.n	153a <mutex_unlock_platform+0x1e>
    1532:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1536:	2800      	cmp	r0, #0
    1538:	d1f7      	bne.n	152a <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    153a:	4807      	ldr	r0, [pc, #28]	; (1558 <mutex_unlock_platform+0x3c>)
    153c:	bf08      	it	eq
    153e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1540:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1542:	b13b      	cbz	r3, 1554 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1544:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1546:	f002 fa8b 	bl	3a60 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    154a:	2000      	movs	r0, #0
    154c:	e7f8      	b.n	1540 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    154e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1552:	e7f5      	b.n	1540 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1554:	4801      	ldr	r0, [pc, #4]	; (155c <mutex_unlock_platform+0x40>)
    1556:	e7f3      	b.n	1540 <mutex_unlock_platform+0x24>
    1558:	ffff8fe9 	.word	0xffff8fe9
    155c:	ffff8fea 	.word	0xffff8fea

00001560 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1560:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1562:	4604      	mov	r4, r0
    1564:	b918      	cbnz	r0, 156e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <mutex_free_platform+0x3c>)
    1568:	480d      	ldr	r0, [pc, #52]	; (15a0 <mutex_free_platform+0x40>)
    156a:	685b      	ldr	r3, [r3, #4]
    156c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    156e:	6861      	ldr	r1, [r4, #4]
    1570:	2908      	cmp	r1, #8
    1572:	d00d      	beq.n	1590 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1574:	f031 0304 	bics.w	r3, r1, #4
    1578:	d00a      	beq.n	1590 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    157a:	f011 0102 	ands.w	r1, r1, #2
    157e:	d008      	beq.n	1592 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1580:	4621      	mov	r1, r4
    1582:	4808      	ldr	r0, [pc, #32]	; (15a4 <mutex_free_platform+0x44>)
    1584:	f002 f822 	bl	35cc <k_mem_slab_free>
        mutex->mutex = NULL;
    1588:	2300      	movs	r3, #0
    158a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    158c:	2300      	movs	r3, #0
    158e:	6063      	str	r3, [r4, #4]
}
    1590:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1592:	2214      	movs	r2, #20
    1594:	6820      	ldr	r0, [r4, #0]
    1596:	f006 fd0e 	bl	7fb6 <memset>
    159a:	e7f7      	b.n	158c <mutex_free_platform+0x2c>
    159c:	2000005c 	.word	0x2000005c
    15a0:	00008e92 	.word	0x00008e92
    15a4:	20000414 	.word	0x20000414

000015a8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    15a8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    15aa:	4604      	mov	r4, r0
    15ac:	b918      	cbnz	r0, 15b6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    15ae:	4b16      	ldr	r3, [pc, #88]	; (1608 <mutex_init_platform+0x60>)
    15b0:	4816      	ldr	r0, [pc, #88]	; (160c <mutex_init_platform+0x64>)
    15b2:	685b      	ldr	r3, [r3, #4]
    15b4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    15b6:	6863      	ldr	r3, [r4, #4]
    15b8:	2b04      	cmp	r3, #4
    15ba:	d023      	beq.n	1604 <mutex_init_platform+0x5c>
    15bc:	2b08      	cmp	r3, #8
    15be:	d021      	beq.n	1604 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    15c0:	b9cb      	cbnz	r3, 15f6 <mutex_init_platform+0x4e>
    15c2:	6823      	ldr	r3, [r4, #0]
    15c4:	b9bb      	cbnz	r3, 15f6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    15c6:	f04f 32ff 	mov.w	r2, #4294967295
    15ca:	f04f 33ff 	mov.w	r3, #4294967295
    15ce:	4621      	mov	r1, r4
    15d0:	480f      	ldr	r0, [pc, #60]	; (1610 <mutex_init_platform+0x68>)
    15d2:	f001 ffa1 	bl	3518 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    15d6:	b908      	cbnz	r0, 15dc <mutex_init_platform+0x34>
    15d8:	6823      	ldr	r3, [r4, #0]
    15da:	b91b      	cbnz	r3, 15e4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    15dc:	4b0a      	ldr	r3, [pc, #40]	; (1608 <mutex_init_platform+0x60>)
    15de:	480d      	ldr	r0, [pc, #52]	; (1614 <mutex_init_platform+0x6c>)
    15e0:	685b      	ldr	r3, [r3, #4]
    15e2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    15e4:	2214      	movs	r2, #20
    15e6:	2100      	movs	r1, #0
    15e8:	6820      	ldr	r0, [r4, #0]
    15ea:	f006 fce4 	bl	7fb6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    15ee:	6863      	ldr	r3, [r4, #4]
    15f0:	f043 0302 	orr.w	r3, r3, #2
    15f4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    15f6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    15f8:	f006 febd 	bl	8376 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    15fc:	6863      	ldr	r3, [r4, #4]
    15fe:	f043 0301 	orr.w	r3, r3, #1
    1602:	6063      	str	r3, [r4, #4]
}
    1604:	bd10      	pop	{r4, pc}
    1606:	bf00      	nop
    1608:	2000005c 	.word	0x2000005c
    160c:	00008e92 	.word	0x00008e92
    1610:	20000414 	.word	0x20000414
    1614:	00008eb8 	.word	0x00008eb8

00001618 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1618:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    161a:	b1e8      	cbz	r0, 1658 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    161c:	6843      	ldr	r3, [r0, #4]
    161e:	2b04      	cmp	r3, #4
    1620:	d10c      	bne.n	163c <mutex_lock_platform+0x24>
    1622:	2201      	movs	r2, #1
    1624:	6803      	ldr	r3, [r0, #0]
    1626:	e8d3 1fef 	ldaex	r1, [r3]
    162a:	2900      	cmp	r1, #0
    162c:	d103      	bne.n	1636 <mutex_lock_platform+0x1e>
    162e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1632:	2800      	cmp	r0, #0
    1634:	d1f7      	bne.n	1626 <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1636:	d10b      	bne.n	1650 <mutex_lock_platform+0x38>
    1638:	2000      	movs	r0, #0
}
    163a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    163c:	b153      	cbz	r3, 1654 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    163e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1640:	f04f 32ff 	mov.w	r2, #4294967295
    1644:	f04f 33ff 	mov.w	r3, #4294967295
    1648:	f002 f932 	bl	38b0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    164c:	2800      	cmp	r0, #0
    164e:	d0f3      	beq.n	1638 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1650:	4803      	ldr	r0, [pc, #12]	; (1660 <mutex_lock_platform+0x48>)
    1652:	e7f2      	b.n	163a <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1654:	4803      	ldr	r0, [pc, #12]	; (1664 <mutex_lock_platform+0x4c>)
    1656:	e7f0      	b.n	163a <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1658:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    165c:	e7ed      	b.n	163a <mutex_lock_platform+0x22>
    165e:	bf00      	nop
    1660:	ffff8fe9 	.word	0xffff8fe9
    1664:	ffff8fea 	.word	0xffff8fea

00001668 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1668:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    166a:	4906      	ldr	r1, [pc, #24]	; (1684 <nrf_cc3xx_platform_mutex_init+0x1c>)
    166c:	2340      	movs	r3, #64	; 0x40
    166e:	2214      	movs	r2, #20
    1670:	4805      	ldr	r0, [pc, #20]	; (1688 <nrf_cc3xx_platform_mutex_init+0x20>)
    1672:	f006 fe55 	bl	8320 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    167a:	4904      	ldr	r1, [pc, #16]	; (168c <nrf_cc3xx_platform_mutex_init+0x24>)
    167c:	4804      	ldr	r0, [pc, #16]	; (1690 <nrf_cc3xx_platform_mutex_init+0x28>)
    167e:	f003 be5b 	b.w	5338 <nrf_cc3xx_platform_set_mutexes>
    1682:	bf00      	nop
    1684:	20000434 	.word	0x20000434
    1688:	20000414 	.word	0x20000414
    168c:	00008864 	.word	0x00008864
    1690:	00008854 	.word	0x00008854

00001694 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1694:	4901      	ldr	r1, [pc, #4]	; (169c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1696:	2210      	movs	r2, #16
	str	r2, [r1]
    1698:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    169a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    169c:	e000ed10 	.word	0xe000ed10

000016a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    16a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    16a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    16a4:	f380 8811 	msr	BASEPRI, r0
	isb
    16a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    16ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    16b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    16b2:	b662      	cpsie	i
	isb
    16b4:	f3bf 8f6f 	isb	sy

	bx	lr
    16b8:	4770      	bx	lr
    16ba:	bf00      	nop

000016bc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    16bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    16be:	4605      	mov	r5, r0

	if (esf != NULL) {
    16c0:	460c      	mov	r4, r1
    16c2:	b1c9      	cbz	r1, 16f8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    16c4:	688b      	ldr	r3, [r1, #8]
    16c6:	4810      	ldr	r0, [pc, #64]	; (1708 <z_arm_fatal_error+0x4c>)
    16c8:	9300      	str	r3, [sp, #0]
    16ca:	e9d1 2300 	ldrd	r2, r3, [r1]
    16ce:	2145      	movs	r1, #69	; 0x45
    16d0:	f006 fba3 	bl	7e1a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    16d4:	6963      	ldr	r3, [r4, #20]
    16d6:	2145      	movs	r1, #69	; 0x45
    16d8:	9300      	str	r3, [sp, #0]
    16da:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    16de:	480b      	ldr	r0, [pc, #44]	; (170c <z_arm_fatal_error+0x50>)
    16e0:	f006 fb9b 	bl	7e1a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    16e4:	2145      	movs	r1, #69	; 0x45
    16e6:	69e2      	ldr	r2, [r4, #28]
    16e8:	4809      	ldr	r0, [pc, #36]	; (1710 <z_arm_fatal_error+0x54>)
    16ea:	f006 fb96 	bl	7e1a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    16ee:	2145      	movs	r1, #69	; 0x45
    16f0:	69a2      	ldr	r2, [r4, #24]
    16f2:	4808      	ldr	r0, [pc, #32]	; (1714 <z_arm_fatal_error+0x58>)
    16f4:	f006 fb91 	bl	7e1a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    16f8:	4621      	mov	r1, r4
    16fa:	4628      	mov	r0, r5
}
    16fc:	b003      	add	sp, #12
    16fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1702:	f001 bdaf 	b.w	3264 <z_fatal_error>
    1706:	bf00      	nop
    1708:	00008ee5 	.word	0x00008ee5
    170c:	00008f19 	.word	0x00008f19
    1710:	00008f4d 	.word	0x00008f4d
    1714:	00008f61 	.word	0x00008f61

00001718 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1718:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    171a:	2b00      	cmp	r3, #0
    171c:	db08      	blt.n	1730 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    171e:	2201      	movs	r2, #1
    1720:	f000 001f 	and.w	r0, r0, #31
    1724:	fa02 f000 	lsl.w	r0, r2, r0
    1728:	4a02      	ldr	r2, [pc, #8]	; (1734 <arch_irq_enable+0x1c>)
    172a:	095b      	lsrs	r3, r3, #5
    172c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1730:	4770      	bx	lr
    1732:	bf00      	nop
    1734:	e000e100 	.word	0xe000e100

00001738 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1738:	4b05      	ldr	r3, [pc, #20]	; (1750 <arch_irq_is_enabled+0x18>)
    173a:	0942      	lsrs	r2, r0, #5
    173c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1740:	2301      	movs	r3, #1
    1742:	f000 001f 	and.w	r0, r0, #31
    1746:	fa03 f000 	lsl.w	r0, r3, r0
}
    174a:	4010      	ands	r0, r2
    174c:	4770      	bx	lr
    174e:	bf00      	nop
    1750:	e000e100 	.word	0xe000e100

00001754 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1754:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1756:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1758:	2c07      	cmp	r4, #7
{
    175a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    175c:	d908      	bls.n	1770 <z_arm_irq_priority_set+0x1c>
    175e:	490d      	ldr	r1, [pc, #52]	; (1794 <z_arm_irq_priority_set+0x40>)
    1760:	480d      	ldr	r0, [pc, #52]	; (1798 <z_arm_irq_priority_set+0x44>)
    1762:	2259      	movs	r2, #89	; 0x59
    1764:	f006 fabb 	bl	7cde <printk>
    1768:	2159      	movs	r1, #89	; 0x59
    176a:	480a      	ldr	r0, [pc, #40]	; (1794 <z_arm_irq_priority_set+0x40>)
    176c:	f006 fb42 	bl	7df4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1770:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1772:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1774:	bfac      	ite	ge
    1776:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    177a:	4b08      	ldrlt	r3, [pc, #32]	; (179c <z_arm_irq_priority_set+0x48>)
    177c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1780:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1782:	bfab      	itete	ge
    1784:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1788:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    178c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1790:	555c      	strblt	r4, [r3, r5]
}
    1792:	bd38      	pop	{r3, r4, r5, pc}
    1794:	00008f94 	.word	0x00008f94
    1798:	00008b51 	.word	0x00008b51
    179c:	e000ed14 	.word	0xe000ed14

000017a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17a0:	bf30      	wfi
    b z_SysNmiOnReset
    17a2:	f7ff bffd 	b.w	17a0 <z_SysNmiOnReset>
    17a6:	bf00      	nop

000017a8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17a8:	4a0b      	ldr	r2, [pc, #44]	; (17d8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    17aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17ac:	4b0b      	ldr	r3, [pc, #44]	; (17dc <z_arm_prep_c+0x34>)
    17ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    17b2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    17b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    17bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    17c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    17c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    17c8:	f001 fdec 	bl	33a4 <z_bss_zero>
	z_data_copy();
    17cc:	f003 f9de 	bl	4b8c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    17d0:	f000 fb58 	bl	1e84 <z_arm_interrupt_init>
	z_cstart();
    17d4:	f001 fdf0 	bl	33b8 <z_cstart>
    17d8:	00000000 	.word	0x00000000
    17dc:	e000ed00 	.word	0xe000ed00

000017e0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    17e0:	4a09      	ldr	r2, [pc, #36]	; (1808 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    17e2:	490a      	ldr	r1, [pc, #40]	; (180c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    17e4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    17e6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    17e8:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    17ea:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17ec:	4908      	ldr	r1, [pc, #32]	; (1810 <arch_swap+0x30>)
    17ee:	684b      	ldr	r3, [r1, #4]
    17f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    17f4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    17f6:	2300      	movs	r3, #0
    17f8:	f383 8811 	msr	BASEPRI, r3
    17fc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1800:	6893      	ldr	r3, [r2, #8]
}
    1802:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1804:	4770      	bx	lr
    1806:	bf00      	nop
    1808:	200009c4 	.word	0x200009c4
    180c:	00008958 	.word	0x00008958
    1810:	e000ed00 	.word	0xe000ed00

00001814 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1814:	4913      	ldr	r1, [pc, #76]	; (1864 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1816:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1818:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    181c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    181e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1822:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1826:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1828:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    182c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1830:	4f0d      	ldr	r7, [pc, #52]	; (1868 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1832:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1836:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1838:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    183a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    183c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    183e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1840:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1842:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1846:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    184a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    184e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1852:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1856:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1858:	f006 fb59 	bl	7f0e <configure_builtin_stack_guard>
    pop {r2, lr}
    185c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1860:	4770      	bx	lr
    1862:	0000      	.short	0x0000
    ldr r1, =_kernel
    1864:	200009c4 	.word	0x200009c4
    ldr v4, =_SCS_ICSR
    1868:	e000ed04 	.word	0xe000ed04

0000186c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    186c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1870:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1872:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1876:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    187a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    187c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1880:	2902      	cmp	r1, #2
    beq _oops
    1882:	d0ff      	beq.n	1884 <_oops>

00001884 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1884:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1886:	f006 fb04 	bl	7e92 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    188a:	bd01      	pop	{r0, pc}

0000188c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    188c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1890:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1892:	490b      	ldr	r1, [pc, #44]	; (18c0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1894:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1898:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    189a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    189e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    18a2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    18a4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    18a8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    18ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    18b0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    18b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    18b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    18b8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    18ba:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    18bc:	4770      	bx	lr
    18be:	bf00      	nop
    18c0:	00007d1f 	.word	0x00007d1f

000018c4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <arch_switch_to_main_thread+0x24>)
    18c6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    18c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    18ca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    18ce:	4610      	mov	r0, r2
    18d0:	f381 8809 	msr	PSP, r1
    18d4:	2100      	movs	r1, #0
    18d6:	b663      	cpsie	if
    18d8:	f381 8811 	msr	BASEPRI, r1
    18dc:	f3bf 8f6f 	isb	sy
    18e0:	2200      	movs	r2, #0
    18e2:	2300      	movs	r3, #0
    18e4:	f006 fa1b 	bl	7d1e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    18e8:	200009c4 	.word	0x200009c4

000018ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    18ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    18ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    18f0:	4a0b      	ldr	r2, [pc, #44]	; (1920 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    18f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    18f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    18f6:	bf1e      	ittt	ne
	movne	r1, #0
    18f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    18fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    18fc:	f006 fd34 	blne	8368 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1900:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1902:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1906:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    190a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    190e:	4905      	ldr	r1, [pc, #20]	; (1924 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1910:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1912:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1914:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1916:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    191a:	4903      	ldr	r1, [pc, #12]	; (1928 <_isr_wrapper+0x3c>)
	bx r1
    191c:	4708      	bx	r1
    191e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1920:	200009c4 	.word	0x200009c4
	ldr r1, =_sw_isr_table
    1924:	0000849c 	.word	0x0000849c
	ldr r1, =z_arm_int_exit
    1928:	0000192d 	.word	0x0000192d

0000192c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    192e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1930:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1932:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1934:	d003      	beq.n	193e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1936:	4903      	ldr	r1, [pc, #12]	; (1944 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    193c:	600a      	str	r2, [r1, #0]

0000193e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    193e:	4770      	bx	lr
	ldr r3, =_kernel
    1940:	200009c4 	.word	0x200009c4
	ldr r1, =_SCS_ICSR
    1944:	e000ed04 	.word	0xe000ed04

00001948 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1948:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    194a:	4c2b      	ldr	r4, [pc, #172]	; (19f8 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    194c:	4606      	mov	r6, r0
    194e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1950:	482a      	ldr	r0, [pc, #168]	; (19fc <mem_manage_fault.isra.0+0xb4>)
    1952:	2145      	movs	r1, #69	; 0x45
    1954:	f006 fa61 	bl	7e1a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1958:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    195a:	06d0      	lsls	r0, r2, #27
    195c:	d503      	bpl.n	1966 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    195e:	2145      	movs	r1, #69	; 0x45
    1960:	4827      	ldr	r0, [pc, #156]	; (1a00 <mem_manage_fault.isra.0+0xb8>)
    1962:	f006 fa5a 	bl	7e1a <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1968:	0719      	lsls	r1, r3, #28
    196a:	d503      	bpl.n	1974 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    196c:	2145      	movs	r1, #69	; 0x45
    196e:	4825      	ldr	r0, [pc, #148]	; (1a04 <mem_manage_fault.isra.0+0xbc>)
    1970:	f006 fa53 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1974:	4c20      	ldr	r4, [pc, #128]	; (19f8 <mem_manage_fault.isra.0+0xb0>)
    1976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1978:	079a      	lsls	r2, r3, #30
    197a:	d510      	bpl.n	199e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    197c:	2145      	movs	r1, #69	; 0x45
    197e:	4822      	ldr	r0, [pc, #136]	; (1a08 <mem_manage_fault.isra.0+0xc0>)
    1980:	f006 fa4b 	bl	7e1a <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1984:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1988:	061b      	lsls	r3, r3, #24
    198a:	d508      	bpl.n	199e <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    198c:	2145      	movs	r1, #69	; 0x45
    198e:	481f      	ldr	r0, [pc, #124]	; (1a0c <mem_manage_fault.isra.0+0xc4>)
    1990:	f006 fa43 	bl	7e1a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1994:	b11e      	cbz	r6, 199e <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    199c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    199e:	4c16      	ldr	r4, [pc, #88]	; (19f8 <mem_manage_fault.isra.0+0xb0>)
    19a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19a2:	07d6      	lsls	r6, r2, #31
    19a4:	d503      	bpl.n	19ae <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    19a6:	2145      	movs	r1, #69	; 0x45
    19a8:	4819      	ldr	r0, [pc, #100]	; (1a10 <mem_manage_fault.isra.0+0xc8>)
    19aa:	f006 fa36 	bl	7e1a <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    19ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19b0:	0698      	lsls	r0, r3, #26
    19b2:	d503      	bpl.n	19bc <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    19b4:	2145      	movs	r1, #69	; 0x45
    19b6:	4817      	ldr	r0, [pc, #92]	; (1a14 <mem_manage_fault.isra.0+0xcc>)
    19b8:	f006 fa2f 	bl	7e1a <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19bc:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <mem_manage_fault.isra.0+0xb0>)
    19be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19c0:	06d1      	lsls	r1, r2, #27
    19c2:	d402      	bmi.n	19ca <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    19c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19c6:	0792      	lsls	r2, r2, #30
    19c8:	d50d      	bpl.n	19e6 <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    19ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19cc:	06db      	lsls	r3, r3, #27
    19ce:	d50a      	bpl.n	19e6 <mem_manage_fault.isra.0+0x9e>
    19d0:	4911      	ldr	r1, [pc, #68]	; (1a18 <mem_manage_fault.isra.0+0xd0>)
    19d2:	4812      	ldr	r0, [pc, #72]	; (1a1c <mem_manage_fault.isra.0+0xd4>)
    19d4:	f240 124f 	movw	r2, #335	; 0x14f
    19d8:	f006 f981 	bl	7cde <printk>
    19dc:	f240 114f 	movw	r1, #335	; 0x14f
    19e0:	480d      	ldr	r0, [pc, #52]	; (1a18 <mem_manage_fault.isra.0+0xd0>)
    19e2:	f006 fa07 	bl	7df4 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    19e6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19e8:	4a03      	ldr	r2, [pc, #12]	; (19f8 <mem_manage_fault.isra.0+0xb0>)
    19ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19ec:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    19f0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    19f2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    19f4:	bd70      	pop	{r4, r5, r6, pc}
    19f6:	bf00      	nop
    19f8:	e000ed00 	.word	0xe000ed00
    19fc:	00008fca 	.word	0x00008fca
    1a00:	00008fe5 	.word	0x00008fe5
    1a04:	0000901d 	.word	0x0000901d
    1a08:	00009035 	.word	0x00009035
    1a0c:	00009052 	.word	0x00009052
    1a10:	0000906d 	.word	0x0000906d
    1a14:	00009091 	.word	0x00009091
    1a18:	000090c5 	.word	0x000090c5
    1a1c:	00008b51 	.word	0x00008b51

00001a20 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1a20:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a22:	4c23      	ldr	r4, [pc, #140]	; (1ab0 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1a24:	4606      	mov	r6, r0
    1a26:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1a28:	4822      	ldr	r0, [pc, #136]	; (1ab4 <bus_fault.isra.0+0x94>)
    1a2a:	2145      	movs	r1, #69	; 0x45
    1a2c:	f006 f9f5 	bl	7e1a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a32:	04d1      	lsls	r1, r2, #19
    1a34:	d503      	bpl.n	1a3e <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1a36:	2145      	movs	r1, #69	; 0x45
    1a38:	481f      	ldr	r0, [pc, #124]	; (1ab8 <bus_fault.isra.0+0x98>)
    1a3a:	f006 f9ee 	bl	7e1a <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a40:	051a      	lsls	r2, r3, #20
    1a42:	d503      	bpl.n	1a4c <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1a44:	2145      	movs	r1, #69	; 0x45
    1a46:	481d      	ldr	r0, [pc, #116]	; (1abc <bus_fault.isra.0+0x9c>)
    1a48:	f006 f9e7 	bl	7e1a <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a4c:	4c18      	ldr	r4, [pc, #96]	; (1ab0 <bus_fault.isra.0+0x90>)
    1a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a50:	059b      	lsls	r3, r3, #22
    1a52:	d510      	bpl.n	1a76 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1a54:	481a      	ldr	r0, [pc, #104]	; (1ac0 <bus_fault.isra.0+0xa0>)
    1a56:	2145      	movs	r1, #69	; 0x45
    1a58:	f006 f9df 	bl	7e1a <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a60:	0418      	lsls	r0, r3, #16
    1a62:	d508      	bpl.n	1a76 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a64:	2145      	movs	r1, #69	; 0x45
    1a66:	4817      	ldr	r0, [pc, #92]	; (1ac4 <bus_fault.isra.0+0xa4>)
    1a68:	f006 f9d7 	bl	7e1a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1a6c:	b11e      	cbz	r6, 1a76 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a74:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a76:	4c0e      	ldr	r4, [pc, #56]	; (1ab0 <bus_fault.isra.0+0x90>)
    1a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a7a:	0559      	lsls	r1, r3, #21
    1a7c:	d503      	bpl.n	1a86 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a7e:	2145      	movs	r1, #69	; 0x45
    1a80:	4811      	ldr	r0, [pc, #68]	; (1ac8 <bus_fault.isra.0+0xa8>)
    1a82:	f006 f9ca 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a88:	05da      	lsls	r2, r3, #23
    1a8a:	d50b      	bpl.n	1aa4 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1a8c:	2145      	movs	r1, #69	; 0x45
    1a8e:	480f      	ldr	r0, [pc, #60]	; (1acc <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a90:	f006 f9c3 	bl	7e1a <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    1a94:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a96:	4a06      	ldr	r2, [pc, #24]	; (1ab0 <bus_fault.isra.0+0x90>)
    1a98:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a9a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a9e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1aa0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1aa2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1aa6:	049b      	lsls	r3, r3, #18
    1aa8:	d5f4      	bpl.n	1a94 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1aaa:	2145      	movs	r1, #69	; 0x45
    1aac:	4808      	ldr	r0, [pc, #32]	; (1ad0 <bus_fault.isra.0+0xb0>)
    1aae:	e7ef      	b.n	1a90 <bus_fault.isra.0+0x70>
    1ab0:	e000ed00 	.word	0xe000ed00
    1ab4:	000090ff 	.word	0x000090ff
    1ab8:	0000911a 	.word	0x0000911a
    1abc:	0000901d 	.word	0x0000901d
    1ac0:	00009130 	.word	0x00009130
    1ac4:	0000914e 	.word	0x0000914e
    1ac8:	00009168 	.word	0x00009168
    1acc:	00009188 	.word	0x00009188
    1ad0:	00009091 	.word	0x00009091

00001ad4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1ad4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1ad6:	4c21      	ldr	r4, [pc, #132]	; (1b5c <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1ad8:	2145      	movs	r1, #69	; 0x45
    1ada:	4821      	ldr	r0, [pc, #132]	; (1b60 <usage_fault.isra.0+0x8c>)
    1adc:	f006 f99d 	bl	7e1a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1ae0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ae2:	0195      	lsls	r5, r2, #6
    1ae4:	d503      	bpl.n	1aee <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1ae6:	2145      	movs	r1, #69	; 0x45
    1ae8:	481e      	ldr	r0, [pc, #120]	; (1b64 <usage_fault.isra.0+0x90>)
    1aea:	f006 f996 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1af0:	01dc      	lsls	r4, r3, #7
    1af2:	d503      	bpl.n	1afc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1af4:	2145      	movs	r1, #69	; 0x45
    1af6:	481c      	ldr	r0, [pc, #112]	; (1b68 <usage_fault.isra.0+0x94>)
    1af8:	f006 f98f 	bl	7e1a <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1afc:	4d17      	ldr	r5, [pc, #92]	; (1b5c <usage_fault.isra.0+0x88>)
    1afe:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1b00:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1b04:	d004      	beq.n	1b10 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1b06:	2145      	movs	r1, #69	; 0x45
    1b08:	4818      	ldr	r0, [pc, #96]	; (1b6c <usage_fault.isra.0+0x98>)
    1b0a:	f006 f986 	bl	7e1a <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1b0e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1b10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1b12:	0318      	lsls	r0, r3, #12
    1b14:	d503      	bpl.n	1b1e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1b16:	2145      	movs	r1, #69	; 0x45
    1b18:	4815      	ldr	r0, [pc, #84]	; (1b70 <usage_fault.isra.0+0x9c>)
    1b1a:	f006 f97e 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1b1e:	4d0f      	ldr	r5, [pc, #60]	; (1b5c <usage_fault.isra.0+0x88>)
    1b20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1b22:	0351      	lsls	r1, r2, #13
    1b24:	d503      	bpl.n	1b2e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1b26:	2145      	movs	r1, #69	; 0x45
    1b28:	4812      	ldr	r0, [pc, #72]	; (1b74 <usage_fault.isra.0+0xa0>)
    1b2a:	f006 f976 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1b2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1b30:	039a      	lsls	r2, r3, #14
    1b32:	d503      	bpl.n	1b3c <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1b34:	2145      	movs	r1, #69	; 0x45
    1b36:	4810      	ldr	r0, [pc, #64]	; (1b78 <usage_fault.isra.0+0xa4>)
    1b38:	f006 f96f 	bl	7e1a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b3c:	4d07      	ldr	r5, [pc, #28]	; (1b5c <usage_fault.isra.0+0x88>)
    1b3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1b40:	03db      	lsls	r3, r3, #15
    1b42:	d503      	bpl.n	1b4c <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1b44:	2145      	movs	r1, #69	; 0x45
    1b46:	480d      	ldr	r0, [pc, #52]	; (1b7c <usage_fault.isra.0+0xa8>)
    1b48:	f006 f967 	bl	7e1a <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1b4e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b50:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1b54:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1b58:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1b5a:	bd38      	pop	{r3, r4, r5, pc}
    1b5c:	e000ed00 	.word	0xe000ed00
    1b60:	000091a5 	.word	0x000091a5
    1b64:	000091c2 	.word	0x000091c2
    1b68:	000091da 	.word	0x000091da
    1b6c:	000091f9 	.word	0x000091f9
    1b70:	00009228 	.word	0x00009228
    1b74:	0000924b 	.word	0x0000924b
    1b78:	00009275 	.word	0x00009275
    1b7c:	00009294 	.word	0x00009294

00001b80 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    1b80:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1b82:	4c1e      	ldr	r4, [pc, #120]	; (1bfc <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    1b84:	481e      	ldr	r0, [pc, #120]	; (1c00 <secure_fault.isra.0+0x80>)
    1b86:	2145      	movs	r1, #69	; 0x45
    1b88:	f006 f947 	bl	7e1a <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    1b8c:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1b8e:	6963      	ldr	r3, [r4, #20]
    1b90:	0658      	lsls	r0, r3, #25
    1b92:	d503      	bpl.n	1b9c <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    1b94:	2145      	movs	r1, #69	; 0x45
    1b96:	481b      	ldr	r0, [pc, #108]	; (1c04 <secure_fault.isra.0+0x84>)
    1b98:	f006 f93f 	bl	7e1a <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1b9c:	6963      	ldr	r3, [r4, #20]
    1b9e:	07d9      	lsls	r1, r3, #31
    1ba0:	d508      	bpl.n	1bb4 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    1ba2:	2145      	movs	r1, #69	; 0x45
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    1ba6:	f006 f938 	bl	7e1a <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1baa:	6963      	ldr	r3, [r4, #20]
    1bac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1bb0:	6163      	str	r3, [r4, #20]
}
    1bb2:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1bb4:	6963      	ldr	r3, [r4, #20]
    1bb6:	079a      	lsls	r2, r3, #30
    1bb8:	d502      	bpl.n	1bc0 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    1bba:	2145      	movs	r1, #69	; 0x45
    1bbc:	4813      	ldr	r0, [pc, #76]	; (1c0c <secure_fault.isra.0+0x8c>)
    1bbe:	e7f2      	b.n	1ba6 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1bc0:	6963      	ldr	r3, [r4, #20]
    1bc2:	075b      	lsls	r3, r3, #29
    1bc4:	d502      	bpl.n	1bcc <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    1bc6:	2145      	movs	r1, #69	; 0x45
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <secure_fault.isra.0+0x90>)
    1bca:	e7ec      	b.n	1ba6 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1bcc:	6963      	ldr	r3, [r4, #20]
    1bce:	0718      	lsls	r0, r3, #28
    1bd0:	d502      	bpl.n	1bd8 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    1bd2:	2145      	movs	r1, #69	; 0x45
    1bd4:	480f      	ldr	r0, [pc, #60]	; (1c14 <secure_fault.isra.0+0x94>)
    1bd6:	e7e6      	b.n	1ba6 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1bd8:	6963      	ldr	r3, [r4, #20]
    1bda:	06d9      	lsls	r1, r3, #27
    1bdc:	d502      	bpl.n	1be4 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    1bde:	2145      	movs	r1, #69	; 0x45
    1be0:	480d      	ldr	r0, [pc, #52]	; (1c18 <secure_fault.isra.0+0x98>)
    1be2:	e7e0      	b.n	1ba6 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1be4:	6963      	ldr	r3, [r4, #20]
    1be6:	069a      	lsls	r2, r3, #26
    1be8:	d502      	bpl.n	1bf0 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    1bea:	2145      	movs	r1, #69	; 0x45
    1bec:	480b      	ldr	r0, [pc, #44]	; (1c1c <secure_fault.isra.0+0x9c>)
    1bee:	e7da      	b.n	1ba6 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1bf0:	6963      	ldr	r3, [r4, #20]
    1bf2:	061b      	lsls	r3, r3, #24
    1bf4:	d5d9      	bpl.n	1baa <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    1bf6:	2145      	movs	r1, #69	; 0x45
    1bf8:	4809      	ldr	r0, [pc, #36]	; (1c20 <secure_fault.isra.0+0xa0>)
    1bfa:	e7d4      	b.n	1ba6 <secure_fault.isra.0+0x26>
    1bfc:	e000edd0 	.word	0xe000edd0
    1c00:	000092c4 	.word	0x000092c4
    1c04:	000092e2 	.word	0x000092e2
    1c08:	000092f7 	.word	0x000092f7
    1c0c:	00009312 	.word	0x00009312
    1c10:	00009335 	.word	0x00009335
    1c14:	00009355 	.word	0x00009355
    1c18:	00009377 	.word	0x00009377
    1c1c:	00009391 	.word	0x00009391
    1c20:	000093b0 	.word	0x000093b0

00001c24 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c28:	4b7a      	ldr	r3, [pc, #488]	; (1e14 <z_arm_fault+0x1f0>)
{
    1c2a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c2c:	685c      	ldr	r4, [r3, #4]
    1c2e:	2600      	movs	r6, #0
{
    1c30:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c32:	f3c4 0708 	ubfx	r7, r4, #0, #9
    1c36:	f386 8811 	msr	BASEPRI, r6
    1c3a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c3e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1c42:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1c46:	d11e      	bne.n	1c86 <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1c48:	f012 0301 	ands.w	r3, r2, #1
    1c4c:	d03a      	beq.n	1cc4 <z_arm_fault+0xa0>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1c4e:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    1c52:	f002 0808 	and.w	r8, r2, #8
    1c56:	f040 80d6 	bne.w	1e06 <z_arm_fault+0x1e2>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1c5a:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    1c5c:	bf54      	ite	pl
    1c5e:	4605      	movpl	r5, r0
	*nested_exc = false;
    1c60:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c62:	682a      	ldr	r2, [r5, #0]
    1c64:	4b6c      	ldr	r3, [pc, #432]	; (1e18 <z_arm_fault+0x1f4>)
			*nested_exc = true;
    1c66:	bf58      	it	pl
    1c68:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c6a:	4413      	add	r3, r2
    1c6c:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    1c6e:	bf98      	it	ls
    1c70:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    1c72:	2145      	movs	r1, #69	; 0x45
    1c74:	4869      	ldr	r0, [pc, #420]	; (1e1c <z_arm_fault+0x1f8>)
    1c76:	f006 f8d0 	bl	7e1a <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c7a:	f1b8 0f00 	cmp.w	r8, #0
    1c7e:	d01e      	beq.n	1cbe <z_arm_fault+0x9a>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1c80:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1c84:	b95d      	cbnz	r5, 1c9e <z_arm_fault+0x7a>
    1c86:	f240 32f2 	movw	r2, #1010	; 0x3f2
    1c8a:	4965      	ldr	r1, [pc, #404]	; (1e20 <z_arm_fault+0x1fc>)
    1c8c:	4865      	ldr	r0, [pc, #404]	; (1e24 <z_arm_fault+0x200>)
    1c8e:	f006 f826 	bl	7cde <printk>
    1c92:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1c96:	4862      	ldr	r0, [pc, #392]	; (1e20 <z_arm_fault+0x1fc>)
    1c98:	f006 f8ac 	bl	7df4 <assert_post_action>
    1c9c:	2500      	movs	r5, #0
	*recoverable = false;
    1c9e:	2300      	movs	r3, #0
    1ca0:	1efa      	subs	r2, r7, #3
    1ca2:	4698      	mov	r8, r3
    1ca4:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1ca8:	4613      	mov	r3, r2
    1caa:	2b09      	cmp	r3, #9
    1cac:	f200 8099 	bhi.w	1de2 <z_arm_fault+0x1be>
    1cb0:	e8df f003 	tbb	[pc, r3]
    1cb4:	6a8c880a 	.word	0x6a8c880a
    1cb8:	97979790 	.word	0x97979790
    1cbc:	9497      	.short	0x9497
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1cbe:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    1cc2:	e7df      	b.n	1c84 <z_arm_fault+0x60>
	*nested_exc = false;
    1cc4:	461e      	mov	r6, r3
    1cc6:	e7de      	b.n	1c86 <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1cc8:	2145      	movs	r1, #69	; 0x45
    1cca:	4857      	ldr	r0, [pc, #348]	; (1e28 <z_arm_fault+0x204>)
    1ccc:	f006 f8a5 	bl	7e1a <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1cd0:	4b50      	ldr	r3, [pc, #320]	; (1e14 <z_arm_fault+0x1f0>)
	*recoverable = false;
    1cd2:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1cd6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1cd8:	f014 0402 	ands.w	r4, r4, #2
    1cdc:	d004      	beq.n	1ce8 <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
    1cde:	2145      	movs	r1, #69	; 0x45
    1ce0:	4852      	ldr	r0, [pc, #328]	; (1e2c <z_arm_fault+0x208>)
	PR_FAULT_INFO(
    1ce2:	f006 f89a 	bl	7e1a <z_log_minimal_printk>
    1ce6:	e077      	b.n	1dd8 <z_arm_fault+0x1b4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cea:	2a00      	cmp	r2, #0
    1cec:	da1d      	bge.n	1d2a <z_arm_fault+0x106>
		PR_EXC("  Debug event");
    1cee:	2145      	movs	r1, #69	; 0x45
    1cf0:	484f      	ldr	r0, [pc, #316]	; (1e30 <z_arm_fault+0x20c>)
    1cf2:	f006 f892 	bl	7e1a <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1cfa:	b99b      	cbnz	r3, 1d24 <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1cfc:	2220      	movs	r2, #32
    1cfe:	4629      	mov	r1, r5
    1d00:	a802      	add	r0, sp, #8
    1d02:	f006 f94d 	bl	7fa0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d08:	2e00      	cmp	r6, #0
    1d0a:	d077      	beq.n	1dfc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d10:	b922      	cbnz	r2, 1d1c <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d12:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d16:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d1a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d1c:	4620      	mov	r0, r4
    1d1e:	a902      	add	r1, sp, #8
    1d20:	f7ff fccc 	bl	16bc <z_arm_fatal_error>
}
    1d24:	b00a      	add	sp, #40	; 0x28
    1d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d2c:	005b      	lsls	r3, r3, #1
    1d2e:	d540      	bpl.n	1db2 <z_arm_fault+0x18e>
		PR_EXC("  Fault escalation (see below)");
    1d30:	2145      	movs	r1, #69	; 0x45
    1d32:	4840      	ldr	r0, [pc, #256]	; (1e34 <z_arm_fault+0x210>)
    1d34:	f006 f871 	bl	7e1a <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1d38:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1d3a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1d3e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1d42:	429a      	cmp	r2, r3
    1d44:	d00c      	beq.n	1d60 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
    1d46:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d4a:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	b16b      	cbz	r3, 1d6e <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d52:	2001      	movs	r0, #1
    1d54:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1d58:	f7ff fdf6 	bl	1948 <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
    1d5c:	4604      	mov	r4, r0
		break;
    1d5e:	e7ca      	b.n	1cf6 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1d60:	2145      	movs	r1, #69	; 0x45
    1d62:	682a      	ldr	r2, [r5, #0]
    1d64:	4834      	ldr	r0, [pc, #208]	; (1e38 <z_arm_fault+0x214>)
    1d66:	f006 f858 	bl	7e1a <z_log_minimal_printk>
			reason = esf->basic.r0;
    1d6a:	682c      	ldr	r4, [r5, #0]
    1d6c:	e7c3      	b.n	1cf6 <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    1d6e:	4b33      	ldr	r3, [pc, #204]	; (1e3c <z_arm_fault+0x218>)
    1d70:	781b      	ldrb	r3, [r3, #0]
    1d72:	b12b      	cbz	r3, 1d80 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
    1d74:	2001      	movs	r0, #1
    1d76:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1d7a:	f7ff fe51 	bl	1a20 <bus_fault.isra.0>
    1d7e:	e7ed      	b.n	1d5c <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
    1d80:	4b2f      	ldr	r3, [pc, #188]	; (1e40 <z_arm_fault+0x21c>)
    1d82:	881b      	ldrh	r3, [r3, #0]
    1d84:	b29b      	uxth	r3, r3
    1d86:	b113      	cbz	r3, 1d8e <z_arm_fault+0x16a>
		reason = usage_fault(esf);
    1d88:	f7ff fea4 	bl	1ad4 <usage_fault.isra.0>
    1d8c:	e7e6      	b.n	1d5c <z_arm_fault+0x138>
		} else if (SAU->SFSR != 0) {
    1d8e:	4b2d      	ldr	r3, [pc, #180]	; (1e44 <z_arm_fault+0x220>)
    1d90:	695b      	ldr	r3, [r3, #20]
    1d92:	b113      	cbz	r3, 1d9a <z_arm_fault+0x176>
			secure_fault(esf);
    1d94:	f7ff fef4 	bl	1b80 <secure_fault.isra.0>
    1d98:	e7ad      	b.n	1cf6 <z_arm_fault+0xd2>
			__ASSERT(0,
    1d9a:	4921      	ldr	r1, [pc, #132]	; (1e20 <z_arm_fault+0x1fc>)
    1d9c:	f240 22c3 	movw	r2, #707	; 0x2c3
    1da0:	4820      	ldr	r0, [pc, #128]	; (1e24 <z_arm_fault+0x200>)
    1da2:	f005 ff9c 	bl	7cde <printk>
    1da6:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1daa:	481d      	ldr	r0, [pc, #116]	; (1e20 <z_arm_fault+0x1fc>)
    1dac:	f006 f822 	bl	7df4 <assert_post_action>
    1db0:	e7a1      	b.n	1cf6 <z_arm_fault+0xd2>
    1db2:	491b      	ldr	r1, [pc, #108]	; (1e20 <z_arm_fault+0x1fc>)
    1db4:	f240 22c7 	movw	r2, #711	; 0x2c7
    1db8:	481a      	ldr	r0, [pc, #104]	; (1e24 <z_arm_fault+0x200>)
    1dba:	f005 ff90 	bl	7cde <printk>
    1dbe:	f240 21c7 	movw	r1, #711	; 0x2c7
    1dc2:	e7f2      	b.n	1daa <z_arm_fault+0x186>
		reason = mem_manage_fault(esf, 0, recoverable);
    1dc4:	2000      	movs	r0, #0
    1dc6:	f10d 0107 	add.w	r1, sp, #7
    1dca:	e7c5      	b.n	1d58 <z_arm_fault+0x134>
		reason = bus_fault(esf, 0, recoverable);
    1dcc:	2000      	movs	r0, #0
    1dce:	f10d 0107 	add.w	r1, sp, #7
    1dd2:	e7d2      	b.n	1d7a <z_arm_fault+0x156>
		secure_fault(esf);
    1dd4:	f7ff fed4 	bl	1b80 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1dd8:	2400      	movs	r4, #0
}
    1dda:	e78c      	b.n	1cf6 <z_arm_fault+0xd2>
	PR_FAULT_INFO(
    1ddc:	2145      	movs	r1, #69	; 0x45
    1dde:	481a      	ldr	r0, [pc, #104]	; (1e48 <z_arm_fault+0x224>)
    1de0:	e77f      	b.n	1ce2 <z_arm_fault+0xbe>
	PR_FAULT_INFO("***** %s %d) *****",
    1de2:	491a      	ldr	r1, [pc, #104]	; (1e4c <z_arm_fault+0x228>)
    1de4:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    1de8:	4a19      	ldr	r2, [pc, #100]	; (1e50 <z_arm_fault+0x22c>)
    1dea:	481a      	ldr	r0, [pc, #104]	; (1e54 <z_arm_fault+0x230>)
    1dec:	bf08      	it	eq
    1dee:	460a      	moveq	r2, r1
    1df0:	f1a7 0310 	sub.w	r3, r7, #16
    1df4:	2145      	movs	r1, #69	; 0x45
    1df6:	f006 f810 	bl	7e1a <z_log_minimal_printk>
    1dfa:	e7ed      	b.n	1dd8 <z_arm_fault+0x1b4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1dfc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1e00:	f023 0301 	bic.w	r3, r3, #1
    1e04:	e789      	b.n	1d1a <z_arm_fault+0xf6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e06:	f1b8 0f00 	cmp.w	r8, #0
    1e0a:	f47f af3b 	bne.w	1c84 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    1e0e:	4605      	mov	r5, r0
			*nested_exc = true;
    1e10:	2601      	movs	r6, #1
    1e12:	e737      	b.n	1c84 <z_arm_fault+0x60>
    1e14:	e000ed00 	.word	0xe000ed00
    1e18:	0105eda6 	.word	0x0105eda6
    1e1c:	000093f6 	.word	0x000093f6
    1e20:	000090c5 	.word	0x000090c5
    1e24:	00008b51 	.word	0x00008b51
    1e28:	0000941a 	.word	0x0000941a
    1e2c:	00009436 	.word	0x00009436
    1e30:	0000945c 	.word	0x0000945c
    1e34:	0000946f 	.word	0x0000946f
    1e38:	00009493 	.word	0x00009493
    1e3c:	e000ed29 	.word	0xe000ed29
    1e40:	e000ed2a 	.word	0xe000ed2a
    1e44:	e000edd0 	.word	0xe000edd0
    1e48:	000094b4 	.word	0x000094b4
    1e4c:	000093c8 	.word	0x000093c8
    1e50:	000093dd 	.word	0x000093dd
    1e54:	000094dd 	.word	0x000094dd

00001e58 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e58:	4b04      	ldr	r3, [pc, #16]	; (1e6c <z_arm_fault_init+0x14>)
    1e5a:	695a      	ldr	r2, [r3, #20]
    1e5c:	f042 0210 	orr.w	r2, r2, #16
    1e60:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1e62:	695a      	ldr	r2, [r3, #20]
    1e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1e68:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1e6a:	4770      	bx	lr
    1e6c:	e000ed00 	.word	0xe000ed00

00001e70 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1e70:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1e74:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1e78:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1e7a:	4672      	mov	r2, lr
	bl z_arm_fault
    1e7c:	f7ff fed2 	bl	1c24 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e80:	bd01      	pop	{r0, pc}
    1e82:	bf00      	nop

00001e84 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e84:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e86:	2120      	movs	r1, #32
    1e88:	4803      	ldr	r0, [pc, #12]	; (1e98 <z_arm_interrupt_init+0x14>)
    1e8a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e8c:	3301      	adds	r3, #1
    1e8e:	2b41      	cmp	r3, #65	; 0x41
    1e90:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e94:	d1f9      	bne.n	1e8a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e96:	4770      	bx	lr
    1e98:	e000e100 	.word	0xe000e100

00001e9c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1e9c:	2000      	movs	r0, #0
    msr CONTROL, r0
    1e9e:	f380 8814 	msr	CONTROL, r0
    isb
    1ea2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1ea6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1ea8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1eac:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1eb0:	f006 fa92 	bl	83d8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1eb4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1eb6:	490e      	ldr	r1, [pc, #56]	; (1ef0 <__start+0x54>)
    str r0, [r1]
    1eb8:	6008      	str	r0, [r1, #0]
    dsb
    1eba:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ebe:	480d      	ldr	r0, [pc, #52]	; (1ef4 <__start+0x58>)
    msr msp, r0
    1ec0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1ec4:	f000 f83c 	bl	1f40 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ec8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1eca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1ece:	480a      	ldr	r0, [pc, #40]	; (1ef8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ed4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1ed6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1eda:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1ede:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ee0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ee2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ee6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1eea:	f7ff fc5d 	bl	17a8 <z_arm_prep_c>
    1eee:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1ef0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ef4:	200025a8 	.word	0x200025a8
    ldr r0, =z_interrupt_stacks
    1ef8:	200026e8 	.word	0x200026e8

00001efc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1efc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1f00:	4905      	ldr	r1, [pc, #20]	; (1f18 <sys_arch_reboot+0x1c>)
    1f02:	4b06      	ldr	r3, [pc, #24]	; (1f1c <sys_arch_reboot+0x20>)
    1f04:	68ca      	ldr	r2, [r1, #12]
    1f06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1f0a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f0c:	60cb      	str	r3, [r1, #12]
    1f0e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1f12:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1f14:	e7fd      	b.n	1f12 <sys_arch_reboot+0x16>
    1f16:	bf00      	nop
    1f18:	e000ed00 	.word	0xe000ed00
    1f1c:	05fa0004 	.word	0x05fa0004

00001f20 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1f20:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1f22:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1f24:	4a05      	ldr	r2, [pc, #20]	; (1f3c <z_arm_clear_arm_mpu_config+0x1c>)
    1f26:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    1f28:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d100      	bne.n	1f32 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1f30:	4770      	bx	lr
  mpu->RNR = rnr;
    1f32:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    1f34:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1f36:	3301      	adds	r3, #1
    1f38:	e7f8      	b.n	1f2c <z_arm_clear_arm_mpu_config+0xc>
    1f3a:	bf00      	nop
    1f3c:	e000ed90 	.word	0xe000ed90

00001f40 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1f40:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1f42:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1f44:	2400      	movs	r4, #0
    1f46:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f4a:	f7ff ffe9 	bl	1f20 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f4e:	4a0e      	ldr	r2, [pc, #56]	; (1f88 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    1f50:	4623      	mov	r3, r4
    1f52:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f54:	f04f 34ff 	mov.w	r4, #4294967295
    1f58:	f103 0020 	add.w	r0, r3, #32
    1f5c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f5e:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f60:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f64:	d1f8      	bne.n	1f58 <z_arm_init_arch_hw_at_boot+0x18>
    1f66:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f68:	f04f 30ff 	mov.w	r0, #4294967295
    1f6c:	f103 0260 	add.w	r2, r3, #96	; 0x60
    1f70:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f72:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f74:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f78:	d1f8      	bne.n	1f6c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1f7a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f80:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1f84:	bd10      	pop	{r4, pc}
    1f86:	bf00      	nop
    1f88:	e000e100 	.word	0xe000e100

00001f8c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1f8c:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <z_impl_k_thread_abort+0x1c>)
    1f8e:	689b      	ldr	r3, [r3, #8]
    1f90:	4283      	cmp	r3, r0
    1f92:	d107      	bne.n	1fa4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f94:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f98:	b123      	cbz	r3, 1fa4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f9a:	4a04      	ldr	r2, [pc, #16]	; (1fac <z_impl_k_thread_abort+0x20>)
    1f9c:	6853      	ldr	r3, [r2, #4]
    1f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1fa2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1fa4:	f002 bd5e 	b.w	4a64 <z_thread_abort>
    1fa8:	200009c4 	.word	0x200009c4
    1fac:	e000ed00 	.word	0xe000ed00

00001fb0 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1fb0:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1fb2:	4b0d      	ldr	r3, [pc, #52]	; (1fe8 <tz_nonsecure_state_setup+0x38>)
    1fb4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1fb6:	6803      	ldr	r3, [r0, #0]
    1fb8:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1fbc:	6843      	ldr	r3, [r0, #4]
    1fbe:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1fc2:	7b02      	ldrb	r2, [r0, #12]
    1fc4:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1fc8:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1fcc:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1fd0:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1fd2:	bf48      	it	mi
    1fd4:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1fd8:	b109      	cbz	r1, 1fde <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1fda:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1fde:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    1fe2:	f3bf 8f6f 	isb	sy
}
    1fe6:	4770      	bx	lr
    1fe8:	e002ed00 	.word	0xe002ed00

00001fec <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fec:	4a08      	ldr	r2, [pc, #32]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1fee:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1ff0:	b148      	cbz	r0, 2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1ff6:	041b      	lsls	r3, r3, #16
    1ff8:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ffa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2002:	60d3      	str	r3, [r2, #12]
}
    2004:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2006:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    200c:	e7f5      	b.n	1ffa <tz_nbanked_exception_target_state_set+0xe>
    200e:	bf00      	nop
    2010:	e000ed00 	.word	0xe000ed00

00002014 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2014:	4a08      	ldr	r2, [pc, #32]	; (2038 <tz_nonsecure_exception_prio_config+0x24>)
    2016:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2018:	b140      	cbz	r0, 202c <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    201a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2028:	60d3      	str	r3, [r2, #12]
}
    202a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    202c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2030:	041b      	lsls	r3, r3, #16
    2032:	0c1b      	lsrs	r3, r3, #16
    2034:	e7f4      	b.n	2020 <tz_nonsecure_exception_prio_config+0xc>
    2036:	bf00      	nop
    2038:	e000ed00 	.word	0xe000ed00

0000203c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    203c:	4a08      	ldr	r2, [pc, #32]	; (2060 <tz_nonsecure_system_reset_req_block+0x24>)
    203e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2040:	b140      	cbz	r0, 2054 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2042:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2044:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2050:	60d3      	str	r3, [r2, #12]
}
    2052:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2054:	f023 0308 	bic.w	r3, r3, #8
    2058:	041b      	lsls	r3, r3, #16
    205a:	0c1b      	lsrs	r3, r3, #16
    205c:	e7f4      	b.n	2048 <tz_nonsecure_system_reset_req_block+0xc>
    205e:	bf00      	nop
    2060:	e000ed00 	.word	0xe000ed00

00002064 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2064:	4a03      	ldr	r2, [pc, #12]	; (2074 <tz_nonsecure_fpu_access_enable+0x10>)
    2066:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    206a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    206e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2072:	4770      	bx	lr
    2074:	e000ed00 	.word	0xe000ed00

00002078 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2078:	4b08      	ldr	r3, [pc, #32]	; (209c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    207a:	681a      	ldr	r2, [r3, #0]
    207c:	b118      	cbz	r0, 2086 <tz_sau_configure+0xe>
    207e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2082:	601a      	str	r2, [r3, #0]
		}
	}
}
    2084:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    2086:	f022 0201 	bic.w	r2, r2, #1
    208a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    208c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    208e:	b111      	cbz	r1, 2096 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2090:	f042 0202 	orr.w	r2, r2, #2
    2094:	e7f5      	b.n	2082 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2096:	f022 0202 	bic.w	r2, r2, #2
    209a:	e7f2      	b.n	2082 <tz_sau_configure+0xa>
    209c:	e000edd0 	.word	0xe000edd0

000020a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    20a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    20a2:	4c09      	ldr	r4, [pc, #36]	; (20c8 <z_arm_configure_static_mpu_regions+0x28>)
    20a4:	4a09      	ldr	r2, [pc, #36]	; (20cc <z_arm_configure_static_mpu_regions+0x2c>)
    20a6:	4623      	mov	r3, r4
    20a8:	2101      	movs	r1, #1
    20aa:	4809      	ldr	r0, [pc, #36]	; (20d0 <z_arm_configure_static_mpu_regions+0x30>)
    20ac:	f000 f91a 	bl	22e4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    20b0:	2300      	movs	r3, #0
    20b2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    20b4:	4b07      	ldr	r3, [pc, #28]	; (20d4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20b6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    20b8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20ba:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    20bc:	9301      	str	r3, [sp, #4]
    20be:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20c0:	f000 f92c 	bl	231c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    20c4:	b004      	add	sp, #16
    20c6:	bd10      	pop	{r4, pc}
    20c8:	20008000 	.word	0x20008000
    20cc:	20000000 	.word	0x20000000
    20d0:	00008878 	.word	0x00008878
    20d4:	20000130 	.word	0x20000130

000020d8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    20d8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    20da:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    20dc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    20de:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    20e2:	f004 031f 	and.w	r3, r4, #31
    20e6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20e8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20ea:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20ec:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    20f0:	4904      	ldr	r1, [pc, #16]	; (2104 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20f2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    20f6:	f043 0301 	orr.w	r3, r3, #1
    20fa:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    20fc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    20fe:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2100:	bd10      	pop	{r4, pc}
    2102:	bf00      	nop
    2104:	e000ed90 	.word	0xe000ed90

00002108 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2108:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    210a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    210c:	680c      	ldr	r4, [r1, #0]
{
    210e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2110:	890a      	ldrh	r2, [r1, #8]
    2112:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2114:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2116:	3b01      	subs	r3, #1
    2118:	f024 041f 	bic.w	r4, r4, #31
    211c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    211e:	f002 021f 	and.w	r2, r2, #31
    2122:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2126:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    212a:	280f      	cmp	r0, #15
    212c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    212e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2132:	9303      	str	r3, [sp, #12]
    2134:	d909      	bls.n	214a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2136:	4602      	mov	r2, r0
    2138:	2145      	movs	r1, #69	; 0x45
    213a:	4806      	ldr	r0, [pc, #24]	; (2154 <mpu_configure_region+0x4c>)
    213c:	f005 fe6d 	bl	7e1a <z_log_minimal_printk>
    2140:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2144:	4620      	mov	r0, r4
    2146:	b005      	add	sp, #20
    2148:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    214a:	4669      	mov	r1, sp
    214c:	f7ff ffc4 	bl	20d8 <region_init>
	return region_allocate_and_init(index,
    2150:	e7f8      	b.n	2144 <mpu_configure_region+0x3c>
    2152:	bf00      	nop
    2154:	000094f9 	.word	0x000094f9

00002158 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    215c:	4689      	mov	r9, r1
    215e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2160:	4606      	mov	r6, r0
    2162:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2166:	4d52      	ldr	r5, [pc, #328]	; (22b0 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2168:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    216a:	45c8      	cmp	r8, r9
    216c:	da23      	bge.n	21b6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    216e:	6877      	ldr	r7, [r6, #4]
    2170:	2f00      	cmp	r7, #0
    2172:	d042      	beq.n	21fa <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2174:	2f1f      	cmp	r7, #31
    2176:	d917      	bls.n	21a8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2178:	06fb      	lsls	r3, r7, #27
    217a:	d115      	bne.n	21a8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    217c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2180:	f01a 0f1f 	tst.w	sl, #31
    2184:	d110      	bne.n	21a8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2186:	4650      	mov	r0, sl
    2188:	f005 fec5 	bl	7f16 <arm_cmse_mpu_region_get>
    218c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    218e:	eb07 000a 	add.w	r0, r7, sl
    2192:	3801      	subs	r0, #1
    2194:	f005 febf 	bl	7f16 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2198:	4583      	cmp	fp, r0
    219a:	d010      	beq.n	21be <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    219c:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    21a0:	465a      	mov	r2, fp
    21a2:	2145      	movs	r1, #69	; 0x45
    21a4:	4843      	ldr	r0, [pc, #268]	; (22b4 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    21a6:	e002      	b.n	21ae <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    21a8:	4642      	mov	r2, r8
    21aa:	2145      	movs	r1, #69	; 0x45
    21ac:	4842      	ldr	r0, [pc, #264]	; (22b8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    21ae:	f005 fe34 	bl	7e1a <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    21b2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    21b6:	4620      	mov	r0, r4
    21b8:	b005      	add	sp, #20
    21ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    21be:	f11b 0f16 	cmn.w	fp, #22
    21c2:	d0ed      	beq.n	21a0 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    21c4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    21c6:	455b      	cmp	r3, fp
    21c8:	dbea      	blt.n	21a0 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    21ca:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    21ce:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    21d0:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    21d4:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    21d6:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    21da:	e9d6 3200 	ldrd	r3, r2, [r6]
    21de:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    21e0:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    21e2:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    21e6:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    21ea:	d11c      	bne.n	2226 <mpu_configure_regions_and_partition.constprop.0+0xce>
    21ec:	4557      	cmp	r7, sl
    21ee:	d108      	bne.n	2202 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    21f0:	4631      	mov	r1, r6
    21f2:	fa5f f08b 	uxtb.w	r0, fp
    21f6:	f7ff ff87 	bl	2108 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    21fa:	f108 0801 	add.w	r8, r8, #1
    21fe:	360c      	adds	r6, #12
    2200:	e7b3      	b.n	216a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2202:	4631      	mov	r1, r6
	MPU->RNR = index;
    2204:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2208:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    220a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    220e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2212:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2214:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2216:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2218:	f7ff ff76 	bl	2108 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    221c:	f110 0f16 	cmn.w	r0, #22
    2220:	d0c7      	beq.n	21b2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2222:	1c44      	adds	r4, r0, #1
    2224:	e7e9      	b.n	21fa <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2226:	3b01      	subs	r3, #1
    2228:	4557      	cmp	r7, sl
    222a:	b2e0      	uxtb	r0, r4
    222c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2230:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2234:	d106      	bne.n	2244 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2236:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2238:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    223a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    223e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2240:	612b      	str	r3, [r5, #16]
			reg_index =
    2242:	e7e9      	b.n	2218 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2244:	6929      	ldr	r1, [r5, #16]
    2246:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    224a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    224c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    224e:	4631      	mov	r1, r6
    2250:	f7ff ff5a 	bl	2108 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2254:	f110 0f16 	cmn.w	r0, #22
    2258:	d0ab      	beq.n	21b2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    225a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    225e:	68ea      	ldr	r2, [r5, #12]
    2260:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2264:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2266:	f362 0304 	bfi	r3, r2, #0, #5
    226a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    226e:	692b      	ldr	r3, [r5, #16]
    2270:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2274:	085b      	lsrs	r3, r3, #1
    2276:	f363 1247 	bfi	r2, r3, #5, #3
    227a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    227e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2282:	4413      	add	r3, r2
    2284:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2286:	f023 031f 	bic.w	r3, r3, #31
    228a:	443b      	add	r3, r7
			reg_index++;
    228c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    228e:	eba3 0a0a 	sub.w	sl, r3, sl
    2292:	b2e0      	uxtb	r0, r4
    2294:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2298:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    229a:	9303      	str	r3, [sp, #12]
    229c:	d903      	bls.n	22a6 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    229e:	4602      	mov	r2, r0
    22a0:	2145      	movs	r1, #69	; 0x45
    22a2:	4806      	ldr	r0, [pc, #24]	; (22bc <mpu_configure_regions_and_partition.constprop.0+0x164>)
    22a4:	e783      	b.n	21ae <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    22a6:	4669      	mov	r1, sp
    22a8:	f7ff ff16 	bl	20d8 <region_init>
    22ac:	e7b9      	b.n	2222 <mpu_configure_regions_and_partition.constprop.0+0xca>
    22ae:	bf00      	nop
    22b0:	e000ed90 	.word	0xe000ed90
    22b4:	0000954c 	.word	0x0000954c
    22b8:	00009524 	.word	0x00009524
    22bc:	000094f9 	.word	0x000094f9

000022c0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    22c0:	2205      	movs	r2, #5
    22c2:	4b03      	ldr	r3, [pc, #12]	; (22d0 <arm_core_mpu_enable+0x10>)
    22c4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    22c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22ca:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    22ce:	4770      	bx	lr
    22d0:	e000ed90 	.word	0xe000ed90

000022d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    22d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    22d8:	2200      	movs	r2, #0
    22da:	4b01      	ldr	r3, [pc, #4]	; (22e0 <arm_core_mpu_disable+0xc>)
    22dc:	605a      	str	r2, [r3, #4]
}
    22de:	4770      	bx	lr
    22e0:	e000ed90 	.word	0xe000ed90

000022e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    22e4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    22e6:	4c0a      	ldr	r4, [pc, #40]	; (2310 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    22e8:	7822      	ldrb	r2, [r4, #0]
    22ea:	f7ff ff35 	bl	2158 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22ee:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    22f0:	3016      	adds	r0, #22
    22f2:	d10c      	bne.n	230e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22f4:	4907      	ldr	r1, [pc, #28]	; (2314 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    22f6:	4808      	ldr	r0, [pc, #32]	; (2318 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    22f8:	f240 1211 	movw	r2, #273	; 0x111
    22fc:	f005 fcef 	bl	7cde <printk>
			regions_num);
	}
}
    2300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2304:	f240 1111 	movw	r1, #273	; 0x111
    2308:	4802      	ldr	r0, [pc, #8]	; (2314 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    230a:	f005 bd73 	b.w	7df4 <assert_post_action>
}
    230e:	bd10      	pop	{r4, pc}
    2310:	200013e4 	.word	0x200013e4
    2314:	00009574 	.word	0x00009574
    2318:	00008b51 	.word	0x00008b51

0000231c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    231c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2320:	4d2d      	ldr	r5, [pc, #180]	; (23d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    2322:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2324:	4606      	mov	r6, r0
    2326:	f04f 0800 	mov.w	r8, #0
    232a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    232c:	4f2b      	ldr	r7, [pc, #172]	; (23dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    232e:	45d0      	cmp	r8, sl
    2330:	db02      	blt.n	2338 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2332:	b003      	add	sp, #12
    2334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    2338:	f8d6 9004 	ldr.w	r9, [r6, #4]
    233c:	f1b9 0f00 	cmp.w	r9, #0
    2340:	d044      	beq.n	23cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2342:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2344:	4608      	mov	r0, r1
    2346:	9101      	str	r1, [sp, #4]
    2348:	f005 fde5 	bl	7f16 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    234c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    234e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2350:	eb09 0001 	add.w	r0, r9, r1
    2354:	3801      	subs	r0, #1
    2356:	f005 fdde 	bl	7f16 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    235a:	4284      	cmp	r4, r0
    235c:	f04f 0214 	mov.w	r2, #20
    2360:	4b1f      	ldr	r3, [pc, #124]	; (23e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    2362:	d013      	beq.n	238c <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    2364:	f06f 0315 	mvn.w	r3, #21
    2368:	fb02 f808 	mul.w	r8, r2, r8
    236c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2370:	f240 1221 	movw	r2, #289	; 0x121
    2374:	491b      	ldr	r1, [pc, #108]	; (23e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    2376:	481c      	ldr	r0, [pc, #112]	; (23e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    2378:	f005 fcb1 	bl	7cde <printk>
    237c:	f240 1121 	movw	r1, #289	; 0x121
    2380:	4818      	ldr	r0, [pc, #96]	; (23e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    2382:	b003      	add	sp, #12
    2384:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2388:	f005 bd34 	b.w	7df4 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    238c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2390:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2392:	d0ed      	beq.n	2370 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2394:	7819      	ldrb	r1, [r3, #0]
    2396:	42a1      	cmp	r1, r4
    2398:	ddea      	ble.n	2370 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    239a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    239e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    23a0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    23a2:	68fc      	ldr	r4, [r7, #12]
    23a4:	f100 0108 	add.w	r1, r0, #8
    23a8:	7b00      	ldrb	r0, [r0, #12]
    23aa:	f364 0004 	bfi	r0, r4, #0, #5
    23ae:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    23b0:	6938      	ldr	r0, [r7, #16]
    23b2:	790c      	ldrb	r4, [r1, #4]
    23b4:	0840      	lsrs	r0, r0, #1
    23b6:	f360 1447 	bfi	r4, r0, #5, #3
    23ba:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    23bc:	68f9      	ldr	r1, [r7, #12]
    23be:	f021 011f 	bic.w	r1, r1, #31
    23c2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    23c4:	6939      	ldr	r1, [r7, #16]
    23c6:	f021 011f 	bic.w	r1, r1, #31
    23ca:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    23cc:	f108 0801 	add.w	r8, r8, #1
    23d0:	3514      	adds	r5, #20
    23d2:	360c      	adds	r6, #12
    23d4:	e7ab      	b.n	232e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    23d6:	bf00      	nop
    23d8:	20000934 	.word	0x20000934
    23dc:	e000ed90 	.word	0xe000ed90
    23e0:	200013e4 	.word	0x200013e4
    23e4:	00009574 	.word	0x00009574
    23e8:	00008b51 	.word	0x00008b51

000023ec <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    23ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    23ee:	4d1b      	ldr	r5, [pc, #108]	; (245c <z_arm_mpu_init+0x70>)
    23f0:	682e      	ldr	r6, [r5, #0]
    23f2:	2e10      	cmp	r6, #16
    23f4:	d90d      	bls.n	2412 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    23f6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    23fa:	4919      	ldr	r1, [pc, #100]	; (2460 <z_arm_mpu_init+0x74>)
    23fc:	4819      	ldr	r0, [pc, #100]	; (2464 <z_arm_mpu_init+0x78>)
    23fe:	f005 fc6e 	bl	7cde <printk>
    2402:	4817      	ldr	r0, [pc, #92]	; (2460 <z_arm_mpu_init+0x74>)
    2404:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2408:	f005 fcf4 	bl	7df4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    240c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2410:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    2412:	f7ff ff5f 	bl	22d4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2416:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2418:	4c13      	ldr	r4, [pc, #76]	; (2468 <z_arm_mpu_init+0x7c>)
    241a:	4a14      	ldr	r2, [pc, #80]	; (246c <z_arm_mpu_init+0x80>)
    241c:	6322      	str	r2, [r4, #48]	; 0x30
    241e:	4286      	cmp	r6, r0
    2420:	d115      	bne.n	244e <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    2422:	4b13      	ldr	r3, [pc, #76]	; (2470 <z_arm_mpu_init+0x84>)
    2424:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    2426:	f7ff ff4b 	bl	22c0 <arm_core_mpu_enable>
	__ASSERT(
    242a:	6823      	ldr	r3, [r4, #0]
    242c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2430:	2b10      	cmp	r3, #16
    2432:	d00a      	beq.n	244a <z_arm_mpu_init+0x5e>
    2434:	490a      	ldr	r1, [pc, #40]	; (2460 <z_arm_mpu_init+0x74>)
    2436:	480b      	ldr	r0, [pc, #44]	; (2464 <z_arm_mpu_init+0x78>)
    2438:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    243c:	f005 fc4f 	bl	7cde <printk>
    2440:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    2444:	4806      	ldr	r0, [pc, #24]	; (2460 <z_arm_mpu_init+0x74>)
    2446:	f005 fcd5 	bl	7df4 <assert_post_action>
	return 0;
    244a:	2000      	movs	r0, #0
    244c:	e7e0      	b.n	2410 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    244e:	6869      	ldr	r1, [r5, #4]
    2450:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2454:	f7ff fe40 	bl	20d8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2458:	3001      	adds	r0, #1
    245a:	e7e0      	b.n	241e <z_arm_mpu_init+0x32>
    245c:	00008884 	.word	0x00008884
    2460:	00009574 	.word	0x00009574
    2464:	00008b51 	.word	0x00008b51
    2468:	e000ed90 	.word	0xe000ed90
    246c:	0044ffaa 	.word	0x0044ffaa
    2470:	200013e4 	.word	0x200013e4

00002474 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2474:	4b01      	ldr	r3, [pc, #4]	; (247c <__stdout_hook_install+0x8>)
    2476:	6018      	str	r0, [r3, #0]
}
    2478:	4770      	bx	lr
    247a:	bf00      	nop
    247c:	20000024 	.word	0x20000024

00002480 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2484:	4c0e      	ldr	r4, [pc, #56]	; (24c0 <onoff_start+0x40>)
{
    2486:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2488:	1b05      	subs	r5, r0, r4
    248a:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    248e:	250c      	movs	r5, #12
    2490:	435d      	muls	r5, r3
    2492:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    2496:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    2498:	4420      	add	r0, r4
    249a:	2140      	movs	r1, #64	; 0x40
    249c:	f005 fd97 	bl	7fce <set_starting_state>
	if (err < 0) {
    24a0:	1e01      	subs	r1, r0, #0
    24a2:	db08      	blt.n	24b6 <onoff_start+0x36>
	subdata->cb = cb;
    24a4:	4b07      	ldr	r3, [pc, #28]	; (24c4 <onoff_start+0x44>)
    24a6:	442c      	add	r4, r5
	subdata->user_data = user_data;
    24a8:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    24ac:	4b06      	ldr	r3, [pc, #24]	; (24c8 <onoff_start+0x48>)
    24ae:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    24b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    24b4:	4718      	bx	r3
		notify(mgr, err);
    24b6:	4638      	mov	r0, r7
    24b8:	4633      	mov	r3, r6
}
    24ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    24be:	4718      	bx	r3
    24c0:	20000948 	.word	0x20000948
    24c4:	00008031 	.word	0x00008031
    24c8:	000088c4 	.word	0x000088c4

000024cc <get_status>:
{
    24cc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24ce:	b2cc      	uxtb	r4, r1
    24d0:	2c01      	cmp	r4, #1
{
    24d2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24d4:	d908      	bls.n	24e8 <get_status+0x1c>
    24d6:	4908      	ldr	r1, [pc, #32]	; (24f8 <get_status+0x2c>)
    24d8:	4808      	ldr	r0, [pc, #32]	; (24fc <get_status+0x30>)
    24da:	2279      	movs	r2, #121	; 0x79
    24dc:	f005 fbff 	bl	7cde <printk>
    24e0:	2179      	movs	r1, #121	; 0x79
    24e2:	4805      	ldr	r0, [pc, #20]	; (24f8 <get_status+0x2c>)
    24e4:	f005 fc86 	bl	7df4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    24e8:	210c      	movs	r1, #12
    24ea:	692b      	ldr	r3, [r5, #16]
    24ec:	fb04 3401 	mla	r4, r4, r1, r3
    24f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    24f2:	f000 0007 	and.w	r0, r0, #7
    24f6:	bd38      	pop	{r3, r4, r5, pc}
    24f8:	000095ba 	.word	0x000095ba
    24fc:	00008b51 	.word	0x00008b51

00002500 <stop>:
{
    2500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2502:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2504:	2c01      	cmp	r4, #1
{
    2506:	4605      	mov	r5, r0
    2508:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    250a:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    250c:	d90a      	bls.n	2524 <stop+0x24>
    250e:	4918      	ldr	r1, [pc, #96]	; (2570 <stop+0x70>)
    2510:	4818      	ldr	r0, [pc, #96]	; (2574 <stop+0x74>)
    2512:	f240 124d 	movw	r2, #333	; 0x14d
    2516:	f005 fbe2 	bl	7cde <printk>
    251a:	f240 114d 	movw	r1, #333	; 0x14d
    251e:	4814      	ldr	r0, [pc, #80]	; (2570 <stop+0x70>)
    2520:	f005 fc68 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    2524:	f04f 0320 	mov.w	r3, #32
    2528:	f3ef 8211 	mrs	r2, BASEPRI
    252c:	f383 8812 	msr	BASEPRI_MAX, r3
    2530:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2534:	230c      	movs	r3, #12
    2536:	fb03 7104 	mla	r1, r3, r4, r7
    253a:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    253c:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2540:	d001      	beq.n	2546 <stop+0x46>
    2542:	428e      	cmp	r6, r1
    2544:	d111      	bne.n	256a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2546:	2101      	movs	r1, #1
	int err = 0;
    2548:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    254a:	fb03 7304 	mla	r3, r3, r4, r7
    254e:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    2550:	f382 8811 	msr	BASEPRI, r2
    2554:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2558:	b930      	cbnz	r0, 2568 <stop+0x68>
	get_sub_config(dev, type)->stop();
    255a:	230c      	movs	r3, #12
    255c:	6869      	ldr	r1, [r5, #4]
    255e:	fb03 1404 	mla	r4, r3, r4, r1
    2562:	6863      	ldr	r3, [r4, #4]
    2564:	4798      	blx	r3
	return 0;
    2566:	2000      	movs	r0, #0
}
    2568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    256a:	f04f 30ff 	mov.w	r0, #4294967295
    256e:	e7ef      	b.n	2550 <stop+0x50>
    2570:	000095ba 	.word	0x000095ba
    2574:	00008b51 	.word	0x00008b51

00002578 <onoff_stop>:
{
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    257c:	4906      	ldr	r1, [pc, #24]	; (2598 <onoff_stop+0x20>)
{
    257e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2580:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2582:	1149      	asrs	r1, r1, #5
    2584:	2240      	movs	r2, #64	; 0x40
    2586:	4805      	ldr	r0, [pc, #20]	; (259c <onoff_stop+0x24>)
    2588:	f7ff ffba 	bl	2500 <stop>
	notify(mgr, res);
    258c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    258e:	4601      	mov	r1, r0
	notify(mgr, res);
    2590:	4620      	mov	r0, r4
}
    2592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2596:	4718      	bx	r3
    2598:	20000948 	.word	0x20000948
    259c:	0000843c 	.word	0x0000843c

000025a0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    25a0:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    25a2:	2200      	movs	r2, #0
    25a4:	2101      	movs	r1, #1
{
    25a6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    25a8:	2005      	movs	r0, #5
    25aa:	f7ff f8d3 	bl	1754 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    25ae:	2005      	movs	r0, #5
    25b0:	f7ff f8b2 	bl	1718 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    25b4:	480f      	ldr	r0, [pc, #60]	; (25f4 <clk_init+0x54>)
    25b6:	f000 fd0d 	bl	2fd4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    25ba:	4b0f      	ldr	r3, [pc, #60]	; (25f8 <clk_init+0x58>)
    25bc:	4298      	cmp	r0, r3
    25be:	d115      	bne.n	25ec <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    25c0:	f000 fd28 	bl	3014 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    25c4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    25c6:	490d      	ldr	r1, [pc, #52]	; (25fc <clk_init+0x5c>)
    25c8:	4630      	mov	r0, r6
    25ca:	f005 fb95 	bl	7cf8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    25ce:	2800      	cmp	r0, #0
    25d0:	db0b      	blt.n	25ea <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    25d2:	2501      	movs	r5, #1
    25d4:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    25d6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    25d8:	4908      	ldr	r1, [pc, #32]	; (25fc <clk_init+0x5c>)
    25da:	f104 0020 	add.w	r0, r4, #32
    25de:	f005 fb8b 	bl	7cf8 <onoff_manager_init>
		if (err < 0) {
    25e2:	2800      	cmp	r0, #0
    25e4:	db01      	blt.n	25ea <clk_init+0x4a>
	}

	return 0;
    25e6:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    25e8:	6565      	str	r5, [r4, #84]	; 0x54
}
    25ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    25ec:	f06f 0004 	mvn.w	r0, #4
    25f0:	e7fb      	b.n	25ea <clk_init+0x4a>
    25f2:	bf00      	nop
    25f4:	00002635 	.word	0x00002635
    25f8:	0bad0000 	.word	0x0bad0000
    25fc:	000088dc 	.word	0x000088dc

00002600 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2600:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2602:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2604:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    2606:	434b      	muls	r3, r1
    2608:	4808      	ldr	r0, [pc, #32]	; (262c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    260a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    260c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    260e:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    2610:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2614:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2616:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2618:	f005 fcf7 	bl	800a <set_on_state>
	if (callback) {
    261c:	b12d      	cbz	r5, 262a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    261e:	4632      	mov	r2, r6
    2620:	462b      	mov	r3, r5
}
    2622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2626:	4802      	ldr	r0, [pc, #8]	; (2630 <clkstarted_handle.constprop.0+0x30>)
    2628:	4718      	bx	r3
}
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	20000948 	.word	0x20000948
    2630:	0000843c 	.word	0x0000843c

00002634 <clock_event_handler>:
	switch (event) {
    2634:	2801      	cmp	r0, #1
{
    2636:	b508      	push	{r3, lr}
	switch (event) {
    2638:	d006      	beq.n	2648 <clock_event_handler+0x14>
    263a:	2803      	cmp	r0, #3
    263c:	d008      	beq.n	2650 <clock_event_handler+0x1c>
    263e:	b9a0      	cbnz	r0, 266a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2640:	4b0f      	ldr	r3, [pc, #60]	; (2680 <clock_event_handler+0x4c>)
    2642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2644:	075b      	lsls	r3, r3, #29
    2646:	d119      	bne.n	267c <clock_event_handler+0x48>
}
    2648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    264c:	f7ff bfd8 	b.w	2600 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2650:	490c      	ldr	r1, [pc, #48]	; (2684 <clock_event_handler+0x50>)
    2652:	f240 225e 	movw	r2, #606	; 0x25e
    2656:	480c      	ldr	r0, [pc, #48]	; (2688 <clock_event_handler+0x54>)
    2658:	f005 fb41 	bl	7cde <printk>
    265c:	f240 215e 	movw	r1, #606	; 0x25e
}
    2660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2664:	4807      	ldr	r0, [pc, #28]	; (2684 <clock_event_handler+0x50>)
    2666:	f005 bbc5 	b.w	7df4 <assert_post_action>
    266a:	4906      	ldr	r1, [pc, #24]	; (2684 <clock_event_handler+0x50>)
    266c:	f240 2262 	movw	r2, #610	; 0x262
    2670:	4805      	ldr	r0, [pc, #20]	; (2688 <clock_event_handler+0x54>)
    2672:	f005 fb34 	bl	7cde <printk>
    2676:	f240 2162 	movw	r1, #610	; 0x262
    267a:	e7f1      	b.n	2660 <clock_event_handler+0x2c>
}
    267c:	bd08      	pop	{r3, pc}
    267e:	bf00      	nop
    2680:	20000948 	.word	0x20000948
    2684:	000095ba 	.word	0x000095ba
    2688:	00008b51 	.word	0x00008b51

0000268c <generic_hfclk_start>:
{
    268c:	b508      	push	{r3, lr}
	__asm__ volatile(
    268e:	f04f 0320 	mov.w	r3, #32
    2692:	f3ef 8111 	mrs	r1, BASEPRI
    2696:	f383 8812 	msr	BASEPRI_MAX, r3
    269a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    269e:	4a12      	ldr	r2, [pc, #72]	; (26e8 <generic_hfclk_start+0x5c>)
    26a0:	6813      	ldr	r3, [r2, #0]
    26a2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    26a6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    26aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    26ac:	d00c      	beq.n	26c8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26ae:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    26b2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26b6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    26ba:	f013 0301 	ands.w	r3, r3, #1
    26be:	d003      	beq.n	26c8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    26c0:	480a      	ldr	r0, [pc, #40]	; (26ec <generic_hfclk_start+0x60>)
    26c2:	f005 fca2 	bl	800a <set_on_state>
			already_started = true;
    26c6:	2301      	movs	r3, #1
	__asm__ volatile(
    26c8:	f381 8811 	msr	BASEPRI, r1
    26cc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    26d0:	b123      	cbz	r3, 26dc <generic_hfclk_start+0x50>
}
    26d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    26d6:	2000      	movs	r0, #0
    26d8:	f7ff bf92 	b.w	2600 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    26dc:	2001      	movs	r0, #1
}
    26de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    26e2:	f000 bcb5 	b.w	3050 <nrfx_clock_start>
    26e6:	bf00      	nop
    26e8:	200009a0 	.word	0x200009a0
    26ec:	20000990 	.word	0x20000990

000026f0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26f0:	4b07      	ldr	r3, [pc, #28]	; (2710 <generic_hfclk_stop+0x20>)
    26f2:	e8d3 2fef 	ldaex	r2, [r3]
    26f6:	f022 0102 	bic.w	r1, r2, #2
    26fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
    26fe:	2800      	cmp	r0, #0
    2700:	d1f7      	bne.n	26f2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2702:	07d3      	lsls	r3, r2, #31
    2704:	d402      	bmi.n	270c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2706:	2001      	movs	r0, #1
    2708:	f000 bcf2 	b.w	30f0 <nrfx_clock_stop>
}
    270c:	4770      	bx	lr
    270e:	bf00      	nop
    2710:	200009a0 	.word	0x200009a0

00002714 <api_blocking_start>:
{
    2714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2716:	2200      	movs	r2, #0
    2718:	2301      	movs	r3, #1
    271a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    271e:	466b      	mov	r3, sp
    2720:	4a08      	ldr	r2, [pc, #32]	; (2744 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2722:	f8cd d000 	str.w	sp, [sp]
    2726:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    272a:	f005 fc93 	bl	8054 <api_start>
	if (err < 0) {
    272e:	2800      	cmp	r0, #0
    2730:	db05      	blt.n	273e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2736:	2300      	movs	r3, #0
    2738:	4668      	mov	r0, sp
    273a:	f001 fa63 	bl	3c04 <z_impl_k_sem_take>
}
    273e:	b005      	add	sp, #20
    2740:	f85d fb04 	ldr.w	pc, [sp], #4
    2744:	0000804f 	.word	0x0000804f

00002748 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2748:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    274a:	4808      	ldr	r0, [pc, #32]	; (276c <uart_console_init+0x24>)
    274c:	4b08      	ldr	r3, [pc, #32]	; (2770 <uart_console_init+0x28>)
    274e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2750:	f005 fddc 	bl	830c <z_device_ready>
    2754:	b138      	cbz	r0, 2766 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2756:	4807      	ldr	r0, [pc, #28]	; (2774 <uart_console_init+0x2c>)
    2758:	f7ff fe8c 	bl	2474 <__stdout_hook_install>
	__printk_hook_install(console_out);
    275c:	4805      	ldr	r0, [pc, #20]	; (2774 <uart_console_init+0x2c>)
    275e:	f7fd ff09 	bl	574 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2762:	2000      	movs	r0, #0
}
    2764:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2766:	f06f 0012 	mvn.w	r0, #18
    276a:	e7fb      	b.n	2764 <uart_console_init+0x1c>
    276c:	00008484 	.word	0x00008484
    2770:	200009a4 	.word	0x200009a4
    2774:	00002779 	.word	0x00002779

00002778 <console_out>:
	if ('\n' == c) {
    2778:	280a      	cmp	r0, #10
{
    277a:	b538      	push	{r3, r4, r5, lr}
    277c:	4604      	mov	r4, r0
    277e:	4d07      	ldr	r5, [pc, #28]	; (279c <console_out+0x24>)
	if ('\n' == c) {
    2780:	d104      	bne.n	278c <console_out+0x14>
    2782:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2784:	6883      	ldr	r3, [r0, #8]
    2786:	210d      	movs	r1, #13
    2788:	685b      	ldr	r3, [r3, #4]
    278a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    278c:	6828      	ldr	r0, [r5, #0]
    278e:	6883      	ldr	r3, [r0, #8]
    2790:	b2e1      	uxtb	r1, r4
    2792:	685b      	ldr	r3, [r3, #4]
    2794:	4798      	blx	r3
}
    2796:	4620      	mov	r0, r4
    2798:	bd38      	pop	{r3, r4, r5, pc}
    279a:	bf00      	nop
    279c:	200009a4 	.word	0x200009a4

000027a0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    27a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    27a2:	794b      	ldrb	r3, [r1, #5]
    27a4:	2b01      	cmp	r3, #1
    27a6:	d026      	beq.n	27f6 <uarte_nrfx_configure+0x56>
    27a8:	2b03      	cmp	r3, #3
    27aa:	d121      	bne.n	27f0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    27ac:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    27ae:	798b      	ldrb	r3, [r1, #6]
    27b0:	2b03      	cmp	r3, #3
    27b2:	d11d      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    27b4:	79cc      	ldrb	r4, [r1, #7]
    27b6:	b10c      	cbz	r4, 27bc <uarte_nrfx_configure+0x1c>
    27b8:	2c01      	cmp	r4, #1
    27ba:	d119      	bne.n	27f0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    27bc:	790a      	ldrb	r2, [r1, #4]
    27be:	b112      	cbz	r2, 27c6 <uarte_nrfx_configure+0x26>
    27c0:	2a02      	cmp	r2, #2
    27c2:	d115      	bne.n	27f0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    27c4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    27c6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    27c8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    27ca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    27ce:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    27d0:	d065      	beq.n	289e <uarte_nrfx_configure+0xfe>
    27d2:	d82d      	bhi.n	2830 <uarte_nrfx_configure+0x90>
    27d4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    27d8:	d064      	beq.n	28a4 <uarte_nrfx_configure+0x104>
    27da:	d816      	bhi.n	280a <uarte_nrfx_configure+0x6a>
    27dc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    27e0:	d062      	beq.n	28a8 <uarte_nrfx_configure+0x108>
    27e2:	d80a      	bhi.n	27fa <uarte_nrfx_configure+0x5a>
    27e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    27e8:	d061      	beq.n	28ae <uarte_nrfx_configure+0x10e>
    27ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    27ee:	d061      	beq.n	28b4 <uarte_nrfx_configure+0x114>
    27f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    27f4:	e052      	b.n	289c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    27f6:	2600      	movs	r6, #0
    27f8:	e7d9      	b.n	27ae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    27fa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    27fe:	d05c      	beq.n	28ba <uarte_nrfx_configure+0x11a>
    2800:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2804:	d1f4      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2806:	4b37      	ldr	r3, [pc, #220]	; (28e4 <uarte_nrfx_configure+0x144>)
    2808:	e03c      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    280a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    280e:	d057      	beq.n	28c0 <uarte_nrfx_configure+0x120>
    2810:	d807      	bhi.n	2822 <uarte_nrfx_configure+0x82>
    2812:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2816:	d055      	beq.n	28c4 <uarte_nrfx_configure+0x124>
    2818:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    281c:	d1e8      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    281e:	4b32      	ldr	r3, [pc, #200]	; (28e8 <uarte_nrfx_configure+0x148>)
    2820:	e030      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2822:	f647 2712 	movw	r7, #31250	; 0x7a12
    2826:	42bb      	cmp	r3, r7
    2828:	d1e2      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    282a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    282e:	e029      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2830:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2834:	d048      	beq.n	28c8 <uarte_nrfx_configure+0x128>
    2836:	d813      	bhi.n	2860 <uarte_nrfx_configure+0xc0>
    2838:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    283c:	d047      	beq.n	28ce <uarte_nrfx_configure+0x12e>
    283e:	d809      	bhi.n	2854 <uarte_nrfx_configure+0xb4>
    2840:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2844:	42bb      	cmp	r3, r7
    2846:	d044      	beq.n	28d2 <uarte_nrfx_configure+0x132>
    2848:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    284c:	d1d0      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    284e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2852:	e017      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2854:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2858:	d1ca      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    285a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    285e:	e011      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2860:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2864:	d038      	beq.n	28d8 <uarte_nrfx_configure+0x138>
    2866:	d808      	bhi.n	287a <uarte_nrfx_configure+0xda>
    2868:	4f20      	ldr	r7, [pc, #128]	; (28ec <uarte_nrfx_configure+0x14c>)
    286a:	42bb      	cmp	r3, r7
    286c:	d037      	beq.n	28de <uarte_nrfx_configure+0x13e>
    286e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2872:	d1bd      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2874:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2878:	e004      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    287a:	4f1d      	ldr	r7, [pc, #116]	; (28f0 <uarte_nrfx_configure+0x150>)
    287c:	42bb      	cmp	r3, r7
    287e:	d1b7      	bne.n	27f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2884:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2888:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    288a:	4334      	orrs	r4, r6
    288c:	4322      	orrs	r2, r4
    288e:	3304      	adds	r3, #4
    2890:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2892:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2896:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    289a:	2000      	movs	r0, #0
}
    289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    289e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    28a2:	e7ef      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    28a4:	4b13      	ldr	r3, [pc, #76]	; (28f4 <uarte_nrfx_configure+0x154>)
    28a6:	e7ed      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    28a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    28ac:	e7ea      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    28ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    28b2:	e7e7      	b.n	2884 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    28b4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    28b8:	e7e4      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    28ba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    28be:	e7e1      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    28c0:	4b0d      	ldr	r3, [pc, #52]	; (28f8 <uarte_nrfx_configure+0x158>)
    28c2:	e7df      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    28c4:	4b0d      	ldr	r3, [pc, #52]	; (28fc <uarte_nrfx_configure+0x15c>)
    28c6:	e7dd      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    28c8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    28cc:	e7da      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    28ce:	4b0c      	ldr	r3, [pc, #48]	; (2900 <uarte_nrfx_configure+0x160>)
    28d0:	e7d8      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    28d2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    28d6:	e7d5      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    28d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    28dc:	e7d2      	b.n	2884 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    28de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    28e2:	e7cf      	b.n	2884 <uarte_nrfx_configure+0xe4>
    28e4:	0013b000 	.word	0x0013b000
    28e8:	004ea000 	.word	0x004ea000
    28ec:	0003d090 	.word	0x0003d090
    28f0:	000f4240 	.word	0x000f4240
    28f4:	00275000 	.word	0x00275000
    28f8:	0075c000 	.word	0x0075c000
    28fc:	003af000 	.word	0x003af000
    2900:	013a9000 	.word	0x013a9000

00002904 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2904:	6803      	ldr	r3, [r0, #0]
{
    2906:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2908:	095a      	lsrs	r2, r3, #5
    290a:	bf0c      	ite	eq
    290c:	f04f 32ff 	moveq.w	r2, #4294967295
    2910:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2912:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2916:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    291a:	07db      	lsls	r3, r3, #31
{
    291c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    291e:	d40a      	bmi.n	2936 <nrf_gpio_pin_port_decode+0x32>
    2920:	490e      	ldr	r1, [pc, #56]	; (295c <nrf_gpio_pin_port_decode+0x58>)
    2922:	480f      	ldr	r0, [pc, #60]	; (2960 <nrf_gpio_pin_port_decode+0x5c>)
    2924:	f240 2229 	movw	r2, #553	; 0x229
    2928:	f005 f9d9 	bl	7cde <printk>
    292c:	f240 2129 	movw	r1, #553	; 0x229
    2930:	480a      	ldr	r0, [pc, #40]	; (295c <nrf_gpio_pin_port_decode+0x58>)
    2932:	f005 fa5f 	bl	7df4 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    2936:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2938:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    293c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    293e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2940:	d00a      	beq.n	2958 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    2942:	4906      	ldr	r1, [pc, #24]	; (295c <nrf_gpio_pin_port_decode+0x58>)
    2944:	4806      	ldr	r0, [pc, #24]	; (2960 <nrf_gpio_pin_port_decode+0x5c>)
    2946:	f240 222e 	movw	r2, #558	; 0x22e
    294a:	f005 f9c8 	bl	7cde <printk>
    294e:	f240 212e 	movw	r1, #558	; 0x22e
    2952:	4802      	ldr	r0, [pc, #8]	; (295c <nrf_gpio_pin_port_decode+0x58>)
    2954:	f005 fa4e 	bl	7df4 <assert_post_action>
}
    2958:	4802      	ldr	r0, [pc, #8]	; (2964 <nrf_gpio_pin_port_decode+0x60>)
    295a:	bd10      	pop	{r4, pc}
    295c:	00009611 	.word	0x00009611
    2960:	00008b51 	.word	0x00008b51
    2964:	50842500 	.word	0x50842500

00002968 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296a:	4605      	mov	r5, r0
    296c:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    296e:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2970:	f005 fcf2 	bl	8358 <k_is_in_isr>
    2974:	b910      	cbnz	r0, 297c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2976:	4b2c      	ldr	r3, [pc, #176]	; (2a28 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	b983      	cbnz	r3, 299e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    297c:	f04f 0320 	mov.w	r3, #32
    2980:	f3ef 8411 	mrs	r4, BASEPRI
    2984:	f383 8812 	msr	BASEPRI_MAX, r3
    2988:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    298c:	4628      	mov	r0, r5
    298e:	f005 fbc4 	bl	811a <is_tx_ready>
    2992:	bb28      	cbnz	r0, 29e0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2994:	f384 8811 	msr	BASEPRI, r4
    2998:	f3bf 8f6f 	isb	sy
}
    299c:	e7ee      	b.n	297c <uarte_nrfx_poll_out+0x14>
{
    299e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    29a0:	4628      	mov	r0, r5
    29a2:	f005 fbba 	bl	811a <is_tx_ready>
    29a6:	b970      	cbnz	r0, 29c6 <uarte_nrfx_poll_out+0x5e>
    29a8:	2001      	movs	r0, #1
    29aa:	f005 fcac 	bl	8306 <nrfx_busy_wait>
    29ae:	3c01      	subs	r4, #1
    29b0:	d1f6      	bne.n	29a0 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    29b2:	2100      	movs	r1, #0
    29b4:	2021      	movs	r0, #33	; 0x21
    29b6:	f002 f81f 	bl	49f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    29ba:	e7f0      	b.n	299e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    29bc:	f384 8811 	msr	BASEPRI, r4
    29c0:	f3bf 8f6f 	isb	sy
}
    29c4:	e7f5      	b.n	29b2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    29c6:	f04f 0320 	mov.w	r3, #32
    29ca:	f3ef 8411 	mrs	r4, BASEPRI
    29ce:	f383 8812 	msr	BASEPRI_MAX, r3
    29d2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    29d6:	4628      	mov	r0, r5
    29d8:	f005 fb9f 	bl	811a <is_tx_ready>
    29dc:	2800      	cmp	r0, #0
    29de:	d0ed      	beq.n	29bc <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    29e0:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    29e2:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    29e6:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    29e8:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    29ea:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    29ee:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29f2:	2200      	movs	r2, #0
    29f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    29f8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    29fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2a00:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2a04:	684a      	ldr	r2, [r1, #4]
    2a06:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2a08:	bf41      	itttt	mi
    2a0a:	2208      	movmi	r2, #8
    2a0c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2a10:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2a14:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a18:	2201      	movs	r2, #1
    2a1a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2a1c:	f384 8811 	msr	BASEPRI, r4
    2a20:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a26:	bf00      	nop
    2a28:	200013e5 	.word	0x200013e5

00002a2c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    2a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a2e:	460f      	mov	r7, r1
    2a30:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    2a32:	b940      	cbnz	r0, 2a46 <entropy_cc3xx_rng_get_entropy+0x1a>
    2a34:	4918      	ldr	r1, [pc, #96]	; (2a98 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2a36:	4819      	ldr	r0, [pc, #100]	; (2a9c <entropy_cc3xx_rng_get_entropy+0x70>)
    2a38:	2224      	movs	r2, #36	; 0x24
    2a3a:	f005 f950 	bl	7cde <printk>
    2a3e:	2124      	movs	r1, #36	; 0x24
    2a40:	4815      	ldr	r0, [pc, #84]	; (2a98 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2a42:	f005 f9d7 	bl	7df4 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    2a46:	b947      	cbnz	r7, 2a5a <entropy_cc3xx_rng_get_entropy+0x2e>
    2a48:	4913      	ldr	r1, [pc, #76]	; (2a98 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2a4a:	4814      	ldr	r0, [pc, #80]	; (2a9c <entropy_cc3xx_rng_get_entropy+0x70>)
    2a4c:	2225      	movs	r2, #37	; 0x25
    2a4e:	f005 f946 	bl	7cde <printk>
    2a52:	2125      	movs	r1, #37	; 0x25
    2a54:	4810      	ldr	r0, [pc, #64]	; (2a98 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2a56:	f005 f9cd 	bl	7df4 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2a5a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2a5e:	2400      	movs	r4, #0
    2a60:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    2a64:	42a6      	cmp	r6, r4
    2a66:	d801      	bhi.n	2a6c <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    2a68:	b003      	add	sp, #12
    2a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2a6c:	1b33      	subs	r3, r6, r4
    2a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2a72:	bf38      	it	cc
    2a74:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    2a76:	2000      	movs	r0, #0
    2a78:	ab01      	add	r3, sp, #4
    2a7a:	462a      	mov	r2, r5
    2a7c:	1939      	adds	r1, r7, r4
    2a7e:	f002 fbe3 	bl	5248 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    2a82:	9b01      	ldr	r3, [sp, #4]
    2a84:	42ab      	cmp	r3, r5
    2a86:	d103      	bne.n	2a90 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    2a88:	2800      	cmp	r0, #0
    2a8a:	d1ed      	bne.n	2a68 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    2a8c:	442c      	add	r4, r5
    2a8e:	e7e9      	b.n	2a64 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    2a90:	f06f 0015 	mvn.w	r0, #21
    2a94:	e7e8      	b.n	2a68 <entropy_cc3xx_rng_get_entropy+0x3c>
    2a96:	bf00      	nop
    2a98:	00009662 	.word	0x00009662
    2a9c:	00008b51 	.word	0x00008b51

00002aa0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    2aa0:	4b0b      	ldr	r3, [pc, #44]	; (2ad0 <elapsed+0x30>)
{
    2aa2:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    2aa4:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    2aa6:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    2aa8:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2aaa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2aae:	4b09      	ldr	r3, [pc, #36]	; (2ad4 <elapsed+0x34>)
    2ab0:	4909      	ldr	r1, [pc, #36]	; (2ad8 <elapsed+0x38>)
    2ab2:	d101      	bne.n	2ab8 <elapsed+0x18>
	    || (val1 < val2)) {
    2ab4:	4282      	cmp	r2, r0
    2ab6:	d205      	bcs.n	2ac4 <elapsed+0x24>
		overflow_cyc += last_load;
    2ab8:	681a      	ldr	r2, [r3, #0]
    2aba:	680c      	ldr	r4, [r1, #0]
    2abc:	4422      	add	r2, r4
    2abe:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    2ac0:	4a03      	ldr	r2, [pc, #12]	; (2ad0 <elapsed+0x30>)
    2ac2:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
    2ac4:	681b      	ldr	r3, [r3, #0]
    2ac6:	680a      	ldr	r2, [r1, #0]
    2ac8:	4413      	add	r3, r2
}
    2aca:	1a18      	subs	r0, r3, r0
    2acc:	bd10      	pop	{r4, pc}
    2ace:	bf00      	nop
    2ad0:	e000e010 	.word	0xe000e010
    2ad4:	200009b8 	.word	0x200009b8
    2ad8:	200009b0 	.word	0x200009b0

00002adc <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2adc:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    2ade:	2000      	movs	r0, #0
    2ae0:	4b07      	ldr	r3, [pc, #28]	; (2b00 <sys_clock_driver_init+0x24>)
    2ae2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    2ae6:	4b07      	ldr	r3, [pc, #28]	; (2b04 <sys_clock_driver_init+0x28>)
    2ae8:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    2aea:	4b07      	ldr	r3, [pc, #28]	; (2b08 <sys_clock_driver_init+0x2c>)
    2aec:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    2aee:	4b07      	ldr	r3, [pc, #28]	; (2b0c <sys_clock_driver_init+0x30>)
    2af0:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2af2:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    2af4:	681a      	ldr	r2, [r3, #0]
    2af6:	f042 0207 	orr.w	r2, r2, #7
    2afa:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop
    2b00:	e000ed00 	.word	0xe000ed00
    2b04:	200009b0 	.word	0x200009b0
    2b08:	200009b8 	.word	0x200009b8
    2b0c:	e000e010 	.word	0xe000e010

00002b10 <sys_clock_isr>:
{
    2b10:	b508      	push	{r3, lr}
	elapsed();
    2b12:	f7ff ffc5 	bl	2aa0 <elapsed>
	cycle_count += overflow_cyc;
    2b16:	4a09      	ldr	r2, [pc, #36]	; (2b3c <sys_clock_isr+0x2c>)
    2b18:	4909      	ldr	r1, [pc, #36]	; (2b40 <sys_clock_isr+0x30>)
    2b1a:	6813      	ldr	r3, [r2, #0]
    2b1c:	6808      	ldr	r0, [r1, #0]
    2b1e:	4403      	add	r3, r0
    2b20:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    2b22:	2100      	movs	r1, #0
    2b24:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2b26:	4a07      	ldr	r2, [pc, #28]	; (2b44 <sys_clock_isr+0x34>)
    2b28:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    2b2a:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    2b2c:	1a18      	subs	r0, r3, r0
    2b2e:	f002 fa01 	bl	4f34 <sys_clock_announce>
}
    2b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    2b36:	f7fe bef9 	b.w	192c <z_arm_exc_exit>
    2b3a:	bf00      	nop
    2b3c:	200009b8 	.word	0x200009b8
    2b40:	200009ac 	.word	0x200009ac
    2b44:	200009a8 	.word	0x200009a8

00002b48 <sys_clock_set_timeout>:
{
    2b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b4c:	4f39      	ldr	r7, [pc, #228]	; (2c34 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    2b4e:	b159      	cbz	r1, 2b68 <sys_clock_set_timeout+0x20>
    2b50:	1c43      	adds	r3, r0, #1
    2b52:	d109      	bne.n	2b68 <sys_clock_set_timeout+0x20>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2b54:	4a38      	ldr	r2, [pc, #224]	; (2c38 <sys_clock_set_timeout+0xf0>)
    2b56:	6813      	ldr	r3, [r2, #0]
    2b58:	f023 0301 	bic.w	r3, r3, #1
    2b5c:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
    2b5e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    2b62:	603b      	str	r3, [r7, #0]
}
    2b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b68:	4b34      	ldr	r3, [pc, #208]	; (2c3c <sys_clock_set_timeout+0xf4>)
	uint32_t last_load_ = last_load;
    2b6a:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b70:	bf08      	it	eq
    2b72:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b74:	1e44      	subs	r4, r0, #1
    2b76:	2c00      	cmp	r4, #0
    2b78:	dd54      	ble.n	2c24 <sys_clock_set_timeout+0xdc>
    2b7a:	429c      	cmp	r4, r3
    2b7c:	bfa8      	it	ge
    2b7e:	461c      	movge	r4, r3
	__asm__ volatile(
    2b80:	f04f 0320 	mov.w	r3, #32
    2b84:	f3ef 8611 	mrs	r6, BASEPRI
    2b88:	f383 8812 	msr	BASEPRI_MAX, r3
    2b8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b90:	482b      	ldr	r0, [pc, #172]	; (2c40 <sys_clock_set_timeout+0xf8>)
    2b92:	f000 fe41 	bl	3818 <z_spin_lock_valid>
    2b96:	b940      	cbnz	r0, 2baa <sys_clock_set_timeout+0x62>
    2b98:	492a      	ldr	r1, [pc, #168]	; (2c44 <sys_clock_set_timeout+0xfc>)
    2b9a:	482b      	ldr	r0, [pc, #172]	; (2c48 <sys_clock_set_timeout+0x100>)
    2b9c:	2281      	movs	r2, #129	; 0x81
    2b9e:	f005 f89e 	bl	7cde <printk>
    2ba2:	2181      	movs	r1, #129	; 0x81
    2ba4:	4827      	ldr	r0, [pc, #156]	; (2c44 <sys_clock_set_timeout+0xfc>)
    2ba6:	f005 f925 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    2baa:	4825      	ldr	r0, [pc, #148]	; (2c40 <sys_clock_set_timeout+0xf8>)
    2bac:	f000 fe50 	bl	3850 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    2bb0:	f7ff ff76 	bl	2aa0 <elapsed>
	overflow_cyc = 0U;
    2bb4:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    2bb8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2c38 <sys_clock_set_timeout+0xf0>
	overflow_cyc = 0U;
    2bbc:	f8df c090 	ldr.w	ip, [pc, #144]	; 2c50 <sys_clock_set_timeout+0x108>
	cycle_count += pending;
    2bc0:	4a22      	ldr	r2, [pc, #136]	; (2c4c <sys_clock_set_timeout+0x104>)
	val1 = SysTick->VAL;
    2bc2:	f8d8 1008 	ldr.w	r1, [r8, #8]
	overflow_cyc = 0U;
    2bc6:	f8cc e000 	str.w	lr, [ip]
	uint32_t unannounced = cycle_count - announced_cycles;
    2bca:	f8df c088 	ldr.w	ip, [pc, #136]	; 2c54 <sys_clock_set_timeout+0x10c>
	cycle_count += pending;
    2bce:	6813      	ldr	r3, [r2, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    2bd0:	f8dc c000 	ldr.w	ip, [ip]
	cycle_count += pending;
    2bd4:	4418      	add	r0, r3
	uint32_t unannounced = cycle_count - announced_cycles;
    2bd6:	eba0 0c0c 	sub.w	ip, r0, ip
	if ((int32_t)unannounced < 0) {
    2bda:	45f4      	cmp	ip, lr
    2bdc:	4643      	mov	r3, r8
	cycle_count += pending;
    2bde:	6010      	str	r0, [r2, #0]
	if ((int32_t)unannounced < 0) {
    2be0:	da22      	bge.n	2c28 <sys_clock_set_timeout+0xe0>
		last_load = MIN_DELAY;
    2be2:	f44f 6480 	mov.w	r4, #1024	; 0x400
			last_load = delay;
    2be6:	603c      	str	r4, [r7, #0]
	SysTick->LOAD = last_load - 1;
    2be8:	683f      	ldr	r7, [r7, #0]
	val2 = SysTick->VAL;
    2bea:	689c      	ldr	r4, [r3, #8]
	SysTick->LOAD = last_load - 1;
    2bec:	3f01      	subs	r7, #1
    2bee:	605f      	str	r7, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2bf0:	2700      	movs	r7, #0
	if (val1 < val2) {
    2bf2:	42a1      	cmp	r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    2bf4:	bf38      	it	cc
    2bf6:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    2bf8:	1b09      	subs	r1, r1, r4
    2bfa:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    2bfc:	609f      	str	r7, [r3, #8]
		cycle_count += (val1 - val2);
    2bfe:	6010      	str	r0, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c00:	480f      	ldr	r0, [pc, #60]	; (2c40 <sys_clock_set_timeout+0xf8>)
    2c02:	f000 fe17 	bl	3834 <z_spin_unlock_valid>
    2c06:	b940      	cbnz	r0, 2c1a <sys_clock_set_timeout+0xd2>
    2c08:	490e      	ldr	r1, [pc, #56]	; (2c44 <sys_clock_set_timeout+0xfc>)
    2c0a:	480f      	ldr	r0, [pc, #60]	; (2c48 <sys_clock_set_timeout+0x100>)
    2c0c:	22ac      	movs	r2, #172	; 0xac
    2c0e:	f005 f866 	bl	7cde <printk>
    2c12:	21ac      	movs	r1, #172	; 0xac
    2c14:	480b      	ldr	r0, [pc, #44]	; (2c44 <sys_clock_set_timeout+0xfc>)
    2c16:	f005 f8ed 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    2c1a:	f386 8811 	msr	BASEPRI, r6
    2c1e:	f3bf 8f6f 	isb	sy
    2c22:	e79f      	b.n	2b64 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c24:	2400      	movs	r4, #0
    2c26:	e7ab      	b.n	2b80 <sys_clock_set_timeout+0x38>
			last_load = delay;
    2c28:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2c2c:	bfb8      	it	lt
    2c2e:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    2c32:	e7d8      	b.n	2be6 <sys_clock_set_timeout+0x9e>
    2c34:	200009b0 	.word	0x200009b0
    2c38:	e000e010 	.word	0xe000e010
    2c3c:	00fffffe 	.word	0x00fffffe
    2c40:	200009b4 	.word	0x200009b4
    2c44:	00008b2b 	.word	0x00008b2b
    2c48:	00008b51 	.word	0x00008b51
    2c4c:	200009ac 	.word	0x200009ac
    2c50:	200009b8 	.word	0x200009b8
    2c54:	200009a8 	.word	0x200009a8

00002c58 <sys_clock_elapsed>:
{
    2c58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2c5a:	f04f 0320 	mov.w	r3, #32
    2c5e:	f3ef 8511 	mrs	r5, BASEPRI
    2c62:	f383 8812 	msr	BASEPRI_MAX, r3
    2c66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2c6a:	4815      	ldr	r0, [pc, #84]	; (2cc0 <sys_clock_elapsed+0x68>)
    2c6c:	f000 fdd4 	bl	3818 <z_spin_lock_valid>
    2c70:	b940      	cbnz	r0, 2c84 <sys_clock_elapsed+0x2c>
    2c72:	4914      	ldr	r1, [pc, #80]	; (2cc4 <sys_clock_elapsed+0x6c>)
    2c74:	4814      	ldr	r0, [pc, #80]	; (2cc8 <sys_clock_elapsed+0x70>)
    2c76:	2281      	movs	r2, #129	; 0x81
    2c78:	f005 f831 	bl	7cde <printk>
    2c7c:	2181      	movs	r1, #129	; 0x81
    2c7e:	4811      	ldr	r0, [pc, #68]	; (2cc4 <sys_clock_elapsed+0x6c>)
    2c80:	f005 f8b8 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    2c84:	480e      	ldr	r0, [pc, #56]	; (2cc0 <sys_clock_elapsed+0x68>)
    2c86:	f000 fde3 	bl	3850 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    2c8a:	f7ff ff09 	bl	2aa0 <elapsed>
    2c8e:	4b0f      	ldr	r3, [pc, #60]	; (2ccc <sys_clock_elapsed+0x74>)
    2c90:	681c      	ldr	r4, [r3, #0]
    2c92:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <sys_clock_elapsed+0x78>)
    2c94:	681b      	ldr	r3, [r3, #0]
    2c96:	1ae4      	subs	r4, r4, r3
    2c98:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c9a:	4809      	ldr	r0, [pc, #36]	; (2cc0 <sys_clock_elapsed+0x68>)
    2c9c:	f000 fdca 	bl	3834 <z_spin_unlock_valid>
    2ca0:	b940      	cbnz	r0, 2cb4 <sys_clock_elapsed+0x5c>
    2ca2:	4908      	ldr	r1, [pc, #32]	; (2cc4 <sys_clock_elapsed+0x6c>)
    2ca4:	4808      	ldr	r0, [pc, #32]	; (2cc8 <sys_clock_elapsed+0x70>)
    2ca6:	22ac      	movs	r2, #172	; 0xac
    2ca8:	f005 f819 	bl	7cde <printk>
    2cac:	21ac      	movs	r1, #172	; 0xac
    2cae:	4805      	ldr	r0, [pc, #20]	; (2cc4 <sys_clock_elapsed+0x6c>)
    2cb0:	f005 f8a0 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    2cb4:	f385 8811 	msr	BASEPRI, r5
    2cb8:	f3bf 8f6f 	isb	sy
}
    2cbc:	4620      	mov	r0, r4
    2cbe:	bd38      	pop	{r3, r4, r5, pc}
    2cc0:	200009b4 	.word	0x200009b4
    2cc4:	00008b2b 	.word	0x00008b2b
    2cc8:	00008b51 	.word	0x00008b51
    2ccc:	200009ac 	.word	0x200009ac
    2cd0:	200009a8 	.word	0x200009a8

00002cd4 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    2cd4:	4b05      	ldr	r3, [pc, #20]	; (2cec <sys_clock_idle_exit+0x18>)
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    2cdc:	bf01      	itttt	eq
    2cde:	4a04      	ldreq	r2, [pc, #16]	; (2cf0 <sys_clock_idle_exit+0x1c>)
    2ce0:	6813      	ldreq	r3, [r2, #0]
    2ce2:	f043 0301 	orreq.w	r3, r3, #1
    2ce6:	6013      	streq	r3, [r2, #0]
}
    2ce8:	4770      	bx	lr
    2cea:	bf00      	nop
    2cec:	200009b0 	.word	0x200009b0
    2cf0:	e000e010 	.word	0xe000e010

00002cf4 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2cf4:	4a02      	ldr	r2, [pc, #8]	; (2d00 <sys_clock_disable+0xc>)
    2cf6:	6813      	ldr	r3, [r2, #0]
    2cf8:	f023 0301 	bic.w	r3, r3, #1
    2cfc:	6013      	str	r3, [r2, #0]
}
    2cfe:	4770      	bx	lr
    2d00:	e000e010 	.word	0xe000e010

00002d04 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2d04:	4803      	ldr	r0, [pc, #12]	; (2d14 <k_sys_fatal_error_handler+0x10>)
    2d06:	2145      	movs	r1, #69	; 0x45
{
    2d08:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    2d0a:	f005 f886 	bl	7e1a <z_log_minimal_printk>
		sys_arch_reboot(0);
    2d0e:	2000      	movs	r0, #0
    2d10:	f7ff f8f4 	bl	1efc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2d14:	0000969d 	.word	0x0000969d

00002d18 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    2d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d1c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    2d1e:	4c21      	ldr	r4, [pc, #132]	; (2da4 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    2d20:	4e21      	ldr	r6, [pc, #132]	; (2da8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d22:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    2d26:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2db0 <check_ext_api_requests+0x98>
{
    2d2a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d2c:	45a8      	cmp	r8, r5
    2d2e:	d803      	bhi.n	2d38 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    2d30:	2000      	movs	r0, #0
    2d32:	b005      	add	sp, #20
    2d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    2d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d3a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2d3e:	681f      	ldr	r7, [r3, #0]
    2d40:	ab01      	add	r3, sp, #4
    2d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    2d46:	220c      	movs	r2, #12
    2d48:	4619      	mov	r1, r3
    2d4a:	4638      	mov	r0, r7
    2d4c:	f005 f901 	bl	7f52 <memcmp>
    2d50:	b990      	cbnz	r0, 2d78 <check_ext_api_requests+0x60>
    2d52:	b18f      	cbz	r7, 2d78 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    2d56:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2d58:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    2d5a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2d5c:	4291      	cmp	r1, r2
    2d5e:	d10b      	bne.n	2d78 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    2d60:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    2d62:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    2d64:	4291      	cmp	r1, r2
    2d66:	d807      	bhi.n	2d78 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    2d68:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    2d6a:	4291      	cmp	r1, r2
    2d6c:	d904      	bls.n	2d78 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    2d6e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2d70:	695b      	ldr	r3, [r3, #20]
    2d72:	ea32 0303 	bics.w	r3, r2, r3
    2d76:	d00a      	beq.n	2d8e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    2d78:	6a27      	ldr	r7, [r4, #32]
    2d7a:	b167      	cbz	r7, 2d96 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    2d7c:	480b      	ldr	r0, [pc, #44]	; (2dac <check_ext_api_requests+0x94>)
    2d7e:	f004 ffae 	bl	7cde <printk>
			k_panic();
    2d82:	4040      	eors	r0, r0
    2d84:	f380 8811 	msr	BASEPRI, r0
    2d88:	f04f 0004 	mov.w	r0, #4
    2d8c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    2d8e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d90:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    2d92:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d94:	e7ca      	b.n	2d2c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    2d96:	4648      	mov	r0, r9
    2d98:	f004 ffa1 	bl	7cde <printk>
			*ext_api_req->ext_api = NULL;
    2d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d9e:	601f      	str	r7, [r3, #0]
    2da0:	e7f5      	b.n	2d8e <check_ext_api_requests+0x76>
    2da2:	bf00      	nop
    2da4:	0000023c 	.word	0x0000023c
    2da8:	0000870c 	.word	0x0000870c
    2dac:	000096bf 	.word	0x000096bf
    2db0:	000096e8 	.word	0x000096e8

00002db4 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2db4:	4a06      	ldr	r2, [pc, #24]	; (2dd0 <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2db6:	4b07      	ldr	r3, [pc, #28]	; (2dd4 <nrf91_errata_14+0x20>)
    2db8:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2dba:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    2dbc:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2dc0:	2b09      	cmp	r3, #9
    2dc2:	d103      	bne.n	2dcc <nrf91_errata_14+0x18>
            {
                switch(var2)
    2dc4:	1e43      	subs	r3, r0, #1
    2dc6:	4258      	negs	r0, r3
    2dc8:	4158      	adcs	r0, r3
    2dca:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2dcc:	2000      	movs	r0, #0
    #endif
}
    2dce:	4770      	bx	lr
    2dd0:	00ff0134 	.word	0x00ff0134
    2dd4:	00ff0130 	.word	0x00ff0130

00002dd8 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2dd8:	4a57      	ldr	r2, [pc, #348]	; (2f38 <SystemInit+0x160>)
{
    2dda:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2ddc:	6813      	ldr	r3, [r2, #0]
    2dde:	f043 0302 	orr.w	r3, r3, #2
    2de2:	6013      	str	r3, [r2, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2de4:	4b55      	ldr	r3, [pc, #340]	; (2f3c <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2de6:	4a56      	ldr	r2, [pc, #344]	; (2f40 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2de8:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2dea:	6812      	ldr	r2, [r2, #0]
    2dec:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    2df0:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2df2:	bf01      	itttt	eq
    2df4:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    2df8:	2200      	moveq	r2, #0
    2dfa:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    2dfe:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2e02:	f7ff ffd7 	bl	2db4 <nrf91_errata_14>
    2e06:	b130      	cbz	r0, 2e16 <SystemInit+0x3e>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    2e08:	2301      	movs	r3, #1
    2e0a:	4a4e      	ldr	r2, [pc, #312]	; (2f44 <SystemInit+0x16c>)
    2e0c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e0e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    2e12:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e16:	4b49      	ldr	r3, [pc, #292]	; (2f3c <SystemInit+0x164>)
    2e18:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e1a:	3304      	adds	r3, #4
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2e22:	2a09      	cmp	r2, #9
    2e24:	d105      	bne.n	2e32 <SystemInit+0x5a>
            {
                switch(var2)
    2e26:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e28:	bf1e      	ittt	ne
    2e2a:	2201      	movne	r2, #1
    2e2c:	4b46      	ldrne	r3, [pc, #280]	; (2f48 <SystemInit+0x170>)
    2e2e:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    2e32:	f7ff ffbf 	bl	2db4 <nrf91_errata_14>
    2e36:	b110      	cbz	r0, 2e3e <SystemInit+0x66>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    2e38:	220e      	movs	r2, #14
    2e3a:	4b44      	ldr	r3, [pc, #272]	; (2f4c <SystemInit+0x174>)
    2e3c:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e3e:	4b3f      	ldr	r3, [pc, #252]	; (2f3c <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e40:	4a3f      	ldr	r2, [pc, #252]	; (2f40 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e42:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e44:	6812      	ldr	r2, [r2, #0]
    2e46:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    2e4a:	2b09      	cmp	r3, #9
    2e4c:	d104      	bne.n	2e58 <SystemInit+0x80>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    2e4e:	2200      	movs	r2, #0
    2e50:	4b3f      	ldr	r3, [pc, #252]	; (2f50 <SystemInit+0x178>)
    2e52:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    2e54:	2201      	movs	r2, #1
    2e56:	605a      	str	r2, [r3, #4]
{
    2e58:	2200      	movs	r2, #0
    2e5a:	00d3      	lsls	r3, r2, #3
    2e5c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    2e60:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2e64:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2e68:	3101      	adds	r1, #1
    2e6a:	d008      	beq.n	2e7e <SystemInit+0xa6>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2e6c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2e70:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2e72:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2e76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2e7a:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2e7c:	d1ed      	bne.n	2e5a <SystemInit+0x82>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2e7e:	4b35      	ldr	r3, [pc, #212]	; (2f54 <SystemInit+0x17c>)
    2e80:	69db      	ldr	r3, [r3, #28]
    2e82:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    2e86:	07d9      	lsls	r1, r3, #31
    2e88:	d545      	bpl.n	2f16 <SystemInit+0x13e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2e8a:	4b33      	ldr	r3, [pc, #204]	; (2f58 <SystemInit+0x180>)
    2e8c:	4619      	mov	r1, r3
    2e8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2e92:	2a01      	cmp	r2, #1
    2e94:	d1fb      	bne.n	2e8e <SystemInit+0xb6>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2e96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2e9a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    2e9e:	2b01      	cmp	r3, #1
    2ea0:	d1fb      	bne.n	2e9a <SystemInit+0xc2>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2ea2:	4b2c      	ldr	r3, [pc, #176]	; (2f54 <SystemInit+0x17c>)
    2ea4:	69da      	ldr	r2, [r3, #28]
    2ea6:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    2eaa:	07d2      	lsls	r2, r2, #31
    2eac:	d50a      	bpl.n	2ec4 <SystemInit+0xec>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    2eae:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2eb0:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    2eb4:	61da      	str	r2, [r3, #28]
    2eb6:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2eba:	4a27      	ldr	r2, [pc, #156]	; (2f58 <SystemInit+0x180>)
    2ebc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	d1fb      	bne.n	2ebc <SystemInit+0xe4>
        uint32_t val = *word;
    2ec4:	4b25      	ldr	r3, [pc, #148]	; (2f5c <SystemInit+0x184>)
    2ec6:	681b      	ldr	r3, [r3, #0]
    2ec8:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2ecc:	3301      	adds	r3, #1
    2ece:	d10d      	bne.n	2eec <SystemInit+0x114>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2ed0:	4a20      	ldr	r2, [pc, #128]	; (2f54 <SystemInit+0x17c>)
    2ed2:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2ed4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2ed8:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    2edc:	6213      	str	r3, [r2, #32]
    2ede:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2ee2:	4a1d      	ldr	r2, [pc, #116]	; (2f58 <SystemInit+0x180>)
    2ee4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2ee8:	2b01      	cmp	r3, #1
    2eea:	d1fb      	bne.n	2ee4 <SystemInit+0x10c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    2eec:	2200      	movs	r2, #0
    2eee:	4b1a      	ldr	r3, [pc, #104]	; (2f58 <SystemInit+0x180>)
    2ef0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2ef4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2ef8:	2a01      	cmp	r2, #1
    2efa:	d1fb      	bne.n	2ef4 <SystemInit+0x11c>
    2efc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f00:	4917      	ldr	r1, [pc, #92]	; (2f60 <SystemInit+0x188>)
    2f02:	4b18      	ldr	r3, [pc, #96]	; (2f64 <SystemInit+0x18c>)
    2f04:	68ca      	ldr	r2, [r1, #12]
    2f06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f0a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f0c:	60cb      	str	r3, [r1, #12]
    2f0e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2f12:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f14:	e7fd      	b.n	2f12 <SystemInit+0x13a>
        uint32_t val = *word;
    2f16:	4b11      	ldr	r3, [pc, #68]	; (2f5c <SystemInit+0x184>)
    2f18:	681b      	ldr	r3, [r3, #0]
    2f1a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2f1e:	3301      	adds	r3, #1
    2f20:	d0b3      	beq.n	2e8a <SystemInit+0xb2>
        SCB->NSACR |= (3UL << 10);
    2f22:	4a0f      	ldr	r2, [pc, #60]	; (2f60 <SystemInit+0x188>)
    2f24:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2f28:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2f2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    2f30:	4b0d      	ldr	r3, [pc, #52]	; (2f68 <SystemInit+0x190>)
    2f32:	4a0e      	ldr	r2, [pc, #56]	; (2f6c <SystemInit+0x194>)
    2f34:	601a      	str	r2, [r3, #0]
}
    2f36:	bd08      	pop	{r3, pc}
    2f38:	e000edd0 	.word	0xe000edd0
    2f3c:	00ff0130 	.word	0x00ff0130
    2f40:	00ff0134 	.word	0x00ff0134
    2f44:	50004a38 	.word	0x50004a38
    2f48:	50004000 	.word	0x50004000
    2f4c:	5003aee4 	.word	0x5003aee4
    2f50:	5000470c 	.word	0x5000470c
    2f54:	00ff8000 	.word	0x00ff8000
    2f58:	50039000 	.word	0x50039000
    2f5c:	00ff8020 	.word	0x00ff8020
    2f60:	e000ed00 	.word	0xe000ed00
    2f64:	05fa0004 	.word	0x05fa0004
    2f68:	20000050 	.word	0x20000050
    2f6c:	03d09000 	.word	0x03d09000

00002f70 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    2f70:	b508      	push	{r3, lr}
    switch (domain)
    2f72:	b170      	cbz	r0, 2f92 <nrf_clock_is_running.constprop.0+0x22>
    2f74:	2801      	cmp	r0, #1
    2f76:	d01b      	beq.n	2fb0 <nrf_clock_is_running.constprop.0+0x40>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
    2f78:	f44f 724f 	mov.w	r2, #828	; 0x33c
    2f7c:	4913      	ldr	r1, [pc, #76]	; (2fcc <nrf_clock_is_running.constprop.0+0x5c>)
    2f7e:	4814      	ldr	r0, [pc, #80]	; (2fd0 <nrf_clock_is_running.constprop.0+0x60>)
    2f80:	f004 fead 	bl	7cde <printk>
    2f84:	4811      	ldr	r0, [pc, #68]	; (2fcc <nrf_clock_is_running.constprop.0+0x5c>)
    2f86:	f44f 714f 	mov.w	r1, #828	; 0x33c
    2f8a:	f004 ff33 	bl	7df4 <assert_post_action>
            return false;
    2f8e:	2000      	movs	r0, #0
    2f90:	e00d      	b.n	2fae <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    2f92:	b131      	cbz	r1, 2fa2 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2f94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f98:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2f9c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2fa0:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2fa2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fa6:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2faa:	f3c0 4000 	ubfx	r0, r0, #16, #1
    }
    return false;
}
    2fae:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    2fb0:	b131      	cbz	r1, 2fc0 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2fb2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2fba:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2fbe:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2fc0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fc4:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    2fc8:	e7ef      	b.n	2faa <nrf_clock_is_running.constprop.0+0x3a>
    2fca:	bf00      	nop
    2fcc:	0000971b 	.word	0x0000971b
    2fd0:	00008b51 	.word	0x00008b51

00002fd4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    2fd4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    2fd6:	4604      	mov	r4, r0
    2fd8:	b940      	cbnz	r0, 2fec <nrfx_clock_init+0x18>
    2fda:	4909      	ldr	r1, [pc, #36]	; (3000 <nrfx_clock_init+0x2c>)
    2fdc:	4809      	ldr	r0, [pc, #36]	; (3004 <nrfx_clock_init+0x30>)
    2fde:	22bd      	movs	r2, #189	; 0xbd
    2fe0:	f004 fe7d 	bl	7cde <printk>
    2fe4:	21bd      	movs	r1, #189	; 0xbd
    2fe6:	4806      	ldr	r0, [pc, #24]	; (3000 <nrfx_clock_init+0x2c>)
    2fe8:	f004 ff04 	bl	7df4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2fec:	4b06      	ldr	r3, [pc, #24]	; (3008 <nrfx_clock_init+0x34>)
    2fee:	791a      	ldrb	r2, [r3, #4]
    2ff0:	b922      	cbnz	r2, 2ffc <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2ff2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    2ff4:	4805      	ldr	r0, [pc, #20]	; (300c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    2ff6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    2ff8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2ffa:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2ffc:	4804      	ldr	r0, [pc, #16]	; (3010 <nrfx_clock_init+0x3c>)
    return err_code;
    2ffe:	e7fc      	b.n	2ffa <nrfx_clock_init+0x26>
    3000:	0000974f 	.word	0x0000974f
    3004:	00008b51 	.word	0x00008b51
    3008:	200009bc 	.word	0x200009bc
    300c:	0bad0000 	.word	0x0bad0000
    3010:	0bad000c 	.word	0x0bad000c

00003014 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3014:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3016:	4b0b      	ldr	r3, [pc, #44]	; (3044 <nrfx_clock_enable+0x30>)
    3018:	791b      	ldrb	r3, [r3, #4]
    301a:	b943      	cbnz	r3, 302e <nrfx_clock_enable+0x1a>
    301c:	490a      	ldr	r1, [pc, #40]	; (3048 <nrfx_clock_enable+0x34>)
    301e:	480b      	ldr	r0, [pc, #44]	; (304c <nrfx_clock_enable+0x38>)
    3020:	22d6      	movs	r2, #214	; 0xd6
    3022:	f004 fe5c 	bl	7cde <printk>
    3026:	21d6      	movs	r1, #214	; 0xd6
    3028:	4807      	ldr	r0, [pc, #28]	; (3048 <nrfx_clock_enable+0x34>)
    302a:	f004 fee3 	bl	7df4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    302e:	2005      	movs	r0, #5
    3030:	f7fe fb82 	bl	1738 <arch_irq_is_enabled>
    3034:	b920      	cbnz	r0, 3040 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    303a:	2005      	movs	r0, #5
    303c:	f7fe bb6c 	b.w	1718 <arch_irq_enable>
    3040:	bd08      	pop	{r3, pc}
    3042:	bf00      	nop
    3044:	200009bc 	.word	0x200009bc
    3048:	0000974f 	.word	0x0000974f
    304c:	00008b51 	.word	0x00008b51

00003050 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3050:	4b22      	ldr	r3, [pc, #136]	; (30dc <nrfx_clock_start+0x8c>)
{
    3052:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3054:	791b      	ldrb	r3, [r3, #4]
{
    3056:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3058:	b953      	cbnz	r3, 3070 <nrfx_clock_start+0x20>
    305a:	4921      	ldr	r1, [pc, #132]	; (30e0 <nrfx_clock_start+0x90>)
    305c:	4821      	ldr	r0, [pc, #132]	; (30e4 <nrfx_clock_start+0x94>)
    305e:	f44f 7289 	mov.w	r2, #274	; 0x112
    3062:	f004 fe3c 	bl	7cde <printk>
    3066:	f44f 7189 	mov.w	r1, #274	; 0x112
    306a:	481d      	ldr	r0, [pc, #116]	; (30e0 <nrfx_clock_start+0x90>)
    306c:	f004 fec2 	bl	7df4 <assert_post_action>
    switch (domain)
    3070:	b16c      	cbz	r4, 308e <nrfx_clock_start+0x3e>
    3072:	2c01      	cmp	r4, #1
    3074:	d028      	beq.n	30c8 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3076:	f44f 72a2 	mov.w	r2, #324	; 0x144
    307a:	4919      	ldr	r1, [pc, #100]	; (30e0 <nrfx_clock_start+0x90>)
    307c:	4819      	ldr	r0, [pc, #100]	; (30e4 <nrfx_clock_start+0x94>)
    307e:	f004 fe2e 	bl	7cde <printk>
    3082:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3086:	4816      	ldr	r0, [pc, #88]	; (30e0 <nrfx_clock_start+0x90>)
    3088:	f004 feb4 	bl	7df4 <assert_post_action>
            break;
    }
}
    308c:	e018      	b.n	30c0 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    308e:	4620      	mov	r0, r4
    3090:	f10d 0107 	add.w	r1, sp, #7
    3094:	f7ff ff6c 	bl	2f70 <nrf_clock_is_running.constprop.0>
    3098:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    309c:	b190      	cbz	r0, 30c4 <nrfx_clock_start+0x74>
    309e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    30a2:	2a02      	cmp	r2, #2
    30a4:	d10e      	bne.n	30c4 <nrfx_clock_start+0x74>

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    30a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30aa:	2200      	movs	r2, #0
    30ac:	4b0e      	ldr	r3, [pc, #56]	; (30e8 <nrfx_clock_start+0x98>)
    30ae:	601a      	str	r2, [r3, #0]
    30b0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30b2:	2202      	movs	r2, #2
    30b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30bc:	2201      	movs	r2, #1
    30be:	609a      	str	r2, [r3, #8]
}
    30c0:	b002      	add	sp, #8
    30c2:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    30c4:	2201      	movs	r2, #1
    30c6:	e7ee      	b.n	30a6 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30c8:	2200      	movs	r2, #0
    30ca:	4b08      	ldr	r3, [pc, #32]	; (30ec <nrfx_clock_start+0x9c>)
    30cc:	601a      	str	r2, [r3, #0]
    30ce:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30d4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30d8:	601c      	str	r4, [r3, #0]
}
    30da:	e7f1      	b.n	30c0 <nrfx_clock_start+0x70>
    30dc:	200009bc 	.word	0x200009bc
    30e0:	0000974f 	.word	0x0000974f
    30e4:	00008b51 	.word	0x00008b51
    30e8:	50005104 	.word	0x50005104
    30ec:	50005100 	.word	0x50005100

000030f0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    30f0:	4b2d      	ldr	r3, [pc, #180]	; (31a8 <nrfx_clock_stop+0xb8>)
{
    30f2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    30f4:	791b      	ldrb	r3, [r3, #4]
{
    30f6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    30f8:	b953      	cbnz	r3, 3110 <nrfx_clock_stop+0x20>
    30fa:	492c      	ldr	r1, [pc, #176]	; (31ac <nrfx_clock_stop+0xbc>)
    30fc:	482c      	ldr	r0, [pc, #176]	; (31b0 <nrfx_clock_stop+0xc0>)
    30fe:	f240 124b 	movw	r2, #331	; 0x14b
    3102:	f004 fdec 	bl	7cde <printk>
    3106:	f240 114b 	movw	r1, #331	; 0x14b
    310a:	4828      	ldr	r0, [pc, #160]	; (31ac <nrfx_clock_stop+0xbc>)
    310c:	f004 fe72 	bl	7df4 <assert_post_action>
    switch (domain)
    3110:	b174      	cbz	r4, 3130 <nrfx_clock_stop+0x40>
    3112:	2c01      	cmp	r4, #1
    3114:	d027      	beq.n	3166 <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3116:	4925      	ldr	r1, [pc, #148]	; (31ac <nrfx_clock_stop+0xbc>)
    3118:	4825      	ldr	r0, [pc, #148]	; (31b0 <nrfx_clock_stop+0xc0>)
    311a:	f240 1267 	movw	r2, #359	; 0x167
    311e:	f004 fdde 	bl	7cde <printk>
    3122:	f240 1167 	movw	r1, #359	; 0x167
    3126:	4821      	ldr	r0, [pc, #132]	; (31ac <nrfx_clock_stop+0xbc>)
    3128:	f004 fe64 	bl	7df4 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    312c:	b002      	add	sp, #8
    312e:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3130:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3134:	2202      	movs	r2, #2
    3136:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    313a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    313c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3140:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3144:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3148:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    314a:	4b1a      	ldr	r3, [pc, #104]	; (31b4 <nrfx_clock_stop+0xc4>)
    314c:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    314e:	2100      	movs	r1, #0
    3150:	4608      	mov	r0, r1
    3152:	f7ff ff0d 	bl	2f70 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3156:	2800      	cmp	r0, #0
    3158:	d0e8      	beq.n	312c <nrfx_clock_stop+0x3c>
    315a:	2001      	movs	r0, #1
    315c:	f005 f8d3 	bl	8306 <nrfx_busy_wait>
    3160:	3c01      	subs	r4, #1
    3162:	d1f4      	bne.n	314e <nrfx_clock_stop+0x5e>
    3164:	e7e2      	b.n	312c <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    3166:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    316a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    316c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3170:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3174:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3178:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    317a:	4b0f      	ldr	r3, [pc, #60]	; (31b8 <nrfx_clock_stop+0xc8>)
    317c:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    317e:	f88d 4007 	strb.w	r4, [sp, #7]
    3182:	f242 7410 	movw	r4, #10000	; 0x2710
    3186:	2001      	movs	r0, #1
    3188:	f10d 0107 	add.w	r1, sp, #7
    318c:	f7ff fef0 	bl	2f70 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3190:	2800      	cmp	r0, #0
    3192:	d0cb      	beq.n	312c <nrfx_clock_stop+0x3c>
    3194:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3198:	2801      	cmp	r0, #1
    319a:	d1c7      	bne.n	312c <nrfx_clock_stop+0x3c>
    319c:	f005 f8b3 	bl	8306 <nrfx_busy_wait>
    31a0:	3c01      	subs	r4, #1
    31a2:	d1f0      	bne.n	3186 <nrfx_clock_stop+0x96>
    31a4:	e7c2      	b.n	312c <nrfx_clock_stop+0x3c>
    31a6:	bf00      	nop
    31a8:	200009bc 	.word	0x200009bc
    31ac:	0000974f 	.word	0x0000974f
    31b0:	00008b51 	.word	0x00008b51
    31b4:	5000500c 	.word	0x5000500c
    31b8:	50005004 	.word	0x50005004

000031bc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31bc:	4b16      	ldr	r3, [pc, #88]	; (3218 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    31be:	b507      	push	{r0, r1, r2, lr}
    31c0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    31c2:	b152      	cbz	r2, 31da <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31c4:	2000      	movs	r0, #0
    31c6:	6018      	str	r0, [r3, #0]
    31c8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    31ca:	2201      	movs	r2, #1
    31cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    31d4:	4b11      	ldr	r3, [pc, #68]	; (321c <nrfx_power_clock_irq_handler+0x60>)
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31da:	4b11      	ldr	r3, [pc, #68]	; (3220 <nrfx_power_clock_irq_handler+0x64>)
    31dc:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    31de:	b18a      	cbz	r2, 3204 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31e0:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    31e2:	f10d 0107 	add.w	r1, sp, #7
    31e6:	6018      	str	r0, [r3, #0]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	f7ff fec1 	bl	2f70 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    31ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
    31f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31f6:	2901      	cmp	r1, #1
    31f8:	f04f 0202 	mov.w	r2, #2
    31fc:	d105      	bne.n	320a <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    31fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3202:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3204:	b003      	add	sp, #12
    3206:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    320a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    320e:	4b03      	ldr	r3, [pc, #12]	; (321c <nrfx_power_clock_irq_handler+0x60>)
    3210:	2001      	movs	r0, #1
    3212:	681b      	ldr	r3, [r3, #0]
    3214:	4798      	blx	r3
}
    3216:	e7f5      	b.n	3204 <nrfx_power_clock_irq_handler+0x48>
    3218:	50005100 	.word	0x50005100
    321c:	200009bc 	.word	0x200009bc
    3220:	50005104 	.word	0x50005104

00003224 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3224:	4b0e      	ldr	r3, [pc, #56]	; (3260 <z_sys_init_run_level+0x3c>)
{
    3226:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3228:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    322c:	3001      	adds	r0, #1
    322e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3232:	42a6      	cmp	r6, r4
    3234:	d800      	bhi.n	3238 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3236:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3238:	e9d4 3500 	ldrd	r3, r5, [r4]
    323c:	4628      	mov	r0, r5
    323e:	4798      	blx	r3
		if (dev != NULL) {
    3240:	b165      	cbz	r5, 325c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3242:	68eb      	ldr	r3, [r5, #12]
    3244:	b130      	cbz	r0, 3254 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3246:	2800      	cmp	r0, #0
    3248:	bfb8      	it	lt
    324a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    324c:	28ff      	cmp	r0, #255	; 0xff
    324e:	bfa8      	it	ge
    3250:	20ff      	movge	r0, #255	; 0xff
    3252:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3254:	785a      	ldrb	r2, [r3, #1]
    3256:	f042 0201 	orr.w	r2, r2, #1
    325a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    325c:	3408      	adds	r4, #8
    325e:	e7e8      	b.n	3232 <z_sys_init_run_level+0xe>
    3260:	00008944 	.word	0x00008944

00003264 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3266:	4604      	mov	r4, r0
    3268:	460e      	mov	r6, r1
	__asm__ volatile(
    326a:	f04f 0320 	mov.w	r3, #32
    326e:	f3ef 8711 	mrs	r7, BASEPRI
    3272:	f383 8812 	msr	BASEPRI_MAX, r3
    3276:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    327a:	f001 fbed 	bl	4a58 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    327e:	2200      	movs	r2, #0
    3280:	2c04      	cmp	r4, #4
    3282:	bf98      	it	ls
    3284:	4b1d      	ldrls	r3, [pc, #116]	; (32fc <z_fatal_error+0x98>)
    3286:	4605      	mov	r5, r0
	switch (reason) {
    3288:	bf94      	ite	ls
    328a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    328e:	4b1c      	ldrhi	r3, [pc, #112]	; (3300 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3290:	9200      	str	r2, [sp, #0]
    3292:	2145      	movs	r1, #69	; 0x45
    3294:	4622      	mov	r2, r4
    3296:	481b      	ldr	r0, [pc, #108]	; (3304 <z_fatal_error+0xa0>)
    3298:	f004 fdbf 	bl	7e1a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    329c:	b13e      	cbz	r6, 32ae <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    329e:	69f3      	ldr	r3, [r6, #28]
    32a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    32a4:	b11b      	cbz	r3, 32ae <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    32a6:	2145      	movs	r1, #69	; 0x45
    32a8:	4817      	ldr	r0, [pc, #92]	; (3308 <z_fatal_error+0xa4>)
    32aa:	f004 fdb6 	bl	7e1a <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    32ae:	b135      	cbz	r5, 32be <z_fatal_error+0x5a>
    32b0:	4628      	mov	r0, r5
    32b2:	f005 f857 	bl	8364 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    32b6:	4603      	mov	r3, r0
    32b8:	b108      	cbz	r0, 32be <z_fatal_error+0x5a>
    32ba:	7802      	ldrb	r2, [r0, #0]
    32bc:	b902      	cbnz	r2, 32c0 <z_fatal_error+0x5c>
		thread_name = "unknown";
    32be:	4b13      	ldr	r3, [pc, #76]	; (330c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    32c0:	462a      	mov	r2, r5
    32c2:	2145      	movs	r1, #69	; 0x45
    32c4:	4812      	ldr	r0, [pc, #72]	; (3310 <z_fatal_error+0xac>)
    32c6:	f004 fda8 	bl	7e1a <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    32ca:	4631      	mov	r1, r6
    32cc:	4620      	mov	r0, r4
    32ce:	f7ff fd19 	bl	2d04 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    32d2:	2c04      	cmp	r4, #4
    32d4:	d108      	bne.n	32e8 <z_fatal_error+0x84>
    32d6:	490f      	ldr	r1, [pc, #60]	; (3314 <z_fatal_error+0xb0>)
    32d8:	480f      	ldr	r0, [pc, #60]	; (3318 <z_fatal_error+0xb4>)
    32da:	228f      	movs	r2, #143	; 0x8f
    32dc:	f004 fcff 	bl	7cde <printk>
    32e0:	218f      	movs	r1, #143	; 0x8f
    32e2:	480c      	ldr	r0, [pc, #48]	; (3314 <z_fatal_error+0xb0>)
    32e4:	f004 fd86 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    32e8:	f387 8811 	msr	BASEPRI, r7
    32ec:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    32f0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    32f2:	b003      	add	sp, #12
    32f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    32f8:	f7fe be48 	b.w	1f8c <z_impl_k_thread_abort>
    32fc:	0000895c 	.word	0x0000895c
    3300:	0000978c 	.word	0x0000978c
    3304:	000097a2 	.word	0x000097a2
    3308:	000097cf 	.word	0x000097cf
    330c:	0000979a 	.word	0x0000979a
    3310:	000097f5 	.word	0x000097f5
    3314:	00009812 	.word	0x00009812
    3318:	00008b51 	.word	0x00008b51

0000331c <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    331c:	2300      	movs	r3, #0
    331e:	2201      	movs	r2, #1
{
    3320:	b510      	push	{r4, lr}
    3322:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3324:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3328:	220f      	movs	r2, #15
    332a:	9301      	str	r3, [sp, #4]
    332c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3330:	2318      	movs	r3, #24
    3332:	4a0b      	ldr	r2, [pc, #44]	; (3360 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    3334:	4c0b      	ldr	r4, [pc, #44]	; (3364 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3336:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    333a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    333e:	490a      	ldr	r1, [pc, #40]	; (3368 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
    3340:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
    3344:	fb02 1100 	mla	r1, r2, r0, r1
    3348:	9300      	str	r3, [sp, #0]
    334a:	4620      	mov	r0, r4
    334c:	4b07      	ldr	r3, [pc, #28]	; (336c <init_idle_thread+0x50>)
    334e:	f000 f98f 	bl	3670 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3352:	7b63      	ldrb	r3, [r4, #13]
    3354:	f023 0304 	bic.w	r3, r3, #4
    3358:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    335a:	b006      	add	sp, #24
    335c:	bd10      	pop	{r4, pc}
    335e:	bf00      	nop
    3360:	200009c4 	.word	0x200009c4
    3364:	20000130 	.word	0x20000130
    3368:	200025a8 	.word	0x200025a8
    336c:	00003861 	.word	0x00003861

00003370 <bg_thread_main>:
	z_sys_post_kernel = true;
    3370:	2201      	movs	r2, #1
{
    3372:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3374:	4b09      	ldr	r3, [pc, #36]	; (339c <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3376:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3378:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    337a:	f7ff ff53 	bl	3224 <z_sys_init_run_level>
	boot_banner();
    337e:	f001 fecb 	bl	5118 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3382:	2003      	movs	r0, #3
    3384:	f7ff ff4e 	bl	3224 <z_sys_init_run_level>
	z_init_static_threads();
    3388:	f000 f9c6 	bl	3718 <z_init_static_threads>
	main();
    338c:	f004 fc9e 	bl	7ccc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3390:	4a03      	ldr	r2, [pc, #12]	; (33a0 <bg_thread_main+0x30>)
    3392:	7b13      	ldrb	r3, [r2, #12]
    3394:	f023 0301 	bic.w	r3, r3, #1
    3398:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    339a:	bd08      	pop	{r3, pc}
    339c:	200013e5 	.word	0x200013e5
    33a0:	200001b0 	.word	0x200001b0

000033a4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    33a4:	4802      	ldr	r0, [pc, #8]	; (33b0 <z_bss_zero+0xc>)
    33a6:	4a03      	ldr	r2, [pc, #12]	; (33b4 <z_bss_zero+0x10>)
    33a8:	2100      	movs	r1, #0
    33aa:	1a12      	subs	r2, r2, r0
    33ac:	f004 be03 	b.w	7fb6 <memset>
    33b0:	20000130 	.word	0x20000130
    33b4:	200015a4 	.word	0x200015a4

000033b8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    33b8:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    33ba:	4b35      	ldr	r3, [pc, #212]	; (3490 <z_cstart+0xd8>)
    33bc:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    33be:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    33c2:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    33c6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33ca:	2400      	movs	r4, #0
    33cc:	23e0      	movs	r3, #224	; 0xe0
    33ce:	4d31      	ldr	r5, [pc, #196]	; (3494 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    33d0:	4e31      	ldr	r6, [pc, #196]	; (3498 <z_cstart+0xe0>)
    33d2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    33d6:	77ec      	strb	r4, [r5, #31]
    33d8:	762c      	strb	r4, [r5, #24]
    33da:	766c      	strb	r4, [r5, #25]
    33dc:	76ac      	strb	r4, [r5, #26]
    33de:	f885 4020 	strb.w	r4, [r5, #32]
    33e2:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    33e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    33e6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 34ac <z_cstart+0xf4>
    33ea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    33ee:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    33f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    33f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    33f6:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    33f8:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    33fa:	68eb      	ldr	r3, [r5, #12]
    33fc:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    33fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    3402:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    3406:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3408:	f7fe fd26 	bl	1e58 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    340c:	f7fe f942 	bl	1694 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3410:	f04f 33ff 	mov.w	r3, #4294967295
    3414:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3416:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3418:	f7fe ffe8 	bl	23ec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    341c:	f7fe fe40 	bl	20a0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3420:	f240 1301 	movw	r3, #257	; 0x101
    3424:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3428:	ab06      	add	r3, sp, #24
    342a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    342c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3430:	f004 ff6b 	bl	830a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3434:	4620      	mov	r0, r4
    3436:	f7ff fef5 	bl	3224 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    343a:	2001      	movs	r0, #1
    343c:	f7ff fef2 	bl	3224 <z_sys_init_run_level>
	z_sched_init();
    3440:	f001 f9ba 	bl	47b8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3444:	4b15      	ldr	r3, [pc, #84]	; (349c <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    3446:	4d16      	ldr	r5, [pc, #88]	; (34a0 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3448:	9305      	str	r3, [sp, #20]
    344a:	2301      	movs	r3, #1
    344c:	4915      	ldr	r1, [pc, #84]	; (34a4 <z_cstart+0xec>)
    344e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3452:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3456:	4628      	mov	r0, r5
    3458:	464b      	mov	r3, r9
    345a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    345e:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    3460:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3462:	f000 f905 	bl	3670 <z_setup_new_thread>
    3466:	4680      	mov	r8, r0
    3468:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    346a:	4628      	mov	r0, r5
    346c:	f022 0204 	bic.w	r2, r2, #4
    3470:	736a      	strb	r2, [r5, #13]
    3472:	f000 fe99 	bl	41a8 <z_ready_thread>
		init_idle_thread(i);
    3476:	4620      	mov	r0, r4
    3478:	f7ff ff50 	bl	331c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    347c:	4b0a      	ldr	r3, [pc, #40]	; (34a8 <z_cstart+0xf0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    347e:	464a      	mov	r2, r9
    3480:	4641      	mov	r1, r8
    3482:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3484:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    3486:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3488:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    348a:	f7fe fa1b 	bl	18c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    348e:	bf00      	nop
    3490:	200026e8 	.word	0x200026e8
    3494:	e000ed00 	.word	0xe000ed00
    3498:	200009c4 	.word	0x200009c4
    349c:	0000987e 	.word	0x0000987e
    34a0:	200001b0 	.word	0x200001b0
    34a4:	200015a8 	.word	0x200015a8
    34a8:	20000130 	.word	0x20000130
    34ac:	00003371 	.word	0x00003371

000034b0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    34b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    34b4:	4d14      	ldr	r5, [pc, #80]	; (3508 <init_mem_slab_module+0x58>)
    34b6:	4c15      	ldr	r4, [pc, #84]	; (350c <init_mem_slab_module+0x5c>)
    34b8:	46a8      	mov	r8, r5
    34ba:	4e15      	ldr	r6, [pc, #84]	; (3510 <init_mem_slab_module+0x60>)
    34bc:	42ac      	cmp	r4, r5
    34be:	d908      	bls.n	34d2 <init_mem_slab_module+0x22>
    34c0:	4631      	mov	r1, r6
    34c2:	4814      	ldr	r0, [pc, #80]	; (3514 <init_mem_slab_module+0x64>)
    34c4:	223c      	movs	r2, #60	; 0x3c
    34c6:	f004 fc0a 	bl	7cde <printk>
    34ca:	213c      	movs	r1, #60	; 0x3c
    34cc:	4630      	mov	r0, r6
    34ce:	f004 fc91 	bl	7df4 <assert_post_action>
    34d2:	4544      	cmp	r4, r8
    34d4:	d302      	bcc.n	34dc <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    34d6:	2000      	movs	r0, #0
	return rc;
}
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    34dc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    34e0:	ea42 0301 	orr.w	r3, r2, r1
    34e4:	f013 0303 	ands.w	r3, r3, #3
    34e8:	d10b      	bne.n	3502 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    34ea:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    34ec:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    34ee:	4283      	cmp	r3, r0
    34f0:	d101      	bne.n	34f6 <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    34f2:	3420      	adds	r4, #32
    34f4:	e7e2      	b.n	34bc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    34f6:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    34f8:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    34fa:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    34fc:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    34fe:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    3500:	e7f5      	b.n	34ee <init_mem_slab_module+0x3e>
		return -EINVAL;
    3502:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3506:	e7e7      	b.n	34d8 <init_mem_slab_module+0x28>
    3508:	200000dc 	.word	0x200000dc
    350c:	200000dc 	.word	0x200000dc
    3510:	00009886 	.word	0x00009886
    3514:	00008b51 	.word	0x00008b51

00003518 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    351c:	4604      	mov	r4, r0
    351e:	460d      	mov	r5, r1
    3520:	4690      	mov	r8, r2
    3522:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3524:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3528:	f04f 0320 	mov.w	r3, #32
    352c:	f3ef 8711 	mrs	r7, BASEPRI
    3530:	f383 8812 	msr	BASEPRI_MAX, r3
    3534:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3538:	4630      	mov	r0, r6
    353a:	f000 f96d 	bl	3818 <z_spin_lock_valid>
    353e:	b940      	cbnz	r0, 3552 <k_mem_slab_alloc+0x3a>
    3540:	491f      	ldr	r1, [pc, #124]	; (35c0 <k_mem_slab_alloc+0xa8>)
    3542:	4820      	ldr	r0, [pc, #128]	; (35c4 <k_mem_slab_alloc+0xac>)
    3544:	2281      	movs	r2, #129	; 0x81
    3546:	f004 fbca 	bl	7cde <printk>
    354a:	2181      	movs	r1, #129	; 0x81
    354c:	481c      	ldr	r0, [pc, #112]	; (35c0 <k_mem_slab_alloc+0xa8>)
    354e:	f004 fc51 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3552:	4630      	mov	r0, r6
    3554:	f000 f97c 	bl	3850 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3558:	69a3      	ldr	r3, [r4, #24]
    355a:	b1c3      	cbz	r3, 358e <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    355c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    3562:	69e3      	ldr	r3, [r4, #28]
    3564:	3301      	adds	r3, #1
    3566:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3568:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    356a:	4630      	mov	r0, r6
    356c:	f000 f962 	bl	3834 <z_spin_unlock_valid>
    3570:	b940      	cbnz	r0, 3584 <k_mem_slab_alloc+0x6c>
    3572:	4913      	ldr	r1, [pc, #76]	; (35c0 <k_mem_slab_alloc+0xa8>)
    3574:	4813      	ldr	r0, [pc, #76]	; (35c4 <k_mem_slab_alloc+0xac>)
    3576:	22ac      	movs	r2, #172	; 0xac
    3578:	f004 fbb1 	bl	7cde <printk>
    357c:	21ac      	movs	r1, #172	; 0xac
    357e:	4810      	ldr	r0, [pc, #64]	; (35c0 <k_mem_slab_alloc+0xa8>)
    3580:	f004 fc38 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3584:	f387 8811 	msr	BASEPRI, r7
    3588:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    358c:	e013      	b.n	35b6 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    358e:	ea58 0209 	orrs.w	r2, r8, r9
    3592:	d103      	bne.n	359c <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    3594:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3598:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    359a:	e7e6      	b.n	356a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    359c:	4622      	mov	r2, r4
    359e:	4639      	mov	r1, r7
    35a0:	4630      	mov	r0, r6
    35a2:	e9cd 8900 	strd	r8, r9, [sp]
    35a6:	f000 ff67 	bl	4478 <z_pend_curr>
		if (result == 0) {
    35aa:	4604      	mov	r4, r0
    35ac:	b918      	cbnz	r0, 35b6 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    35ae:	4b06      	ldr	r3, [pc, #24]	; (35c8 <k_mem_slab_alloc+0xb0>)
    35b0:	689b      	ldr	r3, [r3, #8]
    35b2:	695b      	ldr	r3, [r3, #20]
    35b4:	602b      	str	r3, [r5, #0]
}
    35b6:	4620      	mov	r0, r4
    35b8:	b003      	add	sp, #12
    35ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    35be:	bf00      	nop
    35c0:	00008b2b 	.word	0x00008b2b
    35c4:	00008b51 	.word	0x00008b51
    35c8:	200009c4 	.word	0x200009c4

000035cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    35cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35d0:	4604      	mov	r4, r0
    35d2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    35d4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    35d8:	f04f 0320 	mov.w	r3, #32
    35dc:	f3ef 8711 	mrs	r7, BASEPRI
    35e0:	f383 8812 	msr	BASEPRI_MAX, r3
    35e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    35e8:	4630      	mov	r0, r6
    35ea:	f000 f915 	bl	3818 <z_spin_lock_valid>
    35ee:	b940      	cbnz	r0, 3602 <k_mem_slab_free+0x36>
    35f0:	491d      	ldr	r1, [pc, #116]	; (3668 <k_mem_slab_free+0x9c>)
    35f2:	481e      	ldr	r0, [pc, #120]	; (366c <k_mem_slab_free+0xa0>)
    35f4:	2281      	movs	r2, #129	; 0x81
    35f6:	f004 fb72 	bl	7cde <printk>
    35fa:	2181      	movs	r1, #129	; 0x81
    35fc:	481a      	ldr	r0, [pc, #104]	; (3668 <k_mem_slab_free+0x9c>)
    35fe:	f004 fbf9 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3602:	4630      	mov	r0, r6
    3604:	f000 f924 	bl	3850 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    3608:	f8d4 8018 	ldr.w	r8, [r4, #24]
    360c:	f1b8 0f00 	cmp.w	r8, #0
    3610:	d10f      	bne.n	3632 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3612:	4620      	mov	r0, r4
    3614:	f001 f892 	bl	473c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3618:	b158      	cbz	r0, 3632 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    361a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    361c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3620:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    3622:	f000 fdc1 	bl	41a8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    3626:	4639      	mov	r1, r7
    3628:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    362a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    362e:	f000 bbbd 	b.w	3dac <z_reschedule>
	**(char ***) mem = slab->free_list;
    3632:	682b      	ldr	r3, [r5, #0]
    3634:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3636:	4630      	mov	r0, r6
    3638:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    363a:	682b      	ldr	r3, [r5, #0]
    363c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    363e:	69e3      	ldr	r3, [r4, #28]
    3640:	3b01      	subs	r3, #1
    3642:	61e3      	str	r3, [r4, #28]
    3644:	f000 f8f6 	bl	3834 <z_spin_unlock_valid>
    3648:	b940      	cbnz	r0, 365c <k_mem_slab_free+0x90>
    364a:	4907      	ldr	r1, [pc, #28]	; (3668 <k_mem_slab_free+0x9c>)
    364c:	4807      	ldr	r0, [pc, #28]	; (366c <k_mem_slab_free+0xa0>)
    364e:	22ac      	movs	r2, #172	; 0xac
    3650:	f004 fb45 	bl	7cde <printk>
    3654:	21ac      	movs	r1, #172	; 0xac
    3656:	4804      	ldr	r0, [pc, #16]	; (3668 <k_mem_slab_free+0x9c>)
    3658:	f004 fbcc 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    365c:	f387 8811 	msr	BASEPRI, r7
    3660:	f3bf 8f6f 	isb	sy
}
    3664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3668:	00008b2b 	.word	0x00008b2b
    366c:	00008b51 	.word	0x00008b51

00003670 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3674:	b085      	sub	sp, #20
    3676:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    367a:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    367c:	f1b9 0f0f 	cmp.w	r9, #15
{
    3680:	460f      	mov	r7, r1
    3682:	4615      	mov	r5, r2
    3684:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    3686:	d12e      	bne.n	36e6 <z_setup_new_thread+0x76>
    3688:	4b1f      	ldr	r3, [pc, #124]	; (3708 <z_setup_new_thread+0x98>)
    368a:	4598      	cmp	r8, r3
    368c:	d12f      	bne.n	36ee <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    368e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3692:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3696:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    3698:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    369a:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    369c:	2304      	movs	r3, #4
    369e:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    36a2:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36a4:	9302      	str	r3, [sp, #8]
    36a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    36a8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36ac:	9301      	str	r3, [sp, #4]
    36ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    36b0:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    36b2:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36b6:	9300      	str	r3, [sp, #0]
    36b8:	462a      	mov	r2, r5
    36ba:	4643      	mov	r3, r8
    36bc:	4639      	mov	r1, r7
    36be:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    36c0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    36c4:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    36c6:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    36ca:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    36cc:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36ce:	f7fe f8dd 	bl	188c <arch_new_thread>
	if (!_current) {
    36d2:	4b0e      	ldr	r3, [pc, #56]	; (370c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    36d4:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    36d6:	689b      	ldr	r3, [r3, #8]
    36d8:	b103      	cbz	r3, 36dc <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    36da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    36dc:	4628      	mov	r0, r5
    36de:	6723      	str	r3, [r4, #112]	; 0x70
    36e0:	b005      	add	sp, #20
    36e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    36e6:	f109 0310 	add.w	r3, r9, #16
    36ea:	2b1e      	cmp	r3, #30
    36ec:	d9cf      	bls.n	368e <z_setup_new_thread+0x1e>
    36ee:	f240 12ff 	movw	r2, #511	; 0x1ff
    36f2:	4907      	ldr	r1, [pc, #28]	; (3710 <z_setup_new_thread+0xa0>)
    36f4:	4807      	ldr	r0, [pc, #28]	; (3714 <z_setup_new_thread+0xa4>)
    36f6:	f004 faf2 	bl	7cde <printk>
    36fa:	f240 11ff 	movw	r1, #511	; 0x1ff
    36fe:	4804      	ldr	r0, [pc, #16]	; (3710 <z_setup_new_thread+0xa0>)
    3700:	f004 fb78 	bl	7df4 <assert_post_action>
    3704:	e7c3      	b.n	368e <z_setup_new_thread+0x1e>
    3706:	bf00      	nop
    3708:	00003861 	.word	0x00003861
    370c:	200009c4 	.word	0x200009c4
    3710:	000098ab 	.word	0x000098ab
    3714:	00008b51 	.word	0x00008b51

00003718 <z_init_static_threads>:
{
    3718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    371c:	4f39      	ldr	r7, [pc, #228]	; (3804 <z_init_static_threads+0xec>)
    371e:	4d3a      	ldr	r5, [pc, #232]	; (3808 <z_init_static_threads+0xf0>)
    3720:	463e      	mov	r6, r7
    3722:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3810 <z_init_static_threads+0xf8>
{
    3726:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3728:	42bd      	cmp	r5, r7
    372a:	d90a      	bls.n	3742 <z_init_static_threads+0x2a>
    372c:	4641      	mov	r1, r8
    372e:	4837      	ldr	r0, [pc, #220]	; (380c <z_init_static_threads+0xf4>)
    3730:	f240 22cf 	movw	r2, #719	; 0x2cf
    3734:	f004 fad3 	bl	7cde <printk>
    3738:	f240 21cf 	movw	r1, #719	; 0x2cf
    373c:	4640      	mov	r0, r8
    373e:	f004 fb59 	bl	7df4 <assert_post_action>
    3742:	42b5      	cmp	r5, r6
    3744:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3748:	d31d      	bcc.n	3786 <z_init_static_threads+0x6e>
	k_sched_lock();
    374a:	f000 fb65 	bl	3e18 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    374e:	f240 38e7 	movw	r8, #999	; 0x3e7
    3752:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    3756:	4c2c      	ldr	r4, [pc, #176]	; (3808 <z_init_static_threads+0xf0>)
    3758:	4d2d      	ldr	r5, [pc, #180]	; (3810 <z_init_static_threads+0xf8>)
    375a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 380c <z_init_static_threads+0xf4>
    375e:	42b4      	cmp	r4, r6
    3760:	d90a      	bls.n	3778 <z_init_static_threads+0x60>
    3762:	4629      	mov	r1, r5
    3764:	4650      	mov	r0, sl
    3766:	f240 22ee 	movw	r2, #750	; 0x2ee
    376a:	f004 fab8 	bl	7cde <printk>
    376e:	f240 21ee 	movw	r1, #750	; 0x2ee
    3772:	4628      	mov	r0, r5
    3774:	f004 fb3e 	bl	7df4 <assert_post_action>
    3778:	42b4      	cmp	r4, r6
    377a:	d321      	bcc.n	37c0 <z_init_static_threads+0xa8>
}
    377c:	b006      	add	sp, #24
    377e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3782:	f000 bf7f 	b.w	4684 <k_sched_unlock>
		z_setup_new_thread(
    3786:	f854 3c04 	ldr.w	r3, [r4, #-4]
    378a:	9305      	str	r3, [sp, #20]
    378c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3790:	9304      	str	r3, [sp, #16]
    3792:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3796:	9303      	str	r3, [sp, #12]
    3798:	f854 3c18 	ldr.w	r3, [r4, #-24]
    379c:	9302      	str	r3, [sp, #8]
    379e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    37a2:	9301      	str	r3, [sp, #4]
    37a4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    37a8:	9300      	str	r3, [sp, #0]
    37aa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    37ae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    37b2:	f7ff ff5d 	bl	3670 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    37b6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    37ba:	655d      	str	r5, [r3, #84]	; 0x54
    37bc:	4625      	mov	r5, r4
    37be:	e7b3      	b.n	3728 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    37c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37c2:	1c5a      	adds	r2, r3, #1
    37c4:	d00f      	beq.n	37e6 <z_init_static_threads+0xce>
    37c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    37ca:	4640      	mov	r0, r8
    37cc:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    37ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    37d2:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    37d6:	4549      	cmp	r1, r9
    37d8:	bf08      	it	eq
    37da:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    37dc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    37de:	d104      	bne.n	37ea <z_init_static_threads+0xd2>
	z_sched_start(thread);
    37e0:	4638      	mov	r0, r7
    37e2:	f000 fd17 	bl	4214 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    37e6:	3430      	adds	r4, #48	; 0x30
    37e8:	e7b9      	b.n	375e <z_init_static_threads+0x46>
    37ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    37ee:	2300      	movs	r3, #0
    37f0:	f7fc fd24 	bl	23c <__aeabi_uldivmod>
    37f4:	4602      	mov	r2, r0
    37f6:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    37f8:	f107 0018 	add.w	r0, r7, #24
    37fc:	4905      	ldr	r1, [pc, #20]	; (3814 <z_init_static_threads+0xfc>)
    37fe:	f001 fa2f 	bl	4c60 <z_add_timeout>
    3802:	e7f0      	b.n	37e6 <z_init_static_threads+0xce>
    3804:	200000dc 	.word	0x200000dc
    3808:	200000dc 	.word	0x200000dc
    380c:	00008b51 	.word	0x00008b51
    3810:	000098ab 	.word	0x000098ab
    3814:	00004299 	.word	0x00004299

00003818 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    3818:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    381a:	b138      	cbz	r0, 382c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    381c:	4b04      	ldr	r3, [pc, #16]	; (3830 <z_spin_lock_valid+0x18>)
    381e:	f000 0003 	and.w	r0, r0, #3
    3822:	7d1b      	ldrb	r3, [r3, #20]
    3824:	1ac0      	subs	r0, r0, r3
    3826:	bf18      	it	ne
    3828:	2001      	movne	r0, #1
    382a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    382c:	2001      	movs	r0, #1
}
    382e:	4770      	bx	lr
    3830:	200009c4 	.word	0x200009c4

00003834 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3834:	4905      	ldr	r1, [pc, #20]	; (384c <z_spin_unlock_valid+0x18>)
{
    3836:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3838:	688a      	ldr	r2, [r1, #8]
    383a:	7d08      	ldrb	r0, [r1, #20]
    383c:	6819      	ldr	r1, [r3, #0]
    383e:	4302      	orrs	r2, r0
    3840:	2000      	movs	r0, #0
    3842:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    3844:	bf04      	itt	eq
    3846:	6018      	streq	r0, [r3, #0]
	return true;
    3848:	2001      	moveq	r0, #1
}
    384a:	4770      	bx	lr
    384c:	200009c4 	.word	0x200009c4

00003850 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3850:	4a02      	ldr	r2, [pc, #8]	; (385c <z_spin_lock_set_owner+0xc>)
    3852:	7d11      	ldrb	r1, [r2, #20]
    3854:	6893      	ldr	r3, [r2, #8]
    3856:	430b      	orrs	r3, r1
    3858:	6003      	str	r3, [r0, #0]
}
    385a:	4770      	bx	lr
    385c:	200009c4 	.word	0x200009c4

00003860 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3860:	4c10      	ldr	r4, [pc, #64]	; (38a4 <idle+0x44>)
{
    3862:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3864:	68a2      	ldr	r2, [r4, #8]
    3866:	f992 200e 	ldrsb.w	r2, [r2, #14]
    386a:	2a00      	cmp	r2, #0
    386c:	da08      	bge.n	3880 <idle+0x20>
    386e:	490e      	ldr	r1, [pc, #56]	; (38a8 <idle+0x48>)
    3870:	480e      	ldr	r0, [pc, #56]	; (38ac <idle+0x4c>)
    3872:	2227      	movs	r2, #39	; 0x27
    3874:	f004 fa33 	bl	7cde <printk>
    3878:	2127      	movs	r1, #39	; 0x27
    387a:	480b      	ldr	r0, [pc, #44]	; (38a8 <idle+0x48>)
    387c:	f004 faba 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3880:	f04f 0220 	mov.w	r2, #32
    3884:	f3ef 8311 	mrs	r3, BASEPRI
    3888:	f382 8812 	msr	BASEPRI_MAX, r2
    388c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3890:	f001 fadc 	bl	4e4c <z_get_next_timeout_expiry>
    3894:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    3896:	f7fd fb37 	bl	f08 <pm_system_suspend>
    389a:	2800      	cmp	r0, #0
    389c:	d1f0      	bne.n	3880 <idle+0x20>
	arch_cpu_idle();
    389e:	f7fd feff 	bl	16a0 <arch_cpu_idle>
}
    38a2:	e7ed      	b.n	3880 <idle+0x20>
    38a4:	200009c4 	.word	0x200009c4
    38a8:	000098ce 	.word	0x000098ce
    38ac:	00008b51 	.word	0x00008b51

000038b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    38b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    38b4:	4604      	mov	r4, r0
    38b6:	4616      	mov	r6, r2
    38b8:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    38ba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    38be:	b143      	cbz	r3, 38d2 <z_impl_k_mutex_lock+0x22>
    38c0:	4962      	ldr	r1, [pc, #392]	; (3a4c <z_impl_k_mutex_lock+0x19c>)
    38c2:	4863      	ldr	r0, [pc, #396]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    38c4:	2265      	movs	r2, #101	; 0x65
    38c6:	f004 fa0a 	bl	7cde <printk>
    38ca:	2165      	movs	r1, #101	; 0x65
    38cc:	485f      	ldr	r0, [pc, #380]	; (3a4c <z_impl_k_mutex_lock+0x19c>)
    38ce:	f004 fa91 	bl	7df4 <assert_post_action>
    38d2:	f04f 0320 	mov.w	r3, #32
    38d6:	f3ef 8811 	mrs	r8, BASEPRI
    38da:	f383 8812 	msr	BASEPRI_MAX, r3
    38de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    38e2:	485c      	ldr	r0, [pc, #368]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    38e4:	f7ff ff98 	bl	3818 <z_spin_lock_valid>
    38e8:	b940      	cbnz	r0, 38fc <z_impl_k_mutex_lock+0x4c>
    38ea:	495b      	ldr	r1, [pc, #364]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    38ec:	4858      	ldr	r0, [pc, #352]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    38ee:	2281      	movs	r2, #129	; 0x81
    38f0:	f004 f9f5 	bl	7cde <printk>
    38f4:	2181      	movs	r1, #129	; 0x81
    38f6:	4858      	ldr	r0, [pc, #352]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    38f8:	f004 fa7c 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    38fc:	4855      	ldr	r0, [pc, #340]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    38fe:	f7ff ffa7 	bl	3850 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3902:	68e3      	ldr	r3, [r4, #12]
    3904:	4a55      	ldr	r2, [pc, #340]	; (3a5c <z_impl_k_mutex_lock+0x1ac>)
    3906:	b1d3      	cbz	r3, 393e <z_impl_k_mutex_lock+0x8e>
    3908:	68a0      	ldr	r0, [r4, #8]
    390a:	6891      	ldr	r1, [r2, #8]
    390c:	4288      	cmp	r0, r1
    390e:	d033      	beq.n	3978 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3910:	ea56 0307 	orrs.w	r3, r6, r7
    3914:	d132      	bne.n	397c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3916:	484f      	ldr	r0, [pc, #316]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    3918:	f7ff ff8c 	bl	3834 <z_spin_unlock_valid>
    391c:	b940      	cbnz	r0, 3930 <z_impl_k_mutex_lock+0x80>
    391e:	494e      	ldr	r1, [pc, #312]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    3920:	484b      	ldr	r0, [pc, #300]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    3922:	22ac      	movs	r2, #172	; 0xac
    3924:	f004 f9db 	bl	7cde <printk>
    3928:	21ac      	movs	r1, #172	; 0xac
    392a:	484b      	ldr	r0, [pc, #300]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    392c:	f004 fa62 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3930:	f388 8811 	msr	BASEPRI, r8
    3934:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3938:	f06f 000f 	mvn.w	r0, #15
    393c:	e019      	b.n	3972 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    393e:	6891      	ldr	r1, [r2, #8]
    3940:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3944:	3301      	adds	r3, #1
    3946:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3948:	6893      	ldr	r3, [r2, #8]
    394a:	4842      	ldr	r0, [pc, #264]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    394c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    394e:	60a3      	str	r3, [r4, #8]
    3950:	f7ff ff70 	bl	3834 <z_spin_unlock_valid>
    3954:	b940      	cbnz	r0, 3968 <z_impl_k_mutex_lock+0xb8>
    3956:	4940      	ldr	r1, [pc, #256]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    3958:	483d      	ldr	r0, [pc, #244]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    395a:	22ac      	movs	r2, #172	; 0xac
    395c:	f004 f9bf 	bl	7cde <printk>
    3960:	21ac      	movs	r1, #172	; 0xac
    3962:	483d      	ldr	r0, [pc, #244]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    3964:	f004 fa46 	bl	7df4 <assert_post_action>
    3968:	f388 8811 	msr	BASEPRI, r8
    396c:	f3bf 8f6f 	isb	sy
		return 0;
    3970:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3972:	b002      	add	sp, #8
    3974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3978:	6921      	ldr	r1, [r4, #16]
    397a:	e7e3      	b.n	3944 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    397c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3980:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3984:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3988:	4299      	cmp	r1, r3
    398a:	bfa8      	it	ge
    398c:	4619      	movge	r1, r3
    398e:	4291      	cmp	r1, r2
    3990:	bfb8      	it	lt
    3992:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3994:	428b      	cmp	r3, r1
    3996:	dd3f      	ble.n	3a18 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    3998:	f000 fd94 	bl	44c4 <z_set_prio>
    399c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    399e:	4622      	mov	r2, r4
    39a0:	4641      	mov	r1, r8
    39a2:	e9cd 6700 	strd	r6, r7, [sp]
    39a6:	482b      	ldr	r0, [pc, #172]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    39a8:	f000 fd66 	bl	4478 <z_pend_curr>
	if (got_mutex == 0) {
    39ac:	2800      	cmp	r0, #0
    39ae:	d0e0      	beq.n	3972 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    39b0:	f04f 0320 	mov.w	r3, #32
    39b4:	f3ef 8611 	mrs	r6, BASEPRI
    39b8:	f383 8812 	msr	BASEPRI_MAX, r3
    39bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39c0:	4824      	ldr	r0, [pc, #144]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    39c2:	f7ff ff29 	bl	3818 <z_spin_lock_valid>
    39c6:	b940      	cbnz	r0, 39da <z_impl_k_mutex_lock+0x12a>
    39c8:	4923      	ldr	r1, [pc, #140]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    39ca:	4821      	ldr	r0, [pc, #132]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    39cc:	2281      	movs	r2, #129	; 0x81
    39ce:	f004 f986 	bl	7cde <printk>
    39d2:	2181      	movs	r1, #129	; 0x81
    39d4:	4820      	ldr	r0, [pc, #128]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    39d6:	f004 fa0d 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    39da:	481e      	ldr	r0, [pc, #120]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    39dc:	f7ff ff38 	bl	3850 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    39e0:	6823      	ldr	r3, [r4, #0]
    39e2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39e4:	429c      	cmp	r4, r3
    39e6:	d00a      	beq.n	39fe <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    39e8:	b14b      	cbz	r3, 39fe <z_impl_k_mutex_lock+0x14e>
    39ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
    39ee:	4299      	cmp	r1, r3
    39f0:	bfa8      	it	ge
    39f2:	4619      	movge	r1, r3
    39f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    39f8:	4299      	cmp	r1, r3
    39fa:	bfb8      	it	lt
    39fc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    39fe:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3a00:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3a04:	4299      	cmp	r1, r3
    3a06:	d109      	bne.n	3a1c <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    3a08:	b16d      	cbz	r5, 3a26 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    3a0a:	4631      	mov	r1, r6
    3a0c:	4811      	ldr	r0, [pc, #68]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    3a0e:	f000 f9cd 	bl	3dac <z_reschedule>
	return -EAGAIN;
    3a12:	f06f 000a 	mvn.w	r0, #10
    3a16:	e7ac      	b.n	3972 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    3a18:	2500      	movs	r5, #0
    3a1a:	e7c0      	b.n	399e <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    3a1c:	f000 fd52 	bl	44c4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3a20:	2800      	cmp	r0, #0
    3a22:	d1f2      	bne.n	3a0a <z_impl_k_mutex_lock+0x15a>
    3a24:	e7f0      	b.n	3a08 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3a26:	480b      	ldr	r0, [pc, #44]	; (3a54 <z_impl_k_mutex_lock+0x1a4>)
    3a28:	f7ff ff04 	bl	3834 <z_spin_unlock_valid>
    3a2c:	b940      	cbnz	r0, 3a40 <z_impl_k_mutex_lock+0x190>
    3a2e:	490a      	ldr	r1, [pc, #40]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    3a30:	4807      	ldr	r0, [pc, #28]	; (3a50 <z_impl_k_mutex_lock+0x1a0>)
    3a32:	22ac      	movs	r2, #172	; 0xac
    3a34:	f004 f953 	bl	7cde <printk>
    3a38:	21ac      	movs	r1, #172	; 0xac
    3a3a:	4807      	ldr	r0, [pc, #28]	; (3a58 <z_impl_k_mutex_lock+0x1a8>)
    3a3c:	f004 f9da 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3a40:	f386 8811 	msr	BASEPRI, r6
    3a44:	f3bf 8f6f 	isb	sy
    3a48:	e7e3      	b.n	3a12 <z_impl_k_mutex_lock+0x162>
    3a4a:	bf00      	nop
    3a4c:	000098ef 	.word	0x000098ef
    3a50:	00008b51 	.word	0x00008b51
    3a54:	200009ec 	.word	0x200009ec
    3a58:	00008b2b 	.word	0x00008b2b
    3a5c:	200009c4 	.word	0x200009c4

00003a60 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3a60:	b538      	push	{r3, r4, r5, lr}
    3a62:	4604      	mov	r4, r0
    3a64:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3a68:	b143      	cbz	r3, 3a7c <z_impl_k_mutex_unlock+0x1c>
    3a6a:	4945      	ldr	r1, [pc, #276]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3a6c:	4845      	ldr	r0, [pc, #276]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3a6e:	22c7      	movs	r2, #199	; 0xc7
    3a70:	f004 f935 	bl	7cde <printk>
    3a74:	21c7      	movs	r1, #199	; 0xc7
    3a76:	4842      	ldr	r0, [pc, #264]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3a78:	f004 f9bc 	bl	7df4 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3a7c:	68a3      	ldr	r3, [r4, #8]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d078      	beq.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3a82:	4d41      	ldr	r5, [pc, #260]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3a84:	68aa      	ldr	r2, [r5, #8]
    3a86:	4293      	cmp	r3, r2
    3a88:	d177      	bne.n	3b7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe2>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    3a8a:	68e3      	ldr	r3, [r4, #12]
    3a8c:	b943      	cbnz	r3, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a8e:	493c      	ldr	r1, [pc, #240]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3a90:	483c      	ldr	r0, [pc, #240]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3a92:	22df      	movs	r2, #223	; 0xdf
    3a94:	f004 f923 	bl	7cde <printk>
    3a98:	21df      	movs	r1, #223	; 0xdf
    3a9a:	4839      	ldr	r0, [pc, #228]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3a9c:	f004 f9aa 	bl	7df4 <assert_post_action>
    3aa0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    3aa4:	b143      	cbz	r3, 3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3aa6:	4939      	ldr	r1, [pc, #228]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3aa8:	4836      	ldr	r0, [pc, #216]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3aaa:	22fd      	movs	r2, #253	; 0xfd
    3aac:	f004 f917 	bl	7cde <printk>
    3ab0:	21fd      	movs	r1, #253	; 0xfd
    3ab2:	4836      	ldr	r0, [pc, #216]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3ab4:	f004 f99e 	bl	7df4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3ab8:	68ab      	ldr	r3, [r5, #8]
    3aba:	7bdb      	ldrb	r3, [r3, #15]
    3abc:	2b01      	cmp	r3, #1
    3abe:	d108      	bne.n	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
    3ac0:	4932      	ldr	r1, [pc, #200]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3ac2:	4830      	ldr	r0, [pc, #192]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3ac4:	22fe      	movs	r2, #254	; 0xfe
    3ac6:	f004 f90a 	bl	7cde <printk>
    3aca:	21fe      	movs	r1, #254	; 0xfe
    3acc:	482f      	ldr	r0, [pc, #188]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3ace:	f004 f991 	bl	7df4 <assert_post_action>

	--_current->base.sched_locked;
    3ad2:	68aa      	ldr	r2, [r5, #8]
    3ad4:	7bd3      	ldrb	r3, [r2, #15]
    3ad6:	3b01      	subs	r3, #1
    3ad8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3ada:	68e3      	ldr	r3, [r4, #12]
    3adc:	2b01      	cmp	r3, #1
    3ade:	d905      	bls.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		mutex->lock_count--;
    3ae0:	3b01      	subs	r3, #1
    3ae2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3ae4:	f000 fdce 	bl	4684 <k_sched_unlock>

	return 0;
    3ae8:	2000      	movs	r0, #0
}
    3aea:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3aec:	f04f 0320 	mov.w	r3, #32
    3af0:	f3ef 8511 	mrs	r5, BASEPRI
    3af4:	f383 8812 	msr	BASEPRI_MAX, r3
    3af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3afc:	4824      	ldr	r0, [pc, #144]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3afe:	f7ff fe8b 	bl	3818 <z_spin_lock_valid>
    3b02:	b940      	cbnz	r0, 3b16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e>
    3b04:	4923      	ldr	r1, [pc, #140]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
    3b06:	481f      	ldr	r0, [pc, #124]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3b08:	2281      	movs	r2, #129	; 0x81
    3b0a:	f004 f8e8 	bl	7cde <printk>
    3b0e:	2181      	movs	r1, #129	; 0x81
    3b10:	4820      	ldr	r0, [pc, #128]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
    3b12:	f004 f96f 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3b16:	481e      	ldr	r0, [pc, #120]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3b18:	f7ff fe9a 	bl	3850 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3b1c:	68a0      	ldr	r0, [r4, #8]
    3b1e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    3b20:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3b24:	4299      	cmp	r1, r3
    3b26:	d001      	beq.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
		return z_set_prio(mutex->owner, new_prio);
    3b28:	f000 fccc 	bl	44c4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3b2c:	4620      	mov	r0, r4
    3b2e:	f000 fe05 	bl	473c <z_unpend_first_thread>
	mutex->owner = new_owner;
    3b32:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3b34:	b158      	cbz	r0, 3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
		mutex->owner_orig_prio = new_owner->base.prio;
    3b36:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3b3a:	6122      	str	r2, [r4, #16]
    3b3c:	2200      	movs	r2, #0
    3b3e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3b40:	f000 fb32 	bl	41a8 <z_ready_thread>
		z_reschedule(&lock, key);
    3b44:	4629      	mov	r1, r5
    3b46:	4812      	ldr	r0, [pc, #72]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3b48:	f000 f930 	bl	3dac <z_reschedule>
    3b4c:	e7ca      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		mutex->lock_count = 0U;
    3b4e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3b50:	480f      	ldr	r0, [pc, #60]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3b52:	f7ff fe6f 	bl	3834 <z_spin_unlock_valid>
    3b56:	b940      	cbnz	r0, 3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
    3b58:	490e      	ldr	r1, [pc, #56]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
    3b5a:	480a      	ldr	r0, [pc, #40]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3b5c:	22ac      	movs	r2, #172	; 0xac
    3b5e:	f004 f8be 	bl	7cde <printk>
    3b62:	21ac      	movs	r1, #172	; 0xac
    3b64:	480b      	ldr	r0, [pc, #44]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
    3b66:	f004 f945 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3b6a:	f385 8811 	msr	BASEPRI, r5
    3b6e:	f3bf 8f6f 	isb	sy
    3b72:	e7b7      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		return -EINVAL;
    3b74:	f06f 0015 	mvn.w	r0, #21
    3b78:	e7b7      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
		return -EPERM;
    3b7a:	f04f 30ff 	mov.w	r0, #4294967295
    3b7e:	e7b4      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3b80:	000098ef 	.word	0x000098ef
    3b84:	00008b51 	.word	0x00008b51
    3b88:	200009c4 	.word	0x200009c4
    3b8c:	00009911 	.word	0x00009911
    3b90:	200009ec 	.word	0x200009ec
    3b94:	00008b2b 	.word	0x00008b2b

00003b98 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b98:	b538      	push	{r3, r4, r5, lr}
    3b9a:	4604      	mov	r4, r0
	__asm__ volatile(
    3b9c:	f04f 0320 	mov.w	r3, #32
    3ba0:	f3ef 8511 	mrs	r5, BASEPRI
    3ba4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ba8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3bac:	4812      	ldr	r0, [pc, #72]	; (3bf8 <z_impl_k_sem_give+0x60>)
    3bae:	f7ff fe33 	bl	3818 <z_spin_lock_valid>
    3bb2:	b940      	cbnz	r0, 3bc6 <z_impl_k_sem_give+0x2e>
    3bb4:	4911      	ldr	r1, [pc, #68]	; (3bfc <z_impl_k_sem_give+0x64>)
    3bb6:	4812      	ldr	r0, [pc, #72]	; (3c00 <z_impl_k_sem_give+0x68>)
    3bb8:	2281      	movs	r2, #129	; 0x81
    3bba:	f004 f890 	bl	7cde <printk>
    3bbe:	2181      	movs	r1, #129	; 0x81
    3bc0:	480e      	ldr	r0, [pc, #56]	; (3bfc <z_impl_k_sem_give+0x64>)
    3bc2:	f004 f917 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3bc6:	480c      	ldr	r0, [pc, #48]	; (3bf8 <z_impl_k_sem_give+0x60>)
    3bc8:	f7ff fe42 	bl	3850 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3bcc:	4620      	mov	r0, r4
    3bce:	f000 fdb5 	bl	473c <z_unpend_first_thread>

	if (thread != NULL) {
    3bd2:	b148      	cbz	r0, 3be8 <z_impl_k_sem_give+0x50>
    3bd4:	2200      	movs	r2, #0
    3bd6:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3bd8:	f000 fae6 	bl	41a8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3bdc:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3be2:	4805      	ldr	r0, [pc, #20]	; (3bf8 <z_impl_k_sem_give+0x60>)
    3be4:	f000 b8e2 	b.w	3dac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3be8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3bec:	429a      	cmp	r2, r3
    3bee:	bf18      	it	ne
    3bf0:	3301      	addne	r3, #1
    3bf2:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    3bf4:	e7f2      	b.n	3bdc <z_impl_k_sem_give+0x44>
    3bf6:	bf00      	nop
    3bf8:	200009f0 	.word	0x200009f0
    3bfc:	00008b2b 	.word	0x00008b2b
    3c00:	00008b51 	.word	0x00008b51

00003c04 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c06:	4604      	mov	r4, r0
    3c08:	4616      	mov	r6, r2
    3c0a:	461f      	mov	r7, r3
    3c0c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    3c10:	b15b      	cbz	r3, 3c2a <z_impl_k_sem_take+0x26>
    3c12:	ea56 0307 	orrs.w	r3, r6, r7
    3c16:	d008      	beq.n	3c2a <z_impl_k_sem_take+0x26>
    3c18:	492b      	ldr	r1, [pc, #172]	; (3cc8 <z_impl_k_sem_take+0xc4>)
    3c1a:	482c      	ldr	r0, [pc, #176]	; (3ccc <z_impl_k_sem_take+0xc8>)
    3c1c:	2279      	movs	r2, #121	; 0x79
    3c1e:	f004 f85e 	bl	7cde <printk>
    3c22:	2179      	movs	r1, #121	; 0x79
    3c24:	4828      	ldr	r0, [pc, #160]	; (3cc8 <z_impl_k_sem_take+0xc4>)
    3c26:	f004 f8e5 	bl	7df4 <assert_post_action>
    3c2a:	f04f 0320 	mov.w	r3, #32
    3c2e:	f3ef 8511 	mrs	r5, BASEPRI
    3c32:	f383 8812 	msr	BASEPRI_MAX, r3
    3c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c3a:	4825      	ldr	r0, [pc, #148]	; (3cd0 <z_impl_k_sem_take+0xcc>)
    3c3c:	f7ff fdec 	bl	3818 <z_spin_lock_valid>
    3c40:	b940      	cbnz	r0, 3c54 <z_impl_k_sem_take+0x50>
    3c42:	4924      	ldr	r1, [pc, #144]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3c44:	4821      	ldr	r0, [pc, #132]	; (3ccc <z_impl_k_sem_take+0xc8>)
    3c46:	2281      	movs	r2, #129	; 0x81
    3c48:	f004 f849 	bl	7cde <printk>
    3c4c:	2181      	movs	r1, #129	; 0x81
    3c4e:	4821      	ldr	r0, [pc, #132]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3c50:	f004 f8d0 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c54:	481e      	ldr	r0, [pc, #120]	; (3cd0 <z_impl_k_sem_take+0xcc>)
    3c56:	f7ff fdfb 	bl	3850 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3c5a:	68a3      	ldr	r3, [r4, #8]
    3c5c:	b1ab      	cbz	r3, 3c8a <z_impl_k_sem_take+0x86>
		sem->count--;
    3c5e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c60:	481b      	ldr	r0, [pc, #108]	; (3cd0 <z_impl_k_sem_take+0xcc>)
    3c62:	60a3      	str	r3, [r4, #8]
    3c64:	f7ff fde6 	bl	3834 <z_spin_unlock_valid>
    3c68:	b940      	cbnz	r0, 3c7c <z_impl_k_sem_take+0x78>
    3c6a:	491a      	ldr	r1, [pc, #104]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3c6c:	4817      	ldr	r0, [pc, #92]	; (3ccc <z_impl_k_sem_take+0xc8>)
    3c6e:	22ac      	movs	r2, #172	; 0xac
    3c70:	f004 f835 	bl	7cde <printk>
    3c74:	21ac      	movs	r1, #172	; 0xac
    3c76:	4817      	ldr	r0, [pc, #92]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3c78:	f004 f8bc 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3c7c:	f385 8811 	msr	BASEPRI, r5
    3c80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3c84:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3c86:	b003      	add	sp, #12
    3c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3c8a:	ea56 0307 	orrs.w	r3, r6, r7
    3c8e:	d113      	bne.n	3cb8 <z_impl_k_sem_take+0xb4>
    3c90:	480f      	ldr	r0, [pc, #60]	; (3cd0 <z_impl_k_sem_take+0xcc>)
    3c92:	f7ff fdcf 	bl	3834 <z_spin_unlock_valid>
    3c96:	b940      	cbnz	r0, 3caa <z_impl_k_sem_take+0xa6>
    3c98:	490e      	ldr	r1, [pc, #56]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3c9a:	480c      	ldr	r0, [pc, #48]	; (3ccc <z_impl_k_sem_take+0xc8>)
    3c9c:	22ac      	movs	r2, #172	; 0xac
    3c9e:	f004 f81e 	bl	7cde <printk>
    3ca2:	21ac      	movs	r1, #172	; 0xac
    3ca4:	480b      	ldr	r0, [pc, #44]	; (3cd4 <z_impl_k_sem_take+0xd0>)
    3ca6:	f004 f8a5 	bl	7df4 <assert_post_action>
    3caa:	f385 8811 	msr	BASEPRI, r5
    3cae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3cb2:	f06f 000f 	mvn.w	r0, #15
    3cb6:	e7e6      	b.n	3c86 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3cb8:	4622      	mov	r2, r4
    3cba:	4629      	mov	r1, r5
    3cbc:	e9cd 6700 	strd	r6, r7, [sp]
    3cc0:	4803      	ldr	r0, [pc, #12]	; (3cd0 <z_impl_k_sem_take+0xcc>)
    3cc2:	f000 fbd9 	bl	4478 <z_pend_curr>
	return ret;
    3cc6:	e7de      	b.n	3c86 <z_impl_k_sem_take+0x82>
    3cc8:	0000993c 	.word	0x0000993c
    3ccc:	00008b51 	.word	0x00008b51
    3cd0:	200009f0 	.word	0x200009f0
    3cd4:	00008b2b 	.word	0x00008b2b

00003cd8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3cd8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3cda:	4c08      	ldr	r4, [pc, #32]	; (3cfc <z_reset_time_slice+0x24>)
    3cdc:	6823      	ldr	r3, [r4, #0]
    3cde:	b15b      	cbz	r3, 3cf8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3ce0:	f7fe ffba 	bl	2c58 <sys_clock_elapsed>
    3ce4:	4603      	mov	r3, r0
    3ce6:	6820      	ldr	r0, [r4, #0]
    3ce8:	4a05      	ldr	r2, [pc, #20]	; (3d00 <z_reset_time_slice+0x28>)
    3cea:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3cec:	2100      	movs	r1, #0
	}
}
    3cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3cf2:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3cf4:	f001 b8e0 	b.w	4eb8 <z_set_timeout_expiry>
}
    3cf8:	bd10      	pop	{r4, pc}
    3cfa:	bf00      	nop
    3cfc:	20000a00 	.word	0x20000a00
    3d00:	200009c4 	.word	0x200009c4

00003d04 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d06:	4604      	mov	r4, r0
    3d08:	460d      	mov	r5, r1
	__asm__ volatile(
    3d0a:	f04f 0320 	mov.w	r3, #32
    3d0e:	f3ef 8611 	mrs	r6, BASEPRI
    3d12:	f383 8812 	msr	BASEPRI_MAX, r3
    3d16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d1a:	481e      	ldr	r0, [pc, #120]	; (3d94 <k_sched_time_slice_set+0x90>)
    3d1c:	f7ff fd7c 	bl	3818 <z_spin_lock_valid>
    3d20:	b940      	cbnz	r0, 3d34 <k_sched_time_slice_set+0x30>
    3d22:	491d      	ldr	r1, [pc, #116]	; (3d98 <k_sched_time_slice_set+0x94>)
    3d24:	481d      	ldr	r0, [pc, #116]	; (3d9c <k_sched_time_slice_set+0x98>)
    3d26:	2281      	movs	r2, #129	; 0x81
    3d28:	f003 ffd9 	bl	7cde <printk>
    3d2c:	2181      	movs	r1, #129	; 0x81
    3d2e:	481a      	ldr	r0, [pc, #104]	; (3d98 <k_sched_time_slice_set+0x94>)
    3d30:	f004 f860 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3d34:	4817      	ldr	r0, [pc, #92]	; (3d94 <k_sched_time_slice_set+0x90>)
    3d36:	f7ff fd8b 	bl	3850 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3d3a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3d3e:	2200      	movs	r2, #0
    3d40:	f240 30e7 	movw	r0, #999	; 0x3e7
    3d44:	2100      	movs	r1, #0
    3d46:	4b16      	ldr	r3, [pc, #88]	; (3da0 <k_sched_time_slice_set+0x9c>)
    3d48:	fbe7 0104 	umlal	r0, r1, r7, r4
    3d4c:	611a      	str	r2, [r3, #16]
    3d4e:	2300      	movs	r3, #0
    3d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d54:	f7fc fa72 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3d58:	2c00      	cmp	r4, #0
    3d5a:	4b12      	ldr	r3, [pc, #72]	; (3da4 <k_sched_time_slice_set+0xa0>)
    3d5c:	dc16      	bgt.n	3d8c <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    3d5e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3d60:	4b11      	ldr	r3, [pc, #68]	; (3da8 <k_sched_time_slice_set+0xa4>)
    3d62:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3d64:	f7ff ffb8 	bl	3cd8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d68:	480a      	ldr	r0, [pc, #40]	; (3d94 <k_sched_time_slice_set+0x90>)
    3d6a:	f7ff fd63 	bl	3834 <z_spin_unlock_valid>
    3d6e:	b940      	cbnz	r0, 3d82 <k_sched_time_slice_set+0x7e>
    3d70:	4909      	ldr	r1, [pc, #36]	; (3d98 <k_sched_time_slice_set+0x94>)
    3d72:	480a      	ldr	r0, [pc, #40]	; (3d9c <k_sched_time_slice_set+0x98>)
    3d74:	22ac      	movs	r2, #172	; 0xac
    3d76:	f003 ffb2 	bl	7cde <printk>
    3d7a:	21ac      	movs	r1, #172	; 0xac
    3d7c:	4806      	ldr	r0, [pc, #24]	; (3d98 <k_sched_time_slice_set+0x94>)
    3d7e:	f004 f839 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3d82:	f386 8811 	msr	BASEPRI, r6
    3d86:	f3bf 8f6f 	isb	sy
	}
}
    3d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    3d8c:	2802      	cmp	r0, #2
    3d8e:	bfb8      	it	lt
    3d90:	2002      	movlt	r0, #2
    3d92:	e7e4      	b.n	3d5e <k_sched_time_slice_set+0x5a>
    3d94:	200009f8 	.word	0x200009f8
    3d98:	00008b2b 	.word	0x00008b2b
    3d9c:	00008b51 	.word	0x00008b51
    3da0:	200009c4 	.word	0x200009c4
    3da4:	20000a00 	.word	0x20000a00
    3da8:	200009fc 	.word	0x200009fc

00003dac <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3dac:	b510      	push	{r4, lr}
    3dae:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3db0:	460c      	mov	r4, r1
    3db2:	b9c1      	cbnz	r1, 3de6 <z_reschedule+0x3a>
    3db4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    3db8:	b9aa      	cbnz	r2, 3de6 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    3dba:	4a14      	ldr	r2, [pc, #80]	; (3e0c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    3dbc:	69d1      	ldr	r1, [r2, #28]
    3dbe:	6892      	ldr	r2, [r2, #8]
    3dc0:	4291      	cmp	r1, r2
    3dc2:	d010      	beq.n	3de6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3dc4:	f7ff fd36 	bl	3834 <z_spin_unlock_valid>
    3dc8:	b940      	cbnz	r0, 3ddc <z_reschedule+0x30>
    3dca:	4911      	ldr	r1, [pc, #68]	; (3e10 <z_reschedule+0x64>)
    3dcc:	4811      	ldr	r0, [pc, #68]	; (3e14 <z_reschedule+0x68>)
    3dce:	22c3      	movs	r2, #195	; 0xc3
    3dd0:	f003 ff85 	bl	7cde <printk>
    3dd4:	21c3      	movs	r1, #195	; 0xc3
    3dd6:	480e      	ldr	r0, [pc, #56]	; (3e10 <z_reschedule+0x64>)
    3dd8:	f004 f80c 	bl	7df4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    3de0:	2000      	movs	r0, #0
    3de2:	f7fd bcfd 	b.w	17e0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3de6:	4618      	mov	r0, r3
    3de8:	f7ff fd24 	bl	3834 <z_spin_unlock_valid>
    3dec:	b940      	cbnz	r0, 3e00 <z_reschedule+0x54>
    3dee:	4908      	ldr	r1, [pc, #32]	; (3e10 <z_reschedule+0x64>)
    3df0:	4808      	ldr	r0, [pc, #32]	; (3e14 <z_reschedule+0x68>)
    3df2:	22ac      	movs	r2, #172	; 0xac
    3df4:	f003 ff73 	bl	7cde <printk>
    3df8:	21ac      	movs	r1, #172	; 0xac
    3dfa:	4805      	ldr	r0, [pc, #20]	; (3e10 <z_reschedule+0x64>)
    3dfc:	f003 fffa 	bl	7df4 <assert_post_action>
    3e00:	f384 8811 	msr	BASEPRI, r4
    3e04:	f3bf 8f6f 	isb	sy
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	bf00      	nop
    3e0c:	200009c4 	.word	0x200009c4
    3e10:	00008b2b 	.word	0x00008b2b
    3e14:	00008b51 	.word	0x00008b51

00003e18 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    3e18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3e1a:	f04f 0320 	mov.w	r3, #32
    3e1e:	f3ef 8511 	mrs	r5, BASEPRI
    3e22:	f383 8812 	msr	BASEPRI_MAX, r3
    3e26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e2a:	4820      	ldr	r0, [pc, #128]	; (3eac <k_sched_lock+0x94>)
    3e2c:	f7ff fcf4 	bl	3818 <z_spin_lock_valid>
    3e30:	b940      	cbnz	r0, 3e44 <k_sched_lock+0x2c>
    3e32:	491f      	ldr	r1, [pc, #124]	; (3eb0 <k_sched_lock+0x98>)
    3e34:	481f      	ldr	r0, [pc, #124]	; (3eb4 <k_sched_lock+0x9c>)
    3e36:	2281      	movs	r2, #129	; 0x81
    3e38:	f003 ff51 	bl	7cde <printk>
    3e3c:	2181      	movs	r1, #129	; 0x81
    3e3e:	481c      	ldr	r0, [pc, #112]	; (3eb0 <k_sched_lock+0x98>)
    3e40:	f003 ffd8 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    3e44:	4819      	ldr	r0, [pc, #100]	; (3eac <k_sched_lock+0x94>)
    3e46:	f7ff fd03 	bl	3850 <z_spin_lock_set_owner>
    3e4a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    3e4e:	b143      	cbz	r3, 3e62 <k_sched_lock+0x4a>
    3e50:	4919      	ldr	r1, [pc, #100]	; (3eb8 <k_sched_lock+0xa0>)
    3e52:	4818      	ldr	r0, [pc, #96]	; (3eb4 <k_sched_lock+0x9c>)
    3e54:	22fd      	movs	r2, #253	; 0xfd
    3e56:	f003 ff42 	bl	7cde <printk>
    3e5a:	21fd      	movs	r1, #253	; 0xfd
    3e5c:	4816      	ldr	r0, [pc, #88]	; (3eb8 <k_sched_lock+0xa0>)
    3e5e:	f003 ffc9 	bl	7df4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3e62:	4c16      	ldr	r4, [pc, #88]	; (3ebc <k_sched_lock+0xa4>)
    3e64:	68a2      	ldr	r2, [r4, #8]
    3e66:	7bd2      	ldrb	r2, [r2, #15]
    3e68:	2a01      	cmp	r2, #1
    3e6a:	d108      	bne.n	3e7e <k_sched_lock+0x66>
    3e6c:	4912      	ldr	r1, [pc, #72]	; (3eb8 <k_sched_lock+0xa0>)
    3e6e:	4811      	ldr	r0, [pc, #68]	; (3eb4 <k_sched_lock+0x9c>)
    3e70:	22fe      	movs	r2, #254	; 0xfe
    3e72:	f003 ff34 	bl	7cde <printk>
    3e76:	21fe      	movs	r1, #254	; 0xfe
    3e78:	480f      	ldr	r0, [pc, #60]	; (3eb8 <k_sched_lock+0xa0>)
    3e7a:	f003 ffbb 	bl	7df4 <assert_post_action>
	--_current->base.sched_locked;
    3e7e:	68a2      	ldr	r2, [r4, #8]
    3e80:	7bd3      	ldrb	r3, [r2, #15]
    3e82:	3b01      	subs	r3, #1
    3e84:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e86:	4809      	ldr	r0, [pc, #36]	; (3eac <k_sched_lock+0x94>)
    3e88:	f7ff fcd4 	bl	3834 <z_spin_unlock_valid>
    3e8c:	b940      	cbnz	r0, 3ea0 <k_sched_lock+0x88>
    3e8e:	4908      	ldr	r1, [pc, #32]	; (3eb0 <k_sched_lock+0x98>)
    3e90:	4808      	ldr	r0, [pc, #32]	; (3eb4 <k_sched_lock+0x9c>)
    3e92:	22ac      	movs	r2, #172	; 0xac
    3e94:	f003 ff23 	bl	7cde <printk>
    3e98:	21ac      	movs	r1, #172	; 0xac
    3e9a:	4805      	ldr	r0, [pc, #20]	; (3eb0 <k_sched_lock+0x98>)
    3e9c:	f003 ffaa 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    3ea0:	f385 8811 	msr	BASEPRI, r5
    3ea4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3ea8:	bd38      	pop	{r3, r4, r5, pc}
    3eaa:	bf00      	nop
    3eac:	200009f8 	.word	0x200009f8
    3eb0:	00008b2b 	.word	0x00008b2b
    3eb4:	00008b51 	.word	0x00008b51
    3eb8:	00009911 	.word	0x00009911
    3ebc:	200009c4 	.word	0x200009c4

00003ec0 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3ec0:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <z_priq_dumb_remove+0x30>)
{
    3ec2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3ec4:	4299      	cmp	r1, r3
{
    3ec6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3ec8:	d10a      	bne.n	3ee0 <z_priq_dumb_remove+0x20>
    3eca:	490a      	ldr	r1, [pc, #40]	; (3ef4 <z_priq_dumb_remove+0x34>)
    3ecc:	480a      	ldr	r0, [pc, #40]	; (3ef8 <z_priq_dumb_remove+0x38>)
    3ece:	f240 32e7 	movw	r2, #999	; 0x3e7
    3ed2:	f003 ff04 	bl	7cde <printk>
    3ed6:	f240 31e7 	movw	r1, #999	; 0x3e7
    3eda:	4806      	ldr	r0, [pc, #24]	; (3ef4 <z_priq_dumb_remove+0x34>)
    3edc:	f003 ff8a 	bl	7df4 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3ee0:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    3ee4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3ee6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3ee8:	2300      	movs	r3, #0
	node->prev = NULL;
    3eea:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3eee:	bd10      	pop	{r4, pc}
    3ef0:	20000130 	.word	0x20000130
    3ef4:	0000995c 	.word	0x0000995c
    3ef8:	00008b51 	.word	0x00008b51

00003efc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    3efc:	6883      	ldr	r3, [r0, #8]
{
    3efe:	b510      	push	{r4, lr}
    3f00:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    3f02:	b953      	cbnz	r3, 3f1a <unpend_thread_no_timeout+0x1e>
    3f04:	490a      	ldr	r1, [pc, #40]	; (3f30 <unpend_thread_no_timeout+0x34>)
    3f06:	480b      	ldr	r0, [pc, #44]	; (3f34 <unpend_thread_no_timeout+0x38>)
    3f08:	f240 2283 	movw	r2, #643	; 0x283
    3f0c:	f003 fee7 	bl	7cde <printk>
    3f10:	f240 2183 	movw	r1, #643	; 0x283
    3f14:	4806      	ldr	r0, [pc, #24]	; (3f30 <unpend_thread_no_timeout+0x34>)
    3f16:	f003 ff6d 	bl	7df4 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    3f1a:	4621      	mov	r1, r4
    3f1c:	68a0      	ldr	r0, [r4, #8]
    3f1e:	f7ff ffcf 	bl	3ec0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3f22:	7b63      	ldrb	r3, [r4, #13]
    3f24:	f023 0302 	bic.w	r3, r3, #2
    3f28:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    3f2a:	2300      	movs	r3, #0
    3f2c:	60a3      	str	r3, [r4, #8]
}
    3f2e:	bd10      	pop	{r4, pc}
    3f30:	0000995c 	.word	0x0000995c
    3f34:	00008b51 	.word	0x00008b51

00003f38 <update_cache>:
{
    3f38:	b538      	push	{r3, r4, r5, lr}
    3f3a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3f3c:	4812      	ldr	r0, [pc, #72]	; (3f88 <update_cache+0x50>)
    3f3e:	f004 fa37 	bl	83b0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3f42:	4d12      	ldr	r5, [pc, #72]	; (3f8c <update_cache+0x54>)
    3f44:	4604      	mov	r4, r0
    3f46:	b900      	cbnz	r0, 3f4a <update_cache+0x12>
    3f48:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    3f4a:	b9aa      	cbnz	r2, 3f78 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    3f4c:	68ab      	ldr	r3, [r5, #8]
    3f4e:	b943      	cbnz	r3, 3f62 <update_cache+0x2a>
    3f50:	490f      	ldr	r1, [pc, #60]	; (3f90 <update_cache+0x58>)
    3f52:	4810      	ldr	r0, [pc, #64]	; (3f94 <update_cache+0x5c>)
    3f54:	2289      	movs	r2, #137	; 0x89
    3f56:	f003 fec2 	bl	7cde <printk>
    3f5a:	2189      	movs	r1, #137	; 0x89
    3f5c:	480c      	ldr	r0, [pc, #48]	; (3f90 <update_cache+0x58>)
    3f5e:	f003 ff49 	bl	7df4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    3f62:	68ab      	ldr	r3, [r5, #8]
    3f64:	7b5a      	ldrb	r2, [r3, #13]
    3f66:	06d2      	lsls	r2, r2, #27
    3f68:	d106      	bne.n	3f78 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3f6a:	69a2      	ldr	r2, [r4, #24]
    3f6c:	b922      	cbnz	r2, 3f78 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    3f6e:	89da      	ldrh	r2, [r3, #14]
    3f70:	2a7f      	cmp	r2, #127	; 0x7f
    3f72:	d901      	bls.n	3f78 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3f74:	61eb      	str	r3, [r5, #28]
}
    3f76:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3f78:	68ab      	ldr	r3, [r5, #8]
    3f7a:	42a3      	cmp	r3, r4
    3f7c:	d001      	beq.n	3f82 <update_cache+0x4a>
			z_reset_time_slice();
    3f7e:	f7ff feab 	bl	3cd8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3f82:	61ec      	str	r4, [r5, #28]
}
    3f84:	e7f7      	b.n	3f76 <update_cache+0x3e>
    3f86:	bf00      	nop
    3f88:	200009e4 	.word	0x200009e4
    3f8c:	200009c4 	.word	0x200009c4
    3f90:	0000995c 	.word	0x0000995c
    3f94:	00008b51 	.word	0x00008b51

00003f98 <move_thread_to_end_of_prio_q>:
{
    3f98:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3f9a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3f9e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    3fa0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3fa2:	7b43      	ldrb	r3, [r0, #13]
    3fa4:	da06      	bge.n	3fb4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    3faa:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3fac:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3fae:	481f      	ldr	r0, [pc, #124]	; (402c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x30>)
    3fb0:	f7ff ff86 	bl	3ec0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3fb4:	7b63      	ldrb	r3, [r4, #13]
    3fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3fba:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fbc:	4b1c      	ldr	r3, [pc, #112]	; (4030 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x34>)
    3fbe:	429c      	cmp	r4, r3
    3fc0:	d108      	bne.n	3fd4 <move_thread_to_end_of_prio_q+0x3c>
    3fc2:	491c      	ldr	r1, [pc, #112]	; (4034 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x38>)
    3fc4:	481c      	ldr	r0, [pc, #112]	; (4038 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x3c>)
    3fc6:	22ba      	movs	r2, #186	; 0xba
    3fc8:	f003 fe89 	bl	7cde <printk>
    3fcc:	21ba      	movs	r1, #186	; 0xba
    3fce:	4819      	ldr	r0, [pc, #100]	; (4034 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x38>)
    3fd0:	f003 ff10 	bl	7df4 <assert_post_action>
	return list->head == list;
    3fd4:	4a19      	ldr	r2, [pc, #100]	; (403c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x40>)
    3fd6:	4611      	mov	r1, r2
    3fd8:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3fdc:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fde:	428b      	cmp	r3, r1
    3fe0:	bf08      	it	eq
    3fe2:	2300      	moveq	r3, #0
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	bf38      	it	cc
    3fe8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3fea:	b1cb      	cbz	r3, 4020 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x24>
	int32_t b1 = thread_1->base.prio;
    3fec:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3ff0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3ff4:	4286      	cmp	r6, r0
    3ff6:	d00f      	beq.n	4018 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x1c>
		return b2 - b1;
    3ff8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ffa:	2800      	cmp	r0, #0
    3ffc:	dd0c      	ble.n	4018 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x1c>
	sys_dnode_t *const prev = successor->prev;
    3ffe:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4000:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4004:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4006:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4008:	6890      	ldr	r0, [r2, #8]
    400a:	1b03      	subs	r3, r0, r4
    400c:	4258      	negs	r0, r3
    400e:	4158      	adcs	r0, r3
}
    4010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4014:	f7ff bf90 	b.w	3f38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4018:	42ab      	cmp	r3, r5
    401a:	d001      	beq.n	4020 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x24>
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	e7e4      	b.n	3fea <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    4020:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4024:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4026:	6254      	str	r4, [r2, #36]	; 0x24
}
    4028:	e7ee      	b.n	4008 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0xc>
    402a:	bf00      	nop
    402c:	200009e4 	.word	0x200009e4
    4030:	20000130 	.word	0x20000130
    4034:	0000995c 	.word	0x0000995c
    4038:	00008b51 	.word	0x00008b51
    403c:	200009c4 	.word	0x200009c4

00004040 <z_time_slice>:
{
    4040:	b570      	push	{r4, r5, r6, lr}
    4042:	4604      	mov	r4, r0
	__asm__ volatile(
    4044:	f04f 0320 	mov.w	r3, #32
    4048:	f3ef 8511 	mrs	r5, BASEPRI
    404c:	f383 8812 	msr	BASEPRI_MAX, r3
    4050:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4054:	4825      	ldr	r0, [pc, #148]	; (40ec <z_time_slice+0xac>)
    4056:	f7ff fbdf 	bl	3818 <z_spin_lock_valid>
    405a:	b940      	cbnz	r0, 406e <z_time_slice+0x2e>
    405c:	4924      	ldr	r1, [pc, #144]	; (40f0 <z_time_slice+0xb0>)
    405e:	4825      	ldr	r0, [pc, #148]	; (40f4 <z_time_slice+0xb4>)
    4060:	2281      	movs	r2, #129	; 0x81
    4062:	f003 fe3c 	bl	7cde <printk>
    4066:	2181      	movs	r1, #129	; 0x81
    4068:	4821      	ldr	r0, [pc, #132]	; (40f0 <z_time_slice+0xb0>)
    406a:	f003 fec3 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    406e:	481f      	ldr	r0, [pc, #124]	; (40ec <z_time_slice+0xac>)
    4070:	f7ff fbee 	bl	3850 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4074:	4b20      	ldr	r3, [pc, #128]	; (40f8 <z_time_slice+0xb8>)
    4076:	4a21      	ldr	r2, [pc, #132]	; (40fc <z_time_slice+0xbc>)
    4078:	6898      	ldr	r0, [r3, #8]
    407a:	6811      	ldr	r1, [r2, #0]
    407c:	4288      	cmp	r0, r1
    407e:	4619      	mov	r1, r3
    4080:	d113      	bne.n	40aa <z_time_slice+0x6a>
			z_reset_time_slice();
    4082:	f7ff fe29 	bl	3cd8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4086:	4819      	ldr	r0, [pc, #100]	; (40ec <z_time_slice+0xac>)
    4088:	f7ff fbd4 	bl	3834 <z_spin_unlock_valid>
    408c:	b940      	cbnz	r0, 40a0 <z_time_slice+0x60>
    408e:	4918      	ldr	r1, [pc, #96]	; (40f0 <z_time_slice+0xb0>)
    4090:	4818      	ldr	r0, [pc, #96]	; (40f4 <z_time_slice+0xb4>)
    4092:	22ac      	movs	r2, #172	; 0xac
    4094:	f003 fe23 	bl	7cde <printk>
    4098:	21ac      	movs	r1, #172	; 0xac
    409a:	4815      	ldr	r0, [pc, #84]	; (40f0 <z_time_slice+0xb0>)
    409c:	f003 feaa 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    40a0:	f385 8811 	msr	BASEPRI, r5
    40a4:	f3bf 8f6f 	isb	sy
}
    40a8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    40aa:	2600      	movs	r6, #0
    40ac:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    40ae:	4a14      	ldr	r2, [pc, #80]	; (4100 <z_time_slice+0xc0>)
    40b0:	6812      	ldr	r2, [r2, #0]
    40b2:	b1ba      	cbz	r2, 40e4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    40b4:	89c2      	ldrh	r2, [r0, #14]
    40b6:	2a7f      	cmp	r2, #127	; 0x7f
    40b8:	d814      	bhi.n	40e4 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    40ba:	7b42      	ldrb	r2, [r0, #13]
    40bc:	06d2      	lsls	r2, r2, #27
    40be:	d111      	bne.n	40e4 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    40c0:	4a10      	ldr	r2, [pc, #64]	; (4104 <z_time_slice+0xc4>)
    40c2:	f990 600e 	ldrsb.w	r6, [r0, #14]
    40c6:	6812      	ldr	r2, [r2, #0]
    40c8:	4296      	cmp	r6, r2
    40ca:	db0b      	blt.n	40e4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    40cc:	4a0e      	ldr	r2, [pc, #56]	; (4108 <z_time_slice+0xc8>)
    40ce:	4290      	cmp	r0, r2
    40d0:	d008      	beq.n	40e4 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    40d2:	691a      	ldr	r2, [r3, #16]
    40d4:	42a2      	cmp	r2, r4
    40d6:	dc02      	bgt.n	40de <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    40d8:	f7ff ff5e 	bl	3f98 <move_thread_to_end_of_prio_q>
    40dc:	e7d1      	b.n	4082 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    40de:	1b12      	subs	r2, r2, r4
    40e0:	611a      	str	r2, [r3, #16]
    40e2:	e7d0      	b.n	4086 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    40e4:	2300      	movs	r3, #0
    40e6:	610b      	str	r3, [r1, #16]
    40e8:	e7cd      	b.n	4086 <z_time_slice+0x46>
    40ea:	bf00      	nop
    40ec:	200009f8 	.word	0x200009f8
    40f0:	00008b2b 	.word	0x00008b2b
    40f4:	00008b51 	.word	0x00008b51
    40f8:	200009c4 	.word	0x200009c4
    40fc:	200009f4 	.word	0x200009f4
    4100:	20000a00 	.word	0x20000a00
    4104:	200009fc 	.word	0x200009fc
    4108:	20000130 	.word	0x20000130

0000410c <ready_thread>:
{
    410c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    410e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4112:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4114:	2a00      	cmp	r2, #0
    4116:	7b43      	ldrb	r3, [r0, #13]
    4118:	db3d      	blt.n	4196 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    411a:	06da      	lsls	r2, r3, #27
    411c:	d13b      	bne.n	4196 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
    411e:	6985      	ldr	r5, [r0, #24]
    4120:	2d00      	cmp	r5, #0
    4122:	d138      	bne.n	4196 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
    4124:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4128:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    412a:	4b1b      	ldr	r3, [pc, #108]	; (4198 <ready_thread+0x8c>)
    412c:	4298      	cmp	r0, r3
    412e:	d108      	bne.n	4142 <ready_thread+0x36>
    4130:	491a      	ldr	r1, [pc, #104]	; (419c <ready_thread+0x90>)
    4132:	481b      	ldr	r0, [pc, #108]	; (41a0 <ready_thread+0x94>)
    4134:	22ba      	movs	r2, #186	; 0xba
    4136:	f003 fdd2 	bl	7cde <printk>
    413a:	21ba      	movs	r1, #186	; 0xba
    413c:	4817      	ldr	r0, [pc, #92]	; (419c <ready_thread+0x90>)
    413e:	f003 fe59 	bl	7df4 <assert_post_action>
	return list->head == list;
    4142:	4918      	ldr	r1, [pc, #96]	; (41a4 <ready_thread+0x98>)
    4144:	460b      	mov	r3, r1
    4146:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    414a:	4298      	cmp	r0, r3
    414c:	bf18      	it	ne
    414e:	4605      	movne	r5, r0
    4150:	2d00      	cmp	r5, #0
    4152:	461a      	mov	r2, r3
    4154:	462b      	mov	r3, r5
    4156:	bf38      	it	cc
    4158:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    415a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    415c:	b1b3      	cbz	r3, 418c <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
    415e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4162:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4166:	4286      	cmp	r6, r0
    4168:	d00c      	beq.n	4184 <ready_thread+0x78>
		return b2 - b1;
    416a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    416c:	2800      	cmp	r0, #0
    416e:	dd09      	ble.n	4184 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    4170:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4172:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4176:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4178:	605c      	str	r4, [r3, #4]
		update_cache(0);
    417a:	2000      	movs	r0, #0
}
    417c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4180:	f7ff beda 	b.w	3f38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4184:	42ab      	cmp	r3, r5
    4186:	d001      	beq.n	418c <ready_thread+0x80>
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	e7e7      	b.n	415c <ready_thread+0x50>
	node->prev = tail;
    418c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4190:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4192:	624c      	str	r4, [r1, #36]	; 0x24
}
    4194:	e7f1      	b.n	417a <ready_thread+0x6e>
}
    4196:	bd70      	pop	{r4, r5, r6, pc}
    4198:	20000130 	.word	0x20000130
    419c:	0000995c 	.word	0x0000995c
    41a0:	00008b51 	.word	0x00008b51
    41a4:	200009c4 	.word	0x200009c4

000041a8 <z_ready_thread>:
{
    41a8:	b538      	push	{r3, r4, r5, lr}
    41aa:	4604      	mov	r4, r0
	__asm__ volatile(
    41ac:	f04f 0320 	mov.w	r3, #32
    41b0:	f3ef 8511 	mrs	r5, BASEPRI
    41b4:	f383 8812 	msr	BASEPRI_MAX, r3
    41b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    41bc:	4812      	ldr	r0, [pc, #72]	; (4208 <z_ready_thread+0x60>)
    41be:	f7ff fb2b 	bl	3818 <z_spin_lock_valid>
    41c2:	b940      	cbnz	r0, 41d6 <z_ready_thread+0x2e>
    41c4:	4911      	ldr	r1, [pc, #68]	; (420c <z_ready_thread+0x64>)
    41c6:	4812      	ldr	r0, [pc, #72]	; (4210 <z_ready_thread+0x68>)
    41c8:	2281      	movs	r2, #129	; 0x81
    41ca:	f003 fd88 	bl	7cde <printk>
    41ce:	2181      	movs	r1, #129	; 0x81
    41d0:	480e      	ldr	r0, [pc, #56]	; (420c <z_ready_thread+0x64>)
    41d2:	f003 fe0f 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    41d6:	480c      	ldr	r0, [pc, #48]	; (4208 <z_ready_thread+0x60>)
    41d8:	f7ff fb3a 	bl	3850 <z_spin_lock_set_owner>
			ready_thread(thread);
    41dc:	4620      	mov	r0, r4
    41de:	f7ff ff95 	bl	410c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41e2:	4809      	ldr	r0, [pc, #36]	; (4208 <z_ready_thread+0x60>)
    41e4:	f7ff fb26 	bl	3834 <z_spin_unlock_valid>
    41e8:	b940      	cbnz	r0, 41fc <z_ready_thread+0x54>
    41ea:	4908      	ldr	r1, [pc, #32]	; (420c <z_ready_thread+0x64>)
    41ec:	4808      	ldr	r0, [pc, #32]	; (4210 <z_ready_thread+0x68>)
    41ee:	22ac      	movs	r2, #172	; 0xac
    41f0:	f003 fd75 	bl	7cde <printk>
    41f4:	21ac      	movs	r1, #172	; 0xac
    41f6:	4805      	ldr	r0, [pc, #20]	; (420c <z_ready_thread+0x64>)
    41f8:	f003 fdfc 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    41fc:	f385 8811 	msr	BASEPRI, r5
    4200:	f3bf 8f6f 	isb	sy
}
    4204:	bd38      	pop	{r3, r4, r5, pc}
    4206:	bf00      	nop
    4208:	200009f8 	.word	0x200009f8
    420c:	00008b2b 	.word	0x00008b2b
    4210:	00008b51 	.word	0x00008b51

00004214 <z_sched_start>:
{
    4214:	b538      	push	{r3, r4, r5, lr}
    4216:	4604      	mov	r4, r0
	__asm__ volatile(
    4218:	f04f 0320 	mov.w	r3, #32
    421c:	f3ef 8511 	mrs	r5, BASEPRI
    4220:	f383 8812 	msr	BASEPRI_MAX, r3
    4224:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4228:	4818      	ldr	r0, [pc, #96]	; (428c <z_sched_start+0x78>)
    422a:	f7ff faf5 	bl	3818 <z_spin_lock_valid>
    422e:	b940      	cbnz	r0, 4242 <z_sched_start+0x2e>
    4230:	4917      	ldr	r1, [pc, #92]	; (4290 <z_sched_start+0x7c>)
    4232:	4818      	ldr	r0, [pc, #96]	; (4294 <z_sched_start+0x80>)
    4234:	2281      	movs	r2, #129	; 0x81
    4236:	f003 fd52 	bl	7cde <printk>
    423a:	2181      	movs	r1, #129	; 0x81
    423c:	4814      	ldr	r0, [pc, #80]	; (4290 <z_sched_start+0x7c>)
    423e:	f003 fdd9 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4242:	4812      	ldr	r0, [pc, #72]	; (428c <z_sched_start+0x78>)
    4244:	f7ff fb04 	bl	3850 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4248:	7b63      	ldrb	r3, [r4, #13]
    424a:	075a      	lsls	r2, r3, #29
    424c:	d411      	bmi.n	4272 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    424e:	480f      	ldr	r0, [pc, #60]	; (428c <z_sched_start+0x78>)
    4250:	f7ff faf0 	bl	3834 <z_spin_unlock_valid>
    4254:	b940      	cbnz	r0, 4268 <z_sched_start+0x54>
    4256:	490e      	ldr	r1, [pc, #56]	; (4290 <z_sched_start+0x7c>)
    4258:	480e      	ldr	r0, [pc, #56]	; (4294 <z_sched_start+0x80>)
    425a:	22ac      	movs	r2, #172	; 0xac
    425c:	f003 fd3f 	bl	7cde <printk>
    4260:	21ac      	movs	r1, #172	; 0xac
    4262:	480b      	ldr	r0, [pc, #44]	; (4290 <z_sched_start+0x7c>)
    4264:	f003 fdc6 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4268:	f385 8811 	msr	BASEPRI, r5
    426c:	f3bf 8f6f 	isb	sy
}
    4270:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4272:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4276:	4620      	mov	r0, r4
    4278:	7363      	strb	r3, [r4, #13]
    427a:	f7ff ff47 	bl	410c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    427e:	4629      	mov	r1, r5
}
    4280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4284:	4801      	ldr	r0, [pc, #4]	; (428c <z_sched_start+0x78>)
    4286:	f7ff bd91 	b.w	3dac <z_reschedule>
    428a:	bf00      	nop
    428c:	200009f8 	.word	0x200009f8
    4290:	00008b2b 	.word	0x00008b2b
    4294:	00008b51 	.word	0x00008b51

00004298 <z_thread_timeout>:
{
    4298:	b570      	push	{r4, r5, r6, lr}
    429a:	4604      	mov	r4, r0
	__asm__ volatile(
    429c:	f04f 0320 	mov.w	r3, #32
    42a0:	f3ef 8611 	mrs	r6, BASEPRI
    42a4:	f383 8812 	msr	BASEPRI_MAX, r3
    42a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    42ac:	481b      	ldr	r0, [pc, #108]	; (431c <z_thread_timeout+0x84>)
    42ae:	f7ff fab3 	bl	3818 <z_spin_lock_valid>
    42b2:	b940      	cbnz	r0, 42c6 <z_thread_timeout+0x2e>
    42b4:	491a      	ldr	r1, [pc, #104]	; (4320 <z_thread_timeout+0x88>)
    42b6:	481b      	ldr	r0, [pc, #108]	; (4324 <z_thread_timeout+0x8c>)
    42b8:	2281      	movs	r2, #129	; 0x81
    42ba:	f003 fd10 	bl	7cde <printk>
    42be:	2181      	movs	r1, #129	; 0x81
    42c0:	4817      	ldr	r0, [pc, #92]	; (4320 <z_thread_timeout+0x88>)
    42c2:	f003 fd97 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    42c6:	4815      	ldr	r0, [pc, #84]	; (431c <z_thread_timeout+0x84>)
    42c8:	f7ff fac2 	bl	3850 <z_spin_lock_set_owner>
		if (!killed) {
    42cc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    42d0:	f013 0f28 	tst.w	r3, #40	; 0x28
    42d4:	d110      	bne.n	42f8 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    42d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    42da:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    42de:	b113      	cbz	r3, 42e6 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    42e0:	4628      	mov	r0, r5
    42e2:	f7ff fe0b 	bl	3efc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    42e6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    42ea:	4628      	mov	r0, r5
    42ec:	f023 0314 	bic.w	r3, r3, #20
    42f0:	f804 3c0b 	strb.w	r3, [r4, #-11]
    42f4:	f7ff ff0a 	bl	410c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42f8:	4808      	ldr	r0, [pc, #32]	; (431c <z_thread_timeout+0x84>)
    42fa:	f7ff fa9b 	bl	3834 <z_spin_unlock_valid>
    42fe:	b940      	cbnz	r0, 4312 <z_thread_timeout+0x7a>
    4300:	4907      	ldr	r1, [pc, #28]	; (4320 <z_thread_timeout+0x88>)
    4302:	4808      	ldr	r0, [pc, #32]	; (4324 <z_thread_timeout+0x8c>)
    4304:	22ac      	movs	r2, #172	; 0xac
    4306:	f003 fcea 	bl	7cde <printk>
    430a:	21ac      	movs	r1, #172	; 0xac
    430c:	4804      	ldr	r0, [pc, #16]	; (4320 <z_thread_timeout+0x88>)
    430e:	f003 fd71 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4312:	f386 8811 	msr	BASEPRI, r6
    4316:	f3bf 8f6f 	isb	sy
}
    431a:	bd70      	pop	{r4, r5, r6, pc}
    431c:	200009f8 	.word	0x200009f8
    4320:	00008b2b 	.word	0x00008b2b
    4324:	00008b51 	.word	0x00008b51

00004328 <unready_thread>:
{
    4328:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    432a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    432e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4330:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4332:	7b43      	ldrb	r3, [r0, #13]
    4334:	da06      	bge.n	4344 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    433a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    433c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    433e:	4806      	ldr	r0, [pc, #24]	; (4358 <unready_thread+0x30>)
    4340:	f7ff fdbe 	bl	3ec0 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4344:	4b05      	ldr	r3, [pc, #20]	; (435c <unready_thread+0x34>)
    4346:	6898      	ldr	r0, [r3, #8]
    4348:	1b03      	subs	r3, r0, r4
    434a:	4258      	negs	r0, r3
    434c:	4158      	adcs	r0, r3
}
    434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4352:	f7ff bdf1 	b.w	3f38 <update_cache>
    4356:	bf00      	nop
    4358:	200009e4 	.word	0x200009e4
    435c:	200009c4 	.word	0x200009c4

00004360 <add_to_waitq_locked>:
{
    4360:	b538      	push	{r3, r4, r5, lr}
    4362:	4604      	mov	r4, r0
    4364:	460d      	mov	r5, r1
	unready_thread(thread);
    4366:	f7ff ffdf 	bl	4328 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    436a:	7b63      	ldrb	r3, [r4, #13]
    436c:	f043 0302 	orr.w	r3, r3, #2
    4370:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4372:	b315      	cbz	r5, 43ba <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4374:	4b17      	ldr	r3, [pc, #92]	; (43d4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    4376:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4378:	429c      	cmp	r4, r3
    437a:	d108      	bne.n	438e <add_to_waitq_locked+0x2e>
    437c:	4916      	ldr	r1, [pc, #88]	; (43d8 <add_to_waitq_locked+0x78>)
    437e:	4817      	ldr	r0, [pc, #92]	; (43dc <add_to_waitq_locked+0x7c>)
    4380:	22ba      	movs	r2, #186	; 0xba
    4382:	f003 fcac 	bl	7cde <printk>
    4386:	21ba      	movs	r1, #186	; 0xba
    4388:	4813      	ldr	r0, [pc, #76]	; (43d8 <add_to_waitq_locked+0x78>)
    438a:	f003 fd33 	bl	7df4 <assert_post_action>
	return list->head == list;
    438e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4390:	429d      	cmp	r5, r3
    4392:	bf08      	it	eq
    4394:	2300      	moveq	r3, #0
    4396:	2b00      	cmp	r3, #0
    4398:	bf38      	it	cc
    439a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    439c:	b19b      	cbz	r3, 43c6 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
    439e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    43a2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    43a6:	4291      	cmp	r1, r2
    43a8:	d008      	beq.n	43bc <add_to_waitq_locked+0x5c>
		return b2 - b1;
    43aa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    43ac:	2a00      	cmp	r2, #0
    43ae:	dd05      	ble.n	43bc <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
    43b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    43b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    43b8:	605c      	str	r4, [r3, #4]
}
    43ba:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    43bc:	686a      	ldr	r2, [r5, #4]
    43be:	4293      	cmp	r3, r2
    43c0:	d001      	beq.n	43c6 <add_to_waitq_locked+0x66>
    43c2:	681b      	ldr	r3, [r3, #0]
    43c4:	e7ea      	b.n	439c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    43c6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    43c8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    43cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    43ce:	606c      	str	r4, [r5, #4]
    43d0:	e7f3      	b.n	43ba <add_to_waitq_locked+0x5a>
    43d2:	bf00      	nop
    43d4:	20000130 	.word	0x20000130
    43d8:	0000995c 	.word	0x0000995c
    43dc:	00008b51 	.word	0x00008b51

000043e0 <pend>:
{
    43e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43e4:	4604      	mov	r4, r0
    43e6:	460d      	mov	r5, r1
    43e8:	4616      	mov	r6, r2
    43ea:	461f      	mov	r7, r3
	__asm__ volatile(
    43ec:	f04f 0320 	mov.w	r3, #32
    43f0:	f3ef 8811 	mrs	r8, BASEPRI
    43f4:	f383 8812 	msr	BASEPRI_MAX, r3
    43f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43fc:	481a      	ldr	r0, [pc, #104]	; (4468 <pend+0x88>)
    43fe:	f7ff fa0b 	bl	3818 <z_spin_lock_valid>
    4402:	b940      	cbnz	r0, 4416 <pend+0x36>
    4404:	4919      	ldr	r1, [pc, #100]	; (446c <pend+0x8c>)
    4406:	481a      	ldr	r0, [pc, #104]	; (4470 <pend+0x90>)
    4408:	2281      	movs	r2, #129	; 0x81
    440a:	f003 fc68 	bl	7cde <printk>
    440e:	2181      	movs	r1, #129	; 0x81
    4410:	4816      	ldr	r0, [pc, #88]	; (446c <pend+0x8c>)
    4412:	f003 fcef 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4416:	4814      	ldr	r0, [pc, #80]	; (4468 <pend+0x88>)
    4418:	f7ff fa1a 	bl	3850 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    441c:	4620      	mov	r0, r4
    441e:	4629      	mov	r1, r5
    4420:	f7ff ff9e 	bl	4360 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4424:	4810      	ldr	r0, [pc, #64]	; (4468 <pend+0x88>)
    4426:	f7ff fa05 	bl	3834 <z_spin_unlock_valid>
    442a:	b940      	cbnz	r0, 443e <pend+0x5e>
    442c:	490f      	ldr	r1, [pc, #60]	; (446c <pend+0x8c>)
    442e:	4810      	ldr	r0, [pc, #64]	; (4470 <pend+0x90>)
    4430:	22ac      	movs	r2, #172	; 0xac
    4432:	f003 fc54 	bl	7cde <printk>
    4436:	21ac      	movs	r1, #172	; 0xac
    4438:	480c      	ldr	r0, [pc, #48]	; (446c <pend+0x8c>)
    443a:	f003 fcdb 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    443e:	f388 8811 	msr	BASEPRI, r8
    4442:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4446:	1c7b      	adds	r3, r7, #1
    4448:	bf08      	it	eq
    444a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    444e:	d008      	beq.n	4462 <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4450:	4632      	mov	r2, r6
    4452:	463b      	mov	r3, r7
    4454:	f104 0018 	add.w	r0, r4, #24
    4458:	4906      	ldr	r1, [pc, #24]	; (4474 <pend+0x94>)
}
    445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    445e:	f000 bbff 	b.w	4c60 <z_add_timeout>
    4462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4466:	bf00      	nop
    4468:	200009f8 	.word	0x200009f8
    446c:	00008b2b 	.word	0x00008b2b
    4470:	00008b51 	.word	0x00008b51
    4474:	00004299 	.word	0x00004299

00004478 <z_pend_curr>:
{
    4478:	b538      	push	{r3, r4, r5, lr}
    447a:	4605      	mov	r5, r0
	pending_current = _current;
    447c:	4b0d      	ldr	r3, [pc, #52]	; (44b4 <z_pend_curr+0x3c>)
{
    447e:	460c      	mov	r4, r1
	pending_current = _current;
    4480:	6898      	ldr	r0, [r3, #8]
    4482:	4b0d      	ldr	r3, [pc, #52]	; (44b8 <z_pend_curr+0x40>)
{
    4484:	4611      	mov	r1, r2
	pending_current = _current;
    4486:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    448c:	f7ff ffa8 	bl	43e0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4490:	4628      	mov	r0, r5
    4492:	f7ff f9cf 	bl	3834 <z_spin_unlock_valid>
    4496:	b940      	cbnz	r0, 44aa <z_pend_curr+0x32>
    4498:	4908      	ldr	r1, [pc, #32]	; (44bc <z_pend_curr+0x44>)
    449a:	4809      	ldr	r0, [pc, #36]	; (44c0 <z_pend_curr+0x48>)
    449c:	22c3      	movs	r2, #195	; 0xc3
    449e:	f003 fc1e 	bl	7cde <printk>
    44a2:	21c3      	movs	r1, #195	; 0xc3
    44a4:	4805      	ldr	r0, [pc, #20]	; (44bc <z_pend_curr+0x44>)
    44a6:	f003 fca5 	bl	7df4 <assert_post_action>
    44aa:	4620      	mov	r0, r4
}
    44ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    44b0:	f7fd b996 	b.w	17e0 <arch_swap>
    44b4:	200009c4 	.word	0x200009c4
    44b8:	200009f4 	.word	0x200009f4
    44bc:	00008b2b 	.word	0x00008b2b
    44c0:	00008b51 	.word	0x00008b51

000044c4 <z_set_prio>:
{
    44c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c6:	4604      	mov	r4, r0
    44c8:	460e      	mov	r6, r1
	__asm__ volatile(
    44ca:	f04f 0320 	mov.w	r3, #32
    44ce:	f3ef 8711 	mrs	r7, BASEPRI
    44d2:	f383 8812 	msr	BASEPRI_MAX, r3
    44d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    44da:	4837      	ldr	r0, [pc, #220]	; (45b8 <z_set_prio+0xf4>)
    44dc:	f7ff f99c 	bl	3818 <z_spin_lock_valid>
    44e0:	b940      	cbnz	r0, 44f4 <z_set_prio+0x30>
    44e2:	4936      	ldr	r1, [pc, #216]	; (45bc <z_set_prio+0xf8>)
    44e4:	4836      	ldr	r0, [pc, #216]	; (45c0 <z_set_prio+0xfc>)
    44e6:	2281      	movs	r2, #129	; 0x81
    44e8:	f003 fbf9 	bl	7cde <printk>
    44ec:	2181      	movs	r1, #129	; 0x81
    44ee:	4833      	ldr	r0, [pc, #204]	; (45bc <z_set_prio+0xf8>)
    44f0:	f003 fc80 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    44f4:	4830      	ldr	r0, [pc, #192]	; (45b8 <z_set_prio+0xf4>)
    44f6:	f7ff f9ab 	bl	3850 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    44fa:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    44fc:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    44fe:	06da      	lsls	r2, r3, #27
    4500:	d156      	bne.n	45b0 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
    4502:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    4504:	2d00      	cmp	r5, #0
    4506:	d153      	bne.n	45b0 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    450c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    450e:	4621      	mov	r1, r4
    4510:	482c      	ldr	r0, [pc, #176]	; (45c4 <z_set_prio+0x100>)
    4512:	f7ff fcd5 	bl	3ec0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4516:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4518:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    451a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    451e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4520:	4b29      	ldr	r3, [pc, #164]	; (45c8 <z_set_prio+0x104>)
    4522:	429c      	cmp	r4, r3
    4524:	d108      	bne.n	4538 <z_set_prio+0x74>
    4526:	4929      	ldr	r1, [pc, #164]	; (45cc <z_set_prio+0x108>)
    4528:	4825      	ldr	r0, [pc, #148]	; (45c0 <z_set_prio+0xfc>)
    452a:	22ba      	movs	r2, #186	; 0xba
    452c:	f003 fbd7 	bl	7cde <printk>
    4530:	21ba      	movs	r1, #186	; 0xba
    4532:	4826      	ldr	r0, [pc, #152]	; (45cc <z_set_prio+0x108>)
    4534:	f003 fc5e 	bl	7df4 <assert_post_action>
	return list->head == list;
    4538:	4925      	ldr	r1, [pc, #148]	; (45d0 <z_set_prio+0x10c>)
    453a:	460b      	mov	r3, r1
    453c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4540:	4298      	cmp	r0, r3
    4542:	bf18      	it	ne
    4544:	4605      	movne	r5, r0
    4546:	2d00      	cmp	r5, #0
    4548:	461a      	mov	r2, r3
    454a:	462b      	mov	r3, r5
    454c:	bf38      	it	cc
    454e:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4550:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4552:	b343      	cbz	r3, 45a6 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
    4554:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4558:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    455c:	4286      	cmp	r6, r0
    455e:	d01e      	beq.n	459e <z_set_prio+0xda>
		return b2 - b1;
    4560:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4562:	2800      	cmp	r0, #0
    4564:	dd1b      	ble.n	459e <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
    4566:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4568:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    456c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    456e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4570:	2001      	movs	r0, #1
    4572:	f7ff fce1 	bl	3f38 <update_cache>
    4576:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4578:	480f      	ldr	r0, [pc, #60]	; (45b8 <z_set_prio+0xf4>)
    457a:	f7ff f95b 	bl	3834 <z_spin_unlock_valid>
    457e:	b940      	cbnz	r0, 4592 <z_set_prio+0xce>
    4580:	490e      	ldr	r1, [pc, #56]	; (45bc <z_set_prio+0xf8>)
    4582:	480f      	ldr	r0, [pc, #60]	; (45c0 <z_set_prio+0xfc>)
    4584:	22ac      	movs	r2, #172	; 0xac
    4586:	f003 fbaa 	bl	7cde <printk>
    458a:	21ac      	movs	r1, #172	; 0xac
    458c:	480b      	ldr	r0, [pc, #44]	; (45bc <z_set_prio+0xf8>)
    458e:	f003 fc31 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4592:	f387 8811 	msr	BASEPRI, r7
    4596:	f3bf 8f6f 	isb	sy
}
    459a:	4620      	mov	r0, r4
    459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    459e:	42ab      	cmp	r3, r5
    45a0:	d001      	beq.n	45a6 <z_set_prio+0xe2>
    45a2:	681b      	ldr	r3, [r3, #0]
    45a4:	e7d5      	b.n	4552 <z_set_prio+0x8e>
	node->prev = tail;
    45a6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    45aa:	602c      	str	r4, [r5, #0]
	list->tail = node;
    45ac:	624c      	str	r4, [r1, #36]	; 0x24
}
    45ae:	e7df      	b.n	4570 <z_set_prio+0xac>
			thread->base.prio = prio;
    45b0:	73a6      	strb	r6, [r4, #14]
    45b2:	2400      	movs	r4, #0
    45b4:	e7e0      	b.n	4578 <z_set_prio+0xb4>
    45b6:	bf00      	nop
    45b8:	200009f8 	.word	0x200009f8
    45bc:	00008b2b 	.word	0x00008b2b
    45c0:	00008b51 	.word	0x00008b51
    45c4:	200009e4 	.word	0x200009e4
    45c8:	20000130 	.word	0x20000130
    45cc:	0000995c 	.word	0x0000995c
    45d0:	200009c4 	.word	0x200009c4

000045d4 <z_impl_k_thread_suspend>:
{
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    45d8:	3018      	adds	r0, #24
    45da:	f000 fbfb 	bl	4dd4 <z_abort_timeout>
	__asm__ volatile(
    45de:	f04f 0320 	mov.w	r3, #32
    45e2:	f3ef 8611 	mrs	r6, BASEPRI
    45e6:	f383 8812 	msr	BASEPRI_MAX, r3
    45ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45ee:	4820      	ldr	r0, [pc, #128]	; (4670 <z_impl_k_thread_suspend+0x9c>)
    45f0:	f7ff f912 	bl	3818 <z_spin_lock_valid>
    45f4:	b940      	cbnz	r0, 4608 <z_impl_k_thread_suspend+0x34>
    45f6:	491f      	ldr	r1, [pc, #124]	; (4674 <z_impl_k_thread_suspend+0xa0>)
    45f8:	481f      	ldr	r0, [pc, #124]	; (4678 <z_impl_k_thread_suspend+0xa4>)
    45fa:	2281      	movs	r2, #129	; 0x81
    45fc:	f003 fb6f 	bl	7cde <printk>
    4600:	2181      	movs	r1, #129	; 0x81
    4602:	481c      	ldr	r0, [pc, #112]	; (4674 <z_impl_k_thread_suspend+0xa0>)
    4604:	f003 fbf6 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4608:	4819      	ldr	r0, [pc, #100]	; (4670 <z_impl_k_thread_suspend+0x9c>)
    460a:	f7ff f921 	bl	3850 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    460e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4612:	7b63      	ldrb	r3, [r4, #13]
    4614:	2a00      	cmp	r2, #0
    4616:	da06      	bge.n	4626 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    461c:	4621      	mov	r1, r4
    461e:	4817      	ldr	r0, [pc, #92]	; (467c <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4620:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4622:	f7ff fc4d 	bl	3ec0 <z_priq_dumb_remove>
		update_cache(thread == _current);
    4626:	4d16      	ldr	r5, [pc, #88]	; (4680 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4628:	7b63      	ldrb	r3, [r4, #13]
    462a:	68a8      	ldr	r0, [r5, #8]
    462c:	f043 0310 	orr.w	r3, r3, #16
    4630:	7363      	strb	r3, [r4, #13]
    4632:	1b03      	subs	r3, r0, r4
    4634:	4258      	negs	r0, r3
    4636:	4158      	adcs	r0, r3
    4638:	f7ff fc7e 	bl	3f38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    463c:	480c      	ldr	r0, [pc, #48]	; (4670 <z_impl_k_thread_suspend+0x9c>)
    463e:	f7ff f8f9 	bl	3834 <z_spin_unlock_valid>
    4642:	b940      	cbnz	r0, 4656 <z_impl_k_thread_suspend+0x82>
    4644:	490b      	ldr	r1, [pc, #44]	; (4674 <z_impl_k_thread_suspend+0xa0>)
    4646:	480c      	ldr	r0, [pc, #48]	; (4678 <z_impl_k_thread_suspend+0xa4>)
    4648:	22ac      	movs	r2, #172	; 0xac
    464a:	f003 fb48 	bl	7cde <printk>
    464e:	21ac      	movs	r1, #172	; 0xac
    4650:	4808      	ldr	r0, [pc, #32]	; (4674 <z_impl_k_thread_suspend+0xa0>)
    4652:	f003 fbcf 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4656:	f386 8811 	msr	BASEPRI, r6
    465a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    465e:	68ab      	ldr	r3, [r5, #8]
    4660:	42a3      	cmp	r3, r4
    4662:	d103      	bne.n	466c <z_impl_k_thread_suspend+0x98>
}
    4664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4668:	f003 be98 	b.w	839c <z_reschedule_unlocked>
}
    466c:	bd70      	pop	{r4, r5, r6, pc}
    466e:	bf00      	nop
    4670:	200009f8 	.word	0x200009f8
    4674:	00008b2b 	.word	0x00008b2b
    4678:	00008b51 	.word	0x00008b51
    467c:	200009e4 	.word	0x200009e4
    4680:	200009c4 	.word	0x200009c4

00004684 <k_sched_unlock>:
{
    4684:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4686:	f04f 0320 	mov.w	r3, #32
    468a:	f3ef 8511 	mrs	r5, BASEPRI
    468e:	f383 8812 	msr	BASEPRI_MAX, r3
    4692:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4696:	4824      	ldr	r0, [pc, #144]	; (4728 <k_sched_unlock+0xa4>)
    4698:	f7ff f8be 	bl	3818 <z_spin_lock_valid>
    469c:	b940      	cbnz	r0, 46b0 <k_sched_unlock+0x2c>
    469e:	4923      	ldr	r1, [pc, #140]	; (472c <k_sched_unlock+0xa8>)
    46a0:	4823      	ldr	r0, [pc, #140]	; (4730 <k_sched_unlock+0xac>)
    46a2:	2281      	movs	r2, #129	; 0x81
    46a4:	f003 fb1b 	bl	7cde <printk>
    46a8:	2181      	movs	r1, #129	; 0x81
    46aa:	4820      	ldr	r0, [pc, #128]	; (472c <k_sched_unlock+0xa8>)
    46ac:	f003 fba2 	bl	7df4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    46b0:	4c20      	ldr	r4, [pc, #128]	; (4734 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    46b2:	481d      	ldr	r0, [pc, #116]	; (4728 <k_sched_unlock+0xa4>)
    46b4:	f7ff f8cc 	bl	3850 <z_spin_lock_set_owner>
    46b8:	68a2      	ldr	r2, [r4, #8]
    46ba:	7bd2      	ldrb	r2, [r2, #15]
    46bc:	b952      	cbnz	r2, 46d4 <k_sched_unlock+0x50>
    46be:	491e      	ldr	r1, [pc, #120]	; (4738 <k_sched_unlock+0xb4>)
    46c0:	481b      	ldr	r0, [pc, #108]	; (4730 <k_sched_unlock+0xac>)
    46c2:	f240 3285 	movw	r2, #901	; 0x385
    46c6:	f003 fb0a 	bl	7cde <printk>
    46ca:	f240 3185 	movw	r1, #901	; 0x385
    46ce:	481a      	ldr	r0, [pc, #104]	; (4738 <k_sched_unlock+0xb4>)
    46d0:	f003 fb90 	bl	7df4 <assert_post_action>
    46d4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    46d8:	b153      	cbz	r3, 46f0 <k_sched_unlock+0x6c>
    46da:	4917      	ldr	r1, [pc, #92]	; (4738 <k_sched_unlock+0xb4>)
    46dc:	4814      	ldr	r0, [pc, #80]	; (4730 <k_sched_unlock+0xac>)
    46de:	f240 3286 	movw	r2, #902	; 0x386
    46e2:	f003 fafc 	bl	7cde <printk>
    46e6:	f240 3186 	movw	r1, #902	; 0x386
    46ea:	4813      	ldr	r0, [pc, #76]	; (4738 <k_sched_unlock+0xb4>)
    46ec:	f003 fb82 	bl	7df4 <assert_post_action>
		++_current->base.sched_locked;
    46f0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    46f2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    46f4:	7bd3      	ldrb	r3, [r2, #15]
    46f6:	3301      	adds	r3, #1
    46f8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    46fa:	f7ff fc1d 	bl	3f38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46fe:	480a      	ldr	r0, [pc, #40]	; (4728 <k_sched_unlock+0xa4>)
    4700:	f7ff f898 	bl	3834 <z_spin_unlock_valid>
    4704:	b940      	cbnz	r0, 4718 <k_sched_unlock+0x94>
    4706:	4909      	ldr	r1, [pc, #36]	; (472c <k_sched_unlock+0xa8>)
    4708:	4809      	ldr	r0, [pc, #36]	; (4730 <k_sched_unlock+0xac>)
    470a:	22ac      	movs	r2, #172	; 0xac
    470c:	f003 fae7 	bl	7cde <printk>
    4710:	21ac      	movs	r1, #172	; 0xac
    4712:	4806      	ldr	r0, [pc, #24]	; (472c <k_sched_unlock+0xa8>)
    4714:	f003 fb6e 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4718:	f385 8811 	msr	BASEPRI, r5
    471c:	f3bf 8f6f 	isb	sy
}
    4720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4724:	f003 be3a 	b.w	839c <z_reschedule_unlocked>
    4728:	200009f8 	.word	0x200009f8
    472c:	00008b2b 	.word	0x00008b2b
    4730:	00008b51 	.word	0x00008b51
    4734:	200009c4 	.word	0x200009c4
    4738:	0000995c 	.word	0x0000995c

0000473c <z_unpend_first_thread>:
{
    473c:	b538      	push	{r3, r4, r5, lr}
    473e:	4604      	mov	r4, r0
	__asm__ volatile(
    4740:	f04f 0320 	mov.w	r3, #32
    4744:	f3ef 8511 	mrs	r5, BASEPRI
    4748:	f383 8812 	msr	BASEPRI_MAX, r3
    474c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4750:	4816      	ldr	r0, [pc, #88]	; (47ac <z_unpend_first_thread+0x70>)
    4752:	f7ff f861 	bl	3818 <z_spin_lock_valid>
    4756:	b940      	cbnz	r0, 476a <z_unpend_first_thread+0x2e>
    4758:	4915      	ldr	r1, [pc, #84]	; (47b0 <z_unpend_first_thread+0x74>)
    475a:	4816      	ldr	r0, [pc, #88]	; (47b4 <z_unpend_first_thread+0x78>)
    475c:	2281      	movs	r2, #129	; 0x81
    475e:	f003 fabe 	bl	7cde <printk>
    4762:	2181      	movs	r1, #129	; 0x81
    4764:	4812      	ldr	r0, [pc, #72]	; (47b0 <z_unpend_first_thread+0x74>)
    4766:	f003 fb45 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    476a:	4810      	ldr	r0, [pc, #64]	; (47ac <z_unpend_first_thread+0x70>)
    476c:	f7ff f870 	bl	3850 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4770:	4620      	mov	r0, r4
    4772:	f003 fe1d 	bl	83b0 <z_priq_dumb_best>
		if (thread != NULL) {
    4776:	4604      	mov	r4, r0
    4778:	b128      	cbz	r0, 4786 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    477a:	f7ff fbbf 	bl	3efc <unpend_thread_no_timeout>
    477e:	f104 0018 	add.w	r0, r4, #24
    4782:	f000 fb27 	bl	4dd4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4786:	4809      	ldr	r0, [pc, #36]	; (47ac <z_unpend_first_thread+0x70>)
    4788:	f7ff f854 	bl	3834 <z_spin_unlock_valid>
    478c:	b940      	cbnz	r0, 47a0 <z_unpend_first_thread+0x64>
    478e:	4908      	ldr	r1, [pc, #32]	; (47b0 <z_unpend_first_thread+0x74>)
    4790:	4808      	ldr	r0, [pc, #32]	; (47b4 <z_unpend_first_thread+0x78>)
    4792:	22ac      	movs	r2, #172	; 0xac
    4794:	f003 faa3 	bl	7cde <printk>
    4798:	21ac      	movs	r1, #172	; 0xac
    479a:	4805      	ldr	r0, [pc, #20]	; (47b0 <z_unpend_first_thread+0x74>)
    479c:	f003 fb2a 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    47a0:	f385 8811 	msr	BASEPRI, r5
    47a4:	f3bf 8f6f 	isb	sy
}
    47a8:	4620      	mov	r0, r4
    47aa:	bd38      	pop	{r3, r4, r5, pc}
    47ac:	200009f8 	.word	0x200009f8
    47b0:	00008b2b 	.word	0x00008b2b
    47b4:	00008b51 	.word	0x00008b51

000047b8 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    47b8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    47ba:	4b04      	ldr	r3, [pc, #16]	; (47cc <z_sched_init+0x14>)
    47bc:	4608      	mov	r0, r1
    47be:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    47c2:	e9c3 2208 	strd	r2, r2, [r3, #32]
    47c6:	f7ff ba9d 	b.w	3d04 <k_sched_time_slice_set>
    47ca:	bf00      	nop
    47cc:	200009c4 	.word	0x200009c4

000047d0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    47d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47d2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    47d6:	b153      	cbz	r3, 47ee <z_impl_k_yield+0x1e>
    47d8:	4939      	ldr	r1, [pc, #228]	; (48c0 <z_impl_k_yield+0xf0>)
    47da:	483a      	ldr	r0, [pc, #232]	; (48c4 <z_impl_k_yield+0xf4>)
    47dc:	f240 42dc 	movw	r2, #1244	; 0x4dc
    47e0:	f003 fa7d 	bl	7cde <printk>
    47e4:	f240 41dc 	movw	r1, #1244	; 0x4dc
    47e8:	4835      	ldr	r0, [pc, #212]	; (48c0 <z_impl_k_yield+0xf0>)
    47ea:	f003 fb03 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    47ee:	f04f 0320 	mov.w	r3, #32
    47f2:	f3ef 8611 	mrs	r6, BASEPRI
    47f6:	f383 8812 	msr	BASEPRI_MAX, r3
    47fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47fe:	4832      	ldr	r0, [pc, #200]	; (48c8 <z_impl_k_yield+0xf8>)
    4800:	f7ff f80a 	bl	3818 <z_spin_lock_valid>
    4804:	b940      	cbnz	r0, 4818 <z_impl_k_yield+0x48>
    4806:	4931      	ldr	r1, [pc, #196]	; (48cc <z_impl_k_yield+0xfc>)
    4808:	482e      	ldr	r0, [pc, #184]	; (48c4 <z_impl_k_yield+0xf4>)
    480a:	2281      	movs	r2, #129	; 0x81
    480c:	f003 fa67 	bl	7cde <printk>
    4810:	2181      	movs	r1, #129	; 0x81
    4812:	482e      	ldr	r0, [pc, #184]	; (48cc <z_impl_k_yield+0xfc>)
    4814:	f003 faee 	bl	7df4 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4818:	4d2d      	ldr	r5, [pc, #180]	; (48d0 <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
    481a:	482b      	ldr	r0, [pc, #172]	; (48c8 <z_impl_k_yield+0xf8>)
    481c:	f7ff f818 	bl	3850 <z_spin_lock_set_owner>
    4820:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
    4822:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4826:	7b4b      	ldrb	r3, [r1, #13]
    4828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    482c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    482e:	f7ff fb47 	bl	3ec0 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    4832:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4834:	7b63      	ldrb	r3, [r4, #13]
    4836:	f063 037f 	orn	r3, r3, #127	; 0x7f
    483a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    483c:	4b25      	ldr	r3, [pc, #148]	; (48d4 <z_impl_k_yield+0x104>)
    483e:	429c      	cmp	r4, r3
    4840:	d108      	bne.n	4854 <z_impl_k_yield+0x84>
    4842:	491f      	ldr	r1, [pc, #124]	; (48c0 <z_impl_k_yield+0xf0>)
    4844:	481f      	ldr	r0, [pc, #124]	; (48c4 <z_impl_k_yield+0xf4>)
    4846:	22ba      	movs	r2, #186	; 0xba
    4848:	f003 fa49 	bl	7cde <printk>
    484c:	21ba      	movs	r1, #186	; 0xba
    484e:	481c      	ldr	r0, [pc, #112]	; (48c0 <z_impl_k_yield+0xf0>)
    4850:	f003 fad0 	bl	7df4 <assert_post_action>
	return list->head == list;
    4854:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4856:	4820      	ldr	r0, [pc, #128]	; (48d8 <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4858:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    485a:	4283      	cmp	r3, r0
    485c:	bf08      	it	eq
    485e:	2300      	moveq	r3, #0
    4860:	2b00      	cmp	r3, #0
    4862:	bf38      	it	cc
    4864:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4866:	b333      	cbz	r3, 48b6 <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
    4868:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    486c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4870:	4297      	cmp	r7, r2
    4872:	d01c      	beq.n	48ae <z_impl_k_yield+0xde>
		return b2 - b1;
    4874:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4876:	2a00      	cmp	r2, #0
    4878:	dd19      	ble.n	48ae <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
    487a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    487c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4880:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4882:	605c      	str	r4, [r3, #4]
	update_cache(1);
    4884:	2001      	movs	r0, #1
    4886:	f7ff fb57 	bl	3f38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    488a:	480f      	ldr	r0, [pc, #60]	; (48c8 <z_impl_k_yield+0xf8>)
    488c:	f7fe ffd2 	bl	3834 <z_spin_unlock_valid>
    4890:	b940      	cbnz	r0, 48a4 <z_impl_k_yield+0xd4>
    4892:	490e      	ldr	r1, [pc, #56]	; (48cc <z_impl_k_yield+0xfc>)
    4894:	480b      	ldr	r0, [pc, #44]	; (48c4 <z_impl_k_yield+0xf4>)
    4896:	22c3      	movs	r2, #195	; 0xc3
    4898:	f003 fa21 	bl	7cde <printk>
    489c:	21c3      	movs	r1, #195	; 0xc3
    489e:	480b      	ldr	r0, [pc, #44]	; (48cc <z_impl_k_yield+0xfc>)
    48a0:	f003 faa8 	bl	7df4 <assert_post_action>
    48a4:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    48a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    48aa:	f7fc bf99 	b.w	17e0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    48ae:	428b      	cmp	r3, r1
    48b0:	d001      	beq.n	48b6 <z_impl_k_yield+0xe6>
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	e7d7      	b.n	4866 <z_impl_k_yield+0x96>
	node->prev = tail;
    48b6:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    48ba:	600c      	str	r4, [r1, #0]
	list->tail = node;
    48bc:	626c      	str	r4, [r5, #36]	; 0x24
}
    48be:	e7e1      	b.n	4884 <z_impl_k_yield+0xb4>
    48c0:	0000995c 	.word	0x0000995c
    48c4:	00008b51 	.word	0x00008b51
    48c8:	200009f8 	.word	0x200009f8
    48cc:	00008b2b 	.word	0x00008b2b
    48d0:	200009c4 	.word	0x200009c4
    48d4:	20000130 	.word	0x20000130
    48d8:	200009e4 	.word	0x200009e4

000048dc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    48dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48e0:	4604      	mov	r4, r0
    48e2:	460d      	mov	r5, r1
    48e4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    48e8:	b153      	cbz	r3, 4900 <z_tick_sleep+0x24>
    48ea:	493c      	ldr	r1, [pc, #240]	; (49dc <z_tick_sleep+0x100>)
    48ec:	483c      	ldr	r0, [pc, #240]	; (49e0 <z_tick_sleep+0x104>)
    48ee:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    48f2:	f003 f9f4 	bl	7cde <printk>
    48f6:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    48fa:	4838      	ldr	r0, [pc, #224]	; (49dc <z_tick_sleep+0x100>)
    48fc:	f003 fa7a 	bl	7df4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4900:	ea54 0305 	orrs.w	r3, r4, r5
    4904:	d104      	bne.n	4910 <z_tick_sleep+0x34>
	z_impl_k_yield();
    4906:	f7ff ff63 	bl	47d0 <z_impl_k_yield>
		k_yield();
		return 0;
    490a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    4910:	f06f 0301 	mvn.w	r3, #1
    4914:	1b1e      	subs	r6, r3, r4
    4916:	f04f 33ff 	mov.w	r3, #4294967295
    491a:	eb63 0705 	sbc.w	r7, r3, r5
    491e:	2e01      	cmp	r6, #1
    4920:	f177 0300 	sbcs.w	r3, r7, #0
    4924:	da56      	bge.n	49d4 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4926:	f003 fd4d 	bl	83c4 <sys_clock_tick_get_32>
    492a:	1906      	adds	r6, r0, r4
    492c:	f04f 0320 	mov.w	r3, #32
    4930:	f3ef 8811 	mrs	r8, BASEPRI
    4934:	f383 8812 	msr	BASEPRI_MAX, r3
    4938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    493c:	4829      	ldr	r0, [pc, #164]	; (49e4 <z_tick_sleep+0x108>)
    493e:	f7fe ff6b 	bl	3818 <z_spin_lock_valid>
    4942:	b940      	cbnz	r0, 4956 <z_tick_sleep+0x7a>
    4944:	4928      	ldr	r1, [pc, #160]	; (49e8 <z_tick_sleep+0x10c>)
    4946:	4826      	ldr	r0, [pc, #152]	; (49e0 <z_tick_sleep+0x104>)
    4948:	2281      	movs	r2, #129	; 0x81
    494a:	f003 f9c8 	bl	7cde <printk>
    494e:	2181      	movs	r1, #129	; 0x81
    4950:	4825      	ldr	r0, [pc, #148]	; (49e8 <z_tick_sleep+0x10c>)
    4952:	f003 fa4f 	bl	7df4 <assert_post_action>
	pending_current = _current;
    4956:	4f25      	ldr	r7, [pc, #148]	; (49ec <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
    4958:	4822      	ldr	r0, [pc, #136]	; (49e4 <z_tick_sleep+0x108>)
    495a:	f7fe ff79 	bl	3850 <z_spin_lock_set_owner>
    495e:	68b8      	ldr	r0, [r7, #8]
    4960:	4b23      	ldr	r3, [pc, #140]	; (49f0 <z_tick_sleep+0x114>)
    4962:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4964:	f7ff fce0 	bl	4328 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4968:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    496a:	4622      	mov	r2, r4
    496c:	462b      	mov	r3, r5
    496e:	3018      	adds	r0, #24
    4970:	4920      	ldr	r1, [pc, #128]	; (49f4 <z_tick_sleep+0x118>)
    4972:	f000 f975 	bl	4c60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4976:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4978:	481a      	ldr	r0, [pc, #104]	; (49e4 <z_tick_sleep+0x108>)
    497a:	7b53      	ldrb	r3, [r2, #13]
    497c:	f043 0310 	orr.w	r3, r3, #16
    4980:	7353      	strb	r3, [r2, #13]
    4982:	f7fe ff57 	bl	3834 <z_spin_unlock_valid>
    4986:	b940      	cbnz	r0, 499a <z_tick_sleep+0xbe>
    4988:	4917      	ldr	r1, [pc, #92]	; (49e8 <z_tick_sleep+0x10c>)
    498a:	4815      	ldr	r0, [pc, #84]	; (49e0 <z_tick_sleep+0x104>)
    498c:	22c3      	movs	r2, #195	; 0xc3
    498e:	f003 f9a6 	bl	7cde <printk>
    4992:	21c3      	movs	r1, #195	; 0xc3
    4994:	4814      	ldr	r0, [pc, #80]	; (49e8 <z_tick_sleep+0x10c>)
    4996:	f003 fa2d 	bl	7df4 <assert_post_action>
    499a:	4640      	mov	r0, r8
    499c:	f7fc ff20 	bl	17e0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    49a0:	68bb      	ldr	r3, [r7, #8]
    49a2:	7b5b      	ldrb	r3, [r3, #13]
    49a4:	06db      	lsls	r3, r3, #27
    49a6:	d50a      	bpl.n	49be <z_tick_sleep+0xe2>
    49a8:	490c      	ldr	r1, [pc, #48]	; (49dc <z_tick_sleep+0x100>)
    49aa:	480d      	ldr	r0, [pc, #52]	; (49e0 <z_tick_sleep+0x104>)
    49ac:	f240 5219 	movw	r2, #1305	; 0x519
    49b0:	f003 f995 	bl	7cde <printk>
    49b4:	f240 5119 	movw	r1, #1305	; 0x519
    49b8:	4808      	ldr	r0, [pc, #32]	; (49dc <z_tick_sleep+0x100>)
    49ba:	f003 fa1b 	bl	7df4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    49be:	f003 fd01 	bl	83c4 <sys_clock_tick_get_32>
    49c2:	1a30      	subs	r0, r6, r0
    49c4:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    49c8:	2801      	cmp	r0, #1
    49ca:	f171 0300 	sbcs.w	r3, r1, #0
    49ce:	bfb8      	it	lt
    49d0:	2000      	movlt	r0, #0
    49d2:	e79b      	b.n	490c <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    49d4:	f06f 0601 	mvn.w	r6, #1
    49d8:	1b36      	subs	r6, r6, r4
    49da:	e7a7      	b.n	492c <z_tick_sleep+0x50>
    49dc:	0000995c 	.word	0x0000995c
    49e0:	00008b51 	.word	0x00008b51
    49e4:	200009f8 	.word	0x200009f8
    49e8:	00008b2b 	.word	0x00008b2b
    49ec:	200009c4 	.word	0x200009c4
    49f0:	200009f4 	.word	0x200009f4
    49f4:	00004299 	.word	0x00004299

000049f8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    49f8:	b538      	push	{r3, r4, r5, lr}
    49fa:	4604      	mov	r4, r0
    49fc:	460d      	mov	r5, r1
    49fe:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4a02:	b153      	cbz	r3, 4a1a <z_impl_k_sleep+0x22>
    4a04:	4911      	ldr	r1, [pc, #68]	; (4a4c <z_impl_k_sleep+0x54>)
    4a06:	4812      	ldr	r0, [pc, #72]	; (4a50 <z_impl_k_sleep+0x58>)
    4a08:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    4a0c:	f003 f967 	bl	7cde <printk>
    4a10:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    4a14:	480d      	ldr	r0, [pc, #52]	; (4a4c <z_impl_k_sleep+0x54>)
    4a16:	f003 f9ed 	bl	7df4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4a1a:	1c6b      	adds	r3, r5, #1
    4a1c:	bf08      	it	eq
    4a1e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4a22:	d106      	bne.n	4a32 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    4a24:	4b0b      	ldr	r3, [pc, #44]	; (4a54 <z_impl_k_sleep+0x5c>)
    4a26:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4a28:	f7ff fdd4 	bl	45d4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4a2c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4a30:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    4a32:	4620      	mov	r0, r4
    4a34:	4629      	mov	r1, r5
    4a36:	f7ff ff51 	bl	48dc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    4a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4a3e:	fb80 3403 	smull	r3, r4, r0, r3
    4a42:	0bd8      	lsrs	r0, r3, #15
    4a44:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    4a48:	e7f2      	b.n	4a30 <z_impl_k_sleep+0x38>
    4a4a:	bf00      	nop
    4a4c:	0000995c 	.word	0x0000995c
    4a50:	00008b51 	.word	0x00008b51
    4a54:	200009c4 	.word	0x200009c4

00004a58 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4a58:	4b01      	ldr	r3, [pc, #4]	; (4a60 <z_impl_z_current_get+0x8>)
    4a5a:	6898      	ldr	r0, [r3, #8]
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop
    4a60:	200009c4 	.word	0x200009c4

00004a64 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a68:	4604      	mov	r4, r0
    4a6a:	f04f 0320 	mov.w	r3, #32
    4a6e:	f3ef 8611 	mrs	r6, BASEPRI
    4a72:	f383 8812 	msr	BASEPRI_MAX, r3
    4a76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a7a:	483e      	ldr	r0, [pc, #248]	; (4b74 <z_thread_abort+0x110>)
    4a7c:	f7fe fecc 	bl	3818 <z_spin_lock_valid>
    4a80:	b940      	cbnz	r0, 4a94 <z_thread_abort+0x30>
    4a82:	493d      	ldr	r1, [pc, #244]	; (4b78 <z_thread_abort+0x114>)
    4a84:	483d      	ldr	r0, [pc, #244]	; (4b7c <z_thread_abort+0x118>)
    4a86:	2281      	movs	r2, #129	; 0x81
    4a88:	f003 f929 	bl	7cde <printk>
    4a8c:	2181      	movs	r1, #129	; 0x81
    4a8e:	483a      	ldr	r0, [pc, #232]	; (4b78 <z_thread_abort+0x114>)
    4a90:	f003 f9b0 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a94:	4837      	ldr	r0, [pc, #220]	; (4b74 <z_thread_abort+0x110>)
    4a96:	f7fe fedb 	bl	3850 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4a9a:	7b63      	ldrb	r3, [r4, #13]
    4a9c:	071a      	lsls	r2, r3, #28
    4a9e:	d512      	bpl.n	4ac6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4aa0:	4834      	ldr	r0, [pc, #208]	; (4b74 <z_thread_abort+0x110>)
    4aa2:	f7fe fec7 	bl	3834 <z_spin_unlock_valid>
    4aa6:	b940      	cbnz	r0, 4aba <z_thread_abort+0x56>
    4aa8:	4933      	ldr	r1, [pc, #204]	; (4b78 <z_thread_abort+0x114>)
    4aaa:	4834      	ldr	r0, [pc, #208]	; (4b7c <z_thread_abort+0x118>)
    4aac:	22ac      	movs	r2, #172	; 0xac
    4aae:	f003 f916 	bl	7cde <printk>
    4ab2:	21ac      	movs	r1, #172	; 0xac
    4ab4:	4830      	ldr	r0, [pc, #192]	; (4b78 <z_thread_abort+0x114>)
    4ab6:	f003 f99d 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4aba:	f386 8811 	msr	BASEPRI, r6
    4abe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ac6:	f023 0220 	bic.w	r2, r3, #32
    4aca:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4ace:	09d2      	lsrs	r2, r2, #7
    4ad0:	d138      	bne.n	4b44 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ad2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    4ad4:	68a3      	ldr	r3, [r4, #8]
    4ad6:	b113      	cbz	r3, 4ade <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    4ad8:	4620      	mov	r0, r4
    4ada:	f7ff fa0f 	bl	3efc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4ade:	f104 0018 	add.w	r0, r4, #24
    4ae2:	f000 f977 	bl	4dd4 <z_abort_timeout>
    4ae6:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4aea:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4aee:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4af0:	42bd      	cmp	r5, r7
    4af2:	d000      	beq.n	4af6 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4af4:	bb85      	cbnz	r5, 4b58 <z_thread_abort+0xf4>
		update_cache(1);
    4af6:	2001      	movs	r0, #1
    4af8:	f7ff fa1e 	bl	3f38 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4afc:	4b20      	ldr	r3, [pc, #128]	; (4b80 <z_thread_abort+0x11c>)
    4afe:	689b      	ldr	r3, [r3, #8]
    4b00:	42a3      	cmp	r3, r4
    4b02:	d1cd      	bne.n	4aa0 <z_thread_abort+0x3c>
    4b04:	f3ef 8305 	mrs	r3, IPSR
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d1c9      	bne.n	4aa0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b0c:	4819      	ldr	r0, [pc, #100]	; (4b74 <z_thread_abort+0x110>)
    4b0e:	f7fe fe91 	bl	3834 <z_spin_unlock_valid>
    4b12:	b940      	cbnz	r0, 4b26 <z_thread_abort+0xc2>
    4b14:	4918      	ldr	r1, [pc, #96]	; (4b78 <z_thread_abort+0x114>)
    4b16:	4819      	ldr	r0, [pc, #100]	; (4b7c <z_thread_abort+0x118>)
    4b18:	22c3      	movs	r2, #195	; 0xc3
    4b1a:	f003 f8e0 	bl	7cde <printk>
    4b1e:	21c3      	movs	r1, #195	; 0xc3
    4b20:	4815      	ldr	r0, [pc, #84]	; (4b78 <z_thread_abort+0x114>)
    4b22:	f003 f967 	bl	7df4 <assert_post_action>
    4b26:	4630      	mov	r0, r6
    4b28:	f7fc fe5a 	bl	17e0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    4b2c:	f240 624b 	movw	r2, #1611	; 0x64b
    4b30:	4914      	ldr	r1, [pc, #80]	; (4b84 <z_thread_abort+0x120>)
    4b32:	4812      	ldr	r0, [pc, #72]	; (4b7c <z_thread_abort+0x118>)
    4b34:	f003 f8d3 	bl	7cde <printk>
    4b38:	f240 614b 	movw	r1, #1611	; 0x64b
    4b3c:	4811      	ldr	r0, [pc, #68]	; (4b84 <z_thread_abort+0x120>)
    4b3e:	f003 f959 	bl	7df4 <assert_post_action>
    4b42:	e7ad      	b.n	4aa0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b44:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4b48:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    4b4c:	4621      	mov	r1, r4
    4b4e:	480e      	ldr	r0, [pc, #56]	; (4b88 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b50:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4b52:	f7ff f9b5 	bl	3ec0 <z_priq_dumb_remove>
}
    4b56:	e7bd      	b.n	4ad4 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    4b58:	4628      	mov	r0, r5
    4b5a:	f7ff f9cf 	bl	3efc <unpend_thread_no_timeout>
    4b5e:	f105 0018 	add.w	r0, r5, #24
    4b62:	f000 f937 	bl	4dd4 <z_abort_timeout>
		ready_thread(thread);
    4b66:	4628      	mov	r0, r5
    4b68:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    4b6c:	f7ff face 	bl	410c <ready_thread>
    4b70:	e7bd      	b.n	4aee <z_thread_abort+0x8a>
    4b72:	bf00      	nop
    4b74:	200009f8 	.word	0x200009f8
    4b78:	00008b2b 	.word	0x00008b2b
    4b7c:	00008b51 	.word	0x00008b51
    4b80:	200009c4 	.word	0x200009c4
    4b84:	0000995c 	.word	0x0000995c
    4b88:	200009e4 	.word	0x200009e4

00004b8c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4b8c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    4b8e:	4806      	ldr	r0, [pc, #24]	; (4ba8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4b90:	4a06      	ldr	r2, [pc, #24]	; (4bac <z_data_copy+0x20>)
    4b92:	4907      	ldr	r1, [pc, #28]	; (4bb0 <z_data_copy+0x24>)
    4b94:	1a12      	subs	r2, r2, r0
    4b96:	f003 fa03 	bl	7fa0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4b9e:	4a05      	ldr	r2, [pc, #20]	; (4bb4 <z_data_copy+0x28>)
    4ba0:	4905      	ldr	r1, [pc, #20]	; (4bb8 <z_data_copy+0x2c>)
    4ba2:	4806      	ldr	r0, [pc, #24]	; (4bbc <z_data_copy+0x30>)
    4ba4:	f003 b9fc 	b.w	7fa0 <memcpy>
    4ba8:	20000000 	.word	0x20000000
    4bac:	2000012c 	.word	0x2000012c
    4bb0:	000099dc 	.word	0x000099dc
    4bb4:	00000000 	.word	0x00000000
    4bb8:	000099dc 	.word	0x000099dc
    4bbc:	20000000 	.word	0x20000000

00004bc0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4bc0:	4b03      	ldr	r3, [pc, #12]	; (4bd0 <elapsed+0x10>)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	b90b      	cbnz	r3, 4bca <elapsed+0xa>
    4bc6:	f7fe b847 	b.w	2c58 <sys_clock_elapsed>
}
    4bca:	2000      	movs	r0, #0
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	20000a04 	.word	0x20000a04

00004bd4 <remove_timeout>:
{
    4bd4:	b530      	push	{r4, r5, lr}
    4bd6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4bd8:	b168      	cbz	r0, 4bf6 <remove_timeout+0x22>
    4bda:	4a0a      	ldr	r2, [pc, #40]	; (4c04 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4bdc:	6852      	ldr	r2, [r2, #4]
    4bde:	4290      	cmp	r0, r2
    4be0:	d009      	beq.n	4bf6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4be2:	b143      	cbz	r3, 4bf6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4be4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4be8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4bec:	1912      	adds	r2, r2, r4
    4bee:	eb45 0101 	adc.w	r1, r5, r1
    4bf2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    4bf6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    4bf8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4bfa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4bfc:	2300      	movs	r3, #0
	node->prev = NULL;
    4bfe:	e9c0 3300 	strd	r3, r3, [r0]
}
    4c02:	bd30      	pop	{r4, r5, pc}
    4c04:	20000054 	.word	0x20000054

00004c08 <next_timeout>:

static int32_t next_timeout(void)
{
    4c08:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4c0a:	4b13      	ldr	r3, [pc, #76]	; (4c58 <next_timeout+0x50>)
    4c0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c0e:	429c      	cmp	r4, r3
    4c10:	bf08      	it	eq
    4c12:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4c14:	f7ff ffd4 	bl	4bc0 <elapsed>
    4c18:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4c1a:	b1bc      	cbz	r4, 4c4c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4c1c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4c20:	1b40      	subs	r0, r0, r5
    4c22:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4c26:	2801      	cmp	r0, #1
    4c28:	f171 0300 	sbcs.w	r3, r1, #0
    4c2c:	db11      	blt.n	4c52 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4c2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4c32:	2300      	movs	r3, #0
    4c34:	4282      	cmp	r2, r0
    4c36:	eb73 0401 	sbcs.w	r4, r3, r1
    4c3a:	da00      	bge.n	4c3e <next_timeout+0x36>
    4c3c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4c3e:	4b07      	ldr	r3, [pc, #28]	; (4c5c <next_timeout+0x54>)
    4c40:	691b      	ldr	r3, [r3, #16]
    4c42:	b113      	cbz	r3, 4c4a <next_timeout+0x42>
    4c44:	4298      	cmp	r0, r3
    4c46:	bfa8      	it	ge
    4c48:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4c4a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4c4c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4c50:	e7f5      	b.n	4c3e <next_timeout+0x36>
    4c52:	2000      	movs	r0, #0
    4c54:	e7f3      	b.n	4c3e <next_timeout+0x36>
    4c56:	bf00      	nop
    4c58:	20000054 	.word	0x20000054
    4c5c:	200009c4 	.word	0x200009c4

00004c60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c64:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c66:	1c6b      	adds	r3, r5, #1
    4c68:	bf08      	it	eq
    4c6a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4c6e:	4682      	mov	sl, r0
    4c70:	468b      	mov	fp, r1
    4c72:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c74:	f000 809c 	beq.w	4db0 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    4c78:	6803      	ldr	r3, [r0, #0]
    4c7a:	b143      	cbz	r3, 4c8e <z_add_timeout+0x2e>
    4c7c:	494e      	ldr	r1, [pc, #312]	; (4db8 <z_add_timeout+0x158>)
    4c7e:	484f      	ldr	r0, [pc, #316]	; (4dbc <z_add_timeout+0x15c>)
    4c80:	225d      	movs	r2, #93	; 0x5d
    4c82:	f003 f82c 	bl	7cde <printk>
    4c86:	215d      	movs	r1, #93	; 0x5d
    4c88:	484b      	ldr	r0, [pc, #300]	; (4db8 <z_add_timeout+0x158>)
    4c8a:	f003 f8b3 	bl	7df4 <assert_post_action>
	to->fn = fn;
    4c8e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    4c92:	f04f 0320 	mov.w	r3, #32
    4c96:	f3ef 8b11 	mrs	fp, BASEPRI
    4c9a:	f383 8812 	msr	BASEPRI_MAX, r3
    4c9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ca2:	4847      	ldr	r0, [pc, #284]	; (4dc0 <z_add_timeout+0x160>)
    4ca4:	f7fe fdb8 	bl	3818 <z_spin_lock_valid>
    4ca8:	b940      	cbnz	r0, 4cbc <z_add_timeout+0x5c>
    4caa:	4946      	ldr	r1, [pc, #280]	; (4dc4 <z_add_timeout+0x164>)
    4cac:	4843      	ldr	r0, [pc, #268]	; (4dbc <z_add_timeout+0x15c>)
    4cae:	2281      	movs	r2, #129	; 0x81
    4cb0:	f003 f815 	bl	7cde <printk>
    4cb4:	2181      	movs	r1, #129	; 0x81
    4cb6:	4843      	ldr	r0, [pc, #268]	; (4dc4 <z_add_timeout+0x164>)
    4cb8:	f003 f89c 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cbc:	4840      	ldr	r0, [pc, #256]	; (4dc0 <z_add_timeout+0x160>)
    4cbe:	f7fe fdc7 	bl	3850 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4cc2:	f06f 0301 	mvn.w	r3, #1
    4cc6:	f04f 32ff 	mov.w	r2, #4294967295
    4cca:	ebb3 0804 	subs.w	r8, r3, r4
    4cce:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4cd2:	f1b8 0f00 	cmp.w	r8, #0
    4cd6:	f179 0100 	sbcs.w	r1, r9, #0
    4cda:	db1c      	blt.n	4d16 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4cdc:	483a      	ldr	r0, [pc, #232]	; (4dc8 <z_add_timeout+0x168>)
    4cde:	e9d0 1000 	ldrd	r1, r0, [r0]
    4ce2:	1a5b      	subs	r3, r3, r1
    4ce4:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    4ce8:	1b1e      	subs	r6, r3, r4
    4cea:	eb62 0705 	sbc.w	r7, r2, r5
    4cee:	2e01      	cmp	r6, #1
    4cf0:	f177 0300 	sbcs.w	r3, r7, #0
    4cf4:	bfbc      	itt	lt
    4cf6:	2601      	movlt	r6, #1
    4cf8:	2700      	movlt	r7, #0
    4cfa:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    4cfe:	4a33      	ldr	r2, [pc, #204]	; (4dcc <z_add_timeout+0x16c>)
    4d00:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d04:	4293      	cmp	r3, r2
    4d06:	d11d      	bne.n	4d44 <z_add_timeout+0xe4>
	node->prev = tail;
    4d08:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    4d0c:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    4d10:	f8c2 a004 	str.w	sl, [r2, #4]
}
    4d14:	e02c      	b.n	4d70 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4d16:	f7ff ff53 	bl	4bc0 <elapsed>
    4d1a:	1c63      	adds	r3, r4, #1
    4d1c:	9300      	str	r3, [sp, #0]
    4d1e:	f145 0300 	adc.w	r3, r5, #0
    4d22:	9301      	str	r3, [sp, #4]
    4d24:	e9dd 2300 	ldrd	r2, r3, [sp]
    4d28:	1812      	adds	r2, r2, r0
    4d2a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    4d2e:	e9ca 2304 	strd	r2, r3, [sl, #16]
    4d32:	e7e4      	b.n	4cfe <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4d34:	1be0      	subs	r0, r4, r7
    4d36:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    4d3a:	42b3      	cmp	r3, r6
    4d3c:	e9ca 0104 	strd	r0, r1, [sl, #16]
    4d40:	d0e2      	beq.n	4d08 <z_add_timeout+0xa8>
    4d42:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4d44:	2b00      	cmp	r3, #0
    4d46:	d0df      	beq.n	4d08 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    4d48:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    4d4c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    4d50:	42bc      	cmp	r4, r7
    4d52:	eb75 0108 	sbcs.w	r1, r5, r8
    4d56:	daed      	bge.n	4d34 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    4d58:	1b38      	subs	r0, r7, r4
    4d5a:	eb68 0105 	sbc.w	r1, r8, r5
    4d5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4d62:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4d64:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    4d68:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4d6c:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    4d70:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d72:	4293      	cmp	r3, r2
    4d74:	d00b      	beq.n	4d8e <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4d76:	459a      	cmp	sl, r3
    4d78:	d109      	bne.n	4d8e <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4d7a:	f7ff ff45 	bl	4c08 <next_timeout>

			if (next_time == 0 ||
    4d7e:	b118      	cbz	r0, 4d88 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    4d80:	4b13      	ldr	r3, [pc, #76]	; (4dd0 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    4d82:	691b      	ldr	r3, [r3, #16]
    4d84:	4283      	cmp	r3, r0
    4d86:	d002      	beq.n	4d8e <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    4d88:	2100      	movs	r1, #0
    4d8a:	f7fd fedd 	bl	2b48 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d8e:	480c      	ldr	r0, [pc, #48]	; (4dc0 <z_add_timeout+0x160>)
    4d90:	f7fe fd50 	bl	3834 <z_spin_unlock_valid>
    4d94:	b940      	cbnz	r0, 4da8 <z_add_timeout+0x148>
    4d96:	490b      	ldr	r1, [pc, #44]	; (4dc4 <z_add_timeout+0x164>)
    4d98:	4808      	ldr	r0, [pc, #32]	; (4dbc <z_add_timeout+0x15c>)
    4d9a:	22ac      	movs	r2, #172	; 0xac
    4d9c:	f002 ff9f 	bl	7cde <printk>
    4da0:	21ac      	movs	r1, #172	; 0xac
    4da2:	4808      	ldr	r0, [pc, #32]	; (4dc4 <z_add_timeout+0x164>)
    4da4:	f003 f826 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4da8:	f38b 8811 	msr	BASEPRI, fp
    4dac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4db0:	b003      	add	sp, #12
    4db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4db6:	bf00      	nop
    4db8:	0000997e 	.word	0x0000997e
    4dbc:	00008b51 	.word	0x00008b51
    4dc0:	20000a08 	.word	0x20000a08
    4dc4:	00008b2b 	.word	0x00008b2b
    4dc8:	20000230 	.word	0x20000230
    4dcc:	20000054 	.word	0x20000054
    4dd0:	200009c4 	.word	0x200009c4

00004dd4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    4dd4:	b538      	push	{r3, r4, r5, lr}
    4dd6:	4604      	mov	r4, r0
	__asm__ volatile(
    4dd8:	f04f 0320 	mov.w	r3, #32
    4ddc:	f3ef 8511 	mrs	r5, BASEPRI
    4de0:	f383 8812 	msr	BASEPRI_MAX, r3
    4de4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4de8:	4815      	ldr	r0, [pc, #84]	; (4e40 <z_abort_timeout+0x6c>)
    4dea:	f7fe fd15 	bl	3818 <z_spin_lock_valid>
    4dee:	b940      	cbnz	r0, 4e02 <z_abort_timeout+0x2e>
    4df0:	4914      	ldr	r1, [pc, #80]	; (4e44 <z_abort_timeout+0x70>)
    4df2:	4815      	ldr	r0, [pc, #84]	; (4e48 <z_abort_timeout+0x74>)
    4df4:	2281      	movs	r2, #129	; 0x81
    4df6:	f002 ff72 	bl	7cde <printk>
    4dfa:	2181      	movs	r1, #129	; 0x81
    4dfc:	4811      	ldr	r0, [pc, #68]	; (4e44 <z_abort_timeout+0x70>)
    4dfe:	f002 fff9 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e02:	480f      	ldr	r0, [pc, #60]	; (4e40 <z_abort_timeout+0x6c>)
    4e04:	f7fe fd24 	bl	3850 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    4e08:	6823      	ldr	r3, [r4, #0]
    4e0a:	b1b3      	cbz	r3, 4e3a <z_abort_timeout+0x66>
			remove_timeout(to);
    4e0c:	4620      	mov	r0, r4
    4e0e:	f7ff fee1 	bl	4bd4 <remove_timeout>
			ret = 0;
    4e12:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e14:	480a      	ldr	r0, [pc, #40]	; (4e40 <z_abort_timeout+0x6c>)
    4e16:	f7fe fd0d 	bl	3834 <z_spin_unlock_valid>
    4e1a:	b940      	cbnz	r0, 4e2e <z_abort_timeout+0x5a>
    4e1c:	4909      	ldr	r1, [pc, #36]	; (4e44 <z_abort_timeout+0x70>)
    4e1e:	480a      	ldr	r0, [pc, #40]	; (4e48 <z_abort_timeout+0x74>)
    4e20:	22ac      	movs	r2, #172	; 0xac
    4e22:	f002 ff5c 	bl	7cde <printk>
    4e26:	21ac      	movs	r1, #172	; 0xac
    4e28:	4806      	ldr	r0, [pc, #24]	; (4e44 <z_abort_timeout+0x70>)
    4e2a:	f002 ffe3 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4e2e:	f385 8811 	msr	BASEPRI, r5
    4e32:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4e36:	4620      	mov	r0, r4
    4e38:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    4e3a:	f06f 0415 	mvn.w	r4, #21
    4e3e:	e7e9      	b.n	4e14 <z_abort_timeout+0x40>
    4e40:	20000a08 	.word	0x20000a08
    4e44:	00008b2b 	.word	0x00008b2b
    4e48:	00008b51 	.word	0x00008b51

00004e4c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    4e4c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4e4e:	f04f 0320 	mov.w	r3, #32
    4e52:	f3ef 8511 	mrs	r5, BASEPRI
    4e56:	f383 8812 	msr	BASEPRI_MAX, r3
    4e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e5e:	4813      	ldr	r0, [pc, #76]	; (4eac <z_get_next_timeout_expiry+0x60>)
    4e60:	f7fe fcda 	bl	3818 <z_spin_lock_valid>
    4e64:	b940      	cbnz	r0, 4e78 <z_get_next_timeout_expiry+0x2c>
    4e66:	4912      	ldr	r1, [pc, #72]	; (4eb0 <z_get_next_timeout_expiry+0x64>)
    4e68:	4812      	ldr	r0, [pc, #72]	; (4eb4 <z_get_next_timeout_expiry+0x68>)
    4e6a:	2281      	movs	r2, #129	; 0x81
    4e6c:	f002 ff37 	bl	7cde <printk>
    4e70:	2181      	movs	r1, #129	; 0x81
    4e72:	480f      	ldr	r0, [pc, #60]	; (4eb0 <z_get_next_timeout_expiry+0x64>)
    4e74:	f002 ffbe 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e78:	480c      	ldr	r0, [pc, #48]	; (4eac <z_get_next_timeout_expiry+0x60>)
    4e7a:	f7fe fce9 	bl	3850 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    4e7e:	f7ff fec3 	bl	4c08 <next_timeout>
    4e82:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e84:	4809      	ldr	r0, [pc, #36]	; (4eac <z_get_next_timeout_expiry+0x60>)
    4e86:	f7fe fcd5 	bl	3834 <z_spin_unlock_valid>
    4e8a:	b940      	cbnz	r0, 4e9e <z_get_next_timeout_expiry+0x52>
    4e8c:	4908      	ldr	r1, [pc, #32]	; (4eb0 <z_get_next_timeout_expiry+0x64>)
    4e8e:	4809      	ldr	r0, [pc, #36]	; (4eb4 <z_get_next_timeout_expiry+0x68>)
    4e90:	22ac      	movs	r2, #172	; 0xac
    4e92:	f002 ff24 	bl	7cde <printk>
    4e96:	21ac      	movs	r1, #172	; 0xac
    4e98:	4805      	ldr	r0, [pc, #20]	; (4eb0 <z_get_next_timeout_expiry+0x64>)
    4e9a:	f002 ffab 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4e9e:	f385 8811 	msr	BASEPRI, r5
    4ea2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    4ea6:	4620      	mov	r0, r4
    4ea8:	bd38      	pop	{r3, r4, r5, pc}
    4eaa:	bf00      	nop
    4eac:	20000a08 	.word	0x20000a08
    4eb0:	00008b2b 	.word	0x00008b2b
    4eb4:	00008b51 	.word	0x00008b51

00004eb8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	4604      	mov	r4, r0
    4ebc:	460d      	mov	r5, r1
	__asm__ volatile(
    4ebe:	f04f 0320 	mov.w	r3, #32
    4ec2:	f3ef 8611 	mrs	r6, BASEPRI
    4ec6:	f383 8812 	msr	BASEPRI_MAX, r3
    4eca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ece:	4816      	ldr	r0, [pc, #88]	; (4f28 <z_set_timeout_expiry+0x70>)
    4ed0:	f7fe fca2 	bl	3818 <z_spin_lock_valid>
    4ed4:	b940      	cbnz	r0, 4ee8 <z_set_timeout_expiry+0x30>
    4ed6:	4915      	ldr	r1, [pc, #84]	; (4f2c <z_set_timeout_expiry+0x74>)
    4ed8:	4815      	ldr	r0, [pc, #84]	; (4f30 <z_set_timeout_expiry+0x78>)
    4eda:	2281      	movs	r2, #129	; 0x81
    4edc:	f002 feff 	bl	7cde <printk>
    4ee0:	2181      	movs	r1, #129	; 0x81
    4ee2:	4812      	ldr	r0, [pc, #72]	; (4f2c <z_set_timeout_expiry+0x74>)
    4ee4:	f002 ff86 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ee8:	480f      	ldr	r0, [pc, #60]	; (4f28 <z_set_timeout_expiry+0x70>)
    4eea:	f7fe fcb1 	bl	3850 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    4eee:	f7ff fe8b 	bl	4c08 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4ef2:	2801      	cmp	r0, #1
    4ef4:	dd05      	ble.n	4f02 <z_set_timeout_expiry+0x4a>
    4ef6:	42a0      	cmp	r0, r4
    4ef8:	db03      	blt.n	4f02 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4efa:	4629      	mov	r1, r5
    4efc:	4620      	mov	r0, r4
    4efe:	f7fd fe23 	bl	2b48 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f02:	4809      	ldr	r0, [pc, #36]	; (4f28 <z_set_timeout_expiry+0x70>)
    4f04:	f7fe fc96 	bl	3834 <z_spin_unlock_valid>
    4f08:	b940      	cbnz	r0, 4f1c <z_set_timeout_expiry+0x64>
    4f0a:	4908      	ldr	r1, [pc, #32]	; (4f2c <z_set_timeout_expiry+0x74>)
    4f0c:	4808      	ldr	r0, [pc, #32]	; (4f30 <z_set_timeout_expiry+0x78>)
    4f0e:	22ac      	movs	r2, #172	; 0xac
    4f10:	f002 fee5 	bl	7cde <printk>
    4f14:	21ac      	movs	r1, #172	; 0xac
    4f16:	4805      	ldr	r0, [pc, #20]	; (4f2c <z_set_timeout_expiry+0x74>)
    4f18:	f002 ff6c 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4f1c:	f386 8811 	msr	BASEPRI, r6
    4f20:	f3bf 8f6f 	isb	sy
		}
	}
}
    4f24:	bd70      	pop	{r4, r5, r6, pc}
    4f26:	bf00      	nop
    4f28:	20000a08 	.word	0x20000a08
    4f2c:	00008b2b 	.word	0x00008b2b
    4f30:	00008b51 	.word	0x00008b51

00004f34 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    4f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f38:	b085      	sub	sp, #20
    4f3a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4f3c:	f7ff f880 	bl	4040 <z_time_slice>
	__asm__ volatile(
    4f40:	f04f 0320 	mov.w	r3, #32
    4f44:	f3ef 8911 	mrs	r9, BASEPRI
    4f48:	f383 8812 	msr	BASEPRI_MAX, r3
    4f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f50:	484c      	ldr	r0, [pc, #304]	; (5084 <sys_clock_announce+0x150>)
    4f52:	f7fe fc61 	bl	3818 <z_spin_lock_valid>
    4f56:	b940      	cbnz	r0, 4f6a <sys_clock_announce+0x36>
    4f58:	494b      	ldr	r1, [pc, #300]	; (5088 <sys_clock_announce+0x154>)
    4f5a:	484c      	ldr	r0, [pc, #304]	; (508c <sys_clock_announce+0x158>)
    4f5c:	2281      	movs	r2, #129	; 0x81
    4f5e:	f002 febe 	bl	7cde <printk>
    4f62:	2181      	movs	r1, #129	; 0x81
    4f64:	4848      	ldr	r0, [pc, #288]	; (5088 <sys_clock_announce+0x154>)
    4f66:	f002 ff45 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f6a:	4f49      	ldr	r7, [pc, #292]	; (5090 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4f6c:	4e49      	ldr	r6, [pc, #292]	; (5094 <sys_clock_announce+0x160>)
    4f6e:	46bb      	mov	fp, r7
    4f70:	4844      	ldr	r0, [pc, #272]	; (5084 <sys_clock_announce+0x150>)
	return list->head == list;
    4f72:	f8df a124 	ldr.w	sl, [pc, #292]	; 5098 <sys_clock_announce+0x164>
    4f76:	f7fe fc6b 	bl	3850 <z_spin_lock_set_owner>
    4f7a:	6034      	str	r4, [r6, #0]
    4f7c:	f8d6 c000 	ldr.w	ip, [r6]
    4f80:	f8da 8000 	ldr.w	r8, [sl]
    4f84:	4662      	mov	r2, ip
    4f86:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f8a:	45d0      	cmp	r8, sl
    4f8c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    4f90:	ea4f 73e2 	mov.w	r3, r2, asr #31
    4f94:	e9cd 2300 	strd	r2, r3, [sp]
    4f98:	d011      	beq.n	4fbe <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4f9a:	f1b8 0f00 	cmp.w	r8, #0
    4f9e:	d00e      	beq.n	4fbe <sys_clock_announce+0x8a>
    4fa0:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    4fa4:	e9dd 3400 	ldrd	r3, r4, [sp]
    4fa8:	428b      	cmp	r3, r1
    4faa:	eb74 0302 	sbcs.w	r3, r4, r2
    4fae:	da2a      	bge.n	5006 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4fb0:	9b00      	ldr	r3, [sp, #0]
    4fb2:	1ac8      	subs	r0, r1, r3
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	eb62 0103 	sbc.w	r1, r2, r3
    4fba:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4fbe:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4fc0:	9b00      	ldr	r3, [sp, #0]
    4fc2:	9a02      	ldr	r2, [sp, #8]
    4fc4:	9903      	ldr	r1, [sp, #12]
    4fc6:	189a      	adds	r2, r3, r2
    4fc8:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    4fca:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    4fcc:	eb41 0303 	adc.w	r3, r1, r3
    4fd0:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    4fd4:	f7ff fe18 	bl	4c08 <next_timeout>
    4fd8:	4621      	mov	r1, r4
    4fda:	f7fd fdb5 	bl	2b48 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fde:	4829      	ldr	r0, [pc, #164]	; (5084 <sys_clock_announce+0x150>)
    4fe0:	f7fe fc28 	bl	3834 <z_spin_unlock_valid>
    4fe4:	b940      	cbnz	r0, 4ff8 <sys_clock_announce+0xc4>
    4fe6:	4928      	ldr	r1, [pc, #160]	; (5088 <sys_clock_announce+0x154>)
    4fe8:	4828      	ldr	r0, [pc, #160]	; (508c <sys_clock_announce+0x158>)
    4fea:	22ac      	movs	r2, #172	; 0xac
    4fec:	f002 fe77 	bl	7cde <printk>
    4ff0:	21ac      	movs	r1, #172	; 0xac
    4ff2:	4825      	ldr	r0, [pc, #148]	; (5088 <sys_clock_announce+0x154>)
    4ff4:	f002 fefe 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    4ff8:	f389 8811 	msr	BASEPRI, r9
    4ffc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5000:	b005      	add	sp, #20
    5002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    5006:	2200      	movs	r2, #0
		curr_tick += dt;
    5008:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    500c:	2300      	movs	r3, #0
		curr_tick += dt;
    500e:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    5010:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    5014:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    5018:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    501a:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    501e:	4640      	mov	r0, r8
		curr_tick += dt;
    5020:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    5024:	f7ff fdd6 	bl	4bd4 <remove_timeout>
    5028:	4816      	ldr	r0, [pc, #88]	; (5084 <sys_clock_announce+0x150>)
    502a:	f7fe fc03 	bl	3834 <z_spin_unlock_valid>
    502e:	b940      	cbnz	r0, 5042 <sys_clock_announce+0x10e>
    5030:	4915      	ldr	r1, [pc, #84]	; (5088 <sys_clock_announce+0x154>)
    5032:	4816      	ldr	r0, [pc, #88]	; (508c <sys_clock_announce+0x158>)
    5034:	22ac      	movs	r2, #172	; 0xac
    5036:	f002 fe52 	bl	7cde <printk>
    503a:	21ac      	movs	r1, #172	; 0xac
    503c:	4812      	ldr	r0, [pc, #72]	; (5088 <sys_clock_announce+0x154>)
    503e:	f002 fed9 	bl	7df4 <assert_post_action>
    5042:	f389 8811 	msr	BASEPRI, r9
    5046:	f3bf 8f6f 	isb	sy
		t->fn(t);
    504a:	4640      	mov	r0, r8
    504c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5050:	4798      	blx	r3
	__asm__ volatile(
    5052:	f04f 0320 	mov.w	r3, #32
    5056:	f3ef 8911 	mrs	r9, BASEPRI
    505a:	f383 8812 	msr	BASEPRI_MAX, r3
    505e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5062:	4808      	ldr	r0, [pc, #32]	; (5084 <sys_clock_announce+0x150>)
    5064:	f7fe fbd8 	bl	3818 <z_spin_lock_valid>
    5068:	b940      	cbnz	r0, 507c <sys_clock_announce+0x148>
    506a:	4907      	ldr	r1, [pc, #28]	; (5088 <sys_clock_announce+0x154>)
    506c:	4807      	ldr	r0, [pc, #28]	; (508c <sys_clock_announce+0x158>)
    506e:	2281      	movs	r2, #129	; 0x81
    5070:	f002 fe35 	bl	7cde <printk>
    5074:	2181      	movs	r1, #129	; 0x81
    5076:	4804      	ldr	r0, [pc, #16]	; (5088 <sys_clock_announce+0x154>)
    5078:	f002 febc 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    507c:	4801      	ldr	r0, [pc, #4]	; (5084 <sys_clock_announce+0x150>)
    507e:	f7fe fbe7 	bl	3850 <z_spin_lock_set_owner>
	return k;
    5082:	e77b      	b.n	4f7c <sys_clock_announce+0x48>
    5084:	20000a08 	.word	0x20000a08
    5088:	00008b2b 	.word	0x00008b2b
    508c:	00008b51 	.word	0x00008b51
    5090:	20000230 	.word	0x20000230
    5094:	20000a04 	.word	0x20000a04
    5098:	20000054 	.word	0x20000054

0000509c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	f04f 0320 	mov.w	r3, #32
    50a2:	f3ef 8611 	mrs	r6, BASEPRI
    50a6:	f383 8812 	msr	BASEPRI_MAX, r3
    50aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50ae:	4816      	ldr	r0, [pc, #88]	; (5108 <sys_clock_tick_get+0x6c>)
    50b0:	f7fe fbb2 	bl	3818 <z_spin_lock_valid>
    50b4:	b940      	cbnz	r0, 50c8 <sys_clock_tick_get+0x2c>
    50b6:	4915      	ldr	r1, [pc, #84]	; (510c <sys_clock_tick_get+0x70>)
    50b8:	4815      	ldr	r0, [pc, #84]	; (5110 <sys_clock_tick_get+0x74>)
    50ba:	2281      	movs	r2, #129	; 0x81
    50bc:	f002 fe0f 	bl	7cde <printk>
    50c0:	2181      	movs	r1, #129	; 0x81
    50c2:	4812      	ldr	r0, [pc, #72]	; (510c <sys_clock_tick_get+0x70>)
    50c4:	f002 fe96 	bl	7df4 <assert_post_action>
	z_spin_lock_set_owner(l);
    50c8:	480f      	ldr	r0, [pc, #60]	; (5108 <sys_clock_tick_get+0x6c>)
    50ca:	f7fe fbc1 	bl	3850 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    50ce:	f7fd fdc3 	bl	2c58 <sys_clock_elapsed>
    50d2:	4b10      	ldr	r3, [pc, #64]	; (5114 <sys_clock_tick_get+0x78>)
    50d4:	e9d3 4500 	ldrd	r4, r5, [r3]
    50d8:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50da:	480b      	ldr	r0, [pc, #44]	; (5108 <sys_clock_tick_get+0x6c>)
    50dc:	f145 0500 	adc.w	r5, r5, #0
    50e0:	f7fe fba8 	bl	3834 <z_spin_unlock_valid>
    50e4:	b940      	cbnz	r0, 50f8 <sys_clock_tick_get+0x5c>
    50e6:	4909      	ldr	r1, [pc, #36]	; (510c <sys_clock_tick_get+0x70>)
    50e8:	4809      	ldr	r0, [pc, #36]	; (5110 <sys_clock_tick_get+0x74>)
    50ea:	22ac      	movs	r2, #172	; 0xac
    50ec:	f002 fdf7 	bl	7cde <printk>
    50f0:	21ac      	movs	r1, #172	; 0xac
    50f2:	4806      	ldr	r0, [pc, #24]	; (510c <sys_clock_tick_get+0x70>)
    50f4:	f002 fe7e 	bl	7df4 <assert_post_action>
	__asm__ volatile(
    50f8:	f386 8811 	msr	BASEPRI, r6
    50fc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5100:	4620      	mov	r0, r4
    5102:	4629      	mov	r1, r5
    5104:	bd70      	pop	{r4, r5, r6, pc}
    5106:	bf00      	nop
    5108:	20000a08 	.word	0x20000a08
    510c:	00008b2b 	.word	0x00008b2b
    5110:	00008b51 	.word	0x00008b51
    5114:	20000230 	.word	0x20000230

00005118 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5118:	4a02      	ldr	r2, [pc, #8]	; (5124 <boot_banner+0xc>)
    511a:	4903      	ldr	r1, [pc, #12]	; (5128 <boot_banner+0x10>)
    511c:	4803      	ldr	r0, [pc, #12]	; (512c <boot_banner+0x14>)
    511e:	f002 bdde 	b.w	7cde <printk>
    5122:	bf00      	nop
    5124:	00008b74 	.word	0x00008b74
    5128:	000099a2 	.word	0x000099a2
    512c:	000099b1 	.word	0x000099b1

00005130 <nrf_cc3xx_platform_init>:
    5130:	b510      	push	{r4, lr}
    5132:	4c0c      	ldr	r4, [pc, #48]	; (5164 <nrf_cc3xx_platform_init+0x34>)
    5134:	6823      	ldr	r3, [r4, #0]
    5136:	b113      	cbz	r3, 513e <nrf_cc3xx_platform_init+0xe>
    5138:	4b0b      	ldr	r3, [pc, #44]	; (5168 <nrf_cc3xx_platform_init+0x38>)
    513a:	681b      	ldr	r3, [r3, #0]
    513c:	b92b      	cbnz	r3, 514a <nrf_cc3xx_platform_init+0x1a>
    513e:	f000 fe73 	bl	5e28 <CC_LibInit>
    5142:	b930      	cbnz	r0, 5152 <nrf_cc3xx_platform_init+0x22>
    5144:	2201      	movs	r2, #1
    5146:	4b08      	ldr	r3, [pc, #32]	; (5168 <nrf_cc3xx_platform_init+0x38>)
    5148:	601a      	str	r2, [r3, #0]
    514a:	2301      	movs	r3, #1
    514c:	2000      	movs	r0, #0
    514e:	6023      	str	r3, [r4, #0]
    5150:	bd10      	pop	{r4, pc}
    5152:	3801      	subs	r0, #1
    5154:	2806      	cmp	r0, #6
    5156:	d901      	bls.n	515c <nrf_cc3xx_platform_init+0x2c>
    5158:	4804      	ldr	r0, [pc, #16]	; (516c <nrf_cc3xx_platform_init+0x3c>)
    515a:	bd10      	pop	{r4, pc}
    515c:	4b04      	ldr	r3, [pc, #16]	; (5170 <nrf_cc3xx_platform_init+0x40>)
    515e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5162:	bd10      	pop	{r4, pc}
    5164:	20000a0c 	.word	0x20000a0c
    5168:	20000a10 	.word	0x20000a10
    516c:	ffff8ffe 	.word	0xffff8ffe
    5170:	00008970 	.word	0x00008970

00005174 <nrf_cc3xx_platform_abort>:
    5174:	f3bf 8f4f 	dsb	sy
    5178:	4905      	ldr	r1, [pc, #20]	; (5190 <nrf_cc3xx_platform_abort+0x1c>)
    517a:	4b06      	ldr	r3, [pc, #24]	; (5194 <nrf_cc3xx_platform_abort+0x20>)
    517c:	68ca      	ldr	r2, [r1, #12]
    517e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5182:	4313      	orrs	r3, r2
    5184:	60cb      	str	r3, [r1, #12]
    5186:	f3bf 8f4f 	dsb	sy
    518a:	bf00      	nop
    518c:	e7fd      	b.n	518a <nrf_cc3xx_platform_abort+0x16>
    518e:	bf00      	nop
    5190:	e000ed00 	.word	0xe000ed00
    5194:	05fa0004 	.word	0x05fa0004

00005198 <CC_PalAbort>:
    5198:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    519c:	2100      	movs	r1, #0
    519e:	b430      	push	{r4, r5}
    51a0:	4a06      	ldr	r2, [pc, #24]	; (51bc <CC_PalAbort+0x24>)
    51a2:	4d07      	ldr	r5, [pc, #28]	; (51c0 <CC_PalAbort+0x28>)
    51a4:	4c07      	ldr	r4, [pc, #28]	; (51c4 <CC_PalAbort+0x2c>)
    51a6:	602b      	str	r3, [r5, #0]
    51a8:	6013      	str	r3, [r2, #0]
    51aa:	6023      	str	r3, [r4, #0]
    51ac:	4a06      	ldr	r2, [pc, #24]	; (51c8 <CC_PalAbort+0x30>)
    51ae:	4c07      	ldr	r4, [pc, #28]	; (51cc <CC_PalAbort+0x34>)
    51b0:	60eb      	str	r3, [r5, #12]
    51b2:	6863      	ldr	r3, [r4, #4]
    51b4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    51b8:	bc30      	pop	{r4, r5}
    51ba:	4718      	bx	r3
    51bc:	50841404 	.word	0x50841404
    51c0:	50841400 	.word	0x50841400
    51c4:	50841408 	.word	0x50841408
    51c8:	50840000 	.word	0x50840000
    51cc:	2000005c 	.word	0x2000005c

000051d0 <nrf_cc3xx_platform_set_abort>:
    51d0:	4b02      	ldr	r3, [pc, #8]	; (51dc <nrf_cc3xx_platform_set_abort+0xc>)
    51d2:	e9d0 1200 	ldrd	r1, r2, [r0]
    51d6:	e9c3 1200 	strd	r1, r2, [r3]
    51da:	4770      	bx	lr
    51dc:	2000005c 	.word	0x2000005c

000051e0 <nrf_cc3xx_platform_ctr_drbg_init>:
    51e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51e4:	4c15      	ldr	r4, [pc, #84]	; (523c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    51e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5244 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    51ea:	2800      	cmp	r0, #0
    51ec:	bf18      	it	ne
    51ee:	4604      	movne	r4, r0
    51f0:	6820      	ldr	r0, [r4, #0]
    51f2:	b083      	sub	sp, #12
    51f4:	4540      	cmp	r0, r8
    51f6:	d01d      	beq.n	5234 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    51f8:	4616      	mov	r6, r2
    51fa:	460d      	mov	r5, r1
    51fc:	4620      	mov	r0, r4
    51fe:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    5202:	f104 0904 	add.w	r9, r4, #4
    5206:	f000 f8d3 	bl	53b0 <mbedtls_platform_zeroize>
    520a:	f504 778c 	add.w	r7, r4, #280	; 0x118
    520e:	4648      	mov	r0, r9
    5210:	f000 fcf2 	bl	5bf8 <cc_mbedtls_entropy_init>
    5214:	4638      	mov	r0, r7
    5216:	f000 fb1d 	bl	5854 <cc_mbedtls_ctr_drbg_init>
    521a:	464a      	mov	r2, r9
    521c:	4638      	mov	r0, r7
    521e:	462b      	mov	r3, r5
    5220:	4907      	ldr	r1, [pc, #28]	; (5240 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    5222:	9600      	str	r6, [sp, #0]
    5224:	f000 fb2c 	bl	5880 <cc_mbedtls_ctr_drbg_seed>
    5228:	b908      	cbnz	r0, 522e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    522a:	f8c4 8000 	str.w	r8, [r4]
    522e:	b003      	add	sp, #12
    5230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5234:	2000      	movs	r0, #0
    5236:	b003      	add	sp, #12
    5238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    523c:	200013e8 	.word	0x200013e8
    5240:	00005c79 	.word	0x00005c79
    5244:	5ac9bca5 	.word	0x5ac9bca5

00005248 <nrf_cc3xx_platform_ctr_drbg_get>:
    5248:	b5f0      	push	{r4, r5, r6, r7, lr}
    524a:	4c0d      	ldr	r4, [pc, #52]	; (5280 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    524c:	4e0d      	ldr	r6, [pc, #52]	; (5284 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    524e:	2800      	cmp	r0, #0
    5250:	bf08      	it	eq
    5252:	4620      	moveq	r0, r4
    5254:	6807      	ldr	r7, [r0, #0]
    5256:	b083      	sub	sp, #12
    5258:	42b7      	cmp	r7, r6
    525a:	d10e      	bne.n	527a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    525c:	2600      	movs	r6, #0
    525e:	461d      	mov	r5, r3
    5260:	f500 708c 	add.w	r0, r0, #280	; 0x118
    5264:	4633      	mov	r3, r6
    5266:	9600      	str	r6, [sp, #0]
    5268:	4614      	mov	r4, r2
    526a:	f000 fb57 	bl	591c <cc_mbedtls_ctr_drbg_random_with_add>
    526e:	2800      	cmp	r0, #0
    5270:	bf18      	it	ne
    5272:	4634      	movne	r4, r6
    5274:	602c      	str	r4, [r5, #0]
    5276:	b003      	add	sp, #12
    5278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    527a:	4803      	ldr	r0, [pc, #12]	; (5288 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    527c:	e7fb      	b.n	5276 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    527e:	bf00      	nop
    5280:	200013e8 	.word	0x200013e8
    5284:	5ac9bca5 	.word	0x5ac9bca5
    5288:	ffff8fe8 	.word	0xffff8fe8

0000528c <mutex_free>:
    528c:	b510      	push	{r4, lr}
    528e:	4604      	mov	r4, r0
    5290:	b130      	cbz	r0, 52a0 <mutex_free+0x14>
    5292:	6863      	ldr	r3, [r4, #4]
    5294:	06db      	lsls	r3, r3, #27
    5296:	d502      	bpl.n	529e <mutex_free+0x12>
    5298:	2300      	movs	r3, #0
    529a:	6023      	str	r3, [r4, #0]
    529c:	6063      	str	r3, [r4, #4]
    529e:	bd10      	pop	{r4, pc}
    52a0:	4b02      	ldr	r3, [pc, #8]	; (52ac <mutex_free+0x20>)
    52a2:	4803      	ldr	r0, [pc, #12]	; (52b0 <mutex_free+0x24>)
    52a4:	685b      	ldr	r3, [r3, #4]
    52a6:	4798      	blx	r3
    52a8:	e7f3      	b.n	5292 <mutex_free+0x6>
    52aa:	bf00      	nop
    52ac:	2000005c 	.word	0x2000005c
    52b0:	0000898c 	.word	0x0000898c

000052b4 <mutex_unlock>:
    52b4:	b168      	cbz	r0, 52d2 <mutex_unlock+0x1e>
    52b6:	6843      	ldr	r3, [r0, #4]
    52b8:	b13b      	cbz	r3, 52ca <mutex_unlock+0x16>
    52ba:	06db      	lsls	r3, r3, #27
    52bc:	d507      	bpl.n	52ce <mutex_unlock+0x1a>
    52be:	f3bf 8f5f 	dmb	sy
    52c2:	2300      	movs	r3, #0
    52c4:	6003      	str	r3, [r0, #0]
    52c6:	4618      	mov	r0, r3
    52c8:	4770      	bx	lr
    52ca:	4803      	ldr	r0, [pc, #12]	; (52d8 <mutex_unlock+0x24>)
    52cc:	4770      	bx	lr
    52ce:	4803      	ldr	r0, [pc, #12]	; (52dc <mutex_unlock+0x28>)
    52d0:	4770      	bx	lr
    52d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    52d6:	4770      	bx	lr
    52d8:	ffff8fea 	.word	0xffff8fea
    52dc:	ffff8fe9 	.word	0xffff8fe9

000052e0 <mutex_init>:
    52e0:	b510      	push	{r4, lr}
    52e2:	4604      	mov	r4, r0
    52e4:	b120      	cbz	r0, 52f0 <mutex_init+0x10>
    52e6:	2200      	movs	r2, #0
    52e8:	2311      	movs	r3, #17
    52ea:	6022      	str	r2, [r4, #0]
    52ec:	6063      	str	r3, [r4, #4]
    52ee:	bd10      	pop	{r4, pc}
    52f0:	4801      	ldr	r0, [pc, #4]	; (52f8 <mutex_init+0x18>)
    52f2:	f7ff ff51 	bl	5198 <CC_PalAbort>
    52f6:	e7f6      	b.n	52e6 <mutex_init+0x6>
    52f8:	000089b4 	.word	0x000089b4

000052fc <mutex_lock>:
    52fc:	b1a0      	cbz	r0, 5328 <mutex_lock+0x2c>
    52fe:	6843      	ldr	r3, [r0, #4]
    5300:	b183      	cbz	r3, 5324 <mutex_lock+0x28>
    5302:	06db      	lsls	r3, r3, #27
    5304:	d50c      	bpl.n	5320 <mutex_lock+0x24>
    5306:	2201      	movs	r2, #1
    5308:	e8d0 3fef 	ldaex	r3, [r0]
    530c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5310:	2900      	cmp	r1, #0
    5312:	d1f9      	bne.n	5308 <mutex_lock+0xc>
    5314:	2b01      	cmp	r3, #1
    5316:	d0f7      	beq.n	5308 <mutex_lock+0xc>
    5318:	f3bf 8f5f 	dmb	sy
    531c:	2000      	movs	r0, #0
    531e:	4770      	bx	lr
    5320:	4803      	ldr	r0, [pc, #12]	; (5330 <mutex_lock+0x34>)
    5322:	4770      	bx	lr
    5324:	4803      	ldr	r0, [pc, #12]	; (5334 <mutex_lock+0x38>)
    5326:	4770      	bx	lr
    5328:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	ffff8fe9 	.word	0xffff8fe9
    5334:	ffff8fea 	.word	0xffff8fea

00005338 <nrf_cc3xx_platform_set_mutexes>:
    5338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    533c:	4c14      	ldr	r4, [pc, #80]	; (5390 <nrf_cc3xx_platform_set_mutexes+0x58>)
    533e:	6802      	ldr	r2, [r0, #0]
    5340:	68c3      	ldr	r3, [r0, #12]
    5342:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    5346:	e9c4 6302 	strd	r6, r3, [r4, #8]
    534a:	e9c4 2500 	strd	r2, r5, [r4]
    534e:	4b11      	ldr	r3, [pc, #68]	; (5394 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5350:	680e      	ldr	r6, [r1, #0]
    5352:	6848      	ldr	r0, [r1, #4]
    5354:	4d10      	ldr	r5, [pc, #64]	; (5398 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5356:	e9c3 6000 	strd	r6, r0, [r3]
    535a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    535e:	6908      	ldr	r0, [r1, #16]
    5360:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5364:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5368:	6118      	str	r0, [r3, #16]
    536a:	06cb      	lsls	r3, r1, #27
    536c:	d50d      	bpl.n	538a <nrf_cc3xx_platform_set_mutexes+0x52>
    536e:	2300      	movs	r3, #0
    5370:	f505 7088 	add.w	r0, r5, #272	; 0x110
    5374:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5378:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    537c:	4790      	blx	r2
    537e:	6823      	ldr	r3, [r4, #0]
    5380:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    5384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5388:	4718      	bx	r3
    538a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    538e:	bf00      	nop
    5390:	2000006c 	.word	0x2000006c
    5394:	2000007c 	.word	0x2000007c
    5398:	200013e8 	.word	0x200013e8

0000539c <mbedtls_zeroize_internal>:
    539c:	b138      	cbz	r0, 53ae <mbedtls_zeroize_internal+0x12>
    539e:	b131      	cbz	r1, 53ae <mbedtls_zeroize_internal+0x12>
    53a0:	2200      	movs	r2, #0
    53a2:	4401      	add	r1, r0
    53a4:	4603      	mov	r3, r0
    53a6:	3001      	adds	r0, #1
    53a8:	4281      	cmp	r1, r0
    53aa:	701a      	strb	r2, [r3, #0]
    53ac:	d1fa      	bne.n	53a4 <mbedtls_zeroize_internal+0x8>
    53ae:	4770      	bx	lr

000053b0 <mbedtls_platform_zeroize>:
    53b0:	b138      	cbz	r0, 53c2 <mbedtls_platform_zeroize+0x12>
    53b2:	b131      	cbz	r1, 53c2 <mbedtls_platform_zeroize+0x12>
    53b4:	2200      	movs	r2, #0
    53b6:	4401      	add	r1, r0
    53b8:	4603      	mov	r3, r0
    53ba:	3001      	adds	r0, #1
    53bc:	4288      	cmp	r0, r1
    53be:	701a      	strb	r2, [r3, #0]
    53c0:	d1fa      	bne.n	53b8 <mbedtls_platform_zeroize+0x8>
    53c2:	4770      	bx	lr

000053c4 <block_cipher_df>:
    53c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53c8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    53cc:	b0af      	sub	sp, #188	; 0xbc
    53ce:	f200 812c 	bhi.w	562a <block_cipher_df+0x266>
    53d2:	f8df 926c 	ldr.w	r9, [pc, #620]	; 5640 <block_cipher_df+0x27c>
    53d6:	4690      	mov	r8, r2
    53d8:	460c      	mov	r4, r1
    53da:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    53de:	2100      	movs	r1, #0
    53e0:	4682      	mov	sl, r0
    53e2:	4648      	mov	r0, r9
    53e4:	f002 fde7 	bl	7fb6 <memset>
    53e8:	a811      	add	r0, sp, #68	; 0x44
    53ea:	f001 f9e9 	bl	67c0 <cc_mbedtls_aes_init>
    53ee:	2200      	movs	r2, #0
    53f0:	2320      	movs	r3, #32
    53f2:	4621      	mov	r1, r4
    53f4:	f8a9 2010 	strh.w	r2, [r9, #16]
    53f8:	fa98 f498 	rev16.w	r4, r8
    53fc:	4642      	mov	r2, r8
    53fe:	f109 0018 	add.w	r0, r9, #24
    5402:	f8a9 4012 	strh.w	r4, [r9, #18]
    5406:	f889 3017 	strb.w	r3, [r9, #23]
    540a:	f002 fdc9 	bl	7fa0 <memcpy>
    540e:	2280      	movs	r2, #128	; 0x80
    5410:	4b87      	ldr	r3, [pc, #540]	; (5630 <block_cipher_df+0x26c>)
    5412:	4988      	ldr	r1, [pc, #544]	; (5634 <block_cipher_df+0x270>)
    5414:	4c88      	ldr	r4, [pc, #544]	; (5638 <block_cipher_df+0x274>)
    5416:	eb09 0008 	add.w	r0, r9, r8
    541a:	e9cd 4102 	strd	r4, r1, [sp, #8]
    541e:	7602      	strb	r2, [r0, #24]
    5420:	9301      	str	r3, [sp, #4]
    5422:	a811      	add	r0, sp, #68	; 0x44
    5424:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    5428:	a901      	add	r1, sp, #4
    542a:	9304      	str	r3, [sp, #16]
    542c:	f001 f9de 	bl	67ec <cc_mbedtls_aes_setkey_enc>
    5430:	4607      	mov	r7, r0
    5432:	2800      	cmp	r0, #0
    5434:	f040 80d8 	bne.w	55e8 <block_cipher_df+0x224>
    5438:	f108 0819 	add.w	r8, r8, #25
    543c:	ae05      	add	r6, sp, #20
    543e:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    5442:	2210      	movs	r2, #16
    5444:	2100      	movs	r1, #0
    5446:	4630      	mov	r0, r6
    5448:	f002 fdb5 	bl	7fb6 <memset>
    544c:	4645      	mov	r5, r8
    544e:	4c7b      	ldr	r4, [pc, #492]	; (563c <block_cipher_df+0x278>)
    5450:	f89d 2014 	ldrb.w	r2, [sp, #20]
    5454:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    5458:	f89d c015 	ldrb.w	ip, [sp, #21]
    545c:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    5460:	f89d 0016 	ldrb.w	r0, [sp, #22]
    5464:	4053      	eors	r3, r2
    5466:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    546a:	ea8c 0c01 	eor.w	ip, ip, r1
    546e:	4050      	eors	r0, r2
    5470:	f89d 1017 	ldrb.w	r1, [sp, #23]
    5474:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    5478:	f89d e018 	ldrb.w	lr, [sp, #24]
    547c:	4051      	eors	r1, r2
    547e:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    5482:	f88d 3014 	strb.w	r3, [sp, #20]
    5486:	ea8e 0202 	eor.w	r2, lr, r2
    548a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    548e:	f89d e019 	ldrb.w	lr, [sp, #25]
    5492:	f88d c015 	strb.w	ip, [sp, #21]
    5496:	ea8e 0303 	eor.w	r3, lr, r3
    549a:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    549e:	f89d e01a 	ldrb.w	lr, [sp, #26]
    54a2:	f88d 0016 	strb.w	r0, [sp, #22]
    54a6:	ea8e 0c0c 	eor.w	ip, lr, ip
    54aa:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    54ae:	f89d e01b 	ldrb.w	lr, [sp, #27]
    54b2:	f88d 1017 	strb.w	r1, [sp, #23]
    54b6:	ea8e 0000 	eor.w	r0, lr, r0
    54ba:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    54be:	f89d e01c 	ldrb.w	lr, [sp, #28]
    54c2:	f88d 2018 	strb.w	r2, [sp, #24]
    54c6:	ea8e 0101 	eor.w	r1, lr, r1
    54ca:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    54ce:	f89d e01d 	ldrb.w	lr, [sp, #29]
    54d2:	f88d 3019 	strb.w	r3, [sp, #25]
    54d6:	ea8e 0202 	eor.w	r2, lr, r2
    54da:	f89d 301e 	ldrb.w	r3, [sp, #30]
    54de:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    54e2:	f88d c01a 	strb.w	ip, [sp, #26]
    54e6:	ea83 030e 	eor.w	r3, r3, lr
    54ea:	f88d 001b 	strb.w	r0, [sp, #27]
    54ee:	f88d 101c 	strb.w	r1, [sp, #28]
    54f2:	f88d 201d 	strb.w	r2, [sp, #29]
    54f6:	f88d 301e 	strb.w	r3, [sp, #30]
    54fa:	f89d 101f 	ldrb.w	r1, [sp, #31]
    54fe:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    5502:	f89d c020 	ldrb.w	ip, [sp, #32]
    5506:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    550a:	404b      	eors	r3, r1
    550c:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    5510:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    5514:	ea8c 0202 	eor.w	r2, ip, r2
    5518:	4041      	eors	r1, r0
    551a:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    551e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    5522:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    5526:	ea8c 0000 	eor.w	r0, ip, r0
    552a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    552e:	f88d 301f 	strb.w	r3, [sp, #31]
    5532:	ea8e 0c0c 	eor.w	ip, lr, ip
    5536:	f88d 2020 	strb.w	r2, [sp, #32]
    553a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    553e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    5542:	4633      	mov	r3, r6
    5544:	4632      	mov	r2, r6
    5546:	2101      	movs	r1, #1
    5548:	a811      	add	r0, sp, #68	; 0x44
    554a:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    554e:	f001 f967 	bl	6820 <cc_mbedtls_aes_crypt_ecb>
    5552:	2d10      	cmp	r5, #16
    5554:	bf94      	ite	ls
    5556:	1b6d      	subls	r5, r5, r5
    5558:	3d10      	subhi	r5, #16
    555a:	2800      	cmp	r0, #0
    555c:	d163      	bne.n	5626 <block_cipher_df+0x262>
    555e:	3410      	adds	r4, #16
    5560:	2d00      	cmp	r5, #0
    5562:	f47f af75 	bne.w	5450 <block_cipher_df+0x8c>
    5566:	eb0b 0007 	add.w	r0, fp, r7
    556a:	2210      	movs	r2, #16
    556c:	4631      	mov	r1, r6
    556e:	f002 fd17 	bl	7fa0 <memcpy>
    5572:	f899 3003 	ldrb.w	r3, [r9, #3]
    5576:	3710      	adds	r7, #16
    5578:	3301      	adds	r3, #1
    557a:	2f20      	cmp	r7, #32
    557c:	f889 3003 	strb.w	r3, [r9, #3]
    5580:	f47f af5f 	bne.w	5442 <block_cipher_df+0x7e>
    5584:	2280      	movs	r2, #128	; 0x80
    5586:	4659      	mov	r1, fp
    5588:	a811      	add	r0, sp, #68	; 0x44
    558a:	f001 f92f 	bl	67ec <cc_mbedtls_aes_setkey_enc>
    558e:	4607      	mov	r7, r0
    5590:	bb68      	cbnz	r0, 55ee <block_cipher_df+0x22a>
    5592:	4654      	mov	r4, sl
    5594:	f10a 0520 	add.w	r5, sl, #32
    5598:	ab0d      	add	r3, sp, #52	; 0x34
    559a:	461a      	mov	r2, r3
    559c:	2101      	movs	r1, #1
    559e:	a811      	add	r0, sp, #68	; 0x44
    55a0:	f001 f93e 	bl	6820 <cc_mbedtls_aes_crypt_ecb>
    55a4:	4607      	mov	r7, r0
    55a6:	bb10      	cbnz	r0, 55ee <block_cipher_df+0x22a>
    55a8:	2210      	movs	r2, #16
    55aa:	4620      	mov	r0, r4
    55ac:	a90d      	add	r1, sp, #52	; 0x34
    55ae:	4414      	add	r4, r2
    55b0:	f002 fcf6 	bl	7fa0 <memcpy>
    55b4:	42ac      	cmp	r4, r5
    55b6:	d1ef      	bne.n	5598 <block_cipher_df+0x1d4>
    55b8:	a811      	add	r0, sp, #68	; 0x44
    55ba:	f001 f911 	bl	67e0 <cc_mbedtls_aes_free>
    55be:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    55c2:	481f      	ldr	r0, [pc, #124]	; (5640 <block_cipher_df+0x27c>)
    55c4:	f7ff fef4 	bl	53b0 <mbedtls_platform_zeroize>
    55c8:	4658      	mov	r0, fp
    55ca:	2120      	movs	r1, #32
    55cc:	f7ff fef0 	bl	53b0 <mbedtls_platform_zeroize>
    55d0:	a801      	add	r0, sp, #4
    55d2:	2110      	movs	r1, #16
    55d4:	f7ff feec 	bl	53b0 <mbedtls_platform_zeroize>
    55d8:	4630      	mov	r0, r6
    55da:	2110      	movs	r1, #16
    55dc:	f7ff fee8 	bl	53b0 <mbedtls_platform_zeroize>
    55e0:	4638      	mov	r0, r7
    55e2:	b02f      	add	sp, #188	; 0xbc
    55e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55e8:	ae05      	add	r6, sp, #20
    55ea:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    55ee:	a811      	add	r0, sp, #68	; 0x44
    55f0:	f001 f8f6 	bl	67e0 <cc_mbedtls_aes_free>
    55f4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    55f8:	4811      	ldr	r0, [pc, #68]	; (5640 <block_cipher_df+0x27c>)
    55fa:	f7ff fed9 	bl	53b0 <mbedtls_platform_zeroize>
    55fe:	4658      	mov	r0, fp
    5600:	2120      	movs	r1, #32
    5602:	f7ff fed5 	bl	53b0 <mbedtls_platform_zeroize>
    5606:	2110      	movs	r1, #16
    5608:	a801      	add	r0, sp, #4
    560a:	f7ff fed1 	bl	53b0 <mbedtls_platform_zeroize>
    560e:	4630      	mov	r0, r6
    5610:	2110      	movs	r1, #16
    5612:	f7ff fecd 	bl	53b0 <mbedtls_platform_zeroize>
    5616:	4650      	mov	r0, sl
    5618:	2120      	movs	r1, #32
    561a:	f7ff fec9 	bl	53b0 <mbedtls_platform_zeroize>
    561e:	4638      	mov	r0, r7
    5620:	b02f      	add	sp, #188	; 0xbc
    5622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5626:	4607      	mov	r7, r0
    5628:	e7e1      	b.n	55ee <block_cipher_df+0x22a>
    562a:	f06f 0737 	mvn.w	r7, #55	; 0x37
    562e:	e7f6      	b.n	561e <block_cipher_df+0x25a>
    5630:	03020100 	.word	0x03020100
    5634:	0b0a0908 	.word	0x0b0a0908
    5638:	07060504 	.word	0x07060504
    563c:	20000a34 	.word	0x20000a34
    5640:	20000a24 	.word	0x20000a24

00005644 <ctr_drbg_update_internal>:
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5648:	2220      	movs	r2, #32
    564a:	4604      	mov	r4, r0
    564c:	b088      	sub	sp, #32
    564e:	460d      	mov	r5, r1
    5650:	4668      	mov	r0, sp
    5652:	2100      	movs	r1, #0
    5654:	18a6      	adds	r6, r4, r2
    5656:	466f      	mov	r7, sp
    5658:	f002 fcad 	bl	7fb6 <memset>
    565c:	7be2      	ldrb	r2, [r4, #15]
    565e:	3201      	adds	r2, #1
    5660:	b2d2      	uxtb	r2, r2
    5662:	73e2      	strb	r2, [r4, #15]
    5664:	2a00      	cmp	r2, #0
    5666:	d14d      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    5668:	7ba2      	ldrb	r2, [r4, #14]
    566a:	3201      	adds	r2, #1
    566c:	b2d2      	uxtb	r2, r2
    566e:	73a2      	strb	r2, [r4, #14]
    5670:	2a00      	cmp	r2, #0
    5672:	d147      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    5674:	7b63      	ldrb	r3, [r4, #13]
    5676:	3301      	adds	r3, #1
    5678:	b2db      	uxtb	r3, r3
    567a:	7363      	strb	r3, [r4, #13]
    567c:	2b00      	cmp	r3, #0
    567e:	d141      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    5680:	7b23      	ldrb	r3, [r4, #12]
    5682:	3301      	adds	r3, #1
    5684:	b2db      	uxtb	r3, r3
    5686:	7323      	strb	r3, [r4, #12]
    5688:	2b00      	cmp	r3, #0
    568a:	d13b      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    568c:	7ae3      	ldrb	r3, [r4, #11]
    568e:	3301      	adds	r3, #1
    5690:	b2db      	uxtb	r3, r3
    5692:	72e3      	strb	r3, [r4, #11]
    5694:	2b00      	cmp	r3, #0
    5696:	d135      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    5698:	7aa3      	ldrb	r3, [r4, #10]
    569a:	3301      	adds	r3, #1
    569c:	b2db      	uxtb	r3, r3
    569e:	72a3      	strb	r3, [r4, #10]
    56a0:	2b00      	cmp	r3, #0
    56a2:	d12f      	bne.n	5704 <ctr_drbg_update_internal+0xc0>
    56a4:	7a63      	ldrb	r3, [r4, #9]
    56a6:	3301      	adds	r3, #1
    56a8:	b2db      	uxtb	r3, r3
    56aa:	7263      	strb	r3, [r4, #9]
    56ac:	bb53      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56ae:	7a23      	ldrb	r3, [r4, #8]
    56b0:	3301      	adds	r3, #1
    56b2:	b2db      	uxtb	r3, r3
    56b4:	7223      	strb	r3, [r4, #8]
    56b6:	bb2b      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56b8:	79e3      	ldrb	r3, [r4, #7]
    56ba:	3301      	adds	r3, #1
    56bc:	b2db      	uxtb	r3, r3
    56be:	71e3      	strb	r3, [r4, #7]
    56c0:	bb03      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56c2:	79a3      	ldrb	r3, [r4, #6]
    56c4:	3301      	adds	r3, #1
    56c6:	b2db      	uxtb	r3, r3
    56c8:	71a3      	strb	r3, [r4, #6]
    56ca:	b9db      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56cc:	7963      	ldrb	r3, [r4, #5]
    56ce:	3301      	adds	r3, #1
    56d0:	b2db      	uxtb	r3, r3
    56d2:	7163      	strb	r3, [r4, #5]
    56d4:	b9b3      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56d6:	7923      	ldrb	r3, [r4, #4]
    56d8:	3301      	adds	r3, #1
    56da:	b2db      	uxtb	r3, r3
    56dc:	7123      	strb	r3, [r4, #4]
    56de:	b98b      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56e0:	78e3      	ldrb	r3, [r4, #3]
    56e2:	3301      	adds	r3, #1
    56e4:	b2db      	uxtb	r3, r3
    56e6:	70e3      	strb	r3, [r4, #3]
    56e8:	b963      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56ea:	78a3      	ldrb	r3, [r4, #2]
    56ec:	3301      	adds	r3, #1
    56ee:	b2db      	uxtb	r3, r3
    56f0:	70a3      	strb	r3, [r4, #2]
    56f2:	b93b      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56f4:	7863      	ldrb	r3, [r4, #1]
    56f6:	3301      	adds	r3, #1
    56f8:	b2db      	uxtb	r3, r3
    56fa:	7063      	strb	r3, [r4, #1]
    56fc:	b913      	cbnz	r3, 5704 <ctr_drbg_update_internal+0xc0>
    56fe:	7823      	ldrb	r3, [r4, #0]
    5700:	3301      	adds	r3, #1
    5702:	7023      	strb	r3, [r4, #0]
    5704:	463b      	mov	r3, r7
    5706:	4622      	mov	r2, r4
    5708:	2101      	movs	r1, #1
    570a:	4630      	mov	r0, r6
    570c:	f001 f888 	bl	6820 <cc_mbedtls_aes_crypt_ecb>
    5710:	4680      	mov	r8, r0
    5712:	2800      	cmp	r0, #0
    5714:	d12a      	bne.n	576c <ctr_drbg_update_internal+0x128>
    5716:	3710      	adds	r7, #16
    5718:	ab08      	add	r3, sp, #32
    571a:	429f      	cmp	r7, r3
    571c:	d19e      	bne.n	565c <ctr_drbg_update_internal+0x18>
    571e:	9900      	ldr	r1, [sp, #0]
    5720:	682b      	ldr	r3, [r5, #0]
    5722:	686a      	ldr	r2, [r5, #4]
    5724:	404b      	eors	r3, r1
    5726:	9901      	ldr	r1, [sp, #4]
    5728:	4630      	mov	r0, r6
    572a:	404a      	eors	r2, r1
    572c:	68ae      	ldr	r6, [r5, #8]
    572e:	9902      	ldr	r1, [sp, #8]
    5730:	9300      	str	r3, [sp, #0]
    5732:	4071      	eors	r1, r6
    5734:	68eb      	ldr	r3, [r5, #12]
    5736:	9e03      	ldr	r6, [sp, #12]
    5738:	9201      	str	r2, [sp, #4]
    573a:	4073      	eors	r3, r6
    573c:	692a      	ldr	r2, [r5, #16]
    573e:	9e04      	ldr	r6, [sp, #16]
    5740:	9102      	str	r1, [sp, #8]
    5742:	4056      	eors	r6, r2
    5744:	9905      	ldr	r1, [sp, #20]
    5746:	696a      	ldr	r2, [r5, #20]
    5748:	9303      	str	r3, [sp, #12]
    574a:	4051      	eors	r1, r2
    574c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    5750:	9d06      	ldr	r5, [sp, #24]
    5752:	9105      	str	r1, [sp, #20]
    5754:	4055      	eors	r5, r2
    5756:	9a07      	ldr	r2, [sp, #28]
    5758:	4669      	mov	r1, sp
    575a:	4053      	eors	r3, r2
    575c:	2280      	movs	r2, #128	; 0x80
    575e:	e9cd 5306 	strd	r5, r3, [sp, #24]
    5762:	9604      	str	r6, [sp, #16]
    5764:	f001 f842 	bl	67ec <cc_mbedtls_aes_setkey_enc>
    5768:	4680      	mov	r8, r0
    576a:	b138      	cbz	r0, 577c <ctr_drbg_update_internal+0x138>
    576c:	4668      	mov	r0, sp
    576e:	2120      	movs	r1, #32
    5770:	f7ff fe1e 	bl	53b0 <mbedtls_platform_zeroize>
    5774:	4640      	mov	r0, r8
    5776:	b008      	add	sp, #32
    5778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    577c:	2210      	movs	r2, #16
    577e:	4620      	mov	r0, r4
    5780:	eb0d 0102 	add.w	r1, sp, r2
    5784:	f002 fc0c 	bl	7fa0 <memcpy>
    5788:	e7f0      	b.n	576c <ctr_drbg_update_internal+0x128>
    578a:	bf00      	nop

0000578c <mbedtls_ctr_drbg_reseed_internal>:
    578c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5790:	4604      	mov	r4, r0
    5792:	6980      	ldr	r0, [r0, #24]
    5794:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    5798:	d854      	bhi.n	5844 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    579a:	461d      	mov	r5, r3
    579c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    57a0:	42ab      	cmp	r3, r5
    57a2:	d34f      	bcc.n	5844 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    57a4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    57a8:	1a18      	subs	r0, r3, r0
    57aa:	4290      	cmp	r0, r2
    57ac:	4616      	mov	r6, r2
    57ae:	d349      	bcc.n	5844 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    57b0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 5850 <mbedtls_ctr_drbg_reseed_internal+0xc4>
    57b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
    57b8:	460f      	mov	r7, r1
    57ba:	4648      	mov	r0, r9
    57bc:	2100      	movs	r1, #0
    57be:	f002 fbfa 	bl	7fb6 <memset>
    57c2:	4649      	mov	r1, r9
    57c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    57c8:	69a2      	ldr	r2, [r4, #24]
    57ca:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    57ce:	4798      	blx	r3
    57d0:	2800      	cmp	r0, #0
    57d2:	d13a      	bne.n	584a <mbedtls_ctr_drbg_reseed_internal+0xbe>
    57d4:	f8d4 8018 	ldr.w	r8, [r4, #24]
    57d8:	b14d      	cbz	r5, 57ee <mbedtls_ctr_drbg_reseed_internal+0x62>
    57da:	462a      	mov	r2, r5
    57dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    57e0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    57e4:	eb09 0108 	add.w	r1, r9, r8
    57e8:	4798      	blx	r3
    57ea:	bb70      	cbnz	r0, 584a <mbedtls_ctr_drbg_reseed_internal+0xbe>
    57ec:	44a8      	add	r8, r5
    57ee:	b107      	cbz	r7, 57f2 <mbedtls_ctr_drbg_reseed_internal+0x66>
    57f0:	b9c6      	cbnz	r6, 5824 <mbedtls_ctr_drbg_reseed_internal+0x98>
    57f2:	4917      	ldr	r1, [pc, #92]	; (5850 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    57f4:	4642      	mov	r2, r8
    57f6:	4608      	mov	r0, r1
    57f8:	f7ff fde4 	bl	53c4 <block_cipher_df>
    57fc:	4605      	mov	r5, r0
    57fe:	b138      	cbz	r0, 5810 <mbedtls_ctr_drbg_reseed_internal+0x84>
    5800:	f44f 71c0 	mov.w	r1, #384	; 0x180
    5804:	4812      	ldr	r0, [pc, #72]	; (5850 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5806:	f7ff fdd3 	bl	53b0 <mbedtls_platform_zeroize>
    580a:	4628      	mov	r0, r5
    580c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5810:	4620      	mov	r0, r4
    5812:	490f      	ldr	r1, [pc, #60]	; (5850 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5814:	f7ff ff16 	bl	5644 <ctr_drbg_update_internal>
    5818:	4605      	mov	r5, r0
    581a:	2800      	cmp	r0, #0
    581c:	d1f0      	bne.n	5800 <mbedtls_ctr_drbg_reseed_internal+0x74>
    581e:	2301      	movs	r3, #1
    5820:	6123      	str	r3, [r4, #16]
    5822:	e7ed      	b.n	5800 <mbedtls_ctr_drbg_reseed_internal+0x74>
    5824:	4639      	mov	r1, r7
    5826:	4632      	mov	r2, r6
    5828:	eb09 0008 	add.w	r0, r9, r8
    582c:	f002 fbb8 	bl	7fa0 <memcpy>
    5830:	4907      	ldr	r1, [pc, #28]	; (5850 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5832:	44b0      	add	r8, r6
    5834:	4642      	mov	r2, r8
    5836:	4608      	mov	r0, r1
    5838:	f7ff fdc4 	bl	53c4 <block_cipher_df>
    583c:	4605      	mov	r5, r0
    583e:	2800      	cmp	r0, #0
    5840:	d1de      	bne.n	5800 <mbedtls_ctr_drbg_reseed_internal+0x74>
    5842:	e7e5      	b.n	5810 <mbedtls_ctr_drbg_reseed_internal+0x84>
    5844:	f06f 0537 	mvn.w	r5, #55	; 0x37
    5848:	e7df      	b.n	580a <mbedtls_ctr_drbg_reseed_internal+0x7e>
    584a:	f06f 0533 	mvn.w	r5, #51	; 0x33
    584e:	e7dc      	b.n	580a <mbedtls_ctr_drbg_reseed_internal+0x7e>
    5850:	20000bc4 	.word	0x20000bc4

00005854 <cc_mbedtls_ctr_drbg_init>:
    5854:	b510      	push	{r4, lr}
    5856:	22a4      	movs	r2, #164	; 0xa4
    5858:	2100      	movs	r1, #0
    585a:	4604      	mov	r4, r0
    585c:	f002 fbab 	bl	7fb6 <memset>
    5860:	f04f 31ff 	mov.w	r1, #4294967295
    5864:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    5868:	4b04      	ldr	r3, [pc, #16]	; (587c <cc_mbedtls_ctr_drbg_init+0x28>)
    586a:	6121      	str	r1, [r4, #16]
    586c:	61e2      	str	r2, [r4, #28]
    586e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5878:	4718      	bx	r3
    587a:	bf00      	nop
    587c:	200000c0 	.word	0x200000c0

00005880 <cc_mbedtls_ctr_drbg_seed>:
    5880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5884:	4605      	mov	r5, r0
    5886:	b085      	sub	sp, #20
    5888:	460f      	mov	r7, r1
    588a:	4616      	mov	r6, r2
    588c:	4668      	mov	r0, sp
    588e:	2210      	movs	r2, #16
    5890:	2100      	movs	r1, #0
    5892:	4699      	mov	r9, r3
    5894:	f002 fb8f 	bl	7fb6 <memset>
    5898:	4b1e      	ldr	r3, [pc, #120]	; (5914 <cc_mbedtls_ctr_drbg_seed+0x94>)
    589a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    589e:	4640      	mov	r0, r8
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	4798      	blx	r3
    58a4:	b120      	cbz	r0, 58b0 <cc_mbedtls_ctr_drbg_seed+0x30>
    58a6:	4604      	mov	r4, r0
    58a8:	4620      	mov	r0, r4
    58aa:	b005      	add	sp, #20
    58ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58b0:	f105 0420 	add.w	r4, r5, #32
    58b4:	4620      	mov	r0, r4
    58b6:	f000 ff83 	bl	67c0 <cc_mbedtls_aes_init>
    58ba:	69aa      	ldr	r2, [r5, #24]
    58bc:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    58c0:	b9ea      	cbnz	r2, 58fe <cc_mbedtls_ctr_drbg_seed+0x7e>
    58c2:	2220      	movs	r2, #32
    58c4:	692e      	ldr	r6, [r5, #16]
    58c6:	61aa      	str	r2, [r5, #24]
    58c8:	2e00      	cmp	r6, #0
    58ca:	db20      	blt.n	590e <cc_mbedtls_ctr_drbg_seed+0x8e>
    58cc:	4620      	mov	r0, r4
    58ce:	4669      	mov	r1, sp
    58d0:	2280      	movs	r2, #128	; 0x80
    58d2:	f000 ff8b 	bl	67ec <cc_mbedtls_aes_setkey_enc>
    58d6:	4604      	mov	r4, r0
    58d8:	b930      	cbnz	r0, 58e8 <cc_mbedtls_ctr_drbg_seed+0x68>
    58da:	4633      	mov	r3, r6
    58dc:	4649      	mov	r1, r9
    58de:	4628      	mov	r0, r5
    58e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    58e2:	f7ff ff53 	bl	578c <mbedtls_ctr_drbg_reseed_internal>
    58e6:	4604      	mov	r4, r0
    58e8:	4b0b      	ldr	r3, [pc, #44]	; (5918 <cc_mbedtls_ctr_drbg_seed+0x98>)
    58ea:	4640      	mov	r0, r8
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	4798      	blx	r3
    58f0:	2800      	cmp	r0, #0
    58f2:	bf18      	it	ne
    58f4:	4604      	movne	r4, r0
    58f6:	4620      	mov	r0, r4
    58f8:	b005      	add	sp, #20
    58fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58fe:	692e      	ldr	r6, [r5, #16]
    5900:	2e00      	cmp	r6, #0
    5902:	dae3      	bge.n	58cc <cc_mbedtls_ctr_drbg_seed+0x4c>
    5904:	2a17      	cmp	r2, #23
    5906:	d802      	bhi.n	590e <cc_mbedtls_ctr_drbg_seed+0x8e>
    5908:	1c53      	adds	r3, r2, #1
    590a:	085e      	lsrs	r6, r3, #1
    590c:	e7de      	b.n	58cc <cc_mbedtls_ctr_drbg_seed+0x4c>
    590e:	2600      	movs	r6, #0
    5910:	e7dc      	b.n	58cc <cc_mbedtls_ctr_drbg_seed+0x4c>
    5912:	bf00      	nop
    5914:	200000c4 	.word	0x200000c4
    5918:	200000c8 	.word	0x200000c8

0000591c <cc_mbedtls_ctr_drbg_random_with_add>:
    591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5920:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5924:	b08d      	sub	sp, #52	; 0x34
    5926:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    592a:	f200 80e4 	bhi.w	5af6 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    592e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    5932:	f200 80dd 	bhi.w	5af0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    5936:	4604      	mov	r4, r0
    5938:	4615      	mov	r5, r2
    593a:	460e      	mov	r6, r1
    593c:	2220      	movs	r2, #32
    593e:	2100      	movs	r1, #0
    5940:	a804      	add	r0, sp, #16
    5942:	461f      	mov	r7, r3
    5944:	f002 fb37 	bl	7fb6 <memset>
    5948:	4b6c      	ldr	r3, [pc, #432]	; (5afc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    594a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    594e:	4648      	mov	r0, r9
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	4798      	blx	r3
    5954:	4683      	mov	fp, r0
    5956:	2800      	cmp	r0, #0
    5958:	f040 8093 	bne.w	5a82 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    595c:	6922      	ldr	r2, [r4, #16]
    595e:	69e3      	ldr	r3, [r4, #28]
    5960:	429a      	cmp	r2, r3
    5962:	f300 8092 	bgt.w	5a8a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    5966:	6963      	ldr	r3, [r4, #20]
    5968:	2b00      	cmp	r3, #0
    596a:	f040 808e 	bne.w	5a8a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    596e:	f1b8 0f00 	cmp.w	r8, #0
    5972:	f040 80a9 	bne.w	5ac8 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    5976:	f8df a188 	ldr.w	sl, [pc, #392]	; 5b00 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    597a:	466f      	mov	r7, sp
    597c:	2d00      	cmp	r5, #0
    597e:	f000 8098 	beq.w	5ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    5982:	466f      	mov	r7, sp
    5984:	f104 0820 	add.w	r8, r4, #32
    5988:	e00e      	b.n	59a8 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    598a:	2d10      	cmp	r5, #16
    598c:	46ab      	mov	fp, r5
    598e:	bf28      	it	cs
    5990:	f04f 0b10 	movcs.w	fp, #16
    5994:	4630      	mov	r0, r6
    5996:	4639      	mov	r1, r7
    5998:	465a      	mov	r2, fp
    599a:	f002 fb01 	bl	7fa0 <memcpy>
    599e:	ebb5 050b 	subs.w	r5, r5, fp
    59a2:	445e      	add	r6, fp
    59a4:	f000 8085 	beq.w	5ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    59a8:	7be3      	ldrb	r3, [r4, #15]
    59aa:	3301      	adds	r3, #1
    59ac:	b2db      	uxtb	r3, r3
    59ae:	73e3      	strb	r3, [r4, #15]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d14d      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59b4:	7ba3      	ldrb	r3, [r4, #14]
    59b6:	3301      	adds	r3, #1
    59b8:	b2db      	uxtb	r3, r3
    59ba:	73a3      	strb	r3, [r4, #14]
    59bc:	2b00      	cmp	r3, #0
    59be:	d147      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59c0:	7b63      	ldrb	r3, [r4, #13]
    59c2:	3301      	adds	r3, #1
    59c4:	b2db      	uxtb	r3, r3
    59c6:	7363      	strb	r3, [r4, #13]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d141      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59cc:	7b23      	ldrb	r3, [r4, #12]
    59ce:	3301      	adds	r3, #1
    59d0:	b2db      	uxtb	r3, r3
    59d2:	7323      	strb	r3, [r4, #12]
    59d4:	2b00      	cmp	r3, #0
    59d6:	d13b      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59d8:	7ae3      	ldrb	r3, [r4, #11]
    59da:	3301      	adds	r3, #1
    59dc:	b2db      	uxtb	r3, r3
    59de:	72e3      	strb	r3, [r4, #11]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d135      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59e4:	7aa3      	ldrb	r3, [r4, #10]
    59e6:	3301      	adds	r3, #1
    59e8:	b2db      	uxtb	r3, r3
    59ea:	72a3      	strb	r3, [r4, #10]
    59ec:	2b00      	cmp	r3, #0
    59ee:	d12f      	bne.n	5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59f0:	7a63      	ldrb	r3, [r4, #9]
    59f2:	3301      	adds	r3, #1
    59f4:	b2db      	uxtb	r3, r3
    59f6:	7263      	strb	r3, [r4, #9]
    59f8:	bb53      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    59fa:	7a23      	ldrb	r3, [r4, #8]
    59fc:	3301      	adds	r3, #1
    59fe:	b2db      	uxtb	r3, r3
    5a00:	7223      	strb	r3, [r4, #8]
    5a02:	bb2b      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a04:	79e3      	ldrb	r3, [r4, #7]
    5a06:	3301      	adds	r3, #1
    5a08:	b2db      	uxtb	r3, r3
    5a0a:	71e3      	strb	r3, [r4, #7]
    5a0c:	bb03      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a0e:	79a3      	ldrb	r3, [r4, #6]
    5a10:	3301      	adds	r3, #1
    5a12:	b2db      	uxtb	r3, r3
    5a14:	71a3      	strb	r3, [r4, #6]
    5a16:	b9db      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a18:	7963      	ldrb	r3, [r4, #5]
    5a1a:	3301      	adds	r3, #1
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	7163      	strb	r3, [r4, #5]
    5a20:	b9b3      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a22:	7923      	ldrb	r3, [r4, #4]
    5a24:	3301      	adds	r3, #1
    5a26:	b2db      	uxtb	r3, r3
    5a28:	7123      	strb	r3, [r4, #4]
    5a2a:	b98b      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a2c:	78e3      	ldrb	r3, [r4, #3]
    5a2e:	3301      	adds	r3, #1
    5a30:	b2db      	uxtb	r3, r3
    5a32:	70e3      	strb	r3, [r4, #3]
    5a34:	b963      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a36:	78a3      	ldrb	r3, [r4, #2]
    5a38:	3301      	adds	r3, #1
    5a3a:	b2db      	uxtb	r3, r3
    5a3c:	70a3      	strb	r3, [r4, #2]
    5a3e:	b93b      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a40:	7863      	ldrb	r3, [r4, #1]
    5a42:	3301      	adds	r3, #1
    5a44:	b2db      	uxtb	r3, r3
    5a46:	7063      	strb	r3, [r4, #1]
    5a48:	b913      	cbnz	r3, 5a50 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5a4a:	7823      	ldrb	r3, [r4, #0]
    5a4c:	3301      	adds	r3, #1
    5a4e:	7023      	strb	r3, [r4, #0]
    5a50:	463b      	mov	r3, r7
    5a52:	4622      	mov	r2, r4
    5a54:	2101      	movs	r1, #1
    5a56:	4640      	mov	r0, r8
    5a58:	f000 fee2 	bl	6820 <cc_mbedtls_aes_crypt_ecb>
    5a5c:	4683      	mov	fp, r0
    5a5e:	2800      	cmp	r0, #0
    5a60:	d093      	beq.n	598a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    5a62:	f8da 3000 	ldr.w	r3, [sl]
    5a66:	4648      	mov	r0, r9
    5a68:	4798      	blx	r3
    5a6a:	4603      	mov	r3, r0
    5a6c:	2120      	movs	r1, #32
    5a6e:	a804      	add	r0, sp, #16
    5a70:	2b00      	cmp	r3, #0
    5a72:	bf18      	it	ne
    5a74:	469b      	movne	fp, r3
    5a76:	f7ff fc9b 	bl	53b0 <mbedtls_platform_zeroize>
    5a7a:	4638      	mov	r0, r7
    5a7c:	2110      	movs	r1, #16
    5a7e:	f7ff fc97 	bl	53b0 <mbedtls_platform_zeroize>
    5a82:	4658      	mov	r0, fp
    5a84:	b00d      	add	sp, #52	; 0x34
    5a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a8a:	4642      	mov	r2, r8
    5a8c:	4639      	mov	r1, r7
    5a8e:	2300      	movs	r3, #0
    5a90:	4620      	mov	r0, r4
    5a92:	f7ff fe7b 	bl	578c <mbedtls_ctr_drbg_reseed_internal>
    5a96:	f8df a068 	ldr.w	sl, [pc, #104]	; 5b00 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5a9a:	2800      	cmp	r0, #0
    5a9c:	f43f af6d 	beq.w	597a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    5aa0:	4648      	mov	r0, r9
    5aa2:	f8da 3000 	ldr.w	r3, [sl]
    5aa6:	4798      	blx	r3
    5aa8:	4683      	mov	fp, r0
    5aaa:	2800      	cmp	r0, #0
    5aac:	f43f af65 	beq.w	597a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    5ab0:	e7e7      	b.n	5a82 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5ab2:	4620      	mov	r0, r4
    5ab4:	a904      	add	r1, sp, #16
    5ab6:	f7ff fdc5 	bl	5644 <ctr_drbg_update_internal>
    5aba:	4683      	mov	fp, r0
    5abc:	2800      	cmp	r0, #0
    5abe:	d1d0      	bne.n	5a62 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5ac0:	6923      	ldr	r3, [r4, #16]
    5ac2:	3301      	adds	r3, #1
    5ac4:	6123      	str	r3, [r4, #16]
    5ac6:	e7cc      	b.n	5a62 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5ac8:	4642      	mov	r2, r8
    5aca:	4639      	mov	r1, r7
    5acc:	a804      	add	r0, sp, #16
    5ace:	f7ff fc79 	bl	53c4 <block_cipher_df>
    5ad2:	4683      	mov	fp, r0
    5ad4:	b118      	cbz	r0, 5ade <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    5ad6:	466f      	mov	r7, sp
    5ad8:	f8df a024 	ldr.w	sl, [pc, #36]	; 5b00 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5adc:	e7c1      	b.n	5a62 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5ade:	4620      	mov	r0, r4
    5ae0:	a904      	add	r1, sp, #16
    5ae2:	f7ff fdaf 	bl	5644 <ctr_drbg_update_internal>
    5ae6:	4683      	mov	fp, r0
    5ae8:	2800      	cmp	r0, #0
    5aea:	f43f af44 	beq.w	5976 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    5aee:	e7f2      	b.n	5ad6 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    5af0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    5af4:	e7c5      	b.n	5a82 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5af6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    5afa:	e7c2      	b.n	5a82 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5afc:	200000c4 	.word	0x200000c4
    5b00:	200000c8 	.word	0x200000c8

00005b04 <entropy_update>:
    5b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b08:	2b20      	cmp	r3, #32
    5b0a:	461d      	mov	r5, r3
    5b0c:	4606      	mov	r6, r0
    5b0e:	4689      	mov	r9, r1
    5b10:	4690      	mov	r8, r2
    5b12:	b08b      	sub	sp, #44	; 0x2c
    5b14:	d826      	bhi.n	5b64 <entropy_update+0x60>
    5b16:	b2db      	uxtb	r3, r3
    5b18:	af02      	add	r7, sp, #8
    5b1a:	6831      	ldr	r1, [r6, #0]
    5b1c:	f88d 9004 	strb.w	r9, [sp, #4]
    5b20:	f88d 3005 	strb.w	r3, [sp, #5]
    5b24:	f106 0904 	add.w	r9, r6, #4
    5b28:	b921      	cbnz	r1, 5b34 <entropy_update+0x30>
    5b2a:	4648      	mov	r0, r9
    5b2c:	f000 febc 	bl	68a8 <cc_mbedtls_sha256_starts>
    5b30:	4604      	mov	r4, r0
    5b32:	b940      	cbnz	r0, 5b46 <entropy_update+0x42>
    5b34:	2301      	movs	r3, #1
    5b36:	2202      	movs	r2, #2
    5b38:	4648      	mov	r0, r9
    5b3a:	6033      	str	r3, [r6, #0]
    5b3c:	a901      	add	r1, sp, #4
    5b3e:	f000 fec7 	bl	68d0 <cc_mbedtls_sha256_update>
    5b42:	4604      	mov	r4, r0
    5b44:	b138      	cbz	r0, 5b56 <entropy_update+0x52>
    5b46:	4638      	mov	r0, r7
    5b48:	2120      	movs	r1, #32
    5b4a:	f7ff fc31 	bl	53b0 <mbedtls_platform_zeroize>
    5b4e:	4620      	mov	r0, r4
    5b50:	b00b      	add	sp, #44	; 0x2c
    5b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5b56:	462a      	mov	r2, r5
    5b58:	4641      	mov	r1, r8
    5b5a:	4648      	mov	r0, r9
    5b5c:	f000 feb8 	bl	68d0 <cc_mbedtls_sha256_update>
    5b60:	4604      	mov	r4, r0
    5b62:	e7f0      	b.n	5b46 <entropy_update+0x42>
    5b64:	af02      	add	r7, sp, #8
    5b66:	4619      	mov	r1, r3
    5b68:	4610      	mov	r0, r2
    5b6a:	2300      	movs	r3, #0
    5b6c:	463a      	mov	r2, r7
    5b6e:	f000 ffb1 	bl	6ad4 <cc_mbedtls_sha256>
    5b72:	4604      	mov	r4, r0
    5b74:	2800      	cmp	r0, #0
    5b76:	d1e6      	bne.n	5b46 <entropy_update+0x42>
    5b78:	2320      	movs	r3, #32
    5b7a:	46b8      	mov	r8, r7
    5b7c:	461d      	mov	r5, r3
    5b7e:	e7cc      	b.n	5b1a <entropy_update+0x16>

00005b80 <entropy_gather_internal.part.0>:
    5b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b82:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5b86:	b0a7      	sub	sp, #156	; 0x9c
    5b88:	2b00      	cmp	r3, #0
    5b8a:	bfd8      	it	le
    5b8c:	ae02      	addle	r6, sp, #8
    5b8e:	dd2c      	ble.n	5bea <entropy_gather_internal.part.0+0x6a>
    5b90:	4605      	mov	r5, r0
    5b92:	2300      	movs	r3, #0
    5b94:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    5b98:	ae02      	add	r6, sp, #8
    5b9a:	9301      	str	r3, [sp, #4]
    5b9c:	f1a4 0701 	sub.w	r7, r4, #1
    5ba0:	4631      	mov	r1, r6
    5ba2:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    5ba6:	2290      	movs	r2, #144	; 0x90
    5ba8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    5bac:	ab01      	add	r3, sp, #4
    5bae:	fab7 f787 	clz	r7, r7
    5bb2:	47a0      	blx	r4
    5bb4:	097f      	lsrs	r7, r7, #5
    5bb6:	4604      	mov	r4, r0
    5bb8:	b910      	cbnz	r0, 5bc0 <entropy_gather_internal.part.0+0x40>
    5bba:	9b01      	ldr	r3, [sp, #4]
    5bbc:	b93b      	cbnz	r3, 5bce <entropy_gather_internal.part.0+0x4e>
    5bbe:	b1a7      	cbz	r7, 5bea <entropy_gather_internal.part.0+0x6a>
    5bc0:	4630      	mov	r0, r6
    5bc2:	2190      	movs	r1, #144	; 0x90
    5bc4:	f7ff fbf4 	bl	53b0 <mbedtls_platform_zeroize>
    5bc8:	4620      	mov	r0, r4
    5bca:	b027      	add	sp, #156	; 0x9c
    5bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bce:	4601      	mov	r1, r0
    5bd0:	4632      	mov	r2, r6
    5bd2:	4628      	mov	r0, r5
    5bd4:	f7ff ff96 	bl	5b04 <entropy_update>
    5bd8:	b950      	cbnz	r0, 5bf0 <entropy_gather_internal.part.0+0x70>
    5bda:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    5bde:	9a01      	ldr	r2, [sp, #4]
    5be0:	4413      	add	r3, r2
    5be2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    5be6:	2f00      	cmp	r7, #0
    5be8:	d1ea      	bne.n	5bc0 <entropy_gather_internal.part.0+0x40>
    5bea:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    5bee:	e7e7      	b.n	5bc0 <entropy_gather_internal.part.0+0x40>
    5bf0:	4604      	mov	r4, r0
    5bf2:	4620      	mov	r0, r4
    5bf4:	b027      	add	sp, #156	; 0x9c
    5bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005bf8 <cc_mbedtls_entropy_init>:
    5bf8:	b570      	push	{r4, r5, r6, lr}
    5bfa:	2500      	movs	r5, #0
    5bfc:	4604      	mov	r4, r0
    5bfe:	4629      	mov	r1, r5
    5c00:	2214      	movs	r2, #20
    5c02:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    5c06:	30f8      	adds	r0, #248	; 0xf8
    5c08:	f002 f9d5 	bl	7fb6 <memset>
    5c0c:	4b16      	ldr	r3, [pc, #88]	; (5c68 <cc_mbedtls_entropy_init+0x70>)
    5c0e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	4630      	mov	r0, r6
    5c16:	4798      	blx	r3
    5c18:	4620      	mov	r0, r4
    5c1a:	f840 5b04 	str.w	r5, [r0], #4
    5c1e:	f000 fe29 	bl	6874 <cc_mbedtls_sha256_init>
    5c22:	4b12      	ldr	r3, [pc, #72]	; (5c6c <cc_mbedtls_entropy_init+0x74>)
    5c24:	4630      	mov	r0, r6
    5c26:	681b      	ldr	r3, [r3, #0]
    5c28:	4798      	blx	r3
    5c2a:	b9d8      	cbnz	r0, 5c64 <cc_mbedtls_entropy_init+0x6c>
    5c2c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5c30:	42ab      	cmp	r3, r5
    5c32:	dc11      	bgt.n	5c58 <cc_mbedtls_entropy_init+0x60>
    5c34:	2101      	movs	r1, #1
    5c36:	2520      	movs	r5, #32
    5c38:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5c3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    5c40:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    5c44:	480a      	ldr	r0, [pc, #40]	; (5c70 <cc_mbedtls_entropy_init+0x78>)
    5c46:	440b      	add	r3, r1
    5c48:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    5c4c:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    5c50:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    5c54:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    5c58:	4b06      	ldr	r3, [pc, #24]	; (5c74 <cc_mbedtls_entropy_init+0x7c>)
    5c5a:	4630      	mov	r0, r6
    5c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c60:	681b      	ldr	r3, [r3, #0]
    5c62:	4718      	bx	r3
    5c64:	bd70      	pop	{r4, r5, r6, pc}
    5c66:	bf00      	nop
    5c68:	200000c0 	.word	0x200000c0
    5c6c:	200000c4 	.word	0x200000c4
    5c70:	000066bd 	.word	0x000066bd
    5c74:	200000c8 	.word	0x200000c8

00005c78 <cc_mbedtls_entropy_func>:
    5c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c7c:	2a20      	cmp	r2, #32
    5c7e:	b088      	sub	sp, #32
    5c80:	d878      	bhi.n	5d74 <cc_mbedtls_entropy_func+0xfc>
    5c82:	4b3e      	ldr	r3, [pc, #248]	; (5d7c <cc_mbedtls_entropy_func+0x104>)
    5c84:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    5c88:	4604      	mov	r4, r0
    5c8a:	681b      	ldr	r3, [r3, #0]
    5c8c:	4648      	mov	r0, r9
    5c8e:	4617      	mov	r7, r2
    5c90:	4688      	mov	r8, r1
    5c92:	4798      	blx	r3
    5c94:	4605      	mov	r5, r0
    5c96:	bb40      	cbnz	r0, 5cea <cc_mbedtls_entropy_func+0x72>
    5c98:	f240 1601 	movw	r6, #257	; 0x101
    5c9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d063      	beq.n	5d6c <cc_mbedtls_entropy_func+0xf4>
    5ca4:	4620      	mov	r0, r4
    5ca6:	f7ff ff6b 	bl	5b80 <entropy_gather_internal.part.0>
    5caa:	4605      	mov	r5, r0
    5cac:	2800      	cmp	r0, #0
    5cae:	d15f      	bne.n	5d70 <cc_mbedtls_entropy_func+0xf8>
    5cb0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5cb4:	2b00      	cmp	r3, #0
    5cb6:	dd07      	ble.n	5cc8 <cc_mbedtls_entropy_func+0x50>
    5cb8:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    5cbc:	4290      	cmp	r0, r2
    5cbe:	d303      	bcc.n	5cc8 <cc_mbedtls_entropy_func+0x50>
    5cc0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    5cc4:	2a01      	cmp	r2, #1
    5cc6:	d014      	beq.n	5cf2 <cc_mbedtls_entropy_func+0x7a>
    5cc8:	3e01      	subs	r6, #1
    5cca:	d1e9      	bne.n	5ca0 <cc_mbedtls_entropy_func+0x28>
    5ccc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5cd0:	466e      	mov	r6, sp
    5cd2:	4630      	mov	r0, r6
    5cd4:	2120      	movs	r1, #32
    5cd6:	f7ff fb6b 	bl	53b0 <mbedtls_platform_zeroize>
    5cda:	4b29      	ldr	r3, [pc, #164]	; (5d80 <cc_mbedtls_entropy_func+0x108>)
    5cdc:	4648      	mov	r0, r9
    5cde:	681b      	ldr	r3, [r3, #0]
    5ce0:	4798      	blx	r3
    5ce2:	2800      	cmp	r0, #0
    5ce4:	bf18      	it	ne
    5ce6:	f06f 051d 	mvnne.w	r5, #29
    5cea:	4628      	mov	r0, r5
    5cec:	b008      	add	sp, #32
    5cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cf2:	281f      	cmp	r0, #31
    5cf4:	d9e8      	bls.n	5cc8 <cc_mbedtls_entropy_func+0x50>
    5cf6:	466e      	mov	r6, sp
    5cf8:	4629      	mov	r1, r5
    5cfa:	2220      	movs	r2, #32
    5cfc:	4630      	mov	r0, r6
    5cfe:	f104 0a04 	add.w	sl, r4, #4
    5d02:	f002 f958 	bl	7fb6 <memset>
    5d06:	4631      	mov	r1, r6
    5d08:	4650      	mov	r0, sl
    5d0a:	f000 fe0b 	bl	6924 <cc_mbedtls_sha256_finish>
    5d0e:	4605      	mov	r5, r0
    5d10:	2800      	cmp	r0, #0
    5d12:	d1de      	bne.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d14:	4650      	mov	r0, sl
    5d16:	f000 fdc1 	bl	689c <cc_mbedtls_sha256_free>
    5d1a:	4650      	mov	r0, sl
    5d1c:	f000 fdaa 	bl	6874 <cc_mbedtls_sha256_init>
    5d20:	4629      	mov	r1, r5
    5d22:	4650      	mov	r0, sl
    5d24:	f000 fdc0 	bl	68a8 <cc_mbedtls_sha256_starts>
    5d28:	4605      	mov	r5, r0
    5d2a:	2800      	cmp	r0, #0
    5d2c:	d1d1      	bne.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d2e:	4650      	mov	r0, sl
    5d30:	2220      	movs	r2, #32
    5d32:	4631      	mov	r1, r6
    5d34:	f000 fdcc 	bl	68d0 <cc_mbedtls_sha256_update>
    5d38:	4605      	mov	r5, r0
    5d3a:	2800      	cmp	r0, #0
    5d3c:	d1c9      	bne.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d3e:	4603      	mov	r3, r0
    5d40:	4632      	mov	r2, r6
    5d42:	2120      	movs	r1, #32
    5d44:	4630      	mov	r0, r6
    5d46:	f000 fec5 	bl	6ad4 <cc_mbedtls_sha256>
    5d4a:	4605      	mov	r5, r0
    5d4c:	2800      	cmp	r0, #0
    5d4e:	d1c0      	bne.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d50:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5d54:	463a      	mov	r2, r7
    5d56:	2b00      	cmp	r3, #0
    5d58:	bfc8      	it	gt
    5d5a:	2300      	movgt	r3, #0
    5d5c:	4640      	mov	r0, r8
    5d5e:	4631      	mov	r1, r6
    5d60:	bfc8      	it	gt
    5d62:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    5d66:	f002 f91b 	bl	7fa0 <memcpy>
    5d6a:	e7b2      	b.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d6c:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    5d70:	466e      	mov	r6, sp
    5d72:	e7ae      	b.n	5cd2 <cc_mbedtls_entropy_func+0x5a>
    5d74:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5d78:	e7b7      	b.n	5cea <cc_mbedtls_entropy_func+0x72>
    5d7a:	bf00      	nop
    5d7c:	200000c4 	.word	0x200000c4
    5d80:	200000c8 	.word	0x200000c8

00005d84 <RndStartupTest.constprop.0>:
    5d84:	b530      	push	{r4, r5, lr}
    5d86:	b0c3      	sub	sp, #268	; 0x10c
    5d88:	22dc      	movs	r2, #220	; 0xdc
    5d8a:	2100      	movs	r1, #0
    5d8c:	a80b      	add	r0, sp, #44	; 0x2c
    5d8e:	f002 f912 	bl	7fb6 <memset>
    5d92:	2228      	movs	r2, #40	; 0x28
    5d94:	2100      	movs	r1, #0
    5d96:	a801      	add	r0, sp, #4
    5d98:	f002 f90d 	bl	7fb6 <memset>
    5d9c:	a801      	add	r0, sp, #4
    5d9e:	f000 fec1 	bl	6b24 <RNG_PLAT_SetUserRngParameters>
    5da2:	4604      	mov	r4, r0
    5da4:	b110      	cbz	r0, 5dac <RndStartupTest.constprop.0+0x28>
    5da6:	4620      	mov	r0, r4
    5da8:	b043      	add	sp, #268	; 0x10c
    5daa:	bd30      	pop	{r4, r5, pc}
    5dac:	4d18      	ldr	r5, [pc, #96]	; (5e10 <RndStartupTest.constprop.0+0x8c>)
    5dae:	f04f 31ff 	mov.w	r1, #4294967295
    5db2:	6828      	ldr	r0, [r5, #0]
    5db4:	f000 f93a 	bl	602c <CC_PalMutexLock>
    5db8:	4604      	mov	r4, r0
    5dba:	b9c0      	cbnz	r0, 5dee <RndStartupTest.constprop.0+0x6a>
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 f965 	bl	608c <CC_PalPowerSaveModeSelect>
    5dc2:	bb00      	cbnz	r0, 5e06 <RndStartupTest.constprop.0+0x82>
    5dc4:	4a13      	ldr	r2, [pc, #76]	; (5e14 <RndStartupTest.constprop.0+0x90>)
    5dc6:	a901      	add	r1, sp, #4
    5dc8:	a80b      	add	r0, sp, #44	; 0x2c
    5dca:	f000 fc69 	bl	66a0 <LLF_RND_RunTrngStartupTest>
    5dce:	4604      	mov	r4, r0
    5dd0:	2001      	movs	r0, #1
    5dd2:	f000 f95b 	bl	608c <CC_PalPowerSaveModeSelect>
    5dd6:	b990      	cbnz	r0, 5dfe <RndStartupTest.constprop.0+0x7a>
    5dd8:	6828      	ldr	r0, [r5, #0]
    5dda:	f000 f92f 	bl	603c <CC_PalMutexUnlock>
    5dde:	2800      	cmp	r0, #0
    5de0:	d0e1      	beq.n	5da6 <RndStartupTest.constprop.0+0x22>
    5de2:	480d      	ldr	r0, [pc, #52]	; (5e18 <RndStartupTest.constprop.0+0x94>)
    5de4:	f7ff f9d8 	bl	5198 <CC_PalAbort>
    5de8:	4620      	mov	r0, r4
    5dea:	b043      	add	sp, #268	; 0x10c
    5dec:	bd30      	pop	{r4, r5, pc}
    5dee:	480b      	ldr	r0, [pc, #44]	; (5e1c <RndStartupTest.constprop.0+0x98>)
    5df0:	f7ff f9d2 	bl	5198 <CC_PalAbort>
    5df4:	2c01      	cmp	r4, #1
    5df6:	bf08      	it	eq
    5df8:	2405      	moveq	r4, #5
    5dfa:	d0ed      	beq.n	5dd8 <RndStartupTest.constprop.0+0x54>
    5dfc:	e7de      	b.n	5dbc <RndStartupTest.constprop.0+0x38>
    5dfe:	4808      	ldr	r0, [pc, #32]	; (5e20 <RndStartupTest.constprop.0+0x9c>)
    5e00:	f7ff f9ca 	bl	5198 <CC_PalAbort>
    5e04:	e7e8      	b.n	5dd8 <RndStartupTest.constprop.0+0x54>
    5e06:	4807      	ldr	r0, [pc, #28]	; (5e24 <RndStartupTest.constprop.0+0xa0>)
    5e08:	f7ff f9c6 	bl	5198 <CC_PalAbort>
    5e0c:	e7da      	b.n	5dc4 <RndStartupTest.constprop.0+0x40>
    5e0e:	bf00      	nop
    5e10:	200000bc 	.word	0x200000bc
    5e14:	20000dac 	.word	0x20000dac
    5e18:	00008a30 	.word	0x00008a30
    5e1c:	000089d8 	.word	0x000089d8
    5e20:	00008a10 	.word	0x00008a10
    5e24:	000089f0 	.word	0x000089f0

00005e28 <CC_LibInit>:
    5e28:	b510      	push	{r4, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	f000 f854 	bl	5ed8 <CC_HalInit>
    5e30:	b128      	cbz	r0, 5e3e <CC_LibInit+0x16>
    5e32:	f000 f8a3 	bl	5f7c <CC_PalTerminate>
    5e36:	2403      	movs	r4, #3
    5e38:	4620      	mov	r0, r4
    5e3a:	b002      	add	sp, #8
    5e3c:	bd10      	pop	{r4, pc}
    5e3e:	f000 f86f 	bl	5f20 <CC_PalInit>
    5e42:	b9d0      	cbnz	r0, 5e7a <CC_LibInit+0x52>
    5e44:	f000 f922 	bl	608c <CC_PalPowerSaveModeSelect>
    5e48:	b9d8      	cbnz	r0, 5e82 <CC_LibInit+0x5a>
    5e4a:	4b1e      	ldr	r3, [pc, #120]	; (5ec4 <CC_LibInit+0x9c>)
    5e4c:	681b      	ldr	r3, [r3, #0]
    5e4e:	0e1b      	lsrs	r3, r3, #24
    5e50:	2bf0      	cmp	r3, #240	; 0xf0
    5e52:	d10a      	bne.n	5e6a <CC_LibInit+0x42>
    5e54:	4a1c      	ldr	r2, [pc, #112]	; (5ec8 <CC_LibInit+0xa0>)
    5e56:	4b1d      	ldr	r3, [pc, #116]	; (5ecc <CC_LibInit+0xa4>)
    5e58:	6812      	ldr	r2, [r2, #0]
    5e5a:	429a      	cmp	r2, r3
    5e5c:	d029      	beq.n	5eb2 <CC_LibInit+0x8a>
    5e5e:	f000 f83d 	bl	5edc <CC_HalTerminate>
    5e62:	2407      	movs	r4, #7
    5e64:	f000 f88a 	bl	5f7c <CC_PalTerminate>
    5e68:	e7e6      	b.n	5e38 <CC_LibInit+0x10>
    5e6a:	2406      	movs	r4, #6
    5e6c:	f000 f836 	bl	5edc <CC_HalTerminate>
    5e70:	f000 f884 	bl	5f7c <CC_PalTerminate>
    5e74:	4620      	mov	r0, r4
    5e76:	b002      	add	sp, #8
    5e78:	bd10      	pop	{r4, pc}
    5e7a:	2404      	movs	r4, #4
    5e7c:	4620      	mov	r0, r4
    5e7e:	b002      	add	sp, #8
    5e80:	bd10      	pop	{r4, pc}
    5e82:	f000 f82b 	bl	5edc <CC_HalTerminate>
    5e86:	f000 f879 	bl	5f7c <CC_PalTerminate>
    5e8a:	f7ff ff7b 	bl	5d84 <RndStartupTest.constprop.0>
    5e8e:	4604      	mov	r4, r0
    5e90:	b958      	cbnz	r0, 5eaa <CC_LibInit+0x82>
    5e92:	4602      	mov	r2, r0
    5e94:	4601      	mov	r1, r0
    5e96:	f7ff f9a3 	bl	51e0 <nrf_cc3xx_platform_ctr_drbg_init>
    5e9a:	b930      	cbnz	r0, 5eaa <CC_LibInit+0x82>
    5e9c:	2268      	movs	r2, #104	; 0x68
    5e9e:	490c      	ldr	r1, [pc, #48]	; (5ed0 <CC_LibInit+0xa8>)
    5ea0:	ab01      	add	r3, sp, #4
    5ea2:	f7ff f9d1 	bl	5248 <nrf_cc3xx_platform_ctr_drbg_get>
    5ea6:	2800      	cmp	r0, #0
    5ea8:	d0c6      	beq.n	5e38 <CC_LibInit+0x10>
    5eaa:	2405      	movs	r4, #5
    5eac:	4620      	mov	r0, r4
    5eae:	b002      	add	sp, #8
    5eb0:	bd10      	pop	{r4, pc}
    5eb2:	2001      	movs	r0, #1
    5eb4:	f000 f8ea 	bl	608c <CC_PalPowerSaveModeSelect>
    5eb8:	2800      	cmp	r0, #0
    5eba:	d1e2      	bne.n	5e82 <CC_LibInit+0x5a>
    5ebc:	4b05      	ldr	r3, [pc, #20]	; (5ed4 <CC_LibInit+0xac>)
    5ebe:	6018      	str	r0, [r3, #0]
    5ec0:	e7e3      	b.n	5e8a <CC_LibInit+0x62>
    5ec2:	bf00      	nop
    5ec4:	50841928 	.word	0x50841928
    5ec8:	50841a24 	.word	0x50841a24
    5ecc:	20e00000 	.word	0x20e00000
    5ed0:	20000d44 	.word	0x20000d44
    5ed4:	50841a0c 	.word	0x50841a0c

00005ed8 <CC_HalInit>:
    5ed8:	2000      	movs	r0, #0
    5eda:	4770      	bx	lr

00005edc <CC_HalTerminate>:
    5edc:	2000      	movs	r0, #0
    5ede:	4770      	bx	lr

00005ee0 <CC_HalClearInterruptBit>:
    5ee0:	0543      	lsls	r3, r0, #21
    5ee2:	d503      	bpl.n	5eec <CC_HalClearInterruptBit+0xc>
    5ee4:	f04f 32ff 	mov.w	r2, #4294967295
    5ee8:	4b02      	ldr	r3, [pc, #8]	; (5ef4 <CC_HalClearInterruptBit+0x14>)
    5eea:	601a      	str	r2, [r3, #0]
    5eec:	4b02      	ldr	r3, [pc, #8]	; (5ef8 <CC_HalClearInterruptBit+0x18>)
    5eee:	6018      	str	r0, [r3, #0]
    5ef0:	4770      	bx	lr
    5ef2:	bf00      	nop
    5ef4:	50841108 	.word	0x50841108
    5ef8:	50841a08 	.word	0x50841a08

00005efc <CC_HalMaskInterrupt>:
    5efc:	4b01      	ldr	r3, [pc, #4]	; (5f04 <CC_HalMaskInterrupt+0x8>)
    5efe:	6018      	str	r0, [r3, #0]
    5f00:	4770      	bx	lr
    5f02:	bf00      	nop
    5f04:	50841a04 	.word	0x50841a04

00005f08 <CC_HalWaitInterrupt>:
    5f08:	b108      	cbz	r0, 5f0e <CC_HalWaitInterrupt+0x6>
    5f0a:	f000 b86d 	b.w	5fe8 <CC_PalWaitInterrupt>
    5f0e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5f12:	4770      	bx	lr

00005f14 <CC_HalWaitInterruptRND>:
    5f14:	b108      	cbz	r0, 5f1a <CC_HalWaitInterruptRND+0x6>
    5f16:	f000 b84f 	b.w	5fb8 <CC_PalWaitInterruptRND>
    5f1a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5f1e:	4770      	bx	lr

00005f20 <CC_PalInit>:
    5f20:	b510      	push	{r4, lr}
    5f22:	4811      	ldr	r0, [pc, #68]	; (5f68 <CC_PalInit+0x48>)
    5f24:	f000 f86e 	bl	6004 <CC_PalMutexCreate>
    5f28:	b100      	cbz	r0, 5f2c <CC_PalInit+0xc>
    5f2a:	bd10      	pop	{r4, pc}
    5f2c:	480f      	ldr	r0, [pc, #60]	; (5f6c <CC_PalInit+0x4c>)
    5f2e:	f000 f869 	bl	6004 <CC_PalMutexCreate>
    5f32:	2800      	cmp	r0, #0
    5f34:	d1f9      	bne.n	5f2a <CC_PalInit+0xa>
    5f36:	4c0e      	ldr	r4, [pc, #56]	; (5f70 <CC_PalInit+0x50>)
    5f38:	4620      	mov	r0, r4
    5f3a:	f000 f863 	bl	6004 <CC_PalMutexCreate>
    5f3e:	2800      	cmp	r0, #0
    5f40:	d1f3      	bne.n	5f2a <CC_PalInit+0xa>
    5f42:	4b0c      	ldr	r3, [pc, #48]	; (5f74 <CC_PalInit+0x54>)
    5f44:	480c      	ldr	r0, [pc, #48]	; (5f78 <CC_PalInit+0x58>)
    5f46:	601c      	str	r4, [r3, #0]
    5f48:	f000 f85c 	bl	6004 <CC_PalMutexCreate>
    5f4c:	4601      	mov	r1, r0
    5f4e:	2800      	cmp	r0, #0
    5f50:	d1eb      	bne.n	5f2a <CC_PalInit+0xa>
    5f52:	f000 f82d 	bl	5fb0 <CC_PalDmaInit>
    5f56:	4604      	mov	r4, r0
    5f58:	b108      	cbz	r0, 5f5e <CC_PalInit+0x3e>
    5f5a:	4620      	mov	r0, r4
    5f5c:	bd10      	pop	{r4, pc}
    5f5e:	f000 f877 	bl	6050 <CC_PalPowerSaveModeInit>
    5f62:	4620      	mov	r0, r4
    5f64:	e7fa      	b.n	5f5c <CC_PalInit+0x3c>
    5f66:	bf00      	nop
    5f68:	200000b8 	.word	0x200000b8
    5f6c:	200000ac 	.word	0x200000ac
    5f70:	200000b4 	.word	0x200000b4
    5f74:	200000bc 	.word	0x200000bc
    5f78:	200000b0 	.word	0x200000b0

00005f7c <CC_PalTerminate>:
    5f7c:	b508      	push	{r3, lr}
    5f7e:	4808      	ldr	r0, [pc, #32]	; (5fa0 <CC_PalTerminate+0x24>)
    5f80:	f000 f84a 	bl	6018 <CC_PalMutexDestroy>
    5f84:	4807      	ldr	r0, [pc, #28]	; (5fa4 <CC_PalTerminate+0x28>)
    5f86:	f000 f847 	bl	6018 <CC_PalMutexDestroy>
    5f8a:	4807      	ldr	r0, [pc, #28]	; (5fa8 <CC_PalTerminate+0x2c>)
    5f8c:	f000 f844 	bl	6018 <CC_PalMutexDestroy>
    5f90:	4806      	ldr	r0, [pc, #24]	; (5fac <CC_PalTerminate+0x30>)
    5f92:	f000 f841 	bl	6018 <CC_PalMutexDestroy>
    5f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5f9a:	f000 b80b 	b.w	5fb4 <CC_PalDmaTerminate>
    5f9e:	bf00      	nop
    5fa0:	200000b8 	.word	0x200000b8
    5fa4:	200000ac 	.word	0x200000ac
    5fa8:	200000b4 	.word	0x200000b4
    5fac:	200000b0 	.word	0x200000b0

00005fb0 <CC_PalDmaInit>:
    5fb0:	2000      	movs	r0, #0
    5fb2:	4770      	bx	lr

00005fb4 <CC_PalDmaTerminate>:
    5fb4:	4770      	bx	lr
    5fb6:	bf00      	nop

00005fb8 <CC_PalWaitInterruptRND>:
    5fb8:	4602      	mov	r2, r0
    5fba:	4807      	ldr	r0, [pc, #28]	; (5fd8 <CC_PalWaitInterruptRND+0x20>)
    5fbc:	6803      	ldr	r3, [r0, #0]
    5fbe:	4213      	tst	r3, r2
    5fc0:	d0fc      	beq.n	5fbc <CC_PalWaitInterruptRND+0x4>
    5fc2:	b121      	cbz	r1, 5fce <CC_PalWaitInterruptRND+0x16>
    5fc4:	4b05      	ldr	r3, [pc, #20]	; (5fdc <CC_PalWaitInterruptRND+0x24>)
    5fc6:	4806      	ldr	r0, [pc, #24]	; (5fe0 <CC_PalWaitInterruptRND+0x28>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	600b      	str	r3, [r1, #0]
    5fcc:	6003      	str	r3, [r0, #0]
    5fce:	4b05      	ldr	r3, [pc, #20]	; (5fe4 <CC_PalWaitInterruptRND+0x2c>)
    5fd0:	2000      	movs	r0, #0
    5fd2:	601a      	str	r2, [r3, #0]
    5fd4:	4770      	bx	lr
    5fd6:	bf00      	nop
    5fd8:	50841a00 	.word	0x50841a00
    5fdc:	50841104 	.word	0x50841104
    5fe0:	50841108 	.word	0x50841108
    5fe4:	50841a08 	.word	0x50841a08

00005fe8 <CC_PalWaitInterrupt>:
    5fe8:	4602      	mov	r2, r0
    5fea:	4904      	ldr	r1, [pc, #16]	; (5ffc <CC_PalWaitInterrupt+0x14>)
    5fec:	680b      	ldr	r3, [r1, #0]
    5fee:	421a      	tst	r2, r3
    5ff0:	d0fc      	beq.n	5fec <CC_PalWaitInterrupt+0x4>
    5ff2:	4b03      	ldr	r3, [pc, #12]	; (6000 <CC_PalWaitInterrupt+0x18>)
    5ff4:	2000      	movs	r0, #0
    5ff6:	601a      	str	r2, [r3, #0]
    5ff8:	4770      	bx	lr
    5ffa:	bf00      	nop
    5ffc:	50841a00 	.word	0x50841a00
    6000:	50841a08 	.word	0x50841a08

00006004 <CC_PalMutexCreate>:
    6004:	b508      	push	{r3, lr}
    6006:	4b03      	ldr	r3, [pc, #12]	; (6014 <CC_PalMutexCreate+0x10>)
    6008:	6802      	ldr	r2, [r0, #0]
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	6810      	ldr	r0, [r2, #0]
    600e:	4798      	blx	r3
    6010:	2000      	movs	r0, #0
    6012:	bd08      	pop	{r3, pc}
    6014:	2000006c 	.word	0x2000006c

00006018 <CC_PalMutexDestroy>:
    6018:	b508      	push	{r3, lr}
    601a:	4b03      	ldr	r3, [pc, #12]	; (6028 <CC_PalMutexDestroy+0x10>)
    601c:	6802      	ldr	r2, [r0, #0]
    601e:	685b      	ldr	r3, [r3, #4]
    6020:	6810      	ldr	r0, [r2, #0]
    6022:	4798      	blx	r3
    6024:	2000      	movs	r0, #0
    6026:	bd08      	pop	{r3, pc}
    6028:	2000006c 	.word	0x2000006c

0000602c <CC_PalMutexLock>:
    602c:	4b02      	ldr	r3, [pc, #8]	; (6038 <CC_PalMutexLock+0xc>)
    602e:	6802      	ldr	r2, [r0, #0]
    6030:	689b      	ldr	r3, [r3, #8]
    6032:	6810      	ldr	r0, [r2, #0]
    6034:	4718      	bx	r3
    6036:	bf00      	nop
    6038:	2000006c 	.word	0x2000006c

0000603c <CC_PalMutexUnlock>:
    603c:	b508      	push	{r3, lr}
    603e:	4b03      	ldr	r3, [pc, #12]	; (604c <CC_PalMutexUnlock+0x10>)
    6040:	6802      	ldr	r2, [r0, #0]
    6042:	68db      	ldr	r3, [r3, #12]
    6044:	6810      	ldr	r0, [r2, #0]
    6046:	4798      	blx	r3
    6048:	2000      	movs	r0, #0
    604a:	bd08      	pop	{r3, pc}
    604c:	2000006c 	.word	0x2000006c

00006050 <CC_PalPowerSaveModeInit>:
    6050:	b570      	push	{r4, r5, r6, lr}
    6052:	4c09      	ldr	r4, [pc, #36]	; (6078 <CC_PalPowerSaveModeInit+0x28>)
    6054:	4d09      	ldr	r5, [pc, #36]	; (607c <CC_PalPowerSaveModeInit+0x2c>)
    6056:	6920      	ldr	r0, [r4, #16]
    6058:	68ab      	ldr	r3, [r5, #8]
    605a:	4798      	blx	r3
    605c:	b118      	cbz	r0, 6066 <CC_PalPowerSaveModeInit+0x16>
    605e:	4b08      	ldr	r3, [pc, #32]	; (6080 <CC_PalPowerSaveModeInit+0x30>)
    6060:	4808      	ldr	r0, [pc, #32]	; (6084 <CC_PalPowerSaveModeInit+0x34>)
    6062:	685b      	ldr	r3, [r3, #4]
    6064:	4798      	blx	r3
    6066:	2100      	movs	r1, #0
    6068:	4a07      	ldr	r2, [pc, #28]	; (6088 <CC_PalPowerSaveModeInit+0x38>)
    606a:	68eb      	ldr	r3, [r5, #12]
    606c:	6011      	str	r1, [r2, #0]
    606e:	6920      	ldr	r0, [r4, #16]
    6070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6074:	4718      	bx	r3
    6076:	bf00      	nop
    6078:	2000007c 	.word	0x2000007c
    607c:	2000006c 	.word	0x2000006c
    6080:	2000005c 	.word	0x2000005c
    6084:	00008a48 	.word	0x00008a48
    6088:	20000fcc 	.word	0x20000fcc

0000608c <CC_PalPowerSaveModeSelect>:
    608c:	b570      	push	{r4, r5, r6, lr}
    608e:	4d1a      	ldr	r5, [pc, #104]	; (60f8 <CC_PalPowerSaveModeSelect+0x6c>)
    6090:	4e1a      	ldr	r6, [pc, #104]	; (60fc <CC_PalPowerSaveModeSelect+0x70>)
    6092:	4604      	mov	r4, r0
    6094:	68b2      	ldr	r2, [r6, #8]
    6096:	6928      	ldr	r0, [r5, #16]
    6098:	4790      	blx	r2
    609a:	b9f0      	cbnz	r0, 60da <CC_PalPowerSaveModeSelect+0x4e>
    609c:	b15c      	cbz	r4, 60b6 <CC_PalPowerSaveModeSelect+0x2a>
    609e:	4c18      	ldr	r4, [pc, #96]	; (6100 <CC_PalPowerSaveModeSelect+0x74>)
    60a0:	6823      	ldr	r3, [r4, #0]
    60a2:	b1ab      	cbz	r3, 60d0 <CC_PalPowerSaveModeSelect+0x44>
    60a4:	2b01      	cmp	r3, #1
    60a6:	d01a      	beq.n	60de <CC_PalPowerSaveModeSelect+0x52>
    60a8:	3b01      	subs	r3, #1
    60aa:	6023      	str	r3, [r4, #0]
    60ac:	6928      	ldr	r0, [r5, #16]
    60ae:	68f3      	ldr	r3, [r6, #12]
    60b0:	4798      	blx	r3
    60b2:	2000      	movs	r0, #0
    60b4:	bd70      	pop	{r4, r5, r6, pc}
    60b6:	4c12      	ldr	r4, [pc, #72]	; (6100 <CC_PalPowerSaveModeSelect+0x74>)
    60b8:	6821      	ldr	r1, [r4, #0]
    60ba:	b939      	cbnz	r1, 60cc <CC_PalPowerSaveModeSelect+0x40>
    60bc:	2001      	movs	r0, #1
    60be:	4b11      	ldr	r3, [pc, #68]	; (6104 <CC_PalPowerSaveModeSelect+0x78>)
    60c0:	4a11      	ldr	r2, [pc, #68]	; (6108 <CC_PalPowerSaveModeSelect+0x7c>)
    60c2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    60c6:	6813      	ldr	r3, [r2, #0]
    60c8:	2b00      	cmp	r3, #0
    60ca:	d1fc      	bne.n	60c6 <CC_PalPowerSaveModeSelect+0x3a>
    60cc:	3101      	adds	r1, #1
    60ce:	6021      	str	r1, [r4, #0]
    60d0:	68f3      	ldr	r3, [r6, #12]
    60d2:	6928      	ldr	r0, [r5, #16]
    60d4:	4798      	blx	r3
    60d6:	2000      	movs	r0, #0
    60d8:	bd70      	pop	{r4, r5, r6, pc}
    60da:	480c      	ldr	r0, [pc, #48]	; (610c <CC_PalPowerSaveModeSelect+0x80>)
    60dc:	bd70      	pop	{r4, r5, r6, pc}
    60de:	4a0a      	ldr	r2, [pc, #40]	; (6108 <CC_PalPowerSaveModeSelect+0x7c>)
    60e0:	6813      	ldr	r3, [r2, #0]
    60e2:	2b00      	cmp	r3, #0
    60e4:	d1fc      	bne.n	60e0 <CC_PalPowerSaveModeSelect+0x54>
    60e6:	4a07      	ldr	r2, [pc, #28]	; (6104 <CC_PalPowerSaveModeSelect+0x78>)
    60e8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    60ec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    60f0:	f7ff ff04 	bl	5efc <CC_HalMaskInterrupt>
    60f4:	6823      	ldr	r3, [r4, #0]
    60f6:	e7d7      	b.n	60a8 <CC_PalPowerSaveModeSelect+0x1c>
    60f8:	2000007c 	.word	0x2000007c
    60fc:	2000006c 	.word	0x2000006c
    6100:	20000fcc 	.word	0x20000fcc
    6104:	50840000 	.word	0x50840000
    6108:	50841910 	.word	0x50841910
    610c:	ffff8fe9 	.word	0xffff8fe9

00006110 <mutex_init>:
    6110:	4b01      	ldr	r3, [pc, #4]	; (6118 <mutex_init+0x8>)
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	4718      	bx	r3
    6116:	bf00      	nop
    6118:	2000006c 	.word	0x2000006c

0000611c <mutex_lock>:
    611c:	4b01      	ldr	r3, [pc, #4]	; (6124 <mutex_lock+0x8>)
    611e:	689b      	ldr	r3, [r3, #8]
    6120:	4718      	bx	r3
    6122:	bf00      	nop
    6124:	2000006c 	.word	0x2000006c

00006128 <mutex_unlock>:
    6128:	4b01      	ldr	r3, [pc, #4]	; (6130 <mutex_unlock+0x8>)
    612a:	68db      	ldr	r3, [r3, #12]
    612c:	4718      	bx	r3
    612e:	bf00      	nop
    6130:	2000006c 	.word	0x2000006c

00006134 <startTrngHW>:
    6134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6138:	2800      	cmp	r0, #0
    613a:	d07c      	beq.n	6236 <startTrngHW+0x102>
    613c:	460c      	mov	r4, r1
    613e:	2900      	cmp	r1, #0
    6140:	d079      	beq.n	6236 <startTrngHW+0x102>
    6142:	461d      	mov	r5, r3
    6144:	2b00      	cmp	r3, #0
    6146:	d076      	beq.n	6236 <startTrngHW+0x102>
    6148:	4606      	mov	r6, r0
    614a:	b122      	cbz	r2, 6156 <startTrngHW+0x22>
    614c:	2201      	movs	r2, #1
    614e:	2300      	movs	r3, #0
    6150:	602a      	str	r2, [r5, #0]
    6152:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    6156:	682b      	ldr	r3, [r5, #0]
    6158:	2b00      	cmp	r3, #0
    615a:	d068      	beq.n	622e <startTrngHW+0xfa>
    615c:	4629      	mov	r1, r5
    615e:	4620      	mov	r0, r4
    6160:	f000 fddc 	bl	6d1c <LLF_RND_GetFastestRosc>
    6164:	4607      	mov	r7, r0
    6166:	2800      	cmp	r0, #0
    6168:	d162      	bne.n	6230 <startTrngHW+0xfc>
    616a:	4621      	mov	r1, r4
    616c:	6828      	ldr	r0, [r5, #0]
    616e:	f000 fdb7 	bl	6ce0 <LLF_RND_GetRoscSampleCnt>
    6172:	4607      	mov	r7, r0
    6174:	2800      	cmp	r0, #0
    6176:	d15b      	bne.n	6230 <startTrngHW+0xfc>
    6178:	682b      	ldr	r3, [r5, #0]
    617a:	2b08      	cmp	r3, #8
    617c:	d06a      	beq.n	6254 <startTrngHW+0x120>
    617e:	2b04      	cmp	r3, #4
    6180:	d06b      	beq.n	625a <startTrngHW+0x126>
    6182:	f1a3 0802 	sub.w	r8, r3, #2
    6186:	fab8 f888 	clz	r8, r8
    618a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    618e:	2301      	movs	r3, #1
    6190:	469c      	mov	ip, r3
    6192:	4a33      	ldr	r2, [pc, #204]	; (6260 <startTrngHW+0x12c>)
    6194:	4933      	ldr	r1, [pc, #204]	; (6264 <startTrngHW+0x130>)
    6196:	6013      	str	r3, [r2, #0]
    6198:	4610      	mov	r0, r2
    619a:	600b      	str	r3, [r1, #0]
    619c:	3a94      	subs	r2, #148	; 0x94
    619e:	f8c0 c000 	str.w	ip, [r0]
    61a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61a4:	6013      	str	r3, [r2, #0]
    61a6:	6811      	ldr	r1, [r2, #0]
    61a8:	428b      	cmp	r3, r1
    61aa:	d1f8      	bne.n	619e <startTrngHW+0x6a>
    61ac:	f04f 0900 	mov.w	r9, #0
    61b0:	4b2d      	ldr	r3, [pc, #180]	; (6268 <startTrngHW+0x134>)
    61b2:	f04f 30ff 	mov.w	r0, #4294967295
    61b6:	f8c3 9000 	str.w	r9, [r3]
    61ba:	f7ff fe91 	bl	5ee0 <CC_HalClearInterruptBit>
    61be:	f06f 021b 	mvn.w	r2, #27
    61c2:	4b2a      	ldr	r3, [pc, #168]	; (626c <startTrngHW+0x138>)
    61c4:	4648      	mov	r0, r9
    61c6:	601a      	str	r2, [r3, #0]
    61c8:	f7ff fe98 	bl	5efc <CC_HalMaskInterrupt>
    61cc:	4a28      	ldr	r2, [pc, #160]	; (6270 <startTrngHW+0x13c>)
    61ce:	4b29      	ldr	r3, [pc, #164]	; (6274 <startTrngHW+0x140>)
    61d0:	f8c2 8000 	str.w	r8, [r2]
    61d4:	6818      	ldr	r0, [r3, #0]
    61d6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    61da:	f7ff fe8f 	bl	5efc <CC_HalMaskInterrupt>
    61de:	220a      	movs	r2, #10
    61e0:	4b25      	ldr	r3, [pc, #148]	; (6278 <startTrngHW+0x144>)
    61e2:	601a      	str	r2, [r3, #0]
    61e4:	9a08      	ldr	r2, [sp, #32]
    61e6:	6923      	ldr	r3, [r4, #16]
    61e8:	2a01      	cmp	r2, #1
    61ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
    61ec:	d027      	beq.n	623e <startTrngHW+0x10a>
    61ee:	4a23      	ldr	r2, [pc, #140]	; (627c <startTrngHW+0x148>)
    61f0:	fba2 2303 	umull	r2, r3, r2, r3
    61f4:	091b      	lsrs	r3, r3, #4
    61f6:	2201      	movs	r2, #1
    61f8:	fb03 f301 	mul.w	r3, r3, r1
    61fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6200:	491f      	ldr	r1, [pc, #124]	; (6280 <startTrngHW+0x14c>)
    6202:	03db      	lsls	r3, r3, #15
    6204:	099b      	lsrs	r3, r3, #6
    6206:	600b      	str	r3, [r1, #0]
    6208:	4b17      	ldr	r3, [pc, #92]	; (6268 <startTrngHW+0x134>)
    620a:	4638      	mov	r0, r7
    620c:	601a      	str	r2, [r3, #0]
    620e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    6212:	682a      	ldr	r2, [r5, #0]
    6214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    621c:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    6220:	682a      	ldr	r2, [r5, #0]
    6222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6226:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    622e:	4f15      	ldr	r7, [pc, #84]	; (6284 <startTrngHW+0x150>)
    6230:	4638      	mov	r0, r7
    6232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6236:	4f14      	ldr	r7, [pc, #80]	; (6288 <startTrngHW+0x154>)
    6238:	4638      	mov	r0, r7
    623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    623e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6242:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    6246:	3201      	adds	r2, #1
    6248:	d002      	beq.n	6250 <startTrngHW+0x11c>
    624a:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    624e:	e7ce      	b.n	61ee <startTrngHW+0xba>
    6250:	2316      	movs	r3, #22
    6252:	e7d0      	b.n	61f6 <startTrngHW+0xc2>
    6254:	f04f 0803 	mov.w	r8, #3
    6258:	e799      	b.n	618e <startTrngHW+0x5a>
    625a:	f04f 0802 	mov.w	r8, #2
    625e:	e796      	b.n	618e <startTrngHW+0x5a>
    6260:	508411c4 	.word	0x508411c4
    6264:	50841140 	.word	0x50841140
    6268:	5084112c 	.word	0x5084112c
    626c:	50841100 	.word	0x50841100
    6270:	5084110c 	.word	0x5084110c
    6274:	50841a04 	.word	0x50841a04
    6278:	50841138 	.word	0x50841138
    627c:	aaaaaaab 	.word	0xaaaaaaab
    6280:	508411d8 	.word	0x508411d8
    6284:	00f10c31 	.word	0x00f10c31
    6288:	00f10c35 	.word	0x00f10c35

0000628c <LLF_RND_RepetitionCounterTest.part.0>:
    628c:	b4f0      	push	{r4, r5, r6, r7}
    628e:	2400      	movs	r4, #0
    6290:	00c9      	lsls	r1, r1, #3
    6292:	4626      	mov	r6, r4
    6294:	4627      	mov	r7, r4
    6296:	f101 3cff 	add.w	ip, r1, #4294967295
    629a:	e006      	b.n	62aa <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    629c:	429f      	cmp	r7, r3
    629e:	d015      	beq.n	62cc <LLF_RND_RepetitionCounterTest.part.0+0x40>
    62a0:	2601      	movs	r6, #1
    62a2:	4565      	cmp	r5, ip
    62a4:	d818      	bhi.n	62d8 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    62a6:	462c      	mov	r4, r5
    62a8:	461f      	mov	r7, r3
    62aa:	0963      	lsrs	r3, r4, #5
    62ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    62b0:	f004 011f 	and.w	r1, r4, #31
    62b4:	40cb      	lsrs	r3, r1
    62b6:	291f      	cmp	r1, #31
    62b8:	f104 0501 	add.w	r5, r4, #1
    62bc:	bf18      	it	ne
    62be:	f003 0301 	andne.w	r3, r3, #1
    62c2:	2c00      	cmp	r4, #0
    62c4:	d1ea      	bne.n	629c <LLF_RND_RepetitionCounterTest.part.0+0x10>
    62c6:	2601      	movs	r6, #1
    62c8:	4635      	mov	r5, r6
    62ca:	e7ec      	b.n	62a6 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    62cc:	3601      	adds	r6, #1
    62ce:	4296      	cmp	r6, r2
    62d0:	d1e7      	bne.n	62a2 <LLF_RND_RepetitionCounterTest.part.0+0x16>
    62d2:	4803      	ldr	r0, [pc, #12]	; (62e0 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    62d4:	bcf0      	pop	{r4, r5, r6, r7}
    62d6:	4770      	bx	lr
    62d8:	2000      	movs	r0, #0
    62da:	bcf0      	pop	{r4, r5, r6, r7}
    62dc:	4770      	bx	lr
    62de:	bf00      	nop
    62e0:	00f10c36 	.word	0x00f10c36

000062e4 <LLF_RND_AdaptiveProportionTest>:
    62e4:	2800      	cmp	r0, #0
    62e6:	d05f      	beq.n	63a8 <LLF_RND_AdaptiveProportionTest+0xc4>
    62e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62ec:	1e4c      	subs	r4, r1, #1
    62ee:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    62f2:	d226      	bcs.n	6342 <LLF_RND_AdaptiveProportionTest+0x5e>
    62f4:	b32b      	cbz	r3, 6342 <LLF_RND_AdaptiveProportionTest+0x5e>
    62f6:	b322      	cbz	r2, 6342 <LLF_RND_AdaptiveProportionTest+0x5e>
    62f8:	00cc      	lsls	r4, r1, #3
    62fa:	2b01      	cmp	r3, #1
    62fc:	f104 3eff 	add.w	lr, r4, #4294967295
    6300:	d02f      	beq.n	6362 <LLF_RND_AdaptiveProportionTest+0x7e>
    6302:	2100      	movs	r1, #0
    6304:	468c      	mov	ip, r1
    6306:	460f      	mov	r7, r1
    6308:	460d      	mov	r5, r1
    630a:	f103 38ff 	add.w	r8, r3, #4294967295
    630e:	094c      	lsrs	r4, r1, #5
    6310:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6314:	f001 061f 	and.w	r6, r1, #31
    6318:	40f4      	lsrs	r4, r6
    631a:	2e1f      	cmp	r6, #31
    631c:	bf18      	it	ne
    631e:	f004 0401 	andne.w	r4, r4, #1
    6322:	b921      	cbnz	r1, 632e <LLF_RND_AdaptiveProportionTest+0x4a>
    6324:	2501      	movs	r5, #1
    6326:	46ac      	mov	ip, r5
    6328:	4629      	mov	r1, r5
    632a:	4627      	mov	r7, r4
    632c:	e7ef      	b.n	630e <LLF_RND_AdaptiveProportionTest+0x2a>
    632e:	42ab      	cmp	r3, r5
    6330:	d013      	beq.n	635a <LLF_RND_AdaptiveProportionTest+0x76>
    6332:	42a7      	cmp	r7, r4
    6334:	d101      	bne.n	633a <LLF_RND_AdaptiveProportionTest+0x56>
    6336:	f10c 0c01 	add.w	ip, ip, #1
    633a:	4545      	cmp	r5, r8
    633c:	d104      	bne.n	6348 <LLF_RND_AdaptiveProportionTest+0x64>
    633e:	4562      	cmp	r2, ip
    6340:	d202      	bcs.n	6348 <LLF_RND_AdaptiveProportionTest+0x64>
    6342:	481a      	ldr	r0, [pc, #104]	; (63ac <LLF_RND_AdaptiveProportionTest+0xc8>)
    6344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6348:	463c      	mov	r4, r7
    634a:	3101      	adds	r1, #1
    634c:	458e      	cmp	lr, r1
    634e:	f105 0501 	add.w	r5, r5, #1
    6352:	d2ea      	bcs.n	632a <LLF_RND_AdaptiveProportionTest+0x46>
    6354:	2000      	movs	r0, #0
    6356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    635a:	2500      	movs	r5, #0
    635c:	f04f 0c01 	mov.w	ip, #1
    6360:	e7f3      	b.n	634a <LLF_RND_AdaptiveProportionTest+0x66>
    6362:	2600      	movs	r6, #0
    6364:	46b4      	mov	ip, r6
    6366:	4637      	mov	r7, r6
    6368:	4631      	mov	r1, r6
    636a:	094b      	lsrs	r3, r1, #5
    636c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6370:	f001 051f 	and.w	r5, r1, #31
    6374:	40eb      	lsrs	r3, r5
    6376:	2d1f      	cmp	r5, #31
    6378:	bf18      	it	ne
    637a:	f003 0301 	andne.w	r3, r3, #1
    637e:	b139      	cbz	r1, 6390 <LLF_RND_AdaptiveProportionTest+0xac>
    6380:	b95f      	cbnz	r7, 639a <LLF_RND_AdaptiveProportionTest+0xb6>
    6382:	459c      	cmp	ip, r3
    6384:	d001      	beq.n	638a <LLF_RND_AdaptiveProportionTest+0xa6>
    6386:	4663      	mov	r3, ip
    6388:	e008      	b.n	639c <LLF_RND_AdaptiveProportionTest+0xb8>
    638a:	4663      	mov	r3, ip
    638c:	3601      	adds	r6, #1
    638e:	e005      	b.n	639c <LLF_RND_AdaptiveProportionTest+0xb8>
    6390:	2601      	movs	r6, #1
    6392:	4631      	mov	r1, r6
    6394:	469c      	mov	ip, r3
    6396:	2701      	movs	r7, #1
    6398:	e7e7      	b.n	636a <LLF_RND_AdaptiveProportionTest+0x86>
    639a:	463e      	mov	r6, r7
    639c:	42b2      	cmp	r2, r6
    639e:	d3d0      	bcc.n	6342 <LLF_RND_AdaptiveProportionTest+0x5e>
    63a0:	3101      	adds	r1, #1
    63a2:	42a1      	cmp	r1, r4
    63a4:	d1f6      	bne.n	6394 <LLF_RND_AdaptiveProportionTest+0xb0>
    63a6:	e7d5      	b.n	6354 <LLF_RND_AdaptiveProportionTest+0x70>
    63a8:	4800      	ldr	r0, [pc, #0]	; (63ac <LLF_RND_AdaptiveProportionTest+0xc8>)
    63aa:	4770      	bx	lr
    63ac:	00f10c37 	.word	0x00f10c37

000063b0 <getTrngSource>:
    63b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63b4:	b08d      	sub	sp, #52	; 0x34
    63b6:	9e18      	ldr	r6, [sp, #96]	; 0x60
    63b8:	4607      	mov	r7, r0
    63ba:	460c      	mov	r4, r1
    63bc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    63be:	2e00      	cmp	r6, #0
    63c0:	d14d      	bne.n	645e <getTrngSource+0xae>
    63c2:	f8d1 b010 	ldr.w	fp, [r1, #16]
    63c6:	2100      	movs	r1, #0
    63c8:	601d      	str	r5, [r3, #0]
    63ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    63cc:	6019      	str	r1, [r3, #0]
    63ce:	2a00      	cmp	r2, #0
    63d0:	f000 8123 	beq.w	661a <getTrngSource+0x26a>
    63d4:	4a9d      	ldr	r2, [pc, #628]	; (664c <getTrngSource+0x29c>)
    63d6:	4b9e      	ldr	r3, [pc, #632]	; (6650 <getTrngSource+0x2a0>)
    63d8:	6811      	ldr	r1, [r2, #0]
    63da:	6a62      	ldr	r2, [r4, #36]	; 0x24
    63dc:	681b      	ldr	r3, [r3, #0]
    63de:	429a      	cmp	r2, r3
    63e0:	d148      	bne.n	6474 <getTrngSource+0xc4>
    63e2:	290a      	cmp	r1, #10
    63e4:	d146      	bne.n	6474 <getTrngSource+0xc4>
    63e6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    63ea:	9304      	str	r3, [sp, #16]
    63ec:	2304      	movs	r3, #4
    63ee:	46b8      	mov	r8, r7
    63f0:	9302      	str	r3, [sp, #8]
    63f2:	4b98      	ldr	r3, [pc, #608]	; (6654 <getTrngSource+0x2a4>)
    63f4:	fba3 230b 	umull	r2, r3, r3, fp
    63f8:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    63fc:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6400:	f105 0208 	add.w	r2, r5, #8
    6404:	9203      	str	r2, [sp, #12]
    6406:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    640a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    640c:	f8c3 b000 	str.w	fp, [r3]
    6410:	f1bb 0f00 	cmp.w	fp, #0
    6414:	f000 80c7 	beq.w	65a6 <getTrngSource+0x1f6>
    6418:	465d      	mov	r5, fp
    641a:	f04f 0900 	mov.w	r9, #0
    641e:	9e03      	ldr	r6, [sp, #12]
    6420:	f000 fc8c 	bl	6d3c <LLF_RND_TurnOffTrng>
    6424:	2300      	movs	r3, #0
    6426:	9305      	str	r3, [sp, #20]
    6428:	f1b8 0f00 	cmp.w	r8, #0
    642c:	f000 80e9 	beq.w	6602 <getTrngSource+0x252>
    6430:	2c00      	cmp	r4, #0
    6432:	f000 80e6 	beq.w	6602 <getTrngSource+0x252>
    6436:	9b04      	ldr	r3, [sp, #16]
    6438:	2b00      	cmp	r3, #0
    643a:	f000 80e0 	beq.w	65fe <getTrngSource+0x24e>
    643e:	4620      	mov	r0, r4
    6440:	a904      	add	r1, sp, #16
    6442:	f000 fc6b 	bl	6d1c <LLF_RND_GetFastestRosc>
    6446:	b1b8      	cbz	r0, 6478 <getTrngSource+0xc8>
    6448:	4b83      	ldr	r3, [pc, #524]	; (6658 <getTrngSource+0x2a8>)
    644a:	4298      	cmp	r0, r3
    644c:	f040 80ab 	bne.w	65a6 <getTrngSource+0x1f6>
    6450:	9002      	str	r0, [sp, #8]
    6452:	f000 fc73 	bl	6d3c <LLF_RND_TurnOffTrng>
    6456:	9802      	ldr	r0, [sp, #8]
    6458:	b00d      	add	sp, #52	; 0x34
    645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    645e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6462:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    6466:	3001      	adds	r0, #1
    6468:	bf0c      	ite	eq
    646a:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    646e:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    6472:	e7a8      	b.n	63c6 <getTrngSource+0x16>
    6474:	4879      	ldr	r0, [pc, #484]	; (665c <getTrngSource+0x2ac>)
    6476:	e7eb      	b.n	6450 <getTrngSource+0xa0>
    6478:	4621      	mov	r1, r4
    647a:	9804      	ldr	r0, [sp, #16]
    647c:	f000 fc30 	bl	6ce0 <LLF_RND_GetRoscSampleCnt>
    6480:	2800      	cmp	r0, #0
    6482:	d1e1      	bne.n	6448 <getTrngSource+0x98>
    6484:	9f04      	ldr	r7, [sp, #16]
    6486:	2f08      	cmp	r7, #8
    6488:	f000 80bd 	beq.w	6606 <getTrngSource+0x256>
    648c:	2f04      	cmp	r7, #4
    648e:	f000 80bc 	beq.w	660a <getTrngSource+0x25a>
    6492:	f1a7 0702 	sub.w	r7, r7, #2
    6496:	fab7 f787 	clz	r7, r7
    649a:	097f      	lsrs	r7, r7, #5
    649c:	2301      	movs	r3, #1
    649e:	4619      	mov	r1, r3
    64a0:	486f      	ldr	r0, [pc, #444]	; (6660 <getTrngSource+0x2b0>)
    64a2:	6003      	str	r3, [r0, #0]
    64a4:	f840 3c84 	str.w	r3, [r0, #-132]
    64a8:	4b6d      	ldr	r3, [pc, #436]	; (6660 <getTrngSource+0x2b0>)
    64aa:	4869      	ldr	r0, [pc, #420]	; (6650 <getTrngSource+0x2a0>)
    64ac:	6019      	str	r1, [r3, #0]
    64ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64b0:	6003      	str	r3, [r0, #0]
    64b2:	6800      	ldr	r0, [r0, #0]
    64b4:	4283      	cmp	r3, r0
    64b6:	d1f7      	bne.n	64a8 <getTrngSource+0xf8>
    64b8:	2300      	movs	r3, #0
    64ba:	4a6a      	ldr	r2, [pc, #424]	; (6664 <getTrngSource+0x2b4>)
    64bc:	f04f 30ff 	mov.w	r0, #4294967295
    64c0:	6013      	str	r3, [r2, #0]
    64c2:	f7ff fd0d 	bl	5ee0 <CC_HalClearInterruptBit>
    64c6:	2300      	movs	r3, #0
    64c8:	f06f 011b 	mvn.w	r1, #27
    64cc:	4618      	mov	r0, r3
    64ce:	4b66      	ldr	r3, [pc, #408]	; (6668 <getTrngSource+0x2b8>)
    64d0:	6019      	str	r1, [r3, #0]
    64d2:	f7ff fd13 	bl	5efc <CC_HalMaskInterrupt>
    64d6:	4965      	ldr	r1, [pc, #404]	; (666c <getTrngSource+0x2bc>)
    64d8:	4b65      	ldr	r3, [pc, #404]	; (6670 <getTrngSource+0x2c0>)
    64da:	600f      	str	r7, [r1, #0]
    64dc:	6818      	ldr	r0, [r3, #0]
    64de:	4f5d      	ldr	r7, [pc, #372]	; (6654 <getTrngSource+0x2a4>)
    64e0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    64e4:	f7ff fd0a 	bl	5efc <CC_HalMaskInterrupt>
    64e8:	210a      	movs	r1, #10
    64ea:	2201      	movs	r2, #1
    64ec:	4b57      	ldr	r3, [pc, #348]	; (664c <getTrngSource+0x29c>)
    64ee:	4861      	ldr	r0, [pc, #388]	; (6674 <getTrngSource+0x2c4>)
    64f0:	6019      	str	r1, [r3, #0]
    64f2:	6921      	ldr	r1, [r4, #16]
    64f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64f6:	fba7 c101 	umull	ip, r1, r7, r1
    64fa:	0909      	lsrs	r1, r1, #4
    64fc:	fb03 f301 	mul.w	r3, r3, r1
    6500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6504:	03db      	lsls	r3, r3, #15
    6506:	099b      	lsrs	r3, r3, #6
    6508:	6003      	str	r3, [r0, #0]
    650a:	4b56      	ldr	r3, [pc, #344]	; (6664 <getTrngSource+0x2b4>)
    650c:	a805      	add	r0, sp, #20
    650e:	601a      	str	r2, [r3, #0]
    6510:	9904      	ldr	r1, [sp, #16]
    6512:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    6516:	020b      	lsls	r3, r1, #8
    6518:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    651c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6520:	4313      	orrs	r3, r2
    6522:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    6526:	f000 fbcb 	bl	6cc0 <LLF_RND_WaitRngInterrupt>
    652a:	9b05      	ldr	r3, [sp, #20]
    652c:	f003 031a 	and.w	r3, r3, #26
    6530:	4303      	orrs	r3, r0
    6532:	d138      	bne.n	65a6 <getTrngSource+0x1f6>
    6534:	4b50      	ldr	r3, [pc, #320]	; (6678 <getTrngSource+0x2c8>)
    6536:	fba7 2705 	umull	r2, r7, r7, r5
    653a:	681a      	ldr	r2, [r3, #0]
    653c:	3314      	adds	r3, #20
    653e:	9206      	str	r2, [sp, #24]
    6540:	f853 2c10 	ldr.w	r2, [r3, #-16]
    6544:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    6548:	9207      	str	r2, [sp, #28]
    654a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    654e:	9208      	str	r2, [sp, #32]
    6550:	f853 2c08 	ldr.w	r2, [r3, #-8]
    6554:	9209      	str	r2, [sp, #36]	; 0x24
    6556:	f853 2c04 	ldr.w	r2, [r3, #-4]
    655a:	920a      	str	r2, [sp, #40]	; 0x28
    655c:	681b      	ldr	r3, [r3, #0]
    655e:	930b      	str	r3, [sp, #44]	; 0x2c
    6560:	d102      	bne.n	6568 <getTrngSource+0x1b8>
    6562:	f1ba 0f00 	cmp.w	sl, #0
    6566:	d141      	bne.n	65ec <getTrngSource+0x23c>
    6568:	2218      	movs	r2, #24
    656a:	4630      	mov	r0, r6
    656c:	eb0d 0102 	add.w	r1, sp, r2
    6570:	f000 fb16 	bl	6ba0 <CC_PalMemCopyPlat>
    6574:	3d18      	subs	r5, #24
    6576:	3618      	adds	r6, #24
    6578:	f109 0901 	add.w	r9, r9, #1
    657c:	2d00      	cmp	r5, #0
    657e:	f47f af4f 	bne.w	6420 <getTrngSource+0x70>
    6582:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    6586:	d85d      	bhi.n	6644 <getTrngSource+0x294>
    6588:	9d03      	ldr	r5, [sp, #12]
    658a:	4659      	mov	r1, fp
    658c:	4628      	mov	r0, r5
    658e:	6962      	ldr	r2, [r4, #20]
    6590:	f7ff fe7c 	bl	628c <LLF_RND_RepetitionCounterTest.part.0>
    6594:	2800      	cmp	r0, #0
    6596:	d04b      	beq.n	6630 <getTrngSource+0x280>
    6598:	2300      	movs	r3, #0
    659a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    659c:	6013      	str	r3, [r2, #0]
    659e:	4b2e      	ldr	r3, [pc, #184]	; (6658 <getTrngSource+0x2a8>)
    65a0:	4298      	cmp	r0, r3
    65a2:	f43f af55 	beq.w	6450 <getTrngSource+0xa0>
    65a6:	9d04      	ldr	r5, [sp, #16]
    65a8:	2d08      	cmp	r5, #8
    65aa:	d034      	beq.n	6616 <getTrngSource+0x266>
    65ac:	2200      	movs	r2, #0
    65ae:	ab04      	add	r3, sp, #16
    65b0:	4621      	mov	r1, r4
    65b2:	4640      	mov	r0, r8
    65b4:	006d      	lsls	r5, r5, #1
    65b6:	9200      	str	r2, [sp, #0]
    65b8:	9504      	str	r5, [sp, #16]
    65ba:	f7ff fdbb 	bl	6134 <startTrngHW>
    65be:	4b2f      	ldr	r3, [pc, #188]	; (667c <getTrngSource+0x2cc>)
    65c0:	4298      	cmp	r0, r3
    65c2:	d024      	beq.n	660e <getTrngSource+0x25e>
    65c4:	2800      	cmp	r0, #0
    65c6:	f47f af43 	bne.w	6450 <getTrngSource+0xa0>
    65ca:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    65ce:	0a13      	lsrs	r3, r2, #8
    65d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    65d4:	4313      	orrs	r3, r2
    65d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    65da:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    65de:	9b02      	ldr	r3, [sp, #8]
    65e0:	3b01      	subs	r3, #1
    65e2:	9302      	str	r3, [sp, #8]
    65e4:	f47f af11 	bne.w	640a <getTrngSource+0x5a>
    65e8:	2000      	movs	r0, #0
    65ea:	e731      	b.n	6450 <getTrngSource+0xa0>
    65ec:	4630      	mov	r0, r6
    65ee:	4652      	mov	r2, sl
    65f0:	a906      	add	r1, sp, #24
    65f2:	f000 fad5 	bl	6ba0 <CC_PalMemCopyPlat>
    65f6:	eba5 050a 	sub.w	r5, r5, sl
    65fa:	4456      	add	r6, sl
    65fc:	e7bc      	b.n	6578 <getTrngSource+0x1c8>
    65fe:	481f      	ldr	r0, [pc, #124]	; (667c <getTrngSource+0x2cc>)
    6600:	e722      	b.n	6448 <getTrngSource+0x98>
    6602:	481f      	ldr	r0, [pc, #124]	; (6680 <getTrngSource+0x2d0>)
    6604:	e720      	b.n	6448 <getTrngSource+0x98>
    6606:	2703      	movs	r7, #3
    6608:	e748      	b.n	649c <getTrngSource+0xec>
    660a:	2702      	movs	r7, #2
    660c:	e746      	b.n	649c <getTrngSource+0xec>
    660e:	6a23      	ldr	r3, [r4, #32]
    6610:	2b00      	cmp	r3, #0
    6612:	f43f af1d 	beq.w	6450 <getTrngSource+0xa0>
    6616:	481b      	ldr	r0, [pc, #108]	; (6684 <getTrngSource+0x2d4>)
    6618:	e71a      	b.n	6450 <getTrngSource+0xa0>
    661a:	2201      	movs	r2, #1
    661c:	4621      	mov	r1, r4
    661e:	4638      	mov	r0, r7
    6620:	9600      	str	r6, [sp, #0]
    6622:	ab04      	add	r3, sp, #16
    6624:	f7ff fd86 	bl	6134 <startTrngHW>
    6628:	2800      	cmp	r0, #0
    662a:	f43f aedf 	beq.w	63ec <getTrngSource+0x3c>
    662e:	e70f      	b.n	6450 <getTrngSource+0xa0>
    6630:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6634:	4659      	mov	r1, fp
    6636:	4628      	mov	r0, r5
    6638:	69a2      	ldr	r2, [r4, #24]
    663a:	f7ff fe53 	bl	62e4 <LLF_RND_AdaptiveProportionTest>
    663e:	2800      	cmp	r0, #0
    6640:	d1aa      	bne.n	6598 <getTrngSource+0x1e8>
    6642:	e7d1      	b.n	65e8 <getTrngSource+0x238>
    6644:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6646:	601d      	str	r5, [r3, #0]
    6648:	e7ad      	b.n	65a6 <getTrngSource+0x1f6>
    664a:	bf00      	nop
    664c:	50841138 	.word	0x50841138
    6650:	50841130 	.word	0x50841130
    6654:	aaaaaaab 	.word	0xaaaaaaab
    6658:	00f10c02 	.word	0x00f10c02
    665c:	00f10c30 	.word	0x00f10c30
    6660:	508411c4 	.word	0x508411c4
    6664:	5084112c 	.word	0x5084112c
    6668:	50841100 	.word	0x50841100
    666c:	5084110c 	.word	0x5084110c
    6670:	50841a04 	.word	0x50841a04
    6674:	508411d8 	.word	0x508411d8
    6678:	50841114 	.word	0x50841114
    667c:	00f10c31 	.word	0x00f10c31
    6680:	00f10c35 	.word	0x00f10c35
    6684:	00f10c32 	.word	0x00f10c32

00006688 <LLF_RND_GetTrngSource>:
    6688:	2300      	movs	r3, #0
    668a:	b430      	push	{r4, r5}
    668c:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    6690:	9304      	str	r3, [sp, #16]
    6692:	9b02      	ldr	r3, [sp, #8]
    6694:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6698:	bc30      	pop	{r4, r5}
    669a:	f7ff be89 	b.w	63b0 <getTrngSource>
    669e:	bf00      	nop

000066a0 <LLF_RND_RunTrngStartupTest>:
    66a0:	b510      	push	{r4, lr}
    66a2:	2401      	movs	r4, #1
    66a4:	b086      	sub	sp, #24
    66a6:	ab05      	add	r3, sp, #20
    66a8:	e9cd 2401 	strd	r2, r4, [sp, #4]
    66ac:	9300      	str	r3, [sp, #0]
    66ae:	2200      	movs	r2, #0
    66b0:	ab04      	add	r3, sp, #16
    66b2:	f7ff fe7d 	bl	63b0 <getTrngSource>
    66b6:	b006      	add	sp, #24
    66b8:	bd10      	pop	{r4, pc}
    66ba:	bf00      	nop

000066bc <mbedtls_hardware_poll>:
    66bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c0:	b088      	sub	sp, #32
    66c2:	9205      	str	r2, [sp, #20]
    66c4:	2900      	cmp	r1, #0
    66c6:	d068      	beq.n	679a <mbedtls_hardware_poll+0xde>
    66c8:	461c      	mov	r4, r3
    66ca:	2b00      	cmp	r3, #0
    66cc:	d065      	beq.n	679a <mbedtls_hardware_poll+0xde>
    66ce:	4615      	mov	r5, r2
    66d0:	2a00      	cmp	r2, #0
    66d2:	d062      	beq.n	679a <mbedtls_hardware_poll+0xde>
    66d4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 67bc <mbedtls_hardware_poll+0x100>
    66d8:	460e      	mov	r6, r1
    66da:	f8d8 0000 	ldr.w	r0, [r8]
    66de:	f04f 31ff 	mov.w	r1, #4294967295
    66e2:	f7ff fca3 	bl	602c <CC_PalMutexLock>
    66e6:	2800      	cmp	r0, #0
    66e8:	d14c      	bne.n	6784 <mbedtls_hardware_poll+0xc8>
    66ea:	2000      	movs	r0, #0
    66ec:	f7ff fcce 	bl	608c <CC_PalPowerSaveModeSelect>
    66f0:	2800      	cmp	r0, #0
    66f2:	d143      	bne.n	677c <mbedtls_hardware_poll+0xc0>
    66f4:	482a      	ldr	r0, [pc, #168]	; (67a0 <mbedtls_hardware_poll+0xe4>)
    66f6:	f000 fa15 	bl	6b24 <RNG_PLAT_SetUserRngParameters>
    66fa:	b1e8      	cbz	r0, 6738 <mbedtls_hardware_poll+0x7c>
    66fc:	2001      	movs	r0, #1
    66fe:	f04f 37ff 	mov.w	r7, #4294967295
    6702:	f7ff fcc3 	bl	608c <CC_PalPowerSaveModeSelect>
    6706:	2800      	cmp	r0, #0
    6708:	d134      	bne.n	6774 <mbedtls_hardware_poll+0xb8>
    670a:	f44f 7108 	mov.w	r1, #544	; 0x220
    670e:	4825      	ldr	r0, [pc, #148]	; (67a4 <mbedtls_hardware_poll+0xe8>)
    6710:	f7fe fe44 	bl	539c <mbedtls_zeroize_internal>
    6714:	21dc      	movs	r1, #220	; 0xdc
    6716:	4824      	ldr	r0, [pc, #144]	; (67a8 <mbedtls_hardware_poll+0xec>)
    6718:	f7fe fe40 	bl	539c <mbedtls_zeroize_internal>
    671c:	4820      	ldr	r0, [pc, #128]	; (67a0 <mbedtls_hardware_poll+0xe4>)
    671e:	2128      	movs	r1, #40	; 0x28
    6720:	f7fe fe3c 	bl	539c <mbedtls_zeroize_internal>
    6724:	f8d8 0000 	ldr.w	r0, [r8]
    6728:	f7ff fc88 	bl	603c <CC_PalMutexUnlock>
    672c:	2800      	cmp	r0, #0
    672e:	d12d      	bne.n	678c <mbedtls_hardware_poll+0xd0>
    6730:	4638      	mov	r0, r7
    6732:	b008      	add	sp, #32
    6734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6738:	491a      	ldr	r1, [pc, #104]	; (67a4 <mbedtls_hardware_poll+0xe8>)
    673a:	ab07      	add	r3, sp, #28
    673c:	4602      	mov	r2, r0
    673e:	9003      	str	r0, [sp, #12]
    6740:	9102      	str	r1, [sp, #8]
    6742:	9300      	str	r3, [sp, #0]
    6744:	4916      	ldr	r1, [pc, #88]	; (67a0 <mbedtls_hardware_poll+0xe4>)
    6746:	4818      	ldr	r0, [pc, #96]	; (67a8 <mbedtls_hardware_poll+0xec>)
    6748:	9401      	str	r4, [sp, #4]
    674a:	ab05      	add	r3, sp, #20
    674c:	f7ff ff9c 	bl	6688 <LLF_RND_GetTrngSource>
    6750:	2800      	cmp	r0, #0
    6752:	d1d3      	bne.n	66fc <mbedtls_hardware_poll+0x40>
    6754:	6823      	ldr	r3, [r4, #0]
    6756:	42ab      	cmp	r3, r5
    6758:	d3d0      	bcc.n	66fc <mbedtls_hardware_poll+0x40>
    675a:	9907      	ldr	r1, [sp, #28]
    675c:	4607      	mov	r7, r0
    675e:	462a      	mov	r2, r5
    6760:	4630      	mov	r0, r6
    6762:	3108      	adds	r1, #8
    6764:	f000 fa1c 	bl	6ba0 <CC_PalMemCopyPlat>
    6768:	2001      	movs	r0, #1
    676a:	6025      	str	r5, [r4, #0]
    676c:	f7ff fc8e 	bl	608c <CC_PalPowerSaveModeSelect>
    6770:	2800      	cmp	r0, #0
    6772:	d0ca      	beq.n	670a <mbedtls_hardware_poll+0x4e>
    6774:	480d      	ldr	r0, [pc, #52]	; (67ac <mbedtls_hardware_poll+0xf0>)
    6776:	f7fe fd0f 	bl	5198 <CC_PalAbort>
    677a:	e7c6      	b.n	670a <mbedtls_hardware_poll+0x4e>
    677c:	480c      	ldr	r0, [pc, #48]	; (67b0 <mbedtls_hardware_poll+0xf4>)
    677e:	f7fe fd0b 	bl	5198 <CC_PalAbort>
    6782:	e7b7      	b.n	66f4 <mbedtls_hardware_poll+0x38>
    6784:	480b      	ldr	r0, [pc, #44]	; (67b4 <mbedtls_hardware_poll+0xf8>)
    6786:	f7fe fd07 	bl	5198 <CC_PalAbort>
    678a:	e7ae      	b.n	66ea <mbedtls_hardware_poll+0x2e>
    678c:	480a      	ldr	r0, [pc, #40]	; (67b8 <mbedtls_hardware_poll+0xfc>)
    678e:	f7fe fd03 	bl	5198 <CC_PalAbort>
    6792:	4638      	mov	r0, r7
    6794:	b008      	add	sp, #32
    6796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    679a:	f04f 37ff 	mov.w	r7, #4294967295
    679e:	e7c7      	b.n	6730 <mbedtls_hardware_poll+0x74>
    67a0:	200012cc 	.word	0x200012cc
    67a4:	200010ac 	.word	0x200010ac
    67a8:	20000fd0 	.word	0x20000fd0
    67ac:	00008a10 	.word	0x00008a10
    67b0:	000089f0 	.word	0x000089f0
    67b4:	000089d8 	.word	0x000089d8
    67b8:	00008a68 	.word	0x00008a68
    67bc:	200000bc 	.word	0x200000bc

000067c0 <cc_mbedtls_aes_init>:
    67c0:	b510      	push	{r4, lr}
    67c2:	4604      	mov	r4, r0
    67c4:	b130      	cbz	r0, 67d4 <cc_mbedtls_aes_init+0x14>
    67c6:	2200      	movs	r2, #0
    67c8:	2301      	movs	r3, #1
    67ca:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    67ce:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    67d2:	bd10      	pop	{r4, pc}
    67d4:	4801      	ldr	r0, [pc, #4]	; (67dc <cc_mbedtls_aes_init+0x1c>)
    67d6:	f7fe fcdf 	bl	5198 <CC_PalAbort>
    67da:	e7f4      	b.n	67c6 <cc_mbedtls_aes_init+0x6>
    67dc:	00008a80 	.word	0x00008a80

000067e0 <cc_mbedtls_aes_free>:
    67e0:	b118      	cbz	r0, 67ea <cc_mbedtls_aes_free+0xa>
    67e2:	2274      	movs	r2, #116	; 0x74
    67e4:	2100      	movs	r1, #0
    67e6:	f000 b9dd 	b.w	6ba4 <CC_PalMemSetPlat>
    67ea:	4770      	bx	lr

000067ec <cc_mbedtls_aes_setkey_enc>:
    67ec:	b188      	cbz	r0, 6812 <cc_mbedtls_aes_setkey_enc+0x26>
    67ee:	b199      	cbz	r1, 6818 <cc_mbedtls_aes_setkey_enc+0x2c>
    67f0:	b510      	push	{r4, lr}
    67f2:	2400      	movs	r4, #0
    67f4:	2a80      	cmp	r2, #128	; 0x80
    67f6:	6384      	str	r4, [r0, #56]	; 0x38
    67f8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    67fc:	d106      	bne.n	680c <cc_mbedtls_aes_setkey_enc+0x20>
    67fe:	6304      	str	r4, [r0, #48]	; 0x30
    6800:	2210      	movs	r2, #16
    6802:	3010      	adds	r0, #16
    6804:	f000 f9cc 	bl	6ba0 <CC_PalMemCopyPlat>
    6808:	4620      	mov	r0, r4
    680a:	bd10      	pop	{r4, pc}
    680c:	f06f 001f 	mvn.w	r0, #31
    6810:	bd10      	pop	{r4, pc}
    6812:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6816:	4770      	bx	lr
    6818:	f06f 001f 	mvn.w	r0, #31
    681c:	4770      	bx	lr
    681e:	bf00      	nop

00006820 <cc_mbedtls_aes_crypt_ecb>:
    6820:	b328      	cbz	r0, 686e <cc_mbedtls_aes_crypt_ecb+0x4e>
    6822:	b322      	cbz	r2, 686e <cc_mbedtls_aes_crypt_ecb+0x4e>
    6824:	b31b      	cbz	r3, 686e <cc_mbedtls_aes_crypt_ecb+0x4e>
    6826:	2901      	cmp	r1, #1
    6828:	d821      	bhi.n	686e <cc_mbedtls_aes_crypt_ecb+0x4e>
    682a:	b570      	push	{r4, r5, r6, lr}
    682c:	4604      	mov	r4, r0
    682e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    6830:	b086      	sub	sp, #24
    6832:	d017      	beq.n	6864 <cc_mbedtls_aes_crypt_ecb+0x44>
    6834:	2901      	cmp	r1, #1
    6836:	d117      	bne.n	6868 <cc_mbedtls_aes_crypt_ecb+0x48>
    6838:	2510      	movs	r5, #16
    683a:	2100      	movs	r1, #0
    683c:	eb0d 0605 	add.w	r6, sp, r5
    6840:	6361      	str	r1, [r4, #52]	; 0x34
    6842:	4610      	mov	r0, r2
    6844:	4629      	mov	r1, r5
    6846:	9500      	str	r5, [sp, #0]
    6848:	aa02      	add	r2, sp, #8
    684a:	9601      	str	r6, [sp, #4]
    684c:	f000 fa84 	bl	6d58 <SetDataBuffersInfo>
    6850:	b950      	cbnz	r0, 6868 <cc_mbedtls_aes_crypt_ecb+0x48>
    6852:	462b      	mov	r3, r5
    6854:	4632      	mov	r2, r6
    6856:	4620      	mov	r0, r4
    6858:	a902      	add	r1, sp, #8
    685a:	f000 fd37 	bl	72cc <ProcessAesDrv>
    685e:	b918      	cbnz	r0, 6868 <cc_mbedtls_aes_crypt_ecb+0x48>
    6860:	b006      	add	sp, #24
    6862:	bd70      	pop	{r4, r5, r6, pc}
    6864:	2900      	cmp	r1, #0
    6866:	d0e7      	beq.n	6838 <cc_mbedtls_aes_crypt_ecb+0x18>
    6868:	f06f 0021 	mvn.w	r0, #33	; 0x21
    686c:	e7f8      	b.n	6860 <cc_mbedtls_aes_crypt_ecb+0x40>
    686e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6872:	4770      	bx	lr

00006874 <cc_mbedtls_sha256_init>:
    6874:	b510      	push	{r4, lr}
    6876:	4604      	mov	r4, r0
    6878:	b128      	cbz	r0, 6886 <cc_mbedtls_sha256_init+0x12>
    687a:	4620      	mov	r0, r4
    687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6880:	21f0      	movs	r1, #240	; 0xf0
    6882:	f000 b991 	b.w	6ba8 <CC_PalMemSetZeroPlat>
    6886:	4804      	ldr	r0, [pc, #16]	; (6898 <cc_mbedtls_sha256_init+0x24>)
    6888:	f7fe fc86 	bl	5198 <CC_PalAbort>
    688c:	4620      	mov	r0, r4
    688e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6892:	21f0      	movs	r1, #240	; 0xf0
    6894:	f000 b988 	b.w	6ba8 <CC_PalMemSetZeroPlat>
    6898:	00008a94 	.word	0x00008a94

0000689c <cc_mbedtls_sha256_free>:
    689c:	b110      	cbz	r0, 68a4 <cc_mbedtls_sha256_free+0x8>
    689e:	21f0      	movs	r1, #240	; 0xf0
    68a0:	f7fe bd7c 	b.w	539c <mbedtls_zeroize_internal>
    68a4:	4770      	bx	lr
    68a6:	bf00      	nop

000068a8 <cc_mbedtls_sha256_starts>:
    68a8:	b508      	push	{r3, lr}
    68aa:	b161      	cbz	r1, 68c6 <cc_mbedtls_sha256_starts+0x1e>
    68ac:	2901      	cmp	r1, #1
    68ae:	d107      	bne.n	68c0 <cc_mbedtls_sha256_starts+0x18>
    68b0:	2102      	movs	r1, #2
    68b2:	f000 f85b 	bl	696c <mbedtls_sha_starts_internal>
    68b6:	2800      	cmp	r0, #0
    68b8:	bf18      	it	ne
    68ba:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    68be:	bd08      	pop	{r3, pc}
    68c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    68c4:	bd08      	pop	{r3, pc}
    68c6:	2101      	movs	r1, #1
    68c8:	f000 f850 	bl	696c <mbedtls_sha_starts_internal>
    68cc:	e7f3      	b.n	68b6 <cc_mbedtls_sha256_starts+0xe>
    68ce:	bf00      	nop

000068d0 <cc_mbedtls_sha256_update>:
    68d0:	b570      	push	{r4, r5, r6, lr}
    68d2:	188e      	adds	r6, r1, r2
    68d4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    68d8:	460b      	mov	r3, r1
    68da:	4614      	mov	r4, r2
    68dc:	4605      	mov	r5, r0
    68de:	b0a0      	sub	sp, #128	; 0x80
    68e0:	d801      	bhi.n	68e6 <cc_mbedtls_sha256_update+0x16>
    68e2:	2a80      	cmp	r2, #128	; 0x80
    68e4:	d90c      	bls.n	6900 <cc_mbedtls_sha256_update+0x30>
    68e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    68ea:	d917      	bls.n	691c <cc_mbedtls_sha256_update+0x4c>
    68ec:	4622      	mov	r2, r4
    68ee:	4619      	mov	r1, r3
    68f0:	4628      	mov	r0, r5
    68f2:	f000 f87d 	bl	69f0 <mbedtls_sha_update_internal>
    68f6:	4604      	mov	r4, r0
    68f8:	b984      	cbnz	r4, 691c <cc_mbedtls_sha256_update+0x4c>
    68fa:	4620      	mov	r0, r4
    68fc:	b020      	add	sp, #128	; 0x80
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	4668      	mov	r0, sp
    6902:	f000 f94d 	bl	6ba0 <CC_PalMemCopyPlat>
    6906:	4622      	mov	r2, r4
    6908:	4669      	mov	r1, sp
    690a:	4628      	mov	r0, r5
    690c:	f000 f870 	bl	69f0 <mbedtls_sha_update_internal>
    6910:	2180      	movs	r1, #128	; 0x80
    6912:	4604      	mov	r4, r0
    6914:	4668      	mov	r0, sp
    6916:	f000 f947 	bl	6ba8 <CC_PalMemSetZeroPlat>
    691a:	e7ed      	b.n	68f8 <cc_mbedtls_sha256_update+0x28>
    691c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6920:	e7eb      	b.n	68fa <cc_mbedtls_sha256_update+0x2a>
    6922:	bf00      	nop

00006924 <cc_mbedtls_sha256_finish>:
    6924:	b570      	push	{r4, r5, r6, lr}
    6926:	b1e8      	cbz	r0, 6964 <cc_mbedtls_sha256_finish+0x40>
    6928:	460e      	mov	r6, r1
    692a:	b1d9      	cbz	r1, 6964 <cc_mbedtls_sha256_finish+0x40>
    692c:	4604      	mov	r4, r0
    692e:	f000 f831 	bl	6994 <mbedtls_sha_finish_internal>
    6932:	4605      	mov	r5, r0
    6934:	b9b0      	cbnz	r0, 6964 <cc_mbedtls_sha256_finish+0x40>
    6936:	6823      	ldr	r3, [r4, #0]
    6938:	2b01      	cmp	r3, #1
    693a:	d00b      	beq.n	6954 <cc_mbedtls_sha256_finish+0x30>
    693c:	2b02      	cmp	r3, #2
    693e:	d001      	beq.n	6944 <cc_mbedtls_sha256_finish+0x20>
    6940:	4628      	mov	r0, r5
    6942:	bd70      	pop	{r4, r5, r6, pc}
    6944:	4630      	mov	r0, r6
    6946:	221c      	movs	r2, #28
    6948:	f104 0108 	add.w	r1, r4, #8
    694c:	f000 f928 	bl	6ba0 <CC_PalMemCopyPlat>
    6950:	4628      	mov	r0, r5
    6952:	bd70      	pop	{r4, r5, r6, pc}
    6954:	4630      	mov	r0, r6
    6956:	2220      	movs	r2, #32
    6958:	f104 0108 	add.w	r1, r4, #8
    695c:	f000 f920 	bl	6ba0 <CC_PalMemCopyPlat>
    6960:	4628      	mov	r0, r5
    6962:	bd70      	pop	{r4, r5, r6, pc}
    6964:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6968:	e7ea      	b.n	6940 <cc_mbedtls_sha256_finish+0x1c>
    696a:	bf00      	nop

0000696c <mbedtls_sha_starts_internal>:
    696c:	b178      	cbz	r0, 698e <mbedtls_sha_starts_internal+0x22>
    696e:	b538      	push	{r3, r4, r5, lr}
    6970:	460d      	mov	r5, r1
    6972:	21f0      	movs	r1, #240	; 0xf0
    6974:	4604      	mov	r4, r0
    6976:	f000 f917 	bl	6ba8 <CC_PalMemSetZeroPlat>
    697a:	2340      	movs	r3, #64	; 0x40
    697c:	4620      	mov	r0, r4
    697e:	6025      	str	r5, [r4, #0]
    6980:	65e3      	str	r3, [r4, #92]	; 0x5c
    6982:	f000 fa21 	bl	6dc8 <InitHashDrv>
    6986:	3800      	subs	r0, #0
    6988:	bf18      	it	ne
    698a:	2001      	movne	r0, #1
    698c:	bd38      	pop	{r3, r4, r5, pc}
    698e:	2001      	movs	r0, #1
    6990:	4770      	bx	lr
    6992:	bf00      	nop

00006994 <mbedtls_sha_finish_internal>:
    6994:	b570      	push	{r4, r5, r6, lr}
    6996:	6e05      	ldr	r5, [r0, #96]	; 0x60
    6998:	b0a4      	sub	sp, #144	; 0x90
    699a:	4604      	mov	r4, r0
    699c:	ae04      	add	r6, sp, #16
    699e:	b9e5      	cbnz	r5, 69da <mbedtls_sha_finish_internal+0x46>
    69a0:	2201      	movs	r2, #1
    69a2:	2300      	movs	r3, #0
    69a4:	6062      	str	r2, [r4, #4]
    69a6:	4630      	mov	r0, r6
    69a8:	4629      	mov	r1, r5
    69aa:	e9cd 3300 	strd	r3, r3, [sp]
    69ae:	aa02      	add	r2, sp, #8
    69b0:	f000 f9d2 	bl	6d58 <SetDataBuffersInfo>
    69b4:	b110      	cbz	r0, 69bc <mbedtls_sha_finish_internal+0x28>
    69b6:	2001      	movs	r0, #1
    69b8:	b024      	add	sp, #144	; 0x90
    69ba:	bd70      	pop	{r4, r5, r6, pc}
    69bc:	462a      	mov	r2, r5
    69be:	4620      	mov	r0, r4
    69c0:	a902      	add	r1, sp, #8
    69c2:	f000 fa2b 	bl	6e1c <ProcessHashDrv>
    69c6:	2800      	cmp	r0, #0
    69c8:	d1f5      	bne.n	69b6 <mbedtls_sha_finish_internal+0x22>
    69ca:	4620      	mov	r0, r4
    69cc:	f000 fb50 	bl	7070 <FinishHashDrv>
    69d0:	2800      	cmp	r0, #0
    69d2:	d1f0      	bne.n	69b6 <mbedtls_sha_finish_internal+0x22>
    69d4:	6620      	str	r0, [r4, #96]	; 0x60
    69d6:	b024      	add	sp, #144	; 0x90
    69d8:	bd70      	pop	{r4, r5, r6, pc}
    69da:	2d80      	cmp	r5, #128	; 0x80
    69dc:	462a      	mov	r2, r5
    69de:	4630      	mov	r0, r6
    69e0:	bf28      	it	cs
    69e2:	2280      	movcs	r2, #128	; 0x80
    69e4:	f104 0164 	add.w	r1, r4, #100	; 0x64
    69e8:	f000 f8da 	bl	6ba0 <CC_PalMemCopyPlat>
    69ec:	6e25      	ldr	r5, [r4, #96]	; 0x60
    69ee:	e7d7      	b.n	69a0 <mbedtls_sha_finish_internal+0xc>

000069f0 <mbedtls_sha_update_internal>:
    69f0:	2800      	cmp	r0, #0
    69f2:	d055      	beq.n	6aa0 <mbedtls_sha_update_internal+0xb0>
    69f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69f6:	4615      	mov	r5, r2
    69f8:	b0a5      	sub	sp, #148	; 0x94
    69fa:	b1b2      	cbz	r2, 6a2a <mbedtls_sha_update_internal+0x3a>
    69fc:	460e      	mov	r6, r1
    69fe:	b351      	cbz	r1, 6a56 <mbedtls_sha_update_internal+0x66>
    6a00:	4604      	mov	r4, r0
    6a02:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    6a06:	1a1a      	subs	r2, r3, r0
    6a08:	fbb2 f7f3 	udiv	r7, r2, r3
    6a0c:	fb03 2717 	mls	r7, r3, r7, r2
    6a10:	42af      	cmp	r7, r5
    6a12:	bf28      	it	cs
    6a14:	462f      	movcs	r7, r5
    6a16:	2f00      	cmp	r7, #0
    6a18:	d144      	bne.n	6aa4 <mbedtls_sha_update_internal+0xb4>
    6a1a:	4283      	cmp	r3, r0
    6a1c:	d008      	beq.n	6a30 <mbedtls_sha_update_internal+0x40>
    6a1e:	fbb5 f7f3 	udiv	r7, r5, r3
    6a22:	fb03 f707 	mul.w	r7, r3, r7
    6a26:	b9cf      	cbnz	r7, 6a5c <mbedtls_sha_update_internal+0x6c>
    6a28:	bb6d      	cbnz	r5, 6a86 <mbedtls_sha_update_internal+0x96>
    6a2a:	4628      	mov	r0, r5
    6a2c:	b025      	add	sp, #148	; 0x94
    6a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a30:	2b80      	cmp	r3, #128	; 0x80
    6a32:	bf28      	it	cs
    6a34:	2380      	movcs	r3, #128	; 0x80
    6a36:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6a3a:	461a      	mov	r2, r3
    6a3c:	a804      	add	r0, sp, #16
    6a3e:	f000 f8af 	bl	6ba0 <CC_PalMemCopyPlat>
    6a42:	2300      	movs	r3, #0
    6a44:	e9cd 3300 	strd	r3, r3, [sp]
    6a48:	a804      	add	r0, sp, #16
    6a4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    6a4c:	aa02      	add	r2, sp, #8
    6a4e:	f000 f983 	bl	6d58 <SetDataBuffersInfo>
    6a52:	2800      	cmp	r0, #0
    6a54:	d033      	beq.n	6abe <mbedtls_sha_update_internal+0xce>
    6a56:	2001      	movs	r0, #1
    6a58:	b025      	add	sp, #148	; 0x94
    6a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a5c:	2300      	movs	r3, #0
    6a5e:	4639      	mov	r1, r7
    6a60:	4630      	mov	r0, r6
    6a62:	e9cd 3300 	strd	r3, r3, [sp]
    6a66:	aa02      	add	r2, sp, #8
    6a68:	f000 f976 	bl	6d58 <SetDataBuffersInfo>
    6a6c:	2800      	cmp	r0, #0
    6a6e:	d1f2      	bne.n	6a56 <mbedtls_sha_update_internal+0x66>
    6a70:	463a      	mov	r2, r7
    6a72:	4620      	mov	r0, r4
    6a74:	a902      	add	r1, sp, #8
    6a76:	f000 f9d1 	bl	6e1c <ProcessHashDrv>
    6a7a:	2800      	cmp	r0, #0
    6a7c:	d1eb      	bne.n	6a56 <mbedtls_sha_update_internal+0x66>
    6a7e:	1bed      	subs	r5, r5, r7
    6a80:	443e      	add	r6, r7
    6a82:	2d00      	cmp	r5, #0
    6a84:	d0d1      	beq.n	6a2a <mbedtls_sha_update_internal+0x3a>
    6a86:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6a88:	462a      	mov	r2, r5
    6a8a:	3019      	adds	r0, #25
    6a8c:	4631      	mov	r1, r6
    6a8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6a92:	f000 f885 	bl	6ba0 <CC_PalMemCopyPlat>
    6a96:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6a98:	2000      	movs	r0, #0
    6a9a:	442a      	add	r2, r5
    6a9c:	6622      	str	r2, [r4, #96]	; 0x60
    6a9e:	e7c5      	b.n	6a2c <mbedtls_sha_update_internal+0x3c>
    6aa0:	2001      	movs	r0, #1
    6aa2:	4770      	bx	lr
    6aa4:	f104 0364 	add.w	r3, r4, #100	; 0x64
    6aa8:	4418      	add	r0, r3
    6aaa:	463a      	mov	r2, r7
    6aac:	f000 f878 	bl	6ba0 <CC_PalMemCopyPlat>
    6ab0:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    6ab4:	4438      	add	r0, r7
    6ab6:	443e      	add	r6, r7
    6ab8:	1bed      	subs	r5, r5, r7
    6aba:	6620      	str	r0, [r4, #96]	; 0x60
    6abc:	e7ad      	b.n	6a1a <mbedtls_sha_update_internal+0x2a>
    6abe:	4620      	mov	r0, r4
    6ac0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    6ac2:	a902      	add	r1, sp, #8
    6ac4:	f000 f9aa 	bl	6e1c <ProcessHashDrv>
    6ac8:	2800      	cmp	r0, #0
    6aca:	d1c4      	bne.n	6a56 <mbedtls_sha_update_internal+0x66>
    6acc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    6ace:	6620      	str	r0, [r4, #96]	; 0x60
    6ad0:	e7a5      	b.n	6a1e <mbedtls_sha_update_internal+0x2e>
    6ad2:	bf00      	nop

00006ad4 <cc_mbedtls_sha256>:
    6ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ad6:	461c      	mov	r4, r3
    6ad8:	4605      	mov	r5, r0
    6ada:	4811      	ldr	r0, [pc, #68]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6adc:	460e      	mov	r6, r1
    6ade:	4617      	mov	r7, r2
    6ae0:	f7ff fec8 	bl	6874 <cc_mbedtls_sha256_init>
    6ae4:	4621      	mov	r1, r4
    6ae6:	480e      	ldr	r0, [pc, #56]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6ae8:	f7ff fede 	bl	68a8 <cc_mbedtls_sha256_starts>
    6aec:	4604      	mov	r4, r0
    6aee:	b120      	cbz	r0, 6afa <cc_mbedtls_sha256+0x26>
    6af0:	480b      	ldr	r0, [pc, #44]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6af2:	f7ff fed3 	bl	689c <cc_mbedtls_sha256_free>
    6af6:	4620      	mov	r0, r4
    6af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6afa:	4632      	mov	r2, r6
    6afc:	4629      	mov	r1, r5
    6afe:	4808      	ldr	r0, [pc, #32]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6b00:	f7ff fee6 	bl	68d0 <cc_mbedtls_sha256_update>
    6b04:	4604      	mov	r4, r0
    6b06:	2800      	cmp	r0, #0
    6b08:	d1f2      	bne.n	6af0 <cc_mbedtls_sha256+0x1c>
    6b0a:	4639      	mov	r1, r7
    6b0c:	4804      	ldr	r0, [pc, #16]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6b0e:	f7ff ff09 	bl	6924 <cc_mbedtls_sha256_finish>
    6b12:	4604      	mov	r4, r0
    6b14:	4802      	ldr	r0, [pc, #8]	; (6b20 <cc_mbedtls_sha256+0x4c>)
    6b16:	f7ff fec1 	bl	689c <cc_mbedtls_sha256_free>
    6b1a:	4620      	mov	r0, r4
    6b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b1e:	bf00      	nop
    6b20:	200012f4 	.word	0x200012f4

00006b24 <RNG_PLAT_SetUserRngParameters>:
    6b24:	231c      	movs	r3, #28
    6b26:	b530      	push	{r4, r5, lr}
    6b28:	b083      	sub	sp, #12
    6b2a:	a901      	add	r1, sp, #4
    6b2c:	4604      	mov	r4, r0
    6b2e:	9301      	str	r3, [sp, #4]
    6b30:	f000 f83e 	bl	6bb0 <CC_PalTrngParamGet>
    6b34:	4605      	mov	r5, r0
    6b36:	b938      	cbnz	r0, 6b48 <RNG_PLAT_SetUserRngParameters+0x24>
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	2b1c      	cmp	r3, #28
    6b3c:	d007      	beq.n	6b4e <RNG_PLAT_SetUserRngParameters+0x2a>
    6b3e:	4d16      	ldr	r5, [pc, #88]	; (6b98 <RNG_PLAT_SetUserRngParameters+0x74>)
    6b40:	4620      	mov	r0, r4
    6b42:	211c      	movs	r1, #28
    6b44:	f000 f830 	bl	6ba8 <CC_PalMemSetZeroPlat>
    6b48:	4628      	mov	r0, r5
    6b4a:	b003      	add	sp, #12
    6b4c:	bd30      	pop	{r4, r5, pc}
    6b4e:	2101      	movs	r1, #1
    6b50:	e9d4 3200 	ldrd	r3, r2, [r4]
    6b54:	3b00      	subs	r3, #0
    6b56:	bf18      	it	ne
    6b58:	2301      	movne	r3, #1
    6b5a:	61e1      	str	r1, [r4, #28]
    6b5c:	b10a      	cbz	r2, 6b62 <RNG_PLAT_SetUserRngParameters+0x3e>
    6b5e:	f043 0302 	orr.w	r3, r3, #2
    6b62:	68a2      	ldr	r2, [r4, #8]
    6b64:	b932      	cbnz	r2, 6b74 <RNG_PLAT_SetUserRngParameters+0x50>
    6b66:	68e2      	ldr	r2, [r4, #12]
    6b68:	b942      	cbnz	r2, 6b7c <RNG_PLAT_SetUserRngParameters+0x58>
    6b6a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6b6e:	b98b      	cbnz	r3, 6b94 <RNG_PLAT_SetUserRngParameters+0x70>
    6b70:	4d0a      	ldr	r5, [pc, #40]	; (6b9c <RNG_PLAT_SetUserRngParameters+0x78>)
    6b72:	e7e5      	b.n	6b40 <RNG_PLAT_SetUserRngParameters+0x1c>
    6b74:	68e2      	ldr	r2, [r4, #12]
    6b76:	f043 0304 	orr.w	r3, r3, #4
    6b7a:	b13a      	cbz	r2, 6b8c <RNG_PLAT_SetUserRngParameters+0x68>
    6b7c:	2200      	movs	r2, #0
    6b7e:	4628      	mov	r0, r5
    6b80:	f043 0308 	orr.w	r3, r3, #8
    6b84:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6b88:	b003      	add	sp, #12
    6b8a:	bd30      	pop	{r4, r5, pc}
    6b8c:	4615      	mov	r5, r2
    6b8e:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6b92:	e7d9      	b.n	6b48 <RNG_PLAT_SetUserRngParameters+0x24>
    6b94:	4615      	mov	r5, r2
    6b96:	e7d7      	b.n	6b48 <RNG_PLAT_SetUserRngParameters+0x24>
    6b98:	00f00c37 	.word	0x00f00c37
    6b9c:	00f00c0e 	.word	0x00f00c0e

00006ba0 <CC_PalMemCopyPlat>:
    6ba0:	f001 b9e7 	b.w	7f72 <memmove>

00006ba4 <CC_PalMemSetPlat>:
    6ba4:	f001 ba07 	b.w	7fb6 <memset>

00006ba8 <CC_PalMemSetZeroPlat>:
    6ba8:	460a      	mov	r2, r1
    6baa:	2100      	movs	r1, #0
    6bac:	f001 ba03 	b.w	7fb6 <memset>

00006bb0 <CC_PalTrngParamGet>:
    6bb0:	2800      	cmp	r0, #0
    6bb2:	d066      	beq.n	6c82 <CC_PalTrngParamGet+0xd2>
    6bb4:	2900      	cmp	r1, #0
    6bb6:	d064      	beq.n	6c82 <CC_PalTrngParamGet+0xd2>
    6bb8:	680b      	ldr	r3, [r1, #0]
    6bba:	2b1c      	cmp	r3, #28
    6bbc:	d161      	bne.n	6c82 <CC_PalTrngParamGet+0xd2>
    6bbe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bc2:	4a3b      	ldr	r2, [pc, #236]	; (6cb0 <CC_PalTrngParamGet+0x100>)
    6bc4:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    6bc8:	4291      	cmp	r1, r2
    6bca:	d05c      	beq.n	6c86 <CC_PalTrngParamGet+0xd6>
    6bcc:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    6bd0:	3201      	adds	r2, #1
    6bd2:	d058      	beq.n	6c86 <CC_PalTrngParamGet+0xd6>
    6bd4:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    6bd8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bdc:	6002      	str	r2, [r0, #0]
    6bde:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    6be2:	4a34      	ldr	r2, [pc, #208]	; (6cb4 <CC_PalTrngParamGet+0x104>)
    6be4:	4291      	cmp	r1, r2
    6be6:	d060      	beq.n	6caa <CC_PalTrngParamGet+0xfa>
    6be8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6bec:	3201      	adds	r2, #1
    6bee:	d05c      	beq.n	6caa <CC_PalTrngParamGet+0xfa>
    6bf0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6bf4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bf8:	6042      	str	r2, [r0, #4]
    6bfa:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6bfe:	f512 7f94 	cmn.w	r2, #296	; 0x128
    6c02:	d04f      	beq.n	6ca4 <CC_PalTrngParamGet+0xf4>
    6c04:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6c08:	3201      	adds	r2, #1
    6c0a:	d04b      	beq.n	6ca4 <CC_PalTrngParamGet+0xf4>
    6c0c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6c10:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c14:	6082      	str	r2, [r0, #8]
    6c16:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    6c1a:	4a27      	ldr	r2, [pc, #156]	; (6cb8 <CC_PalTrngParamGet+0x108>)
    6c1c:	4291      	cmp	r1, r2
    6c1e:	d03e      	beq.n	6c9e <CC_PalTrngParamGet+0xee>
    6c20:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    6c24:	3201      	adds	r2, #1
    6c26:	d03a      	beq.n	6c9e <CC_PalTrngParamGet+0xee>
    6c28:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    6c2c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c30:	60c2      	str	r2, [r0, #12]
    6c32:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6c36:	3270      	adds	r2, #112	; 0x70
    6c38:	d02f      	beq.n	6c9a <CC_PalTrngParamGet+0xea>
    6c3a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6c3e:	3201      	adds	r2, #1
    6c40:	d02b      	beq.n	6c9a <CC_PalTrngParamGet+0xea>
    6c42:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6c46:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c4a:	6102      	str	r2, [r0, #16]
    6c4c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6c50:	32af      	adds	r2, #175	; 0xaf
    6c52:	d020      	beq.n	6c96 <CC_PalTrngParamGet+0xe6>
    6c54:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6c58:	3201      	adds	r2, #1
    6c5a:	d01c      	beq.n	6c96 <CC_PalTrngParamGet+0xe6>
    6c5c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6c60:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c64:	6142      	str	r2, [r0, #20]
    6c66:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    6c6a:	4a14      	ldr	r2, [pc, #80]	; (6cbc <CC_PalTrngParamGet+0x10c>)
    6c6c:	4291      	cmp	r1, r2
    6c6e:	d00d      	beq.n	6c8c <CC_PalTrngParamGet+0xdc>
    6c70:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    6c74:	3201      	adds	r2, #1
    6c76:	d009      	beq.n	6c8c <CC_PalTrngParamGet+0xdc>
    6c78:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    6c7c:	6183      	str	r3, [r0, #24]
    6c7e:	2000      	movs	r0, #0
    6c80:	4770      	bx	lr
    6c82:	2001      	movs	r0, #1
    6c84:	4770      	bx	lr
    6c86:	f640 02fc 	movw	r2, #2300	; 0x8fc
    6c8a:	e7a5      	b.n	6bd8 <CC_PalTrngParamGet+0x28>
    6c8c:	f240 3337 	movw	r3, #823	; 0x337
    6c90:	6183      	str	r3, [r0, #24]
    6c92:	2000      	movs	r0, #0
    6c94:	4770      	bx	lr
    6c96:	2251      	movs	r2, #81	; 0x51
    6c98:	e7e2      	b.n	6c60 <CC_PalTrngParamGet+0xb0>
    6c9a:	2290      	movs	r2, #144	; 0x90
    6c9c:	e7d3      	b.n	6c46 <CC_PalTrngParamGet+0x96>
    6c9e:	f642 1204 	movw	r2, #10500	; 0x2904
    6ca2:	e7c3      	b.n	6c2c <CC_PalTrngParamGet+0x7c>
    6ca4:	f640 62d8 	movw	r2, #3800	; 0xed8
    6ca8:	e7b2      	b.n	6c10 <CC_PalTrngParamGet+0x60>
    6caa:	f242 02d0 	movw	r2, #8400	; 0x20d0
    6cae:	e7a1      	b.n	6bf4 <CC_PalTrngParamGet+0x44>
    6cb0:	fffff8fc 	.word	0xfffff8fc
    6cb4:	ffff20d0 	.word	0xffff20d0
    6cb8:	ffff2904 	.word	0xffff2904
    6cbc:	fffff337 	.word	0xfffff337

00006cc0 <LLF_RND_WaitRngInterrupt>:
    6cc0:	4601      	mov	r1, r0
    6cc2:	b508      	push	{r3, lr}
    6cc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    6cc8:	f7ff f924 	bl	5f14 <CC_HalWaitInterruptRND>
    6ccc:	2300      	movs	r3, #0
    6cce:	4902      	ldr	r1, [pc, #8]	; (6cd8 <LLF_RND_WaitRngInterrupt+0x18>)
    6cd0:	4a02      	ldr	r2, [pc, #8]	; (6cdc <LLF_RND_WaitRngInterrupt+0x1c>)
    6cd2:	600b      	str	r3, [r1, #0]
    6cd4:	6013      	str	r3, [r2, #0]
    6cd6:	bd08      	pop	{r3, pc}
    6cd8:	508411c8 	.word	0x508411c8
    6cdc:	5084112c 	.word	0x5084112c

00006ce0 <LLF_RND_GetRoscSampleCnt>:
    6ce0:	3801      	subs	r0, #1
    6ce2:	2807      	cmp	r0, #7
    6ce4:	d805      	bhi.n	6cf2 <LLF_RND_GetRoscSampleCnt+0x12>
    6ce6:	e8df f000 	tbb	[pc, r0]
    6cea:	0e0a      	.short	0x0e0a
    6cec:	04041204 	.word	0x04041204
    6cf0:	0604      	.short	0x0604
    6cf2:	4809      	ldr	r0, [pc, #36]	; (6d18 <LLF_RND_GetRoscSampleCnt+0x38>)
    6cf4:	4770      	bx	lr
    6cf6:	68cb      	ldr	r3, [r1, #12]
    6cf8:	2000      	movs	r0, #0
    6cfa:	624b      	str	r3, [r1, #36]	; 0x24
    6cfc:	4770      	bx	lr
    6cfe:	680b      	ldr	r3, [r1, #0]
    6d00:	2000      	movs	r0, #0
    6d02:	624b      	str	r3, [r1, #36]	; 0x24
    6d04:	4770      	bx	lr
    6d06:	684b      	ldr	r3, [r1, #4]
    6d08:	2000      	movs	r0, #0
    6d0a:	624b      	str	r3, [r1, #36]	; 0x24
    6d0c:	4770      	bx	lr
    6d0e:	688b      	ldr	r3, [r1, #8]
    6d10:	2000      	movs	r0, #0
    6d12:	624b      	str	r3, [r1, #36]	; 0x24
    6d14:	4770      	bx	lr
    6d16:	bf00      	nop
    6d18:	00f10c31 	.word	0x00f10c31

00006d1c <LLF_RND_GetFastestRosc>:
    6d1c:	680b      	ldr	r3, [r1, #0]
    6d1e:	e002      	b.n	6d26 <LLF_RND_GetFastestRosc+0xa>
    6d20:	2b08      	cmp	r3, #8
    6d22:	600b      	str	r3, [r1, #0]
    6d24:	d806      	bhi.n	6d34 <LLF_RND_GetFastestRosc+0x18>
    6d26:	6a02      	ldr	r2, [r0, #32]
    6d28:	4213      	tst	r3, r2
    6d2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6d2e:	d0f7      	beq.n	6d20 <LLF_RND_GetFastestRosc+0x4>
    6d30:	2000      	movs	r0, #0
    6d32:	4770      	bx	lr
    6d34:	4800      	ldr	r0, [pc, #0]	; (6d38 <LLF_RND_GetFastestRosc+0x1c>)
    6d36:	4770      	bx	lr
    6d38:	00f10c31 	.word	0x00f10c31

00006d3c <LLF_RND_TurnOffTrng>:
    6d3c:	2300      	movs	r3, #0
    6d3e:	4904      	ldr	r1, [pc, #16]	; (6d50 <LLF_RND_TurnOffTrng+0x14>)
    6d40:	4a04      	ldr	r2, [pc, #16]	; (6d54 <LLF_RND_TurnOffTrng+0x18>)
    6d42:	600b      	str	r3, [r1, #0]
    6d44:	f44f 6080 	mov.w	r0, #1024	; 0x400
    6d48:	6013      	str	r3, [r2, #0]
    6d4a:	f7ff b8c9 	b.w	5ee0 <CC_HalClearInterruptBit>
    6d4e:	bf00      	nop
    6d50:	5084112c 	.word	0x5084112c
    6d54:	508411c4 	.word	0x508411c4

00006d58 <SetDataBuffersInfo>:
    6d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d5c:	2600      	movs	r6, #0
    6d5e:	b082      	sub	sp, #8
    6d60:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6d64:	f88d 6007 	strb.w	r6, [sp, #7]
    6d68:	9e09      	ldr	r6, [sp, #36]	; 0x24
    6d6a:	d327      	bcc.n	6dbc <SetDataBuffersInfo+0x64>
    6d6c:	460c      	mov	r4, r1
    6d6e:	4404      	add	r4, r0
    6d70:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    6d74:	4605      	mov	r5, r0
    6d76:	d821      	bhi.n	6dbc <SetDataBuffersInfo+0x64>
    6d78:	4617      	mov	r7, r2
    6d7a:	4698      	mov	r8, r3
    6d7c:	2201      	movs	r2, #1
    6d7e:	f10d 0307 	add.w	r3, sp, #7
    6d82:	f000 ff9f 	bl	7cc4 <CC_PalDataBufferAttrGet>
    6d86:	4604      	mov	r4, r0
    6d88:	b9c0      	cbnz	r0, 6dbc <SetDataBuffersInfo+0x64>
    6d8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d8e:	603d      	str	r5, [r7, #0]
    6d90:	713b      	strb	r3, [r7, #4]
    6d92:	b1ae      	cbz	r6, 6dc0 <SetDataBuffersInfo+0x68>
    6d94:	f1b8 0f00 	cmp.w	r8, #0
    6d98:	d009      	beq.n	6dae <SetDataBuffersInfo+0x56>
    6d9a:	4602      	mov	r2, r0
    6d9c:	9908      	ldr	r1, [sp, #32]
    6d9e:	4640      	mov	r0, r8
    6da0:	f10d 0307 	add.w	r3, sp, #7
    6da4:	f000 ff8e 	bl	7cc4 <CC_PalDataBufferAttrGet>
    6da8:	b940      	cbnz	r0, 6dbc <SetDataBuffersInfo+0x64>
    6daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dae:	4620      	mov	r0, r4
    6db0:	f8c6 8000 	str.w	r8, [r6]
    6db4:	7133      	strb	r3, [r6, #4]
    6db6:	b002      	add	sp, #8
    6db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dbc:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    6dc0:	4620      	mov	r0, r4
    6dc2:	b002      	add	sp, #8
    6dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006dc8 <InitHashDrv>:
    6dc8:	b1e8      	cbz	r0, 6e06 <InitHashDrv+0x3e>
    6dca:	b510      	push	{r4, lr}
    6dcc:	6804      	ldr	r4, [r0, #0]
    6dce:	2c01      	cmp	r4, #1
    6dd0:	d004      	beq.n	6ddc <InitHashDrv+0x14>
    6dd2:	2c02      	cmp	r4, #2
    6dd4:	d010      	beq.n	6df8 <InitHashDrv+0x30>
    6dd6:	b144      	cbz	r4, 6dea <InitHashDrv+0x22>
    6dd8:	480c      	ldr	r0, [pc, #48]	; (6e0c <InitHashDrv+0x44>)
    6dda:	bd10      	pop	{r4, pc}
    6ddc:	2220      	movs	r2, #32
    6dde:	490c      	ldr	r1, [pc, #48]	; (6e10 <InitHashDrv+0x48>)
    6de0:	3008      	adds	r0, #8
    6de2:	f7ff fedd 	bl	6ba0 <CC_PalMemCopyPlat>
    6de6:	2000      	movs	r0, #0
    6de8:	bd10      	pop	{r4, pc}
    6dea:	2214      	movs	r2, #20
    6dec:	4909      	ldr	r1, [pc, #36]	; (6e14 <InitHashDrv+0x4c>)
    6dee:	3008      	adds	r0, #8
    6df0:	f7ff fed6 	bl	6ba0 <CC_PalMemCopyPlat>
    6df4:	4620      	mov	r0, r4
    6df6:	bd10      	pop	{r4, pc}
    6df8:	2220      	movs	r2, #32
    6dfa:	4907      	ldr	r1, [pc, #28]	; (6e18 <InitHashDrv+0x50>)
    6dfc:	3008      	adds	r0, #8
    6dfe:	f7ff fecf 	bl	6ba0 <CC_PalMemCopyPlat>
    6e02:	2000      	movs	r0, #0
    6e04:	bd10      	pop	{r4, pc}
    6e06:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    6e0a:	4770      	bx	lr
    6e0c:	00f30001 	.word	0x00f30001
    6e10:	00008ad8 	.word	0x00008ad8
    6e14:	00008aa4 	.word	0x00008aa4
    6e18:	00008ab8 	.word	0x00008ab8

00006e1c <ProcessHashDrv>:
    6e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e20:	2900      	cmp	r1, #0
    6e22:	f000 80ef 	beq.w	7004 <ProcessHashDrv+0x1e8>
    6e26:	4604      	mov	r4, r0
    6e28:	2800      	cmp	r0, #0
    6e2a:	f000 80ef 	beq.w	700c <ProcessHashDrv+0x1f0>
    6e2e:	6803      	ldr	r3, [r0, #0]
    6e30:	4617      	mov	r7, r2
    6e32:	460e      	mov	r6, r1
    6e34:	2b00      	cmp	r3, #0
    6e36:	f000 80b9 	beq.w	6fac <ProcessHashDrv+0x190>
    6e3a:	3b01      	subs	r3, #1
    6e3c:	2b01      	cmp	r3, #1
    6e3e:	f200 80cd 	bhi.w	6fdc <ProcessHashDrv+0x1c0>
    6e42:	f04f 31ff 	mov.w	r1, #4294967295
    6e46:	4873      	ldr	r0, [pc, #460]	; (7014 <ProcessHashDrv+0x1f8>)
    6e48:	f04f 0802 	mov.w	r8, #2
    6e4c:	f7ff f8ee 	bl	602c <CC_PalMutexLock>
    6e50:	2800      	cmp	r0, #0
    6e52:	f040 80b5 	bne.w	6fc0 <ProcessHashDrv+0x1a4>
    6e56:	2000      	movs	r0, #0
    6e58:	f7ff f918 	bl	608c <CC_PalPowerSaveModeSelect>
    6e5c:	4605      	mov	r5, r0
    6e5e:	2800      	cmp	r0, #0
    6e60:	f040 80b8 	bne.w	6fd4 <ProcessHashDrv+0x1b8>
    6e64:	4a6c      	ldr	r2, [pc, #432]	; (7018 <ProcessHashDrv+0x1fc>)
    6e66:	6813      	ldr	r3, [r2, #0]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d1fc      	bne.n	6e66 <ProcessHashDrv+0x4a>
    6e6c:	486b      	ldr	r0, [pc, #428]	; (701c <ProcessHashDrv+0x200>)
    6e6e:	6803      	ldr	r3, [r0, #0]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fc      	bne.n	6e6e <ProcessHashDrv+0x52>
    6e74:	f04f 30ff 	mov.w	r0, #4294967295
    6e78:	f7ff f832 	bl	5ee0 <CC_HalClearInterruptBit>
    6e7c:	4b68      	ldr	r3, [pc, #416]	; (7020 <ProcessHashDrv+0x204>)
    6e7e:	6818      	ldr	r0, [r3, #0]
    6e80:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    6e84:	f7ff f83a 	bl	5efc <CC_HalMaskInterrupt>
    6e88:	2301      	movs	r3, #1
    6e8a:	2007      	movs	r0, #7
    6e8c:	4a65      	ldr	r2, [pc, #404]	; (7024 <ProcessHashDrv+0x208>)
    6e8e:	4966      	ldr	r1, [pc, #408]	; (7028 <ProcessHashDrv+0x20c>)
    6e90:	6013      	str	r3, [r2, #0]
    6e92:	6008      	str	r0, [r1, #0]
    6e94:	f842 3c54 	str.w	r3, [r2, #-84]
    6e98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6e9a:	4b64      	ldr	r3, [pc, #400]	; (702c <ProcessHashDrv+0x210>)
    6e9c:	3a48      	subs	r2, #72	; 0x48
    6e9e:	6019      	str	r1, [r3, #0]
    6ea0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6ea2:	6011      	str	r1, [r2, #0]
    6ea4:	f843 8c0c 	str.w	r8, [r3, #-12]
    6ea8:	6823      	ldr	r3, [r4, #0]
    6eaa:	b163      	cbz	r3, 6ec6 <ProcessHashDrv+0xaa>
    6eac:	3b01      	subs	r3, #1
    6eae:	2b01      	cmp	r3, #1
    6eb0:	d818      	bhi.n	6ee4 <ProcessHashDrv+0xc8>
    6eb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6eb4:	4b5e      	ldr	r3, [pc, #376]	; (7030 <ProcessHashDrv+0x214>)
    6eb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    6eba:	6019      	str	r1, [r3, #0]
    6ebc:	6a21      	ldr	r1, [r4, #32]
    6ebe:	6011      	str	r1, [r2, #0]
    6ec0:	69e2      	ldr	r2, [r4, #28]
    6ec2:	f843 2c08 	str.w	r2, [r3, #-8]
    6ec6:	69a1      	ldr	r1, [r4, #24]
    6ec8:	4b5a      	ldr	r3, [pc, #360]	; (7034 <ProcessHashDrv+0x218>)
    6eca:	4a5b      	ldr	r2, [pc, #364]	; (7038 <ProcessHashDrv+0x21c>)
    6ecc:	6019      	str	r1, [r3, #0]
    6ece:	6961      	ldr	r1, [r4, #20]
    6ed0:	6011      	str	r1, [r2, #0]
    6ed2:	6921      	ldr	r1, [r4, #16]
    6ed4:	f843 1c08 	str.w	r1, [r3, #-8]
    6ed8:	68e1      	ldr	r1, [r4, #12]
    6eda:	f842 1c08 	str.w	r1, [r2, #-8]
    6ede:	68a2      	ldr	r2, [r4, #8]
    6ee0:	f843 2c10 	str.w	r2, [r3, #-16]
    6ee4:	4a55      	ldr	r2, [pc, #340]	; (703c <ProcessHashDrv+0x220>)
    6ee6:	6813      	ldr	r3, [r2, #0]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d1fc      	bne.n	6ee6 <ProcessHashDrv+0xca>
    6eec:	2f00      	cmp	r7, #0
    6eee:	d059      	beq.n	6fa4 <ProcessHashDrv+0x188>
    6ef0:	6863      	ldr	r3, [r4, #4]
    6ef2:	2040      	movs	r0, #64	; 0x40
    6ef4:	2b01      	cmp	r3, #1
    6ef6:	bf04      	itt	eq
    6ef8:	4a51      	ldreq	r2, [pc, #324]	; (7040 <ProcessHashDrv+0x224>)
    6efa:	6013      	streq	r3, [r2, #0]
    6efc:	6831      	ldr	r1, [r6, #0]
    6efe:	4a51      	ldr	r2, [pc, #324]	; (7044 <ProcessHashDrv+0x228>)
    6f00:	4b51      	ldr	r3, [pc, #324]	; (7048 <ProcessHashDrv+0x22c>)
    6f02:	6011      	str	r1, [r2, #0]
    6f04:	601f      	str	r7, [r3, #0]
    6f06:	f7fe ffff 	bl	5f08 <CC_HalWaitInterrupt>
    6f0a:	4605      	mov	r5, r0
    6f0c:	4a4b      	ldr	r2, [pc, #300]	; (703c <ProcessHashDrv+0x220>)
    6f0e:	6813      	ldr	r3, [r2, #0]
    6f10:	2b00      	cmp	r3, #0
    6f12:	d1fc      	bne.n	6f0e <ProcessHashDrv+0xf2>
    6f14:	4a41      	ldr	r2, [pc, #260]	; (701c <ProcessHashDrv+0x200>)
    6f16:	6813      	ldr	r3, [r2, #0]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d1fc      	bne.n	6f16 <ProcessHashDrv+0xfa>
    6f1c:	6823      	ldr	r3, [r4, #0]
    6f1e:	b15b      	cbz	r3, 6f38 <ProcessHashDrv+0x11c>
    6f20:	3b01      	subs	r3, #1
    6f22:	2b01      	cmp	r3, #1
    6f24:	d816      	bhi.n	6f54 <ProcessHashDrv+0x138>
    6f26:	4b42      	ldr	r3, [pc, #264]	; (7030 <ProcessHashDrv+0x214>)
    6f28:	4a48      	ldr	r2, [pc, #288]	; (704c <ProcessHashDrv+0x230>)
    6f2a:	6819      	ldr	r1, [r3, #0]
    6f2c:	3b08      	subs	r3, #8
    6f2e:	6261      	str	r1, [r4, #36]	; 0x24
    6f30:	6812      	ldr	r2, [r2, #0]
    6f32:	6222      	str	r2, [r4, #32]
    6f34:	681b      	ldr	r3, [r3, #0]
    6f36:	61e3      	str	r3, [r4, #28]
    6f38:	4b3e      	ldr	r3, [pc, #248]	; (7034 <ProcessHashDrv+0x218>)
    6f3a:	4a3f      	ldr	r2, [pc, #252]	; (7038 <ProcessHashDrv+0x21c>)
    6f3c:	6819      	ldr	r1, [r3, #0]
    6f3e:	3a08      	subs	r2, #8
    6f40:	61a1      	str	r1, [r4, #24]
    6f42:	6891      	ldr	r1, [r2, #8]
    6f44:	3b10      	subs	r3, #16
    6f46:	6161      	str	r1, [r4, #20]
    6f48:	6899      	ldr	r1, [r3, #8]
    6f4a:	6121      	str	r1, [r4, #16]
    6f4c:	6812      	ldr	r2, [r2, #0]
    6f4e:	60e2      	str	r2, [r4, #12]
    6f50:	681b      	ldr	r3, [r3, #0]
    6f52:	60a3      	str	r3, [r4, #8]
    6f54:	2101      	movs	r1, #1
    6f56:	2300      	movs	r3, #0
    6f58:	4834      	ldr	r0, [pc, #208]	; (702c <ProcessHashDrv+0x210>)
    6f5a:	4a3d      	ldr	r2, [pc, #244]	; (7050 <ProcessHashDrv+0x234>)
    6f5c:	6800      	ldr	r0, [r0, #0]
    6f5e:	64a0      	str	r0, [r4, #72]	; 0x48
    6f60:	6810      	ldr	r0, [r2, #0]
    6f62:	64e0      	str	r0, [r4, #76]	; 0x4c
    6f64:	f842 1c0c 	str.w	r1, [r2, #-12]
    6f68:	4835      	ldr	r0, [pc, #212]	; (7040 <ProcessHashDrv+0x224>)
    6f6a:	493a      	ldr	r1, [pc, #232]	; (7054 <ProcessHashDrv+0x238>)
    6f6c:	6003      	str	r3, [r0, #0]
    6f6e:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    6f72:	600b      	str	r3, [r1, #0]
    6f74:	6813      	ldr	r3, [r2, #0]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d1fc      	bne.n	6f74 <ProcessHashDrv+0x158>
    6f7a:	4a2a      	ldr	r2, [pc, #168]	; (7024 <ProcessHashDrv+0x208>)
    6f7c:	6013      	str	r3, [r2, #0]
    6f7e:	2d00      	cmp	r5, #0
    6f80:	d13a      	bne.n	6ff8 <ProcessHashDrv+0x1dc>
    6f82:	4b27      	ldr	r3, [pc, #156]	; (7020 <ProcessHashDrv+0x204>)
    6f84:	6818      	ldr	r0, [r3, #0]
    6f86:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6f8a:	f7fe ffb7 	bl	5efc <CC_HalMaskInterrupt>
    6f8e:	2001      	movs	r0, #1
    6f90:	f7ff f87c 	bl	608c <CC_PalPowerSaveModeSelect>
    6f94:	bb60      	cbnz	r0, 6ff0 <ProcessHashDrv+0x1d4>
    6f96:	481f      	ldr	r0, [pc, #124]	; (7014 <ProcessHashDrv+0x1f8>)
    6f98:	f7ff f850 	bl	603c <CC_PalMutexUnlock>
    6f9c:	bb10      	cbnz	r0, 6fe4 <ProcessHashDrv+0x1c8>
    6f9e:	4628      	mov	r0, r5
    6fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fa4:	2204      	movs	r2, #4
    6fa6:	4b2b      	ldr	r3, [pc, #172]	; (7054 <ProcessHashDrv+0x238>)
    6fa8:	601a      	str	r2, [r3, #0]
    6faa:	e7af      	b.n	6f0c <ProcessHashDrv+0xf0>
    6fac:	f04f 31ff 	mov.w	r1, #4294967295
    6fb0:	4818      	ldr	r0, [pc, #96]	; (7014 <ProcessHashDrv+0x1f8>)
    6fb2:	f04f 0801 	mov.w	r8, #1
    6fb6:	f7ff f839 	bl	602c <CC_PalMutexLock>
    6fba:	2800      	cmp	r0, #0
    6fbc:	f43f af4b 	beq.w	6e56 <ProcessHashDrv+0x3a>
    6fc0:	4825      	ldr	r0, [pc, #148]	; (7058 <ProcessHashDrv+0x23c>)
    6fc2:	f7fe f8e9 	bl	5198 <CC_PalAbort>
    6fc6:	2000      	movs	r0, #0
    6fc8:	f7ff f860 	bl	608c <CC_PalPowerSaveModeSelect>
    6fcc:	4605      	mov	r5, r0
    6fce:	2800      	cmp	r0, #0
    6fd0:	f43f af48 	beq.w	6e64 <ProcessHashDrv+0x48>
    6fd4:	4821      	ldr	r0, [pc, #132]	; (705c <ProcessHashDrv+0x240>)
    6fd6:	f7fe f8df 	bl	5198 <CC_PalAbort>
    6fda:	e743      	b.n	6e64 <ProcessHashDrv+0x48>
    6fdc:	4d20      	ldr	r5, [pc, #128]	; (7060 <ProcessHashDrv+0x244>)
    6fde:	4628      	mov	r0, r5
    6fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fe4:	481f      	ldr	r0, [pc, #124]	; (7064 <ProcessHashDrv+0x248>)
    6fe6:	f7fe f8d7 	bl	5198 <CC_PalAbort>
    6fea:	4628      	mov	r0, r5
    6fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ff0:	481d      	ldr	r0, [pc, #116]	; (7068 <ProcessHashDrv+0x24c>)
    6ff2:	f7fe f8d1 	bl	5198 <CC_PalAbort>
    6ff6:	e7ce      	b.n	6f96 <ProcessHashDrv+0x17a>
    6ff8:	2110      	movs	r1, #16
    6ffa:	f104 0008 	add.w	r0, r4, #8
    6ffe:	f7ff fdd3 	bl	6ba8 <CC_PalMemSetZeroPlat>
    7002:	e7be      	b.n	6f82 <ProcessHashDrv+0x166>
    7004:	4d19      	ldr	r5, [pc, #100]	; (706c <ProcessHashDrv+0x250>)
    7006:	4628      	mov	r0, r5
    7008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    700c:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    7010:	e7c5      	b.n	6f9e <ProcessHashDrv+0x182>
    7012:	bf00      	nop
    7014:	200000b8 	.word	0x200000b8
    7018:	5084191c 	.word	0x5084191c
    701c:	50841c20 	.word	0x50841c20
    7020:	50841a04 	.word	0x50841a04
    7024:	50841818 	.word	0x50841818
    7028:	50841900 	.word	0x50841900
    702c:	508417cc 	.word	0x508417cc
    7030:	5084165c 	.word	0x5084165c
    7034:	50841650 	.word	0x50841650
    7038:	5084164c 	.word	0x5084164c
    703c:	50841910 	.word	0x50841910
    7040:	50841684 	.word	0x50841684
    7044:	50841c28 	.word	0x50841c28
    7048:	50841c2c 	.word	0x50841c2c
    704c:	50841658 	.word	0x50841658
    7050:	508417d0 	.word	0x508417d0
    7054:	508417c8 	.word	0x508417c8
    7058:	000089d8 	.word	0x000089d8
    705c:	000089f0 	.word	0x000089f0
    7060:	00f30001 	.word	0x00f30001
    7064:	00008a30 	.word	0x00008a30
    7068:	00008a10 	.word	0x00008a10
    706c:	00f30003 	.word	0x00f30003

00007070 <FinishHashDrv>:
    7070:	2800      	cmp	r0, #0
    7072:	d03a      	beq.n	70ea <FinishHashDrv+0x7a>
    7074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7078:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    707c:	fa92 f882 	rev.w	r8, r2
    7080:	fa93 fe83 	rev.w	lr, r3
    7084:	6a02      	ldr	r2, [r0, #32]
    7086:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7088:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    708c:	ba12      	rev	r2, r2
    708e:	ba24      	rev	r4, r4
    7090:	ba1b      	rev	r3, r3
    7092:	6104      	str	r4, [r0, #16]
    7094:	6202      	str	r2, [r0, #32]
    7096:	6a84      	ldr	r4, [r0, #40]	; 0x28
    7098:	6b82      	ldr	r2, [r0, #56]	; 0x38
    709a:	6243      	str	r3, [r0, #36]	; 0x24
    709c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    709e:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    70a2:	ba09      	rev	r1, r1
    70a4:	ba36      	rev	r6, r6
    70a6:	ba2d      	rev	r5, r5
    70a8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    70aa:	6086      	str	r6, [r0, #8]
    70ac:	60c5      	str	r5, [r0, #12]
    70ae:	6b06      	ldr	r6, [r0, #48]	; 0x30
    70b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
    70b2:	6141      	str	r1, [r0, #20]
    70b4:	fa94 fc84 	rev.w	ip, r4
    70b8:	ba19      	rev	r1, r3
    70ba:	ba14      	rev	r4, r2
    70bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    70be:	6c02      	ldr	r2, [r0, #64]	; 0x40
    70c0:	ba3f      	rev	r7, r7
    70c2:	ba36      	rev	r6, r6
    70c4:	ba2d      	rev	r5, r5
    70c6:	ba12      	rev	r2, r2
    70c8:	ba1b      	rev	r3, r3
    70ca:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    70ce:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    70d2:	f8c0 8018 	str.w	r8, [r0, #24]
    70d6:	f8c0 e01c 	str.w	lr, [r0, #28]
    70da:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    70de:	62c7      	str	r7, [r0, #44]	; 0x2c
    70e0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    70e4:	2000      	movs	r0, #0
    70e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70ea:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    70ee:	4770      	bx	lr

000070f0 <LoadAesKey>:
    70f0:	2800      	cmp	r0, #0
    70f2:	d060      	beq.n	71b6 <LoadAesKey+0xc6>
    70f4:	b538      	push	{r3, r4, r5, lr}
    70f6:	4604      	mov	r4, r0
    70f8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    70fc:	2802      	cmp	r0, #2
    70fe:	d016      	beq.n	712e <LoadAesKey+0x3e>
    7100:	2803      	cmp	r0, #3
    7102:	d03c      	beq.n	717e <LoadAesKey+0x8e>
    7104:	2800      	cmp	r0, #0
    7106:	d02f      	beq.n	7168 <LoadAesKey+0x78>
    7108:	482c      	ldr	r0, [pc, #176]	; (71bc <LoadAesKey+0xcc>)
    710a:	4d2d      	ldr	r5, [pc, #180]	; (71c0 <LoadAesKey+0xd0>)
    710c:	682a      	ldr	r2, [r5, #0]
    710e:	4b2d      	ldr	r3, [pc, #180]	; (71c4 <LoadAesKey+0xd4>)
    7110:	6812      	ldr	r2, [r2, #0]
    7112:	492d      	ldr	r1, [pc, #180]	; (71c8 <LoadAesKey+0xd8>)
    7114:	601a      	str	r2, [r3, #0]
    7116:	682b      	ldr	r3, [r5, #0]
    7118:	4a2c      	ldr	r2, [pc, #176]	; (71cc <LoadAesKey+0xdc>)
    711a:	685c      	ldr	r4, [r3, #4]
    711c:	4b2c      	ldr	r3, [pc, #176]	; (71d0 <LoadAesKey+0xe0>)
    711e:	600c      	str	r4, [r1, #0]
    7120:	6829      	ldr	r1, [r5, #0]
    7122:	6889      	ldr	r1, [r1, #8]
    7124:	6011      	str	r1, [r2, #0]
    7126:	682a      	ldr	r2, [r5, #0]
    7128:	68d2      	ldr	r2, [r2, #12]
    712a:	601a      	str	r2, [r3, #0]
    712c:	bd38      	pop	{r3, r4, r5, pc}
    712e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7130:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7132:	f000 fbdd 	bl	78f0 <kmu_validate_slot_and_size_no_kdr>
    7136:	4d22      	ldr	r5, [pc, #136]	; (71c0 <LoadAesKey+0xd0>)
    7138:	2800      	cmp	r0, #0
    713a:	d1e7      	bne.n	710c <LoadAesKey+0x1c>
    713c:	682a      	ldr	r2, [r5, #0]
    713e:	4b21      	ldr	r3, [pc, #132]	; (71c4 <LoadAesKey+0xd4>)
    7140:	6810      	ldr	r0, [r2, #0]
    7142:	4921      	ldr	r1, [pc, #132]	; (71c8 <LoadAesKey+0xd8>)
    7144:	6018      	str	r0, [r3, #0]
    7146:	6828      	ldr	r0, [r5, #0]
    7148:	4a20      	ldr	r2, [pc, #128]	; (71cc <LoadAesKey+0xdc>)
    714a:	6840      	ldr	r0, [r0, #4]
    714c:	6008      	str	r0, [r1, #0]
    714e:	6829      	ldr	r1, [r5, #0]
    7150:	6889      	ldr	r1, [r1, #8]
    7152:	6011      	str	r1, [r2, #0]
    7154:	682a      	ldr	r2, [r5, #0]
    7156:	68d2      	ldr	r2, [r2, #12]
    7158:	60da      	str	r2, [r3, #12]
    715a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    715c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    715e:	f000 fc3b 	bl	79d8 <kmu_load_key_aes>
    7162:	2800      	cmp	r0, #0
    7164:	d025      	beq.n	71b2 <LoadAesKey+0xc2>
    7166:	e7d1      	b.n	710c <LoadAesKey+0x1c>
    7168:	6921      	ldr	r1, [r4, #16]
    716a:	4a16      	ldr	r2, [pc, #88]	; (71c4 <LoadAesKey+0xd4>)
    716c:	4b16      	ldr	r3, [pc, #88]	; (71c8 <LoadAesKey+0xd8>)
    716e:	6011      	str	r1, [r2, #0]
    7170:	6961      	ldr	r1, [r4, #20]
    7172:	6019      	str	r1, [r3, #0]
    7174:	69a1      	ldr	r1, [r4, #24]
    7176:	6091      	str	r1, [r2, #8]
    7178:	69e2      	ldr	r2, [r4, #28]
    717a:	609a      	str	r2, [r3, #8]
    717c:	bd38      	pop	{r3, r4, r5, pc}
    717e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7180:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7182:	f000 fbf9 	bl	7978 <kmu_validate_kdr_slot_and_size>
    7186:	4d0e      	ldr	r5, [pc, #56]	; (71c0 <LoadAesKey+0xd0>)
    7188:	2800      	cmp	r0, #0
    718a:	d1bf      	bne.n	710c <LoadAesKey+0x1c>
    718c:	682a      	ldr	r2, [r5, #0]
    718e:	4b0d      	ldr	r3, [pc, #52]	; (71c4 <LoadAesKey+0xd4>)
    7190:	6810      	ldr	r0, [r2, #0]
    7192:	490d      	ldr	r1, [pc, #52]	; (71c8 <LoadAesKey+0xd8>)
    7194:	6018      	str	r0, [r3, #0]
    7196:	6828      	ldr	r0, [r5, #0]
    7198:	4a0c      	ldr	r2, [pc, #48]	; (71cc <LoadAesKey+0xdc>)
    719a:	6840      	ldr	r0, [r0, #4]
    719c:	6008      	str	r0, [r1, #0]
    719e:	6829      	ldr	r1, [r5, #0]
    71a0:	6889      	ldr	r1, [r1, #8]
    71a2:	6011      	str	r1, [r2, #0]
    71a4:	682a      	ldr	r2, [r5, #0]
    71a6:	68d2      	ldr	r2, [r2, #12]
    71a8:	60da      	str	r2, [r3, #12]
    71aa:	f000 fc09 	bl	79c0 <kmu_use_kdr_key>
    71ae:	2800      	cmp	r0, #0
    71b0:	d1ac      	bne.n	710c <LoadAesKey+0x1c>
    71b2:	2000      	movs	r0, #0
    71b4:	bd38      	pop	{r3, r4, r5, pc}
    71b6:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    71ba:	4770      	bx	lr
    71bc:	00f10009 	.word	0x00f10009
    71c0:	200000a8 	.word	0x200000a8
    71c4:	50841400 	.word	0x50841400
    71c8:	50841404 	.word	0x50841404
    71cc:	50841408 	.word	0x50841408
    71d0:	5084140c 	.word	0x5084140c

000071d4 <InitAes.part.0>:
    71d4:	b510      	push	{r4, lr}
    71d6:	4604      	mov	r4, r0
    71d8:	4a31      	ldr	r2, [pc, #196]	; (72a0 <InitAes.part.0+0xcc>)
    71da:	6813      	ldr	r3, [r2, #0]
    71dc:	2b00      	cmp	r3, #0
    71de:	d1fc      	bne.n	71da <InitAes.part.0+0x6>
    71e0:	4a30      	ldr	r2, [pc, #192]	; (72a4 <InitAes.part.0+0xd0>)
    71e2:	6813      	ldr	r3, [r2, #0]
    71e4:	2b00      	cmp	r3, #0
    71e6:	d1fc      	bne.n	71e2 <InitAes.part.0+0xe>
    71e8:	4a2f      	ldr	r2, [pc, #188]	; (72a8 <InitAes.part.0+0xd4>)
    71ea:	6813      	ldr	r3, [r2, #0]
    71ec:	2b00      	cmp	r3, #0
    71ee:	d1fc      	bne.n	71ea <InitAes.part.0+0x16>
    71f0:	4a2e      	ldr	r2, [pc, #184]	; (72ac <InitAes.part.0+0xd8>)
    71f2:	6813      	ldr	r3, [r2, #0]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d1fc      	bne.n	71f2 <InitAes.part.0+0x1e>
    71f8:	4a2d      	ldr	r2, [pc, #180]	; (72b0 <InitAes.part.0+0xdc>)
    71fa:	6813      	ldr	r3, [r2, #0]
    71fc:	2b00      	cmp	r3, #0
    71fe:	d1fc      	bne.n	71fa <InitAes.part.0+0x26>
    7200:	4a2c      	ldr	r2, [pc, #176]	; (72b4 <InitAes.part.0+0xe0>)
    7202:	6813      	ldr	r3, [r2, #0]
    7204:	2b00      	cmp	r3, #0
    7206:	d1fc      	bne.n	7202 <InitAes.part.0+0x2e>
    7208:	f04f 30ff 	mov.w	r0, #4294967295
    720c:	f7fe fe68 	bl	5ee0 <CC_HalClearInterruptBit>
    7210:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7212:	f023 0304 	bic.w	r3, r3, #4
    7216:	2b03      	cmp	r3, #3
    7218:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    721a:	d036      	beq.n	728a <InitAes.part.0+0xb6>
    721c:	2b01      	cmp	r3, #1
    721e:	4b26      	ldr	r3, [pc, #152]	; (72b8 <InitAes.part.0+0xe4>)
    7220:	6818      	ldr	r0, [r3, #0]
    7222:	bf0c      	ite	eq
    7224:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    7228:	f020 0020 	bicne.w	r0, r0, #32
    722c:	f7fe fe66 	bl	5efc <CC_HalMaskInterrupt>
    7230:	2101      	movs	r1, #1
    7232:	4b22      	ldr	r3, [pc, #136]	; (72bc <InitAes.part.0+0xe8>)
    7234:	4a1a      	ldr	r2, [pc, #104]	; (72a0 <InitAes.part.0+0xcc>)
    7236:	6019      	str	r1, [r3, #0]
    7238:	6813      	ldr	r3, [r2, #0]
    723a:	2b00      	cmp	r3, #0
    723c:	d1fc      	bne.n	7238 <InitAes.part.0+0x64>
    723e:	4a19      	ldr	r2, [pc, #100]	; (72a4 <InitAes.part.0+0xd0>)
    7240:	6813      	ldr	r3, [r2, #0]
    7242:	2b00      	cmp	r3, #0
    7244:	d1fc      	bne.n	7240 <InitAes.part.0+0x6c>
    7246:	491e      	ldr	r1, [pc, #120]	; (72c0 <InitAes.part.0+0xec>)
    7248:	4a15      	ldr	r2, [pc, #84]	; (72a0 <InitAes.part.0+0xcc>)
    724a:	600b      	str	r3, [r1, #0]
    724c:	6813      	ldr	r3, [r2, #0]
    724e:	2b00      	cmp	r3, #0
    7250:	d1fc      	bne.n	724c <InitAes.part.0+0x78>
    7252:	4a14      	ldr	r2, [pc, #80]	; (72a4 <InitAes.part.0+0xd0>)
    7254:	6813      	ldr	r3, [r2, #0]
    7256:	2b00      	cmp	r3, #0
    7258:	d1fc      	bne.n	7254 <InitAes.part.0+0x80>
    725a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    725c:	f022 0104 	bic.w	r1, r2, #4
    7260:	2903      	cmp	r1, #3
    7262:	bf18      	it	ne
    7264:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    7266:	ea4f 0282 	mov.w	r2, r2, lsl #2
    726a:	bf18      	it	ne
    726c:	f003 0301 	andne.w	r3, r3, #1
    7270:	4914      	ldr	r1, [pc, #80]	; (72c4 <InitAes.part.0+0xf0>)
    7272:	f002 021c 	and.w	r2, r2, #28
    7276:	4313      	orrs	r3, r2
    7278:	600b      	str	r3, [r1, #0]
    727a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    727c:	2b07      	cmp	r3, #7
    727e:	d102      	bne.n	7286 <InitAes.part.0+0xb2>
    7280:	2201      	movs	r2, #1
    7282:	4b11      	ldr	r3, [pc, #68]	; (72c8 <InitAes.part.0+0xf4>)
    7284:	601a      	str	r2, [r3, #0]
    7286:	2000      	movs	r0, #0
    7288:	bd10      	pop	{r4, pc}
    728a:	2b01      	cmp	r3, #1
    728c:	4b0a      	ldr	r3, [pc, #40]	; (72b8 <InitAes.part.0+0xe4>)
    728e:	6818      	ldr	r0, [r3, #0]
    7290:	bf0c      	ite	eq
    7292:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    7296:	f020 0010 	bicne.w	r0, r0, #16
    729a:	f7fe fe2f 	bl	5efc <CC_HalMaskInterrupt>
    729e:	e7c7      	b.n	7230 <InitAes.part.0+0x5c>
    72a0:	50841910 	.word	0x50841910
    72a4:	50841470 	.word	0x50841470
    72a8:	50841d20 	.word	0x50841d20
    72ac:	50841c20 	.word	0x50841c20
    72b0:	50841d38 	.word	0x50841d38
    72b4:	50841c38 	.word	0x50841c38
    72b8:	50841a04 	.word	0x50841a04
    72bc:	50841900 	.word	0x50841900
    72c0:	508414bc 	.word	0x508414bc
    72c4:	508414c0 	.word	0x508414c0
    72c8:	5084147c 	.word	0x5084147c

000072cc <ProcessAesDrv>:
    72cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72d0:	b087      	sub	sp, #28
    72d2:	2900      	cmp	r1, #0
    72d4:	f000 80a5 	beq.w	7422 <ProcessAesDrv+0x156>
    72d8:	4616      	mov	r6, r2
    72da:	2a00      	cmp	r2, #0
    72dc:	f000 80a1 	beq.w	7422 <ProcessAesDrv+0x156>
    72e0:	4604      	mov	r4, r0
    72e2:	2800      	cmp	r0, #0
    72e4:	f000 8141 	beq.w	756a <ProcessAesDrv+0x29e>
    72e8:	461f      	mov	r7, r3
    72ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    72ec:	460d      	mov	r5, r1
    72ee:	2b00      	cmp	r3, #0
    72f0:	d150      	bne.n	7394 <ProcessAesDrv+0xc8>
    72f2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    72f6:	d252      	bcs.n	739e <ProcessAesDrv+0xd2>
    72f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    72fc:	2b04      	cmp	r3, #4
    72fe:	f000 810b 	beq.w	7518 <ProcessAesDrv+0x24c>
    7302:	f04f 0800 	mov.w	r8, #0
    7306:	f04f 31ff 	mov.w	r1, #4294967295
    730a:	48a9      	ldr	r0, [pc, #676]	; (75b0 <ProcessAesDrv+0x2e4>)
    730c:	f7fe fe8e 	bl	602c <CC_PalMutexLock>
    7310:	2800      	cmp	r0, #0
    7312:	f040 80e0 	bne.w	74d6 <ProcessAesDrv+0x20a>
    7316:	2000      	movs	r0, #0
    7318:	f7fe feb8 	bl	608c <CC_PalPowerSaveModeSelect>
    731c:	2800      	cmp	r0, #0
    731e:	f040 80e3 	bne.w	74e8 <ProcessAesDrv+0x21c>
    7322:	2101      	movs	r1, #1
    7324:	4ba3      	ldr	r3, [pc, #652]	; (75b4 <ProcessAesDrv+0x2e8>)
    7326:	4aa4      	ldr	r2, [pc, #656]	; (75b8 <ProcessAesDrv+0x2ec>)
    7328:	6019      	str	r1, [r3, #0]
    732a:	6813      	ldr	r3, [r2, #0]
    732c:	2b00      	cmp	r3, #0
    732e:	d1fc      	bne.n	732a <ProcessAesDrv+0x5e>
    7330:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7332:	2b03      	cmp	r3, #3
    7334:	dc39      	bgt.n	73aa <ProcessAesDrv+0xde>
    7336:	2b00      	cmp	r3, #0
    7338:	da3a      	bge.n	73b0 <ProcessAesDrv+0xe4>
    733a:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 7604 <ProcessAesDrv+0x338>
    733e:	4a9e      	ldr	r2, [pc, #632]	; (75b8 <ProcessAesDrv+0x2ec>)
    7340:	6813      	ldr	r3, [r2, #0]
    7342:	2b00      	cmp	r3, #0
    7344:	d1fc      	bne.n	7340 <ProcessAesDrv+0x74>
    7346:	f1b8 0f00 	cmp.w	r8, #0
    734a:	f040 80dc 	bne.w	7506 <ProcessAesDrv+0x23a>
    734e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7350:	f023 0304 	bic.w	r3, r3, #4
    7354:	2b03      	cmp	r3, #3
    7356:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7358:	d058      	beq.n	740c <ProcessAesDrv+0x140>
    735a:	2b01      	cmp	r3, #1
    735c:	4b97      	ldr	r3, [pc, #604]	; (75bc <ProcessAesDrv+0x2f0>)
    735e:	6818      	ldr	r0, [r3, #0]
    7360:	bf0c      	ite	eq
    7362:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    7366:	f040 0020 	orrne.w	r0, r0, #32
    736a:	f7fe fdc7 	bl	5efc <CC_HalMaskInterrupt>
    736e:	2200      	movs	r2, #0
    7370:	4b90      	ldr	r3, [pc, #576]	; (75b4 <ProcessAesDrv+0x2e8>)
    7372:	2001      	movs	r0, #1
    7374:	601a      	str	r2, [r3, #0]
    7376:	f7fe fe89 	bl	608c <CC_PalPowerSaveModeSelect>
    737a:	2800      	cmp	r0, #0
    737c:	f040 80bf 	bne.w	74fe <ProcessAesDrv+0x232>
    7380:	488b      	ldr	r0, [pc, #556]	; (75b0 <ProcessAesDrv+0x2e4>)
    7382:	f7fe fe5b 	bl	603c <CC_PalMutexUnlock>
    7386:	2800      	cmp	r0, #0
    7388:	f040 80b2 	bne.w	74f0 <ProcessAesDrv+0x224>
    738c:	4648      	mov	r0, r9
    738e:	b007      	add	sp, #28
    7390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7394:	2b01      	cmp	r3, #1
    7396:	d1af      	bne.n	72f8 <ProcessAesDrv+0x2c>
    7398:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    739c:	d3ac      	bcc.n	72f8 <ProcessAesDrv+0x2c>
    739e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 7608 <ProcessAesDrv+0x33c>
    73a2:	4648      	mov	r0, r9
    73a4:	b007      	add	sp, #28
    73a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73aa:	3b06      	subs	r3, #6
    73ac:	2b01      	cmp	r3, #1
    73ae:	d8c4      	bhi.n	733a <ProcessAesDrv+0x6e>
    73b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73b2:	2b01      	cmp	r3, #1
    73b4:	f200 80d6 	bhi.w	7564 <ProcessAesDrv+0x298>
    73b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    73ba:	2b01      	cmp	r3, #1
    73bc:	d837      	bhi.n	742e <ProcessAesDrv+0x162>
    73be:	6e23      	ldr	r3, [r4, #96]	; 0x60
    73c0:	2b01      	cmp	r3, #1
    73c2:	f200 8134 	bhi.w	762e <ProcessAesDrv+0x362>
    73c6:	4620      	mov	r0, r4
    73c8:	f7ff ff04 	bl	71d4 <InitAes.part.0>
    73cc:	4681      	mov	r9, r0
    73ce:	2800      	cmp	r0, #0
    73d0:	d1b5      	bne.n	733e <ProcessAesDrv+0x72>
    73d2:	4620      	mov	r0, r4
    73d4:	f7ff fe8c 	bl	70f0 <LoadAesKey>
    73d8:	4681      	mov	r9, r0
    73da:	2800      	cmp	r0, #0
    73dc:	d1af      	bne.n	733e <ProcessAesDrv+0x72>
    73de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    73e0:	2b07      	cmp	r3, #7
    73e2:	d8aa      	bhi.n	733a <ProcessAesDrv+0x6e>
    73e4:	a201      	add	r2, pc, #4	; (adr r2, 73ec <ProcessAesDrv+0x120>)
    73e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    73ea:	bf00      	nop
    73ec:	0000744b 	.word	0x0000744b
    73f0:	00007435 	.word	0x00007435
    73f4:	000075a7 	.word	0x000075a7
    73f8:	00007435 	.word	0x00007435
    73fc:	0000733b 	.word	0x0000733b
    7400:	0000733b 	.word	0x0000733b
    7404:	000075a7 	.word	0x000075a7
    7408:	00007435 	.word	0x00007435
    740c:	2b01      	cmp	r3, #1
    740e:	4b6b      	ldr	r3, [pc, #428]	; (75bc <ProcessAesDrv+0x2f0>)
    7410:	6818      	ldr	r0, [r3, #0]
    7412:	bf0c      	ite	eq
    7414:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    7418:	f040 0010 	orrne.w	r0, r0, #16
    741c:	f7fe fd6e 	bl	5efc <CC_HalMaskInterrupt>
    7420:	e7a5      	b.n	736e <ProcessAesDrv+0xa2>
    7422:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 760c <ProcessAesDrv+0x340>
    7426:	4648      	mov	r0, r9
    7428:	b007      	add	sp, #28
    742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    742e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 7610 <ProcessAesDrv+0x344>
    7432:	e784      	b.n	733e <ProcessAesDrv+0x72>
    7434:	6821      	ldr	r1, [r4, #0]
    7436:	4a62      	ldr	r2, [pc, #392]	; (75c0 <ProcessAesDrv+0x2f4>)
    7438:	4b62      	ldr	r3, [pc, #392]	; (75c4 <ProcessAesDrv+0x2f8>)
    743a:	6011      	str	r1, [r2, #0]
    743c:	6861      	ldr	r1, [r4, #4]
    743e:	6019      	str	r1, [r3, #0]
    7440:	68a1      	ldr	r1, [r4, #8]
    7442:	6091      	str	r1, [r2, #8]
    7444:	68e2      	ldr	r2, [r4, #12]
    7446:	609a      	str	r2, [r3, #8]
    7448:	6b63      	ldr	r3, [r4, #52]	; 0x34
    744a:	f023 0304 	bic.w	r3, r3, #4
    744e:	2b03      	cmp	r3, #3
    7450:	682a      	ldr	r2, [r5, #0]
    7452:	d009      	beq.n	7468 <ProcessAesDrv+0x19c>
    7454:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7456:	6833      	ldr	r3, [r6, #0]
    7458:	2901      	cmp	r1, #1
    745a:	bf07      	ittee	eq
    745c:	485a      	ldreq	r0, [pc, #360]	; (75c8 <ProcessAesDrv+0x2fc>)
    745e:	495b      	ldreq	r1, [pc, #364]	; (75cc <ProcessAesDrv+0x300>)
    7460:	485b      	ldrne	r0, [pc, #364]	; (75d0 <ProcessAesDrv+0x304>)
    7462:	495c      	ldrne	r1, [pc, #368]	; (75d4 <ProcessAesDrv+0x308>)
    7464:	6003      	str	r3, [r0, #0]
    7466:	600f      	str	r7, [r1, #0]
    7468:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    746a:	2b01      	cmp	r3, #1
    746c:	bf0b      	itete	eq
    746e:	4b5a      	ldreq	r3, [pc, #360]	; (75d8 <ProcessAesDrv+0x30c>)
    7470:	4b5a      	ldrne	r3, [pc, #360]	; (75dc <ProcessAesDrv+0x310>)
    7472:	495b      	ldreq	r1, [pc, #364]	; (75e0 <ProcessAesDrv+0x314>)
    7474:	495b      	ldrne	r1, [pc, #364]	; (75e4 <ProcessAesDrv+0x318>)
    7476:	600a      	str	r2, [r1, #0]
    7478:	601f      	str	r7, [r3, #0]
    747a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    747c:	f023 0304 	bic.w	r3, r3, #4
    7480:	2b03      	cmp	r3, #3
    7482:	d075      	beq.n	7570 <ProcessAesDrv+0x2a4>
    7484:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7486:	2b01      	cmp	r3, #1
    7488:	bf0c      	ite	eq
    748a:	2080      	moveq	r0, #128	; 0x80
    748c:	2020      	movne	r0, #32
    748e:	f7fe fd3b 	bl	5f08 <CC_HalWaitInterrupt>
    7492:	4681      	mov	r9, r0
    7494:	2800      	cmp	r0, #0
    7496:	f47f af52 	bne.w	733e <ProcessAesDrv+0x72>
    749a:	4b47      	ldr	r3, [pc, #284]	; (75b8 <ProcessAesDrv+0x2ec>)
    749c:	681a      	ldr	r2, [r3, #0]
    749e:	2a00      	cmp	r2, #0
    74a0:	d1fc      	bne.n	749c <ProcessAesDrv+0x1d0>
    74a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    74a4:	4691      	mov	r9, r2
    74a6:	3b01      	subs	r3, #1
    74a8:	2b06      	cmp	r3, #6
    74aa:	d811      	bhi.n	74d0 <ProcessAesDrv+0x204>
    74ac:	e8df f003 	tbb	[pc, r3]
    74b0:	1004bc04 	.word	0x1004bc04
    74b4:	bc10      	.short	0xbc10
    74b6:	04          	.byte	0x04
    74b7:	00          	.byte	0x00
    74b8:	4a41      	ldr	r2, [pc, #260]	; (75c0 <ProcessAesDrv+0x2f4>)
    74ba:	4b42      	ldr	r3, [pc, #264]	; (75c4 <ProcessAesDrv+0x2f8>)
    74bc:	6811      	ldr	r1, [r2, #0]
    74be:	3208      	adds	r2, #8
    74c0:	6021      	str	r1, [r4, #0]
    74c2:	6819      	ldr	r1, [r3, #0]
    74c4:	3308      	adds	r3, #8
    74c6:	6061      	str	r1, [r4, #4]
    74c8:	6812      	ldr	r2, [r2, #0]
    74ca:	60a2      	str	r2, [r4, #8]
    74cc:	681b      	ldr	r3, [r3, #0]
    74ce:	60e3      	str	r3, [r4, #12]
    74d0:	2301      	movs	r3, #1
    74d2:	65a3      	str	r3, [r4, #88]	; 0x58
    74d4:	e733      	b.n	733e <ProcessAesDrv+0x72>
    74d6:	4844      	ldr	r0, [pc, #272]	; (75e8 <ProcessAesDrv+0x31c>)
    74d8:	f7fd fe5e 	bl	5198 <CC_PalAbort>
    74dc:	2000      	movs	r0, #0
    74de:	f7fe fdd5 	bl	608c <CC_PalPowerSaveModeSelect>
    74e2:	2800      	cmp	r0, #0
    74e4:	f43f af1d 	beq.w	7322 <ProcessAesDrv+0x56>
    74e8:	4840      	ldr	r0, [pc, #256]	; (75ec <ProcessAesDrv+0x320>)
    74ea:	f7fd fe55 	bl	5198 <CC_PalAbort>
    74ee:	e718      	b.n	7322 <ProcessAesDrv+0x56>
    74f0:	483f      	ldr	r0, [pc, #252]	; (75f0 <ProcessAesDrv+0x324>)
    74f2:	f7fd fe51 	bl	5198 <CC_PalAbort>
    74f6:	4648      	mov	r0, r9
    74f8:	b007      	add	sp, #28
    74fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74fe:	483d      	ldr	r0, [pc, #244]	; (75f4 <ProcessAesDrv+0x328>)
    7500:	f7fd fe4a 	bl	5198 <CC_PalAbort>
    7504:	e73c      	b.n	7380 <ProcessAesDrv+0xb4>
    7506:	2304      	movs	r3, #4
    7508:	2120      	movs	r1, #32
    750a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    750e:	f104 0010 	add.w	r0, r4, #16
    7512:	f7ff fb49 	bl	6ba8 <CC_PalMemSetZeroPlat>
    7516:	e71a      	b.n	734e <ProcessAesDrv+0x82>
    7518:	6b21      	ldr	r1, [r4, #48]	; 0x30
    751a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    751c:	f000 f9d2 	bl	78c4 <kmu_validate_slot_and_size>
    7520:	b9e8      	cbnz	r0, 755e <ProcessAesDrv+0x292>
    7522:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 7614 <ProcessAesDrv+0x348>
    7526:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 7618 <ProcessAesDrv+0x34c>
    752a:	f8d8 3000 	ldr.w	r3, [r8]
    752e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 761c <ProcessAesDrv+0x350>
    7532:	681b      	ldr	r3, [r3, #0]
    7534:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7620 <ProcessAesDrv+0x354>
    7538:	f8cb 3000 	str.w	r3, [fp]
    753c:	f8d8 3000 	ldr.w	r3, [r8]
    7540:	4a2d      	ldr	r2, [pc, #180]	; (75f8 <ProcessAesDrv+0x32c>)
    7542:	685b      	ldr	r3, [r3, #4]
    7544:	f8ca 3000 	str.w	r3, [sl]
    7548:	f8d8 3000 	ldr.w	r3, [r8]
    754c:	689b      	ldr	r3, [r3, #8]
    754e:	f8c9 3000 	str.w	r3, [r9]
    7552:	f8d8 3000 	ldr.w	r3, [r8]
    7556:	68db      	ldr	r3, [r3, #12]
    7558:	6013      	str	r3, [r2, #0]
    755a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    755c:	b171      	cbz	r1, 757c <ProcessAesDrv+0x2b0>
    755e:	f04f 0801 	mov.w	r8, #1
    7562:	e6d0      	b.n	7306 <ProcessAesDrv+0x3a>
    7564:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7624 <ProcessAesDrv+0x358>
    7568:	e6e9      	b.n	733e <ProcessAesDrv+0x72>
    756a:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    756e:	e70d      	b.n	738c <ProcessAesDrv+0xc0>
    7570:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7572:	2b01      	cmp	r3, #1
    7574:	bf0c      	ite	eq
    7576:	2040      	moveq	r0, #64	; 0x40
    7578:	2010      	movne	r0, #16
    757a:	e788      	b.n	748e <ProcessAesDrv+0x1c2>
    757c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    7580:	9300      	str	r3, [sp, #0]
    7582:	2310      	movs	r3, #16
    7584:	f104 0010 	add.w	r0, r4, #16
    7588:	e9cd 2001 	strd	r2, r0, [sp, #4]
    758c:	9303      	str	r3, [sp, #12]
    758e:	9005      	str	r0, [sp, #20]
    7590:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    7594:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7596:	f000 fa93 	bl	7ac0 <kmu_derive_cmac>
    759a:	2800      	cmp	r0, #0
    759c:	d14a      	bne.n	7634 <ProcessAesDrv+0x368>
    759e:	2300      	movs	r3, #0
    75a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    75a4:	e7db      	b.n	755e <ProcessAesDrv+0x292>
    75a6:	6821      	ldr	r1, [r4, #0]
    75a8:	4a14      	ldr	r2, [pc, #80]	; (75fc <ProcessAesDrv+0x330>)
    75aa:	4b15      	ldr	r3, [pc, #84]	; (7600 <ProcessAesDrv+0x334>)
    75ac:	e745      	b.n	743a <ProcessAesDrv+0x16e>
    75ae:	bf00      	nop
    75b0:	200000b8 	.word	0x200000b8
    75b4:	50841810 	.word	0x50841810
    75b8:	50841910 	.word	0x50841910
    75bc:	50841a04 	.word	0x50841a04
    75c0:	50841440 	.word	0x50841440
    75c4:	50841444 	.word	0x50841444
    75c8:	50841d28 	.word	0x50841d28
    75cc:	50841d2c 	.word	0x50841d2c
    75d0:	50841d30 	.word	0x50841d30
    75d4:	50841d34 	.word	0x50841d34
    75d8:	50841c2c 	.word	0x50841c2c
    75dc:	50841c34 	.word	0x50841c34
    75e0:	50841c28 	.word	0x50841c28
    75e4:	50841c30 	.word	0x50841c30
    75e8:	000089d8 	.word	0x000089d8
    75ec:	000089f0 	.word	0x000089f0
    75f0:	00008a30 	.word	0x00008a30
    75f4:	00008a10 	.word	0x00008a10
    75f8:	5084140c 	.word	0x5084140c
    75fc:	50841460 	.word	0x50841460
    7600:	50841464 	.word	0x50841464
    7604:	00f10001 	.word	0x00f10001
    7608:	00f10005 	.word	0x00f10005
    760c:	00f1000b 	.word	0x00f1000b
    7610:	00f10003 	.word	0x00f10003
    7614:	200000a8 	.word	0x200000a8
    7618:	50841400 	.word	0x50841400
    761c:	50841404 	.word	0x50841404
    7620:	50841408 	.word	0x50841408
    7624:	00f10002 	.word	0x00f10002
    7628:	4a0f      	ldr	r2, [pc, #60]	; (7668 <ProcessAesDrv+0x39c>)
    762a:	4b10      	ldr	r3, [pc, #64]	; (766c <ProcessAesDrv+0x3a0>)
    762c:	e746      	b.n	74bc <ProcessAesDrv+0x1f0>
    762e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 7674 <ProcessAesDrv+0x3a8>
    7632:	e684      	b.n	733e <ProcessAesDrv+0x72>
    7634:	f8d8 3000 	ldr.w	r3, [r8]
    7638:	9805      	ldr	r0, [sp, #20]
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	4a0c      	ldr	r2, [pc, #48]	; (7670 <ProcessAesDrv+0x3a4>)
    763e:	f8cb 3000 	str.w	r3, [fp]
    7642:	f8d8 3000 	ldr.w	r3, [r8]
    7646:	2110      	movs	r1, #16
    7648:	685b      	ldr	r3, [r3, #4]
    764a:	f8ca 3000 	str.w	r3, [sl]
    764e:	f8d8 3000 	ldr.w	r3, [r8]
    7652:	689b      	ldr	r3, [r3, #8]
    7654:	f8c9 3000 	str.w	r3, [r9]
    7658:	f8d8 3000 	ldr.w	r3, [r8]
    765c:	68db      	ldr	r3, [r3, #12]
    765e:	6013      	str	r3, [r2, #0]
    7660:	f7ff faa2 	bl	6ba8 <CC_PalMemSetZeroPlat>
    7664:	e79b      	b.n	759e <ProcessAesDrv+0x2d2>
    7666:	bf00      	nop
    7668:	50841460 	.word	0x50841460
    766c:	50841464 	.word	0x50841464
    7670:	5084140c 	.word	0x5084140c
    7674:	00f10004 	.word	0x00f10004

00007678 <FinishAesDrv>:
    7678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    767c:	b301      	cbz	r1, 76c0 <FinishAesDrv+0x48>
    767e:	b1fa      	cbz	r2, 76c0 <FinishAesDrv+0x48>
    7680:	4604      	mov	r4, r0
    7682:	2800      	cmp	r0, #0
    7684:	d07a      	beq.n	777c <FinishAesDrv+0x104>
    7686:	461d      	mov	r5, r3
    7688:	6b43      	ldr	r3, [r0, #52]	; 0x34
    768a:	460e      	mov	r6, r1
    768c:	2b07      	cmp	r3, #7
    768e:	d01b      	beq.n	76c8 <FinishAesDrv+0x50>
    7690:	b95d      	cbnz	r5, 76aa <FinishAesDrv+0x32>
    7692:	2b03      	cmp	r3, #3
    7694:	d110      	bne.n	76b8 <FinishAesDrv+0x40>
    7696:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7698:	b973      	cbnz	r3, 76b8 <FinishAesDrv+0x40>
    769a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    769e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    76a2:	2510      	movs	r5, #16
    76a4:	f100 0364 	add.w	r3, r0, #100	; 0x64
    76a8:	600b      	str	r3, [r1, #0]
    76aa:	462b      	mov	r3, r5
    76ac:	4631      	mov	r1, r6
    76ae:	4620      	mov	r0, r4
    76b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76b4:	f7ff be0a 	b.w	72cc <ProcessAesDrv>
    76b8:	462f      	mov	r7, r5
    76ba:	4638      	mov	r0, r7
    76bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76c0:	4f68      	ldr	r7, [pc, #416]	; (7864 <FinishAesDrv+0x1ec>)
    76c2:	4638      	mov	r0, r7
    76c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    76ca:	2b00      	cmp	r3, #0
    76cc:	d159      	bne.n	7782 <FinishAesDrv+0x10a>
    76ce:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    76d2:	d25b      	bcs.n	778c <FinishAesDrv+0x114>
    76d4:	b915      	cbnz	r5, 76dc <FinishAesDrv+0x64>
    76d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
    76d8:	2b00      	cmp	r3, #0
    76da:	d157      	bne.n	778c <FinishAesDrv+0x114>
    76dc:	f04f 31ff 	mov.w	r1, #4294967295
    76e0:	4861      	ldr	r0, [pc, #388]	; (7868 <FinishAesDrv+0x1f0>)
    76e2:	f7fe fca3 	bl	602c <CC_PalMutexLock>
    76e6:	2800      	cmp	r0, #0
    76e8:	f040 809a 	bne.w	7820 <FinishAesDrv+0x1a8>
    76ec:	2000      	movs	r0, #0
    76ee:	f7fe fccd 	bl	608c <CC_PalPowerSaveModeSelect>
    76f2:	2800      	cmp	r0, #0
    76f4:	f040 8090 	bne.w	7818 <FinishAesDrv+0x1a0>
    76f8:	2101      	movs	r1, #1
    76fa:	4b5c      	ldr	r3, [pc, #368]	; (786c <FinishAesDrv+0x1f4>)
    76fc:	4a5c      	ldr	r2, [pc, #368]	; (7870 <FinishAesDrv+0x1f8>)
    76fe:	6019      	str	r1, [r3, #0]
    7700:	6813      	ldr	r3, [r2, #0]
    7702:	2b00      	cmp	r3, #0
    7704:	d1fc      	bne.n	7700 <FinishAesDrv+0x88>
    7706:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7708:	2b03      	cmp	r3, #3
    770a:	dd20      	ble.n	774e <FinishAesDrv+0xd6>
    770c:	3b06      	subs	r3, #6
    770e:	2b01      	cmp	r3, #1
    7710:	d81f      	bhi.n	7752 <FinishAesDrv+0xda>
    7712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7714:	2b01      	cmp	r3, #1
    7716:	d83b      	bhi.n	7790 <FinishAesDrv+0x118>
    7718:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    771a:	2b01      	cmp	r3, #1
    771c:	f200 8088 	bhi.w	7830 <FinishAesDrv+0x1b8>
    7720:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7722:	2b01      	cmp	r3, #1
    7724:	f200 8086 	bhi.w	7834 <FinishAesDrv+0x1bc>
    7728:	4620      	mov	r0, r4
    772a:	f7ff fd53 	bl	71d4 <InitAes.part.0>
    772e:	4607      	mov	r7, r0
    7730:	b980      	cbnz	r0, 7754 <FinishAesDrv+0xdc>
    7732:	4620      	mov	r0, r4
    7734:	f7ff fcdc 	bl	70f0 <LoadAesKey>
    7738:	4607      	mov	r7, r0
    773a:	b958      	cbnz	r0, 7754 <FinishAesDrv+0xdc>
    773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    773e:	2b07      	cmp	r3, #7
    7740:	d807      	bhi.n	7752 <FinishAesDrv+0xda>
    7742:	e8df f003 	tbb	[pc, r3]
    7746:	2731      	.short	0x2731
    7748:	06062755 	.word	0x06062755
    774c:	2755      	.short	0x2755
    774e:	2b00      	cmp	r3, #0
    7750:	dadf      	bge.n	7712 <FinishAesDrv+0x9a>
    7752:	4f48      	ldr	r7, [pc, #288]	; (7874 <FinishAesDrv+0x1fc>)
    7754:	4a46      	ldr	r2, [pc, #280]	; (7870 <FinishAesDrv+0x1f8>)
    7756:	6813      	ldr	r3, [r2, #0]
    7758:	2b00      	cmp	r3, #0
    775a:	d1fc      	bne.n	7756 <FinishAesDrv+0xde>
    775c:	4a43      	ldr	r2, [pc, #268]	; (786c <FinishAesDrv+0x1f4>)
    775e:	2001      	movs	r0, #1
    7760:	6013      	str	r3, [r2, #0]
    7762:	f7fe fc93 	bl	608c <CC_PalPowerSaveModeSelect>
    7766:	2800      	cmp	r0, #0
    7768:	d15e      	bne.n	7828 <FinishAesDrv+0x1b0>
    776a:	483f      	ldr	r0, [pc, #252]	; (7868 <FinishAesDrv+0x1f0>)
    776c:	f7fe fc66 	bl	603c <CC_PalMutexUnlock>
    7770:	2800      	cmp	r0, #0
    7772:	d0a2      	beq.n	76ba <FinishAesDrv+0x42>
    7774:	4840      	ldr	r0, [pc, #256]	; (7878 <FinishAesDrv+0x200>)
    7776:	f7fd fd0f 	bl	5198 <CC_PalAbort>
    777a:	e79e      	b.n	76ba <FinishAesDrv+0x42>
    777c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    7780:	e79b      	b.n	76ba <FinishAesDrv+0x42>
    7782:	2b01      	cmp	r3, #1
    7784:	d1a6      	bne.n	76d4 <FinishAesDrv+0x5c>
    7786:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    778a:	d3a3      	bcc.n	76d4 <FinishAesDrv+0x5c>
    778c:	4f3b      	ldr	r7, [pc, #236]	; (787c <FinishAesDrv+0x204>)
    778e:	e794      	b.n	76ba <FinishAesDrv+0x42>
    7790:	4f3b      	ldr	r7, [pc, #236]	; (7880 <FinishAesDrv+0x208>)
    7792:	e7df      	b.n	7754 <FinishAesDrv+0xdc>
    7794:	6821      	ldr	r1, [r4, #0]
    7796:	4a3b      	ldr	r2, [pc, #236]	; (7884 <FinishAesDrv+0x20c>)
    7798:	4b3b      	ldr	r3, [pc, #236]	; (7888 <FinishAesDrv+0x210>)
    779a:	6011      	str	r1, [r2, #0]
    779c:	6861      	ldr	r1, [r4, #4]
    779e:	6019      	str	r1, [r3, #0]
    77a0:	68a1      	ldr	r1, [r4, #8]
    77a2:	6091      	str	r1, [r2, #8]
    77a4:	68e2      	ldr	r2, [r4, #12]
    77a6:	609a      	str	r2, [r3, #8]
    77a8:	2301      	movs	r3, #1
    77aa:	4938      	ldr	r1, [pc, #224]	; (788c <FinishAesDrv+0x214>)
    77ac:	4a38      	ldr	r2, [pc, #224]	; (7890 <FinishAesDrv+0x218>)
    77ae:	600b      	str	r3, [r1, #0]
    77b0:	6015      	str	r5, [r2, #0]
    77b2:	2d00      	cmp	r5, #0
    77b4:	d140      	bne.n	7838 <FinishAesDrv+0x1c0>
    77b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    77b8:	b90a      	cbnz	r2, 77be <FinishAesDrv+0x146>
    77ba:	4a36      	ldr	r2, [pc, #216]	; (7894 <FinishAesDrv+0x21c>)
    77bc:	6013      	str	r3, [r2, #0]
    77be:	4b2c      	ldr	r3, [pc, #176]	; (7870 <FinishAesDrv+0x1f8>)
    77c0:	681f      	ldr	r7, [r3, #0]
    77c2:	2f00      	cmp	r7, #0
    77c4:	d1fc      	bne.n	77c0 <FinishAesDrv+0x148>
    77c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77c8:	3b01      	subs	r3, #1
    77ca:	2b06      	cmp	r3, #6
    77cc:	d8c2      	bhi.n	7754 <FinishAesDrv+0xdc>
    77ce:	a201      	add	r2, pc, #4	; (adr r2, 77d4 <FinishAesDrv+0x15c>)
    77d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    77d4:	000077f9 	.word	0x000077f9
    77d8:	00007813 	.word	0x00007813
    77dc:	000077f9 	.word	0x000077f9
    77e0:	00007755 	.word	0x00007755
    77e4:	00007755 	.word	0x00007755
    77e8:	00007813 	.word	0x00007813
    77ec:	000077f9 	.word	0x000077f9
    77f0:	6821      	ldr	r1, [r4, #0]
    77f2:	4a29      	ldr	r2, [pc, #164]	; (7898 <FinishAesDrv+0x220>)
    77f4:	4b29      	ldr	r3, [pc, #164]	; (789c <FinishAesDrv+0x224>)
    77f6:	e7d0      	b.n	779a <FinishAesDrv+0x122>
    77f8:	4a22      	ldr	r2, [pc, #136]	; (7884 <FinishAesDrv+0x20c>)
    77fa:	4b23      	ldr	r3, [pc, #140]	; (7888 <FinishAesDrv+0x210>)
    77fc:	6811      	ldr	r1, [r2, #0]
    77fe:	3208      	adds	r2, #8
    7800:	6021      	str	r1, [r4, #0]
    7802:	6819      	ldr	r1, [r3, #0]
    7804:	3308      	adds	r3, #8
    7806:	6061      	str	r1, [r4, #4]
    7808:	6812      	ldr	r2, [r2, #0]
    780a:	60a2      	str	r2, [r4, #8]
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	60e3      	str	r3, [r4, #12]
    7810:	e7a0      	b.n	7754 <FinishAesDrv+0xdc>
    7812:	4a21      	ldr	r2, [pc, #132]	; (7898 <FinishAesDrv+0x220>)
    7814:	4b21      	ldr	r3, [pc, #132]	; (789c <FinishAesDrv+0x224>)
    7816:	e7f1      	b.n	77fc <FinishAesDrv+0x184>
    7818:	4821      	ldr	r0, [pc, #132]	; (78a0 <FinishAesDrv+0x228>)
    781a:	f7fd fcbd 	bl	5198 <CC_PalAbort>
    781e:	e76b      	b.n	76f8 <FinishAesDrv+0x80>
    7820:	4820      	ldr	r0, [pc, #128]	; (78a4 <FinishAesDrv+0x22c>)
    7822:	f7fd fcb9 	bl	5198 <CC_PalAbort>
    7826:	e761      	b.n	76ec <FinishAesDrv+0x74>
    7828:	481f      	ldr	r0, [pc, #124]	; (78a8 <FinishAesDrv+0x230>)
    782a:	f7fd fcb5 	bl	5198 <CC_PalAbort>
    782e:	e79c      	b.n	776a <FinishAesDrv+0xf2>
    7830:	4f1e      	ldr	r7, [pc, #120]	; (78ac <FinishAesDrv+0x234>)
    7832:	e78f      	b.n	7754 <FinishAesDrv+0xdc>
    7834:	4f1e      	ldr	r7, [pc, #120]	; (78b0 <FinishAesDrv+0x238>)
    7836:	e78d      	b.n	7754 <FinishAesDrv+0xdc>
    7838:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    783a:	6833      	ldr	r3, [r6, #0]
    783c:	2a01      	cmp	r2, #1
    783e:	d00a      	beq.n	7856 <FinishAesDrv+0x1de>
    7840:	2010      	movs	r0, #16
    7842:	491c      	ldr	r1, [pc, #112]	; (78b4 <FinishAesDrv+0x23c>)
    7844:	4a1c      	ldr	r2, [pc, #112]	; (78b8 <FinishAesDrv+0x240>)
    7846:	600b      	str	r3, [r1, #0]
    7848:	6015      	str	r5, [r2, #0]
    784a:	f7fe fb5d 	bl	5f08 <CC_HalWaitInterrupt>
    784e:	4607      	mov	r7, r0
    7850:	2800      	cmp	r0, #0
    7852:	d0b4      	beq.n	77be <FinishAesDrv+0x146>
    7854:	e77e      	b.n	7754 <FinishAesDrv+0xdc>
    7856:	4919      	ldr	r1, [pc, #100]	; (78bc <FinishAesDrv+0x244>)
    7858:	4a19      	ldr	r2, [pc, #100]	; (78c0 <FinishAesDrv+0x248>)
    785a:	600b      	str	r3, [r1, #0]
    785c:	2040      	movs	r0, #64	; 0x40
    785e:	6015      	str	r5, [r2, #0]
    7860:	e7f3      	b.n	784a <FinishAesDrv+0x1d2>
    7862:	bf00      	nop
    7864:	00f1000b 	.word	0x00f1000b
    7868:	200000b8 	.word	0x200000b8
    786c:	50841810 	.word	0x50841810
    7870:	50841910 	.word	0x50841910
    7874:	00f10001 	.word	0x00f10001
    7878:	00008a30 	.word	0x00008a30
    787c:	00f10005 	.word	0x00f10005
    7880:	00f10002 	.word	0x00f10002
    7884:	50841440 	.word	0x50841440
    7888:	50841444 	.word	0x50841444
    788c:	5084147c 	.word	0x5084147c
    7890:	508414bc 	.word	0x508414bc
    7894:	50841524 	.word	0x50841524
    7898:	50841460 	.word	0x50841460
    789c:	50841464 	.word	0x50841464
    78a0:	000089f0 	.word	0x000089f0
    78a4:	000089d8 	.word	0x000089d8
    78a8:	00008a10 	.word	0x00008a10
    78ac:	00f10003 	.word	0x00f10003
    78b0:	00f10004 	.word	0x00f10004
    78b4:	50841c30 	.word	0x50841c30
    78b8:	50841c34 	.word	0x50841c34
    78bc:	50841c28 	.word	0x50841c28
    78c0:	50841c2c 	.word	0x50841c2c

000078c4 <kmu_validate_slot_and_size>:
    78c4:	287f      	cmp	r0, #127	; 0x7f
    78c6:	d80c      	bhi.n	78e2 <kmu_validate_slot_and_size+0x1e>
    78c8:	b149      	cbz	r1, 78de <kmu_validate_slot_and_size+0x1a>
    78ca:	2903      	cmp	r1, #3
    78cc:	d001      	beq.n	78d2 <kmu_validate_slot_and_size+0xe>
    78ce:	4806      	ldr	r0, [pc, #24]	; (78e8 <kmu_validate_slot_and_size+0x24>)
    78d0:	4770      	bx	lr
    78d2:	4906      	ldr	r1, [pc, #24]	; (78ec <kmu_validate_slot_and_size+0x28>)
    78d4:	287f      	cmp	r0, #127	; 0x7f
    78d6:	bf0c      	ite	eq
    78d8:	4608      	moveq	r0, r1
    78da:	2000      	movne	r0, #0
    78dc:	4770      	bx	lr
    78de:	4608      	mov	r0, r1
    78e0:	4770      	bx	lr
    78e2:	4802      	ldr	r0, [pc, #8]	; (78ec <kmu_validate_slot_and_size+0x28>)
    78e4:	4770      	bx	lr
    78e6:	bf00      	nop
    78e8:	00f70003 	.word	0x00f70003
    78ec:	00f70001 	.word	0x00f70001

000078f0 <kmu_validate_slot_and_size_no_kdr>:
    78f0:	b4f0      	push	{r4, r5, r6, r7}
    78f2:	4a1c      	ldr	r2, [pc, #112]	; (7964 <kmu_validate_slot_and_size_no_kdr+0x74>)
    78f4:	00c5      	lsls	r5, r0, #3
    78f6:	1c44      	adds	r4, r0, #1
    78f8:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
    78fc:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7900:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7904:	681c      	ldr	r4, [r3, #0]
    7906:	b082      	sub	sp, #8
    7908:	f3bf 8f4f 	dsb	sy
    790c:	2300      	movs	r3, #0
    790e:	9400      	str	r4, [sp, #0]
    7910:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7914:	9e00      	ldr	r6, [sp, #0]
    7916:	4c14      	ldr	r4, [pc, #80]	; (7968 <kmu_validate_slot_and_size_no_kdr+0x78>)
    7918:	42a6      	cmp	r6, r4
    791a:	d018      	beq.n	794e <kmu_validate_slot_and_size_no_kdr+0x5e>
    791c:	b1a9      	cbz	r1, 794a <kmu_validate_slot_and_size_no_kdr+0x5a>
    791e:	4e13      	ldr	r6, [pc, #76]	; (796c <kmu_validate_slot_and_size_no_kdr+0x7c>)
    7920:	1c87      	adds	r7, r0, #2
    7922:	442e      	add	r6, r5
    7924:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
    7928:	6835      	ldr	r5, [r6, #0]
    792a:	f3bf 8f4f 	dsb	sy
    792e:	9501      	str	r5, [sp, #4]
    7930:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7934:	9a01      	ldr	r2, [sp, #4]
    7936:	42a2      	cmp	r2, r4
    7938:	d009      	beq.n	794e <kmu_validate_slot_and_size_no_kdr+0x5e>
    793a:	287f      	cmp	r0, #127	; 0x7f
    793c:	d807      	bhi.n	794e <kmu_validate_slot_and_size_no_kdr+0x5e>
    793e:	2903      	cmp	r1, #3
    7940:	d10b      	bne.n	795a <kmu_validate_slot_and_size_no_kdr+0x6a>
    7942:	287f      	cmp	r0, #127	; 0x7f
    7944:	d003      	beq.n	794e <kmu_validate_slot_and_size_no_kdr+0x5e>
    7946:	4618      	mov	r0, r3
    7948:	e002      	b.n	7950 <kmu_validate_slot_and_size_no_kdr+0x60>
    794a:	287f      	cmp	r0, #127	; 0x7f
    794c:	d903      	bls.n	7956 <kmu_validate_slot_and_size_no_kdr+0x66>
    794e:	4808      	ldr	r0, [pc, #32]	; (7970 <kmu_validate_slot_and_size_no_kdr+0x80>)
    7950:	b002      	add	sp, #8
    7952:	bcf0      	pop	{r4, r5, r6, r7}
    7954:	4770      	bx	lr
    7956:	4608      	mov	r0, r1
    7958:	e7fa      	b.n	7950 <kmu_validate_slot_and_size_no_kdr+0x60>
    795a:	4806      	ldr	r0, [pc, #24]	; (7974 <kmu_validate_slot_and_size_no_kdr+0x84>)
    795c:	b002      	add	sp, #8
    795e:	bcf0      	pop	{r4, r5, r6, r7}
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	50039000 	.word	0x50039000
    7968:	50841a50 	.word	0x50841a50
    796c:	00ff8408 	.word	0x00ff8408
    7970:	00f70001 	.word	0x00f70001
    7974:	00f70003 	.word	0x00f70003

00007978 <kmu_validate_kdr_slot_and_size>:
    7978:	b9b9      	cbnz	r1, 79aa <kmu_validate_kdr_slot_and_size+0x32>
    797a:	4a0d      	ldr	r2, [pc, #52]	; (79b0 <kmu_validate_kdr_slot_and_size+0x38>)
    797c:	00c3      	lsls	r3, r0, #3
    797e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7982:	3001      	adds	r0, #1
    7984:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7988:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    798c:	b082      	sub	sp, #8
    798e:	681b      	ldr	r3, [r3, #0]
    7990:	f3bf 8f4f 	dsb	sy
    7994:	9301      	str	r3, [sp, #4]
    7996:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    799a:	9a01      	ldr	r2, [sp, #4]
    799c:	4b05      	ldr	r3, [pc, #20]	; (79b4 <kmu_validate_kdr_slot_and_size+0x3c>)
    799e:	4806      	ldr	r0, [pc, #24]	; (79b8 <kmu_validate_kdr_slot_and_size+0x40>)
    79a0:	429a      	cmp	r2, r3
    79a2:	bf08      	it	eq
    79a4:	2000      	moveq	r0, #0
    79a6:	b002      	add	sp, #8
    79a8:	4770      	bx	lr
    79aa:	4804      	ldr	r0, [pc, #16]	; (79bc <kmu_validate_kdr_slot_and_size+0x44>)
    79ac:	4770      	bx	lr
    79ae:	bf00      	nop
    79b0:	50039000 	.word	0x50039000
    79b4:	50841a50 	.word	0x50841a50
    79b8:	00f70001 	.word	0x00f70001
    79bc:	00f70003 	.word	0x00f70003

000079c0 <kmu_use_kdr_key>:
    79c0:	2000      	movs	r0, #0
    79c2:	2201      	movs	r2, #1
    79c4:	4902      	ldr	r1, [pc, #8]	; (79d0 <kmu_use_kdr_key+0x10>)
    79c6:	4b03      	ldr	r3, [pc, #12]	; (79d4 <kmu_use_kdr_key+0x14>)
    79c8:	6008      	str	r0, [r1, #0]
    79ca:	601a      	str	r2, [r3, #0]
    79cc:	4770      	bx	lr
    79ce:	bf00      	nop
    79d0:	50841a38 	.word	0x50841a38
    79d4:	50841478 	.word	0x50841478

000079d8 <kmu_load_key_aes>:
    79d8:	b109      	cbz	r1, 79de <kmu_load_key_aes+0x6>
    79da:	4832      	ldr	r0, [pc, #200]	; (7aa4 <kmu_load_key_aes+0xcc>)
    79dc:	4770      	bx	lr
    79de:	b430      	push	{r4, r5}
    79e0:	2401      	movs	r4, #1
    79e2:	4b31      	ldr	r3, [pc, #196]	; (7aa8 <kmu_load_key_aes+0xd0>)
    79e4:	4a31      	ldr	r2, [pc, #196]	; (7aac <kmu_load_key_aes+0xd4>)
    79e6:	b084      	sub	sp, #16
    79e8:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    79ec:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    79f0:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    79f4:	00c2      	lsls	r2, r0, #3
    79f6:	9502      	str	r5, [sp, #8]
    79f8:	9d02      	ldr	r5, [sp, #8]
    79fa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    79fe:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    7a02:	4420      	add	r0, r4
    7a04:	9502      	str	r5, [sp, #8]
    7a06:	9d02      	ldr	r5, [sp, #8]
    7a08:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7a0c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7a10:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    7a14:	9102      	str	r1, [sp, #8]
    7a16:	9902      	ldr	r1, [sp, #8]
    7a18:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
    7a1c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7a20:	6812      	ldr	r2, [r2, #0]
    7a22:	f3bf 8f4f 	dsb	sy
    7a26:	9203      	str	r2, [sp, #12]
    7a28:	9903      	ldr	r1, [sp, #12]
    7a2a:	4a21      	ldr	r2, [pc, #132]	; (7ab0 <kmu_load_key_aes+0xd8>)
    7a2c:	4291      	cmp	r1, r2
    7a2e:	d132      	bne.n	7a96 <kmu_load_key_aes+0xbe>
    7a30:	461a      	mov	r2, r3
    7a32:	601c      	str	r4, [r3, #0]
    7a34:	e005      	b.n	7a42 <kmu_load_key_aes+0x6a>
    7a36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a3a:	b9db      	cbnz	r3, 7a74 <kmu_load_key_aes+0x9c>
    7a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a40:	b9c3      	cbnz	r3, 7a74 <kmu_load_key_aes+0x9c>
    7a42:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7a46:	3b00      	subs	r3, #0
    7a48:	bf18      	it	ne
    7a4a:	2301      	movne	r3, #1
    7a4c:	f88d 3005 	strb.w	r3, [sp, #5]
    7a50:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7a54:	3b00      	subs	r3, #0
    7a56:	bf18      	it	ne
    7a58:	2301      	movne	r3, #1
    7a5a:	f88d 3006 	strb.w	r3, [sp, #6]
    7a5e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7a62:	3b00      	subs	r3, #0
    7a64:	bf18      	it	ne
    7a66:	2301      	movne	r3, #1
    7a68:	f88d 3007 	strb.w	r3, [sp, #7]
    7a6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d0e0      	beq.n	7a36 <kmu_load_key_aes+0x5e>
    7a74:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a78:	b98b      	cbnz	r3, 7a9e <kmu_load_key_aes+0xc6>
    7a7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7a82:	b933      	cbnz	r3, 7a92 <kmu_load_key_aes+0xba>
    7a84:	4610      	mov	r0, r2
    7a86:	4b08      	ldr	r3, [pc, #32]	; (7aa8 <kmu_load_key_aes+0xd0>)
    7a88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7a8c:	b004      	add	sp, #16
    7a8e:	bc30      	pop	{r4, r5}
    7a90:	4770      	bx	lr
    7a92:	4808      	ldr	r0, [pc, #32]	; (7ab4 <kmu_load_key_aes+0xdc>)
    7a94:	e7fa      	b.n	7a8c <kmu_load_key_aes+0xb4>
    7a96:	4808      	ldr	r0, [pc, #32]	; (7ab8 <kmu_load_key_aes+0xe0>)
    7a98:	b004      	add	sp, #16
    7a9a:	bc30      	pop	{r4, r5}
    7a9c:	4770      	bx	lr
    7a9e:	4807      	ldr	r0, [pc, #28]	; (7abc <kmu_load_key_aes+0xe4>)
    7aa0:	e7f4      	b.n	7a8c <kmu_load_key_aes+0xb4>
    7aa2:	bf00      	nop
    7aa4:	00f1000c 	.word	0x00f1000c
    7aa8:	50039000 	.word	0x50039000
    7aac:	50840000 	.word	0x50840000
    7ab0:	50841400 	.word	0x50841400
    7ab4:	00f70002 	.word	0x00f70002
    7ab8:	00f70006 	.word	0x00f70006
    7abc:	00f70001 	.word	0x00f70001

00007ac0 <kmu_derive_cmac>:
    7ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ac4:	2400      	movs	r4, #0
    7ac6:	b0ce      	sub	sp, #312	; 0x138
    7ac8:	4605      	mov	r5, r0
    7aca:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    7ace:	468a      	mov	sl, r1
    7ad0:	4617      	mov	r7, r2
    7ad2:	4621      	mov	r1, r4
    7ad4:	2274      	movs	r2, #116	; 0x74
    7ad6:	a810      	add	r0, sp, #64	; 0x40
    7ad8:	4698      	mov	r8, r3
    7ada:	f000 fa6c 	bl	7fb6 <memset>
    7ade:	4621      	mov	r1, r4
    7ae0:	2280      	movs	r2, #128	; 0x80
    7ae2:	a82e      	add	r0, sp, #184	; 0xb8
    7ae4:	942d      	str	r4, [sp, #180]	; 0xb4
    7ae6:	f000 fa66 	bl	7fb6 <memset>
    7aea:	2384      	movs	r3, #132	; 0x84
    7aec:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    7af0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    7af4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    7af8:	9306      	str	r3, [sp, #24]
    7afa:	d873      	bhi.n	7be4 <kmu_derive_cmac+0x124>
    7afc:	ab06      	add	r3, sp, #24
    7afe:	ac2d      	add	r4, sp, #180	; 0xb4
    7b00:	9301      	str	r3, [sp, #4]
    7b02:	4641      	mov	r1, r8
    7b04:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    7b08:	4638      	mov	r0, r7
    7b0a:	9602      	str	r6, [sp, #8]
    7b0c:	9400      	str	r4, [sp, #0]
    7b0e:	f000 f87d 	bl	7c0c <UtilCmacBuildDataForDerivation>
    7b12:	2800      	cmp	r0, #0
    7b14:	d16d      	bne.n	7bf2 <kmu_derive_cmac+0x132>
    7b16:	2200      	movs	r2, #0
    7b18:	2301      	movs	r3, #1
    7b1a:	2101      	movs	r1, #1
    7b1c:	2707      	movs	r7, #7
    7b1e:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    7b22:	4a36      	ldr	r2, [pc, #216]	; (7bfc <kmu_derive_cmac+0x13c>)
    7b24:	00eb      	lsls	r3, r5, #3
    7b26:	9520      	str	r5, [sp, #128]	; 0x80
    7b28:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7b2c:	440d      	add	r5, r1
    7b2e:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
    7b32:	901e      	str	r0, [sp, #120]	; 0x78
    7b34:	9128      	str	r1, [sp, #160]	; 0xa0
    7b36:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7b3a:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
    7b3e:	681b      	ldr	r3, [r3, #0]
    7b40:	f3bf 8f4f 	dsb	sy
    7b44:	9307      	str	r3, [sp, #28]
    7b46:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7b4a:	9a07      	ldr	r2, [sp, #28]
    7b4c:	4b2c      	ldr	r3, [pc, #176]	; (7c00 <kmu_derive_cmac+0x140>)
    7b4e:	429a      	cmp	r2, r3
    7b50:	d142      	bne.n	7bd8 <kmu_derive_cmac+0x118>
    7b52:	2203      	movs	r2, #3
    7b54:	f10d 0317 	add.w	r3, sp, #23
    7b58:	701a      	strb	r2, [r3, #0]
    7b5a:	781b      	ldrb	r3, [r3, #0]
    7b5c:	2110      	movs	r1, #16
    7b5e:	a810      	add	r0, sp, #64	; 0x40
    7b60:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    7b64:	f7ff f820 	bl	6ba8 <CC_PalMemSetZeroPlat>
    7b68:	2210      	movs	r2, #16
    7b6a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    7b6e:	9200      	str	r2, [sp, #0]
    7b70:	4620      	mov	r0, r4
    7b72:	9906      	ldr	r1, [sp, #24]
    7b74:	ab0c      	add	r3, sp, #48	; 0x30
    7b76:	aa08      	add	r2, sp, #32
    7b78:	f8cd 8004 	str.w	r8, [sp, #4]
    7b7c:	f7ff f8ec 	bl	6d58 <SetDataBuffersInfo>
    7b80:	4607      	mov	r7, r0
    7b82:	bb00      	cbnz	r0, 7bc6 <kmu_derive_cmac+0x106>
    7b84:	2401      	movs	r4, #1
    7b86:	e010      	b.n	7baa <kmu_derive_cmac+0xea>
    7b88:	2e10      	cmp	r6, #16
    7b8a:	4635      	mov	r5, r6
    7b8c:	bf28      	it	cs
    7b8e:	2510      	movcs	r5, #16
    7b90:	a910      	add	r1, sp, #64	; 0x40
    7b92:	462a      	mov	r2, r5
    7b94:	f7ff f804 	bl	6ba0 <CC_PalMemCopyPlat>
    7b98:	2110      	movs	r1, #16
    7b9a:	a810      	add	r0, sp, #64	; 0x40
    7b9c:	f7ff f804 	bl	6ba8 <CC_PalMemSetZeroPlat>
    7ba0:	3401      	adds	r4, #1
    7ba2:	1b76      	subs	r6, r6, r5
    7ba4:	442f      	add	r7, r5
    7ba6:	b2e4      	uxtb	r4, r4
    7ba8:	d021      	beq.n	7bee <kmu_derive_cmac+0x12e>
    7baa:	9b06      	ldr	r3, [sp, #24]
    7bac:	4642      	mov	r2, r8
    7bae:	a908      	add	r1, sp, #32
    7bb0:	a810      	add	r0, sp, #64	; 0x40
    7bb2:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    7bb6:	f7ff fd5f 	bl	7678 <FinishAesDrv>
    7bba:	4603      	mov	r3, r0
    7bbc:	eb09 0007 	add.w	r0, r9, r7
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d0e1      	beq.n	7b88 <kmu_derive_cmac+0xc8>
    7bc4:	461f      	mov	r7, r3
    7bc6:	a810      	add	r0, sp, #64	; 0x40
    7bc8:	2274      	movs	r2, #116	; 0x74
    7bca:	2100      	movs	r1, #0
    7bcc:	f7fe ffea 	bl	6ba4 <CC_PalMemSetPlat>
    7bd0:	4638      	mov	r0, r7
    7bd2:	b04e      	add	sp, #312	; 0x138
    7bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bd8:	2202      	movs	r2, #2
    7bda:	f10d 0317 	add.w	r3, sp, #23
    7bde:	f88d 2017 	strb.w	r2, [sp, #23]
    7be2:	e7ba      	b.n	7b5a <kmu_derive_cmac+0x9a>
    7be4:	4f07      	ldr	r7, [pc, #28]	; (7c04 <kmu_derive_cmac+0x144>)
    7be6:	4638      	mov	r0, r7
    7be8:	b04e      	add	sp, #312	; 0x138
    7bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bee:	4637      	mov	r7, r6
    7bf0:	e7e9      	b.n	7bc6 <kmu_derive_cmac+0x106>
    7bf2:	4f05      	ldr	r7, [pc, #20]	; (7c08 <kmu_derive_cmac+0x148>)
    7bf4:	4638      	mov	r0, r7
    7bf6:	b04e      	add	sp, #312	; 0x138
    7bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bfc:	50039000 	.word	0x50039000
    7c00:	50841a50 	.word	0x50841a50
    7c04:	00f1000f 	.word	0x00f1000f
    7c08:	00f1000e 	.word	0x00f1000e

00007c0c <UtilCmacBuildDataForDerivation>:
    7c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c10:	2600      	movs	r6, #0
    7c12:	b082      	sub	sp, #8
    7c14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7c16:	9601      	str	r6, [sp, #4]
    7c18:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    7c1c:	d83b      	bhi.n	7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c1e:	00ee      	lsls	r6, r5, #3
    7c20:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    7c24:	461f      	mov	r7, r3
    7c26:	bf34      	ite	cc
    7c28:	2303      	movcc	r3, #3
    7c2a:	2304      	movcs	r3, #4
    7c2c:	1e4d      	subs	r5, r1, #1
    7c2e:	2d3f      	cmp	r5, #63	; 0x3f
    7c30:	460c      	mov	r4, r1
    7c32:	9300      	str	r3, [sp, #0]
    7c34:	d82f      	bhi.n	7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c36:	b370      	cbz	r0, 7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c38:	4690      	mov	r8, r2
    7c3a:	b117      	cbz	r7, 7c42 <UtilCmacBuildDataForDerivation+0x36>
    7c3c:	b35a      	cbz	r2, 7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c3e:	2f40      	cmp	r7, #64	; 0x40
    7c40:	d829      	bhi.n	7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c42:	9a08      	ldr	r2, [sp, #32]
    7c44:	b33a      	cbz	r2, 7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c48:	6811      	ldr	r1, [r2, #0]
    7c4a:	b321      	cbz	r1, 7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c4c:	19e2      	adds	r2, r4, r7
    7c4e:	4413      	add	r3, r2
    7c50:	4299      	cmp	r1, r3
    7c52:	d320      	bcc.n	7c96 <UtilCmacBuildDataForDerivation+0x8a>
    7c54:	9b08      	ldr	r3, [sp, #32]
    7c56:	4622      	mov	r2, r4
    7c58:	4601      	mov	r1, r0
    7c5a:	1c58      	adds	r0, r3, #1
    7c5c:	f7fe ffa0 	bl	6ba0 <CC_PalMemCopyPlat>
    7c60:	2200      	movs	r2, #0
    7c62:	9b08      	ldr	r3, [sp, #32]
    7c64:	4423      	add	r3, r4
    7c66:	705a      	strb	r2, [r3, #1]
    7c68:	3402      	adds	r4, #2
    7c6a:	bb07      	cbnz	r7, 7cae <UtilCmacBuildDataForDerivation+0xa2>
    7c6c:	2eff      	cmp	r6, #255	; 0xff
    7c6e:	9600      	str	r6, [sp, #0]
    7c70:	d915      	bls.n	7c9e <UtilCmacBuildDataForDerivation+0x92>
    7c72:	9b08      	ldr	r3, [sp, #32]
    7c74:	0235      	lsls	r5, r6, #8
    7c76:	b2ad      	uxth	r5, r5
    7c78:	1918      	adds	r0, r3, r4
    7c7a:	2202      	movs	r2, #2
    7c7c:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    7c80:	a901      	add	r1, sp, #4
    7c82:	9501      	str	r5, [sp, #4]
    7c84:	f7fe ff8c 	bl	6ba0 <CC_PalMemCopyPlat>
    7c88:	3402      	adds	r4, #2
    7c8a:	2000      	movs	r0, #0
    7c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c8e:	601c      	str	r4, [r3, #0]
    7c90:	b002      	add	sp, #8
    7c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c96:	480a      	ldr	r0, [pc, #40]	; (7cc0 <UtilCmacBuildDataForDerivation+0xb4>)
    7c98:	b002      	add	sp, #8
    7c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c9e:	9b08      	ldr	r3, [sp, #32]
    7ca0:	2201      	movs	r2, #1
    7ca2:	1918      	adds	r0, r3, r4
    7ca4:	4669      	mov	r1, sp
    7ca6:	f7fe ff7b 	bl	6ba0 <CC_PalMemCopyPlat>
    7caa:	3401      	adds	r4, #1
    7cac:	e7ed      	b.n	7c8a <UtilCmacBuildDataForDerivation+0x7e>
    7cae:	9b08      	ldr	r3, [sp, #32]
    7cb0:	4641      	mov	r1, r8
    7cb2:	1918      	adds	r0, r3, r4
    7cb4:	463a      	mov	r2, r7
    7cb6:	f7fe ff73 	bl	6ba0 <CC_PalMemCopyPlat>
    7cba:	443c      	add	r4, r7
    7cbc:	e7d6      	b.n	7c6c <UtilCmacBuildDataForDerivation+0x60>
    7cbe:	bf00      	nop
    7cc0:	80000006 	.word	0x80000006

00007cc4 <CC_PalDataBufferAttrGet>:
    7cc4:	2000      	movs	r0, #0
    7cc6:	7018      	strb	r0, [r3, #0]
    7cc8:	4770      	bx	lr
    7cca:	bf00      	nop

00007ccc <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    7ccc:	b508      	push	{r3, lr}
	spm_config();
    7cce:	f7f9 fa73 	bl	11b8 <spm_config>
	spm_jump();
}
    7cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    7cd6:	f7f9 ba0f 	b.w	10f8 <spm_jump>

00007cda <arch_printk_char_out>:
}
    7cda:	2000      	movs	r0, #0
    7cdc:	4770      	bx	lr

00007cde <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    7cde:	b40f      	push	{r0, r1, r2, r3}
    7ce0:	b507      	push	{r0, r1, r2, lr}
    7ce2:	a904      	add	r1, sp, #16
    7ce4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7ce8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7cea:	f7f8 fc49 	bl	580 <vprintk>
	}
	va_end(ap);
}
    7cee:	b003      	add	sp, #12
    7cf0:	f85d eb04 	ldr.w	lr, [sp], #4
    7cf4:	b004      	add	sp, #16
    7cf6:	4770      	bx	lr

00007cf8 <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
    7cf8:	b538      	push	{r3, r4, r5, lr}
    7cfa:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7cfc:	4605      	mov	r5, r0
    7cfe:	b158      	cbz	r0, 7d18 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7d00:	b151      	cbz	r1, 7d18 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7d02:	680b      	ldr	r3, [r1, #0]
    7d04:	b143      	cbz	r3, 7d18 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7d06:	684b      	ldr	r3, [r1, #4]
    7d08:	b133      	cbz	r3, 7d18 <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7d0a:	2220      	movs	r2, #32
    7d0c:	2100      	movs	r1, #0
    7d0e:	f000 f952 	bl	7fb6 <memset>

	return 0;
    7d12:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7d14:	612c      	str	r4, [r5, #16]
}
    7d16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7d18:	f06f 0015 	mvn.w	r0, #21
    7d1c:	e7fb      	b.n	7d16 <onoff_manager_init+0x1e>

00007d1e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7d1e:	4604      	mov	r4, r0
    7d20:	b508      	push	{r3, lr}
    7d22:	4608      	mov	r0, r1
    7d24:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7d26:	461a      	mov	r2, r3
    7d28:	47a0      	blx	r4
	return z_impl_z_current_get();
    7d2a:	f7fc fe95 	bl	4a58 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7d2e:	f7fa f92d 	bl	1f8c <z_impl_k_thread_abort>

00007d32 <encode_uint>:
{
    7d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d36:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    7d38:	78d3      	ldrb	r3, [r2, #3]
{
    7d3a:	4614      	mov	r4, r2
	switch (specifier) {
    7d3c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7d3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    7d42:	4606      	mov	r6, r0
    7d44:	460f      	mov	r7, r1
    7d46:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    7d48:	d02d      	beq.n	7da6 <encode_uint+0x74>
    7d4a:	d828      	bhi.n	7d9e <encode_uint+0x6c>
		return 16;
    7d4c:	2b58      	cmp	r3, #88	; 0x58
    7d4e:	bf14      	ite	ne
    7d50:	250a      	movne	r5, #10
    7d52:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    7d54:	46aa      	mov	sl, r5
    7d56:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    7d5a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    7d5e:	4652      	mov	r2, sl
    7d60:	465b      	mov	r3, fp
    7d62:	4630      	mov	r0, r6
    7d64:	4639      	mov	r1, r7
    7d66:	f7f8 fa69 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7d6a:	2a09      	cmp	r2, #9
    7d6c:	b2d3      	uxtb	r3, r2
    7d6e:	d81f      	bhi.n	7db0 <encode_uint+0x7e>
    7d70:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7d72:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7d74:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    7d76:	bf08      	it	eq
    7d78:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7d7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    7d7e:	d301      	bcc.n	7d84 <encode_uint+0x52>
    7d80:	45c8      	cmp	r8, r9
    7d82:	d812      	bhi.n	7daa <encode_uint+0x78>
	if (conv->flag_hash) {
    7d84:	7823      	ldrb	r3, [r4, #0]
    7d86:	069b      	lsls	r3, r3, #26
    7d88:	d505      	bpl.n	7d96 <encode_uint+0x64>
		if (radix == 8) {
    7d8a:	2d08      	cmp	r5, #8
    7d8c:	d116      	bne.n	7dbc <encode_uint+0x8a>
			conv->altform_0 = true;
    7d8e:	78a3      	ldrb	r3, [r4, #2]
    7d90:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7d94:	70a3      	strb	r3, [r4, #2]
}
    7d96:	4640      	mov	r0, r8
    7d98:	b003      	add	sp, #12
    7d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7d9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7da2:	2b70      	cmp	r3, #112	; 0x70
    7da4:	e7d3      	b.n	7d4e <encode_uint+0x1c>
	switch (specifier) {
    7da6:	2508      	movs	r5, #8
    7da8:	e7d4      	b.n	7d54 <encode_uint+0x22>
		value /= radix;
    7daa:	4606      	mov	r6, r0
    7dac:	460f      	mov	r7, r1
    7dae:	e7d6      	b.n	7d5e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7db0:	9a01      	ldr	r2, [sp, #4]
    7db2:	2a19      	cmp	r2, #25
    7db4:	bf94      	ite	ls
    7db6:	3337      	addls	r3, #55	; 0x37
    7db8:	3357      	addhi	r3, #87	; 0x57
    7dba:	e7da      	b.n	7d72 <encode_uint+0x40>
		} else if (radix == 16) {
    7dbc:	2d10      	cmp	r5, #16
    7dbe:	d1ea      	bne.n	7d96 <encode_uint+0x64>
			conv->altform_0c = true;
    7dc0:	78a3      	ldrb	r3, [r4, #2]
    7dc2:	f043 0310 	orr.w	r3, r3, #16
    7dc6:	e7e5      	b.n	7d94 <encode_uint+0x62>

00007dc8 <outs>:
{
    7dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dcc:	4607      	mov	r7, r0
    7dce:	4688      	mov	r8, r1
    7dd0:	4615      	mov	r5, r2
    7dd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7dd4:	4614      	mov	r4, r2
    7dd6:	42b4      	cmp	r4, r6
    7dd8:	eba4 0005 	sub.w	r0, r4, r5
    7ddc:	d302      	bcc.n	7de4 <outs+0x1c>
    7dde:	b93e      	cbnz	r6, 7df0 <outs+0x28>
    7de0:	7823      	ldrb	r3, [r4, #0]
    7de2:	b12b      	cbz	r3, 7df0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7de4:	4641      	mov	r1, r8
    7de6:	f814 0b01 	ldrb.w	r0, [r4], #1
    7dea:	47b8      	blx	r7
		if (rc < 0) {
    7dec:	2800      	cmp	r0, #0
    7dee:	daf2      	bge.n	7dd6 <outs+0xe>
}
    7df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007df4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7df4:	4040      	eors	r0, r0
    7df6:	f380 8811 	msr	BASEPRI, r0
    7dfa:	f04f 0004 	mov.w	r0, #4
    7dfe:	df02      	svc	2
}
    7e00:	4770      	bx	lr

00007e02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7e02:	4770      	bx	lr

00007e04 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7e04:	b084      	sub	sp, #16
    7e06:	ab04      	add	r3, sp, #16
    7e08:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7e0c:	2300      	movs	r3, #0
    7e0e:	f383 8811 	msr	BASEPRI, r3
    7e12:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7e16:	b004      	add	sp, #16
    7e18:	4770      	bx	lr

00007e1a <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    7e1a:	b40f      	push	{r0, r1, r2, r3}
    7e1c:	b507      	push	{r0, r1, r2, lr}
    7e1e:	a904      	add	r1, sp, #16
    7e20:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7e24:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7e26:	f7f8 fbab 	bl	580 <vprintk>
	va_end(ap);
}
    7e2a:	b003      	add	sp, #12
    7e2c:	f85d eb04 	ldr.w	lr, [sp], #4
    7e30:	b004      	add	sp, #16
    7e32:	4770      	bx	lr

00007e34 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7e34:	2200      	movs	r2, #0
    7e36:	e9c0 2200 	strd	r2, r2, [r0]
    7e3a:	6082      	str	r2, [r0, #8]
}
    7e3c:	4770      	bx	lr

00007e3e <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    7e3e:	b538      	push	{r3, r4, r5, lr}
    7e40:	4605      	mov	r5, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    7e42:	460c      	mov	r4, r1
    7e44:	b951      	cbnz	r1, 7e5c <__acle_se_spm_firmware_info_nse+0x1e>
		return -EINVAL;
    7e46:	f06f 0015 	mvn.w	r0, #21
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
}
    7e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7e4e:	4671      	mov	r1, lr
    7e50:	4672      	mov	r2, lr
    7e52:	4673      	mov	r3, lr
    7e54:	46f4      	mov	ip, lr
    7e56:	f38e 8c00 	msr	CPSR_fs, lr
    7e5a:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
    7e5c:	f000 f864 	bl	7f28 <arm_cmse_addr_is_secure>
	if (!ptr_in_secure_area(fw_address)) {
    7e60:	2801      	cmp	r0, #1
    7e62:	d1f0      	bne.n	7e46 <__acle_se_spm_firmware_info_nse+0x8>
	return arm_cmse_addr_is_secure(ptr) == 1;
    7e64:	4620      	mov	r0, r4
    7e66:	f000 f85f 	bl	7f28 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)info)) {
    7e6a:	2801      	cmp	r0, #1
    7e6c:	d0eb      	beq.n	7e46 <__acle_se_spm_firmware_info_nse+0x8>
	tmp_info = fw_info_find(fw_address);
    7e6e:	4628      	mov	r0, r5
    7e70:	f7f9 fa8c 	bl	138c <fw_info_find>
	if (tmp_info != NULL) {
    7e74:	4601      	mov	r1, r0
    7e76:	b128      	cbz	r0, 7e84 <__acle_se_spm_firmware_info_nse+0x46>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    7e78:	223c      	movs	r2, #60	; 0x3c
    7e7a:	4620      	mov	r0, r4
    7e7c:	f000 f890 	bl	7fa0 <memcpy>
		return 0;
    7e80:	2000      	movs	r0, #0
    7e82:	e7e2      	b.n	7e4a <__acle_se_spm_firmware_info_nse+0xc>
	return -EFAULT;
    7e84:	f06f 000d 	mvn.w	r0, #13
    7e88:	e7df      	b.n	7e4a <__acle_se_spm_firmware_info_nse+0xc>

00007e8a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    7e8a:	2000      	movs	r0, #0
{
    7e8c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7e8e:	f7f8 ff45 	bl	d1c <sys_reboot>

00007e92 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7e92:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7e94:	6800      	ldr	r0, [r0, #0]
    7e96:	f7f9 bc11 	b.w	16bc <z_arm_fatal_error>

00007e9a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7e9a:	2100      	movs	r1, #0
    7e9c:	2001      	movs	r0, #1
    7e9e:	f7f9 bc0d 	b.w	16bc <z_arm_fatal_error>

00007ea2 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    7ea2:	4602      	mov	r2, r0
    7ea4:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    7ea6:	4608      	mov	r0, r1
    7ea8:	b9c1      	cbnz	r1, 7edc <__kernel_ram_size+0xc>
  if ((int32_t)(IRQn) >= 0)
    7eaa:	2b00      	cmp	r3, #0
    7eac:	db27      	blt.n	7efe <__kernel_ram_size+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7eae:	2001      	movs	r0, #1
    7eb0:	095b      	lsrs	r3, r3, #5
    7eb2:	009b      	lsls	r3, r3, #2
    7eb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7eb8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7ebc:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    7ec0:	f002 021f 	and.w	r2, r2, #31
    7ec4:	4090      	lsls	r0, r2
    7ec6:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7eca:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    7ece:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    7ed2:	40d0      	lsrs	r0, r2
    7ed4:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    7ed8:	b2c0      	uxtb	r0, r0
    7eda:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    7edc:	2b00      	cmp	r3, #0
    7ede:	db0d      	blt.n	7efc <__kernel_ram_size+0x2c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7ee0:	2101      	movs	r1, #1
    7ee2:	095b      	lsrs	r3, r3, #5
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7eea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7eee:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    7ef2:	f002 021f 	and.w	r2, r2, #31
    7ef6:	4091      	lsls	r1, r2
    7ef8:	4301      	orrs	r1, r0
    7efa:	e7e6      	b.n	7eca <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    7efc:	2000      	movs	r0, #0
	}
}
    7efe:	4770      	bx	lr

00007f00 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7f00:	b508      	push	{r3, lr}
	handler();
    7f02:	f7f9 fc4d 	bl	17a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7f0a:	f7f9 bd0f 	b.w	192c <z_arm_exc_exit>

00007f0e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    7f0e:	6e43      	ldr	r3, [r0, #100]	; 0x64
    7f10:	f383 880b 	msr	PSPLIM, r3
}
    7f14:	4770      	bx	lr

00007f16 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    7f16:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    7f1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7f1e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    7f20:	bf08      	it	eq
    7f22:	f06f 0015 	mvneq.w	r0, #21
    7f26:	4770      	bx	lr

00007f28 <arm_cmse_addr_is_secure>:
    7f28:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    7f2c:	f3c0 5080 	ubfx	r0, r0, #22, #1
    7f30:	4770      	bx	lr

00007f32 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7f32:	4603      	mov	r3, r0
	size_t n = 0;
    7f34:	2000      	movs	r0, #0

	while (*s != '\0') {
    7f36:	5c1a      	ldrb	r2, [r3, r0]
    7f38:	b902      	cbnz	r2, 7f3c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7f3a:	4770      	bx	lr
		n++;
    7f3c:	3001      	adds	r0, #1
    7f3e:	e7fa      	b.n	7f36 <strlen+0x4>

00007f40 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7f40:	4603      	mov	r3, r0
	size_t n = 0;
    7f42:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7f44:	5c1a      	ldrb	r2, [r3, r0]
    7f46:	b10a      	cbz	r2, 7f4c <strnlen+0xc>
    7f48:	4288      	cmp	r0, r1
    7f4a:	d100      	bne.n	7f4e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7f4c:	4770      	bx	lr
		n++;
    7f4e:	3001      	adds	r0, #1
    7f50:	e7f8      	b.n	7f44 <strnlen+0x4>

00007f52 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    7f52:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    7f54:	b15a      	cbz	r2, 7f6e <memcmp+0x1c>
    7f56:	3901      	subs	r1, #1
    7f58:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    7f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
    7f5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    7f62:	42a0      	cmp	r0, r4
    7f64:	d001      	beq.n	7f6a <memcmp+0x18>
    7f66:	429a      	cmp	r2, r3
    7f68:	d0f7      	beq.n	7f5a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    7f6a:	1ad0      	subs	r0, r2, r3
}
    7f6c:	bd10      	pop	{r4, pc}
		return 0;
    7f6e:	4610      	mov	r0, r2
    7f70:	e7fc      	b.n	7f6c <memcmp+0x1a>

00007f72 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    7f72:	1a43      	subs	r3, r0, r1
    7f74:	4293      	cmp	r3, r2
{
    7f76:	b510      	push	{r4, lr}
    7f78:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    7f7c:	d308      	bcc.n	7f90 <memmove+0x1e>
	char *dest = d;
    7f7e:	4602      	mov	r2, r0
    7f80:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    7f82:	429a      	cmp	r2, r3
    7f84:	d00b      	beq.n	7f9e <memmove+0x2c>
			*dest = *src;
    7f86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7f8a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    7f8e:	e7f8      	b.n	7f82 <memmove+0x10>
    7f90:	440a      	add	r2, r1
			dest[n] = src[n];
    7f92:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    7f96:	428a      	cmp	r2, r1
			dest[n] = src[n];
    7f98:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    7f9c:	d1f9      	bne.n	7f92 <memmove+0x20>
		}
	}

	return d;
}
    7f9e:	bd10      	pop	{r4, pc}

00007fa0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7fa0:	b510      	push	{r4, lr}
    7fa2:	1e43      	subs	r3, r0, #1
    7fa4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7fa6:	4291      	cmp	r1, r2
    7fa8:	d100      	bne.n	7fac <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7faa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7fac:	f811 4b01 	ldrb.w	r4, [r1], #1
    7fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7fb4:	e7f7      	b.n	7fa6 <memcpy+0x6>

00007fb6 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7fb6:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    7fb8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7fba:	4402      	add	r2, r0
    7fbc:	4293      	cmp	r3, r2
    7fbe:	d100      	bne.n	7fc2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7fc0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7fc2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7fc6:	e7f9      	b.n	7fbc <memset+0x6>

00007fc8 <_stdout_hook_default>:
}
    7fc8:	f04f 30ff 	mov.w	r0, #4294967295
    7fcc:	4770      	bx	lr

00007fce <set_starting_state>:
{
    7fce:	b510      	push	{r4, lr}
	__asm__ volatile(
    7fd0:	f04f 0320 	mov.w	r3, #32
    7fd4:	f3ef 8211 	mrs	r2, BASEPRI
    7fd8:	f383 8812 	msr	BASEPRI_MAX, r3
    7fdc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7fe0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7fe2:	f003 0407 	and.w	r4, r3, #7
    7fe6:	2c01      	cmp	r4, #1
    7fe8:	d106      	bne.n	7ff8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7fea:	6001      	str	r1, [r0, #0]
	int err = 0;
    7fec:	2000      	movs	r0, #0
	__asm__ volatile(
    7fee:	f382 8811 	msr	BASEPRI, r2
    7ff2:	f3bf 8f6f 	isb	sy
}
    7ff6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7ff8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7ffc:	428b      	cmp	r3, r1
		err = -EALREADY;
    7ffe:	bf14      	ite	ne
    8000:	f04f 30ff 	movne.w	r0, #4294967295
    8004:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8008:	e7f1      	b.n	7fee <set_starting_state+0x20>

0000800a <set_on_state>:
	__asm__ volatile(
    800a:	f04f 0320 	mov.w	r3, #32
    800e:	f3ef 8211 	mrs	r2, BASEPRI
    8012:	f383 8812 	msr	BASEPRI_MAX, r3
    8016:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    801a:	6803      	ldr	r3, [r0, #0]
    801c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8020:	f043 0302 	orr.w	r3, r3, #2
    8024:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8026:	f382 8811 	msr	BASEPRI, r2
    802a:	f3bf 8f6f 	isb	sy
}
    802e:	4770      	bx	lr

00008030 <onoff_started_callback>:
	return &data->mgr[type];
    8030:	6900      	ldr	r0, [r0, #16]
    8032:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8034:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8038:	2100      	movs	r1, #0
    803a:	4710      	bx	r2

0000803c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    803c:	2000      	movs	r0, #0
    803e:	f7fb b807 	b.w	3050 <nrfx_clock_start>

00008042 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8042:	2000      	movs	r0, #0
    8044:	f7fb b854 	b.w	30f0 <nrfx_clock_stop>

00008048 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8048:	2280      	movs	r2, #128	; 0x80
    804a:	f7fa ba59 	b.w	2500 <stop>

0000804e <blocking_start_callback>:
{
    804e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8050:	f7fb bda2 	b.w	3b98 <z_impl_k_sem_give>

00008054 <api_start>:
{
    8054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    8058:	240c      	movs	r4, #12
    805a:	b2c9      	uxtb	r1, r1
    805c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    805e:	6905      	ldr	r5, [r0, #16]
{
    8060:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8062:	f104 0048 	add.w	r0, r4, #72	; 0x48
    8066:	2180      	movs	r1, #128	; 0x80
    8068:	4428      	add	r0, r5
{
    806a:	4690      	mov	r8, r2
    806c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    806e:	f7ff ffae 	bl	7fce <set_starting_state>
	if (err < 0) {
    8072:	2800      	cmp	r0, #0
    8074:	db06      	blt.n	8084 <api_start+0x30>
	subdata->cb = cb;
    8076:	4425      	add	r5, r4
	subdata->user_data = user_data;
    8078:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    807c:	6873      	ldr	r3, [r6, #4]
    807e:	591b      	ldr	r3, [r3, r4]
    8080:	4798      	blx	r3
	return 0;
    8082:	2000      	movs	r0, #0
}
    8084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008088 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8088:	6843      	ldr	r3, [r0, #4]
    808a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    808c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8090:	05d1      	lsls	r1, r2, #23
    8092:	d518      	bpl.n	80c6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8094:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8098:	b1aa      	cbz	r2, 80c6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    809a:	f04f 0120 	mov.w	r1, #32
    809e:	f3ef 8211 	mrs	r2, BASEPRI
    80a2:	f381 8812 	msr	BASEPRI_MAX, r1
    80a6:	f3bf 8f6f 	isb	sy
    80aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    80ae:	b131      	cbz	r1, 80be <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80b0:	2100      	movs	r1, #0
    80b2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    80b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ba:	2101      	movs	r1, #1
    80bc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    80be:	f382 8811 	msr	BASEPRI, r2
    80c2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    80c6:	6842      	ldr	r2, [r0, #4]
    80c8:	6852      	ldr	r2, [r2, #4]
    80ca:	06d2      	lsls	r2, r2, #27
    80cc:	d515      	bpl.n	80fa <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    80ce:	f04f 0120 	mov.w	r1, #32
    80d2:	f3ef 8211 	mrs	r2, BASEPRI
    80d6:	f381 8812 	msr	BASEPRI_MAX, r1
    80da:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    80de:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    80e2:	b111      	cbz	r1, 80ea <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    80e4:	2100      	movs	r1, #0
    80e6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    80ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    80ee:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    80f2:	f382 8811 	msr	BASEPRI, r2
    80f6:	f3bf 8f6f 	isb	sy
}
    80fa:	4770      	bx	lr

000080fc <uarte_nrfx_config_get>:
{
    80fc:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    80fe:	6902      	ldr	r2, [r0, #16]
    8100:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8104:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8108:	2000      	movs	r0, #0
    810a:	4770      	bx	lr

0000810c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    810c:	6843      	ldr	r3, [r0, #4]
    810e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8110:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8114:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8118:	4770      	bx	lr

0000811a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    811a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    811c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    811e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8122:	b940      	cbnz	r0, 8136 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8124:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8126:	0792      	lsls	r2, r2, #30
    8128:	d406      	bmi.n	8138 <is_tx_ready+0x1e>
    812a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    812e:	3800      	subs	r0, #0
    8130:	bf18      	it	ne
    8132:	2001      	movne	r0, #1
    8134:	4770      	bx	lr
    8136:	2001      	movs	r0, #1
}
    8138:	4770      	bx	lr

0000813a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    813a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    813c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    813e:	681b      	ldr	r3, [r3, #0]
    8140:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8144:	b148      	cbz	r0, 815a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8146:	2000      	movs	r0, #0
	*c = data->rx_data;
    8148:	7c52      	ldrb	r2, [r2, #17]
    814a:	700a      	strb	r2, [r1, #0]
    814c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8150:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8154:	2201      	movs	r2, #1
    8156:	601a      	str	r2, [r3, #0]
	return 0;
    8158:	4770      	bx	lr
		return -1;
    815a:	f04f 30ff 	mov.w	r0, #4294967295
}
    815e:	4770      	bx	lr

00008160 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8160:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    8162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    8166:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    816a:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    816c:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
    8170:	4606      	mov	r6, r0
    8172:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    8176:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    8178:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    817a:	68eb      	ldr	r3, [r5, #12]
    817c:	1c59      	adds	r1, r3, #1
    817e:	d011      	beq.n	81a4 <uarte_instance_init.isra.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8180:	a801      	add	r0, sp, #4
    8182:	9301      	str	r3, [sp, #4]
    8184:	f7fa fbbe 	bl	2904 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8188:	2301      	movs	r3, #1
    818a:	9a01      	ldr	r2, [sp, #4]
    818c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    818e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    8190:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8192:	a801      	add	r0, sp, #4
    8194:	9301      	str	r3, [sp, #4]
    8196:	f7fa fbb5 	bl	2904 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    819a:	2203      	movs	r2, #3
    819c:	9b01      	ldr	r3, [sp, #4]
    819e:	3380      	adds	r3, #128	; 0x80
    81a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    81a4:	692b      	ldr	r3, [r5, #16]
    81a6:	1c5a      	adds	r2, r3, #1
    81a8:	d010      	beq.n	81cc <uarte_instance_init.isra.0+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    81aa:	7f2a      	ldrb	r2, [r5, #28]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    81ac:	a801      	add	r0, sp, #4
    81ae:	2a00      	cmp	r2, #0
    81b0:	bf14      	ite	ne
    81b2:	f04f 0903 	movne.w	r9, #3
    81b6:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
    81ba:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    81bc:	f7fa fba2 	bl	2904 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    81c0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    81c2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    81c6:	3380      	adds	r3, #128	; 0x80
    81c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    81cc:	696b      	ldr	r3, [r5, #20]
    81ce:	1c58      	adds	r0, r3, #1
    81d0:	d011      	beq.n	81f6 <uarte_instance_init.isra.0+0x96>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    81d2:	a801      	add	r0, sp, #4
    81d4:	9301      	str	r3, [sp, #4]
    81d6:	f7fa fb95 	bl	2904 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    81da:	2301      	movs	r3, #1
    81dc:	9a01      	ldr	r2, [sp, #4]
    81de:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    81e0:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    81e2:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    81e4:	a801      	add	r0, sp, #4
    81e6:	9301      	str	r3, [sp, #4]
    81e8:	f7fa fb8c 	bl	2904 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    81ec:	2203      	movs	r2, #3
    81ee:	9b01      	ldr	r3, [sp, #4]
    81f0:	3380      	adds	r3, #128	; 0x80
    81f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    81f6:	69ab      	ldr	r3, [r5, #24]
    81f8:	1c59      	adds	r1, r3, #1
    81fa:	d010      	beq.n	821e <uarte_instance_init.isra.0+0xbe>
			nrf_gpio_cfg_input(cfg->cts_pin,
    81fc:	7f6a      	ldrb	r2, [r5, #29]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    81fe:	a801      	add	r0, sp, #4
    8200:	2a00      	cmp	r2, #0
    8202:	bf14      	ite	ne
    8204:	f04f 0903 	movne.w	r9, #3
    8208:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
    820c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    820e:	f7fa fb79 	bl	2904 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8212:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8214:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    8218:	3380      	adds	r3, #128	; 0x80
    821a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    821e:	682b      	ldr	r3, [r5, #0]
    8220:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    p_reg->PSEL.TXD = pseltxd;
    8224:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    8228:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    822c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    8230:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8234:	6931      	ldr	r1, [r6, #16]
    8236:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
    8238:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    823c:	3104      	adds	r1, #4
    823e:	f7fa faaf 	bl	27a0 <uarte_nrfx_configure>
	if (err) {
    8242:	bb40      	cbnz	r0, 8296 <uarte_instance_init.isra.0+0x136>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8244:	2308      	movs	r3, #8
    8246:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    824a:	f898 3008 	ldrb.w	r3, [r8, #8]
    824e:	b95b      	cbnz	r3, 8268 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8250:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    8254:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8258:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    825c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8260:	2301      	movs	r3, #1
    8262:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8266:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8268:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    826c:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    826e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    8270:	bf5c      	itt	pl
    8272:	f44f 7280 	movpl.w	r2, #256	; 0x100
    8276:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    827a:	06db      	lsls	r3, r3, #27
    827c:	bf44      	itt	mi
    827e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8282:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    8286:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8288:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    828c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8290:	2301      	movs	r3, #1
    8292:	60a3      	str	r3, [r4, #8]
    8294:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8296:	b003      	add	sp, #12
    8298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000829c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    829c:	b510      	push	{r4, lr}
    829e:	4604      	mov	r4, r0
    82a0:	2200      	movs	r2, #0
    82a2:	2101      	movs	r1, #1
    82a4:	2008      	movs	r0, #8
    82a6:	f7f9 fa55 	bl	1754 <z_arm_irq_priority_set>
    82aa:	2008      	movs	r0, #8
    82ac:	f7f9 fa34 	bl	1718 <arch_irq_enable>
    82b0:	4620      	mov	r0, r4
    82b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82b6:	f7ff bf53 	b.w	8160 <uarte_instance_init.isra.0>

000082ba <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    82ba:	b510      	push	{r4, lr}
    82bc:	4604      	mov	r4, r0
    82be:	2200      	movs	r2, #0
    82c0:	2101      	movs	r1, #1
    82c2:	2009      	movs	r0, #9
    82c4:	f7f9 fa46 	bl	1754 <z_arm_irq_priority_set>
    82c8:	2009      	movs	r0, #9
    82ca:	f7f9 fa25 	bl	1718 <arch_irq_enable>
    82ce:	4620      	mov	r0, r4
    82d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82d4:	f7ff bf44 	b.w	8160 <uarte_instance_init.isra.0>

000082d8 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    82d8:	2200      	movs	r2, #0
{
    82da:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    82dc:	4611      	mov	r1, r2
    82de:	4610      	mov	r0, r2
    82e0:	f7fc ff7e 	bl	51e0 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    82e4:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    82e6:	bf18      	it	ne
    82e8:	f06f 0015 	mvnne.w	r0, #21
    82ec:	bd08      	pop	{r3, pc}

000082ee <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    82ee:	f7fc bf1f 	b.w	5130 <nrf_cc3xx_platform_init>

000082f2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    82f2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    82f4:	f7f9 f90c 	bl	1510 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    82f8:	f7f9 f9b6 	bl	1668 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    82fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    8300:	f7fc bf16 	b.w	5130 <nrf_cc3xx_platform_init>

00008304 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8304:	4700      	bx	r0

00008306 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8306:	f000 b861 	b.w	83cc <z_impl_k_busy_wait>

0000830a <z_device_state_init>:
}
    830a:	4770      	bx	lr

0000830c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    830c:	b138      	cbz	r0, 831e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    830e:	68c3      	ldr	r3, [r0, #12]
    8310:	8818      	ldrh	r0, [r3, #0]
    8312:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8316:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    831a:	4258      	negs	r0, r3
    831c:	4158      	adcs	r0, r3
}
    831e:	4770      	bx	lr

00008320 <k_mem_slab_init>:
{
    8320:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8322:	2400      	movs	r4, #0
    8324:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8326:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8328:	ea41 0402 	orr.w	r4, r1, r2
    832c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8330:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8334:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8336:	d10c      	bne.n	8352 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8338:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    833a:	42a3      	cmp	r3, r4
    833c:	d103      	bne.n	8346 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    833e:	e9c0 0000 	strd	r0, r0, [r0]
}
    8342:	2000      	movs	r0, #0
}
    8344:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8346:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8348:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    834a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    834c:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    834e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8350:	e7f3      	b.n	833a <k_mem_slab_init+0x1a>
		return -EINVAL;
    8352:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8356:	e7f5      	b.n	8344 <k_mem_slab_init+0x24>

00008358 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8358:	f3ef 8005 	mrs	r0, IPSR
}
    835c:	3800      	subs	r0, #0
    835e:	bf18      	it	ne
    8360:	2001      	movne	r0, #1
    8362:	4770      	bx	lr

00008364 <k_thread_name_get>:
}
    8364:	2000      	movs	r0, #0
    8366:	4770      	bx	lr

00008368 <z_pm_save_idle_exit>:
{
    8368:	b508      	push	{r3, lr}
	pm_system_resume();
    836a:	f7f8 fd8d 	bl	e88 <pm_system_resume>
}
    836e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8372:	f7fa bcaf 	b.w	2cd4 <sys_clock_idle_exit>

00008376 <z_impl_k_mutex_init>:
{
    8376:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8378:	2000      	movs	r0, #0
    837a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    837e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8382:	4770      	bx	lr

00008384 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8384:	4603      	mov	r3, r0
    8386:	b920      	cbnz	r0, 8392 <z_reschedule_irqlock+0xe>
    8388:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    838c:	b90a      	cbnz	r2, 8392 <z_reschedule_irqlock+0xe>
    838e:	f7f9 ba27 	b.w	17e0 <arch_swap>
    8392:	f383 8811 	msr	BASEPRI, r3
    8396:	f3bf 8f6f 	isb	sy
}
    839a:	4770      	bx	lr

0000839c <z_reschedule_unlocked>:
	__asm__ volatile(
    839c:	f04f 0320 	mov.w	r3, #32
    83a0:	f3ef 8011 	mrs	r0, BASEPRI
    83a4:	f383 8812 	msr	BASEPRI_MAX, r3
    83a8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    83ac:	f7ff bfea 	b.w	8384 <z_reschedule_irqlock>

000083b0 <z_priq_dumb_best>:
{
    83b0:	4603      	mov	r3, r0
	return list->head == list;
    83b2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83b4:	4283      	cmp	r3, r0
    83b6:	d003      	beq.n	83c0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    83b8:	2800      	cmp	r0, #0
    83ba:	bf38      	it	cc
    83bc:	2000      	movcc	r0, #0
    83be:	4770      	bx	lr
	struct k_thread *thread = NULL;
    83c0:	2000      	movs	r0, #0
}
    83c2:	4770      	bx	lr

000083c4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    83c4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    83c6:	f7fc fe69 	bl	509c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    83ca:	bd08      	pop	{r3, pc}

000083cc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    83cc:	b108      	cbz	r0, 83d2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    83ce:	f7f8 bcd1 	b.w	d74 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    83d2:	4770      	bx	lr

000083d4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    83d4:	4770      	bx	lr
	...

000083d8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    83d8:	f7fa bcfe 	b.w	2dd8 <SystemInit>

Disassembly of section .gnu.sgstubs:

00009b20 <spm_firmware_info_nse-0x64c0>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f7 bf2b 	b.w	7e3e <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 ba2e 	b.w	144c <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_s0_active>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 ba4e 	b.w	1494 <__acle_se_spm_s0_active>

0000fff8 <spm_request_read_nse>:
    fff8:	e97f e97f 	sg
    fffc:	f7f1 b9f2 	b.w	13e4 <__acle_se_spm_request_read_nse>
