
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20011498 	.word	0x20011498
   10004:	000161f9 	.word	0x000161f9
   10008:	000271f3 	.word	0x000271f3
   1000c:	000161cd 	.word	0x000161cd
   10010:	000161cd 	.word	0x000161cd
   10014:	000161cd 	.word	0x000161cd
   10018:	000161cd 	.word	0x000161cd
   1001c:	000161cd 	.word	0x000161cd
	...
   1002c:	00015c51 	.word	0x00015c51
   10030:	000161cd 	.word	0x000161cd
   10034:	00000000 	.word	0x00000000
   10038:	00015bbd 	.word	0x00015bbd
   1003c:	000161cd 	.word	0x000161cd

00010040 <_irq_vector_table>:
   10040:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10050:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10060:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10070:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10080:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10090:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   100a0:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   100b0:	00017af5 00015cf5 00015cf5 00015cf5     .z...\...\...\..
   100c0:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   100d0:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   100e0:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   100f0:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10100:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10110:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10120:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10130:	00015cf5 00015cf5 00015cf5 00015cf5     .\...\...\...\..
   10140:	00015cf5                                .\..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	00020ab0 00000001 00010000 00010000     ................
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_drsub>:
   10240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10244:	e002      	b.n	1024c <__adddf3>
   10246:	bf00      	nop

00010248 <__aeabi_dsub>:
   10248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001024c <__adddf3>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10252:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10256:	ea94 0f05 	teq	r4, r5
   1025a:	bf08      	it	eq
   1025c:	ea90 0f02 	teqeq	r0, r2
   10260:	bf1f      	itttt	ne
   10262:	ea54 0c00 	orrsne.w	ip, r4, r0
   10266:	ea55 0c02 	orrsne.w	ip, r5, r2
   1026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10272:	f000 80e2 	beq.w	1043a <__adddf3+0x1ee>
   10276:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027e:	bfb8      	it	lt
   10280:	426d      	neglt	r5, r5
   10282:	dd0c      	ble.n	1029e <__adddf3+0x52>
   10284:	442c      	add	r4, r5
   10286:	ea80 0202 	eor.w	r2, r0, r2
   1028a:	ea81 0303 	eor.w	r3, r1, r3
   1028e:	ea82 0000 	eor.w	r0, r2, r0
   10292:	ea83 0101 	eor.w	r1, r3, r1
   10296:	ea80 0202 	eor.w	r2, r0, r2
   1029a:	ea81 0303 	eor.w	r3, r1, r3
   1029e:	2d36      	cmp	r5, #54	; 0x36
   102a0:	bf88      	it	hi
   102a2:	bd30      	pophi	{r4, r5, pc}
   102a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b4:	d002      	beq.n	102bc <__adddf3+0x70>
   102b6:	4240      	negs	r0, r0
   102b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c8:	d002      	beq.n	102d0 <__adddf3+0x84>
   102ca:	4252      	negs	r2, r2
   102cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102d0:	ea94 0f05 	teq	r4, r5
   102d4:	f000 80a7 	beq.w	10426 <__adddf3+0x1da>
   102d8:	f1a4 0401 	sub.w	r4, r4, #1
   102dc:	f1d5 0e20 	rsbs	lr, r5, #32
   102e0:	db0d      	blt.n	102fe <__adddf3+0xb2>
   102e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e6:	fa22 f205 	lsr.w	r2, r2, r5
   102ea:	1880      	adds	r0, r0, r2
   102ec:	f141 0100 	adc.w	r1, r1, #0
   102f0:	fa03 f20e 	lsl.w	r2, r3, lr
   102f4:	1880      	adds	r0, r0, r2
   102f6:	fa43 f305 	asr.w	r3, r3, r5
   102fa:	4159      	adcs	r1, r3
   102fc:	e00e      	b.n	1031c <__adddf3+0xd0>
   102fe:	f1a5 0520 	sub.w	r5, r5, #32
   10302:	f10e 0e20 	add.w	lr, lr, #32
   10306:	2a01      	cmp	r2, #1
   10308:	fa03 fc0e 	lsl.w	ip, r3, lr
   1030c:	bf28      	it	cs
   1030e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10312:	fa43 f305 	asr.w	r3, r3, r5
   10316:	18c0      	adds	r0, r0, r3
   10318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10320:	d507      	bpl.n	10332 <__adddf3+0xe6>
   10322:	f04f 0e00 	mov.w	lr, #0
   10326:	f1dc 0c00 	rsbs	ip, ip, #0
   1032a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032e:	eb6e 0101 	sbc.w	r1, lr, r1
   10332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10336:	d31b      	bcc.n	10370 <__adddf3+0x124>
   10338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1033c:	d30c      	bcc.n	10358 <__adddf3+0x10c>
   1033e:	0849      	lsrs	r1, r1, #1
   10340:	ea5f 0030 	movs.w	r0, r0, rrx
   10344:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10348:	f104 0401 	add.w	r4, r4, #1
   1034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10354:	f080 809a 	bcs.w	1048c <__adddf3+0x240>
   10358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1035c:	bf08      	it	eq
   1035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10362:	f150 0000 	adcs.w	r0, r0, #0
   10366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1036a:	ea41 0105 	orr.w	r1, r1, r5
   1036e:	bd30      	pop	{r4, r5, pc}
   10370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10374:	4140      	adcs	r0, r0
   10376:	eb41 0101 	adc.w	r1, r1, r1
   1037a:	3c01      	subs	r4, #1
   1037c:	bf28      	it	cs
   1037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10382:	d2e9      	bcs.n	10358 <__adddf3+0x10c>
   10384:	f091 0f00 	teq	r1, #0
   10388:	bf04      	itt	eq
   1038a:	4601      	moveq	r1, r0
   1038c:	2000      	moveq	r0, #0
   1038e:	fab1 f381 	clz	r3, r1
   10392:	bf08      	it	eq
   10394:	3320      	addeq	r3, #32
   10396:	f1a3 030b 	sub.w	r3, r3, #11
   1039a:	f1b3 0220 	subs.w	r2, r3, #32
   1039e:	da0c      	bge.n	103ba <__adddf3+0x16e>
   103a0:	320c      	adds	r2, #12
   103a2:	dd08      	ble.n	103b6 <__adddf3+0x16a>
   103a4:	f102 0c14 	add.w	ip, r2, #20
   103a8:	f1c2 020c 	rsb	r2, r2, #12
   103ac:	fa01 f00c 	lsl.w	r0, r1, ip
   103b0:	fa21 f102 	lsr.w	r1, r1, r2
   103b4:	e00c      	b.n	103d0 <__adddf3+0x184>
   103b6:	f102 0214 	add.w	r2, r2, #20
   103ba:	bfd8      	it	le
   103bc:	f1c2 0c20 	rsble	ip, r2, #32
   103c0:	fa01 f102 	lsl.w	r1, r1, r2
   103c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c8:	bfdc      	itt	le
   103ca:	ea41 010c 	orrle.w	r1, r1, ip
   103ce:	4090      	lslle	r0, r2
   103d0:	1ae4      	subs	r4, r4, r3
   103d2:	bfa2      	ittt	ge
   103d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d8:	4329      	orrge	r1, r5
   103da:	bd30      	popge	{r4, r5, pc}
   103dc:	ea6f 0404 	mvn.w	r4, r4
   103e0:	3c1f      	subs	r4, #31
   103e2:	da1c      	bge.n	1041e <__adddf3+0x1d2>
   103e4:	340c      	adds	r4, #12
   103e6:	dc0e      	bgt.n	10406 <__adddf3+0x1ba>
   103e8:	f104 0414 	add.w	r4, r4, #20
   103ec:	f1c4 0220 	rsb	r2, r4, #32
   103f0:	fa20 f004 	lsr.w	r0, r0, r4
   103f4:	fa01 f302 	lsl.w	r3, r1, r2
   103f8:	ea40 0003 	orr.w	r0, r0, r3
   103fc:	fa21 f304 	lsr.w	r3, r1, r4
   10400:	ea45 0103 	orr.w	r1, r5, r3
   10404:	bd30      	pop	{r4, r5, pc}
   10406:	f1c4 040c 	rsb	r4, r4, #12
   1040a:	f1c4 0220 	rsb	r2, r4, #32
   1040e:	fa20 f002 	lsr.w	r0, r0, r2
   10412:	fa01 f304 	lsl.w	r3, r1, r4
   10416:	ea40 0003 	orr.w	r0, r0, r3
   1041a:	4629      	mov	r1, r5
   1041c:	bd30      	pop	{r4, r5, pc}
   1041e:	fa21 f004 	lsr.w	r0, r1, r4
   10422:	4629      	mov	r1, r5
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	f094 0f00 	teq	r4, #0
   1042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042e:	bf06      	itte	eq
   10430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10434:	3401      	addeq	r4, #1
   10436:	3d01      	subne	r5, #1
   10438:	e74e      	b.n	102d8 <__adddf3+0x8c>
   1043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043e:	bf18      	it	ne
   10440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10444:	d029      	beq.n	1049a <__adddf3+0x24e>
   10446:	ea94 0f05 	teq	r4, r5
   1044a:	bf08      	it	eq
   1044c:	ea90 0f02 	teqeq	r0, r2
   10450:	d005      	beq.n	1045e <__adddf3+0x212>
   10452:	ea54 0c00 	orrs.w	ip, r4, r0
   10456:	bf04      	itt	eq
   10458:	4619      	moveq	r1, r3
   1045a:	4610      	moveq	r0, r2
   1045c:	bd30      	pop	{r4, r5, pc}
   1045e:	ea91 0f03 	teq	r1, r3
   10462:	bf1e      	ittt	ne
   10464:	2100      	movne	r1, #0
   10466:	2000      	movne	r0, #0
   10468:	bd30      	popne	{r4, r5, pc}
   1046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046e:	d105      	bne.n	1047c <__adddf3+0x230>
   10470:	0040      	lsls	r0, r0, #1
   10472:	4149      	adcs	r1, r1
   10474:	bf28      	it	cs
   10476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10480:	bf3c      	itt	cc
   10482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10486:	bd30      	popcc	{r4, r5, pc}
   10488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10494:	f04f 0000 	mov.w	r0, #0
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049e:	bf1a      	itte	ne
   104a0:	4619      	movne	r1, r3
   104a2:	4610      	movne	r0, r2
   104a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a8:	bf1c      	itt	ne
   104aa:	460b      	movne	r3, r1
   104ac:	4602      	movne	r2, r0
   104ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104b2:	bf06      	itte	eq
   104b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b8:	ea91 0f03 	teqeq	r1, r3
   104bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop

000104c4 <__aeabi_ui2d>:
   104c4:	f090 0f00 	teq	r0, #0
   104c8:	bf04      	itt	eq
   104ca:	2100      	moveq	r1, #0
   104cc:	4770      	bxeq	lr
   104ce:	b530      	push	{r4, r5, lr}
   104d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d8:	f04f 0500 	mov.w	r5, #0
   104dc:	f04f 0100 	mov.w	r1, #0
   104e0:	e750      	b.n	10384 <__adddf3+0x138>
   104e2:	bf00      	nop

000104e4 <__aeabi_i2d>:
   104e4:	f090 0f00 	teq	r0, #0
   104e8:	bf04      	itt	eq
   104ea:	2100      	moveq	r1, #0
   104ec:	4770      	bxeq	lr
   104ee:	b530      	push	{r4, r5, lr}
   104f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104fc:	bf48      	it	mi
   104fe:	4240      	negmi	r0, r0
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	e73e      	b.n	10384 <__adddf3+0x138>
   10506:	bf00      	nop

00010508 <__aeabi_f2d>:
   10508:	0042      	lsls	r2, r0, #1
   1050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050e:	ea4f 0131 	mov.w	r1, r1, rrx
   10512:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10516:	bf1f      	itttt	ne
   10518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10524:	4770      	bxne	lr
   10526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1052a:	bf08      	it	eq
   1052c:	4770      	bxeq	lr
   1052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10532:	bf04      	itt	eq
   10534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10538:	4770      	bxeq	lr
   1053a:	b530      	push	{r4, r5, lr}
   1053c:	f44f 7460 	mov.w	r4, #896	; 0x380
   10540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10548:	e71c      	b.n	10384 <__adddf3+0x138>
   1054a:	bf00      	nop

0001054c <__aeabi_ul2d>:
   1054c:	ea50 0201 	orrs.w	r2, r0, r1
   10550:	bf08      	it	eq
   10552:	4770      	bxeq	lr
   10554:	b530      	push	{r4, r5, lr}
   10556:	f04f 0500 	mov.w	r5, #0
   1055a:	e00a      	b.n	10572 <__aeabi_l2d+0x16>

0001055c <__aeabi_l2d>:
   1055c:	ea50 0201 	orrs.w	r2, r0, r1
   10560:	bf08      	it	eq
   10562:	4770      	bxeq	lr
   10564:	b530      	push	{r4, r5, lr}
   10566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1056a:	d502      	bpl.n	10572 <__aeabi_l2d+0x16>
   1056c:	4240      	negs	r0, r0
   1056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057e:	f43f aed8 	beq.w	10332 <__adddf3+0xe6>
   10582:	f04f 0203 	mov.w	r2, #3
   10586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058a:	bf18      	it	ne
   1058c:	3203      	addne	r2, #3
   1058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10592:	bf18      	it	ne
   10594:	3203      	addne	r2, #3
   10596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1059a:	f1c2 0320 	rsb	r3, r2, #32
   1059e:	fa00 fc03 	lsl.w	ip, r0, r3
   105a2:	fa20 f002 	lsr.w	r0, r0, r2
   105a6:	fa01 fe03 	lsl.w	lr, r1, r3
   105aa:	ea40 000e 	orr.w	r0, r0, lr
   105ae:	fa21 f102 	lsr.w	r1, r1, r2
   105b2:	4414      	add	r4, r2
   105b4:	e6bd      	b.n	10332 <__adddf3+0xe6>
   105b6:	bf00      	nop

000105b8 <__aeabi_dmul>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c6:	bf1d      	ittte	ne
   105c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105cc:	ea94 0f0c 	teqne	r4, ip
   105d0:	ea95 0f0c 	teqne	r5, ip
   105d4:	f000 f8de 	bleq	10794 <__aeabi_dmul+0x1dc>
   105d8:	442c      	add	r4, r5
   105da:	ea81 0603 	eor.w	r6, r1, r3
   105de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105ea:	bf18      	it	ne
   105ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f8:	d038      	beq.n	1066c <__aeabi_dmul+0xb4>
   105fa:	fba0 ce02 	umull	ip, lr, r0, r2
   105fe:	f04f 0500 	mov.w	r5, #0
   10602:	fbe1 e502 	umlal	lr, r5, r1, r2
   10606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1060a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060e:	f04f 0600 	mov.w	r6, #0
   10612:	fbe1 5603 	umlal	r5, r6, r1, r3
   10616:	f09c 0f00 	teq	ip, #0
   1061a:	bf18      	it	ne
   1061c:	f04e 0e01 	orrne.w	lr, lr, #1
   10620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1062c:	d204      	bcs.n	10638 <__aeabi_dmul+0x80>
   1062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10632:	416d      	adcs	r5, r5
   10634:	eb46 0606 	adc.w	r6, r6, r6
   10638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10650:	bf88      	it	hi
   10652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10656:	d81e      	bhi.n	10696 <__aeabi_dmul+0xde>
   10658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1065c:	bf08      	it	eq
   1065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10662:	f150 0000 	adcs.w	r0, r0, #0
   10666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1066a:	bd70      	pop	{r4, r5, r6, pc}
   1066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10670:	ea46 0101 	orr.w	r1, r6, r1
   10674:	ea40 0002 	orr.w	r0, r0, r2
   10678:	ea81 0103 	eor.w	r1, r1, r3
   1067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10680:	bfc2      	ittt	gt
   10682:	ebd4 050c 	rsbsgt	r5, r4, ip
   10686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1068a:	bd70      	popgt	{r4, r5, r6, pc}
   1068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10690:	f04f 0e00 	mov.w	lr, #0
   10694:	3c01      	subs	r4, #1
   10696:	f300 80ab 	bgt.w	107f0 <__aeabi_dmul+0x238>
   1069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069e:	bfde      	ittt	le
   106a0:	2000      	movle	r0, #0
   106a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a6:	bd70      	pople	{r4, r5, r6, pc}
   106a8:	f1c4 0400 	rsb	r4, r4, #0
   106ac:	3c20      	subs	r4, #32
   106ae:	da35      	bge.n	1071c <__aeabi_dmul+0x164>
   106b0:	340c      	adds	r4, #12
   106b2:	dc1b      	bgt.n	106ec <__aeabi_dmul+0x134>
   106b4:	f104 0414 	add.w	r4, r4, #20
   106b8:	f1c4 0520 	rsb	r5, r4, #32
   106bc:	fa00 f305 	lsl.w	r3, r0, r5
   106c0:	fa20 f004 	lsr.w	r0, r0, r4
   106c4:	fa01 f205 	lsl.w	r2, r1, r5
   106c8:	ea40 0002 	orr.w	r0, r0, r2
   106cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d8:	fa21 f604 	lsr.w	r6, r1, r4
   106dc:	eb42 0106 	adc.w	r1, r2, r6
   106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e4:	bf08      	it	eq
   106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f1c4 040c 	rsb	r4, r4, #12
   106f0:	f1c4 0520 	rsb	r5, r4, #32
   106f4:	fa00 f304 	lsl.w	r3, r0, r4
   106f8:	fa20 f005 	lsr.w	r0, r0, r5
   106fc:	fa01 f204 	lsl.w	r2, r1, r4
   10700:	ea40 0002 	orr.w	r0, r0, r2
   10704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1070c:	f141 0100 	adc.w	r1, r1, #0
   10710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10714:	bf08      	it	eq
   10716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1071a:	bd70      	pop	{r4, r5, r6, pc}
   1071c:	f1c4 0520 	rsb	r5, r4, #32
   10720:	fa00 f205 	lsl.w	r2, r0, r5
   10724:	ea4e 0e02 	orr.w	lr, lr, r2
   10728:	fa20 f304 	lsr.w	r3, r0, r4
   1072c:	fa01 f205 	lsl.w	r2, r1, r5
   10730:	ea43 0302 	orr.w	r3, r3, r2
   10734:	fa21 f004 	lsr.w	r0, r1, r4
   10738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1073c:	fa21 f204 	lsr.w	r2, r1, r4
   10740:	ea20 0002 	bic.w	r0, r0, r2
   10744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1074c:	bf08      	it	eq
   1074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f094 0f00 	teq	r4, #0
   10758:	d10f      	bne.n	1077a <__aeabi_dmul+0x1c2>
   1075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075e:	0040      	lsls	r0, r0, #1
   10760:	eb41 0101 	adc.w	r1, r1, r1
   10764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10768:	bf08      	it	eq
   1076a:	3c01      	subeq	r4, #1
   1076c:	d0f7      	beq.n	1075e <__aeabi_dmul+0x1a6>
   1076e:	ea41 0106 	orr.w	r1, r1, r6
   10772:	f095 0f00 	teq	r5, #0
   10776:	bf18      	it	ne
   10778:	4770      	bxne	lr
   1077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077e:	0052      	lsls	r2, r2, #1
   10780:	eb43 0303 	adc.w	r3, r3, r3
   10784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10788:	bf08      	it	eq
   1078a:	3d01      	subeq	r5, #1
   1078c:	d0f7      	beq.n	1077e <__aeabi_dmul+0x1c6>
   1078e:	ea43 0306 	orr.w	r3, r3, r6
   10792:	4770      	bx	lr
   10794:	ea94 0f0c 	teq	r4, ip
   10798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1079c:	bf18      	it	ne
   1079e:	ea95 0f0c 	teqne	r5, ip
   107a2:	d00c      	beq.n	107be <__aeabi_dmul+0x206>
   107a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a8:	bf18      	it	ne
   107aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107ae:	d1d1      	bne.n	10754 <__aeabi_dmul+0x19c>
   107b0:	ea81 0103 	eor.w	r1, r1, r3
   107b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b8:	f04f 0000 	mov.w	r0, #0
   107bc:	bd70      	pop	{r4, r5, r6, pc}
   107be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107c2:	bf06      	itte	eq
   107c4:	4610      	moveq	r0, r2
   107c6:	4619      	moveq	r1, r3
   107c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107cc:	d019      	beq.n	10802 <__aeabi_dmul+0x24a>
   107ce:	ea94 0f0c 	teq	r4, ip
   107d2:	d102      	bne.n	107da <__aeabi_dmul+0x222>
   107d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d8:	d113      	bne.n	10802 <__aeabi_dmul+0x24a>
   107da:	ea95 0f0c 	teq	r5, ip
   107de:	d105      	bne.n	107ec <__aeabi_dmul+0x234>
   107e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e4:	bf1c      	itt	ne
   107e6:	4610      	movne	r0, r2
   107e8:	4619      	movne	r1, r3
   107ea:	d10a      	bne.n	10802 <__aeabi_dmul+0x24a>
   107ec:	ea81 0103 	eor.w	r1, r1, r3
   107f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107fc:	f04f 0000 	mov.w	r0, #0
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1080a:	bd70      	pop	{r4, r5, r6, pc}

0001080c <__aeabi_ddiv>:
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1081a:	bf1d      	ittte	ne
   1081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10820:	ea94 0f0c 	teqne	r4, ip
   10824:	ea95 0f0c 	teqne	r5, ip
   10828:	f000 f8a7 	bleq	1097a <__aeabi_ddiv+0x16e>
   1082c:	eba4 0405 	sub.w	r4, r4, r5
   10830:	ea81 0e03 	eor.w	lr, r1, r3
   10834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1083c:	f000 8088 	beq.w	10950 <__aeabi_ddiv+0x144>
   10840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10864:	429d      	cmp	r5, r3
   10866:	bf08      	it	eq
   10868:	4296      	cmpeq	r6, r2
   1086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10872:	d202      	bcs.n	1087a <__aeabi_ddiv+0x6e>
   10874:	085b      	lsrs	r3, r3, #1
   10876:	ea4f 0232 	mov.w	r2, r2, rrx
   1087a:	1ab6      	subs	r6, r6, r2
   1087c:	eb65 0503 	sbc.w	r5, r5, r3
   10880:	085b      	lsrs	r3, r3, #1
   10882:	ea4f 0232 	mov.w	r2, r2, rrx
   10886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088e:	ebb6 0e02 	subs.w	lr, r6, r2
   10892:	eb75 0e03 	sbcs.w	lr, r5, r3
   10896:	bf22      	ittt	cs
   10898:	1ab6      	subcs	r6, r6, r2
   1089a:	4675      	movcs	r5, lr
   1089c:	ea40 000c 	orrcs.w	r0, r0, ip
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	ea4f 0232 	mov.w	r2, r2, rrx
   108a6:	ebb6 0e02 	subs.w	lr, r6, r2
   108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   108ae:	bf22      	ittt	cs
   108b0:	1ab6      	subcs	r6, r6, r2
   108b2:	4675      	movcs	r5, lr
   108b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b8:	085b      	lsrs	r3, r3, #1
   108ba:	ea4f 0232 	mov.w	r2, r2, rrx
   108be:	ebb6 0e02 	subs.w	lr, r6, r2
   108c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c6:	bf22      	ittt	cs
   108c8:	1ab6      	subcs	r6, r6, r2
   108ca:	4675      	movcs	r5, lr
   108cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108d0:	085b      	lsrs	r3, r3, #1
   108d2:	ea4f 0232 	mov.w	r2, r2, rrx
   108d6:	ebb6 0e02 	subs.w	lr, r6, r2
   108da:	eb75 0e03 	sbcs.w	lr, r5, r3
   108de:	bf22      	ittt	cs
   108e0:	1ab6      	subcs	r6, r6, r2
   108e2:	4675      	movcs	r5, lr
   108e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e8:	ea55 0e06 	orrs.w	lr, r5, r6
   108ec:	d018      	beq.n	10920 <__aeabi_ddiv+0x114>
   108ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1090a:	d1c0      	bne.n	1088e <__aeabi_ddiv+0x82>
   1090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10910:	d10b      	bne.n	1092a <__aeabi_ddiv+0x11e>
   10912:	ea41 0100 	orr.w	r1, r1, r0
   10916:	f04f 0000 	mov.w	r0, #0
   1091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091e:	e7b6      	b.n	1088e <__aeabi_ddiv+0x82>
   10920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10924:	bf04      	itt	eq
   10926:	4301      	orreq	r1, r0
   10928:	2000      	moveq	r0, #0
   1092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092e:	bf88      	it	hi
   10930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10934:	f63f aeaf 	bhi.w	10696 <__aeabi_dmul+0xde>
   10938:	ebb5 0c03 	subs.w	ip, r5, r3
   1093c:	bf04      	itt	eq
   1093e:	ebb6 0c02 	subseq.w	ip, r6, r2
   10942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10946:	f150 0000 	adcs.w	r0, r0, #0
   1094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1095c:	bfc2      	ittt	gt
   1095e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10966:	bd70      	popgt	{r4, r5, r6, pc}
   10968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1096c:	f04f 0e00 	mov.w	lr, #0
   10970:	3c01      	subs	r4, #1
   10972:	e690      	b.n	10696 <__aeabi_dmul+0xde>
   10974:	ea45 0e06 	orr.w	lr, r5, r6
   10978:	e68d      	b.n	10696 <__aeabi_dmul+0xde>
   1097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097e:	ea94 0f0c 	teq	r4, ip
   10982:	bf08      	it	eq
   10984:	ea95 0f0c 	teqeq	r5, ip
   10988:	f43f af3b 	beq.w	10802 <__aeabi_dmul+0x24a>
   1098c:	ea94 0f0c 	teq	r4, ip
   10990:	d10a      	bne.n	109a8 <__aeabi_ddiv+0x19c>
   10992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10996:	f47f af34 	bne.w	10802 <__aeabi_dmul+0x24a>
   1099a:	ea95 0f0c 	teq	r5, ip
   1099e:	f47f af25 	bne.w	107ec <__aeabi_dmul+0x234>
   109a2:	4610      	mov	r0, r2
   109a4:	4619      	mov	r1, r3
   109a6:	e72c      	b.n	10802 <__aeabi_dmul+0x24a>
   109a8:	ea95 0f0c 	teq	r5, ip
   109ac:	d106      	bne.n	109bc <__aeabi_ddiv+0x1b0>
   109ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109b2:	f43f aefd 	beq.w	107b0 <__aeabi_dmul+0x1f8>
   109b6:	4610      	mov	r0, r2
   109b8:	4619      	mov	r1, r3
   109ba:	e722      	b.n	10802 <__aeabi_dmul+0x24a>
   109bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109c0:	bf18      	it	ne
   109c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c6:	f47f aec5 	bne.w	10754 <__aeabi_dmul+0x19c>
   109ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ce:	f47f af0d 	bne.w	107ec <__aeabi_dmul+0x234>
   109d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d6:	f47f aeeb 	bne.w	107b0 <__aeabi_dmul+0x1f8>
   109da:	e712      	b.n	10802 <__aeabi_dmul+0x24a>

000109dc <__gedf2>:
   109dc:	f04f 3cff 	mov.w	ip, #4294967295
   109e0:	e006      	b.n	109f0 <__cmpdf2+0x4>
   109e2:	bf00      	nop

000109e4 <__ledf2>:
   109e4:	f04f 0c01 	mov.w	ip, #1
   109e8:	e002      	b.n	109f0 <__cmpdf2+0x4>
   109ea:	bf00      	nop

000109ec <__cmpdf2>:
   109ec:	f04f 0c01 	mov.w	ip, #1
   109f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   109f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   109f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   109fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a00:	bf18      	it	ne
   10a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10a06:	d01b      	beq.n	10a40 <__cmpdf2+0x54>
   10a08:	b001      	add	sp, #4
   10a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10a0e:	bf0c      	ite	eq
   10a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10a14:	ea91 0f03 	teqne	r1, r3
   10a18:	bf02      	ittt	eq
   10a1a:	ea90 0f02 	teqeq	r0, r2
   10a1e:	2000      	moveq	r0, #0
   10a20:	4770      	bxeq	lr
   10a22:	f110 0f00 	cmn.w	r0, #0
   10a26:	ea91 0f03 	teq	r1, r3
   10a2a:	bf58      	it	pl
   10a2c:	4299      	cmppl	r1, r3
   10a2e:	bf08      	it	eq
   10a30:	4290      	cmpeq	r0, r2
   10a32:	bf2c      	ite	cs
   10a34:	17d8      	asrcs	r0, r3, #31
   10a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10a3a:	f040 0001 	orr.w	r0, r0, #1
   10a3e:	4770      	bx	lr
   10a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a48:	d102      	bne.n	10a50 <__cmpdf2+0x64>
   10a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10a4e:	d107      	bne.n	10a60 <__cmpdf2+0x74>
   10a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a58:	d1d6      	bne.n	10a08 <__cmpdf2+0x1c>
   10a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10a5e:	d0d3      	beq.n	10a08 <__cmpdf2+0x1c>
   10a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop

00010a68 <__aeabi_cdrcmple>:
   10a68:	4684      	mov	ip, r0
   10a6a:	4610      	mov	r0, r2
   10a6c:	4662      	mov	r2, ip
   10a6e:	468c      	mov	ip, r1
   10a70:	4619      	mov	r1, r3
   10a72:	4663      	mov	r3, ip
   10a74:	e000      	b.n	10a78 <__aeabi_cdcmpeq>
   10a76:	bf00      	nop

00010a78 <__aeabi_cdcmpeq>:
   10a78:	b501      	push	{r0, lr}
   10a7a:	f7ff ffb7 	bl	109ec <__cmpdf2>
   10a7e:	2800      	cmp	r0, #0
   10a80:	bf48      	it	mi
   10a82:	f110 0f00 	cmnmi.w	r0, #0
   10a86:	bd01      	pop	{r0, pc}

00010a88 <__aeabi_dcmpeq>:
   10a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a8c:	f7ff fff4 	bl	10a78 <__aeabi_cdcmpeq>
   10a90:	bf0c      	ite	eq
   10a92:	2001      	moveq	r0, #1
   10a94:	2000      	movne	r0, #0
   10a96:	f85d fb08 	ldr.w	pc, [sp], #8
   10a9a:	bf00      	nop

00010a9c <__aeabi_dcmplt>:
   10a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10aa0:	f7ff ffea 	bl	10a78 <__aeabi_cdcmpeq>
   10aa4:	bf34      	ite	cc
   10aa6:	2001      	movcc	r0, #1
   10aa8:	2000      	movcs	r0, #0
   10aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   10aae:	bf00      	nop

00010ab0 <__aeabi_dcmple>:
   10ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ab4:	f7ff ffe0 	bl	10a78 <__aeabi_cdcmpeq>
   10ab8:	bf94      	ite	ls
   10aba:	2001      	movls	r0, #1
   10abc:	2000      	movhi	r0, #0
   10abe:	f85d fb08 	ldr.w	pc, [sp], #8
   10ac2:	bf00      	nop

00010ac4 <__aeabi_dcmpge>:
   10ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ac8:	f7ff ffce 	bl	10a68 <__aeabi_cdrcmple>
   10acc:	bf94      	ite	ls
   10ace:	2001      	movls	r0, #1
   10ad0:	2000      	movhi	r0, #0
   10ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   10ad6:	bf00      	nop

00010ad8 <__aeabi_dcmpgt>:
   10ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   10adc:	f7ff ffc4 	bl	10a68 <__aeabi_cdrcmple>
   10ae0:	bf34      	ite	cc
   10ae2:	2001      	movcc	r0, #1
   10ae4:	2000      	movcs	r0, #0
   10ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   10aea:	bf00      	nop

00010aec <__aeabi_dcmpun>:
   10aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10af4:	d102      	bne.n	10afc <__aeabi_dcmpun+0x10>
   10af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10afa:	d10a      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b04:	d102      	bne.n	10b0c <__aeabi_dcmpun+0x20>
   10b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10b0a:	d102      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10b0c:	f04f 0000 	mov.w	r0, #0
   10b10:	4770      	bx	lr
   10b12:	f04f 0001 	mov.w	r0, #1
   10b16:	4770      	bx	lr

00010b18 <__aeabi_d2iz>:
   10b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10b20:	d215      	bcs.n	10b4e <__aeabi_d2iz+0x36>
   10b22:	d511      	bpl.n	10b48 <__aeabi_d2iz+0x30>
   10b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10b2c:	d912      	bls.n	10b54 <__aeabi_d2iz+0x3c>
   10b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10b3e:	fa23 f002 	lsr.w	r0, r3, r2
   10b42:	bf18      	it	ne
   10b44:	4240      	negne	r0, r0
   10b46:	4770      	bx	lr
   10b48:	f04f 0000 	mov.w	r0, #0
   10b4c:	4770      	bx	lr
   10b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10b52:	d105      	bne.n	10b60 <__aeabi_d2iz+0x48>
   10b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10b58:	bf08      	it	eq
   10b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10b5e:	4770      	bx	lr
   10b60:	f04f 0000 	mov.w	r0, #0
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop

00010b68 <__aeabi_d2uiz>:
   10b68:	004a      	lsls	r2, r1, #1
   10b6a:	d211      	bcs.n	10b90 <__aeabi_d2uiz+0x28>
   10b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10b70:	d211      	bcs.n	10b96 <__aeabi_d2uiz+0x2e>
   10b72:	d50d      	bpl.n	10b90 <__aeabi_d2uiz+0x28>
   10b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10b7c:	d40e      	bmi.n	10b9c <__aeabi_d2uiz+0x34>
   10b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10b8a:	fa23 f002 	lsr.w	r0, r3, r2
   10b8e:	4770      	bx	lr
   10b90:	f04f 0000 	mov.w	r0, #0
   10b94:	4770      	bx	lr
   10b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10b9a:	d102      	bne.n	10ba2 <__aeabi_d2uiz+0x3a>
   10b9c:	f04f 30ff 	mov.w	r0, #4294967295
   10ba0:	4770      	bx	lr
   10ba2:	f04f 0000 	mov.w	r0, #0
   10ba6:	4770      	bx	lr

00010ba8 <__aeabi_d2f>:
   10ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10bb0:	bf24      	itt	cs
   10bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10bba:	d90d      	bls.n	10bd8 <__aeabi_d2f+0x30>
   10bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10bd0:	bf08      	it	eq
   10bd2:	f020 0001 	biceq.w	r0, r0, #1
   10bd6:	4770      	bx	lr
   10bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10bdc:	d121      	bne.n	10c22 <__aeabi_d2f+0x7a>
   10bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10be2:	bfbc      	itt	lt
   10be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10be8:	4770      	bxlt	lr
   10bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10bf2:	f1c2 0218 	rsb	r2, r2, #24
   10bf6:	f1c2 0c20 	rsb	ip, r2, #32
   10bfa:	fa10 f30c 	lsls.w	r3, r0, ip
   10bfe:	fa20 f002 	lsr.w	r0, r0, r2
   10c02:	bf18      	it	ne
   10c04:	f040 0001 	orrne.w	r0, r0, #1
   10c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10c10:	fa03 fc0c 	lsl.w	ip, r3, ip
   10c14:	ea40 000c 	orr.w	r0, r0, ip
   10c18:	fa23 f302 	lsr.w	r3, r3, r2
   10c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10c20:	e7cc      	b.n	10bbc <__aeabi_d2f+0x14>
   10c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10c26:	d107      	bne.n	10c38 <__aeabi_d2f+0x90>
   10c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10c2c:	bf1e      	ittt	ne
   10c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10c36:	4770      	bxne	lr
   10c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c44:	4770      	bx	lr
   10c46:	bf00      	nop

00010c48 <__aeabi_uldivmod>:
   10c48:	b953      	cbnz	r3, 10c60 <__aeabi_uldivmod+0x18>
   10c4a:	b94a      	cbnz	r2, 10c60 <__aeabi_uldivmod+0x18>
   10c4c:	2900      	cmp	r1, #0
   10c4e:	bf08      	it	eq
   10c50:	2800      	cmpeq	r0, #0
   10c52:	bf1c      	itt	ne
   10c54:	f04f 31ff 	movne.w	r1, #4294967295
   10c58:	f04f 30ff 	movne.w	r0, #4294967295
   10c5c:	f000 b9a2 	b.w	10fa4 <__aeabi_idiv0>
   10c60:	f1ad 0c08 	sub.w	ip, sp, #8
   10c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10c68:	f000 f83c 	bl	10ce4 <__udivmoddi4>
   10c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10c74:	b004      	add	sp, #16
   10c76:	4770      	bx	lr

00010c78 <__aeabi_d2lz>:
   10c78:	b538      	push	{r3, r4, r5, lr}
   10c7a:	2200      	movs	r2, #0
   10c7c:	2300      	movs	r3, #0
   10c7e:	4604      	mov	r4, r0
   10c80:	460d      	mov	r5, r1
   10c82:	f7ff ff0b 	bl	10a9c <__aeabi_dcmplt>
   10c86:	b928      	cbnz	r0, 10c94 <__aeabi_d2lz+0x1c>
   10c88:	4620      	mov	r0, r4
   10c8a:	4629      	mov	r1, r5
   10c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c90:	f000 b80a 	b.w	10ca8 <__aeabi_d2ulz>
   10c94:	4620      	mov	r0, r4
   10c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   10c9a:	f000 f805 	bl	10ca8 <__aeabi_d2ulz>
   10c9e:	4240      	negs	r0, r0
   10ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10ca4:	bd38      	pop	{r3, r4, r5, pc}
   10ca6:	bf00      	nop

00010ca8 <__aeabi_d2ulz>:
   10ca8:	b5d0      	push	{r4, r6, r7, lr}
   10caa:	2200      	movs	r2, #0
   10cac:	4b0b      	ldr	r3, [pc, #44]	; (10cdc <__aeabi_d2ulz+0x34>)
   10cae:	4606      	mov	r6, r0
   10cb0:	460f      	mov	r7, r1
   10cb2:	f7ff fc81 	bl	105b8 <__aeabi_dmul>
   10cb6:	f7ff ff57 	bl	10b68 <__aeabi_d2uiz>
   10cba:	4604      	mov	r4, r0
   10cbc:	f7ff fc02 	bl	104c4 <__aeabi_ui2d>
   10cc0:	2200      	movs	r2, #0
   10cc2:	4b07      	ldr	r3, [pc, #28]	; (10ce0 <__aeabi_d2ulz+0x38>)
   10cc4:	f7ff fc78 	bl	105b8 <__aeabi_dmul>
   10cc8:	4602      	mov	r2, r0
   10cca:	460b      	mov	r3, r1
   10ccc:	4630      	mov	r0, r6
   10cce:	4639      	mov	r1, r7
   10cd0:	f7ff faba 	bl	10248 <__aeabi_dsub>
   10cd4:	f7ff ff48 	bl	10b68 <__aeabi_d2uiz>
   10cd8:	4621      	mov	r1, r4
   10cda:	bdd0      	pop	{r4, r6, r7, pc}
   10cdc:	3df00000 	.word	0x3df00000
   10ce0:	41f00000 	.word	0x41f00000

00010ce4 <__udivmoddi4>:
   10ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ce8:	9d08      	ldr	r5, [sp, #32]
   10cea:	4604      	mov	r4, r0
   10cec:	4688      	mov	r8, r1
   10cee:	2b00      	cmp	r3, #0
   10cf0:	d17d      	bne.n	10dee <__udivmoddi4+0x10a>
   10cf2:	428a      	cmp	r2, r1
   10cf4:	4617      	mov	r7, r2
   10cf6:	d93f      	bls.n	10d78 <__udivmoddi4+0x94>
   10cf8:	fab2 f282 	clz	r2, r2
   10cfc:	b142      	cbz	r2, 10d10 <__udivmoddi4+0x2c>
   10cfe:	f1c2 0020 	rsb	r0, r2, #32
   10d02:	4091      	lsls	r1, r2
   10d04:	4097      	lsls	r7, r2
   10d06:	fa24 f000 	lsr.w	r0, r4, r0
   10d0a:	4094      	lsls	r4, r2
   10d0c:	ea40 0801 	orr.w	r8, r0, r1
   10d10:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   10d14:	0c23      	lsrs	r3, r4, #16
   10d16:	fa1f fe87 	uxth.w	lr, r7
   10d1a:	fbb8 f6fc 	udiv	r6, r8, ip
   10d1e:	fb0c 8116 	mls	r1, ip, r6, r8
   10d22:	fb06 f00e 	mul.w	r0, r6, lr
   10d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10d2a:	4298      	cmp	r0, r3
   10d2c:	d905      	bls.n	10d3a <__udivmoddi4+0x56>
   10d2e:	18fb      	adds	r3, r7, r3
   10d30:	d202      	bcs.n	10d38 <__udivmoddi4+0x54>
   10d32:	4298      	cmp	r0, r3
   10d34:	f200 8124 	bhi.w	10f80 <__udivmoddi4+0x29c>
   10d38:	3e01      	subs	r6, #1
   10d3a:	1a19      	subs	r1, r3, r0
   10d3c:	b2a3      	uxth	r3, r4
   10d3e:	fbb1 f0fc 	udiv	r0, r1, ip
   10d42:	fb0c 1110 	mls	r1, ip, r0, r1
   10d46:	fb00 fe0e 	mul.w	lr, r0, lr
   10d4a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10d4e:	45a6      	cmp	lr, r4
   10d50:	d905      	bls.n	10d5e <__udivmoddi4+0x7a>
   10d52:	193c      	adds	r4, r7, r4
   10d54:	d202      	bcs.n	10d5c <__udivmoddi4+0x78>
   10d56:	45a6      	cmp	lr, r4
   10d58:	f200 810f 	bhi.w	10f7a <__udivmoddi4+0x296>
   10d5c:	3801      	subs	r0, #1
   10d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   10d62:	eba4 040e 	sub.w	r4, r4, lr
   10d66:	2600      	movs	r6, #0
   10d68:	b11d      	cbz	r5, 10d72 <__udivmoddi4+0x8e>
   10d6a:	40d4      	lsrs	r4, r2
   10d6c:	2300      	movs	r3, #0
   10d6e:	e9c5 4300 	strd	r4, r3, [r5]
   10d72:	4631      	mov	r1, r6
   10d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d78:	b902      	cbnz	r2, 10d7c <__udivmoddi4+0x98>
   10d7a:	deff      	udf	#255	; 0xff
   10d7c:	fab2 f282 	clz	r2, r2
   10d80:	2a00      	cmp	r2, #0
   10d82:	d150      	bne.n	10e26 <__udivmoddi4+0x142>
   10d84:	1bcb      	subs	r3, r1, r7
   10d86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10d8a:	fa1f f887 	uxth.w	r8, r7
   10d8e:	2601      	movs	r6, #1
   10d90:	0c21      	lsrs	r1, r4, #16
   10d92:	fbb3 fcfe 	udiv	ip, r3, lr
   10d96:	fb0e 301c 	mls	r0, lr, ip, r3
   10d9a:	460b      	mov	r3, r1
   10d9c:	fb08 f90c 	mul.w	r9, r8, ip
   10da0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10da4:	4589      	cmp	r9, r1
   10da6:	d90a      	bls.n	10dbe <__udivmoddi4+0xda>
   10da8:	1879      	adds	r1, r7, r1
   10daa:	bf2c      	ite	cs
   10dac:	2301      	movcs	r3, #1
   10dae:	2300      	movcc	r3, #0
   10db0:	4589      	cmp	r9, r1
   10db2:	d902      	bls.n	10dba <__udivmoddi4+0xd6>
   10db4:	2b00      	cmp	r3, #0
   10db6:	f000 80d9 	beq.w	10f6c <__udivmoddi4+0x288>
   10dba:	f10c 3cff 	add.w	ip, ip, #4294967295
   10dbe:	eba1 0109 	sub.w	r1, r1, r9
   10dc2:	b2a3      	uxth	r3, r4
   10dc4:	fbb1 f0fe 	udiv	r0, r1, lr
   10dc8:	fb0e 1110 	mls	r1, lr, r0, r1
   10dcc:	fb08 f800 	mul.w	r8, r8, r0
   10dd0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10dd4:	45a0      	cmp	r8, r4
   10dd6:	d905      	bls.n	10de4 <__udivmoddi4+0x100>
   10dd8:	193c      	adds	r4, r7, r4
   10dda:	d202      	bcs.n	10de2 <__udivmoddi4+0xfe>
   10ddc:	45a0      	cmp	r8, r4
   10dde:	f200 80c9 	bhi.w	10f74 <__udivmoddi4+0x290>
   10de2:	3801      	subs	r0, #1
   10de4:	eba4 0408 	sub.w	r4, r4, r8
   10de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10dec:	e7bc      	b.n	10d68 <__udivmoddi4+0x84>
   10dee:	428b      	cmp	r3, r1
   10df0:	d909      	bls.n	10e06 <__udivmoddi4+0x122>
   10df2:	2d00      	cmp	r5, #0
   10df4:	f000 80b1 	beq.w	10f5a <__udivmoddi4+0x276>
   10df8:	2600      	movs	r6, #0
   10dfa:	e9c5 0100 	strd	r0, r1, [r5]
   10dfe:	4630      	mov	r0, r6
   10e00:	4631      	mov	r1, r6
   10e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e06:	fab3 f683 	clz	r6, r3
   10e0a:	2e00      	cmp	r6, #0
   10e0c:	d146      	bne.n	10e9c <__udivmoddi4+0x1b8>
   10e0e:	428b      	cmp	r3, r1
   10e10:	f0c0 80a6 	bcc.w	10f60 <__udivmoddi4+0x27c>
   10e14:	4282      	cmp	r2, r0
   10e16:	f240 80a3 	bls.w	10f60 <__udivmoddi4+0x27c>
   10e1a:	4630      	mov	r0, r6
   10e1c:	2d00      	cmp	r5, #0
   10e1e:	d0a8      	beq.n	10d72 <__udivmoddi4+0x8e>
   10e20:	e9c5 4800 	strd	r4, r8, [r5]
   10e24:	e7a5      	b.n	10d72 <__udivmoddi4+0x8e>
   10e26:	4097      	lsls	r7, r2
   10e28:	f1c2 0320 	rsb	r3, r2, #32
   10e2c:	fa01 f002 	lsl.w	r0, r1, r2
   10e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10e34:	40d9      	lsrs	r1, r3
   10e36:	fa24 f303 	lsr.w	r3, r4, r3
   10e3a:	fa1f f887 	uxth.w	r8, r7
   10e3e:	4094      	lsls	r4, r2
   10e40:	4303      	orrs	r3, r0
   10e42:	fbb1 f0fe 	udiv	r0, r1, lr
   10e46:	0c1e      	lsrs	r6, r3, #16
   10e48:	fb0e 1110 	mls	r1, lr, r0, r1
   10e4c:	fb00 fc08 	mul.w	ip, r0, r8
   10e50:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   10e54:	458c      	cmp	ip, r1
   10e56:	d909      	bls.n	10e6c <__udivmoddi4+0x188>
   10e58:	1879      	adds	r1, r7, r1
   10e5a:	bf2c      	ite	cs
   10e5c:	2601      	movcs	r6, #1
   10e5e:	2600      	movcc	r6, #0
   10e60:	458c      	cmp	ip, r1
   10e62:	d902      	bls.n	10e6a <__udivmoddi4+0x186>
   10e64:	2e00      	cmp	r6, #0
   10e66:	f000 8093 	beq.w	10f90 <__udivmoddi4+0x2ac>
   10e6a:	3801      	subs	r0, #1
   10e6c:	eba1 010c 	sub.w	r1, r1, ip
   10e70:	b29b      	uxth	r3, r3
   10e72:	fbb1 f6fe 	udiv	r6, r1, lr
   10e76:	fb0e 1116 	mls	r1, lr, r6, r1
   10e7a:	fb06 fc08 	mul.w	ip, r6, r8
   10e7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   10e82:	458c      	cmp	ip, r1
   10e84:	d905      	bls.n	10e92 <__udivmoddi4+0x1ae>
   10e86:	1879      	adds	r1, r7, r1
   10e88:	d202      	bcs.n	10e90 <__udivmoddi4+0x1ac>
   10e8a:	458c      	cmp	ip, r1
   10e8c:	f200 8087 	bhi.w	10f9e <__udivmoddi4+0x2ba>
   10e90:	3e01      	subs	r6, #1
   10e92:	eba1 030c 	sub.w	r3, r1, ip
   10e96:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10e9a:	e779      	b.n	10d90 <__udivmoddi4+0xac>
   10e9c:	f1c6 0720 	rsb	r7, r6, #32
   10ea0:	fa03 f406 	lsl.w	r4, r3, r6
   10ea4:	fa02 fc06 	lsl.w	ip, r2, r6
   10ea8:	fa01 fe06 	lsl.w	lr, r1, r6
   10eac:	40fa      	lsrs	r2, r7
   10eae:	fa20 f807 	lsr.w	r8, r0, r7
   10eb2:	40f9      	lsrs	r1, r7
   10eb4:	fa00 f306 	lsl.w	r3, r0, r6
   10eb8:	4322      	orrs	r2, r4
   10eba:	ea48 040e 	orr.w	r4, r8, lr
   10ebe:	ea4f 4812 	mov.w	r8, r2, lsr #16
   10ec2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   10ec6:	fa1f f982 	uxth.w	r9, r2
   10eca:	fbb1 faf8 	udiv	sl, r1, r8
   10ece:	fb08 111a 	mls	r1, r8, sl, r1
   10ed2:	fb0a f009 	mul.w	r0, sl, r9
   10ed6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10eda:	4570      	cmp	r0, lr
   10edc:	d90a      	bls.n	10ef4 <__udivmoddi4+0x210>
   10ede:	eb12 0e0e 	adds.w	lr, r2, lr
   10ee2:	bf2c      	ite	cs
   10ee4:	2101      	movcs	r1, #1
   10ee6:	2100      	movcc	r1, #0
   10ee8:	4570      	cmp	r0, lr
   10eea:	d901      	bls.n	10ef0 <__udivmoddi4+0x20c>
   10eec:	2900      	cmp	r1, #0
   10eee:	d052      	beq.n	10f96 <__udivmoddi4+0x2b2>
   10ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
   10ef4:	ebae 0e00 	sub.w	lr, lr, r0
   10ef8:	b2a4      	uxth	r4, r4
   10efa:	fbbe f0f8 	udiv	r0, lr, r8
   10efe:	fb08 ee10 	mls	lr, r8, r0, lr
   10f02:	fb00 f909 	mul.w	r9, r0, r9
   10f06:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10f0a:	45f1      	cmp	r9, lr
   10f0c:	d905      	bls.n	10f1a <__udivmoddi4+0x236>
   10f0e:	eb12 0e0e 	adds.w	lr, r2, lr
   10f12:	d201      	bcs.n	10f18 <__udivmoddi4+0x234>
   10f14:	45f1      	cmp	r9, lr
   10f16:	d838      	bhi.n	10f8a <__udivmoddi4+0x2a6>
   10f18:	3801      	subs	r0, #1
   10f1a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10f1e:	ebae 0e09 	sub.w	lr, lr, r9
   10f22:	fba0 890c 	umull	r8, r9, r0, ip
   10f26:	45ce      	cmp	lr, r9
   10f28:	4641      	mov	r1, r8
   10f2a:	464c      	mov	r4, r9
   10f2c:	d302      	bcc.n	10f34 <__udivmoddi4+0x250>
   10f2e:	d106      	bne.n	10f3e <__udivmoddi4+0x25a>
   10f30:	4543      	cmp	r3, r8
   10f32:	d204      	bcs.n	10f3e <__udivmoddi4+0x25a>
   10f34:	3801      	subs	r0, #1
   10f36:	ebb8 010c 	subs.w	r1, r8, ip
   10f3a:	eb69 0402 	sbc.w	r4, r9, r2
   10f3e:	b315      	cbz	r5, 10f86 <__udivmoddi4+0x2a2>
   10f40:	1a5a      	subs	r2, r3, r1
   10f42:	eb6e 0e04 	sbc.w	lr, lr, r4
   10f46:	40f2      	lsrs	r2, r6
   10f48:	fa0e f707 	lsl.w	r7, lr, r7
   10f4c:	fa2e f306 	lsr.w	r3, lr, r6
   10f50:	2600      	movs	r6, #0
   10f52:	4317      	orrs	r7, r2
   10f54:	e9c5 7300 	strd	r7, r3, [r5]
   10f58:	e70b      	b.n	10d72 <__udivmoddi4+0x8e>
   10f5a:	462e      	mov	r6, r5
   10f5c:	4628      	mov	r0, r5
   10f5e:	e708      	b.n	10d72 <__udivmoddi4+0x8e>
   10f60:	1a84      	subs	r4, r0, r2
   10f62:	eb61 0103 	sbc.w	r1, r1, r3
   10f66:	2001      	movs	r0, #1
   10f68:	4688      	mov	r8, r1
   10f6a:	e757      	b.n	10e1c <__udivmoddi4+0x138>
   10f6c:	f1ac 0c02 	sub.w	ip, ip, #2
   10f70:	4439      	add	r1, r7
   10f72:	e724      	b.n	10dbe <__udivmoddi4+0xda>
   10f74:	3802      	subs	r0, #2
   10f76:	443c      	add	r4, r7
   10f78:	e734      	b.n	10de4 <__udivmoddi4+0x100>
   10f7a:	3802      	subs	r0, #2
   10f7c:	443c      	add	r4, r7
   10f7e:	e6ee      	b.n	10d5e <__udivmoddi4+0x7a>
   10f80:	3e02      	subs	r6, #2
   10f82:	443b      	add	r3, r7
   10f84:	e6d9      	b.n	10d3a <__udivmoddi4+0x56>
   10f86:	462e      	mov	r6, r5
   10f88:	e6f3      	b.n	10d72 <__udivmoddi4+0x8e>
   10f8a:	3802      	subs	r0, #2
   10f8c:	4496      	add	lr, r2
   10f8e:	e7c4      	b.n	10f1a <__udivmoddi4+0x236>
   10f90:	3802      	subs	r0, #2
   10f92:	4439      	add	r1, r7
   10f94:	e76a      	b.n	10e6c <__udivmoddi4+0x188>
   10f96:	f1aa 0a02 	sub.w	sl, sl, #2
   10f9a:	4496      	add	lr, r2
   10f9c:	e7aa      	b.n	10ef4 <__udivmoddi4+0x210>
   10f9e:	3e02      	subs	r6, #2
   10fa0:	4439      	add	r1, r7
   10fa2:	e776      	b.n	10e92 <__udivmoddi4+0x1ae>

00010fa4 <__aeabi_idiv0>:
   10fa4:	4770      	bx	lr
   10fa6:	bf00      	nop

00010fa8 <strcmp>:
   10fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
   10fac:	f811 3b01 	ldrb.w	r3, [r1], #1
   10fb0:	2a01      	cmp	r2, #1
   10fb2:	bf28      	it	cs
   10fb4:	429a      	cmpcs	r2, r3
   10fb6:	d0f7      	beq.n	10fa8 <strcmp>
   10fb8:	1ad0      	subs	r0, r2, r3
   10fba:	4770      	bx	lr

00010fbc <strlen>:
   10fbc:	4603      	mov	r3, r0
   10fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   10fc2:	2a00      	cmp	r2, #0
   10fc4:	d1fb      	bne.n	10fbe <strlen+0x2>
   10fc6:	1a18      	subs	r0, r3, r0
   10fc8:	3801      	subs	r0, #1
   10fca:	4770      	bx	lr
   10fcc:	0000      	movs	r0, r0
	...

00010fd0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   10fd0:	b570      	push	{r4, r5, r6, lr}
   10fd2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   10fd6:	2300      	movs	r3, #0
{
   10fd8:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   10fda:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   10fde:	2304      	movs	r3, #4
{
   10fe0:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   10fe2:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   10fe4:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   10fe6:	2800      	cmp	r0, #0
   10fe8:	f000 80d4 	beq.w	11194 <parse_edrx+0x1c4>
   10fec:	2900      	cmp	r1, #0
   10fee:	f000 80d1 	beq.w	11194 <parse_edrx+0x1c4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   10ff2:	2106      	movs	r1, #6
   10ff4:	a804      	add	r0, sp, #16
   10ff6:	f017 fe9c 	bl	28d32 <at_params_list_init>
	if (err) {
   10ffa:	4604      	mov	r4, r0
   10ffc:	b178      	cbz	r0, 1101e <parse_edrx+0x4e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   10ffe:	486a      	ldr	r0, [pc, #424]	; (111a8 <parse_edrx+0x1d8>)
   11000:	4b6a      	ldr	r3, [pc, #424]	; (111ac <parse_edrx+0x1dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   11002:	4622      	mov	r2, r4
   11004:	1ac0      	subs	r0, r0, r3
   11006:	08c0      	lsrs	r0, r0, #3
   11008:	0180      	lsls	r0, r0, #6
   1100a:	4969      	ldr	r1, [pc, #420]	; (111b0 <parse_edrx+0x1e0>)
   1100c:	f040 0001 	orr.w	r0, r0, #1
   11010:	f015 fa8d 	bl	2652e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   11014:	4620      	mov	r0, r4
   11016:	b006      	add	sp, #24
   11018:	ecbd 8b02 	vpop	{d8}
   1101c:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   1101e:	4601      	mov	r1, r0
   11020:	aa04      	add	r2, sp, #16
   11022:	4630      	mov	r0, r6
   11024:	f017 fe6c 	bl	28d00 <at_parser_params_from_str>
	if (err) {
   11028:	4604      	mov	r4, r0
   1102a:	b170      	cbz	r0, 1104a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1102c:	4622      	mov	r2, r4
   1102e:	485e      	ldr	r0, [pc, #376]	; (111a8 <parse_edrx+0x1d8>)
   11030:	4b5e      	ldr	r3, [pc, #376]	; (111ac <parse_edrx+0x1dc>)
   11032:	4960      	ldr	r1, [pc, #384]	; (111b4 <parse_edrx+0x1e4>)
   11034:	1ac0      	subs	r0, r0, r3
   11036:	08c0      	lsrs	r0, r0, #3
   11038:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1103a:	f040 0001 	orr.w	r0, r0, #1
   1103e:	f015 fa76 	bl	2652e <log_string_sync>
	at_params_list_free(&resp_list);
   11042:	a804      	add	r0, sp, #16
   11044:	f017 fea0 	bl	28d88 <at_params_list_free>
	return err;
   11048:	e7e4      	b.n	11014 <parse_edrx+0x44>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1104a:	2103      	movs	r1, #3
   1104c:	ab01      	add	r3, sp, #4
   1104e:	aa02      	add	r2, sp, #8
   11050:	a804      	add	r0, sp, #16
   11052:	f017 ff7a 	bl	28f4a <at_params_string_get>
	if (err) {
   11056:	4604      	mov	r4, r0
   11058:	b138      	cbz	r0, 1106a <parse_edrx+0x9a>
   1105a:	4853      	ldr	r0, [pc, #332]	; (111a8 <parse_edrx+0x1d8>)
   1105c:	4b53      	ldr	r3, [pc, #332]	; (111ac <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1105e:	4622      	mov	r2, r4
   11060:	1ac0      	subs	r0, r0, r3
   11062:	08c0      	lsrs	r0, r0, #3
   11064:	4954      	ldr	r1, [pc, #336]	; (111b8 <parse_edrx+0x1e8>)
   11066:	0180      	lsls	r0, r0, #6
   11068:	e7e7      	b.n	1103a <parse_edrx+0x6a>
	tmp_buf[len] = '\0';
   1106a:	9b01      	ldr	r3, [sp, #4]
   1106c:	aa06      	add	r2, sp, #24
   1106e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   11070:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   11072:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   11076:	2202      	movs	r2, #2
   11078:	a802      	add	r0, sp, #8
   1107a:	f013 ffe3 	bl	25044 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1107e:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
   11080:	4606      	mov	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   11082:	2101      	movs	r1, #1
   11084:	a804      	add	r0, sp, #16
   11086:	f017 ff31 	bl	28eec <at_params_int_get>
	if (err) {
   1108a:	4604      	mov	r4, r0
   1108c:	b138      	cbz	r0, 1109e <parse_edrx+0xce>
   1108e:	4846      	ldr	r0, [pc, #280]	; (111a8 <parse_edrx+0x1d8>)
   11090:	4b46      	ldr	r3, [pc, #280]	; (111ac <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   11092:	4622      	mov	r2, r4
   11094:	1ac0      	subs	r0, r0, r3
   11096:	08c0      	lsrs	r0, r0, #3
   11098:	4948      	ldr	r1, [pc, #288]	; (111bc <parse_edrx+0x1ec>)
   1109a:	0180      	lsls	r0, r0, #6
   1109c:	e7cd      	b.n	1103a <parse_edrx+0x6a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1109e:	9b00      	ldr	r3, [sp, #0]
   110a0:	2b04      	cmp	r3, #4
   110a2:	d026      	beq.n	110f2 <parse_edrx+0x122>
   110a4:	2b05      	cmp	r3, #5
   110a6:	d00d      	beq.n	110c4 <parse_edrx+0xf4>
   110a8:	4b40      	ldr	r3, [pc, #256]	; (111ac <parse_edrx+0x1dc>)
   110aa:	7028      	strb	r0, [r5, #0]
   110ac:	483e      	ldr	r0, [pc, #248]	; (111a8 <parse_edrx+0x1d8>)
		LOG_WRN("Active LTE mode could not be determined");
   110ae:	4944      	ldr	r1, [pc, #272]	; (111c0 <parse_edrx+0x1f0>)
   110b0:	1ac0      	subs	r0, r0, r3
   110b2:	08c0      	lsrs	r0, r0, #3
   110b4:	0180      	lsls	r0, r0, #6
   110b6:	f040 0002 	orr.w	r0, r0, #2
   110ba:	f015 fa38 	bl	2652e <log_string_sync>
		return -ENOTCONN;
   110be:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   110c2:	e7be      	b.n	11042 <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   110c4:	2309      	movs	r3, #9
		*ptw_multiplier = 2.56;
   110c6:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 111c4 <parse_edrx+0x1f4>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   110ca:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   110cc:	1d2a      	adds	r2, r5, #4
   110ce:	d039      	beq.n	11144 <parse_edrx+0x174>
   110d0:	b2f0      	uxtb	r0, r6
   110d2:	280f      	cmp	r0, #15
   110d4:	d836      	bhi.n	11144 <parse_edrx+0x174>
	switch (lte_mode) {
   110d6:	2b07      	cmp	r3, #7
   110d8:	d010      	beq.n	110fc <parse_edrx+0x12c>
   110da:	2b09      	cmp	r3, #9
   110dc:	d02e      	beq.n	1113c <parse_edrx+0x16c>
   110de:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   110e2:	4831      	ldr	r0, [pc, #196]	; (111a8 <parse_edrx+0x1d8>)
   110e4:	4b31      	ldr	r3, [pc, #196]	; (111ac <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   110e6:	4622      	mov	r2, r4
   110e8:	1ac0      	subs	r0, r0, r3
   110ea:	08c0      	lsrs	r0, r0, #3
   110ec:	4936      	ldr	r1, [pc, #216]	; (111c8 <parse_edrx+0x1f8>)
   110ee:	0180      	lsls	r0, r0, #6
   110f0:	e7a3      	b.n	1103a <parse_edrx+0x6a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   110f2:	2307      	movs	r3, #7
		*ptw_multiplier = 1.28;
   110f4:	ed9f 8a35 	vldr	s16, [pc, #212]	; 111cc <parse_edrx+0x1fc>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   110f8:	702b      	strb	r3, [r5, #0]
	if (err) {
   110fa:	e7e7      	b.n	110cc <parse_edrx+0xfc>
		multiplier = edrx_lookup_ltem[idx];
   110fc:	4b34      	ldr	r3, [pc, #208]	; (111d0 <parse_edrx+0x200>)
		multiplier = edrx_lookup_nbiot[idx];
   110fe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11102:	b1e8      	cbz	r0, 11140 <parse_edrx+0x170>
   11104:	f7ff f9ee 	bl	104e4 <__aeabi_i2d>
   11108:	a325      	add	r3, pc, #148	; (adr r3, 111a0 <parse_edrx+0x1d0>)
   1110a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1110e:	f7ff fa53 	bl	105b8 <__aeabi_dmul>
   11112:	f7ff fd49 	bl	10ba8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   11116:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11118:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1111a:	eb0d 0301 	add.w	r3, sp, r1
   1111e:	aa02      	add	r2, sp, #8
   11120:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   11122:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   11124:	f017 ff11 	bl	28f4a <at_params_string_get>
	if (err) {
   11128:	4604      	mov	r4, r0
   1112a:	b170      	cbz	r0, 1114a <parse_edrx+0x17a>
   1112c:	481e      	ldr	r0, [pc, #120]	; (111a8 <parse_edrx+0x1d8>)
   1112e:	4b1f      	ldr	r3, [pc, #124]	; (111ac <parse_edrx+0x1dc>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   11130:	4622      	mov	r2, r4
   11132:	1ac0      	subs	r0, r0, r3
   11134:	08c0      	lsrs	r0, r0, #3
   11136:	4927      	ldr	r1, [pc, #156]	; (111d4 <parse_edrx+0x204>)
   11138:	0180      	lsls	r0, r0, #6
   1113a:	e77e      	b.n	1103a <parse_edrx+0x6a>
		multiplier = edrx_lookup_nbiot[idx];
   1113c:	4b26      	ldr	r3, [pc, #152]	; (111d8 <parse_edrx+0x208>)
   1113e:	e7de      	b.n	110fe <parse_edrx+0x12e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11140:	4826      	ldr	r0, [pc, #152]	; (111dc <parse_edrx+0x20c>)
   11142:	e7e8      	b.n	11116 <parse_edrx+0x146>
		return -EINVAL;
   11144:	f06f 0415 	mvn.w	r4, #21
   11148:	e7cb      	b.n	110e2 <parse_edrx+0x112>
	tmp_buf[len] = '\0';
   1114a:	9b01      	ldr	r3, [sp, #4]
   1114c:	aa06      	add	r2, sp, #24
   1114e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   11150:	4601      	mov	r1, r0
   11152:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   11154:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   11158:	a802      	add	r0, sp, #8
   1115a:	f013 ff73 	bl	25044 <strtoul>
	if (idx > 15) {
   1115e:	b2c2      	uxtb	r2, r0
   11160:	2a0f      	cmp	r2, #15
   11162:	d90c      	bls.n	1117e <parse_edrx+0x1ae>
   11164:	4b11      	ldr	r3, [pc, #68]	; (111ac <parse_edrx+0x1dc>)
   11166:	4810      	ldr	r0, [pc, #64]	; (111a8 <parse_edrx+0x1d8>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   11168:	491d      	ldr	r1, [pc, #116]	; (111e0 <parse_edrx+0x210>)
   1116a:	1ac0      	subs	r0, r0, r3
   1116c:	08c0      	lsrs	r0, r0, #3
   1116e:	0180      	lsls	r0, r0, #6
   11170:	f040 0001 	orr.w	r0, r0, #1
   11174:	f015 f9db 	bl	2652e <log_string_sync>
		err = -EINVAL;
   11178:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1117c:	e761      	b.n	11042 <parse_edrx+0x72>
	idx += 1;
   1117e:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   11180:	b2c0      	uxtb	r0, r0
   11182:	ee07 0a90 	vmov	s15, r0
   11186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1118a:	ee67 7a88 	vmul.f32	s15, s15, s16
   1118e:	edc5 7a02 	vstr	s15, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   11192:	e756      	b.n	11042 <parse_edrx+0x72>
		return -EINVAL;
   11194:	f06f 0415 	mvn.w	r4, #21
   11198:	e73c      	b.n	11014 <parse_edrx+0x44>
   1119a:	bf00      	nop
   1119c:	f3af 8000 	nop.w
   111a0:	47ae147b 	.word	0x47ae147b
   111a4:	40247ae1 	.word	0x40247ae1
   111a8:	0002c3ac 	.word	0x0002c3ac
   111ac:	0002c344 	.word	0x0002c344
   111b0:	0002e566 	.word	0x0002e566
   111b4:	0002e58f 	.word	0x0002e58f
   111b8:	0002e5bb 	.word	0x0002e5bb
   111bc:	0002e5e7 	.word	0x0002e5e7
   111c0:	0002e609 	.word	0x0002e609
   111c4:	4023d70a 	.word	0x4023d70a
   111c8:	0002e631 	.word	0x0002e631
   111cc:	3fa3d70a 	.word	0x3fa3d70a
   111d0:	0002cc80 	.word	0x0002cc80
   111d4:	0002e655 	.word	0x0002e655
   111d8:	0002cca0 	.word	0x0002cca0
   111dc:	40a3d70a 	.word	0x40a3d70a
   111e0:	0002e680 	.word	0x0002e680
   111e4:	00000000 	.word	0x00000000

000111e8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   111e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   111ec:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   111ee:	460c      	mov	r4, r1
{
   111f0:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   111f2:	b909      	cbnz	r1, 111f8 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   111f4:	2000      	movs	r0, #0
   111f6:	e024      	b.n	11242 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   111f8:	6808      	ldr	r0, [r1, #0]
   111fa:	2800      	cmp	r0, #0
   111fc:	d0fa      	beq.n	111f4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   111fe:	688b      	ldr	r3, [r1, #8]
   11200:	6862      	ldr	r2, [r4, #4]
   11202:	1d19      	adds	r1, r3, #4
   11204:	4291      	cmp	r1, r2
   11206:	d80b      	bhi.n	11220 <parse_value+0x38>
   11208:	2204      	movs	r2, #4
   1120a:	4993      	ldr	r1, [pc, #588]	; (11458 <parse_value+0x270>)
   1120c:	4418      	add	r0, r3
   1120e:	f019 ff6a 	bl	2b0e6 <strncmp>
   11212:	b928      	cbnz	r0, 11220 <parse_value+0x38>
        item->type = cJSON_NULL;
   11214:	2304      	movs	r3, #4
   11216:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   11218:	68a3      	ldr	r3, [r4, #8]
   1121a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1121c:	60a3      	str	r3, [r4, #8]
   1121e:	e083      	b.n	11328 <parse_value+0x140>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   11220:	68a3      	ldr	r3, [r4, #8]
   11222:	6862      	ldr	r2, [r4, #4]
   11224:	1d59      	adds	r1, r3, #5
   11226:	4291      	cmp	r1, r2
   11228:	d80e      	bhi.n	11248 <parse_value+0x60>
   1122a:	6820      	ldr	r0, [r4, #0]
   1122c:	2205      	movs	r2, #5
   1122e:	498b      	ldr	r1, [pc, #556]	; (1145c <parse_value+0x274>)
   11230:	4418      	add	r0, r3
   11232:	f019 ff58 	bl	2b0e6 <strncmp>
   11236:	b938      	cbnz	r0, 11248 <parse_value+0x60>
        item->type = cJSON_False;
   11238:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1123a:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1123c:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1123e:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   11240:	60a2      	str	r2, [r4, #8]
}
   11242:	b013      	add	sp, #76	; 0x4c
   11244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   11248:	68a3      	ldr	r3, [r4, #8]
   1124a:	6862      	ldr	r2, [r4, #4]
   1124c:	1d19      	adds	r1, r3, #4
   1124e:	4291      	cmp	r1, r2
   11250:	d80d      	bhi.n	1126e <parse_value+0x86>
   11252:	6820      	ldr	r0, [r4, #0]
   11254:	2204      	movs	r2, #4
   11256:	4982      	ldr	r1, [pc, #520]	; (11460 <parse_value+0x278>)
   11258:	4418      	add	r0, r3
   1125a:	f019 ff44 	bl	2b0e6 <strncmp>
   1125e:	b930      	cbnz	r0, 1126e <parse_value+0x86>
        item->type = cJSON_True;
   11260:	2302      	movs	r3, #2
        item->valueint = 1;
   11262:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   11264:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   11266:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   11268:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1126a:	3204      	adds	r2, #4
   1126c:	e7e8      	b.n	11240 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1126e:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   11272:	4283      	cmp	r3, r0
   11274:	d2be      	bcs.n	111f4 <parse_value+0xc>
   11276:	6821      	ldr	r1, [r4, #0]
   11278:	5cca      	ldrb	r2, [r1, r3]
   1127a:	18cf      	adds	r7, r1, r3
   1127c:	2a22      	cmp	r2, #34	; 0x22
   1127e:	d104      	bne.n	1128a <parse_value+0xa2>
        return parse_string(item, input_buffer);
   11280:	4621      	mov	r1, r4
   11282:	4630      	mov	r0, r6
   11284:	f00d f84c 	bl	1e320 <parse_string>
   11288:	e7db      	b.n	11242 <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1128a:	2a2d      	cmp	r2, #45	; 0x2d
   1128c:	d003      	beq.n	11296 <parse_value+0xae>
   1128e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   11292:	2d09      	cmp	r5, #9
   11294:	d85d      	bhi.n	11352 <parse_value+0x16a>
    unsigned char *after_end = NULL;
   11296:	2200      	movs	r2, #0
   11298:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1129a:	2900      	cmp	r1, #0
   1129c:	d0aa      	beq.n	111f4 <parse_value+0xc>
                number_c_string[i] = decimal_point;
   1129e:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   112a2:	1ac3      	subs	r3, r0, r3
   112a4:	ad02      	add	r5, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   112a6:	f817 1b01 	ldrb.w	r1, [r7], #1
   112aa:	2939      	cmp	r1, #57	; 0x39
   112ac:	d80f      	bhi.n	112ce <parse_value+0xe6>
   112ae:	292a      	cmp	r1, #42	; 0x2a
   112b0:	d917      	bls.n	112e2 <parse_value+0xfa>
   112b2:	f1a1 002b 	sub.w	r0, r1, #43	; 0x2b
   112b6:	280e      	cmp	r0, #14
   112b8:	d813      	bhi.n	112e2 <parse_value+0xfa>
   112ba:	e8df f000 	tbb	[pc, r0]
   112be:	120c      	.short	0x120c
   112c0:	0c12370c 	.word	0x0c12370c
   112c4:	0c0c0c0c 	.word	0x0c0c0c0c
   112c8:	0c0c0c0c 	.word	0x0c0c0c0c
   112cc:	0c          	.byte	0x0c
   112cd:	00          	.byte	0x00
   112ce:	f001 00df 	and.w	r0, r1, #223	; 0xdf
   112d2:	2845      	cmp	r0, #69	; 0x45
   112d4:	d105      	bne.n	112e2 <parse_value+0xfa>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   112d6:	54a9      	strb	r1, [r5, r2]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   112d8:	3201      	adds	r2, #1
   112da:	2a3f      	cmp	r2, #63	; 0x3f
   112dc:	d001      	beq.n	112e2 <parse_value+0xfa>
   112de:	429a      	cmp	r2, r3
   112e0:	d1e1      	bne.n	112a6 <parse_value+0xbe>
    number_c_string[i] = '\0';
   112e2:	ab12      	add	r3, sp, #72	; 0x48
   112e4:	441a      	add	r2, r3
   112e6:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   112e8:	4628      	mov	r0, r5
   112ea:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
   112ec:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   112f0:	f013 fd00 	bl	24cf4 <strtod>
    if (number_c_string == after_end)
   112f4:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   112f6:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   112fa:	42af      	cmp	r7, r5
   112fc:	f43f af7a 	beq.w	111f4 <parse_value+0xc>
    if (number >= INT_MAX)
   11300:	a353      	add	r3, pc, #332	; (adr r3, 11450 <parse_value+0x268>)
   11302:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   11306:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   1130a:	ee10 0a10 	vmov	r0, s0
   1130e:	4649      	mov	r1, r9
   11310:	f7ff fbd8 	bl	10ac4 <__aeabi_dcmpge>
   11314:	b168      	cbz	r0, 11332 <parse_value+0x14a>
        item->valueint = INT_MAX;
   11316:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1131a:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1131c:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1131e:	1b7d      	subs	r5, r7, r5
   11320:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   11322:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   11324:	443d      	add	r5, r7
   11326:	60a5      	str	r5, [r4, #8]
    return true;
   11328:	2001      	movs	r0, #1
   1132a:	e78a      	b.n	11242 <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1132c:	f805 c002 	strb.w	ip, [r5, r2]
                break;
   11330:	e7d2      	b.n	112d8 <parse_value+0xf0>
    else if (number <= (double)INT_MIN)
   11332:	2200      	movs	r2, #0
   11334:	4640      	mov	r0, r8
   11336:	4649      	mov	r1, r9
   11338:	4b4a      	ldr	r3, [pc, #296]	; (11464 <parse_value+0x27c>)
   1133a:	f7ff fbb9 	bl	10ab0 <__aeabi_dcmple>
   1133e:	b110      	cbz	r0, 11346 <parse_value+0x15e>
        item->valueint = INT_MIN;
   11340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   11344:	e7e9      	b.n	1131a <parse_value+0x132>
        item->valueint = (int)number;
   11346:	4640      	mov	r0, r8
   11348:	4649      	mov	r1, r9
   1134a:	f7ff fbe5 	bl	10b18 <__aeabi_d2iz>
   1134e:	6170      	str	r0, [r6, #20]
   11350:	e7e4      	b.n	1131c <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   11352:	2a5b      	cmp	r2, #91	; 0x5b
   11354:	d153      	bne.n	113fe <parse_value+0x216>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   11356:	68e2      	ldr	r2, [r4, #12]
   11358:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1135c:	f4bf af4a 	bcs.w	111f4 <parse_value+0xc>
    input_buffer->depth++;
   11360:	3201      	adds	r2, #1
   11362:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   11364:	5cca      	ldrb	r2, [r1, r3]
   11366:	2a5b      	cmp	r2, #91	; 0x5b
   11368:	f47f af44 	bne.w	111f4 <parse_value+0xc>
    input_buffer->offset++;
   1136c:	3301      	adds	r3, #1
   1136e:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   11370:	4620      	mov	r0, r4
   11372:	f018 f806 	bl	29382 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   11376:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1137a:	4293      	cmp	r3, r2
   1137c:	d263      	bcs.n	11446 <parse_value+0x25e>
   1137e:	6822      	ldr	r2, [r4, #0]
   11380:	5cd2      	ldrb	r2, [r2, r3]
   11382:	2a5d      	cmp	r2, #93	; 0x5d
   11384:	d10c      	bne.n	113a0 <parse_value+0x1b8>
    cJSON *current_item = NULL;
   11386:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   11388:	462f      	mov	r7, r5
    input_buffer->depth--;
   1138a:	68e3      	ldr	r3, [r4, #12]
   1138c:	3b01      	subs	r3, #1
   1138e:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   11390:	b107      	cbz	r7, 11394 <parse_value+0x1ac>
        head->prev = current_item;
   11392:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   11394:	2320      	movs	r3, #32
    item->child = head;
   11396:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1139a:	68a3      	ldr	r3, [r4, #8]
   1139c:	3301      	adds	r3, #1
   1139e:	e73d      	b.n	1121c <parse_value+0x34>
    cJSON *current_item = NULL;
   113a0:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   113a2:	462f      	mov	r7, r5
    input_buffer->offset--;
   113a4:	3b01      	subs	r3, #1
   113a6:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   113a8:	6920      	ldr	r0, [r4, #16]
   113aa:	f018 f86c 	bl	29486 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   113ae:	46a8      	mov	r8, r5
   113b0:	4605      	mov	r5, r0
   113b2:	2800      	cmp	r0, #0
   113b4:	f000 809d 	beq.w	114f2 <parse_value+0x30a>
        if (head == NULL)
   113b8:	b1ff      	cbz	r7, 113fa <parse_value+0x212>
            current_item->next = new_item;
   113ba:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   113be:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   113c2:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   113c4:	4620      	mov	r0, r4
        input_buffer->offset++;
   113c6:	3301      	adds	r3, #1
   113c8:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   113ca:	f017 ffda 	bl	29382 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   113ce:	4621      	mov	r1, r4
   113d0:	4628      	mov	r0, r5
   113d2:	f7ff ff09 	bl	111e8 <parse_value>
   113d6:	2800      	cmp	r0, #0
   113d8:	f000 808e 	beq.w	114f8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   113dc:	4620      	mov	r0, r4
   113de:	f017 ffd0 	bl	29382 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   113e2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   113e6:	4293      	cmp	r3, r2
   113e8:	f080 8086 	bcs.w	114f8 <parse_value+0x310>
   113ec:	6822      	ldr	r2, [r4, #0]
   113ee:	5cd3      	ldrb	r3, [r2, r3]
   113f0:	2b2c      	cmp	r3, #44	; 0x2c
   113f2:	d0d9      	beq.n	113a8 <parse_value+0x1c0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   113f4:	2b5d      	cmp	r3, #93	; 0x5d
   113f6:	d17f      	bne.n	114f8 <parse_value+0x310>
   113f8:	e7c7      	b.n	1138a <parse_value+0x1a2>
   113fa:	4607      	mov	r7, r0
   113fc:	e7e1      	b.n	113c2 <parse_value+0x1da>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   113fe:	2a7b      	cmp	r2, #123	; 0x7b
   11400:	f47f aef8 	bne.w	111f4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   11404:	68e2      	ldr	r2, [r4, #12]
   11406:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1140a:	f4bf aef3 	bcs.w	111f4 <parse_value+0xc>
    input_buffer->depth++;
   1140e:	3201      	adds	r2, #1
   11410:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   11412:	5cca      	ldrb	r2, [r1, r3]
   11414:	2a7b      	cmp	r2, #123	; 0x7b
   11416:	f47f aeed 	bne.w	111f4 <parse_value+0xc>
    input_buffer->offset++;
   1141a:	3301      	adds	r3, #1
   1141c:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1141e:	4620      	mov	r0, r4
   11420:	f017 ffaf 	bl	29382 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   11424:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   11428:	4293      	cmp	r3, r2
   1142a:	d20c      	bcs.n	11446 <parse_value+0x25e>
   1142c:	6822      	ldr	r2, [r4, #0]
   1142e:	5cd2      	ldrb	r2, [r2, r3]
   11430:	2a7d      	cmp	r2, #125	; 0x7d
   11432:	d119      	bne.n	11468 <parse_value+0x280>
    cJSON *current_item = NULL;
   11434:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   11436:	462f      	mov	r7, r5
    input_buffer->depth--;
   11438:	68e3      	ldr	r3, [r4, #12]
   1143a:	3b01      	subs	r3, #1
   1143c:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1143e:	b107      	cbz	r7, 11442 <parse_value+0x25a>
        head->prev = current_item;
   11440:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   11442:	2340      	movs	r3, #64	; 0x40
   11444:	e7a7      	b.n	11396 <parse_value+0x1ae>
        input_buffer->offset--;
   11446:	3b01      	subs	r3, #1
   11448:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1144a:	e6d3      	b.n	111f4 <parse_value+0xc>
   1144c:	f3af 8000 	nop.w
   11450:	ffc00000 	.word	0xffc00000
   11454:	41dfffff 	.word	0x41dfffff
   11458:	0003011c 	.word	0x0003011c
   1145c:	00030133 	.word	0x00030133
   11460:	00030139 	.word	0x00030139
   11464:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   11468:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1146a:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1146c:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1146e:	3b01      	subs	r3, #1
   11470:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   11472:	6920      	ldr	r0, [r4, #16]
   11474:	f018 f807 	bl	29486 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   11478:	46a9      	mov	r9, r5
   1147a:	4605      	mov	r5, r0
   1147c:	2800      	cmp	r0, #0
   1147e:	d038      	beq.n	114f2 <parse_value+0x30a>
        if (head == NULL)
   11480:	b3af      	cbz	r7, 114ee <parse_value+0x306>
            current_item->next = new_item;
   11482:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   11486:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1148a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1148c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1148e:	3301      	adds	r3, #1
   11490:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   11492:	f017 ff76 	bl	29382 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   11496:	4621      	mov	r1, r4
   11498:	4628      	mov	r0, r5
   1149a:	f00c ff41 	bl	1e320 <parse_string>
   1149e:	b358      	cbz	r0, 114f8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   114a0:	4620      	mov	r0, r4
   114a2:	f017 ff6e 	bl	29382 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   114a6:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   114a8:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   114ac:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   114ae:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   114b2:	4293      	cmp	r3, r2
   114b4:	d220      	bcs.n	114f8 <parse_value+0x310>
   114b6:	6822      	ldr	r2, [r4, #0]
   114b8:	5cd2      	ldrb	r2, [r2, r3]
   114ba:	2a3a      	cmp	r2, #58	; 0x3a
   114bc:	d11c      	bne.n	114f8 <parse_value+0x310>
        input_buffer->offset++;
   114be:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   114c0:	4620      	mov	r0, r4
        input_buffer->offset++;
   114c2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   114c4:	f017 ff5d 	bl	29382 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   114c8:	4621      	mov	r1, r4
   114ca:	4628      	mov	r0, r5
   114cc:	f7ff fe8c 	bl	111e8 <parse_value>
   114d0:	b190      	cbz	r0, 114f8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   114d2:	4620      	mov	r0, r4
   114d4:	f017 ff55 	bl	29382 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   114d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   114dc:	4293      	cmp	r3, r2
   114de:	d20b      	bcs.n	114f8 <parse_value+0x310>
   114e0:	6822      	ldr	r2, [r4, #0]
   114e2:	5cd3      	ldrb	r3, [r2, r3]
   114e4:	2b2c      	cmp	r3, #44	; 0x2c
   114e6:	d0c4      	beq.n	11472 <parse_value+0x28a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   114e8:	2b7d      	cmp	r3, #125	; 0x7d
   114ea:	d105      	bne.n	114f8 <parse_value+0x310>
   114ec:	e7a4      	b.n	11438 <parse_value+0x250>
   114ee:	4607      	mov	r7, r0
   114f0:	e7cb      	b.n	1148a <parse_value+0x2a2>
    if (head != NULL)
   114f2:	2f00      	cmp	r7, #0
   114f4:	f43f ae7e 	beq.w	111f4 <parse_value+0xc>
        cJSON_Delete(head);
   114f8:	4638      	mov	r0, r7
   114fa:	f00d fbb3 	bl	1ec64 <cJSON_Delete>
   114fe:	e679      	b.n	111f4 <parse_value+0xc>

00011500 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   11500:	4b17      	ldr	r3, [pc, #92]	; (11560 <cJSON_CreateNumber+0x60>)
{
   11502:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   11504:	6818      	ldr	r0, [r3, #0]
{
   11506:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1150a:	f017 ffbc 	bl	29486 <cJSON_New_Item.isra.0>
    if(item)
   1150e:	4604      	mov	r4, r0
   11510:	b170      	cbz	r0, 11530 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   11512:	2308      	movs	r3, #8
        item->valuedouble = num;
   11514:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   11518:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1151a:	4639      	mov	r1, r7
   1151c:	a30e      	add	r3, pc, #56	; (adr r3, 11558 <cJSON_CreateNumber+0x58>)
   1151e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11522:	4630      	mov	r0, r6
   11524:	f7ff face 	bl	10ac4 <__aeabi_dcmpge>
   11528:	b120      	cbz	r0, 11534 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1152a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1152e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   11530:	4620      	mov	r0, r4
   11532:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   11534:	2200      	movs	r2, #0
   11536:	4630      	mov	r0, r6
   11538:	4639      	mov	r1, r7
   1153a:	4b0a      	ldr	r3, [pc, #40]	; (11564 <cJSON_CreateNumber+0x64>)
   1153c:	f7ff fab8 	bl	10ab0 <__aeabi_dcmple>
   11540:	b110      	cbz	r0, 11548 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   11542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   11546:	e7f2      	b.n	1152e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   11548:	4630      	mov	r0, r6
   1154a:	4639      	mov	r1, r7
   1154c:	f7ff fae4 	bl	10b18 <__aeabi_d2iz>
   11550:	6160      	str	r0, [r4, #20]
    return item;
   11552:	e7ed      	b.n	11530 <cJSON_CreateNumber+0x30>
   11554:	f3af 8000 	nop.w
   11558:	ffc00000 	.word	0xffc00000
   1155c:	41dfffff 	.word	0x41dfffff
   11560:	2000c614 	.word	0x2000c614
   11564:	c1e00000 	.word	0xc1e00000

00011568 <_strtod_l>:
   11568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1156c:	461f      	mov	r7, r3
   1156e:	b0a3      	sub	sp, #140	; 0x8c
   11570:	2300      	movs	r3, #0
   11572:	4604      	mov	r4, r0
   11574:	4688      	mov	r8, r1
   11576:	9219      	str	r2, [sp, #100]	; 0x64
   11578:	931e      	str	r3, [sp, #120]	; 0x78
   1157a:	f04f 0a00 	mov.w	sl, #0
   1157e:	4ba3      	ldr	r3, [pc, #652]	; (1180c <_strtod_l+0x2a4>)
   11580:	f04f 0b00 	mov.w	fp, #0
   11584:	681b      	ldr	r3, [r3, #0]
   11586:	4618      	mov	r0, r3
   11588:	9307      	str	r3, [sp, #28]
   1158a:	f7ff fd17 	bl	10fbc <strlen>
   1158e:	4605      	mov	r5, r0
   11590:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   11594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11596:	781a      	ldrb	r2, [r3, #0]
   11598:	2a2b      	cmp	r2, #43	; 0x2b
   1159a:	d04c      	beq.n	11636 <_strtod_l+0xce>
   1159c:	d839      	bhi.n	11612 <_strtod_l+0xaa>
   1159e:	2a0d      	cmp	r2, #13
   115a0:	d832      	bhi.n	11608 <_strtod_l+0xa0>
   115a2:	2a08      	cmp	r2, #8
   115a4:	d832      	bhi.n	1160c <_strtod_l+0xa4>
   115a6:	2a00      	cmp	r2, #0
   115a8:	d03c      	beq.n	11624 <_strtod_l+0xbc>
   115aa:	2300      	movs	r3, #0
   115ac:	930e      	str	r3, [sp, #56]	; 0x38
   115ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   115b0:	7833      	ldrb	r3, [r6, #0]
   115b2:	2b30      	cmp	r3, #48	; 0x30
   115b4:	f040 80b5 	bne.w	11722 <_strtod_l+0x1ba>
   115b8:	7873      	ldrb	r3, [r6, #1]
   115ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   115be:	2b58      	cmp	r3, #88	; 0x58
   115c0:	d16c      	bne.n	1169c <_strtod_l+0x134>
   115c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   115c4:	a91d      	add	r1, sp, #116	; 0x74
   115c6:	9702      	str	r7, [sp, #8]
   115c8:	4620      	mov	r0, r4
   115ca:	9301      	str	r3, [sp, #4]
   115cc:	ab1e      	add	r3, sp, #120	; 0x78
   115ce:	4a90      	ldr	r2, [pc, #576]	; (11810 <_strtod_l+0x2a8>)
   115d0:	9300      	str	r3, [sp, #0]
   115d2:	ab1f      	add	r3, sp, #124	; 0x7c
   115d4:	f013 fd7c 	bl	250d0 <__gethex>
   115d8:	f010 0707 	ands.w	r7, r0, #7
   115dc:	4605      	mov	r5, r0
   115de:	d005      	beq.n	115ec <_strtod_l+0x84>
   115e0:	2f06      	cmp	r7, #6
   115e2:	d12a      	bne.n	1163a <_strtod_l+0xd2>
   115e4:	3601      	adds	r6, #1
   115e6:	2300      	movs	r3, #0
   115e8:	961d      	str	r6, [sp, #116]	; 0x74
   115ea:	930e      	str	r3, [sp, #56]	; 0x38
   115ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   115ee:	2b00      	cmp	r3, #0
   115f0:	f040 859a 	bne.w	12128 <_strtod_l+0xbc0>
   115f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   115f6:	b1db      	cbz	r3, 11630 <_strtod_l+0xc8>
   115f8:	4652      	mov	r2, sl
   115fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   115fe:	ec43 2b10 	vmov	d0, r2, r3
   11602:	b023      	add	sp, #140	; 0x8c
   11604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11608:	2a20      	cmp	r2, #32
   1160a:	d1ce      	bne.n	115aa <_strtod_l+0x42>
   1160c:	3301      	adds	r3, #1
   1160e:	931d      	str	r3, [sp, #116]	; 0x74
   11610:	e7c0      	b.n	11594 <_strtod_l+0x2c>
   11612:	2a2d      	cmp	r2, #45	; 0x2d
   11614:	d1c9      	bne.n	115aa <_strtod_l+0x42>
   11616:	2201      	movs	r2, #1
   11618:	920e      	str	r2, [sp, #56]	; 0x38
   1161a:	1c5a      	adds	r2, r3, #1
   1161c:	921d      	str	r2, [sp, #116]	; 0x74
   1161e:	785b      	ldrb	r3, [r3, #1]
   11620:	2b00      	cmp	r3, #0
   11622:	d1c4      	bne.n	115ae <_strtod_l+0x46>
   11624:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11626:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1162a:	2b00      	cmp	r3, #0
   1162c:	f040 857a 	bne.w	12124 <_strtod_l+0xbbc>
   11630:	4652      	mov	r2, sl
   11632:	465b      	mov	r3, fp
   11634:	e7e3      	b.n	115fe <_strtod_l+0x96>
   11636:	2200      	movs	r2, #0
   11638:	e7ee      	b.n	11618 <_strtod_l+0xb0>
   1163a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1163c:	b13a      	cbz	r2, 1164e <_strtod_l+0xe6>
   1163e:	2135      	movs	r1, #53	; 0x35
   11640:	a820      	add	r0, sp, #128	; 0x80
   11642:	f01a faf9 	bl	2bc38 <__copybits>
   11646:	991e      	ldr	r1, [sp, #120]	; 0x78
   11648:	4620      	mov	r0, r4
   1164a:	f019 fff2 	bl	2b632 <_Bfree>
   1164e:	3f01      	subs	r7, #1
   11650:	2f05      	cmp	r7, #5
   11652:	d807      	bhi.n	11664 <_strtod_l+0xfc>
   11654:	e8df f007 	tbb	[pc, r7]
   11658:	1d180b0e 	.word	0x1d180b0e
   1165c:	030e      	.short	0x030e
   1165e:	f04f 0b00 	mov.w	fp, #0
   11662:	46da      	mov	sl, fp
   11664:	0728      	lsls	r0, r5, #28
   11666:	d5c1      	bpl.n	115ec <_strtod_l+0x84>
   11668:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1166c:	e7be      	b.n	115ec <_strtod_l+0x84>
   1166e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   11672:	e7f7      	b.n	11664 <_strtod_l+0xfc>
   11674:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   11678:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1167a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1167e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   11686:	e7ed      	b.n	11664 <_strtod_l+0xfc>
   11688:	f8df b188 	ldr.w	fp, [pc, #392]	; 11814 <_strtod_l+0x2ac>
   1168c:	f04f 0a00 	mov.w	sl, #0
   11690:	e7e8      	b.n	11664 <_strtod_l+0xfc>
   11692:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11696:	f04f 3aff 	mov.w	sl, #4294967295
   1169a:	e7e3      	b.n	11664 <_strtod_l+0xfc>
   1169c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1169e:	1c5a      	adds	r2, r3, #1
   116a0:	921d      	str	r2, [sp, #116]	; 0x74
   116a2:	785b      	ldrb	r3, [r3, #1]
   116a4:	2b30      	cmp	r3, #48	; 0x30
   116a6:	d0f9      	beq.n	1169c <_strtod_l+0x134>
   116a8:	2b00      	cmp	r3, #0
   116aa:	d09f      	beq.n	115ec <_strtod_l+0x84>
   116ac:	2301      	movs	r3, #1
   116ae:	f04f 0900 	mov.w	r9, #0
   116b2:	9304      	str	r3, [sp, #16]
   116b4:	220a      	movs	r2, #10
   116b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   116b8:	464f      	mov	r7, r9
   116ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   116be:	930a      	str	r3, [sp, #40]	; 0x28
   116c0:	981d      	ldr	r0, [sp, #116]	; 0x74
   116c2:	7806      	ldrb	r6, [r0, #0]
   116c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   116c8:	b2d9      	uxtb	r1, r3
   116ca:	2909      	cmp	r1, #9
   116cc:	d92b      	bls.n	11726 <_strtod_l+0x1be>
   116ce:	462a      	mov	r2, r5
   116d0:	9907      	ldr	r1, [sp, #28]
   116d2:	f019 fd08 	bl	2b0e6 <strncmp>
   116d6:	2800      	cmp	r0, #0
   116d8:	d034      	beq.n	11744 <_strtod_l+0x1dc>
   116da:	2000      	movs	r0, #0
   116dc:	4633      	mov	r3, r6
   116de:	463d      	mov	r5, r7
   116e0:	4602      	mov	r2, r0
   116e2:	9007      	str	r0, [sp, #28]
   116e4:	2b65      	cmp	r3, #101	; 0x65
   116e6:	d001      	beq.n	116ec <_strtod_l+0x184>
   116e8:	2b45      	cmp	r3, #69	; 0x45
   116ea:	d118      	bne.n	1171e <_strtod_l+0x1b6>
   116ec:	b91d      	cbnz	r5, 116f6 <_strtod_l+0x18e>
   116ee:	9b04      	ldr	r3, [sp, #16]
   116f0:	4303      	orrs	r3, r0
   116f2:	d097      	beq.n	11624 <_strtod_l+0xbc>
   116f4:	2500      	movs	r5, #0
   116f6:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   116fa:	f108 0301 	add.w	r3, r8, #1
   116fe:	931d      	str	r3, [sp, #116]	; 0x74
   11700:	f898 3001 	ldrb.w	r3, [r8, #1]
   11704:	2b2b      	cmp	r3, #43	; 0x2b
   11706:	d075      	beq.n	117f4 <_strtod_l+0x28c>
   11708:	2b2d      	cmp	r3, #45	; 0x2d
   1170a:	d07b      	beq.n	11804 <_strtod_l+0x29c>
   1170c:	f04f 0c00 	mov.w	ip, #0
   11710:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11714:	2909      	cmp	r1, #9
   11716:	f240 8083 	bls.w	11820 <_strtod_l+0x2b8>
   1171a:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1171e:	2600      	movs	r6, #0
   11720:	e09e      	b.n	11860 <_strtod_l+0x2f8>
   11722:	2300      	movs	r3, #0
   11724:	e7c3      	b.n	116ae <_strtod_l+0x146>
   11726:	2f08      	cmp	r7, #8
   11728:	f100 0001 	add.w	r0, r0, #1
   1172c:	f107 0701 	add.w	r7, r7, #1
   11730:	bfd4      	ite	le
   11732:	9909      	ldrle	r1, [sp, #36]	; 0x24
   11734:	fb02 3909 	mlagt	r9, r2, r9, r3
   11738:	901d      	str	r0, [sp, #116]	; 0x74
   1173a:	bfdc      	itt	le
   1173c:	fb02 3301 	mlale	r3, r2, r1, r3
   11740:	9309      	strle	r3, [sp, #36]	; 0x24
   11742:	e7bd      	b.n	116c0 <_strtod_l+0x158>
   11744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11746:	195a      	adds	r2, r3, r5
   11748:	921d      	str	r2, [sp, #116]	; 0x74
   1174a:	5d5b      	ldrb	r3, [r3, r5]
   1174c:	2f00      	cmp	r7, #0
   1174e:	d036      	beq.n	117be <_strtod_l+0x256>
   11750:	463d      	mov	r5, r7
   11752:	9007      	str	r0, [sp, #28]
   11754:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11758:	2a09      	cmp	r2, #9
   1175a:	d912      	bls.n	11782 <_strtod_l+0x21a>
   1175c:	2201      	movs	r2, #1
   1175e:	e7c1      	b.n	116e4 <_strtod_l+0x17c>
   11760:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11762:	3001      	adds	r0, #1
   11764:	1c5a      	adds	r2, r3, #1
   11766:	921d      	str	r2, [sp, #116]	; 0x74
   11768:	785b      	ldrb	r3, [r3, #1]
   1176a:	2b30      	cmp	r3, #48	; 0x30
   1176c:	d0f8      	beq.n	11760 <_strtod_l+0x1f8>
   1176e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   11772:	2a08      	cmp	r2, #8
   11774:	f200 84dd 	bhi.w	12132 <_strtod_l+0xbca>
   11778:	9007      	str	r0, [sp, #28]
   1177a:	2000      	movs	r0, #0
   1177c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1177e:	4605      	mov	r5, r0
   11780:	920a      	str	r2, [sp, #40]	; 0x28
   11782:	3b30      	subs	r3, #48	; 0x30
   11784:	f100 0201 	add.w	r2, r0, #1
   11788:	d013      	beq.n	117b2 <_strtod_l+0x24a>
   1178a:	9907      	ldr	r1, [sp, #28]
   1178c:	eb00 0e05 	add.w	lr, r0, r5
   11790:	4411      	add	r1, r2
   11792:	462a      	mov	r2, r5
   11794:	9107      	str	r1, [sp, #28]
   11796:	210a      	movs	r1, #10
   11798:	4572      	cmp	r2, lr
   1179a:	d112      	bne.n	117c2 <_strtod_l+0x25a>
   1179c:	182a      	adds	r2, r5, r0
   1179e:	3501      	adds	r5, #1
   117a0:	2a08      	cmp	r2, #8
   117a2:	4405      	add	r5, r0
   117a4:	dc1c      	bgt.n	117e0 <_strtod_l+0x278>
   117a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   117a8:	220a      	movs	r2, #10
   117aa:	fb02 3301 	mla	r3, r2, r1, r3
   117ae:	9309      	str	r3, [sp, #36]	; 0x24
   117b0:	2200      	movs	r2, #0
   117b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   117b4:	4610      	mov	r0, r2
   117b6:	1c59      	adds	r1, r3, #1
   117b8:	911d      	str	r1, [sp, #116]	; 0x74
   117ba:	785b      	ldrb	r3, [r3, #1]
   117bc:	e7ca      	b.n	11754 <_strtod_l+0x1ec>
   117be:	4638      	mov	r0, r7
   117c0:	e7d3      	b.n	1176a <_strtod_l+0x202>
   117c2:	2a08      	cmp	r2, #8
   117c4:	dc04      	bgt.n	117d0 <_strtod_l+0x268>
   117c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   117c8:	434e      	muls	r6, r1
   117ca:	9609      	str	r6, [sp, #36]	; 0x24
   117cc:	3201      	adds	r2, #1
   117ce:	e7e3      	b.n	11798 <_strtod_l+0x230>
   117d0:	f102 0c01 	add.w	ip, r2, #1
   117d4:	f1bc 0f10 	cmp.w	ip, #16
   117d8:	bfd8      	it	le
   117da:	fb01 f909 	mulle.w	r9, r1, r9
   117de:	e7f5      	b.n	117cc <_strtod_l+0x264>
   117e0:	2d10      	cmp	r5, #16
   117e2:	bfdc      	itt	le
   117e4:	220a      	movle	r2, #10
   117e6:	fb02 3909 	mlale	r9, r2, r9, r3
   117ea:	e7e1      	b.n	117b0 <_strtod_l+0x248>
   117ec:	2300      	movs	r3, #0
   117ee:	2201      	movs	r2, #1
   117f0:	9307      	str	r3, [sp, #28]
   117f2:	e77c      	b.n	116ee <_strtod_l+0x186>
   117f4:	f04f 0c00 	mov.w	ip, #0
   117f8:	f108 0302 	add.w	r3, r8, #2
   117fc:	931d      	str	r3, [sp, #116]	; 0x74
   117fe:	f898 3002 	ldrb.w	r3, [r8, #2]
   11802:	e785      	b.n	11710 <_strtod_l+0x1a8>
   11804:	f04f 0c01 	mov.w	ip, #1
   11808:	e7f6      	b.n	117f8 <_strtod_l+0x290>
   1180a:	bf00      	nop
   1180c:	0002cc08 	.word	0x0002cc08
   11810:	0002cbe0 	.word	0x0002cbe0
   11814:	7ff00000 	.word	0x7ff00000
   11818:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1181a:	1c59      	adds	r1, r3, #1
   1181c:	911d      	str	r1, [sp, #116]	; 0x74
   1181e:	785b      	ldrb	r3, [r3, #1]
   11820:	2b30      	cmp	r3, #48	; 0x30
   11822:	d0f9      	beq.n	11818 <_strtod_l+0x2b0>
   11824:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   11828:	2908      	cmp	r1, #8
   1182a:	f63f af78 	bhi.w	1171e <_strtod_l+0x1b6>
   1182e:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   11832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11834:	9308      	str	r3, [sp, #32]
   11836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11838:	1c59      	adds	r1, r3, #1
   1183a:	911d      	str	r1, [sp, #116]	; 0x74
   1183c:	785b      	ldrb	r3, [r3, #1]
   1183e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   11842:	2e09      	cmp	r6, #9
   11844:	d937      	bls.n	118b6 <_strtod_l+0x34e>
   11846:	9e08      	ldr	r6, [sp, #32]
   11848:	1b89      	subs	r1, r1, r6
   1184a:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1184e:	2908      	cmp	r1, #8
   11850:	dc02      	bgt.n	11858 <_strtod_l+0x2f0>
   11852:	4576      	cmp	r6, lr
   11854:	bfa8      	it	ge
   11856:	4676      	movge	r6, lr
   11858:	f1bc 0f00 	cmp.w	ip, #0
   1185c:	d000      	beq.n	11860 <_strtod_l+0x2f8>
   1185e:	4276      	negs	r6, r6
   11860:	2d00      	cmp	r5, #0
   11862:	d14f      	bne.n	11904 <_strtod_l+0x39c>
   11864:	9904      	ldr	r1, [sp, #16]
   11866:	4301      	orrs	r1, r0
   11868:	f47f aec0 	bne.w	115ec <_strtod_l+0x84>
   1186c:	2a00      	cmp	r2, #0
   1186e:	f47f aed9 	bne.w	11624 <_strtod_l+0xbc>
   11872:	2b69      	cmp	r3, #105	; 0x69
   11874:	d027      	beq.n	118c6 <_strtod_l+0x35e>
   11876:	dc24      	bgt.n	118c2 <_strtod_l+0x35a>
   11878:	2b49      	cmp	r3, #73	; 0x49
   1187a:	d024      	beq.n	118c6 <_strtod_l+0x35e>
   1187c:	2b4e      	cmp	r3, #78	; 0x4e
   1187e:	f47f aed1 	bne.w	11624 <_strtod_l+0xbc>
   11882:	499f      	ldr	r1, [pc, #636]	; (11b00 <_strtod_l+0x598>)
   11884:	a81d      	add	r0, sp, #116	; 0x74
   11886:	f019 fdde 	bl	2b446 <__match>
   1188a:	2800      	cmp	r0, #0
   1188c:	f43f aeca 	beq.w	11624 <_strtod_l+0xbc>
   11890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11892:	781b      	ldrb	r3, [r3, #0]
   11894:	2b28      	cmp	r3, #40	; 0x28
   11896:	d12d      	bne.n	118f4 <_strtod_l+0x38c>
   11898:	aa20      	add	r2, sp, #128	; 0x80
   1189a:	499a      	ldr	r1, [pc, #616]	; (11b04 <_strtod_l+0x59c>)
   1189c:	a81d      	add	r0, sp, #116	; 0x74
   1189e:	f019 fde6 	bl	2b46e <__hexnan>
   118a2:	2805      	cmp	r0, #5
   118a4:	d126      	bne.n	118f4 <_strtod_l+0x38c>
   118a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   118a8:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   118ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   118b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   118b4:	e69a      	b.n	115ec <_strtod_l+0x84>
   118b6:	210a      	movs	r1, #10
   118b8:	fb01 3e0e 	mla	lr, r1, lr, r3
   118bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   118c0:	e7b9      	b.n	11836 <_strtod_l+0x2ce>
   118c2:	2b6e      	cmp	r3, #110	; 0x6e
   118c4:	e7db      	b.n	1187e <_strtod_l+0x316>
   118c6:	4990      	ldr	r1, [pc, #576]	; (11b08 <_strtod_l+0x5a0>)
   118c8:	a81d      	add	r0, sp, #116	; 0x74
   118ca:	f019 fdbc 	bl	2b446 <__match>
   118ce:	2800      	cmp	r0, #0
   118d0:	f43f aea8 	beq.w	11624 <_strtod_l+0xbc>
   118d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   118d6:	a81d      	add	r0, sp, #116	; 0x74
   118d8:	498c      	ldr	r1, [pc, #560]	; (11b0c <_strtod_l+0x5a4>)
   118da:	3b01      	subs	r3, #1
   118dc:	931d      	str	r3, [sp, #116]	; 0x74
   118de:	f019 fdb2 	bl	2b446 <__match>
   118e2:	b910      	cbnz	r0, 118ea <_strtod_l+0x382>
   118e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   118e6:	3301      	adds	r3, #1
   118e8:	931d      	str	r3, [sp, #116]	; 0x74
   118ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 11b1c <_strtod_l+0x5b4>
   118ee:	f04f 0a00 	mov.w	sl, #0
   118f2:	e67b      	b.n	115ec <_strtod_l+0x84>
   118f4:	4886      	ldr	r0, [pc, #536]	; (11b10 <_strtod_l+0x5a8>)
   118f6:	f001 fa23 	bl	12d40 <nan>
   118fa:	ed8d 0b04 	vstr	d0, [sp, #16]
   118fe:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   11902:	e673      	b.n	115ec <_strtod_l+0x84>
   11904:	9b07      	ldr	r3, [sp, #28]
   11906:	2f00      	cmp	r7, #0
   11908:	bf08      	it	eq
   1190a:	462f      	moveq	r7, r5
   1190c:	2d10      	cmp	r5, #16
   1190e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11910:	eba6 0303 	sub.w	r3, r6, r3
   11914:	46a8      	mov	r8, r5
   11916:	bfa8      	it	ge
   11918:	f04f 0810 	movge.w	r8, #16
   1191c:	9308      	str	r3, [sp, #32]
   1191e:	f7fe fdd1 	bl	104c4 <__aeabi_ui2d>
   11922:	2d09      	cmp	r5, #9
   11924:	4682      	mov	sl, r0
   11926:	468b      	mov	fp, r1
   11928:	dd13      	ble.n	11952 <_strtod_l+0x3ea>
   1192a:	4b7a      	ldr	r3, [pc, #488]	; (11b14 <_strtod_l+0x5ac>)
   1192c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   11930:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   11934:	f7fe fe40 	bl	105b8 <__aeabi_dmul>
   11938:	4682      	mov	sl, r0
   1193a:	468b      	mov	fp, r1
   1193c:	4648      	mov	r0, r9
   1193e:	f7fe fdc1 	bl	104c4 <__aeabi_ui2d>
   11942:	4602      	mov	r2, r0
   11944:	460b      	mov	r3, r1
   11946:	4650      	mov	r0, sl
   11948:	4659      	mov	r1, fp
   1194a:	f7fe fc7f 	bl	1024c <__adddf3>
   1194e:	4682      	mov	sl, r0
   11950:	468b      	mov	fp, r1
   11952:	2d0f      	cmp	r5, #15
   11954:	dc38      	bgt.n	119c8 <_strtod_l+0x460>
   11956:	9b08      	ldr	r3, [sp, #32]
   11958:	2b00      	cmp	r3, #0
   1195a:	f43f ae47 	beq.w	115ec <_strtod_l+0x84>
   1195e:	dd24      	ble.n	119aa <_strtod_l+0x442>
   11960:	2b16      	cmp	r3, #22
   11962:	dc0b      	bgt.n	1197c <_strtod_l+0x414>
   11964:	4d6b      	ldr	r5, [pc, #428]	; (11b14 <_strtod_l+0x5ac>)
   11966:	4652      	mov	r2, sl
   11968:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1196c:	465b      	mov	r3, fp
   1196e:	e9d5 0100 	ldrd	r0, r1, [r5]
   11972:	f7fe fe21 	bl	105b8 <__aeabi_dmul>
   11976:	4682      	mov	sl, r0
   11978:	468b      	mov	fp, r1
   1197a:	e637      	b.n	115ec <_strtod_l+0x84>
   1197c:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   11980:	9a08      	ldr	r2, [sp, #32]
   11982:	4293      	cmp	r3, r2
   11984:	db20      	blt.n	119c8 <_strtod_l+0x460>
   11986:	f1c5 050f 	rsb	r5, r5, #15
   1198a:	4c62      	ldr	r4, [pc, #392]	; (11b14 <_strtod_l+0x5ac>)
   1198c:	4652      	mov	r2, sl
   1198e:	465b      	mov	r3, fp
   11990:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   11994:	e9d1 0100 	ldrd	r0, r1, [r1]
   11998:	f7fe fe0e 	bl	105b8 <__aeabi_dmul>
   1199c:	9b08      	ldr	r3, [sp, #32]
   1199e:	1b5d      	subs	r5, r3, r5
   119a0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   119a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   119a8:	e7e3      	b.n	11972 <_strtod_l+0x40a>
   119aa:	9b08      	ldr	r3, [sp, #32]
   119ac:	3316      	adds	r3, #22
   119ae:	db0b      	blt.n	119c8 <_strtod_l+0x460>
   119b0:	9b07      	ldr	r3, [sp, #28]
   119b2:	4650      	mov	r0, sl
   119b4:	4a57      	ldr	r2, [pc, #348]	; (11b14 <_strtod_l+0x5ac>)
   119b6:	4659      	mov	r1, fp
   119b8:	1b9e      	subs	r6, r3, r6
   119ba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   119be:	e9d6 2300 	ldrd	r2, r3, [r6]
   119c2:	f7fe ff23 	bl	1080c <__aeabi_ddiv>
   119c6:	e7d6      	b.n	11976 <_strtod_l+0x40e>
   119c8:	eba5 0808 	sub.w	r8, r5, r8
   119cc:	9b08      	ldr	r3, [sp, #32]
   119ce:	4498      	add	r8, r3
   119d0:	f1b8 0f00 	cmp.w	r8, #0
   119d4:	dd71      	ble.n	11aba <_strtod_l+0x552>
   119d6:	f018 030f 	ands.w	r3, r8, #15
   119da:	d00a      	beq.n	119f2 <_strtod_l+0x48a>
   119dc:	494d      	ldr	r1, [pc, #308]	; (11b14 <_strtod_l+0x5ac>)
   119de:	4652      	mov	r2, sl
   119e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   119e4:	465b      	mov	r3, fp
   119e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   119ea:	f7fe fde5 	bl	105b8 <__aeabi_dmul>
   119ee:	4682      	mov	sl, r0
   119f0:	468b      	mov	fp, r1
   119f2:	f038 080f 	bics.w	r8, r8, #15
   119f6:	d04d      	beq.n	11a94 <_strtod_l+0x52c>
   119f8:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   119fc:	dd22      	ble.n	11a44 <_strtod_l+0x4dc>
   119fe:	2500      	movs	r5, #0
   11a00:	462e      	mov	r6, r5
   11a02:	9509      	str	r5, [sp, #36]	; 0x24
   11a04:	9507      	str	r5, [sp, #28]
   11a06:	2322      	movs	r3, #34	; 0x22
   11a08:	f8df b110 	ldr.w	fp, [pc, #272]	; 11b1c <_strtod_l+0x5b4>
   11a0c:	f04f 0a00 	mov.w	sl, #0
   11a10:	6023      	str	r3, [r4, #0]
   11a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a14:	2b00      	cmp	r3, #0
   11a16:	f43f ade9 	beq.w	115ec <_strtod_l+0x84>
   11a1a:	991e      	ldr	r1, [sp, #120]	; 0x78
   11a1c:	4620      	mov	r0, r4
   11a1e:	f019 fe08 	bl	2b632 <_Bfree>
   11a22:	9907      	ldr	r1, [sp, #28]
   11a24:	4620      	mov	r0, r4
   11a26:	f019 fe04 	bl	2b632 <_Bfree>
   11a2a:	4631      	mov	r1, r6
   11a2c:	4620      	mov	r0, r4
   11a2e:	f019 fe00 	bl	2b632 <_Bfree>
   11a32:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a34:	4620      	mov	r0, r4
   11a36:	f019 fdfc 	bl	2b632 <_Bfree>
   11a3a:	4629      	mov	r1, r5
   11a3c:	4620      	mov	r0, r4
   11a3e:	f019 fdf8 	bl	2b632 <_Bfree>
   11a42:	e5d3      	b.n	115ec <_strtod_l+0x84>
   11a44:	2300      	movs	r3, #0
   11a46:	ea4f 1828 	mov.w	r8, r8, asr #4
   11a4a:	4650      	mov	r0, sl
   11a4c:	4659      	mov	r1, fp
   11a4e:	4699      	mov	r9, r3
   11a50:	f1b8 0f01 	cmp.w	r8, #1
   11a54:	dc21      	bgt.n	11a9a <_strtod_l+0x532>
   11a56:	b10b      	cbz	r3, 11a5c <_strtod_l+0x4f4>
   11a58:	4682      	mov	sl, r0
   11a5a:	468b      	mov	fp, r1
   11a5c:	4b2e      	ldr	r3, [pc, #184]	; (11b18 <_strtod_l+0x5b0>)
   11a5e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   11a62:	4652      	mov	r2, sl
   11a64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   11a68:	465b      	mov	r3, fp
   11a6a:	e9d9 0100 	ldrd	r0, r1, [r9]
   11a6e:	f7fe fda3 	bl	105b8 <__aeabi_dmul>
   11a72:	4b2a      	ldr	r3, [pc, #168]	; (11b1c <_strtod_l+0x5b4>)
   11a74:	460a      	mov	r2, r1
   11a76:	4682      	mov	sl, r0
   11a78:	400b      	ands	r3, r1
   11a7a:	4929      	ldr	r1, [pc, #164]	; (11b20 <_strtod_l+0x5b8>)
   11a7c:	428b      	cmp	r3, r1
   11a7e:	d8be      	bhi.n	119fe <_strtod_l+0x496>
   11a80:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   11a84:	428b      	cmp	r3, r1
   11a86:	bf86      	itte	hi
   11a88:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 11b24 <_strtod_l+0x5bc>
   11a8c:	f04f 3aff 	movhi.w	sl, #4294967295
   11a90:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   11a94:	2300      	movs	r3, #0
   11a96:	9304      	str	r3, [sp, #16]
   11a98:	e082      	b.n	11ba0 <_strtod_l+0x638>
   11a9a:	f018 0f01 	tst.w	r8, #1
   11a9e:	d007      	beq.n	11ab0 <_strtod_l+0x548>
   11aa0:	4b1d      	ldr	r3, [pc, #116]	; (11b18 <_strtod_l+0x5b0>)
   11aa2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   11aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   11aaa:	f7fe fd85 	bl	105b8 <__aeabi_dmul>
   11aae:	2301      	movs	r3, #1
   11ab0:	f109 0901 	add.w	r9, r9, #1
   11ab4:	ea4f 0868 	mov.w	r8, r8, asr #1
   11ab8:	e7ca      	b.n	11a50 <_strtod_l+0x4e8>
   11aba:	d0eb      	beq.n	11a94 <_strtod_l+0x52c>
   11abc:	f1c8 0800 	rsb	r8, r8, #0
   11ac0:	f018 020f 	ands.w	r2, r8, #15
   11ac4:	d00a      	beq.n	11adc <_strtod_l+0x574>
   11ac6:	4b13      	ldr	r3, [pc, #76]	; (11b14 <_strtod_l+0x5ac>)
   11ac8:	4650      	mov	r0, sl
   11aca:	4659      	mov	r1, fp
   11acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ad4:	f7fe fe9a 	bl	1080c <__aeabi_ddiv>
   11ad8:	4682      	mov	sl, r0
   11ada:	468b      	mov	fp, r1
   11adc:	ea5f 1828 	movs.w	r8, r8, asr #4
   11ae0:	d0d8      	beq.n	11a94 <_strtod_l+0x52c>
   11ae2:	f1b8 0f1f 	cmp.w	r8, #31
   11ae6:	dd1f      	ble.n	11b28 <_strtod_l+0x5c0>
   11ae8:	2500      	movs	r5, #0
   11aea:	462e      	mov	r6, r5
   11aec:	9509      	str	r5, [sp, #36]	; 0x24
   11aee:	9507      	str	r5, [sp, #28]
   11af0:	2322      	movs	r3, #34	; 0x22
   11af2:	f04f 0a00 	mov.w	sl, #0
   11af6:	f04f 0b00 	mov.w	fp, #0
   11afa:	6023      	str	r3, [r4, #0]
   11afc:	e789      	b.n	11a12 <_strtod_l+0x4aa>
   11afe:	bf00      	nop
   11b00:	0003040d 	.word	0x0003040d
   11b04:	0002cbf4 	.word	0x0002cbf4
   11b08:	0002d525 	.word	0x0002d525
   11b0c:	00030435 	.word	0x00030435
   11b10:	0002fa74 	.word	0x0002fa74
   11b14:	0002c4f8 	.word	0x0002c4f8
   11b18:	0002c4d0 	.word	0x0002c4d0
   11b1c:	7ff00000 	.word	0x7ff00000
   11b20:	7ca00000 	.word	0x7ca00000
   11b24:	7fefffff 	.word	0x7fefffff
   11b28:	f018 0310 	ands.w	r3, r8, #16
   11b2c:	4650      	mov	r0, sl
   11b2e:	4659      	mov	r1, fp
   11b30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 11ee8 <_strtod_l+0x980>
   11b34:	bf18      	it	ne
   11b36:	236a      	movne	r3, #106	; 0x6a
   11b38:	9304      	str	r3, [sp, #16]
   11b3a:	2300      	movs	r3, #0
   11b3c:	f018 0f01 	tst.w	r8, #1
   11b40:	d004      	beq.n	11b4c <_strtod_l+0x5e4>
   11b42:	e9d9 2300 	ldrd	r2, r3, [r9]
   11b46:	f7fe fd37 	bl	105b8 <__aeabi_dmul>
   11b4a:	2301      	movs	r3, #1
   11b4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   11b50:	f109 0908 	add.w	r9, r9, #8
   11b54:	d1f2      	bne.n	11b3c <_strtod_l+0x5d4>
   11b56:	b10b      	cbz	r3, 11b5c <_strtod_l+0x5f4>
   11b58:	4682      	mov	sl, r0
   11b5a:	468b      	mov	fp, r1
   11b5c:	9b04      	ldr	r3, [sp, #16]
   11b5e:	b1bb      	cbz	r3, 11b90 <_strtod_l+0x628>
   11b60:	f3cb 530a 	ubfx	r3, fp, #20, #11
   11b64:	4659      	mov	r1, fp
   11b66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	dd10      	ble.n	11b90 <_strtod_l+0x628>
   11b6e:	2b1f      	cmp	r3, #31
   11b70:	f340 8127 	ble.w	11dc2 <_strtod_l+0x85a>
   11b74:	2b34      	cmp	r3, #52	; 0x34
   11b76:	f04f 0a00 	mov.w	sl, #0
   11b7a:	bfdb      	ittet	le
   11b7c:	3b20      	suble	r3, #32
   11b7e:	f04f 32ff 	movle.w	r2, #4294967295
   11b82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   11b86:	fa02 f303 	lslle.w	r3, r2, r3
   11b8a:	bfd8      	it	le
   11b8c:	ea03 0b01 	andle.w	fp, r3, r1
   11b90:	2200      	movs	r2, #0
   11b92:	2300      	movs	r3, #0
   11b94:	4650      	mov	r0, sl
   11b96:	4659      	mov	r1, fp
   11b98:	f7fe ff76 	bl	10a88 <__aeabi_dcmpeq>
   11b9c:	2800      	cmp	r0, #0
   11b9e:	d1a3      	bne.n	11ae8 <_strtod_l+0x580>
   11ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ba2:	463a      	mov	r2, r7
   11ba4:	990a      	ldr	r1, [sp, #40]	; 0x28
   11ba6:	4620      	mov	r0, r4
   11ba8:	9300      	str	r3, [sp, #0]
   11baa:	462b      	mov	r3, r5
   11bac:	f019 fd97 	bl	2b6de <__s2b>
   11bb0:	9009      	str	r0, [sp, #36]	; 0x24
   11bb2:	2800      	cmp	r0, #0
   11bb4:	f43f af23 	beq.w	119fe <_strtod_l+0x496>
   11bb8:	9b07      	ldr	r3, [sp, #28]
   11bba:	2500      	movs	r5, #0
   11bbc:	1b9e      	subs	r6, r3, r6
   11bbe:	9b08      	ldr	r3, [sp, #32]
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	bfb4      	ite	lt
   11bc4:	4633      	movlt	r3, r6
   11bc6:	2300      	movge	r3, #0
   11bc8:	462e      	mov	r6, r5
   11bca:	9310      	str	r3, [sp, #64]	; 0x40
   11bcc:	9b08      	ldr	r3, [sp, #32]
   11bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11bd2:	9318      	str	r3, [sp, #96]	; 0x60
   11bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bd6:	4620      	mov	r0, r4
   11bd8:	6859      	ldr	r1, [r3, #4]
   11bda:	f019 fcf6 	bl	2b5ca <_Balloc>
   11bde:	9007      	str	r0, [sp, #28]
   11be0:	2800      	cmp	r0, #0
   11be2:	f43f af10 	beq.w	11a06 <_strtod_l+0x49e>
   11be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11be8:	300c      	adds	r0, #12
   11bea:	691a      	ldr	r2, [r3, #16]
   11bec:	f103 010c 	add.w	r1, r3, #12
   11bf0:	3202      	adds	r2, #2
   11bf2:	0092      	lsls	r2, r2, #2
   11bf4:	f019 f928 	bl	2ae48 <memcpy>
   11bf8:	aa20      	add	r2, sp, #128	; 0x80
   11bfa:	a91f      	add	r1, sp, #124	; 0x7c
   11bfc:	4620      	mov	r0, r4
   11bfe:	ec4b ab10 	vmov	d0, sl, fp
   11c02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   11c06:	f019 ff94 	bl	2bb32 <__d2b>
   11c0a:	901e      	str	r0, [sp, #120]	; 0x78
   11c0c:	2800      	cmp	r0, #0
   11c0e:	f43f aefa 	beq.w	11a06 <_strtod_l+0x49e>
   11c12:	2101      	movs	r1, #1
   11c14:	4620      	mov	r0, r4
   11c16:	f019 fdf0 	bl	2b7fa <__i2b>
   11c1a:	4606      	mov	r6, r0
   11c1c:	2800      	cmp	r0, #0
   11c1e:	f43f aef2 	beq.w	11a06 <_strtod_l+0x49e>
   11c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11c24:	9904      	ldr	r1, [sp, #16]
   11c26:	2b00      	cmp	r3, #0
   11c28:	eba3 0801 	sub.w	r8, r3, r1
   11c2c:	bfa9      	itett	ge
   11c2e:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   11c30:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   11c32:	eb03 0902 	addge.w	r9, r3, r2
   11c36:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   11c38:	bfb8      	it	lt
   11c3a:	1ad7      	sublt	r7, r2, r3
   11c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11c3e:	4ba5      	ldr	r3, [pc, #660]	; (11ed4 <_strtod_l+0x96c>)
   11c40:	4490      	add	r8, r2
   11c42:	bfb8      	it	lt
   11c44:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   11c48:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11c4c:	f108 38ff 	add.w	r8, r8, #4294967295
   11c50:	4598      	cmp	r8, r3
   11c52:	f280 80ca 	bge.w	11dea <_strtod_l+0x882>
   11c56:	eba3 0308 	sub.w	r3, r3, r8
   11c5a:	2101      	movs	r1, #1
   11c5c:	2b1f      	cmp	r3, #31
   11c5e:	eba2 0203 	sub.w	r2, r2, r3
   11c62:	f300 80b5 	bgt.w	11dd0 <_strtod_l+0x868>
   11c66:	fa01 f303 	lsl.w	r3, r1, r3
   11c6a:	9311      	str	r3, [sp, #68]	; 0x44
   11c6c:	2300      	movs	r3, #0
   11c6e:	930c      	str	r3, [sp, #48]	; 0x30
   11c70:	eb09 0802 	add.w	r8, r9, r2
   11c74:	9b04      	ldr	r3, [sp, #16]
   11c76:	4417      	add	r7, r2
   11c78:	45c1      	cmp	r9, r8
   11c7a:	441f      	add	r7, r3
   11c7c:	464b      	mov	r3, r9
   11c7e:	bfa8      	it	ge
   11c80:	4643      	movge	r3, r8
   11c82:	42bb      	cmp	r3, r7
   11c84:	bfa8      	it	ge
   11c86:	463b      	movge	r3, r7
   11c88:	2b00      	cmp	r3, #0
   11c8a:	bfc2      	ittt	gt
   11c8c:	eba8 0803 	subgt.w	r8, r8, r3
   11c90:	1aff      	subgt	r7, r7, r3
   11c92:	eba9 0903 	subgt.w	r9, r9, r3
   11c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11c98:	2b00      	cmp	r3, #0
   11c9a:	dd17      	ble.n	11ccc <_strtod_l+0x764>
   11c9c:	4631      	mov	r1, r6
   11c9e:	461a      	mov	r2, r3
   11ca0:	4620      	mov	r0, r4
   11ca2:	f013 fc59 	bl	25558 <__pow5mult>
   11ca6:	4606      	mov	r6, r0
   11ca8:	2800      	cmp	r0, #0
   11caa:	f43f aeac 	beq.w	11a06 <_strtod_l+0x49e>
   11cae:	4601      	mov	r1, r0
   11cb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11cb2:	4620      	mov	r0, r4
   11cb4:	f019 fdaa 	bl	2b80c <__multiply>
   11cb8:	900f      	str	r0, [sp, #60]	; 0x3c
   11cba:	2800      	cmp	r0, #0
   11cbc:	f43f aea3 	beq.w	11a06 <_strtod_l+0x49e>
   11cc0:	991e      	ldr	r1, [sp, #120]	; 0x78
   11cc2:	4620      	mov	r0, r4
   11cc4:	f019 fcb5 	bl	2b632 <_Bfree>
   11cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11cca:	931e      	str	r3, [sp, #120]	; 0x78
   11ccc:	f1b8 0f00 	cmp.w	r8, #0
   11cd0:	f300 8090 	bgt.w	11df4 <_strtod_l+0x88c>
   11cd4:	9b08      	ldr	r3, [sp, #32]
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	dd08      	ble.n	11cec <_strtod_l+0x784>
   11cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11cdc:	4620      	mov	r0, r4
   11cde:	9907      	ldr	r1, [sp, #28]
   11ce0:	f013 fc3a 	bl	25558 <__pow5mult>
   11ce4:	9007      	str	r0, [sp, #28]
   11ce6:	2800      	cmp	r0, #0
   11ce8:	f43f ae8d 	beq.w	11a06 <_strtod_l+0x49e>
   11cec:	2f00      	cmp	r7, #0
   11cee:	dd08      	ble.n	11d02 <_strtod_l+0x79a>
   11cf0:	463a      	mov	r2, r7
   11cf2:	9907      	ldr	r1, [sp, #28]
   11cf4:	4620      	mov	r0, r4
   11cf6:	f019 fe24 	bl	2b942 <__lshift>
   11cfa:	9007      	str	r0, [sp, #28]
   11cfc:	2800      	cmp	r0, #0
   11cfe:	f43f ae82 	beq.w	11a06 <_strtod_l+0x49e>
   11d02:	f1b9 0f00 	cmp.w	r9, #0
   11d06:	dd08      	ble.n	11d1a <_strtod_l+0x7b2>
   11d08:	4631      	mov	r1, r6
   11d0a:	464a      	mov	r2, r9
   11d0c:	4620      	mov	r0, r4
   11d0e:	f019 fe18 	bl	2b942 <__lshift>
   11d12:	4606      	mov	r6, r0
   11d14:	2800      	cmp	r0, #0
   11d16:	f43f ae76 	beq.w	11a06 <_strtod_l+0x49e>
   11d1a:	9a07      	ldr	r2, [sp, #28]
   11d1c:	4620      	mov	r0, r4
   11d1e:	991e      	ldr	r1, [sp, #120]	; 0x78
   11d20:	f019 fe8a 	bl	2ba38 <__mdiff>
   11d24:	4605      	mov	r5, r0
   11d26:	2800      	cmp	r0, #0
   11d28:	f43f ae6d 	beq.w	11a06 <_strtod_l+0x49e>
   11d2c:	68c3      	ldr	r3, [r0, #12]
   11d2e:	4631      	mov	r1, r6
   11d30:	930f      	str	r3, [sp, #60]	; 0x3c
   11d32:	2300      	movs	r3, #0
   11d34:	60c3      	str	r3, [r0, #12]
   11d36:	f019 fe63 	bl	2ba00 <__mcmp>
   11d3a:	2800      	cmp	r0, #0
   11d3c:	da64      	bge.n	11e08 <_strtod_l+0x8a0>
   11d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11d40:	ea53 030a 	orrs.w	r3, r3, sl
   11d44:	f040 8086 	bne.w	11e54 <_strtod_l+0x8ec>
   11d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   11d4c:	2b00      	cmp	r3, #0
   11d4e:	f040 8081 	bne.w	11e54 <_strtod_l+0x8ec>
   11d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   11d56:	0d1b      	lsrs	r3, r3, #20
   11d58:	051b      	lsls	r3, r3, #20
   11d5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11d5e:	d979      	bls.n	11e54 <_strtod_l+0x8ec>
   11d60:	696b      	ldr	r3, [r5, #20]
   11d62:	b913      	cbnz	r3, 11d6a <_strtod_l+0x802>
   11d64:	692b      	ldr	r3, [r5, #16]
   11d66:	2b01      	cmp	r3, #1
   11d68:	dd74      	ble.n	11e54 <_strtod_l+0x8ec>
   11d6a:	4629      	mov	r1, r5
   11d6c:	2201      	movs	r2, #1
   11d6e:	4620      	mov	r0, r4
   11d70:	f019 fde7 	bl	2b942 <__lshift>
   11d74:	4631      	mov	r1, r6
   11d76:	4605      	mov	r5, r0
   11d78:	f019 fe42 	bl	2ba00 <__mcmp>
   11d7c:	2800      	cmp	r0, #0
   11d7e:	dd69      	ble.n	11e54 <_strtod_l+0x8ec>
   11d80:	9904      	ldr	r1, [sp, #16]
   11d82:	465b      	mov	r3, fp
   11d84:	4a54      	ldr	r2, [pc, #336]	; (11ed8 <_strtod_l+0x970>)
   11d86:	2900      	cmp	r1, #0
   11d88:	f000 8084 	beq.w	11e94 <_strtod_l+0x92c>
   11d8c:	ea02 010b 	and.w	r1, r2, fp
   11d90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   11d94:	dc7e      	bgt.n	11e94 <_strtod_l+0x92c>
   11d96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   11d9a:	f77f aea9 	ble.w	11af0 <_strtod_l+0x588>
   11d9e:	2300      	movs	r3, #0
   11da0:	4a4e      	ldr	r2, [pc, #312]	; (11edc <_strtod_l+0x974>)
   11da2:	4650      	mov	r0, sl
   11da4:	4659      	mov	r1, fp
   11da6:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   11daa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   11dae:	f7fe fc03 	bl	105b8 <__aeabi_dmul>
   11db2:	460b      	mov	r3, r1
   11db4:	4682      	mov	sl, r0
   11db6:	468b      	mov	fp, r1
   11db8:	4303      	orrs	r3, r0
   11dba:	bf04      	itt	eq
   11dbc:	2322      	moveq	r3, #34	; 0x22
   11dbe:	6023      	streq	r3, [r4, #0]
   11dc0:	e62b      	b.n	11a1a <_strtod_l+0x4b2>
   11dc2:	f04f 32ff 	mov.w	r2, #4294967295
   11dc6:	fa02 f303 	lsl.w	r3, r2, r3
   11dca:	ea03 0a0a 	and.w	sl, r3, sl
   11dce:	e6df      	b.n	11b90 <_strtod_l+0x628>
   11dd0:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   11dd4:	9111      	str	r1, [sp, #68]	; 0x44
   11dd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   11dda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   11dde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   11de2:	fa01 f308 	lsl.w	r3, r1, r8
   11de6:	930c      	str	r3, [sp, #48]	; 0x30
   11de8:	e742      	b.n	11c70 <_strtod_l+0x708>
   11dea:	2300      	movs	r3, #0
   11dec:	930c      	str	r3, [sp, #48]	; 0x30
   11dee:	2301      	movs	r3, #1
   11df0:	9311      	str	r3, [sp, #68]	; 0x44
   11df2:	e73d      	b.n	11c70 <_strtod_l+0x708>
   11df4:	4642      	mov	r2, r8
   11df6:	991e      	ldr	r1, [sp, #120]	; 0x78
   11df8:	4620      	mov	r0, r4
   11dfa:	f019 fda2 	bl	2b942 <__lshift>
   11dfe:	901e      	str	r0, [sp, #120]	; 0x78
   11e00:	2800      	cmp	r0, #0
   11e02:	f47f af67 	bne.w	11cd4 <_strtod_l+0x76c>
   11e06:	e5fe      	b.n	11a06 <_strtod_l+0x49e>
   11e08:	465f      	mov	r7, fp
   11e0a:	d16f      	bne.n	11eec <_strtod_l+0x984>
   11e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11e0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   11e12:	b342      	cbz	r2, 11e66 <_strtod_l+0x8fe>
   11e14:	4a32      	ldr	r2, [pc, #200]	; (11ee0 <_strtod_l+0x978>)
   11e16:	4293      	cmp	r3, r2
   11e18:	d128      	bne.n	11e6c <_strtod_l+0x904>
   11e1a:	9b04      	ldr	r3, [sp, #16]
   11e1c:	4650      	mov	r0, sl
   11e1e:	b1eb      	cbz	r3, 11e5c <_strtod_l+0x8f4>
   11e20:	4a2d      	ldr	r2, [pc, #180]	; (11ed8 <_strtod_l+0x970>)
   11e22:	f04f 31ff 	mov.w	r1, #4294967295
   11e26:	403a      	ands	r2, r7
   11e28:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   11e2c:	d819      	bhi.n	11e62 <_strtod_l+0x8fa>
   11e2e:	0d12      	lsrs	r2, r2, #20
   11e30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   11e34:	fa01 f303 	lsl.w	r3, r1, r3
   11e38:	4298      	cmp	r0, r3
   11e3a:	d117      	bne.n	11e6c <_strtod_l+0x904>
   11e3c:	4b29      	ldr	r3, [pc, #164]	; (11ee4 <_strtod_l+0x97c>)
   11e3e:	429f      	cmp	r7, r3
   11e40:	d102      	bne.n	11e48 <_strtod_l+0x8e0>
   11e42:	3001      	adds	r0, #1
   11e44:	f43f addf 	beq.w	11a06 <_strtod_l+0x49e>
   11e48:	4b23      	ldr	r3, [pc, #140]	; (11ed8 <_strtod_l+0x970>)
   11e4a:	f04f 0a00 	mov.w	sl, #0
   11e4e:	403b      	ands	r3, r7
   11e50:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   11e54:	9b04      	ldr	r3, [sp, #16]
   11e56:	2b00      	cmp	r3, #0
   11e58:	d1a1      	bne.n	11d9e <_strtod_l+0x836>
   11e5a:	e5de      	b.n	11a1a <_strtod_l+0x4b2>
   11e5c:	f04f 33ff 	mov.w	r3, #4294967295
   11e60:	e7ea      	b.n	11e38 <_strtod_l+0x8d0>
   11e62:	460b      	mov	r3, r1
   11e64:	e7e8      	b.n	11e38 <_strtod_l+0x8d0>
   11e66:	ea53 030a 	orrs.w	r3, r3, sl
   11e6a:	d089      	beq.n	11d80 <_strtod_l+0x818>
   11e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11e6e:	b1db      	cbz	r3, 11ea8 <_strtod_l+0x940>
   11e70:	423b      	tst	r3, r7
   11e72:	d0ef      	beq.n	11e54 <_strtod_l+0x8ec>
   11e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11e76:	4650      	mov	r0, sl
   11e78:	9a04      	ldr	r2, [sp, #16]
   11e7a:	4659      	mov	r1, fp
   11e7c:	b1c3      	cbz	r3, 11eb0 <_strtod_l+0x948>
   11e7e:	f019 f98f 	bl	2b1a0 <sulp>
   11e82:	4602      	mov	r2, r0
   11e84:	460b      	mov	r3, r1
   11e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11e8a:	f7fe f9df 	bl	1024c <__adddf3>
   11e8e:	4682      	mov	sl, r0
   11e90:	468b      	mov	fp, r1
   11e92:	e7df      	b.n	11e54 <_strtod_l+0x8ec>
   11e94:	4013      	ands	r3, r2
   11e96:	f04f 3aff 	mov.w	sl, #4294967295
   11e9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11e9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   11ea2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   11ea6:	e7d5      	b.n	11e54 <_strtod_l+0x8ec>
   11ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11eaa:	ea13 0f0a 	tst.w	r3, sl
   11eae:	e7e0      	b.n	11e72 <_strtod_l+0x90a>
   11eb0:	f019 f976 	bl	2b1a0 <sulp>
   11eb4:	4602      	mov	r2, r0
   11eb6:	460b      	mov	r3, r1
   11eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11ebc:	f7fe f9c4 	bl	10248 <__aeabi_dsub>
   11ec0:	2200      	movs	r2, #0
   11ec2:	2300      	movs	r3, #0
   11ec4:	4682      	mov	sl, r0
   11ec6:	468b      	mov	fp, r1
   11ec8:	f7fe fdde 	bl	10a88 <__aeabi_dcmpeq>
   11ecc:	2800      	cmp	r0, #0
   11ece:	d0c1      	beq.n	11e54 <_strtod_l+0x8ec>
   11ed0:	e60e      	b.n	11af0 <_strtod_l+0x588>
   11ed2:	bf00      	nop
   11ed4:	fffffc02 	.word	0xfffffc02
   11ed8:	7ff00000 	.word	0x7ff00000
   11edc:	39500000 	.word	0x39500000
   11ee0:	000fffff 	.word	0x000fffff
   11ee4:	7fefffff 	.word	0x7fefffff
   11ee8:	0002c4a8 	.word	0x0002c4a8
   11eec:	4631      	mov	r1, r6
   11eee:	4628      	mov	r0, r5
   11ef0:	f019 fe6f 	bl	2bbd2 <__ratio>
   11ef4:	2200      	movs	r2, #0
   11ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11efa:	ee10 0a10 	vmov	r0, s0
   11efe:	ec59 8b10 	vmov	r8, r9, d0
   11f02:	4649      	mov	r1, r9
   11f04:	f7fe fdd4 	bl	10ab0 <__aeabi_dcmple>
   11f08:	2800      	cmp	r0, #0
   11f0a:	d07c      	beq.n	12006 <_strtod_l+0xa9e>
   11f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11f0e:	2b00      	cmp	r3, #0
   11f10:	d04c      	beq.n	11fac <_strtod_l+0xa44>
   11f12:	2200      	movs	r2, #0
   11f14:	4b94      	ldr	r3, [pc, #592]	; (12168 <_strtod_l+0xc00>)
   11f16:	f04f 0800 	mov.w	r8, #0
   11f1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 12168 <_strtod_l+0xc00>
   11f1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11f22:	4b92      	ldr	r3, [pc, #584]	; (1216c <_strtod_l+0xc04>)
   11f24:	403b      	ands	r3, r7
   11f26:	9311      	str	r3, [sp, #68]	; 0x44
   11f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11f2a:	4b91      	ldr	r3, [pc, #580]	; (12170 <_strtod_l+0xc08>)
   11f2c:	429a      	cmp	r2, r3
   11f2e:	f040 80b2 	bne.w	12096 <_strtod_l+0xb2e>
   11f32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   11f36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11f3e:	ec4b ab10 	vmov	d0, sl, fp
   11f42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   11f46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   11f4a:	f013 fb53 	bl	255f4 <__ulp>
   11f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11f52:	ec53 2b10 	vmov	r2, r3, d0
   11f56:	f7fe fb2f 	bl	105b8 <__aeabi_dmul>
   11f5a:	4652      	mov	r2, sl
   11f5c:	465b      	mov	r3, fp
   11f5e:	f7fe f975 	bl	1024c <__adddf3>
   11f62:	460b      	mov	r3, r1
   11f64:	4981      	ldr	r1, [pc, #516]	; (1216c <_strtod_l+0xc04>)
   11f66:	4682      	mov	sl, r0
   11f68:	4a82      	ldr	r2, [pc, #520]	; (12174 <_strtod_l+0xc0c>)
   11f6a:	4019      	ands	r1, r3
   11f6c:	4291      	cmp	r1, r2
   11f6e:	d95e      	bls.n	1202e <_strtod_l+0xac6>
   11f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   11f76:	4293      	cmp	r3, r2
   11f78:	d103      	bne.n	11f82 <_strtod_l+0xa1a>
   11f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f7c:	3301      	adds	r3, #1
   11f7e:	f43f ad42 	beq.w	11a06 <_strtod_l+0x49e>
   11f82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 12180 <_strtod_l+0xc18>
   11f86:	f04f 3aff 	mov.w	sl, #4294967295
   11f8a:	991e      	ldr	r1, [sp, #120]	; 0x78
   11f8c:	4620      	mov	r0, r4
   11f8e:	f019 fb50 	bl	2b632 <_Bfree>
   11f92:	9907      	ldr	r1, [sp, #28]
   11f94:	4620      	mov	r0, r4
   11f96:	f019 fb4c 	bl	2b632 <_Bfree>
   11f9a:	4631      	mov	r1, r6
   11f9c:	4620      	mov	r0, r4
   11f9e:	f019 fb48 	bl	2b632 <_Bfree>
   11fa2:	4629      	mov	r1, r5
   11fa4:	4620      	mov	r0, r4
   11fa6:	f019 fb44 	bl	2b632 <_Bfree>
   11faa:	e613      	b.n	11bd4 <_strtod_l+0x66c>
   11fac:	f1ba 0f00 	cmp.w	sl, #0
   11fb0:	d11b      	bne.n	11fea <_strtod_l+0xa82>
   11fb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   11fb6:	b9f3      	cbnz	r3, 11ff6 <_strtod_l+0xa8e>
   11fb8:	2200      	movs	r2, #0
   11fba:	4b6b      	ldr	r3, [pc, #428]	; (12168 <_strtod_l+0xc00>)
   11fbc:	4640      	mov	r0, r8
   11fbe:	4649      	mov	r1, r9
   11fc0:	f7fe fd6c 	bl	10a9c <__aeabi_dcmplt>
   11fc4:	b9d0      	cbnz	r0, 11ffc <_strtod_l+0xa94>
   11fc6:	4640      	mov	r0, r8
   11fc8:	4649      	mov	r1, r9
   11fca:	2200      	movs	r2, #0
   11fcc:	4b6a      	ldr	r3, [pc, #424]	; (12178 <_strtod_l+0xc10>)
   11fce:	f7fe faf3 	bl	105b8 <__aeabi_dmul>
   11fd2:	4680      	mov	r8, r0
   11fd4:	4689      	mov	r9, r1
   11fd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   11fda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   11fde:	931b      	str	r3, [sp, #108]	; 0x6c
   11fe0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   11fe4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11fe8:	e79b      	b.n	11f22 <_strtod_l+0x9ba>
   11fea:	f1ba 0f01 	cmp.w	sl, #1
   11fee:	d102      	bne.n	11ff6 <_strtod_l+0xa8e>
   11ff0:	2f00      	cmp	r7, #0
   11ff2:	f43f ad7d 	beq.w	11af0 <_strtod_l+0x588>
   11ff6:	2200      	movs	r2, #0
   11ff8:	4b60      	ldr	r3, [pc, #384]	; (1217c <_strtod_l+0xc14>)
   11ffa:	e78c      	b.n	11f16 <_strtod_l+0x9ae>
   11ffc:	f04f 0800 	mov.w	r8, #0
   12000:	f8df 9174 	ldr.w	r9, [pc, #372]	; 12178 <_strtod_l+0xc10>
   12004:	e7e7      	b.n	11fd6 <_strtod_l+0xa6e>
   12006:	4b5c      	ldr	r3, [pc, #368]	; (12178 <_strtod_l+0xc10>)
   12008:	4640      	mov	r0, r8
   1200a:	4649      	mov	r1, r9
   1200c:	2200      	movs	r2, #0
   1200e:	f7fe fad3 	bl	105b8 <__aeabi_dmul>
   12012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12014:	4680      	mov	r8, r0
   12016:	4689      	mov	r9, r1
   12018:	b933      	cbnz	r3, 12028 <_strtod_l+0xac0>
   1201a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1201e:	9012      	str	r0, [sp, #72]	; 0x48
   12020:	9313      	str	r3, [sp, #76]	; 0x4c
   12022:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   12026:	e7dd      	b.n	11fe4 <_strtod_l+0xa7c>
   12028:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   1202c:	e7f9      	b.n	12022 <_strtod_l+0xaba>
   1202e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   12032:	9b04      	ldr	r3, [sp, #16]
   12034:	2b00      	cmp	r3, #0
   12036:	d1a8      	bne.n	11f8a <_strtod_l+0xa22>
   12038:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1203c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1203e:	0d1b      	lsrs	r3, r3, #20
   12040:	051b      	lsls	r3, r3, #20
   12042:	429a      	cmp	r2, r3
   12044:	d1a1      	bne.n	11f8a <_strtod_l+0xa22>
   12046:	4640      	mov	r0, r8
   12048:	4649      	mov	r1, r9
   1204a:	f7fe fe15 	bl	10c78 <__aeabi_d2lz>
   1204e:	f7fe fa85 	bl	1055c <__aeabi_l2d>
   12052:	4602      	mov	r2, r0
   12054:	460b      	mov	r3, r1
   12056:	4640      	mov	r0, r8
   12058:	4649      	mov	r1, r9
   1205a:	f7fe f8f5 	bl	10248 <__aeabi_dsub>
   1205e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   12062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12064:	4680      	mov	r8, r0
   12066:	ea43 030a 	orr.w	r3, r3, sl
   1206a:	4689      	mov	r9, r1
   1206c:	4313      	orrs	r3, r2
   1206e:	d053      	beq.n	12118 <_strtod_l+0xbb0>
   12070:	a335      	add	r3, pc, #212	; (adr r3, 12148 <_strtod_l+0xbe0>)
   12072:	e9d3 2300 	ldrd	r2, r3, [r3]
   12076:	f7fe fd11 	bl	10a9c <__aeabi_dcmplt>
   1207a:	2800      	cmp	r0, #0
   1207c:	f47f accd 	bne.w	11a1a <_strtod_l+0x4b2>
   12080:	4640      	mov	r0, r8
   12082:	4649      	mov	r1, r9
   12084:	a332      	add	r3, pc, #200	; (adr r3, 12150 <_strtod_l+0xbe8>)
   12086:	e9d3 2300 	ldrd	r2, r3, [r3]
   1208a:	f7fe fd25 	bl	10ad8 <__aeabi_dcmpgt>
   1208e:	2800      	cmp	r0, #0
   12090:	f43f af7b 	beq.w	11f8a <_strtod_l+0xa22>
   12094:	e4c1      	b.n	11a1a <_strtod_l+0x4b2>
   12096:	9b04      	ldr	r3, [sp, #16]
   12098:	b333      	cbz	r3, 120e8 <_strtod_l+0xb80>
   1209a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1209c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   120a0:	d822      	bhi.n	120e8 <_strtod_l+0xb80>
   120a2:	4640      	mov	r0, r8
   120a4:	4649      	mov	r1, r9
   120a6:	a32c      	add	r3, pc, #176	; (adr r3, 12158 <_strtod_l+0xbf0>)
   120a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120ac:	f7fe fd00 	bl	10ab0 <__aeabi_dcmple>
   120b0:	b1a0      	cbz	r0, 120dc <_strtod_l+0xb74>
   120b2:	4649      	mov	r1, r9
   120b4:	4640      	mov	r0, r8
   120b6:	f7fe fd57 	bl	10b68 <__aeabi_d2uiz>
   120ba:	2801      	cmp	r0, #1
   120bc:	bf38      	it	cc
   120be:	2001      	movcc	r0, #1
   120c0:	f7fe fa00 	bl	104c4 <__aeabi_ui2d>
   120c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120c6:	4680      	mov	r8, r0
   120c8:	4689      	mov	r9, r1
   120ca:	bb13      	cbnz	r3, 12112 <_strtod_l+0xbaa>
   120cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   120d0:	9014      	str	r0, [sp, #80]	; 0x50
   120d2:	9315      	str	r3, [sp, #84]	; 0x54
   120d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   120d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   120dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120de:	9a11      	ldr	r2, [sp, #68]	; 0x44
   120e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   120e4:	1a9b      	subs	r3, r3, r2
   120e6:	930d      	str	r3, [sp, #52]	; 0x34
   120e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   120ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   120f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   120f4:	f013 fa7e 	bl	255f4 <__ulp>
   120f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   120fc:	ec53 2b10 	vmov	r2, r3, d0
   12100:	f7fe fa5a 	bl	105b8 <__aeabi_dmul>
   12104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   12108:	f7fe f8a0 	bl	1024c <__adddf3>
   1210c:	4682      	mov	sl, r0
   1210e:	468b      	mov	fp, r1
   12110:	e78f      	b.n	12032 <_strtod_l+0xaca>
   12112:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   12116:	e7dd      	b.n	120d4 <_strtod_l+0xb6c>
   12118:	a311      	add	r3, pc, #68	; (adr r3, 12160 <_strtod_l+0xbf8>)
   1211a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1211e:	f7fe fcbd 	bl	10a9c <__aeabi_dcmplt>
   12122:	e7b4      	b.n	1208e <_strtod_l+0xb26>
   12124:	2300      	movs	r3, #0
   12126:	930e      	str	r3, [sp, #56]	; 0x38
   12128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1212a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1212c:	6013      	str	r3, [r2, #0]
   1212e:	f7ff ba61 	b.w	115f4 <_strtod_l+0x8c>
   12132:	2b65      	cmp	r3, #101	; 0x65
   12134:	f43f ab5a 	beq.w	117ec <_strtod_l+0x284>
   12138:	2b45      	cmp	r3, #69	; 0x45
   1213a:	f43f ab57 	beq.w	117ec <_strtod_l+0x284>
   1213e:	2201      	movs	r2, #1
   12140:	f7ff bb90 	b.w	11864 <_strtod_l+0x2fc>
   12144:	f3af 8000 	nop.w
   12148:	94a03595 	.word	0x94a03595
   1214c:	3fdfffff 	.word	0x3fdfffff
   12150:	35afe535 	.word	0x35afe535
   12154:	3fe00000 	.word	0x3fe00000
   12158:	ffc00000 	.word	0xffc00000
   1215c:	41dfffff 	.word	0x41dfffff
   12160:	94a03595 	.word	0x94a03595
   12164:	3fcfffff 	.word	0x3fcfffff
   12168:	3ff00000 	.word	0x3ff00000
   1216c:	7ff00000 	.word	0x7ff00000
   12170:	7fe00000 	.word	0x7fe00000
   12174:	7c9fffff 	.word	0x7c9fffff
   12178:	3fe00000 	.word	0x3fe00000
   1217c:	bff00000 	.word	0xbff00000
   12180:	7fefffff 	.word	0x7fefffff
   12184:	00000000 	.word	0x00000000

00012188 <_dtoa_r>:
   12188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1218c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1218e:	4604      	mov	r4, r0
   12190:	ed2d 8b02 	vpush	{d8}
   12194:	b095      	sub	sp, #84	; 0x54
   12196:	ec57 6b10 	vmov	r6, r7, d0
   1219a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1219e:	9105      	str	r1, [sp, #20]
   121a0:	9209      	str	r2, [sp, #36]	; 0x24
   121a2:	930f      	str	r3, [sp, #60]	; 0x3c
   121a4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   121a8:	b93d      	cbnz	r5, 121ba <_dtoa_r+0x32>
   121aa:	2010      	movs	r0, #16
   121ac:	f012 f914 	bl	243d8 <malloc>
   121b0:	6260      	str	r0, [r4, #36]	; 0x24
   121b2:	6005      	str	r5, [r0, #0]
   121b4:	60c5      	str	r5, [r0, #12]
   121b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
   121ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   121bc:	6819      	ldr	r1, [r3, #0]
   121be:	b151      	cbz	r1, 121d6 <_dtoa_r+0x4e>
   121c0:	685a      	ldr	r2, [r3, #4]
   121c2:	2301      	movs	r3, #1
   121c4:	4620      	mov	r0, r4
   121c6:	4093      	lsls	r3, r2
   121c8:	604a      	str	r2, [r1, #4]
   121ca:	608b      	str	r3, [r1, #8]
   121cc:	f019 fa31 	bl	2b632 <_Bfree>
   121d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   121d2:	2200      	movs	r2, #0
   121d4:	601a      	str	r2, [r3, #0]
   121d6:	1e3b      	subs	r3, r7, #0
   121d8:	bfb7      	itett	lt
   121da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   121de:	2300      	movge	r3, #0
   121e0:	2201      	movlt	r2, #1
   121e2:	9303      	strlt	r3, [sp, #12]
   121e4:	bfa8      	it	ge
   121e6:	f8c8 3000 	strge.w	r3, [r8]
   121ea:	f8dd 900c 	ldr.w	r9, [sp, #12]
   121ee:	4bb6      	ldr	r3, [pc, #728]	; (124c8 <_dtoa_r+0x340>)
   121f0:	bfb8      	it	lt
   121f2:	f8c8 2000 	strlt.w	r2, [r8]
   121f6:	ea33 0309 	bics.w	r3, r3, r9
   121fa:	d11b      	bne.n	12234 <_dtoa_r+0xac>
   121fc:	f242 730f 	movw	r3, #9999	; 0x270f
   12200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12202:	6013      	str	r3, [r2, #0]
   12204:	f3c9 0313 	ubfx	r3, r9, #0, #20
   12208:	4333      	orrs	r3, r6
   1220a:	f000 8572 	beq.w	12cf2 <_dtoa_r+0xb6a>
   1220e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   12210:	b963      	cbnz	r3, 1222c <_dtoa_r+0xa4>
   12212:	4bae      	ldr	r3, [pc, #696]	; (124cc <_dtoa_r+0x344>)
   12214:	e025      	b.n	12262 <_dtoa_r+0xda>
   12216:	4bae      	ldr	r3, [pc, #696]	; (124d0 <_dtoa_r+0x348>)
   12218:	9300      	str	r3, [sp, #0]
   1221a:	3308      	adds	r3, #8
   1221c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1221e:	6013      	str	r3, [r2, #0]
   12220:	9800      	ldr	r0, [sp, #0]
   12222:	b015      	add	sp, #84	; 0x54
   12224:	ecbd 8b02 	vpop	{d8}
   12228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1222c:	4ba7      	ldr	r3, [pc, #668]	; (124cc <_dtoa_r+0x344>)
   1222e:	9300      	str	r3, [sp, #0]
   12230:	3303      	adds	r3, #3
   12232:	e7f3      	b.n	1221c <_dtoa_r+0x94>
   12234:	ed9d 7b02 	vldr	d7, [sp, #8]
   12238:	2200      	movs	r2, #0
   1223a:	2300      	movs	r3, #0
   1223c:	ec51 0b17 	vmov	r0, r1, d7
   12240:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   12244:	f7fe fc20 	bl	10a88 <__aeabi_dcmpeq>
   12248:	4680      	mov	r8, r0
   1224a:	b160      	cbz	r0, 12266 <_dtoa_r+0xde>
   1224c:	2301      	movs	r3, #1
   1224e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12250:	6013      	str	r3, [r2, #0]
   12252:	9b21      	ldr	r3, [sp, #132]	; 0x84
   12254:	2b00      	cmp	r3, #0
   12256:	f000 8549 	beq.w	12cec <_dtoa_r+0xb64>
   1225a:	4b9e      	ldr	r3, [pc, #632]	; (124d4 <_dtoa_r+0x34c>)
   1225c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1225e:	6013      	str	r3, [r2, #0]
   12260:	3b01      	subs	r3, #1
   12262:	9300      	str	r3, [sp, #0]
   12264:	e7dc      	b.n	12220 <_dtoa_r+0x98>
   12266:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1226a:	aa12      	add	r2, sp, #72	; 0x48
   1226c:	a913      	add	r1, sp, #76	; 0x4c
   1226e:	4620      	mov	r0, r4
   12270:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   12274:	f019 fc5d 	bl	2bb32 <__d2b>
   12278:	4682      	mov	sl, r0
   1227a:	2d00      	cmp	r5, #0
   1227c:	d07c      	beq.n	12378 <_dtoa_r+0x1f0>
   1227e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12280:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   12284:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   12288:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1228c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   12290:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   12294:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   12298:	2200      	movs	r2, #0
   1229a:	4b8f      	ldr	r3, [pc, #572]	; (124d8 <_dtoa_r+0x350>)
   1229c:	4630      	mov	r0, r6
   1229e:	4639      	mov	r1, r7
   122a0:	f7fd ffd2 	bl	10248 <__aeabi_dsub>
   122a4:	a382      	add	r3, pc, #520	; (adr r3, 124b0 <_dtoa_r+0x328>)
   122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   122aa:	f7fe f985 	bl	105b8 <__aeabi_dmul>
   122ae:	a382      	add	r3, pc, #520	; (adr r3, 124b8 <_dtoa_r+0x330>)
   122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   122b4:	f7fd ffca 	bl	1024c <__adddf3>
   122b8:	4606      	mov	r6, r0
   122ba:	460f      	mov	r7, r1
   122bc:	4628      	mov	r0, r5
   122be:	f7fe f911 	bl	104e4 <__aeabi_i2d>
   122c2:	a37f      	add	r3, pc, #508	; (adr r3, 124c0 <_dtoa_r+0x338>)
   122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   122c8:	f7fe f976 	bl	105b8 <__aeabi_dmul>
   122cc:	4602      	mov	r2, r0
   122ce:	460b      	mov	r3, r1
   122d0:	4630      	mov	r0, r6
   122d2:	4639      	mov	r1, r7
   122d4:	f7fd ffba 	bl	1024c <__adddf3>
   122d8:	4606      	mov	r6, r0
   122da:	460f      	mov	r7, r1
   122dc:	f7fe fc1c 	bl	10b18 <__aeabi_d2iz>
   122e0:	2200      	movs	r2, #0
   122e2:	4681      	mov	r9, r0
   122e4:	2300      	movs	r3, #0
   122e6:	4630      	mov	r0, r6
   122e8:	4639      	mov	r1, r7
   122ea:	f7fe fbd7 	bl	10a9c <__aeabi_dcmplt>
   122ee:	b148      	cbz	r0, 12304 <_dtoa_r+0x17c>
   122f0:	4648      	mov	r0, r9
   122f2:	f7fe f8f7 	bl	104e4 <__aeabi_i2d>
   122f6:	4632      	mov	r2, r6
   122f8:	463b      	mov	r3, r7
   122fa:	f7fe fbc5 	bl	10a88 <__aeabi_dcmpeq>
   122fe:	b908      	cbnz	r0, 12304 <_dtoa_r+0x17c>
   12300:	f109 39ff 	add.w	r9, r9, #4294967295
   12304:	f1b9 0f16 	cmp.w	r9, #22
   12308:	d855      	bhi.n	123b6 <_dtoa_r+0x22e>
   1230a:	4b74      	ldr	r3, [pc, #464]	; (124dc <_dtoa_r+0x354>)
   1230c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   12310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12314:	e9d3 2300 	ldrd	r2, r3, [r3]
   12318:	f7fe fbc0 	bl	10a9c <__aeabi_dcmplt>
   1231c:	2800      	cmp	r0, #0
   1231e:	d04c      	beq.n	123ba <_dtoa_r+0x232>
   12320:	f109 39ff 	add.w	r9, r9, #4294967295
   12324:	2300      	movs	r3, #0
   12326:	930e      	str	r3, [sp, #56]	; 0x38
   12328:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1232a:	1b5d      	subs	r5, r3, r5
   1232c:	1e6b      	subs	r3, r5, #1
   1232e:	9304      	str	r3, [sp, #16]
   12330:	bf45      	ittet	mi
   12332:	2300      	movmi	r3, #0
   12334:	f1c5 0801 	rsbmi	r8, r5, #1
   12338:	f04f 0800 	movpl.w	r8, #0
   1233c:	9304      	strmi	r3, [sp, #16]
   1233e:	f1b9 0f00 	cmp.w	r9, #0
   12342:	db3c      	blt.n	123be <_dtoa_r+0x236>
   12344:	9b04      	ldr	r3, [sp, #16]
   12346:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1234a:	444b      	add	r3, r9
   1234c:	9304      	str	r3, [sp, #16]
   1234e:	2300      	movs	r3, #0
   12350:	9306      	str	r3, [sp, #24]
   12352:	9b05      	ldr	r3, [sp, #20]
   12354:	2b09      	cmp	r3, #9
   12356:	f200 8099 	bhi.w	1248c <_dtoa_r+0x304>
   1235a:	2b05      	cmp	r3, #5
   1235c:	bfc5      	ittet	gt
   1235e:	3b04      	subgt	r3, #4
   12360:	2500      	movgt	r5, #0
   12362:	2501      	movle	r5, #1
   12364:	9305      	strgt	r3, [sp, #20]
   12366:	9b05      	ldr	r3, [sp, #20]
   12368:	3b02      	subs	r3, #2
   1236a:	2b03      	cmp	r3, #3
   1236c:	f200 809a 	bhi.w	124a4 <_dtoa_r+0x31c>
   12370:	e8df f003 	tbb	[pc, r3]
   12374:	8a7c7e2d 	.word	0x8a7c7e2d
   12378:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   1237c:	441d      	add	r5, r3
   1237e:	f205 4332 	addw	r3, r5, #1074	; 0x432
   12382:	2b20      	cmp	r3, #32
   12384:	bfc6      	itte	gt
   12386:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1238a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1238e:	f1c3 0320 	rsble	r3, r3, #32
   12392:	f105 35ff 	add.w	r5, r5, #4294967295
   12396:	bfc5      	ittet	gt
   12398:	fa09 f303 	lslgt.w	r3, r9, r3
   1239c:	fa26 f000 	lsrgt.w	r0, r6, r0
   123a0:	fa06 f003 	lslle.w	r0, r6, r3
   123a4:	4318      	orrgt	r0, r3
   123a6:	f7fe f88d 	bl	104c4 <__aeabi_ui2d>
   123aa:	2301      	movs	r3, #1
   123ac:	4606      	mov	r6, r0
   123ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   123b2:	9310      	str	r3, [sp, #64]	; 0x40
   123b4:	e770      	b.n	12298 <_dtoa_r+0x110>
   123b6:	2301      	movs	r3, #1
   123b8:	e7b5      	b.n	12326 <_dtoa_r+0x19e>
   123ba:	900e      	str	r0, [sp, #56]	; 0x38
   123bc:	e7b4      	b.n	12328 <_dtoa_r+0x1a0>
   123be:	f1c9 0300 	rsb	r3, r9, #0
   123c2:	eba8 0809 	sub.w	r8, r8, r9
   123c6:	9306      	str	r3, [sp, #24]
   123c8:	2300      	movs	r3, #0
   123ca:	930d      	str	r3, [sp, #52]	; 0x34
   123cc:	e7c1      	b.n	12352 <_dtoa_r+0x1ca>
   123ce:	2300      	movs	r3, #0
   123d0:	9308      	str	r3, [sp, #32]
   123d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123d4:	2b00      	cmp	r3, #0
   123d6:	f300 8085 	bgt.w	124e4 <_dtoa_r+0x35c>
   123da:	f04f 0b01 	mov.w	fp, #1
   123de:	465b      	mov	r3, fp
   123e0:	f8cd b004 	str.w	fp, [sp, #4]
   123e4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   123e8:	2200      	movs	r2, #0
   123ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   123ec:	6072      	str	r2, [r6, #4]
   123ee:	2204      	movs	r2, #4
   123f0:	f102 0014 	add.w	r0, r2, #20
   123f4:	6871      	ldr	r1, [r6, #4]
   123f6:	4298      	cmp	r0, r3
   123f8:	d97a      	bls.n	124f0 <_dtoa_r+0x368>
   123fa:	4620      	mov	r0, r4
   123fc:	f019 f8e5 	bl	2b5ca <_Balloc>
   12400:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12402:	6030      	str	r0, [r6, #0]
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	9300      	str	r3, [sp, #0]
   12408:	9b01      	ldr	r3, [sp, #4]
   1240a:	2b0e      	cmp	r3, #14
   1240c:	f200 80f5 	bhi.w	125fa <_dtoa_r+0x472>
   12410:	2d00      	cmp	r5, #0
   12412:	f000 80f2 	beq.w	125fa <_dtoa_r+0x472>
   12416:	f1b9 0f00 	cmp.w	r9, #0
   1241a:	dd7d      	ble.n	12518 <_dtoa_r+0x390>
   1241c:	f009 030f 	and.w	r3, r9, #15
   12420:	4a2e      	ldr	r2, [pc, #184]	; (124dc <_dtoa_r+0x354>)
   12422:	f419 7f80 	tst.w	r9, #256	; 0x100
   12426:	ea4f 1729 	mov.w	r7, r9, asr #4
   1242a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1242e:	ed93 7b00 	vldr	d7, [r3]
   12432:	eeb0 8a47 	vmov.f32	s16, s14
   12436:	eef0 8a67 	vmov.f32	s17, s15
   1243a:	d05d      	beq.n	124f8 <_dtoa_r+0x370>
   1243c:	4b28      	ldr	r3, [pc, #160]	; (124e0 <_dtoa_r+0x358>)
   1243e:	f007 070f 	and.w	r7, r7, #15
   12442:	2503      	movs	r5, #3
   12444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   12448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1244c:	f7fe f9de 	bl	1080c <__aeabi_ddiv>
   12450:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12454:	4e22      	ldr	r6, [pc, #136]	; (124e0 <_dtoa_r+0x358>)
   12456:	2f00      	cmp	r7, #0
   12458:	d150      	bne.n	124fc <_dtoa_r+0x374>
   1245a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1245e:	ec53 2b18 	vmov	r2, r3, d8
   12462:	f7fe f9d3 	bl	1080c <__aeabi_ddiv>
   12466:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1246a:	e06f      	b.n	1254c <_dtoa_r+0x3c4>
   1246c:	2301      	movs	r3, #1
   1246e:	e7af      	b.n	123d0 <_dtoa_r+0x248>
   12470:	2300      	movs	r3, #0
   12472:	9308      	str	r3, [sp, #32]
   12474:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12476:	eb09 0b03 	add.w	fp, r9, r3
   1247a:	f10b 0301 	add.w	r3, fp, #1
   1247e:	2b01      	cmp	r3, #1
   12480:	9301      	str	r3, [sp, #4]
   12482:	bfb8      	it	lt
   12484:	2301      	movlt	r3, #1
   12486:	e7af      	b.n	123e8 <_dtoa_r+0x260>
   12488:	2301      	movs	r3, #1
   1248a:	e7f2      	b.n	12472 <_dtoa_r+0x2ea>
   1248c:	2501      	movs	r5, #1
   1248e:	2300      	movs	r3, #0
   12490:	9508      	str	r5, [sp, #32]
   12492:	9305      	str	r3, [sp, #20]
   12494:	f04f 3bff 	mov.w	fp, #4294967295
   12498:	2200      	movs	r2, #0
   1249a:	2312      	movs	r3, #18
   1249c:	f8cd b004 	str.w	fp, [sp, #4]
   124a0:	9209      	str	r2, [sp, #36]	; 0x24
   124a2:	e7a1      	b.n	123e8 <_dtoa_r+0x260>
   124a4:	2301      	movs	r3, #1
   124a6:	9308      	str	r3, [sp, #32]
   124a8:	e7f4      	b.n	12494 <_dtoa_r+0x30c>
   124aa:	bf00      	nop
   124ac:	f3af 8000 	nop.w
   124b0:	636f4361 	.word	0x636f4361
   124b4:	3fd287a7 	.word	0x3fd287a7
   124b8:	8b60c8b3 	.word	0x8b60c8b3
   124bc:	3fc68a28 	.word	0x3fc68a28
   124c0:	509f79fb 	.word	0x509f79fb
   124c4:	3fd34413 	.word	0x3fd34413
   124c8:	7ff00000 	.word	0x7ff00000
   124cc:	0003043b 	.word	0x0003043b
   124d0:	00030432 	.word	0x00030432
   124d4:	0002e4f5 	.word	0x0002e4f5
   124d8:	3ff80000 	.word	0x3ff80000
   124dc:	0002c4f8 	.word	0x0002c4f8
   124e0:	0002c4d0 	.word	0x0002c4d0
   124e4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   124e8:	465b      	mov	r3, fp
   124ea:	f8cd b004 	str.w	fp, [sp, #4]
   124ee:	e77b      	b.n	123e8 <_dtoa_r+0x260>
   124f0:	3101      	adds	r1, #1
   124f2:	0052      	lsls	r2, r2, #1
   124f4:	6071      	str	r1, [r6, #4]
   124f6:	e77b      	b.n	123f0 <_dtoa_r+0x268>
   124f8:	2502      	movs	r5, #2
   124fa:	e7ab      	b.n	12454 <_dtoa_r+0x2cc>
   124fc:	07f9      	lsls	r1, r7, #31
   124fe:	d508      	bpl.n	12512 <_dtoa_r+0x38a>
   12500:	3501      	adds	r5, #1
   12502:	ec51 0b18 	vmov	r0, r1, d8
   12506:	e9d6 2300 	ldrd	r2, r3, [r6]
   1250a:	f7fe f855 	bl	105b8 <__aeabi_dmul>
   1250e:	ec41 0b18 	vmov	d8, r0, r1
   12512:	107f      	asrs	r7, r7, #1
   12514:	3608      	adds	r6, #8
   12516:	e79e      	b.n	12456 <_dtoa_r+0x2ce>
   12518:	f000 80ab 	beq.w	12672 <_dtoa_r+0x4ea>
   1251c:	f1c9 0600 	rsb	r6, r9, #0
   12520:	4baa      	ldr	r3, [pc, #680]	; (127cc <_dtoa_r+0x644>)
   12522:	4fab      	ldr	r7, [pc, #684]	; (127d0 <_dtoa_r+0x648>)
   12524:	2502      	movs	r5, #2
   12526:	f006 020f 	and.w	r2, r6, #15
   1252a:	1136      	asrs	r6, r6, #4
   1252c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12534:	e9d3 2300 	ldrd	r2, r3, [r3]
   12538:	f7fe f83e 	bl	105b8 <__aeabi_dmul>
   1253c:	2300      	movs	r3, #0
   1253e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12542:	2e00      	cmp	r6, #0
   12544:	f040 808a 	bne.w	1265c <_dtoa_r+0x4d4>
   12548:	2b00      	cmp	r3, #0
   1254a:	d18c      	bne.n	12466 <_dtoa_r+0x2de>
   1254c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1254e:	2b00      	cmp	r3, #0
   12550:	f000 8091 	beq.w	12676 <_dtoa_r+0x4ee>
   12554:	2200      	movs	r2, #0
   12556:	4b9f      	ldr	r3, [pc, #636]	; (127d4 <_dtoa_r+0x64c>)
   12558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1255c:	4630      	mov	r0, r6
   1255e:	4639      	mov	r1, r7
   12560:	f7fe fa9c 	bl	10a9c <__aeabi_dcmplt>
   12564:	2800      	cmp	r0, #0
   12566:	f000 8086 	beq.w	12676 <_dtoa_r+0x4ee>
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	2b00      	cmp	r3, #0
   1256e:	f000 8082 	beq.w	12676 <_dtoa_r+0x4ee>
   12572:	f1bb 0f00 	cmp.w	fp, #0
   12576:	dd3c      	ble.n	125f2 <_dtoa_r+0x46a>
   12578:	f109 33ff 	add.w	r3, r9, #4294967295
   1257c:	3501      	adds	r5, #1
   1257e:	2200      	movs	r2, #0
   12580:	4630      	mov	r0, r6
   12582:	9307      	str	r3, [sp, #28]
   12584:	4639      	mov	r1, r7
   12586:	4b94      	ldr	r3, [pc, #592]	; (127d8 <_dtoa_r+0x650>)
   12588:	f7fe f816 	bl	105b8 <__aeabi_dmul>
   1258c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   12590:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12594:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12598:	4628      	mov	r0, r5
   1259a:	f7fd ffa3 	bl	104e4 <__aeabi_i2d>
   1259e:	4632      	mov	r2, r6
   125a0:	463b      	mov	r3, r7
   125a2:	f7fe f809 	bl	105b8 <__aeabi_dmul>
   125a6:	4b8d      	ldr	r3, [pc, #564]	; (127dc <_dtoa_r+0x654>)
   125a8:	2200      	movs	r2, #0
   125aa:	f7fd fe4f 	bl	1024c <__adddf3>
   125ae:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   125b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   125b6:	9303      	str	r3, [sp, #12]
   125b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   125ba:	2b00      	cmp	r3, #0
   125bc:	d160      	bne.n	12680 <_dtoa_r+0x4f8>
   125be:	2200      	movs	r2, #0
   125c0:	4b87      	ldr	r3, [pc, #540]	; (127e0 <_dtoa_r+0x658>)
   125c2:	4630      	mov	r0, r6
   125c4:	4639      	mov	r1, r7
   125c6:	f7fd fe3f 	bl	10248 <__aeabi_dsub>
   125ca:	4606      	mov	r6, r0
   125cc:	460f      	mov	r7, r1
   125ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   125d2:	f7fe fa81 	bl	10ad8 <__aeabi_dcmpgt>
   125d6:	2800      	cmp	r0, #0
   125d8:	f040 8297 	bne.w	12b0a <_dtoa_r+0x982>
   125dc:	4630      	mov	r0, r6
   125de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   125e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   125e6:	4639      	mov	r1, r7
   125e8:	f7fe fa58 	bl	10a9c <__aeabi_dcmplt>
   125ec:	2800      	cmp	r0, #0
   125ee:	f040 8289 	bne.w	12b04 <_dtoa_r+0x97c>
   125f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   125f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   125fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   125fc:	2b00      	cmp	r3, #0
   125fe:	f2c0 815b 	blt.w	128b8 <_dtoa_r+0x730>
   12602:	f1b9 0f0e 	cmp.w	r9, #14
   12606:	f300 8157 	bgt.w	128b8 <_dtoa_r+0x730>
   1260a:	4b70      	ldr	r3, [pc, #448]	; (127cc <_dtoa_r+0x644>)
   1260c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   12610:	ed93 7b00 	vldr	d7, [r3]
   12614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12616:	2b00      	cmp	r3, #0
   12618:	eeb0 8a47 	vmov.f32	s16, s14
   1261c:	eef0 8a67 	vmov.f32	s17, s15
   12620:	f280 80e2 	bge.w	127e8 <_dtoa_r+0x660>
   12624:	9b01      	ldr	r3, [sp, #4]
   12626:	2b00      	cmp	r3, #0
   12628:	f300 80de 	bgt.w	127e8 <_dtoa_r+0x660>
   1262c:	f040 826a 	bne.w	12b04 <_dtoa_r+0x97c>
   12630:	2200      	movs	r2, #0
   12632:	4b6b      	ldr	r3, [pc, #428]	; (127e0 <_dtoa_r+0x658>)
   12634:	ec51 0b17 	vmov	r0, r1, d7
   12638:	f7fd ffbe 	bl	105b8 <__aeabi_dmul>
   1263c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   12640:	f7fe fa40 	bl	10ac4 <__aeabi_dcmpge>
   12644:	9e01      	ldr	r6, [sp, #4]
   12646:	4637      	mov	r7, r6
   12648:	2800      	cmp	r0, #0
   1264a:	f040 8240 	bne.w	12ace <_dtoa_r+0x946>
   1264e:	9d00      	ldr	r5, [sp, #0]
   12650:	2331      	movs	r3, #49	; 0x31
   12652:	f109 0901 	add.w	r9, r9, #1
   12656:	f805 3b01 	strb.w	r3, [r5], #1
   1265a:	e23c      	b.n	12ad6 <_dtoa_r+0x94e>
   1265c:	07f2      	lsls	r2, r6, #31
   1265e:	d505      	bpl.n	1266c <_dtoa_r+0x4e4>
   12660:	3501      	adds	r5, #1
   12662:	e9d7 2300 	ldrd	r2, r3, [r7]
   12666:	f7fd ffa7 	bl	105b8 <__aeabi_dmul>
   1266a:	2301      	movs	r3, #1
   1266c:	1076      	asrs	r6, r6, #1
   1266e:	3708      	adds	r7, #8
   12670:	e767      	b.n	12542 <_dtoa_r+0x3ba>
   12672:	2502      	movs	r5, #2
   12674:	e76a      	b.n	1254c <_dtoa_r+0x3c4>
   12676:	9b01      	ldr	r3, [sp, #4]
   12678:	f8cd 901c 	str.w	r9, [sp, #28]
   1267c:	930c      	str	r3, [sp, #48]	; 0x30
   1267e:	e789      	b.n	12594 <_dtoa_r+0x40c>
   12680:	9900      	ldr	r1, [sp, #0]
   12682:	980c      	ldr	r0, [sp, #48]	; 0x30
   12684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12686:	4401      	add	r1, r0
   12688:	4b50      	ldr	r3, [pc, #320]	; (127cc <_dtoa_r+0x644>)
   1268a:	ed9d 7b02 	vldr	d7, [sp, #8]
   1268e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12692:	9102      	str	r1, [sp, #8]
   12694:	9908      	ldr	r1, [sp, #32]
   12696:	eeb0 8a47 	vmov.f32	s16, s14
   1269a:	eef0 8a67 	vmov.f32	s17, s15
   1269e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   126a2:	2900      	cmp	r1, #0
   126a4:	d045      	beq.n	12732 <_dtoa_r+0x5aa>
   126a6:	2000      	movs	r0, #0
   126a8:	494e      	ldr	r1, [pc, #312]	; (127e4 <_dtoa_r+0x65c>)
   126aa:	f7fe f8af 	bl	1080c <__aeabi_ddiv>
   126ae:	ec53 2b18 	vmov	r2, r3, d8
   126b2:	f7fd fdc9 	bl	10248 <__aeabi_dsub>
   126b6:	9d00      	ldr	r5, [sp, #0]
   126b8:	ec41 0b18 	vmov	d8, r0, r1
   126bc:	4639      	mov	r1, r7
   126be:	4630      	mov	r0, r6
   126c0:	f7fe fa2a 	bl	10b18 <__aeabi_d2iz>
   126c4:	900c      	str	r0, [sp, #48]	; 0x30
   126c6:	f7fd ff0d 	bl	104e4 <__aeabi_i2d>
   126ca:	4602      	mov	r2, r0
   126cc:	460b      	mov	r3, r1
   126ce:	4630      	mov	r0, r6
   126d0:	4639      	mov	r1, r7
   126d2:	f7fd fdb9 	bl	10248 <__aeabi_dsub>
   126d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126d8:	4606      	mov	r6, r0
   126da:	460f      	mov	r7, r1
   126dc:	3330      	adds	r3, #48	; 0x30
   126de:	f805 3b01 	strb.w	r3, [r5], #1
   126e2:	ec53 2b18 	vmov	r2, r3, d8
   126e6:	f7fe f9d9 	bl	10a9c <__aeabi_dcmplt>
   126ea:	2800      	cmp	r0, #0
   126ec:	d164      	bne.n	127b8 <_dtoa_r+0x630>
   126ee:	4632      	mov	r2, r6
   126f0:	463b      	mov	r3, r7
   126f2:	2000      	movs	r0, #0
   126f4:	4937      	ldr	r1, [pc, #220]	; (127d4 <_dtoa_r+0x64c>)
   126f6:	f7fd fda7 	bl	10248 <__aeabi_dsub>
   126fa:	ec53 2b18 	vmov	r2, r3, d8
   126fe:	f7fe f9cd 	bl	10a9c <__aeabi_dcmplt>
   12702:	2800      	cmp	r0, #0
   12704:	f040 80b8 	bne.w	12878 <_dtoa_r+0x6f0>
   12708:	9b02      	ldr	r3, [sp, #8]
   1270a:	429d      	cmp	r5, r3
   1270c:	f43f af71 	beq.w	125f2 <_dtoa_r+0x46a>
   12710:	2200      	movs	r2, #0
   12712:	4b31      	ldr	r3, [pc, #196]	; (127d8 <_dtoa_r+0x650>)
   12714:	ec51 0b18 	vmov	r0, r1, d8
   12718:	f7fd ff4e 	bl	105b8 <__aeabi_dmul>
   1271c:	2200      	movs	r2, #0
   1271e:	4b2e      	ldr	r3, [pc, #184]	; (127d8 <_dtoa_r+0x650>)
   12720:	ec41 0b18 	vmov	d8, r0, r1
   12724:	4630      	mov	r0, r6
   12726:	4639      	mov	r1, r7
   12728:	f7fd ff46 	bl	105b8 <__aeabi_dmul>
   1272c:	4606      	mov	r6, r0
   1272e:	460f      	mov	r7, r1
   12730:	e7c4      	b.n	126bc <_dtoa_r+0x534>
   12732:	ec51 0b17 	vmov	r0, r1, d7
   12736:	f7fd ff3f 	bl	105b8 <__aeabi_dmul>
   1273a:	9b02      	ldr	r3, [sp, #8]
   1273c:	9d00      	ldr	r5, [sp, #0]
   1273e:	930c      	str	r3, [sp, #48]	; 0x30
   12740:	ec41 0b18 	vmov	d8, r0, r1
   12744:	4639      	mov	r1, r7
   12746:	4630      	mov	r0, r6
   12748:	f7fe f9e6 	bl	10b18 <__aeabi_d2iz>
   1274c:	9011      	str	r0, [sp, #68]	; 0x44
   1274e:	f7fd fec9 	bl	104e4 <__aeabi_i2d>
   12752:	4602      	mov	r2, r0
   12754:	460b      	mov	r3, r1
   12756:	4630      	mov	r0, r6
   12758:	4639      	mov	r1, r7
   1275a:	f7fd fd75 	bl	10248 <__aeabi_dsub>
   1275e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12760:	4606      	mov	r6, r0
   12762:	460f      	mov	r7, r1
   12764:	3330      	adds	r3, #48	; 0x30
   12766:	2200      	movs	r2, #0
   12768:	f805 3b01 	strb.w	r3, [r5], #1
   1276c:	9b02      	ldr	r3, [sp, #8]
   1276e:	429d      	cmp	r5, r3
   12770:	d125      	bne.n	127be <_dtoa_r+0x636>
   12772:	4b1c      	ldr	r3, [pc, #112]	; (127e4 <_dtoa_r+0x65c>)
   12774:	ec51 0b18 	vmov	r0, r1, d8
   12778:	f7fd fd68 	bl	1024c <__adddf3>
   1277c:	4602      	mov	r2, r0
   1277e:	460b      	mov	r3, r1
   12780:	4630      	mov	r0, r6
   12782:	4639      	mov	r1, r7
   12784:	f7fe f9a8 	bl	10ad8 <__aeabi_dcmpgt>
   12788:	2800      	cmp	r0, #0
   1278a:	d175      	bne.n	12878 <_dtoa_r+0x6f0>
   1278c:	2000      	movs	r0, #0
   1278e:	4915      	ldr	r1, [pc, #84]	; (127e4 <_dtoa_r+0x65c>)
   12790:	ec53 2b18 	vmov	r2, r3, d8
   12794:	f7fd fd58 	bl	10248 <__aeabi_dsub>
   12798:	4602      	mov	r2, r0
   1279a:	460b      	mov	r3, r1
   1279c:	4630      	mov	r0, r6
   1279e:	4639      	mov	r1, r7
   127a0:	f7fe f97c 	bl	10a9c <__aeabi_dcmplt>
   127a4:	2800      	cmp	r0, #0
   127a6:	f43f af24 	beq.w	125f2 <_dtoa_r+0x46a>
   127aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   127ac:	1e6b      	subs	r3, r5, #1
   127ae:	930c      	str	r3, [sp, #48]	; 0x30
   127b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   127b4:	2b30      	cmp	r3, #48	; 0x30
   127b6:	d0f8      	beq.n	127aa <_dtoa_r+0x622>
   127b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
   127bc:	e04a      	b.n	12854 <_dtoa_r+0x6cc>
   127be:	4b06      	ldr	r3, [pc, #24]	; (127d8 <_dtoa_r+0x650>)
   127c0:	f7fd fefa 	bl	105b8 <__aeabi_dmul>
   127c4:	4606      	mov	r6, r0
   127c6:	460f      	mov	r7, r1
   127c8:	e7bc      	b.n	12744 <_dtoa_r+0x5bc>
   127ca:	bf00      	nop
   127cc:	0002c4f8 	.word	0x0002c4f8
   127d0:	0002c4d0 	.word	0x0002c4d0
   127d4:	3ff00000 	.word	0x3ff00000
   127d8:	40240000 	.word	0x40240000
   127dc:	401c0000 	.word	0x401c0000
   127e0:	40140000 	.word	0x40140000
   127e4:	3fe00000 	.word	0x3fe00000
   127e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   127ec:	9d00      	ldr	r5, [sp, #0]
   127ee:	4630      	mov	r0, r6
   127f0:	4639      	mov	r1, r7
   127f2:	ec53 2b18 	vmov	r2, r3, d8
   127f6:	f7fe f809 	bl	1080c <__aeabi_ddiv>
   127fa:	f7fe f98d 	bl	10b18 <__aeabi_d2iz>
   127fe:	4680      	mov	r8, r0
   12800:	f7fd fe70 	bl	104e4 <__aeabi_i2d>
   12804:	ec53 2b18 	vmov	r2, r3, d8
   12808:	f7fd fed6 	bl	105b8 <__aeabi_dmul>
   1280c:	4602      	mov	r2, r0
   1280e:	4630      	mov	r0, r6
   12810:	f108 0630 	add.w	r6, r8, #48	; 0x30
   12814:	460b      	mov	r3, r1
   12816:	4639      	mov	r1, r7
   12818:	f7fd fd16 	bl	10248 <__aeabi_dsub>
   1281c:	f805 6b01 	strb.w	r6, [r5], #1
   12820:	9e00      	ldr	r6, [sp, #0]
   12822:	4602      	mov	r2, r0
   12824:	9f01      	ldr	r7, [sp, #4]
   12826:	460b      	mov	r3, r1
   12828:	1bae      	subs	r6, r5, r6
   1282a:	42b7      	cmp	r7, r6
   1282c:	d137      	bne.n	1289e <_dtoa_r+0x716>
   1282e:	f7fd fd0d 	bl	1024c <__adddf3>
   12832:	4606      	mov	r6, r0
   12834:	460f      	mov	r7, r1
   12836:	ec53 2b18 	vmov	r2, r3, d8
   1283a:	f7fe f94d 	bl	10ad8 <__aeabi_dcmpgt>
   1283e:	b9c8      	cbnz	r0, 12874 <_dtoa_r+0x6ec>
   12840:	4630      	mov	r0, r6
   12842:	4639      	mov	r1, r7
   12844:	ec53 2b18 	vmov	r2, r3, d8
   12848:	f7fe f91e 	bl	10a88 <__aeabi_dcmpeq>
   1284c:	b110      	cbz	r0, 12854 <_dtoa_r+0x6cc>
   1284e:	f018 0f01 	tst.w	r8, #1
   12852:	d10f      	bne.n	12874 <_dtoa_r+0x6ec>
   12854:	4620      	mov	r0, r4
   12856:	4651      	mov	r1, sl
   12858:	f018 feeb 	bl	2b632 <_Bfree>
   1285c:	2300      	movs	r3, #0
   1285e:	f109 0001 	add.w	r0, r9, #1
   12862:	702b      	strb	r3, [r5, #0]
   12864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12866:	6018      	str	r0, [r3, #0]
   12868:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1286a:	2b00      	cmp	r3, #0
   1286c:	f43f acd8 	beq.w	12220 <_dtoa_r+0x98>
   12870:	601d      	str	r5, [r3, #0]
   12872:	e4d5      	b.n	12220 <_dtoa_r+0x98>
   12874:	f8cd 901c 	str.w	r9, [sp, #28]
   12878:	462b      	mov	r3, r5
   1287a:	461d      	mov	r5, r3
   1287c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   12880:	2a39      	cmp	r2, #57	; 0x39
   12882:	d108      	bne.n	12896 <_dtoa_r+0x70e>
   12884:	9a00      	ldr	r2, [sp, #0]
   12886:	429a      	cmp	r2, r3
   12888:	d1f7      	bne.n	1287a <_dtoa_r+0x6f2>
   1288a:	9a07      	ldr	r2, [sp, #28]
   1288c:	9900      	ldr	r1, [sp, #0]
   1288e:	3201      	adds	r2, #1
   12890:	9207      	str	r2, [sp, #28]
   12892:	2230      	movs	r2, #48	; 0x30
   12894:	700a      	strb	r2, [r1, #0]
   12896:	781a      	ldrb	r2, [r3, #0]
   12898:	3201      	adds	r2, #1
   1289a:	701a      	strb	r2, [r3, #0]
   1289c:	e78c      	b.n	127b8 <_dtoa_r+0x630>
   1289e:	2200      	movs	r2, #0
   128a0:	4b9c      	ldr	r3, [pc, #624]	; (12b14 <_dtoa_r+0x98c>)
   128a2:	f7fd fe89 	bl	105b8 <__aeabi_dmul>
   128a6:	2200      	movs	r2, #0
   128a8:	2300      	movs	r3, #0
   128aa:	4606      	mov	r6, r0
   128ac:	460f      	mov	r7, r1
   128ae:	f7fe f8eb 	bl	10a88 <__aeabi_dcmpeq>
   128b2:	2800      	cmp	r0, #0
   128b4:	d09b      	beq.n	127ee <_dtoa_r+0x666>
   128b6:	e7cd      	b.n	12854 <_dtoa_r+0x6cc>
   128b8:	9a08      	ldr	r2, [sp, #32]
   128ba:	2a00      	cmp	r2, #0
   128bc:	f000 80c4 	beq.w	12a48 <_dtoa_r+0x8c0>
   128c0:	9a05      	ldr	r2, [sp, #20]
   128c2:	2a01      	cmp	r2, #1
   128c4:	f300 80a9 	bgt.w	12a1a <_dtoa_r+0x892>
   128c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   128ca:	2a00      	cmp	r2, #0
   128cc:	f000 80a1 	beq.w	12a12 <_dtoa_r+0x88a>
   128d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   128d4:	9e06      	ldr	r6, [sp, #24]
   128d6:	4645      	mov	r5, r8
   128d8:	9a04      	ldr	r2, [sp, #16]
   128da:	2101      	movs	r1, #1
   128dc:	4620      	mov	r0, r4
   128de:	4498      	add	r8, r3
   128e0:	441a      	add	r2, r3
   128e2:	9204      	str	r2, [sp, #16]
   128e4:	f018 ff89 	bl	2b7fa <__i2b>
   128e8:	4607      	mov	r7, r0
   128ea:	2d00      	cmp	r5, #0
   128ec:	dd0b      	ble.n	12906 <_dtoa_r+0x77e>
   128ee:	9b04      	ldr	r3, [sp, #16]
   128f0:	2b00      	cmp	r3, #0
   128f2:	dd08      	ble.n	12906 <_dtoa_r+0x77e>
   128f4:	42ab      	cmp	r3, r5
   128f6:	9a04      	ldr	r2, [sp, #16]
   128f8:	bfa8      	it	ge
   128fa:	462b      	movge	r3, r5
   128fc:	eba8 0803 	sub.w	r8, r8, r3
   12900:	1aed      	subs	r5, r5, r3
   12902:	1ad3      	subs	r3, r2, r3
   12904:	9304      	str	r3, [sp, #16]
   12906:	9b06      	ldr	r3, [sp, #24]
   12908:	b1fb      	cbz	r3, 1294a <_dtoa_r+0x7c2>
   1290a:	9b08      	ldr	r3, [sp, #32]
   1290c:	2b00      	cmp	r3, #0
   1290e:	f000 809f 	beq.w	12a50 <_dtoa_r+0x8c8>
   12912:	2e00      	cmp	r6, #0
   12914:	dd11      	ble.n	1293a <_dtoa_r+0x7b2>
   12916:	4639      	mov	r1, r7
   12918:	4632      	mov	r2, r6
   1291a:	4620      	mov	r0, r4
   1291c:	f012 fe1c 	bl	25558 <__pow5mult>
   12920:	4652      	mov	r2, sl
   12922:	4601      	mov	r1, r0
   12924:	4607      	mov	r7, r0
   12926:	4620      	mov	r0, r4
   12928:	f018 ff70 	bl	2b80c <__multiply>
   1292c:	4651      	mov	r1, sl
   1292e:	9007      	str	r0, [sp, #28]
   12930:	4620      	mov	r0, r4
   12932:	f018 fe7e 	bl	2b632 <_Bfree>
   12936:	9b07      	ldr	r3, [sp, #28]
   12938:	469a      	mov	sl, r3
   1293a:	9b06      	ldr	r3, [sp, #24]
   1293c:	1b9a      	subs	r2, r3, r6
   1293e:	d004      	beq.n	1294a <_dtoa_r+0x7c2>
   12940:	4651      	mov	r1, sl
   12942:	4620      	mov	r0, r4
   12944:	f012 fe08 	bl	25558 <__pow5mult>
   12948:	4682      	mov	sl, r0
   1294a:	2101      	movs	r1, #1
   1294c:	4620      	mov	r0, r4
   1294e:	f018 ff54 	bl	2b7fa <__i2b>
   12952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12954:	4606      	mov	r6, r0
   12956:	2b00      	cmp	r3, #0
   12958:	dd7c      	ble.n	12a54 <_dtoa_r+0x8cc>
   1295a:	461a      	mov	r2, r3
   1295c:	4601      	mov	r1, r0
   1295e:	4620      	mov	r0, r4
   12960:	f012 fdfa 	bl	25558 <__pow5mult>
   12964:	9b05      	ldr	r3, [sp, #20]
   12966:	4606      	mov	r6, r0
   12968:	2b01      	cmp	r3, #1
   1296a:	dd76      	ble.n	12a5a <_dtoa_r+0x8d2>
   1296c:	2300      	movs	r3, #0
   1296e:	9306      	str	r3, [sp, #24]
   12970:	6933      	ldr	r3, [r6, #16]
   12972:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12976:	6918      	ldr	r0, [r3, #16]
   12978:	f018 feef 	bl	2b75a <__hi0bits>
   1297c:	f1c0 0020 	rsb	r0, r0, #32
   12980:	9b04      	ldr	r3, [sp, #16]
   12982:	4418      	add	r0, r3
   12984:	f010 001f 	ands.w	r0, r0, #31
   12988:	f000 8086 	beq.w	12a98 <_dtoa_r+0x910>
   1298c:	f1c0 0320 	rsb	r3, r0, #32
   12990:	2b04      	cmp	r3, #4
   12992:	dd7f      	ble.n	12a94 <_dtoa_r+0x90c>
   12994:	f1c0 001c 	rsb	r0, r0, #28
   12998:	9b04      	ldr	r3, [sp, #16]
   1299a:	4480      	add	r8, r0
   1299c:	4405      	add	r5, r0
   1299e:	4403      	add	r3, r0
   129a0:	9304      	str	r3, [sp, #16]
   129a2:	f1b8 0f00 	cmp.w	r8, #0
   129a6:	dd05      	ble.n	129b4 <_dtoa_r+0x82c>
   129a8:	4651      	mov	r1, sl
   129aa:	4642      	mov	r2, r8
   129ac:	4620      	mov	r0, r4
   129ae:	f018 ffc8 	bl	2b942 <__lshift>
   129b2:	4682      	mov	sl, r0
   129b4:	9b04      	ldr	r3, [sp, #16]
   129b6:	2b00      	cmp	r3, #0
   129b8:	dd05      	ble.n	129c6 <_dtoa_r+0x83e>
   129ba:	4631      	mov	r1, r6
   129bc:	461a      	mov	r2, r3
   129be:	4620      	mov	r0, r4
   129c0:	f018 ffbf 	bl	2b942 <__lshift>
   129c4:	4606      	mov	r6, r0
   129c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   129c8:	2b00      	cmp	r3, #0
   129ca:	d067      	beq.n	12a9c <_dtoa_r+0x914>
   129cc:	4631      	mov	r1, r6
   129ce:	4650      	mov	r0, sl
   129d0:	f019 f816 	bl	2ba00 <__mcmp>
   129d4:	2800      	cmp	r0, #0
   129d6:	da61      	bge.n	12a9c <_dtoa_r+0x914>
   129d8:	2300      	movs	r3, #0
   129da:	4651      	mov	r1, sl
   129dc:	220a      	movs	r2, #10
   129de:	4620      	mov	r0, r4
   129e0:	f018 fe3e 	bl	2b660 <__multadd>
   129e4:	9b08      	ldr	r3, [sp, #32]
   129e6:	f109 39ff 	add.w	r9, r9, #4294967295
   129ea:	4682      	mov	sl, r0
   129ec:	2b00      	cmp	r3, #0
   129ee:	f000 8187 	beq.w	12d00 <_dtoa_r+0xb78>
   129f2:	4639      	mov	r1, r7
   129f4:	2300      	movs	r3, #0
   129f6:	220a      	movs	r2, #10
   129f8:	4620      	mov	r0, r4
   129fa:	f018 fe31 	bl	2b660 <__multadd>
   129fe:	f1bb 0f00 	cmp.w	fp, #0
   12a02:	4607      	mov	r7, r0
   12a04:	f300 808e 	bgt.w	12b24 <_dtoa_r+0x99c>
   12a08:	9b05      	ldr	r3, [sp, #20]
   12a0a:	2b02      	cmp	r3, #2
   12a0c:	f340 808a 	ble.w	12b24 <_dtoa_r+0x99c>
   12a10:	e04c      	b.n	12aac <_dtoa_r+0x924>
   12a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12a14:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   12a18:	e75c      	b.n	128d4 <_dtoa_r+0x74c>
   12a1a:	9b01      	ldr	r3, [sp, #4]
   12a1c:	1e5e      	subs	r6, r3, #1
   12a1e:	9b06      	ldr	r3, [sp, #24]
   12a20:	42b3      	cmp	r3, r6
   12a22:	bfb7      	itett	lt
   12a24:	9b06      	ldrlt	r3, [sp, #24]
   12a26:	1b9e      	subge	r6, r3, r6
   12a28:	9606      	strlt	r6, [sp, #24]
   12a2a:	1af2      	sublt	r2, r6, r3
   12a2c:	bfbf      	itttt	lt
   12a2e:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   12a30:	2600      	movlt	r6, #0
   12a32:	189b      	addlt	r3, r3, r2
   12a34:	930d      	strlt	r3, [sp, #52]	; 0x34
   12a36:	9b01      	ldr	r3, [sp, #4]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	bfb5      	itete	lt
   12a3c:	eba8 0503 	sublt.w	r5, r8, r3
   12a40:	4645      	movge	r5, r8
   12a42:	2300      	movlt	r3, #0
   12a44:	9b01      	ldrge	r3, [sp, #4]
   12a46:	e747      	b.n	128d8 <_dtoa_r+0x750>
   12a48:	9e06      	ldr	r6, [sp, #24]
   12a4a:	4645      	mov	r5, r8
   12a4c:	9f08      	ldr	r7, [sp, #32]
   12a4e:	e74c      	b.n	128ea <_dtoa_r+0x762>
   12a50:	9a06      	ldr	r2, [sp, #24]
   12a52:	e775      	b.n	12940 <_dtoa_r+0x7b8>
   12a54:	9b05      	ldr	r3, [sp, #20]
   12a56:	2b01      	cmp	r3, #1
   12a58:	dc18      	bgt.n	12a8c <_dtoa_r+0x904>
   12a5a:	9b02      	ldr	r3, [sp, #8]
   12a5c:	b9b3      	cbnz	r3, 12a8c <_dtoa_r+0x904>
   12a5e:	9b03      	ldr	r3, [sp, #12]
   12a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
   12a64:	b9a3      	cbnz	r3, 12a90 <_dtoa_r+0x908>
   12a66:	9b03      	ldr	r3, [sp, #12]
   12a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12a6c:	0d1b      	lsrs	r3, r3, #20
   12a6e:	051b      	lsls	r3, r3, #20
   12a70:	b12b      	cbz	r3, 12a7e <_dtoa_r+0x8f6>
   12a72:	9b04      	ldr	r3, [sp, #16]
   12a74:	f108 0801 	add.w	r8, r8, #1
   12a78:	3301      	adds	r3, #1
   12a7a:	9304      	str	r3, [sp, #16]
   12a7c:	2301      	movs	r3, #1
   12a7e:	9306      	str	r3, [sp, #24]
   12a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12a82:	2b00      	cmp	r3, #0
   12a84:	f47f af74 	bne.w	12970 <_dtoa_r+0x7e8>
   12a88:	2001      	movs	r0, #1
   12a8a:	e779      	b.n	12980 <_dtoa_r+0x7f8>
   12a8c:	2300      	movs	r3, #0
   12a8e:	e7f6      	b.n	12a7e <_dtoa_r+0x8f6>
   12a90:	9b02      	ldr	r3, [sp, #8]
   12a92:	e7f4      	b.n	12a7e <_dtoa_r+0x8f6>
   12a94:	d085      	beq.n	129a2 <_dtoa_r+0x81a>
   12a96:	4618      	mov	r0, r3
   12a98:	301c      	adds	r0, #28
   12a9a:	e77d      	b.n	12998 <_dtoa_r+0x810>
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	dc3a      	bgt.n	12b18 <_dtoa_r+0x990>
   12aa2:	9b05      	ldr	r3, [sp, #20]
   12aa4:	2b02      	cmp	r3, #2
   12aa6:	dd37      	ble.n	12b18 <_dtoa_r+0x990>
   12aa8:	f8dd b004 	ldr.w	fp, [sp, #4]
   12aac:	f1bb 0f00 	cmp.w	fp, #0
   12ab0:	d10d      	bne.n	12ace <_dtoa_r+0x946>
   12ab2:	4631      	mov	r1, r6
   12ab4:	465b      	mov	r3, fp
   12ab6:	2205      	movs	r2, #5
   12ab8:	4620      	mov	r0, r4
   12aba:	f018 fdd1 	bl	2b660 <__multadd>
   12abe:	4601      	mov	r1, r0
   12ac0:	4606      	mov	r6, r0
   12ac2:	4650      	mov	r0, sl
   12ac4:	f018 ff9c 	bl	2ba00 <__mcmp>
   12ac8:	2800      	cmp	r0, #0
   12aca:	f73f adc0 	bgt.w	1264e <_dtoa_r+0x4c6>
   12ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ad0:	9d00      	ldr	r5, [sp, #0]
   12ad2:	ea6f 0903 	mvn.w	r9, r3
   12ad6:	f04f 0800 	mov.w	r8, #0
   12ada:	4631      	mov	r1, r6
   12adc:	4620      	mov	r0, r4
   12ade:	f018 fda8 	bl	2b632 <_Bfree>
   12ae2:	2f00      	cmp	r7, #0
   12ae4:	f43f aeb6 	beq.w	12854 <_dtoa_r+0x6cc>
   12ae8:	f1b8 0f00 	cmp.w	r8, #0
   12aec:	d005      	beq.n	12afa <_dtoa_r+0x972>
   12aee:	45b8      	cmp	r8, r7
   12af0:	d003      	beq.n	12afa <_dtoa_r+0x972>
   12af2:	4641      	mov	r1, r8
   12af4:	4620      	mov	r0, r4
   12af6:	f018 fd9c 	bl	2b632 <_Bfree>
   12afa:	4639      	mov	r1, r7
   12afc:	4620      	mov	r0, r4
   12afe:	f018 fd98 	bl	2b632 <_Bfree>
   12b02:	e6a7      	b.n	12854 <_dtoa_r+0x6cc>
   12b04:	2600      	movs	r6, #0
   12b06:	4637      	mov	r7, r6
   12b08:	e7e1      	b.n	12ace <_dtoa_r+0x946>
   12b0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12b0c:	f8dd 901c 	ldr.w	r9, [sp, #28]
   12b10:	4637      	mov	r7, r6
   12b12:	e59c      	b.n	1264e <_dtoa_r+0x4c6>
   12b14:	40240000 	.word	0x40240000
   12b18:	9b08      	ldr	r3, [sp, #32]
   12b1a:	f8dd b004 	ldr.w	fp, [sp, #4]
   12b1e:	2b00      	cmp	r3, #0
   12b20:	f000 80f5 	beq.w	12d0e <_dtoa_r+0xb86>
   12b24:	2d00      	cmp	r5, #0
   12b26:	dd05      	ble.n	12b34 <_dtoa_r+0x9ac>
   12b28:	4639      	mov	r1, r7
   12b2a:	462a      	mov	r2, r5
   12b2c:	4620      	mov	r0, r4
   12b2e:	f018 ff08 	bl	2b942 <__lshift>
   12b32:	4607      	mov	r7, r0
   12b34:	9b06      	ldr	r3, [sp, #24]
   12b36:	2b00      	cmp	r3, #0
   12b38:	d055      	beq.n	12be6 <_dtoa_r+0xa5e>
   12b3a:	6879      	ldr	r1, [r7, #4]
   12b3c:	4620      	mov	r0, r4
   12b3e:	f018 fd44 	bl	2b5ca <_Balloc>
   12b42:	693a      	ldr	r2, [r7, #16]
   12b44:	4605      	mov	r5, r0
   12b46:	f107 010c 	add.w	r1, r7, #12
   12b4a:	3202      	adds	r2, #2
   12b4c:	300c      	adds	r0, #12
   12b4e:	0092      	lsls	r2, r2, #2
   12b50:	f018 f97a 	bl	2ae48 <memcpy>
   12b54:	2201      	movs	r2, #1
   12b56:	4629      	mov	r1, r5
   12b58:	4620      	mov	r0, r4
   12b5a:	f018 fef2 	bl	2b942 <__lshift>
   12b5e:	9b00      	ldr	r3, [sp, #0]
   12b60:	46b8      	mov	r8, r7
   12b62:	4607      	mov	r7, r0
   12b64:	3301      	adds	r3, #1
   12b66:	9301      	str	r3, [sp, #4]
   12b68:	9b00      	ldr	r3, [sp, #0]
   12b6a:	445b      	add	r3, fp
   12b6c:	9307      	str	r3, [sp, #28]
   12b6e:	9b02      	ldr	r3, [sp, #8]
   12b70:	f003 0301 	and.w	r3, r3, #1
   12b74:	9306      	str	r3, [sp, #24]
   12b76:	9b01      	ldr	r3, [sp, #4]
   12b78:	4631      	mov	r1, r6
   12b7a:	4650      	mov	r0, sl
   12b7c:	f103 3bff 	add.w	fp, r3, #4294967295
   12b80:	f018 fb5a 	bl	2b238 <quorem>
   12b84:	4603      	mov	r3, r0
   12b86:	4641      	mov	r1, r8
   12b88:	9002      	str	r0, [sp, #8]
   12b8a:	4650      	mov	r0, sl
   12b8c:	3330      	adds	r3, #48	; 0x30
   12b8e:	9308      	str	r3, [sp, #32]
   12b90:	f018 ff36 	bl	2ba00 <__mcmp>
   12b94:	463a      	mov	r2, r7
   12b96:	9004      	str	r0, [sp, #16]
   12b98:	4631      	mov	r1, r6
   12b9a:	4620      	mov	r0, r4
   12b9c:	f018 ff4c 	bl	2ba38 <__mdiff>
   12ba0:	68c2      	ldr	r2, [r0, #12]
   12ba2:	4605      	mov	r5, r0
   12ba4:	9b08      	ldr	r3, [sp, #32]
   12ba6:	bb02      	cbnz	r2, 12bea <_dtoa_r+0xa62>
   12ba8:	4601      	mov	r1, r0
   12baa:	4650      	mov	r0, sl
   12bac:	f018 ff28 	bl	2ba00 <__mcmp>
   12bb0:	9b08      	ldr	r3, [sp, #32]
   12bb2:	4602      	mov	r2, r0
   12bb4:	4629      	mov	r1, r5
   12bb6:	4620      	mov	r0, r4
   12bb8:	e9cd 3208 	strd	r3, r2, [sp, #32]
   12bbc:	f018 fd39 	bl	2b632 <_Bfree>
   12bc0:	9b05      	ldr	r3, [sp, #20]
   12bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12bc4:	9d01      	ldr	r5, [sp, #4]
   12bc6:	ea43 0102 	orr.w	r1, r3, r2
   12bca:	9b06      	ldr	r3, [sp, #24]
   12bcc:	430b      	orrs	r3, r1
   12bce:	9b08      	ldr	r3, [sp, #32]
   12bd0:	d10d      	bne.n	12bee <_dtoa_r+0xa66>
   12bd2:	2b39      	cmp	r3, #57	; 0x39
   12bd4:	d027      	beq.n	12c26 <_dtoa_r+0xa9e>
   12bd6:	9a04      	ldr	r2, [sp, #16]
   12bd8:	2a00      	cmp	r2, #0
   12bda:	dd01      	ble.n	12be0 <_dtoa_r+0xa58>
   12bdc:	9b02      	ldr	r3, [sp, #8]
   12bde:	3331      	adds	r3, #49	; 0x31
   12be0:	f88b 3000 	strb.w	r3, [fp]
   12be4:	e779      	b.n	12ada <_dtoa_r+0x952>
   12be6:	4638      	mov	r0, r7
   12be8:	e7b9      	b.n	12b5e <_dtoa_r+0x9d6>
   12bea:	2201      	movs	r2, #1
   12bec:	e7e2      	b.n	12bb4 <_dtoa_r+0xa2c>
   12bee:	9904      	ldr	r1, [sp, #16]
   12bf0:	2900      	cmp	r1, #0
   12bf2:	db04      	blt.n	12bfe <_dtoa_r+0xa76>
   12bf4:	9805      	ldr	r0, [sp, #20]
   12bf6:	4301      	orrs	r1, r0
   12bf8:	9806      	ldr	r0, [sp, #24]
   12bfa:	4301      	orrs	r1, r0
   12bfc:	d120      	bne.n	12c40 <_dtoa_r+0xab8>
   12bfe:	2a00      	cmp	r2, #0
   12c00:	ddee      	ble.n	12be0 <_dtoa_r+0xa58>
   12c02:	4651      	mov	r1, sl
   12c04:	2201      	movs	r2, #1
   12c06:	4620      	mov	r0, r4
   12c08:	9301      	str	r3, [sp, #4]
   12c0a:	f018 fe9a 	bl	2b942 <__lshift>
   12c0e:	4631      	mov	r1, r6
   12c10:	4682      	mov	sl, r0
   12c12:	f018 fef5 	bl	2ba00 <__mcmp>
   12c16:	2800      	cmp	r0, #0
   12c18:	9b01      	ldr	r3, [sp, #4]
   12c1a:	dc02      	bgt.n	12c22 <_dtoa_r+0xa9a>
   12c1c:	d1e0      	bne.n	12be0 <_dtoa_r+0xa58>
   12c1e:	07da      	lsls	r2, r3, #31
   12c20:	d5de      	bpl.n	12be0 <_dtoa_r+0xa58>
   12c22:	2b39      	cmp	r3, #57	; 0x39
   12c24:	d1da      	bne.n	12bdc <_dtoa_r+0xa54>
   12c26:	2339      	movs	r3, #57	; 0x39
   12c28:	f88b 3000 	strb.w	r3, [fp]
   12c2c:	462b      	mov	r3, r5
   12c2e:	461d      	mov	r5, r3
   12c30:	3b01      	subs	r3, #1
   12c32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   12c36:	2a39      	cmp	r2, #57	; 0x39
   12c38:	d050      	beq.n	12cdc <_dtoa_r+0xb54>
   12c3a:	3201      	adds	r2, #1
   12c3c:	701a      	strb	r2, [r3, #0]
   12c3e:	e74c      	b.n	12ada <_dtoa_r+0x952>
   12c40:	2a00      	cmp	r2, #0
   12c42:	dd03      	ble.n	12c4c <_dtoa_r+0xac4>
   12c44:	2b39      	cmp	r3, #57	; 0x39
   12c46:	d0ee      	beq.n	12c26 <_dtoa_r+0xa9e>
   12c48:	3301      	adds	r3, #1
   12c4a:	e7c9      	b.n	12be0 <_dtoa_r+0xa58>
   12c4c:	9a01      	ldr	r2, [sp, #4]
   12c4e:	9907      	ldr	r1, [sp, #28]
   12c50:	f802 3c01 	strb.w	r3, [r2, #-1]
   12c54:	428a      	cmp	r2, r1
   12c56:	d02a      	beq.n	12cae <_dtoa_r+0xb26>
   12c58:	4651      	mov	r1, sl
   12c5a:	2300      	movs	r3, #0
   12c5c:	220a      	movs	r2, #10
   12c5e:	4620      	mov	r0, r4
   12c60:	f018 fcfe 	bl	2b660 <__multadd>
   12c64:	45b8      	cmp	r8, r7
   12c66:	4682      	mov	sl, r0
   12c68:	f04f 0300 	mov.w	r3, #0
   12c6c:	f04f 020a 	mov.w	r2, #10
   12c70:	4641      	mov	r1, r8
   12c72:	4620      	mov	r0, r4
   12c74:	d107      	bne.n	12c86 <_dtoa_r+0xafe>
   12c76:	f018 fcf3 	bl	2b660 <__multadd>
   12c7a:	4680      	mov	r8, r0
   12c7c:	4607      	mov	r7, r0
   12c7e:	9b01      	ldr	r3, [sp, #4]
   12c80:	3301      	adds	r3, #1
   12c82:	9301      	str	r3, [sp, #4]
   12c84:	e777      	b.n	12b76 <_dtoa_r+0x9ee>
   12c86:	f018 fceb 	bl	2b660 <__multadd>
   12c8a:	4639      	mov	r1, r7
   12c8c:	4680      	mov	r8, r0
   12c8e:	2300      	movs	r3, #0
   12c90:	220a      	movs	r2, #10
   12c92:	4620      	mov	r0, r4
   12c94:	f018 fce4 	bl	2b660 <__multadd>
   12c98:	4607      	mov	r7, r0
   12c9a:	e7f0      	b.n	12c7e <_dtoa_r+0xaf6>
   12c9c:	f1bb 0f00 	cmp.w	fp, #0
   12ca0:	9a00      	ldr	r2, [sp, #0]
   12ca2:	f04f 0800 	mov.w	r8, #0
   12ca6:	bfcc      	ite	gt
   12ca8:	465d      	movgt	r5, fp
   12caa:	2501      	movle	r5, #1
   12cac:	4415      	add	r5, r2
   12cae:	4651      	mov	r1, sl
   12cb0:	2201      	movs	r2, #1
   12cb2:	4620      	mov	r0, r4
   12cb4:	9301      	str	r3, [sp, #4]
   12cb6:	f018 fe44 	bl	2b942 <__lshift>
   12cba:	4631      	mov	r1, r6
   12cbc:	4682      	mov	sl, r0
   12cbe:	f018 fe9f 	bl	2ba00 <__mcmp>
   12cc2:	2800      	cmp	r0, #0
   12cc4:	dcb2      	bgt.n	12c2c <_dtoa_r+0xaa4>
   12cc6:	d102      	bne.n	12cce <_dtoa_r+0xb46>
   12cc8:	9b01      	ldr	r3, [sp, #4]
   12cca:	07db      	lsls	r3, r3, #31
   12ccc:	d4ae      	bmi.n	12c2c <_dtoa_r+0xaa4>
   12cce:	462b      	mov	r3, r5
   12cd0:	461d      	mov	r5, r3
   12cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   12cd6:	2a30      	cmp	r2, #48	; 0x30
   12cd8:	d0fa      	beq.n	12cd0 <_dtoa_r+0xb48>
   12cda:	e6fe      	b.n	12ada <_dtoa_r+0x952>
   12cdc:	9a00      	ldr	r2, [sp, #0]
   12cde:	429a      	cmp	r2, r3
   12ce0:	d1a5      	bne.n	12c2e <_dtoa_r+0xaa6>
   12ce2:	2331      	movs	r3, #49	; 0x31
   12ce4:	f109 0901 	add.w	r9, r9, #1
   12ce8:	7013      	strb	r3, [r2, #0]
   12cea:	e6f6      	b.n	12ada <_dtoa_r+0x952>
   12cec:	4b12      	ldr	r3, [pc, #72]	; (12d38 <_dtoa_r+0xbb0>)
   12cee:	f7ff bab8 	b.w	12262 <_dtoa_r+0xda>
   12cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	f47f aa8e 	bne.w	12216 <_dtoa_r+0x8e>
   12cfa:	4b10      	ldr	r3, [pc, #64]	; (12d3c <_dtoa_r+0xbb4>)
   12cfc:	f7ff bab1 	b.w	12262 <_dtoa_r+0xda>
   12d00:	f1bb 0f00 	cmp.w	fp, #0
   12d04:	dc03      	bgt.n	12d0e <_dtoa_r+0xb86>
   12d06:	9b05      	ldr	r3, [sp, #20]
   12d08:	2b02      	cmp	r3, #2
   12d0a:	f73f aecf 	bgt.w	12aac <_dtoa_r+0x924>
   12d0e:	9d00      	ldr	r5, [sp, #0]
   12d10:	4631      	mov	r1, r6
   12d12:	4650      	mov	r0, sl
   12d14:	f018 fa90 	bl	2b238 <quorem>
   12d18:	9a00      	ldr	r2, [sp, #0]
   12d1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   12d1e:	f805 3b01 	strb.w	r3, [r5], #1
   12d22:	1aaa      	subs	r2, r5, r2
   12d24:	4593      	cmp	fp, r2
   12d26:	ddb9      	ble.n	12c9c <_dtoa_r+0xb14>
   12d28:	4651      	mov	r1, sl
   12d2a:	2300      	movs	r3, #0
   12d2c:	220a      	movs	r2, #10
   12d2e:	4620      	mov	r0, r4
   12d30:	f018 fc96 	bl	2b660 <__multadd>
   12d34:	4682      	mov	sl, r0
   12d36:	e7eb      	b.n	12d10 <_dtoa_r+0xb88>
   12d38:	0002e4f4 	.word	0x0002e4f4
   12d3c:	00030432 	.word	0x00030432

00012d40 <nan>:
   12d40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12d48 <nan+0x8>
   12d44:	4770      	bx	lr
   12d46:	bf00      	nop
   12d48:	00000000 	.word	0x00000000
   12d4c:	7ff80000 	.word	0x7ff80000

00012d50 <cloud_event_handler>:
// Cloud event handler

void cloud_event_handler(const struct cloud_backend *const backend,
						 const struct cloud_event *const evt,
						 void *user_data)
{
   12d50:	b513      	push	{r0, r1, r4, lr}
   12d52:	460c      	mov	r4, r1
	ARG_UNUSED(user_data);
	ARG_UNUSED(backend);

	switch (evt->type)
   12d54:	7809      	ldrb	r1, [r1, #0]
   12d56:	290e      	cmp	r1, #14
   12d58:	d847      	bhi.n	12dea <cloud_event_handler+0x9a>
   12d5a:	e8df f001 	tbb	[pc, r1]
   12d5e:	0e08      	.short	0x0e08
   12d60:	2c2a1a1c 	.word	0x2c2a1a1c
   12d64:	46403e2e 	.word	0x46403e2e
   12d68:	46464642 	.word	0x46464642
   12d6c:	44          	.byte	0x44
   12d6d:	00          	.byte	0x00
	{
	case CLOUD_EVT_CONNECTING:
		printk("CLOUD_EVT_CONNECTING");
   12d6e:	4822      	ldr	r0, [pc, #136]	; (12df8 <cloud_event_handler+0xa8>)
		break;
	default:
		printk("Unknown cloud event type: %d", evt->type);
		break;
	}
}
   12d70:	b002      	add	sp, #8
   12d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("CLOUD_EVT_READY");
   12d76:	f013 b8ce 	b.w	25f16 <printk>
		printk("CLOUD_EVT_CONNECTED");
   12d7a:	4820      	ldr	r0, [pc, #128]	; (12dfc <cloud_event_handler+0xac>)
   12d7c:	f013 f8cb 	bl	25f16 <printk>
		cloud_connected = true;
   12d80:	2201      	movs	r2, #1
   12d82:	4b1f      	ldr	r3, [pc, #124]	; (12e00 <cloud_event_handler+0xb0>)
		(void)k_work_cancel_delayable(&connect_work);
   12d84:	481f      	ldr	r0, [pc, #124]	; (12e04 <cloud_event_handler+0xb4>)
		cloud_connected = true;
   12d86:	701a      	strb	r2, [r3, #0]
}
   12d88:	b002      	add	sp, #8
   12d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)k_work_cancel_delayable(&connect_work);
   12d8e:	f017 bd45 	b.w	2a81c <k_work_cancel_delayable>
		printk("CLOUD_EVT_READY");
   12d92:	481d      	ldr	r0, [pc, #116]	; (12e08 <cloud_event_handler+0xb8>)
   12d94:	e7ec      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_DISCONNECTED");
   12d96:	481d      	ldr	r0, [pc, #116]	; (12e0c <cloud_event_handler+0xbc>)
   12d98:	f013 f8bd 	bl	25f16 <printk>
		cloud_connected = false;
   12d9c:	2200      	movs	r2, #0
   12d9e:	4b18      	ldr	r3, [pc, #96]	; (12e00 <cloud_event_handler+0xb0>)
		k_work_reschedule(&connect_work, K_NO_WAIT);
   12da0:	4818      	ldr	r0, [pc, #96]	; (12e04 <cloud_event_handler+0xb4>)
		cloud_connected = false;
   12da2:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&connect_work, K_NO_WAIT);
   12da4:	2200      	movs	r2, #0
   12da6:	2300      	movs	r3, #0
}
   12da8:	b002      	add	sp, #8
   12daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&connect_work, K_NO_WAIT);
   12dae:	f010 bd25 	b.w	237fc <k_work_reschedule>
		printk("CLOUD_EVT_ERROR");
   12db2:	4817      	ldr	r0, [pc, #92]	; (12e10 <cloud_event_handler+0xc0>)
   12db4:	e7dc      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_DATA_SENT");
   12db6:	4817      	ldr	r0, [pc, #92]	; (12e14 <cloud_event_handler+0xc4>)
   12db8:	e7da      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_DATA_RECEIVED");
   12dba:	4817      	ldr	r0, [pc, #92]	; (12e18 <cloud_event_handler+0xc8>)
   12dbc:	f013 f8ab 	bl	25f16 <printk>
		printk("Data received from cloud: %.*s",
   12dc0:	68a1      	ldr	r1, [r4, #8]
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   12dc2:	6860      	ldr	r0, [r4, #4]
   12dc4:	9101      	str	r1, [sp, #4]
   12dc6:	f013 fbc5 	bl	26554 <z_log_strdup>
   12dca:	4602      	mov	r2, r0
   12dcc:	9901      	ldr	r1, [sp, #4]
   12dce:	4813      	ldr	r0, [pc, #76]	; (12e1c <cloud_event_handler+0xcc>)
}
   12dd0:	b002      	add	sp, #8
   12dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Data received from cloud: %.*s",
   12dd6:	f013 b89e 	b.w	25f16 <printk>
		printk("CLOUD_EVT_PAIR_REQUEST");
   12dda:	4811      	ldr	r0, [pc, #68]	; (12e20 <cloud_event_handler+0xd0>)
   12ddc:	e7c8      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_PAIR_DONE");
   12dde:	4811      	ldr	r0, [pc, #68]	; (12e24 <cloud_event_handler+0xd4>)
   12de0:	e7c6      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_FOTA_DONE");
   12de2:	4811      	ldr	r0, [pc, #68]	; (12e28 <cloud_event_handler+0xd8>)
   12de4:	e7c4      	b.n	12d70 <cloud_event_handler+0x20>
		printk("CLOUD_EVT_FOTA_ERROR");
   12de6:	4811      	ldr	r0, [pc, #68]	; (12e2c <cloud_event_handler+0xdc>)
   12de8:	e7c2      	b.n	12d70 <cloud_event_handler+0x20>
		printk("Unknown cloud event type: %d", evt->type);
   12dea:	4811      	ldr	r0, [pc, #68]	; (12e30 <cloud_event_handler+0xe0>)
}
   12dec:	b002      	add	sp, #8
   12dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Unknown cloud event type: %d", evt->type);
   12df2:	f013 b890 	b.w	25f16 <printk>
   12df6:	bf00      	nop
   12df8:	0002ccc0 	.word	0x0002ccc0
   12dfc:	0002ccd5 	.word	0x0002ccd5
   12e00:	2000efca 	.word	0x2000efca
   12e04:	2000cb48 	.word	0x2000cb48
   12e08:	0002cce9 	.word	0x0002cce9
   12e0c:	0002ccf9 	.word	0x0002ccf9
   12e10:	0002cd10 	.word	0x0002cd10
   12e14:	0002cd20 	.word	0x0002cd20
   12e18:	0002cd34 	.word	0x0002cd34
   12e1c:	0002cd4c 	.word	0x0002cd4c
   12e20:	0002cd6b 	.word	0x0002cd6b
   12e24:	0002cd82 	.word	0x0002cd82
   12e28:	0002cd96 	.word	0x0002cd96
   12e2c:	0002cdaa 	.word	0x0002cdaa
   12e30:	0002cdbf 	.word	0x0002cdbf

00012e34 <lte_handler>:
		break;
	}
}
// LTE Event handler
static void lte_handler(const struct lte_lc_evt *const evt)
{
   12e34:	b510      	push	{r4, lr}
   12e36:	7803      	ldrb	r3, [r0, #0]
   12e38:	4604      	mov	r4, r0
   12e3a:	b094      	sub	sp, #80	; 0x50
   12e3c:	2b0b      	cmp	r3, #11
   12e3e:	d813      	bhi.n	12e68 <lte_handler+0x34>
   12e40:	e8df f003 	tbb	[pc, r3]
   12e44:	331c1606 	.word	0x331c1606
   12e48:	1212403c 	.word	0x1212403c
   12e4c:	4f121212 	.word	0x4f121212
	switch (evt->type)
	{
	case LTE_LC_EVT_NW_REG_STATUS:
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   12e50:	7a03      	ldrb	r3, [r0, #8]
   12e52:	2b01      	cmp	r3, #1
   12e54:	d00a      	beq.n	12e6c <lte_handler+0x38>
   12e56:	2b05      	cmp	r3, #5
   12e58:	d106      	bne.n	12e68 <lte_handler+0x34>
			(evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_ROAMING))
		{
			break;
		}

		printk("Network registration status: %s",
   12e5a:	492d      	ldr	r1, [pc, #180]	; (12f10 <lte_handler+0xdc>)
   12e5c:	482d      	ldr	r0, [pc, #180]	; (12f14 <lte_handler+0xe0>)
   12e5e:	f013 f85a 	bl	25f16 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12e62:	482d      	ldr	r0, [pc, #180]	; (12f18 <lte_handler+0xe4>)
   12e64:	f010 facc 	bl	23400 <z_impl_k_sem_give>
																																			: "Unknown");
		break;
	default:
		break;
	}
}
   12e68:	b014      	add	sp, #80	; 0x50
   12e6a:	bd10      	pop	{r4, pc}
		printk("Network registration status: %s",
   12e6c:	492b      	ldr	r1, [pc, #172]	; (12f1c <lte_handler+0xe8>)
   12e6e:	e7f5      	b.n	12e5c <lte_handler+0x28>
		printk("PSM parameter update: TAU: %d, Active time: %d",
   12e70:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   12e74:	482a      	ldr	r0, [pc, #168]	; (12f20 <lte_handler+0xec>)
		printk("LTE cell changed: Cell ID: %d, Tracking area: %d",
   12e76:	f013 f84e 	bl	25f16 <printk>
		break;
   12e7a:	e7f5      	b.n	12e68 <lte_handler+0x34>
		len = snprintf(log_buf, sizeof(log_buf),
   12e7c:	6900      	ldr	r0, [r0, #16]
   12e7e:	f7fd fb43 	bl	10508 <__aeabi_f2d>
   12e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12e86:	68e0      	ldr	r0, [r4, #12]
   12e88:	f7fd fb3e 	bl	10508 <__aeabi_f2d>
   12e8c:	4a25      	ldr	r2, [pc, #148]	; (12f24 <lte_handler+0xf0>)
   12e8e:	e9cd 0100 	strd	r0, r1, [sp]
   12e92:	213c      	movs	r1, #60	; 0x3c
   12e94:	a805      	add	r0, sp, #20
   12e96:	f011 fecd 	bl	24c34 <sniprintf>
   12e9a:	a805      	add	r0, sp, #20
   12e9c:	f013 fb5a 	bl	26554 <z_log_strdup>
   12ea0:	4601      	mov	r1, r0
			printk("%s", log_strdup(log_buf));
   12ea2:	4821      	ldr	r0, [pc, #132]	; (12f28 <lte_handler+0xf4>)
		printk("Modem domain event, type: %s",
   12ea4:	f013 f837 	bl	25f16 <printk>
}
   12ea8:	e7de      	b.n	12e68 <lte_handler+0x34>
		printk("RRC mode: %s",
   12eaa:	7a01      	ldrb	r1, [r0, #8]
   12eac:	4a1f      	ldr	r2, [pc, #124]	; (12f2c <lte_handler+0xf8>)
   12eae:	4b20      	ldr	r3, [pc, #128]	; (12f30 <lte_handler+0xfc>)
   12eb0:	4820      	ldr	r0, [pc, #128]	; (12f34 <lte_handler+0x100>)
   12eb2:	2901      	cmp	r1, #1
   12eb4:	bf0c      	ite	eq
   12eb6:	4611      	moveq	r1, r2
   12eb8:	4619      	movne	r1, r3
   12eba:	e7f3      	b.n	12ea4 <lte_handler+0x70>
		printk("LTE cell changed: Cell ID: %d, Tracking area: %d",
   12ebc:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   12ec0:	481d      	ldr	r0, [pc, #116]	; (12f38 <lte_handler+0x104>)
   12ec2:	e7d8      	b.n	12e76 <lte_handler+0x42>
				evt->lte_mode == LTE_LC_LTE_MODE_NONE ? "None" : evt->lte_mode == LTE_LC_LTE_MODE_LTEM ? "LTE-M"
   12ec4:	7a03      	ldrb	r3, [r0, #8]
		printk("Active LTE mode changed: %s",
   12ec6:	b143      	cbz	r3, 12eda <lte_handler+0xa6>
															 : evt->lte_mode == LTE_LC_LTE_MODE_NBIOT  ? "NB-IoT"
   12ec8:	2b07      	cmp	r3, #7
   12eca:	d008      	beq.n	12ede <lte_handler+0xaa>
																									   : "Unknown");
   12ecc:	491b      	ldr	r1, [pc, #108]	; (12f3c <lte_handler+0x108>)
   12ece:	4a1c      	ldr	r2, [pc, #112]	; (12f40 <lte_handler+0x10c>)
   12ed0:	2b09      	cmp	r3, #9
   12ed2:	bf18      	it	ne
   12ed4:	4611      	movne	r1, r2
		printk("Active LTE mode changed: %s",
   12ed6:	481b      	ldr	r0, [pc, #108]	; (12f44 <lte_handler+0x110>)
   12ed8:	e7e4      	b.n	12ea4 <lte_handler+0x70>
   12eda:	491b      	ldr	r1, [pc, #108]	; (12f48 <lte_handler+0x114>)
   12edc:	e7fb      	b.n	12ed6 <lte_handler+0xa2>
															 : evt->lte_mode == LTE_LC_LTE_MODE_NBIOT  ? "NB-IoT"
   12ede:	491b      	ldr	r1, [pc, #108]	; (12f4c <lte_handler+0x118>)
   12ee0:	e7f9      	b.n	12ed6 <lte_handler+0xa2>
				evt->modem_evt == LTE_LC_MODEM_EVT_LIGHT_SEARCH_DONE ? "Light search done" : evt->modem_evt == LTE_LC_MODEM_EVT_SEARCH_DONE ? "Search done"
   12ee2:	7a03      	ldrb	r3, [r0, #8]
		printk("Modem domain event, type: %s",
   12ee4:	b163      	cbz	r3, 12f00 <lte_handler+0xcc>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_RESET_LOOP	? "Reset loop detected"
   12ee6:	2b01      	cmp	r3, #1
   12ee8:	d00c      	beq.n	12f04 <lte_handler+0xd0>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_BATTERY_LOW	? "Low battery"
   12eea:	2b02      	cmp	r3, #2
   12eec:	d00c      	beq.n	12f08 <lte_handler+0xd4>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_OVERHEATED	? "Modem is overheated"
   12eee:	2b03      	cmp	r3, #3
   12ef0:	d00c      	beq.n	12f0c <lte_handler+0xd8>
																																			: "Unknown");
   12ef2:	4917      	ldr	r1, [pc, #92]	; (12f50 <lte_handler+0x11c>)
   12ef4:	4a12      	ldr	r2, [pc, #72]	; (12f40 <lte_handler+0x10c>)
   12ef6:	2b04      	cmp	r3, #4
   12ef8:	bf18      	it	ne
   12efa:	4611      	movne	r1, r2
		printk("Modem domain event, type: %s",
   12efc:	4815      	ldr	r0, [pc, #84]	; (12f54 <lte_handler+0x120>)
   12efe:	e7d1      	b.n	12ea4 <lte_handler+0x70>
   12f00:	4915      	ldr	r1, [pc, #84]	; (12f58 <lte_handler+0x124>)
   12f02:	e7fb      	b.n	12efc <lte_handler+0xc8>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_RESET_LOOP	? "Reset loop detected"
   12f04:	4915      	ldr	r1, [pc, #84]	; (12f5c <lte_handler+0x128>)
   12f06:	e7f9      	b.n	12efc <lte_handler+0xc8>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_BATTERY_LOW	? "Low battery"
   12f08:	4915      	ldr	r1, [pc, #84]	; (12f60 <lte_handler+0x12c>)
   12f0a:	e7f7      	b.n	12efc <lte_handler+0xc8>
																						 : evt->modem_evt == LTE_LC_MODEM_EVT_OVERHEATED	? "Modem is overheated"
   12f0c:	4915      	ldr	r1, [pc, #84]	; (12f64 <lte_handler+0x130>)
   12f0e:	e7f5      	b.n	12efc <lte_handler+0xc8>
   12f10:	0002cdf5 	.word	0x0002cdf5
   12f14:	0002ce84 	.word	0x0002ce84
   12f18:	2000ca80 	.word	0x2000ca80
   12f1c:	0002cddc 	.word	0x0002cddc
   12f20:	0002cea4 	.word	0x0002cea4
   12f24:	0002ced3 	.word	0x0002ced3
   12f28:	0002e0c8 	.word	0x0002e0c8
   12f2c:	0002ce09 	.word	0x0002ce09
   12f30:	0002ce13 	.word	0x0002ce13
   12f34:	0002cefc 	.word	0x0002cefc
   12f38:	0002cf09 	.word	0x0002cf09
   12f3c:	0002ce18 	.word	0x0002ce18
   12f40:	0002ce2a 	.word	0x0002ce2a
   12f44:	0002cf3a 	.word	0x0002cf3a
   12f48:	0002ce1f 	.word	0x0002ce1f
   12f4c:	0002ce24 	.word	0x0002ce24
   12f50:	0002ce32 	.word	0x0002ce32
   12f54:	0002cf56 	.word	0x0002cf56
   12f58:	0002ce5a 	.word	0x0002ce5a
   12f5c:	0002ce6c 	.word	0x0002ce6c
   12f60:	0002ce46 	.word	0x0002ce46
   12f64:	0002ce78 	.word	0x0002ce78

00012f68 <connect_work_fn>:
	if (cloud_connected)
   12f68:	4b10      	ldr	r3, [pc, #64]	; (12fac <connect_work_fn+0x44>)
{
   12f6a:	b510      	push	{r4, lr}
	if (cloud_connected)
   12f6c:	781b      	ldrb	r3, [r3, #0]
   12f6e:	b9db      	cbnz	r3, 12fa8 <connect_work_fn+0x40>
	err = cloud_connect(cloud_backend);
   12f70:	4b0f      	ldr	r3, [pc, #60]	; (12fb0 <connect_work_fn+0x48>)
   12f72:	6818      	ldr	r0, [r3, #0]
 *
 * @return connect result defined by enum cloud_connect_result.
 */
static inline int cloud_connect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   12f74:	b1a8      	cbz	r0, 12fa2 <connect_work_fn+0x3a>
   12f76:	6803      	ldr	r3, [r0, #0]
   12f78:	b19b      	cbz	r3, 12fa2 <connect_work_fn+0x3a>
	    backend->api->connect == NULL) {
   12f7a:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   12f7c:	b18b      	cbz	r3, 12fa2 <connect_work_fn+0x3a>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
	}

	return backend->api->connect(backend);
   12f7e:	4798      	blx	r3
	if (err)
   12f80:	4601      	mov	r1, r0
   12f82:	b110      	cbz	r0, 12f8a <connect_work_fn+0x22>
		printk("cloud_connect, error: %d", err);
   12f84:	480b      	ldr	r0, [pc, #44]	; (12fb4 <connect_work_fn+0x4c>)
   12f86:	f012 ffc6 	bl	25f16 <printk>
	printk("Next connection retry in %d seconds",
   12f8a:	480b      	ldr	r0, [pc, #44]	; (12fb8 <connect_work_fn+0x50>)
   12f8c:	211e      	movs	r1, #30
   12f8e:	f012 ffc2 	bl	25f16 <printk>
}
   12f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule(&connect_work,
   12f96:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12f9a:	2300      	movs	r3, #0
   12f9c:	4807      	ldr	r0, [pc, #28]	; (12fbc <connect_work_fn+0x54>)
   12f9e:	f010 bbf9 	b.w	23794 <k_work_schedule>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   12fa2:	f06f 0101 	mvn.w	r1, #1
   12fa6:	e7ed      	b.n	12f84 <connect_work_fn+0x1c>
}
   12fa8:	bd10      	pop	{r4, pc}
   12faa:	bf00      	nop
   12fac:	2000efca 	.word	0x2000efca
   12fb0:	2000dd50 	.word	0x2000dd50
   12fb4:	0002cf73 	.word	0x0002cf73
   12fb8:	0002cf8c 	.word	0x0002cf8c
   12fbc:	2000cb48 	.word	0x2000cb48

00012fc0 <cloud_update_work_fn>:
{
   12fc0:	b510      	push	{r4, lr}
	if (!cloud_connected)
   12fc2:	4b1b      	ldr	r3, [pc, #108]	; (13030 <cloud_update_work_fn+0x70>)
{
   12fc4:	b086      	sub	sp, #24
	if (!cloud_connected)
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	b923      	cbnz	r3, 12fd4 <cloud_update_work_fn+0x14>
		printk("Not connected to cloud, abort cloud publication");
   12fca:	481a      	ldr	r0, [pc, #104]	; (13034 <cloud_update_work_fn+0x74>)
   12fcc:	f012 ffa3 	bl	25f16 <printk>
}
   12fd0:	b006      	add	sp, #24
   12fd2:	bd10      	pop	{r4, pc}
   12fd4:	4c18      	ldr	r4, [pc, #96]	; (13038 <cloud_update_work_fn+0x78>)
   12fd6:	4620      	mov	r0, r4
   12fd8:	f013 fabc 	bl	26554 <z_log_strdup>
   12fdc:	4601      	mov	r1, r0
	printk("Publishing message: %s", log_strdup(CONFIG_CLOUD_MESSAGE));
   12fde:	4817      	ldr	r0, [pc, #92]	; (1303c <cloud_update_work_fn+0x7c>)
   12fe0:	f012 ff99 	bl	25f16 <printk>
	struct cloud_msg msg = {
   12fe4:	2214      	movs	r2, #20
   12fe6:	2100      	movs	r1, #0
   12fe8:	a801      	add	r0, sp, #4
   12fea:	f017 ff4d 	bl	2ae88 <memset>
		.len = strlen(CONFIG_CLOUD_MESSAGE)};
   12fee:	4620      	mov	r0, r4
	struct cloud_msg msg = {
   12ff0:	9400      	str	r4, [sp, #0]
		.len = strlen(CONFIG_CLOUD_MESSAGE)};
   12ff2:	f7fd ffe3 	bl	10fbc <strlen>
	if (strcmp(CONFIG_CLOUD_BACKEND, "NRF_CLOUD") == 0)
   12ff6:	4912      	ldr	r1, [pc, #72]	; (13040 <cloud_update_work_fn+0x80>)
	struct cloud_msg msg = {
   12ff8:	9001      	str	r0, [sp, #4]
	if (strcmp(CONFIG_CLOUD_BACKEND, "NRF_CLOUD") == 0)
   12ffa:	4608      	mov	r0, r1
   12ffc:	f7fd ffd4 	bl	10fa8 <strcmp>
   13000:	3800      	subs	r0, #0
   13002:	bf18      	it	ne
   13004:	2001      	movne	r0, #1
	err = cloud_send(cloud_backend, &msg);
   13006:	4b0f      	ldr	r3, [pc, #60]	; (13044 <cloud_update_work_fn+0x84>)
   13008:	f8ad 000c 	strh.w	r0, [sp, #12]
   1300c:	6818      	ldr	r0, [r3, #0]
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_send(const struct cloud_backend *const backend,
			     struct cloud_msg *msg)
{
	if (backend == NULL || backend->api == NULL ||
   1300e:	b160      	cbz	r0, 1302a <cloud_update_work_fn+0x6a>
   13010:	6803      	ldr	r3, [r0, #0]
   13012:	b153      	cbz	r3, 1302a <cloud_update_work_fn+0x6a>
	    backend->api->send == NULL) {
   13014:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   13016:	b143      	cbz	r3, 1302a <cloud_update_work_fn+0x6a>
		return -ENOTSUP;
	}

	return backend->api->send(backend, msg);
   13018:	4669      	mov	r1, sp
   1301a:	4798      	blx	r3
	if (err)
   1301c:	4601      	mov	r1, r0
   1301e:	2800      	cmp	r0, #0
   13020:	d0d6      	beq.n	12fd0 <cloud_update_work_fn+0x10>
		printk("cloud_send failed, error: %d", err);
   13022:	4809      	ldr	r0, [pc, #36]	; (13048 <cloud_update_work_fn+0x88>)
   13024:	f012 ff77 	bl	25f16 <printk>
   13028:	e7d2      	b.n	12fd0 <cloud_update_work_fn+0x10>
		return -ENOTSUP;
   1302a:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1302e:	e7f8      	b.n	13022 <cloud_update_work_fn+0x62>
   13030:	2000efca 	.word	0x2000efca
   13034:	0002cfb0 	.word	0x0002cfb0
   13038:	0002cfe0 	.word	0x0002cfe0
   1303c:	0002d01f 	.word	0x0002d01f
   13040:	0002d036 	.word	0x0002d036
   13044:	2000dd50 	.word	0x2000dd50
   13048:	0002edcf 	.word	0x0002edcf

0001304c <gnss_event_handler>:
	switch (event)
   1304c:	2801      	cmp	r0, #1
{
   1304e:	4602      	mov	r2, r0
   13050:	b508      	push	{r3, lr}
	switch (event)
   13052:	d002      	beq.n	1305a <gnss_event_handler+0xe>
   13054:	2802      	cmp	r0, #2
   13056:	d00b      	beq.n	13070 <gnss_event_handler+0x24>
}
   13058:	bd08      	pop	{r3, pc}
		retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
   1305a:	21e8      	movs	r1, #232	; 0xe8
   1305c:	4809      	ldr	r0, [pc, #36]	; (13084 <gnss_event_handler+0x38>)
   1305e:	f00f facd 	bl	225fc <nrf_modem_gnss_read>
		if (retval == 0)
   13062:	2800      	cmp	r0, #0
   13064:	d1f8      	bne.n	13058 <gnss_event_handler+0xc>
   13066:	4808      	ldr	r0, [pc, #32]	; (13088 <gnss_event_handler+0x3c>)
}
   13068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1306c:	f010 b9c8 	b.w	23400 <z_impl_k_sem_give>
		retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
   13070:	2201      	movs	r2, #1
   13072:	21e8      	movs	r1, #232	; 0xe8
   13074:	4803      	ldr	r0, [pc, #12]	; (13084 <gnss_event_handler+0x38>)
   13076:	f00f fac1 	bl	225fc <nrf_modem_gnss_read>
		if (retval == 0)
   1307a:	2800      	cmp	r0, #0
   1307c:	d1ec      	bne.n	13058 <gnss_event_handler+0xc>
   1307e:	4803      	ldr	r0, [pc, #12]	; (1308c <gnss_event_handler+0x40>)
   13080:	e7f2      	b.n	13068 <gnss_event_handler+0x1c>
   13082:	bf00      	nop
   13084:	2000cb78 	.word	0x2000cb78
   13088:	2000ca98 	.word	0x2000ca98
   1308c:	2000cab0 	.word	0x2000cab0

00013090 <nrf_modem_recoverable_error_handler>:
{
   13090:	4601      	mov	r1, r0
	printk("Modem library recoverable error: %u", error);
   13092:	4801      	ldr	r0, [pc, #4]	; (13098 <nrf_modem_recoverable_error_handler+0x8>)
   13094:	f012 bf3f 	b.w	25f16 <printk>
   13098:	0002d040 	.word	0x0002d040

0001309c <checkForSem>:
	printk("VDOP:           %.01f\n", pvt_data->vdop);
	printk("TDOP:           %.01f\n", pvt_data->tdop);
}

void checkForSem(void)
{
   1309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1309e:	4d5c      	ldr	r5, [pc, #368]	; (13210 <checkForSem+0x174>)
   130a0:	f04f 33ff 	mov.w	r3, #4294967295
   130a4:	f04f 32ff 	mov.w	r2, #4294967295
   130a8:	2103      	movs	r1, #3
   130aa:	4628      	mov	r0, r5
   130ac:	f011 f8be 	bl	2422c <z_impl_k_poll>
	k_poll(events, 3, K_FOREVER); //
	// If there is new PVT data, regardless of its validity
	if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
   130b0:	68eb      	ldr	r3, [r5, #12]
   130b2:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   130b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   130ba:	f040 80a7 	bne.w	1320c <checkForSem+0x170>
		k_sem_take(events[0].sem, K_NO_WAIT) == 0)
   130be:	6928      	ldr	r0, [r5, #16]
	return z_impl_k_sem_take(sem, timeout);
   130c0:	2200      	movs	r2, #0
   130c2:	2300      	movs	r3, #0
   130c4:	f010 f9c2 	bl	2344c <z_impl_k_sem_take>
	if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
   130c8:	2800      	cmp	r0, #0
   130ca:	f040 809f 	bne.w	1320c <checkForSem+0x170>
   130ce:	4e51      	ldr	r6, [pc, #324]	; (13214 <checkForSem+0x178>)
	uint8_t unhealthy = 0;
   130d0:	4603      	mov	r3, r0
	uint8_t in_fix = 0;
   130d2:	4602      	mov	r2, r0
	uint8_t tracked = 0;
   130d4:	4601      	mov	r1, r0
   130d6:	4634      	mov	r4, r6
		if (pvt_data->sv[i].sv > 0)
   130d8:	f8b6 7052 	ldrh.w	r7, [r6, #82]	; 0x52
   130dc:	b16f      	cbz	r7, 130fa <checkForSem+0x5e>
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX)
   130de:	f896 705c 	ldrb.w	r7, [r6, #92]	; 0x5c
			tracked++;
   130e2:	3101      	adds	r1, #1
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX)
   130e4:	f017 0f02 	tst.w	r7, #2
				in_fix++;
   130e8:	bf1c      	itt	ne
   130ea:	3201      	addne	r2, #1
   130ec:	b2d2      	uxtbne	r2, r2
			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_UNHEALTHY)
   130ee:	073f      	lsls	r7, r7, #28
				unhealthy++;
   130f0:	bf48      	it	mi
   130f2:	3301      	addmi	r3, #1
			tracked++;
   130f4:	b2c9      	uxtb	r1, r1
				unhealthy++;
   130f6:	bf48      	it	mi
   130f8:	b2db      	uxtbmi	r3, r3
	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i)
   130fa:	3001      	adds	r0, #1
   130fc:	280c      	cmp	r0, #12
   130fe:	f106 060c 	add.w	r6, r6, #12
   13102:	d1e9      	bne.n	130d8 <checkForSem+0x3c>
	printk("Tracking: %2d Using: %2d Unhealthy: %d\n", tracked, in_fix, unhealthy);
   13104:	4844      	ldr	r0, [pc, #272]	; (13218 <checkForSem+0x17c>)
   13106:	f012 ff06 	bl	25f16 <printk>
		// printk("\033[1;1H"); // These two lines clears the console between printing
		// printk("\033[2J");
		print_satellite_stats(&last_pvt); // Prints sat stats

		// If there is new, valid PVT data:
		if (events[2].state == K_POLL_STATE_SEM_AVAILABLE &&
   1310a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1310c:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   13110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13114:	d16e      	bne.n	131f4 <checkForSem+0x158>
			k_sem_take(events[2].sem, K_NO_WAIT) == 0)
   13116:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   13118:	2200      	movs	r2, #0
   1311a:	2300      	movs	r3, #0
   1311c:	f010 f996 	bl	2344c <z_impl_k_sem_take>
		if (events[2].state == K_POLL_STATE_SEM_AVAILABLE &&
   13120:	2800      	cmp	r0, #0
   13122:	d167      	bne.n	131f4 <checkForSem+0x158>
		{
			printk("Fix available!");
   13124:	483d      	ldr	r0, [pc, #244]	; (1321c <checkForSem+0x180>)
   13126:	f012 fef6 	bl	25f16 <printk>
	printk("Latitude:       %.06f\n", pvt_data->latitude);
   1312a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1312e:	483c      	ldr	r0, [pc, #240]	; (13220 <checkForSem+0x184>)
   13130:	f012 fef1 	bl	25f16 <printk>
	printk("Longitude:      %.06f\n", pvt_data->longitude);
   13134:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13138:	483a      	ldr	r0, [pc, #232]	; (13224 <checkForSem+0x188>)
   1313a:	f012 feec 	bl	25f16 <printk>
	printk("Altitude:       %.01f m\n", pvt_data->altitude);
   1313e:	6920      	ldr	r0, [r4, #16]
   13140:	f7fd f9e2 	bl	10508 <__aeabi_f2d>
   13144:	4602      	mov	r2, r0
   13146:	460b      	mov	r3, r1
   13148:	4837      	ldr	r0, [pc, #220]	; (13228 <checkForSem+0x18c>)
   1314a:	f012 fee4 	bl	25f16 <printk>
	printk("Accuracy:       %.01f m\n", pvt_data->accuracy);
   1314e:	6960      	ldr	r0, [r4, #20]
   13150:	f7fd f9da 	bl	10508 <__aeabi_f2d>
   13154:	4602      	mov	r2, r0
   13156:	460b      	mov	r3, r1
   13158:	4834      	ldr	r0, [pc, #208]	; (1322c <checkForSem+0x190>)
   1315a:	f012 fedc 	bl	25f16 <printk>
	printk("Speed:          %.01f m/s\n", pvt_data->speed);
   1315e:	69e0      	ldr	r0, [r4, #28]
   13160:	f7fd f9d2 	bl	10508 <__aeabi_f2d>
   13164:	4602      	mov	r2, r0
   13166:	460b      	mov	r3, r1
   13168:	4831      	ldr	r0, [pc, #196]	; (13230 <checkForSem+0x194>)
   1316a:	f012 fed4 	bl	25f16 <printk>
	printk("Speed accuracy: %.01f m/s\n", pvt_data->speed_accuracy);
   1316e:	6a20      	ldr	r0, [r4, #32]
   13170:	f7fd f9ca 	bl	10508 <__aeabi_f2d>
   13174:	4602      	mov	r2, r0
   13176:	460b      	mov	r3, r1
   13178:	482e      	ldr	r0, [pc, #184]	; (13234 <checkForSem+0x198>)
   1317a:	f012 fecc 	bl	25f16 <printk>
	printk("Heading:        %.01f deg\n", pvt_data->heading);
   1317e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13180:	f7fd f9c2 	bl	10508 <__aeabi_f2d>
   13184:	4602      	mov	r2, r0
   13186:	460b      	mov	r3, r1
   13188:	482b      	ldr	r0, [pc, #172]	; (13238 <checkForSem+0x19c>)
   1318a:	f012 fec4 	bl	25f16 <printk>
	printk("Date:           %04u-%02u-%02u\n",
   1318e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   13192:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   13196:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   13198:	4828      	ldr	r0, [pc, #160]	; (1323c <checkForSem+0x1a0>)
   1319a:	f012 febc 	bl	25f16 <printk>
	printk("Time (UTC):     %02u:%02u:%02u.%03u\n",
   1319e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   131a0:	4827      	ldr	r0, [pc, #156]	; (13240 <checkForSem+0x1a4>)
   131a2:	9300      	str	r3, [sp, #0]
   131a4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   131a8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   131ac:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   131b0:	f012 feb1 	bl	25f16 <printk>
	printk("PDOP:           %.01f\n", pvt_data->pdop);
   131b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   131b6:	f7fd f9a7 	bl	10508 <__aeabi_f2d>
   131ba:	4602      	mov	r2, r0
   131bc:	460b      	mov	r3, r1
   131be:	4821      	ldr	r0, [pc, #132]	; (13244 <checkForSem+0x1a8>)
   131c0:	f012 fea9 	bl	25f16 <printk>
	printk("HDOP:           %.01f\n", pvt_data->hdop);
   131c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
   131c6:	f7fd f99f 	bl	10508 <__aeabi_f2d>
   131ca:	4602      	mov	r2, r0
   131cc:	460b      	mov	r3, r1
   131ce:	481e      	ldr	r0, [pc, #120]	; (13248 <checkForSem+0x1ac>)
   131d0:	f012 fea1 	bl	25f16 <printk>
	printk("VDOP:           %.01f\n", pvt_data->vdop);
   131d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   131d6:	f7fd f997 	bl	10508 <__aeabi_f2d>
   131da:	4602      	mov	r2, r0
   131dc:	460b      	mov	r3, r1
   131de:	481b      	ldr	r0, [pc, #108]	; (1324c <checkForSem+0x1b0>)
   131e0:	f012 fe99 	bl	25f16 <printk>
	printk("TDOP:           %.01f\n", pvt_data->tdop);
   131e4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   131e6:	f7fd f98f 	bl	10508 <__aeabi_f2d>
   131ea:	4602      	mov	r2, r0
   131ec:	460b      	mov	r3, r1
   131ee:	4818      	ldr	r0, [pc, #96]	; (13250 <checkForSem+0x1b4>)
   131f0:	f012 fe91 	bl	25f16 <printk>
			print_fix_data(&last_pvt); // Prints the fix data
			//cloud_send(cloud_backend, &last_pvt);
									   // Her skal vi sende data!
		}
		events[0].state = K_POLL_STATE_NOT_READY;
   131f4:	68eb      	ldr	r3, [r5, #12]
   131f6:	f36f 3352 	bfc	r3, #13, #6
   131fa:	60eb      	str	r3, [r5, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
   131fc:	6a2b      	ldr	r3, [r5, #32]
   131fe:	f36f 3352 	bfc	r3, #13, #6
   13202:	622b      	str	r3, [r5, #32]
		events[2].state = K_POLL_STATE_NOT_READY;
   13204:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   13206:	f36f 3352 	bfc	r3, #13, #6
   1320a:	636b      	str	r3, [r5, #52]	; 0x34
	}
}
   1320c:	b003      	add	sp, #12
   1320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13210:	2000c500 	.word	0x2000c500
   13214:	2000cb78 	.word	0x2000cb78
   13218:	0002d064 	.word	0x0002d064
   1321c:	0002d08c 	.word	0x0002d08c
   13220:	0002d09b 	.word	0x0002d09b
   13224:	0002d0b2 	.word	0x0002d0b2
   13228:	0002d0c9 	.word	0x0002d0c9
   1322c:	0002d0e2 	.word	0x0002d0e2
   13230:	0002d0fb 	.word	0x0002d0fb
   13234:	0002d116 	.word	0x0002d116
   13238:	0002d131 	.word	0x0002d131
   1323c:	0002d14c 	.word	0x0002d14c
   13240:	0002d16c 	.word	0x0002d16c
   13244:	0002d191 	.word	0x0002d191
   13248:	0002d1a8 	.word	0x0002d1a8
   1324c:	0002d1bf 	.word	0x0002d1bf
   13250:	0002d1d6 	.word	0x0002d1d6

00013254 <main>:
	printk("Set fix reset to %d sec and fix interval to %d min \n", fix_interval, fix_retry);
	return 0;
}

void main(void)
{
   13254:	b508      	push	{r3, lr}
	if (strlen(CONFIG_SAU_AT_MAGPIO) > 0)
   13256:	4842      	ldr	r0, [pc, #264]	; (13360 <main+0x10c>)
   13258:	f7fd feb0 	bl	10fbc <strlen>
   1325c:	2800      	cmp	r0, #0
   1325e:	d02f      	beq.n	132c0 <main+0x6c>
		if (nrf_modem_at_printf("%s", CONFIG_SAU_AT_MAGPIO) != 0) // What are these?
   13260:	493f      	ldr	r1, [pc, #252]	; (13360 <main+0x10c>)
   13262:	4840      	ldr	r0, [pc, #256]	; (13364 <main+0x110>)
   13264:	f00e fe00 	bl	21e68 <nrf_modem_at_printf>
   13268:	2800      	cmp	r0, #0
   1326a:	d029      	beq.n	132c0 <main+0x6c>
			printk("Failed to set MAGPIO configuration");
   1326c:	483e      	ldr	r0, [pc, #248]	; (13368 <main+0x114>)
	printk("Modem init done \n");
   1326e:	f012 fe52 	bl	25f16 <printk>
	if (nrf_modem_gnss_event_handler_set(gnss_event_handler) != 0)
   13272:	483e      	ldr	r0, [pc, #248]	; (1336c <main+0x118>)
   13274:	f00f fc1e 	bl	22ab4 <nrf_modem_gnss_event_handler_set>
   13278:	2800      	cmp	r0, #0
   1327a:	d041      	beq.n	13300 <main+0xac>
		printk("Failed to set GNSS event handler");
   1327c:	483c      	ldr	r0, [pc, #240]	; (13370 <main+0x11c>)
	printk("gnss modem started! \n");
   1327e:	f012 fe4a 	bl	25f16 <printk>
	modem_init();
	sample_init(); // Assistance_init is called here
	gnss_init_and_start();

	cloud_backend = cloud_get_binding(CONFIG_CLOUD_BACKEND);
   13282:	483c      	ldr	r0, [pc, #240]	; (13374 <main+0x120>)
   13284:	f009 fd82 	bl	1cd8c <cloud_get_binding>
   13288:	4a3b      	ldr	r2, [pc, #236]	; (13378 <main+0x124>)
   1328a:	6010      	str	r0, [r2, #0]
	if (backend == NULL || backend->api == NULL ||
   1328c:	2800      	cmp	r0, #0
   1328e:	d064      	beq.n	1335a <main+0x106>
   13290:	6803      	ldr	r3, [r0, #0]
   13292:	2b00      	cmp	r3, #0
   13294:	d061      	beq.n	1335a <main+0x106>
	    backend->api->init == NULL) {
   13296:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   13298:	2b00      	cmp	r3, #0
   1329a:	d05e      	beq.n	1335a <main+0x106>
	return backend->api->init(backend, handler);
   1329c:	4937      	ldr	r1, [pc, #220]	; (1337c <main+0x128>)
   1329e:	4798      	blx	r3
	__ASSERT(cloud_backend != NULL, "%s backend not found",
			 CONFIG_CLOUD_BACKEND);
	int err = cloud_init(cloud_backend, cloud_event_handler);
	if (err)
   132a0:	4601      	mov	r1, r0
   132a2:	b110      	cbz	r0, 132aa <main+0x56>
	{
		printk("Cloud backend could not be initialized, error: %d",
   132a4:	4836      	ldr	r0, [pc, #216]	; (13380 <main+0x12c>)
   132a6:	f012 fe36 	bl	25f16 <printk>
	k_work_init_delayable(&cloud_update_work, cloud_update_work_fn);
   132aa:	4936      	ldr	r1, [pc, #216]	; (13384 <main+0x130>)
   132ac:	4836      	ldr	r0, [pc, #216]	; (13388 <main+0x134>)
   132ae:	f017 faa9 	bl	2a804 <k_work_init_delayable>
	k_work_init_delayable(&connect_work, connect_work_fn);
   132b2:	4936      	ldr	r1, [pc, #216]	; (1338c <main+0x138>)
   132b4:	4836      	ldr	r0, [pc, #216]	; (13390 <main+0x13c>)
   132b6:	f017 faa5 	bl	2a804 <k_work_init_delayable>
	}
	work_init(); // Cloud related work fn 

	for (;;)
	{
		checkForSem(); // Polling function
   132ba:	f7ff feef 	bl	1309c <checkForSem>
	for (;;)
   132be:	e7fc      	b.n	132ba <main+0x66>
	if (strlen(CONFIG_SAU_AT_COEX0) > 0)
   132c0:	4834      	ldr	r0, [pc, #208]	; (13394 <main+0x140>)
   132c2:	f7fd fe7b 	bl	10fbc <strlen>
   132c6:	b130      	cbz	r0, 132d6 <main+0x82>
		if (nrf_modem_at_printf("%s", CONFIG_SAU_AT_COEX0) != 0) // What are these?
   132c8:	4932      	ldr	r1, [pc, #200]	; (13394 <main+0x140>)
   132ca:	4826      	ldr	r0, [pc, #152]	; (13364 <main+0x110>)
   132cc:	f00e fdcc 	bl	21e68 <nrf_modem_at_printf>
   132d0:	b108      	cbz	r0, 132d6 <main+0x82>
			printk("Failed to set COEX0 configuration");
   132d2:	4831      	ldr	r0, [pc, #196]	; (13398 <main+0x144>)
   132d4:	e7cb      	b.n	1326e <main+0x1a>
	if (lte_lc_init() != 0)
   132d6:	f015 fe6d 	bl	28fb4 <lte_lc_init>
   132da:	b108      	cbz	r0, 132e0 <main+0x8c>
		printk("Failed to initialize LTE link controller");
   132dc:	482f      	ldr	r0, [pc, #188]	; (1339c <main+0x148>)
   132de:	e7c6      	b.n	1326e <main+0x1a>
	lte_lc_register_handler(lte_handler); // Using the LTE event handler
   132e0:	482f      	ldr	r0, [pc, #188]	; (133a0 <main+0x14c>)
   132e2:	f005 fe45 	bl	18f70 <lte_lc_register_handler>
	lte_lc_psm_req(true);				  // Requesting LTM PSM
   132e6:	2001      	movs	r0, #1
   132e8:	f005 fe56 	bl	18f98 <lte_lc_psm_req>
	if (lte_lc_connect() != 0)			  // The actual connection
   132ec:	f015 fe6a 	bl	28fc4 <lte_lc_connect>
   132f0:	b108      	cbz	r0, 132f6 <main+0xa2>
		printk("Failed to connect to LTE network");
   132f2:	482c      	ldr	r0, [pc, #176]	; (133a4 <main+0x150>)
   132f4:	e7bb      	b.n	1326e <main+0x1a>
	printk("Connected to LTE network, psm true \n");
   132f6:	482c      	ldr	r0, [pc, #176]	; (133a8 <main+0x154>)
   132f8:	f012 fe0d 	bl	25f16 <printk>
	printk("Modem init done \n");
   132fc:	482b      	ldr	r0, [pc, #172]	; (133ac <main+0x158>)
   132fe:	e7b6      	b.n	1326e <main+0x1a>
	printk("Gnss handler set! \n");
   13300:	482b      	ldr	r0, [pc, #172]	; (133b0 <main+0x15c>)
   13302:	f012 fe08 	bl	25f16 <printk>
	if (nrf_modem_gnss_nmea_mask_set(nmea_mask) != 0)
   13306:	201f      	movs	r0, #31
   13308:	f00f fbb6 	bl	22a78 <nrf_modem_gnss_nmea_mask_set>
   1330c:	b108      	cbz	r0, 13312 <main+0xbe>
		printk("Failed to set GNSS NMEA mask");
   1330e:	4829      	ldr	r0, [pc, #164]	; (133b4 <main+0x160>)
   13310:	e7b5      	b.n	1327e <main+0x2a>
	printk("NMEA masks set \n");
   13312:	4829      	ldr	r0, [pc, #164]	; (133b8 <main+0x164>)
   13314:	f012 fdff 	bl	25f16 <printk>
	if (nrf_modem_gnss_use_case_set(use_case) != 0)
   13318:	2001      	movs	r0, #1
   1331a:	f00f fb53 	bl	229c4 <nrf_modem_gnss_use_case_set>
   1331e:	b110      	cbz	r0, 13326 <main+0xd2>
		printk("Failed to set GNSS use case");
   13320:	4826      	ldr	r0, [pc, #152]	; (133bc <main+0x168>)
   13322:	f012 fdf8 	bl	25f16 <printk>
	printk("Use case set \n");
   13326:	4826      	ldr	r0, [pc, #152]	; (133c0 <main+0x16c>)
   13328:	f012 fdf5 	bl	25f16 <printk>
	if (nrf_modem_gnss_fix_retry_set(fix_retry) != 0)
   1332c:	20b4      	movs	r0, #180	; 0xb4
   1332e:	f00f fb85 	bl	22a3c <nrf_modem_gnss_fix_retry_set>
   13332:	b108      	cbz	r0, 13338 <main+0xe4>
		printk("Failed to set GNSS fix retry");
   13334:	4823      	ldr	r0, [pc, #140]	; (133c4 <main+0x170>)
   13336:	e7a2      	b.n	1327e <main+0x2a>
	if (nrf_modem_gnss_fix_interval_set(fix_interval) != 0) // K_MINUTES(15) why not? Would this make the modem get a new fix every 15 minutes?
   13338:	f44f 7061 	mov.w	r0, #900	; 0x384
   1333c:	f00f fb60 	bl	22a00 <nrf_modem_gnss_fix_interval_set>
   13340:	b108      	cbz	r0, 13346 <main+0xf2>
		printk("Failed to set GNSS fix interval");
   13342:	4821      	ldr	r0, [pc, #132]	; (133c8 <main+0x174>)
   13344:	e79b      	b.n	1327e <main+0x2a>
	printk("Set fix reset 180 and fix interval to 15 min \n");
   13346:	4821      	ldr	r0, [pc, #132]	; (133cc <main+0x178>)
   13348:	f012 fde5 	bl	25f16 <printk>
	if (nrf_modem_gnss_start() != 0)
   1334c:	f00f fae6 	bl	2291c <nrf_modem_gnss_start>
   13350:	b108      	cbz	r0, 13356 <main+0x102>
		printk("Failed to start GNSS");
   13352:	481f      	ldr	r0, [pc, #124]	; (133d0 <main+0x17c>)
   13354:	e793      	b.n	1327e <main+0x2a>
	printk("gnss modem started! \n");
   13356:	481f      	ldr	r0, [pc, #124]	; (133d4 <main+0x180>)
   13358:	e791      	b.n	1327e <main+0x2a>
		return -ENOTSUP;
   1335a:	f06f 0185 	mvn.w	r1, #133	; 0x85
   1335e:	e7a1      	b.n	132a4 <main+0x50>
   13360:	0002d25f 	.word	0x0002d25f
   13364:	0002e0c8 	.word	0x0002e0c8
   13368:	0002d27e 	.word	0x0002d27e
   1336c:	0001304d 	.word	0x0001304d
   13370:	0002d35c 	.word	0x0002d35c
   13374:	0002d036 	.word	0x0002d036
   13378:	2000dd50 	.word	0x2000dd50
   1337c:	00012d51 	.word	0x00012d51
   13380:	0002d444 	.word	0x0002d444
   13384:	00012fc1 	.word	0x00012fc1
   13388:	2000cb18 	.word	0x2000cb18
   1338c:	00012f69 	.word	0x00012f69
   13390:	2000cb48 	.word	0x2000cb48
   13394:	0002d2a1 	.word	0x0002d2a1
   13398:	0002d2b9 	.word	0x0002d2b9
   1339c:	0002d2db 	.word	0x0002d2db
   133a0:	00012e35 	.word	0x00012e35
   133a4:	0002d304 	.word	0x0002d304
   133a8:	0002d325 	.word	0x0002d325
   133ac:	0002d34a 	.word	0x0002d34a
   133b0:	0002d37d 	.word	0x0002d37d
   133b4:	0002d391 	.word	0x0002d391
   133b8:	0002d3ae 	.word	0x0002d3ae
   133bc:	0002d3bf 	.word	0x0002d3bf
   133c0:	0002d3db 	.word	0x0002d3db
   133c4:	0002d1ed 	.word	0x0002d1ed
   133c8:	0002d20a 	.word	0x0002d20a
   133cc:	0002d3ea 	.word	0x0002d3ea
   133d0:	0002d419 	.word	0x0002d419
   133d4:	0002d42e 	.word	0x0002d42e

000133d8 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   133d8:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   133da:	4c0a      	ldr	r4, [pc, #40]	; (13404 <crc8_ccitt+0x2c>)
   133dc:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   133de:	4291      	cmp	r1, r2
   133e0:	d100      	bne.n	133e4 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   133e2:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   133e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   133e8:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   133ea:	0903      	lsrs	r3, r0, #4
   133ec:	5ce3      	ldrb	r3, [r4, r3]
   133ee:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   133f2:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   133f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
   133f8:	5ce0      	ldrb	r0, [r4, r3]
   133fa:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   133fe:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   13400:	e7ed      	b.n	133de <crc8_ccitt+0x6>
   13402:	bf00      	nop
   13404:	0002d47a 	.word	0x0002d47a

00013408 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   13408:	2803      	cmp	r0, #3
{
   1340a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1340c:	d906      	bls.n	1341c <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1340e:	f013 ff5d 	bl	272cc <__errno>
   13412:	2309      	movs	r3, #9
   13414:	6003      	str	r3, [r0, #0]
   13416:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   1341a:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1341c:	4b04      	ldr	r3, [pc, #16]	; (13430 <_check_fd+0x28>)
   1341e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   13422:	3008      	adds	r0, #8
   13424:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   13428:	2b00      	cmp	r3, #0
   1342a:	d0f0      	beq.n	1340e <_check_fd+0x6>
	return 0;
   1342c:	2000      	movs	r0, #0
   1342e:	e7f4      	b.n	1341a <_check_fd+0x12>
   13430:	2000dd54 	.word	0x2000dd54

00013434 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   13434:	b570      	push	{r4, r5, r6, lr}
   13436:	4604      	mov	r4, r0
   13438:	460d      	mov	r5, r1
   1343a:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1343c:	f7ff ffe4 	bl	13408 <_check_fd>
   13440:	2800      	cmp	r0, #0
   13442:	db09      	blt.n	13458 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   13444:	4b06      	ldr	r3, [pc, #24]	; (13460 <z_get_fd_obj+0x2c>)
   13446:	0160      	lsls	r0, r4, #5
   13448:	b145      	cbz	r5, 1345c <z_get_fd_obj+0x28>
   1344a:	181a      	adds	r2, r3, r0
   1344c:	6852      	ldr	r2, [r2, #4]
   1344e:	42aa      	cmp	r2, r5
   13450:	d004      	beq.n	1345c <z_get_fd_obj+0x28>
		errno = err;
   13452:	f013 ff3b 	bl	272cc <__errno>
   13456:	6006      	str	r6, [r0, #0]
		return NULL;
   13458:	2000      	movs	r0, #0
   1345a:	e000      	b.n	1345e <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   1345c:	5818      	ldr	r0, [r3, r0]
}
   1345e:	bd70      	pop	{r4, r5, r6, pc}
   13460:	2000dd54 	.word	0x2000dd54

00013464 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   13464:	b570      	push	{r4, r5, r6, lr}
   13466:	4604      	mov	r4, r0
   13468:	460e      	mov	r6, r1
   1346a:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1346c:	f7ff ffcc 	bl	13408 <_check_fd>
   13470:	2800      	cmp	r0, #0
   13472:	db0c      	blt.n	1348e <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   13474:	4b07      	ldr	r3, [pc, #28]	; (13494 <z_get_fd_obj_and_vtable+0x30>)
   13476:	0161      	lsls	r1, r4, #5
   13478:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1347c:	6862      	ldr	r2, [r4, #4]
   1347e:	6032      	str	r2, [r6, #0]

	if (lock) {
   13480:	b11d      	cbz	r5, 1348a <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   13482:	f101 020c 	add.w	r2, r1, #12
   13486:	441a      	add	r2, r3
   13488:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   1348a:	5858      	ldr	r0, [r3, r1]
}
   1348c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1348e:	2000      	movs	r0, #0
   13490:	e7fc      	b.n	1348c <z_get_fd_obj_and_vtable+0x28>
   13492:	bf00      	nop
   13494:	2000dd54 	.word	0x2000dd54

00013498 <z_reserve_fd>:

int z_reserve_fd(void)
{
   13498:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1349a:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1349c:	f04f 32ff 	mov.w	r2, #4294967295
   134a0:	f04f 33ff 	mov.w	r3, #4294967295
   134a4:	4814      	ldr	r0, [pc, #80]	; (134f8 <z_reserve_fd+0x60>)
   134a6:	f00f feb3 	bl	23210 <z_impl_k_mutex_lock>
   134aa:	4a14      	ldr	r2, [pc, #80]	; (134fc <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   134ac:	0163      	lsls	r3, r4, #5
   134ae:	e8d2 1faf 	lda	r1, [r2]
   134b2:	b179      	cbz	r1, 134d4 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   134b4:	3401      	adds	r4, #1
   134b6:	2c04      	cmp	r4, #4
   134b8:	f102 0220 	add.w	r2, r2, #32
   134bc:	d1f6      	bne.n	134ac <z_reserve_fd+0x14>
	errno = ENFILE;
   134be:	f013 ff05 	bl	272cc <__errno>
   134c2:	2317      	movs	r3, #23
	return -1;
   134c4:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   134c8:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   134ca:	480b      	ldr	r0, [pc, #44]	; (134f8 <z_reserve_fd+0x60>)
   134cc:	f00f ff1e 	bl	2330c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   134d0:	4620      	mov	r0, r4
   134d2:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   134d4:	e8d2 0fef 	ldaex	r0, [r2]
   134d8:	3001      	adds	r0, #1
   134da:	e8c2 0fec 	stlex	ip, r0, [r2]
   134de:	f1bc 0f00 	cmp.w	ip, #0
   134e2:	d1f7      	bne.n	134d4 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   134e4:	4806      	ldr	r0, [pc, #24]	; (13500 <z_reserve_fd+0x68>)
   134e6:	18c2      	adds	r2, r0, r3
   134e8:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   134ea:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   134ec:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   134ee:	4418      	add	r0, r3
   134f0:	f017 f872 	bl	2a5d8 <z_impl_k_mutex_init>
   134f4:	e7e9      	b.n	134ca <z_reserve_fd+0x32>
   134f6:	bf00      	nop
   134f8:	2000c9ac 	.word	0x2000c9ac
   134fc:	2000dd5c 	.word	0x2000dd5c
   13500:	2000dd54 	.word	0x2000dd54

00013504 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   13504:	b410      	push	{r4}
   13506:	4604      	mov	r4, r0
   13508:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1350a:	4b0a      	ldr	r3, [pc, #40]	; (13534 <z_finalize_fd+0x30>)
   1350c:	0162      	lsls	r2, r4, #5
   1350e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   13512:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   13514:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   13516:	b148      	cbz	r0, 1352c <z_finalize_fd+0x28>
   13518:	68c4      	ldr	r4, [r0, #12]
   1351a:	b13c      	cbz	r4, 1352c <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1351c:	320c      	adds	r2, #12
   1351e:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   13520:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   13524:	f240 1205 	movw	r2, #261	; 0x105
   13528:	f012 bca4 	b.w	25e74 <z_fdtable_call_ioctl.constprop.0>
}
   1352c:	f85d 4b04 	ldr.w	r4, [sp], #4
   13530:	4770      	bx	lr
   13532:	bf00      	nop
   13534:	2000dd54 	.word	0x2000dd54

00013538 <z_free_fd>:

void z_free_fd(int fd)
{
   13538:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1353a:	4b0d      	ldr	r3, [pc, #52]	; (13570 <z_free_fd+0x38>)
   1353c:	0140      	lsls	r0, r0, #5
   1353e:	f100 0208 	add.w	r2, r0, #8
   13542:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13544:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   13548:	b181      	cbz	r1, 1356c <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1354a:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1354c:	e8d2 5fef 	ldaex	r5, [r2]
   13550:	428d      	cmp	r5, r1
   13552:	d104      	bne.n	1355e <z_free_fd+0x26>
   13554:	e8c2 4fec 	stlex	ip, r4, [r2]
   13558:	f1bc 0f00 	cmp.w	ip, #0
   1355c:	d1f6      	bne.n	1354c <z_free_fd+0x14>
   1355e:	d1f1      	bne.n	13544 <z_free_fd+0xc>
	if (old_rc != 1) {
   13560:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   13562:	bf01      	itttt	eq
   13564:	2200      	moveq	r2, #0
   13566:	1819      	addeq	r1, r3, r0
   13568:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   1356a:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1356c:	bd30      	pop	{r4, r5, pc}
   1356e:	bf00      	nop
   13570:	2000dd54 	.word	0x2000dd54

00013574 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   13574:	680b      	ldr	r3, [r1, #0]
   13576:	3301      	adds	r3, #1
   13578:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1357a:	4b01      	ldr	r3, [pc, #4]	; (13580 <char_out+0xc>)
   1357c:	681b      	ldr	r3, [r3, #0]
   1357e:	4718      	bx	r3
   13580:	2000c53c 	.word	0x2000c53c

00013584 <__printk_hook_install>:
	_char_out = fn;
   13584:	4b01      	ldr	r3, [pc, #4]	; (1358c <__printk_hook_install+0x8>)
   13586:	6018      	str	r0, [r3, #0]
}
   13588:	4770      	bx	lr
   1358a:	bf00      	nop
   1358c:	2000c53c 	.word	0x2000c53c

00013590 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   13590:	b507      	push	{r0, r1, r2, lr}
   13592:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   13594:	2100      	movs	r1, #0
{
   13596:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   13598:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1359a:	4803      	ldr	r0, [pc, #12]	; (135a8 <vprintk+0x18>)
   1359c:	a901      	add	r1, sp, #4
   1359e:	f000 f967 	bl	13870 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   135a2:	b003      	add	sp, #12
   135a4:	f85d fb04 	ldr.w	pc, [sp], #4
   135a8:	00013575 	.word	0x00013575

000135ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   135ac:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   135ae:	2500      	movs	r5, #0
{
   135b0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   135b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   135b6:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   135b8:	a901      	add	r1, sp, #4
   135ba:	4805      	ldr	r0, [pc, #20]	; (135d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   135bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   135be:	f000 f957 	bl	13870 <cbvprintf>

	if (ctx.count < ctx.max) {
   135c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   135c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   135c8:	bfb8      	it	lt
   135ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   135cc:	b005      	add	sp, #20
   135ce:	bd30      	pop	{r4, r5, pc}
   135d0:	00025ef1 	.word	0x00025ef1

000135d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   135d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   135d8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   135dc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   135de:	f019 0808 	ands.w	r8, r9, #8
{
   135e2:	4693      	mov	fp, r2
	if (processing) {
   135e4:	d00e      	beq.n	13604 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   135e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   135e8:	bf0c      	ite	eq
   135ea:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   135ee:	f049 0920 	orrne.w	r9, r9, #32
   135f2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   135f6:	f38b 8811 	msr	BASEPRI, fp
   135fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   135fe:	b003      	add	sp, #12
   13600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   13604:	f8df a198 	ldr.w	sl, [pc, #408]	; 137a0 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13608:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1360c:	2902      	cmp	r1, #2
   1360e:	d107      	bne.n	13620 <process_event+0x4c>
			evt = process_recheck(mgr);
   13610:	4620      	mov	r0, r4
   13612:	f012 fc9a 	bl	25f4a <process_recheck>
		if (evt == EVT_NOP) {
   13616:	2800      	cmp	r0, #0
   13618:	d0ed      	beq.n	135f6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1361a:	2801      	cmp	r0, #1
   1361c:	8b23      	ldrh	r3, [r4, #24]
   1361e:	d14d      	bne.n	136bc <process_event+0xe8>
			res = mgr->last_res;
   13620:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13622:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   13624:	2f00      	cmp	r7, #0
   13626:	da15      	bge.n	13654 <process_event+0x80>
		*clients = mgr->clients;
   13628:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1362a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1362e:	e9c4 8800 	strd	r8, r8, [r4]
   13632:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   13636:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   13638:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1363a:	8b21      	ldrh	r1, [r4, #24]
   1363c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13640:	454a      	cmp	r2, r9
   13642:	d002      	beq.n	1364a <process_event+0x76>
		if (do_monitors
   13644:	68a3      	ldr	r3, [r4, #8]
   13646:	2b00      	cmp	r3, #0
   13648:	d159      	bne.n	136fe <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1364a:	b90d      	cbnz	r5, 13650 <process_event+0x7c>
		    || (transit != NULL)) {
   1364c:	2e00      	cmp	r6, #0
   1364e:	d071      	beq.n	13734 <process_event+0x160>
   13650:	2300      	movs	r3, #0
   13652:	e055      	b.n	13700 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13654:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   13658:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1365a:	2a01      	cmp	r2, #1
   1365c:	d81f      	bhi.n	1369e <process_event+0xca>
		*clients = mgr->clients;
   1365e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   13662:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   13664:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   13666:	b289      	uxth	r1, r1
	list->tail = NULL;
   13668:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1366c:	d10c      	bne.n	13688 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1366e:	2d00      	cmp	r5, #0
   13670:	462b      	mov	r3, r5
   13672:	bf38      	it	cc
   13674:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13676:	b12b      	cbz	r3, 13684 <process_event+0xb0>
				mgr->refs += 1U;
   13678:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1367a:	681b      	ldr	r3, [r3, #0]
   1367c:	3201      	adds	r2, #1
   1367e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   13680:	2b00      	cmp	r3, #0
   13682:	d1f8      	bne.n	13676 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13684:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   13688:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1368a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1368c:	f012 fc5d 	bl	25f4a <process_recheck>
   13690:	2800      	cmp	r0, #0
   13692:	d0d1      	beq.n	13638 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13694:	8b23      	ldrh	r3, [r4, #24]
   13696:	f043 0320 	orr.w	r3, r3, #32
   1369a:	8323      	strh	r3, [r4, #24]
   1369c:	e7cc      	b.n	13638 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1369e:	2b04      	cmp	r3, #4
   136a0:	d10a      	bne.n	136b8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136a2:	f021 0107 	bic.w	r1, r1, #7
   136a6:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   136a8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   136aa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   136ac:	f012 fc4d 	bl	25f4a <process_recheck>
   136b0:	b110      	cbz	r0, 136b8 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   136b2:	f041 0120 	orr.w	r1, r1, #32
   136b6:	8321      	strh	r1, [r4, #24]
   136b8:	2500      	movs	r5, #0
   136ba:	e7bd      	b.n	13638 <process_event+0x64>
		} else if (evt == EVT_START) {
   136bc:	2803      	cmp	r0, #3
   136be:	d109      	bne.n	136d4 <process_event+0x100>
			transit = mgr->transitions->start;
   136c0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136c2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   136c6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136c8:	f043 0306 	orr.w	r3, r3, #6
}
   136cc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   136ce:	8323      	strh	r3, [r4, #24]
		res = 0;
   136d0:	462f      	mov	r7, r5
   136d2:	e7b2      	b.n	1363a <process_event+0x66>
		} else if (evt == EVT_STOP) {
   136d4:	2804      	cmp	r0, #4
   136d6:	d106      	bne.n	136e6 <process_event+0x112>
			transit = mgr->transitions->stop;
   136d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   136de:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136e0:	f043 0304 	orr.w	r3, r3, #4
   136e4:	e7f2      	b.n	136cc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   136e6:	2805      	cmp	r0, #5
   136e8:	d106      	bne.n	136f8 <process_event+0x124>
			transit = mgr->transitions->reset;
   136ea:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136ec:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   136f0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   136f2:	f043 0305 	orr.w	r3, r3, #5
   136f6:	e7e9      	b.n	136cc <process_event+0xf8>
   136f8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   136fa:	462e      	mov	r6, r5
   136fc:	e7e8      	b.n	136d0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   136fe:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13700:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13704:	8321      	strh	r1, [r4, #24]
   13706:	f38b 8811 	msr	BASEPRI, fp
   1370a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1370e:	bb03      	cbnz	r3, 13752 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   13710:	2d00      	cmp	r5, #0
   13712:	d134      	bne.n	1377e <process_event+0x1aa>
			if (transit != NULL) {
   13714:	b116      	cbz	r6, 1371c <process_event+0x148>
				transit(mgr, transition_complete);
   13716:	4651      	mov	r1, sl
   13718:	4620      	mov	r0, r4
   1371a:	47b0      	blx	r6
	__asm__ volatile(
   1371c:	f04f 0320 	mov.w	r3, #32
   13720:	f3ef 8b11 	mrs	fp, BASEPRI
   13724:	f383 8812 	msr	BASEPRI_MAX, r3
   13728:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1372c:	8b23      	ldrh	r3, [r4, #24]
   1372e:	f023 0308 	bic.w	r3, r3, #8
   13732:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13734:	8b23      	ldrh	r3, [r4, #24]
   13736:	06da      	lsls	r2, r3, #27
   13738:	d52a      	bpl.n	13790 <process_event+0x1bc>
			evt = EVT_COMPLETE;
   1373a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1373c:	f023 0310 	bic.w	r3, r3, #16
   13740:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   13742:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   13746:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1374a:	2900      	cmp	r1, #0
   1374c:	f47f af5e 	bne.w	1360c <process_event+0x38>
out:
   13750:	e751      	b.n	135f6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13752:	68a1      	ldr	r1, [r4, #8]
   13754:	2900      	cmp	r1, #0
   13756:	d0db      	beq.n	13710 <process_event+0x13c>
	return node->next;
   13758:	680b      	ldr	r3, [r1, #0]
   1375a:	2b00      	cmp	r3, #0
   1375c:	bf38      	it	cc
   1375e:	2300      	movcc	r3, #0
   13760:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   13762:	4620      	mov	r0, r4
   13764:	463b      	mov	r3, r7
   13766:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1376a:	9201      	str	r2, [sp, #4]
   1376c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1376e:	9a01      	ldr	r2, [sp, #4]
   13770:	f1b9 0f00 	cmp.w	r9, #0
   13774:	d0cc      	beq.n	13710 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13776:	4649      	mov	r1, r9
   13778:	f8d9 3000 	ldr.w	r3, [r9]
   1377c:	e7ed      	b.n	1375a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1377e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   13780:	463b      	mov	r3, r7
   13782:	4620      	mov	r0, r4
   13784:	9201      	str	r2, [sp, #4]
   13786:	682d      	ldr	r5, [r5, #0]
   13788:	f012 fbfb 	bl	25f82 <notify_one>
	while (!sys_slist_is_empty(list)) {
   1378c:	9a01      	ldr	r2, [sp, #4]
   1378e:	e7bf      	b.n	13710 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13790:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13794:	bf1e      	ittt	ne
   13796:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1379a:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1379c:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1379e:	e7d0      	b.n	13742 <process_event+0x16e>
   137a0:	00025faf 	.word	0x00025faf

000137a4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   137a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137a6:	4602      	mov	r2, r0
   137a8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   137aa:	270a      	movs	r7, #10
	size_t val = 0;
   137ac:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   137ae:	4e07      	ldr	r6, [pc, #28]	; (137cc <extract_decimal+0x28>)
   137b0:	460c      	mov	r4, r1
   137b2:	7823      	ldrb	r3, [r4, #0]
   137b4:	3101      	adds	r1, #1
   137b6:	5d9d      	ldrb	r5, [r3, r6]
   137b8:	076d      	lsls	r5, r5, #29
   137ba:	d401      	bmi.n	137c0 <extract_decimal+0x1c>
	}
	*str = sp;
   137bc:	6014      	str	r4, [r2, #0]
	return val;
}
   137be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   137c0:	fb07 3300 	mla	r3, r7, r0, r3
   137c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   137c8:	e7f2      	b.n	137b0 <extract_decimal+0xc>
   137ca:	bf00      	nop
   137cc:	00030304 	.word	0x00030304

000137d0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   137d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d4:	4614      	mov	r4, r2
   137d6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   137d8:	78d3      	ldrb	r3, [r2, #3]
   137da:	4a24      	ldr	r2, [pc, #144]	; (1386c <encode_uint+0x9c>)
	switch (specifier) {
   137dc:	2b6f      	cmp	r3, #111	; 0x6f
   137de:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   137e2:	4606      	mov	r6, r0
   137e4:	f00a 0203 	and.w	r2, sl, #3
   137e8:	460f      	mov	r7, r1
   137ea:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   137ec:	d02d      	beq.n	1384a <encode_uint+0x7a>
   137ee:	d828      	bhi.n	13842 <encode_uint+0x72>
		return 16;
   137f0:	2b58      	cmp	r3, #88	; 0x58
   137f2:	bf14      	ite	ne
   137f4:	250a      	movne	r5, #10
   137f6:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   137f8:	46aa      	mov	sl, r5
   137fa:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   137fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   13802:	4652      	mov	r2, sl
   13804:	465b      	mov	r3, fp
   13806:	4630      	mov	r0, r6
   13808:	4639      	mov	r1, r7
   1380a:	f7fd fa1d 	bl	10c48 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1380e:	2a09      	cmp	r2, #9
   13810:	b2d3      	uxtb	r3, r2
   13812:	d81f      	bhi.n	13854 <encode_uint+0x84>
   13814:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   13816:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13818:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1381a:	bf08      	it	eq
   1381c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1381e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   13822:	d301      	bcc.n	13828 <encode_uint+0x58>
   13824:	45c8      	cmp	r8, r9
   13826:	d812      	bhi.n	1384e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   13828:	7823      	ldrb	r3, [r4, #0]
   1382a:	069b      	lsls	r3, r3, #26
   1382c:	d505      	bpl.n	1383a <encode_uint+0x6a>
		if (radix == 8) {
   1382e:	2d08      	cmp	r5, #8
   13830:	d116      	bne.n	13860 <encode_uint+0x90>
			conv->altform_0 = true;
   13832:	78a3      	ldrb	r3, [r4, #2]
   13834:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   13838:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1383a:	4640      	mov	r0, r8
   1383c:	b003      	add	sp, #12
   1383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   13842:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   13846:	2b70      	cmp	r3, #112	; 0x70
   13848:	e7d3      	b.n	137f2 <encode_uint+0x22>
	switch (specifier) {
   1384a:	2508      	movs	r5, #8
   1384c:	e7d4      	b.n	137f8 <encode_uint+0x28>
		value /= radix;
   1384e:	4606      	mov	r6, r0
   13850:	460f      	mov	r7, r1
   13852:	e7d6      	b.n	13802 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13854:	9a01      	ldr	r2, [sp, #4]
   13856:	2a01      	cmp	r2, #1
   13858:	bf0c      	ite	eq
   1385a:	3337      	addeq	r3, #55	; 0x37
   1385c:	3357      	addne	r3, #87	; 0x57
   1385e:	e7da      	b.n	13816 <encode_uint+0x46>
		} else if (radix == 16) {
   13860:	2d10      	cmp	r5, #16
   13862:	d1ea      	bne.n	1383a <encode_uint+0x6a>
			conv->altform_0c = true;
   13864:	78a3      	ldrb	r3, [r4, #2]
   13866:	f043 0310 	orr.w	r3, r3, #16
   1386a:	e7e5      	b.n	13838 <encode_uint+0x68>
   1386c:	00030304 	.word	0x00030304

00013870 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   13870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13874:	4688      	mov	r8, r1
   13876:	4691      	mov	r9, r2
   13878:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1387a:	2500      	movs	r5, #0
{
   1387c:	b0a3      	sub	sp, #140	; 0x8c
   1387e:	9006      	str	r0, [sp, #24]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13880:	f899 0000 	ldrb.w	r0, [r9]
   13884:	b910      	cbnz	r0, 1388c <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   13886:	4628      	mov	r0, r5
   13888:	f000 bdae 	b.w	143e8 <cbvprintf+0xb78>
		if (*fp != '%') {
   1388c:	f109 0301 	add.w	r3, r9, #1
   13890:	2825      	cmp	r0, #37	; 0x25
   13892:	9307      	str	r3, [sp, #28]
   13894:	d007      	beq.n	138a6 <cbvprintf+0x36>
			OUTC(*fp++);
   13896:	4641      	mov	r1, r8
			OUTC('%');
   13898:	9b06      	ldr	r3, [sp, #24]
   1389a:	4798      	blx	r3
   1389c:	2800      	cmp	r0, #0
   1389e:	f2c0 85a3 	blt.w	143e8 <cbvprintf+0xb78>
   138a2:	3501      	adds	r5, #1
		if (bps == NULL) {
   138a4:	e224      	b.n	13cf0 <cbvprintf+0x480>
		} state = {
   138a6:	2218      	movs	r2, #24
   138a8:	2100      	movs	r1, #0
   138aa:	a814      	add	r0, sp, #80	; 0x50
   138ac:	f017 faec 	bl	2ae88 <memset>
	if (*sp == '%') {
   138b0:	f899 3001 	ldrb.w	r3, [r9, #1]
   138b4:	2b25      	cmp	r3, #37	; 0x25
   138b6:	d059      	beq.n	1396c <cbvprintf+0xfc>
   138b8:	9a07      	ldr	r2, [sp, #28]
   138ba:	4616      	mov	r6, r2
		switch (*sp) {
   138bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   138c0:	2b2b      	cmp	r3, #43	; 0x2b
   138c2:	f000 808b 	beq.w	139dc <cbvprintf+0x16c>
   138c6:	d879      	bhi.n	139bc <cbvprintf+0x14c>
   138c8:	2b20      	cmp	r3, #32
   138ca:	f000 808c 	beq.w	139e6 <cbvprintf+0x176>
   138ce:	2b23      	cmp	r3, #35	; 0x23
   138d0:	f000 808e 	beq.w	139f0 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   138d4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   138d8:	f003 0244 	and.w	r2, r3, #68	; 0x44
   138dc:	2a44      	cmp	r2, #68	; 0x44
   138de:	d103      	bne.n	138e8 <cbvprintf+0x78>
		conv->flag_zero = false;
   138e0:	f36f 1386 	bfc	r3, #6, #1
   138e4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
   138e8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   138ec:	9612      	str	r6, [sp, #72]	; 0x48
   138ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   138f2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
   138f6:	7833      	ldrb	r3, [r6, #0]
   138f8:	2b2a      	cmp	r3, #42	; 0x2a
   138fa:	d17e      	bne.n	139fa <cbvprintf+0x18a>
		conv->width_star = true;
   138fc:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13900:	f043 0301 	orr.w	r3, r3, #1
   13904:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
   13908:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   1390a:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
   1390c:	781a      	ldrb	r2, [r3, #0]
   1390e:	2a2e      	cmp	r2, #46	; 0x2e
   13910:	bf0c      	ite	eq
   13912:	2101      	moveq	r1, #1
   13914:	2100      	movne	r1, #0
   13916:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   1391a:	f361 0241 	bfi	r2, r1, #1, #1
   1391e:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
   13922:	d10b      	bne.n	1393c <cbvprintf+0xcc>
	++sp;
   13924:	1c5a      	adds	r2, r3, #1
   13926:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
   13928:	785a      	ldrb	r2, [r3, #1]
   1392a:	2a2a      	cmp	r2, #42	; 0x2a
   1392c:	d17b      	bne.n	13a26 <cbvprintf+0x1b6>
		conv->prec_star = true;
   1392e:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		return ++sp;
   13932:	3302      	adds	r3, #2
		conv->prec_star = true;
   13934:	f042 0204 	orr.w	r2, r2, #4
   13938:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	switch (*sp) {
   1393c:	461a      	mov	r2, r3
   1393e:	f812 0b01 	ldrb.w	r0, [r2], #1
   13942:	286c      	cmp	r0, #108	; 0x6c
   13944:	f000 80cf 	beq.w	13ae6 <cbvprintf+0x276>
   13948:	d87d      	bhi.n	13a46 <cbvprintf+0x1d6>
   1394a:	2868      	cmp	r0, #104	; 0x68
   1394c:	f000 8084 	beq.w	13a58 <cbvprintf+0x1e8>
   13950:	286a      	cmp	r0, #106	; 0x6a
   13952:	f000 80d2 	beq.w	13afa <cbvprintf+0x28a>
   13956:	284c      	cmp	r0, #76	; 0x4c
   13958:	f000 80d6 	beq.w	13b08 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   1395c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   13960:	f36f 02c6 	bfc	r2, #3, #4
   13964:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
   13968:	461a      	mov	r2, r3
   1396a:	e080      	b.n	13a6e <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   1396c:	f109 0202 	add.w	r2, r9, #2
   13970:	9207      	str	r2, [sp, #28]
   13972:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
   13976:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   1397a:	07de      	lsls	r6, r3, #31
   1397c:	f140 816d 	bpl.w	13c5a <cbvprintf+0x3ea>
			width = va_arg(ap, int);
   13980:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
   13984:	f1ba 0f00 	cmp.w	sl, #0
   13988:	da07      	bge.n	1399a <cbvprintf+0x12a>
				conv->flag_dash = true;
   1398a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
				width = -width;
   1398e:	f1ca 0a00 	rsb	sl, sl, #0
				conv->flag_dash = true;
   13992:	f042 0204 	orr.w	r2, r2, #4
   13996:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		if (conv->prec_star) {
   1399a:	0758      	lsls	r0, r3, #29
   1399c:	f140 8166 	bpl.w	13c6c <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
   139a0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   139a4:	2f00      	cmp	r7, #0
   139a6:	f280 8165 	bge.w	13c74 <cbvprintf+0x404>
				conv->prec_present = false;
   139aa:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   139ae:	f36f 0341 	bfc	r3, #1, #1
   139b2:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   139b6:	f04f 37ff 	mov.w	r7, #4294967295
   139ba:	e15b      	b.n	13c74 <cbvprintf+0x404>
		switch (*sp) {
   139bc:	2b2d      	cmp	r3, #45	; 0x2d
   139be:	d006      	beq.n	139ce <cbvprintf+0x15e>
   139c0:	2b30      	cmp	r3, #48	; 0x30
   139c2:	d187      	bne.n	138d4 <cbvprintf+0x64>
			conv->flag_zero = true;
   139c4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   139c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139cc:	e003      	b.n	139d6 <cbvprintf+0x166>
			conv->flag_dash = true;
   139ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   139d2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   139d6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
   139da:	e76e      	b.n	138ba <cbvprintf+0x4a>
			conv->flag_plus = true;
   139dc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   139e0:	f043 0308 	orr.w	r3, r3, #8
   139e4:	e7f7      	b.n	139d6 <cbvprintf+0x166>
			conv->flag_space = true;
   139e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   139ea:	f043 0310 	orr.w	r3, r3, #16
   139ee:	e7f2      	b.n	139d6 <cbvprintf+0x166>
			conv->flag_hash = true;
   139f0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   139f4:	f043 0320 	orr.w	r3, r3, #32
   139f8:	e7ed      	b.n	139d6 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   139fa:	a812      	add	r0, sp, #72	; 0x48
   139fc:	f7ff fed2 	bl	137a4 <extract_decimal>
	if (sp != wp) {
   13a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13a02:	42b3      	cmp	r3, r6
   13a04:	d081      	beq.n	1390a <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   13a06:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
   13a0a:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
   13a0c:	f3c6 0140 	ubfx	r1, r6, #1, #1
   13a10:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
   13a14:	0042      	lsls	r2, r0, #1
   13a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
   13a1a:	f006 067d 	and.w	r6, r6, #125	; 0x7d
   13a1e:	4332      	orrs	r2, r6
   13a20:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
   13a24:	e771      	b.n	1390a <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   13a26:	a812      	add	r0, sp, #72	; 0x48
   13a28:	f7ff febc 	bl	137a4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   13a2c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
   13a30:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
   13a32:	f3c3 0240 	ubfx	r2, r3, #1, #1
   13a36:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   13a3a:	f360 0341 	bfi	r3, r0, #1, #1
   13a3e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
   13a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13a44:	e77a      	b.n	1393c <cbvprintf+0xcc>
	switch (*sp) {
   13a46:	2874      	cmp	r0, #116	; 0x74
   13a48:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   13a4c:	d059      	beq.n	13b02 <cbvprintf+0x292>
   13a4e:	287a      	cmp	r0, #122	; 0x7a
   13a50:	d184      	bne.n	1395c <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   13a52:	460b      	mov	r3, r1
   13a54:	2106      	movs	r1, #6
   13a56:	e041      	b.n	13adc <cbvprintf+0x26c>
		if (*++sp == 'h') {
   13a58:	7859      	ldrb	r1, [r3, #1]
   13a5a:	2968      	cmp	r1, #104	; 0x68
   13a5c:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   13a60:	d13a      	bne.n	13ad8 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   13a62:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   13a64:	f362 01c6 	bfi	r1, r2, #3, #4
   13a68:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
   13a6c:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   13a6e:	4613      	mov	r3, r2
   13a70:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   13a74:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   13a76:	9307      	str	r3, [sp, #28]
   13a78:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
   13a7c:	f200 80c5 	bhi.w	13c0a <cbvprintf+0x39a>
   13a80:	2a57      	cmp	r2, #87	; 0x57
   13a82:	d84e      	bhi.n	13b22 <cbvprintf+0x2b2>
   13a84:	2a41      	cmp	r2, #65	; 0x41
   13a86:	d004      	beq.n	13a92 <cbvprintf+0x222>
   13a88:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   13a8c:	2b02      	cmp	r3, #2
   13a8e:	f200 80bc 	bhi.w	13c0a <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   13a92:	2104      	movs	r1, #4
   13a94:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
   13a98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   13a9c:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   13aa0:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   13aa4:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   13aa8:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
			|| (conv->specifier == 'A');
   13aac:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   13ab0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   13ab4:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   13ab6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_a = (conv->specifier == 'a')
   13aba:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
   13abe:	b2cb      	uxtb	r3, r1
   13ac0:	f100 80c9 	bmi.w	13c56 <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
   13ac4:	f003 0278 	and.w	r2, r3, #120	; 0x78
   13ac8:	2a18      	cmp	r2, #24
   13aca:	f040 809b 	bne.w	13c04 <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
   13ace:	f36f 03c6 	bfc	r3, #3, #4
   13ad2:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   13ad6:	e082      	b.n	13bde <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
   13ad8:	460b      	mov	r3, r1
   13ada:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   13adc:	f361 03c6 	bfi	r3, r1, #3, #4
   13ae0:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   13ae4:	e7c3      	b.n	13a6e <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   13ae6:	7859      	ldrb	r1, [r3, #1]
   13ae8:	296c      	cmp	r1, #108	; 0x6c
   13aea:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   13aee:	d101      	bne.n	13af4 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   13af0:	2204      	movs	r2, #4
   13af2:	e7b7      	b.n	13a64 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   13af4:	460b      	mov	r3, r1
   13af6:	2103      	movs	r1, #3
   13af8:	e7f0      	b.n	13adc <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   13afa:	2105      	movs	r1, #5
   13afc:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13b00:	e7ec      	b.n	13adc <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   13b02:	460b      	mov	r3, r1
   13b04:	2107      	movs	r1, #7
   13b06:	e7e9      	b.n	13adc <cbvprintf+0x26c>
		conv->unsupported = true;
   13b08:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   13b0c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   13b10:	f023 0302 	bic.w	r3, r3, #2
   13b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   13b18:	f043 0302 	orr.w	r3, r3, #2
   13b1c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
   13b20:	e7a5      	b.n	13a6e <cbvprintf+0x1fe>
   13b22:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   13b26:	2b20      	cmp	r3, #32
   13b28:	d86f      	bhi.n	13c0a <cbvprintf+0x39a>
   13b2a:	a101      	add	r1, pc, #4	; (adr r1, 13b30 <cbvprintf+0x2c0>)
   13b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13b30:	00013be3 	.word	0x00013be3
   13b34:	00013c0b 	.word	0x00013c0b
   13b38:	00013c0b 	.word	0x00013c0b
   13b3c:	00013c0b 	.word	0x00013c0b
   13b40:	00013c0b 	.word	0x00013c0b
   13b44:	00013c0b 	.word	0x00013c0b
   13b48:	00013c0b 	.word	0x00013c0b
   13b4c:	00013c0b 	.word	0x00013c0b
   13b50:	00013c0b 	.word	0x00013c0b
   13b54:	00013a93 	.word	0x00013a93
   13b58:	00013c0b 	.word	0x00013c0b
   13b5c:	00013be3 	.word	0x00013be3
   13b60:	00013bb5 	.word	0x00013bb5
   13b64:	00013a93 	.word	0x00013a93
   13b68:	00013a93 	.word	0x00013a93
   13b6c:	00013a93 	.word	0x00013a93
   13b70:	00013c0b 	.word	0x00013c0b
   13b74:	00013bb5 	.word	0x00013bb5
   13b78:	00013c0b 	.word	0x00013c0b
   13b7c:	00013c0b 	.word	0x00013c0b
   13b80:	00013c0b 	.word	0x00013c0b
   13b84:	00013c0b 	.word	0x00013c0b
   13b88:	00013c19 	.word	0x00013c19
   13b8c:	00013be3 	.word	0x00013be3
   13b90:	00013c39 	.word	0x00013c39
   13b94:	00013c0b 	.word	0x00013c0b
   13b98:	00013c0b 	.word	0x00013c0b
   13b9c:	00013c39 	.word	0x00013c39
   13ba0:	00013c0b 	.word	0x00013c0b
   13ba4:	00013be3 	.word	0x00013be3
   13ba8:	00013c0b 	.word	0x00013c0b
   13bac:	00013c0b 	.word	0x00013c0b
   13bb0:	00013be3 	.word	0x00013be3
		conv->specifier_cat = SPECIFIER_SINT;
   13bb4:	2101      	movs	r1, #1
   13bb6:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_cat = SPECIFIER_UINT;
   13bba:	f361 0302 	bfi	r3, r1, #0, #3
   13bbe:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   13bc2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13bc6:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13bca:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   13bcc:	bf02      	ittt	eq
   13bce:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
   13bd2:	f041 0101 	orreq.w	r1, r1, #1
   13bd6:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
   13bda:	2a63      	cmp	r2, #99	; 0x63
   13bdc:	d005      	beq.n	13bea <cbvprintf+0x37a>
	bool unsupported = false;
   13bde:	2300      	movs	r3, #0
   13be0:	e006      	b.n	13bf0 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
   13be2:	2102      	movs	r1, #2
   13be4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   13be8:	e7e7      	b.n	13bba <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   13bea:	3b00      	subs	r3, #0
   13bec:	bf18      	it	ne
   13bee:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   13bf0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   13bf4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   13bf8:	430b      	orrs	r3, r1
   13bfa:	f363 0241 	bfi	r2, r3, #1, #1
   13bfe:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
   13c02:	e6b8      	b.n	13976 <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
   13c04:	f013 0f38 	tst.w	r3, #56	; 0x38
   13c08:	d0e9      	beq.n	13bde <cbvprintf+0x36e>
			conv->invalid = true;
   13c0a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   13c0e:	f043 0301 	orr.w	r3, r3, #1
   13c12:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   13c16:	e7e2      	b.n	13bde <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
   13c18:	2203      	movs	r2, #3
   13c1a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   13c1e:	f362 0302 	bfi	r3, r2, #0, #3
   13c22:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   13c26:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13c2a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13c2e:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   13c32:	427b      	negs	r3, r7
   13c34:	417b      	adcs	r3, r7
   13c36:	e7db      	b.n	13bf0 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
   13c38:	2203      	movs	r2, #3
   13c3a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   13c3e:	f362 0302 	bfi	r3, r2, #0, #3
   13c42:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
   13c46:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13c4a:	f013 0f78 	tst.w	r3, #120	; 0x78
   13c4e:	bf14      	ite	ne
   13c50:	2301      	movne	r3, #1
   13c52:	2300      	moveq	r3, #0
   13c54:	e7cc      	b.n	13bf0 <cbvprintf+0x380>
			unsupported = true;
   13c56:	2301      	movs	r3, #1
   13c58:	e7ca      	b.n	13bf0 <cbvprintf+0x380>
		} else if (conv->width_present) {
   13c5a:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   13c5e:	2a00      	cmp	r2, #0
		int width = -1;
   13c60:	bfac      	ite	ge
   13c62:	f04f 3aff 	movge.w	sl, #4294967295
			width = conv->width_value;
   13c66:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
   13c6a:	e696      	b.n	1399a <cbvprintf+0x12a>
		} else if (conv->prec_present) {
   13c6c:	0799      	lsls	r1, r3, #30
   13c6e:	f57f aea2 	bpl.w	139b6 <cbvprintf+0x146>
			precision = conv->prec_value;
   13c72:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
   13c74:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   13c76:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
   13c7a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   13c7e:	f003 0307 	and.w	r3, r3, #7
   13c82:	2b04      	cmp	r3, #4
   13c84:	d109      	bne.n	13c9a <cbvprintf+0x42a>
		    && !conv->prec_present) {
   13c86:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   13c8a:	079a      	lsls	r2, r3, #30
   13c8c:	d405      	bmi.n	13c9a <cbvprintf+0x42a>
			if (conv->specifier_a) {
   13c8e:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   13c92:	2b00      	cmp	r3, #0
   13c94:	bfb4      	ite	lt
   13c96:	270d      	movlt	r7, #13
   13c98:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   13c9a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
   13c9e:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
   13ca2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   13ca6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   13ca8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   13cac:	d136      	bne.n	13d1c <cbvprintf+0x4ac>
			switch (length_mod) {
   13cae:	1ecb      	subs	r3, r1, #3
   13cb0:	2b04      	cmp	r3, #4
   13cb2:	d820      	bhi.n	13cf6 <cbvprintf+0x486>
   13cb4:	e8df f003 	tbb	[pc, r3]
   13cb8:	1f070703 	.word	0x1f070703
   13cbc:	1f          	.byte	0x1f
   13cbd:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   13cbe:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   13cc2:	17d3      	asrs	r3, r2, #31
   13cc4:	e004      	b.n	13cd0 <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
   13cc6:	3407      	adds	r4, #7
   13cc8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   13ccc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   13cd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
   13cd4:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   13cd8:	07b3      	lsls	r3, r6, #30
   13cda:	d055      	beq.n	13d88 <cbvprintf+0x518>
			OUTS(sp, fp);
   13cdc:	464a      	mov	r2, r9
   13cde:	4641      	mov	r1, r8
   13ce0:	9b07      	ldr	r3, [sp, #28]
   13ce2:	9806      	ldr	r0, [sp, #24]
   13ce4:	f012 fbe7 	bl	264b6 <outs>
   13ce8:	2800      	cmp	r0, #0
   13cea:	f2c0 837d 	blt.w	143e8 <cbvprintf+0xb78>
   13cee:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   13cf0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   13cf4:	e5c4      	b.n	13880 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13cf6:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   13cfa:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13cfc:	ea4f 73e2 	mov.w	r3, r2, asr #31
   13d00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
   13d04:	d105      	bne.n	13d12 <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
   13d06:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
   13d0a:	9314      	str	r3, [sp, #80]	; 0x50
   13d0c:	2300      	movs	r3, #0
   13d0e:	9315      	str	r3, [sp, #84]	; 0x54
   13d10:	e7e0      	b.n	13cd4 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
   13d12:	2902      	cmp	r1, #2
   13d14:	d1de      	bne.n	13cd4 <cbvprintf+0x464>
				value->sint = (short)value->sint;
   13d16:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
   13d1a:	e7d2      	b.n	13cc2 <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13d1c:	2b02      	cmp	r3, #2
   13d1e:	d123      	bne.n	13d68 <cbvprintf+0x4f8>
			switch (length_mod) {
   13d20:	1ecb      	subs	r3, r1, #3
   13d22:	2b04      	cmp	r3, #4
   13d24:	d813      	bhi.n	13d4e <cbvprintf+0x4de>
   13d26:	e8df f003 	tbb	[pc, r3]
   13d2a:	0a03      	.short	0x0a03
   13d2c:	120a      	.short	0x120a
   13d2e:	12          	.byte	0x12
   13d2f:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   13d30:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   13d32:	6822      	ldr	r2, [r4, #0]
   13d34:	1d20      	adds	r0, r4, #4
   13d36:	9214      	str	r2, [sp, #80]	; 0x50
   13d38:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
   13d3a:	4604      	mov	r4, r0
   13d3c:	e7ca      	b.n	13cd4 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
   13d3e:	3407      	adds	r4, #7
   13d40:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   13d44:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   13d48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
   13d4c:	e7f5      	b.n	13d3a <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
   13d4e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   13d52:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   13d54:	9314      	str	r3, [sp, #80]	; 0x50
   13d56:	f04f 0300 	mov.w	r3, #0
   13d5a:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
   13d5c:	d0d3      	beq.n	13d06 <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
   13d5e:	2902      	cmp	r1, #2
   13d60:	d1b8      	bne.n	13cd4 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
   13d62:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   13d66:	e7d0      	b.n	13d0a <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
   13d68:	2b04      	cmp	r3, #4
   13d6a:	d107      	bne.n	13d7c <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
   13d6c:	3407      	adds	r4, #7
   13d6e:	f024 0407 	bic.w	r4, r4, #7
   13d72:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   13d76:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   13d7a:	e7ab      	b.n	13cd4 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
   13d7c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   13d7e:	bf04      	itt	eq
   13d80:	f854 3b04 	ldreq.w	r3, [r4], #4
   13d84:	9314      	streq	r3, [sp, #80]	; 0x50
   13d86:	e7a5      	b.n	13cd4 <cbvprintf+0x464>
		switch (conv->specifier) {
   13d88:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
   13d8c:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   13d90:	d8ae      	bhi.n	13cf0 <cbvprintf+0x480>
   13d92:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   13d96:	f200 80a7 	bhi.w	13ee8 <cbvprintf+0x678>
   13d9a:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   13d9e:	f000 80ed 	beq.w	13f7c <cbvprintf+0x70c>
   13da2:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   13da6:	d9a3      	bls.n	13cf0 <cbvprintf+0x480>
   13da8:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   13dac:	d003      	beq.n	13db6 <cbvprintf+0x546>
   13dae:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   13db2:	2b02      	cmp	r3, #2
   13db4:	d89c      	bhi.n	13cf0 <cbvprintf+0x480>
	} u = {
   13db6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
   13dba:	2a00      	cmp	r2, #0
   13dbc:	f173 0100 	sbcs.w	r1, r3, #0
   13dc0:	f2c0 8186 	blt.w	140d0 <cbvprintf+0x860>
	} else if (conv->flag_plus) {
   13dc4:	0731      	lsls	r1, r6, #28
   13dc6:	f100 8185 	bmi.w	140d4 <cbvprintf+0x864>
		*sign = ' ';
   13dca:	f016 0610 	ands.w	r6, r6, #16
   13dce:	bf18      	it	ne
   13dd0:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   13dd2:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   13dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   13dda:	9204      	str	r2, [sp, #16]
   13ddc:	9305      	str	r3, [sp, #20]
   13dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13de2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (expo == 0) && (fract != 0);
   13de6:	f1bb 0f00 	cmp.w	fp, #0
   13dea:	f040 8175 	bne.w	140d8 <cbvprintf+0x868>
   13dee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   13df2:	4313      	orrs	r3, r2
   13df4:	bf14      	ite	ne
   13df6:	f04f 0c01 	movne.w	ip, #1
   13dfa:	f04f 0c00 	moveq.w	ip, #0
	if ((expo | fract) != 0) {
   13dfe:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
   13e00:	9905      	ldr	r1, [sp, #20]
		c = 'f';
   13e02:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
   13e06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13e0a:	9904      	ldr	r1, [sp, #16]
		c = 'f';
   13e0c:	bf08      	it	eq
   13e0e:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
   13e12:	02ca      	lsls	r2, r1, #11
   13e14:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
   13e18:	ea4b 0102 	orr.w	r1, fp, r2
   13e1c:	910a      	str	r1, [sp, #40]	; 0x28
   13e1e:	17c1      	asrs	r1, r0, #31
   13e20:	4319      	orrs	r1, r3
   13e22:	910b      	str	r1, [sp, #44]	; 0x2c
   13e24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13e28:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   13e2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((expo | fract) != 0) {
   13e2e:	f000 81c7 	beq.w	141c0 <cbvprintf+0x950>
		if (is_subnormal) {
   13e32:	f1bc 0f00 	cmp.w	ip, #0
   13e36:	f040 8187 	bne.w	14148 <cbvprintf+0x8d8>
		fract |= BIT_63;
   13e3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
		fract *= 5U;
   13e3c:	2105      	movs	r1, #5
		fract |= BIT_63;
   13e3e:	9302      	str	r3, [sp, #8]
   13e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   13e42:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   13e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13e4a:	9303      	str	r3, [sp, #12]
   13e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13e50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   13e54:	2300      	movs	r3, #0
   13e56:	461a      	mov	r2, r3
	while (expo < -2) {
   13e58:	f11b 0f02 	cmn.w	fp, #2
   13e5c:	f2c0 817d 	blt.w	1415a <cbvprintf+0x8ea>
   13e60:	b11b      	cbz	r3, 13e6a <cbvprintf+0x5fa>
   13e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13e66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (expo > 0) {
   13e6a:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
   13e6e:	f1bb 0f00 	cmp.w	fp, #0
   13e72:	f300 818d 	bgt.w	14190 <cbvprintf+0x920>
	fract >>= (4 - expo);
   13e76:	9911      	ldr	r1, [sp, #68]	; 0x44
   13e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e7a:	f1cb 0004 	rsb	r0, fp, #4
   13e7e:	f10b 0b1c 	add.w	fp, fp, #28
   13e82:	fa01 fb0b 	lsl.w	fp, r1, fp
   13e86:	f1a0 0c20 	sub.w	ip, r0, #32
   13e8a:	40c3      	lsrs	r3, r0
   13e8c:	fa21 fc0c 	lsr.w	ip, r1, ip
   13e90:	ea43 030b 	orr.w	r3, r3, fp
   13e94:	ea43 030c 	orr.w	r3, r3, ip
   13e98:	40c1      	lsrs	r1, r0
   13e9a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
   13e9e:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   13ea2:	2b47      	cmp	r3, #71	; 0x47
   13ea4:	f040 8193 	bne.w	141ce <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
   13ea8:	1cd0      	adds	r0, r2, #3
   13eaa:	db02      	blt.n	13eb2 <cbvprintf+0x642>
   13eac:	4297      	cmp	r7, r2
   13eae:	f280 818a 	bge.w	141c6 <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
   13eb2:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   13eb6:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   13eb8:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   13ebc:	dd00      	ble.n	13ec0 <cbvprintf+0x650>
				precision--;
   13ebe:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   13ec0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   13ec4:	0699      	lsls	r1, r3, #26
   13ec6:	f100 8182 	bmi.w	141ce <cbvprintf+0x95e>
   13eca:	2f00      	cmp	r7, #0
   13ecc:	bfd4      	ite	le
   13ece:	2300      	movle	r3, #0
   13ed0:	2301      	movgt	r3, #1
	if (c == 'f') {
   13ed2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   13ed6:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
   13ed8:	f040 817b 	bne.w	141d2 <cbvprintf+0x962>
		if (decimals < 0) {
   13edc:	19d3      	adds	r3, r2, r7
   13ede:	f140 8179 	bpl.w	141d4 <cbvprintf+0x964>
			decimals = 0;
   13ee2:	f04f 0b00 	mov.w	fp, #0
   13ee6:	e179      	b.n	141dc <cbvprintf+0x96c>
   13ee8:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   13eec:	2b20      	cmp	r3, #32
   13eee:	f63f aeff 	bhi.w	13cf0 <cbvprintf+0x480>
   13ef2:	a201      	add	r2, pc, #4	; (adr r2, 13ef8 <cbvprintf+0x688>)
   13ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ef8:	00014071 	.word	0x00014071
   13efc:	00013cf1 	.word	0x00013cf1
   13f00:	00013cf1 	.word	0x00013cf1
   13f04:	00013cf1 	.word	0x00013cf1
   13f08:	00013cf1 	.word	0x00013cf1
   13f0c:	00013cf1 	.word	0x00013cf1
   13f10:	00013cf1 	.word	0x00013cf1
   13f14:	00013cf1 	.word	0x00013cf1
   13f18:	00013cf1 	.word	0x00013cf1
   13f1c:	00013db7 	.word	0x00013db7
   13f20:	00013cf1 	.word	0x00013cf1
   13f24:	00013fa9 	.word	0x00013fa9
   13f28:	00014011 	.word	0x00014011
   13f2c:	00013db7 	.word	0x00013db7
   13f30:	00013db7 	.word	0x00013db7
   13f34:	00013db7 	.word	0x00013db7
   13f38:	00013cf1 	.word	0x00013cf1
   13f3c:	00014011 	.word	0x00014011
   13f40:	00013cf1 	.word	0x00013cf1
   13f44:	00013cf1 	.word	0x00013cf1
   13f48:	00013cf1 	.word	0x00013cf1
   13f4c:	00013cf1 	.word	0x00013cf1
   13f50:	000140a7 	.word	0x000140a7
   13f54:	00014071 	.word	0x00014071
   13f58:	00014075 	.word	0x00014075
   13f5c:	00013cf1 	.word	0x00013cf1
   13f60:	00013cf1 	.word	0x00013cf1
   13f64:	00013f83 	.word	0x00013f83
   13f68:	00013cf1 	.word	0x00013cf1
   13f6c:	00014071 	.word	0x00014071
   13f70:	00013cf1 	.word	0x00013cf1
   13f74:	00013cf1 	.word	0x00013cf1
   13f78:	00014071 	.word	0x00014071
			OUTC('%');
   13f7c:	4641      	mov	r1, r8
   13f7e:	4648      	mov	r0, r9
   13f80:	e48a      	b.n	13898 <cbvprintf+0x28>
			if (precision >= 0) {
   13f82:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   13f84:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
   13f88:	db0a      	blt.n	13fa0 <cbvprintf+0x730>
				len = strnlen(bps, precision);
   13f8a:	4639      	mov	r1, r7
   13f8c:	4648      	mov	r0, r9
   13f8e:	f017 f8cf 	bl	2b130 <strnlen>
		char sign = 0;
   13f92:	2600      	movs	r6, #0
			bpe = bps + len;
   13f94:	eb09 0b00 	add.w	fp, r9, r0
		if (bps == NULL) {
   13f98:	f1b9 0f00 	cmp.w	r9, #0
   13f9c:	d10c      	bne.n	13fb8 <cbvprintf+0x748>
   13f9e:	e6a7      	b.n	13cf0 <cbvprintf+0x480>
				len = strlen(bps);
   13fa0:	4648      	mov	r0, r9
   13fa2:	f7fd f80b 	bl	10fbc <strlen>
   13fa6:	e7f4      	b.n	13f92 <cbvprintf+0x722>
		char sign = 0;
   13fa8:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13faa:	9b14      	ldr	r3, [sp, #80]	; 0x50
			bpe = buf + 1;
   13fac:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13fb0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				bps = encode_float(value->dbl, conv, precision,
   13fb4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
   13fb8:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
   13fbc:	b106      	cbz	r6, 13fc0 <cbvprintf+0x750>
			nj_len += 1U;
   13fbe:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   13fc0:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   13fc4:	06c3      	lsls	r3, r0, #27
   13fc6:	f140 81ff 	bpl.w	143c8 <cbvprintf+0xb58>
			nj_len += 2U;
   13fca:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   13fcc:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
   13fce:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   13fd0:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   13fd2:	bf44      	itt	mi
   13fd4:	9918      	ldrmi	r1, [sp, #96]	; 0x60
   13fd6:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   13fd8:	f1ba 0f00 	cmp.w	sl, #0
   13fdc:	f340 8211 	ble.w	14402 <cbvprintf+0xb92>
			width -= (int)nj_len;
   13fe0:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
   13fe4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   13fe8:	0751      	lsls	r1, r2, #29
   13fea:	f3c2 0780 	ubfx	r7, r2, #2, #1
   13fee:	f100 8208 	bmi.w	14402 <cbvprintf+0xb92>
				if (conv->flag_zero) {
   13ff2:	0653      	lsls	r3, r2, #25
   13ff4:	f140 81fb 	bpl.w	143ee <cbvprintf+0xb7e>
					if (sign != 0) {
   13ff8:	b146      	cbz	r6, 1400c <cbvprintf+0x79c>
						OUTC(sign);
   13ffa:	4641      	mov	r1, r8
   13ffc:	4630      	mov	r0, r6
   13ffe:	9b06      	ldr	r3, [sp, #24]
   14000:	4798      	blx	r3
   14002:	2800      	cmp	r0, #0
   14004:	f2c0 81f0 	blt.w	143e8 <cbvprintf+0xb78>
						sign = 0;
   14008:	463e      	mov	r6, r7
						OUTC(sign);
   1400a:	3501      	adds	r5, #1
					pad = '0';
   1400c:	2730      	movs	r7, #48	; 0x30
   1400e:	e1ef      	b.n	143f0 <cbvprintf+0xb80>
			if (conv->flag_plus) {
   14010:	0730      	lsls	r0, r6, #28
   14012:	d42b      	bmi.n	1406c <cbvprintf+0x7fc>
				sign = ' ';
   14014:	f016 0610 	ands.w	r6, r6, #16
   14018:	bf18      	it	ne
   1401a:	2620      	movne	r6, #32
			sint = value->sint;
   1401c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
			if (sint < 0) {
   14020:	2a00      	cmp	r2, #0
   14022:	f173 0100 	sbcs.w	r1, r3, #0
   14026:	da05      	bge.n	14034 <cbvprintf+0x7c4>
				sign = '-';
   14028:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1402a:	4252      	negs	r2, r2
   1402c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14030:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			bps = encode_uint(value->uint, conv, buf, bpe);
   14034:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   14038:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   1403c:	9300      	str	r3, [sp, #0]
   1403e:	aa16      	add	r2, sp, #88	; 0x58
   14040:	ab1b      	add	r3, sp, #108	; 0x6c
   14042:	f7ff fbc5 	bl	137d0 <encode_uint>
   14046:	4681      	mov	r9, r0
			if (precision >= 0) {
   14048:	2f00      	cmp	r7, #0
   1404a:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   1404e:	db0b      	blt.n	14068 <cbvprintf+0x7f8>
				conv->flag_zero = false;
   14050:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   14054:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   14058:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1405c:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   1405e:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   14062:	d901      	bls.n	14068 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
   14064:	1abf      	subs	r7, r7, r2
   14066:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   14068:	469b      	mov	fp, r3
   1406a:	e795      	b.n	13f98 <cbvprintf+0x728>
				sign = '+';
   1406c:	262b      	movs	r6, #43	; 0x2b
   1406e:	e7d5      	b.n	1401c <cbvprintf+0x7ac>
		switch (conv->specifier) {
   14070:	2600      	movs	r6, #0
   14072:	e7df      	b.n	14034 <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
   14074:	9814      	ldr	r0, [sp, #80]	; 0x50
   14076:	2800      	cmp	r0, #0
   14078:	f000 81a0 	beq.w	143bc <cbvprintf+0xb4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1407c:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   14080:	9300      	str	r3, [sp, #0]
   14082:	2100      	movs	r1, #0
   14084:	ab1b      	add	r3, sp, #108	; 0x6c
   14086:	aa16      	add	r2, sp, #88	; 0x58
   14088:	f7ff fba2 	bl	137d0 <encode_uint>
				conv->altform_0c = true;
   1408c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14090:	4681      	mov	r9, r0
				conv->altform_0c = true;
   14092:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   14096:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1409a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1409e:	2600      	movs	r6, #0
				conv->altform_0c = true;
   140a0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   140a4:	e7d0      	b.n	14048 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
   140a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
   140a8:	2907      	cmp	r1, #7
   140aa:	f63f ae21 	bhi.w	13cf0 <cbvprintf+0x480>
   140ae:	e8df f001 	tbb	[pc, r1]
   140b2:	040d      	.short	0x040d
   140b4:	08080d06 	.word	0x08080d06
   140b8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   140ba:	701d      	strb	r5, [r3, #0]
		break;
   140bc:	e618      	b.n	13cf0 <cbvprintf+0x480>
		*(short *)dp = (short)count;
   140be:	801d      	strh	r5, [r3, #0]
		break;
   140c0:	e616      	b.n	13cf0 <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   140c2:	4628      	mov	r0, r5
   140c4:	17e9      	asrs	r1, r5, #31
   140c6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   140ca:	e611      	b.n	13cf0 <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   140cc:	601d      	str	r5, [r3, #0]
		break;
   140ce:	e60f      	b.n	13cf0 <cbvprintf+0x480>
		*sign = '-';
   140d0:	262d      	movs	r6, #45	; 0x2d
   140d2:	e67e      	b.n	13dd2 <cbvprintf+0x562>
		*sign = '+';
   140d4:	262b      	movs	r6, #43	; 0x2b
   140d6:	e67c      	b.n	13dd2 <cbvprintf+0x562>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   140d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
   140dc:	459b      	cmp	fp, r3
   140de:	d12e      	bne.n	1413e <cbvprintf+0x8ce>
		if (fract == 0) {
   140e0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   140e4:	4bba      	ldr	r3, [pc, #744]	; (143d0 <cbvprintf+0xb60>)
   140e6:	430a      	orrs	r2, r1
   140e8:	f819 3003 	ldrb.w	r3, [r9, r3]
   140ec:	f003 0303 	and.w	r3, r3, #3
   140f0:	d117      	bne.n	14122 <cbvprintf+0x8b2>
			if (isupper((int)c)) {
   140f2:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   140f4:	bf0b      	itete	eq
   140f6:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   140fa:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   140fe:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
   14102:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
   14106:	bf0c      	ite	eq
   14108:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   1410a:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   1410c:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
   14110:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   14114:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		conv->flag_zero = false;
   14118:	f36f 1386 	bfc	r3, #6, #1
   1411c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   14120:	e748      	b.n	13fb4 <cbvprintf+0x744>
			if (isupper((int)c)) {
   14122:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   14124:	bf0b      	itete	eq
   14126:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   1412a:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   1412e:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
   14132:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
   14136:	bf0c      	ite	eq
   14138:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   1413a:	236e      	movne	r3, #110	; 0x6e
   1413c:	e7e6      	b.n	1410c <cbvprintf+0x89c>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1413e:	f04f 0c00 	mov.w	ip, #0
   14142:	e65c      	b.n	13dfe <cbvprintf+0x58e>
				expo--;
   14144:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   14148:	1892      	adds	r2, r2, r2
   1414a:	415b      	adcs	r3, r3
   1414c:	2a00      	cmp	r2, #0
   1414e:	f173 0100 	sbcs.w	r1, r3, #0
   14152:	daf7      	bge.n	14144 <cbvprintf+0x8d4>
   14154:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   14158:	e66f      	b.n	13e3a <cbvprintf+0x5ca>
			fract >>= 1;
   1415a:	9b02      	ldr	r3, [sp, #8]
   1415c:	9803      	ldr	r0, [sp, #12]
   1415e:	085b      	lsrs	r3, r3, #1
   14160:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   14164:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   14166:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   1416a:	46de      	mov	lr, fp
			fract >>= 1;
   1416c:	e9cd 3002 	strd	r3, r0, [sp, #8]
			expo++;
   14170:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   14174:	d2f1      	bcs.n	1415a <cbvprintf+0x8ea>
		fract *= 5U;
   14176:	fba3 bc01 	umull	fp, ip, r3, r1
   1417a:	4348      	muls	r0, r1
   1417c:	e9cd bc02 	strd	fp, ip, [sp, #8]
   14180:	9b03      	ldr	r3, [sp, #12]
		expo++;
   14182:	f10e 0b02 	add.w	fp, lr, #2
		fract *= 5U;
   14186:	18c3      	adds	r3, r0, r3
   14188:	9303      	str	r3, [sp, #12]
		decexp--;
   1418a:	3a01      	subs	r2, #1
   1418c:	2301      	movs	r3, #1
   1418e:	e663      	b.n	13e58 <cbvprintf+0x5e8>
		fract += 2;
   14190:	3302      	adds	r3, #2
   14192:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   14196:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
   14198:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   1419c:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1419e:	f012 f954 	bl	2644a <_ldiv5>
		expo--;
   141a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
   141a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		expo--;
   141a8:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   141ac:	3201      	adds	r2, #1
			fract <<= 1;
   141ae:	1800      	adds	r0, r0, r0
   141b0:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   141b2:	2800      	cmp	r0, #0
   141b4:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
   141b8:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   141bc:	daf7      	bge.n	141ae <cbvprintf+0x93e>
   141be:	e652      	b.n	13e66 <cbvprintf+0x5f6>
   141c0:	2200      	movs	r2, #0
   141c2:	4693      	mov	fp, r2
   141c4:	e657      	b.n	13e76 <cbvprintf+0x606>
			c = 'f';
   141c6:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
   141ca:	1abf      	subs	r7, r7, r2
   141cc:	e678      	b.n	13ec0 <cbvprintf+0x650>
	bool prune_zero = false;
   141ce:	2300      	movs	r3, #0
   141d0:	e67f      	b.n	13ed2 <cbvprintf+0x662>
		decimals = precision + 1;
   141d2:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   141d4:	2b10      	cmp	r3, #16
   141d6:	bfa8      	it	ge
   141d8:	2310      	movge	r3, #16
   141da:	469b      	mov	fp, r3
   141dc:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   141de:	2000      	movs	r0, #0
   141e0:	910f      	str	r1, [sp, #60]	; 0x3c
   141e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   141e6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
   141ea:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
   141ee:	f10b 3bff 	add.w	fp, fp, #4294967295
   141f2:	f1bb 3fff 	cmp.w	fp, #4294967295
   141f6:	d11f      	bne.n	14238 <cbvprintf+0x9c8>
	fract += round;
   141f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   141fa:	18cb      	adds	r3, r1, r3
   141fc:	9308      	str	r3, [sp, #32]
   141fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
	if (fract >= BIT64(60)) {
   14200:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
   14204:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
   14208:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
   1420c:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
   1420e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   14212:	4561      	cmp	r1, ip
   14214:	bf08      	it	eq
   14216:	4558      	cmpeq	r0, fp
   14218:	d31a      	bcc.n	14250 <cbvprintf+0x9e0>
	fract += round;
   1421a:	4658      	mov	r0, fp
   1421c:	4661      	mov	r1, ip
   1421e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
   14222:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   14226:	d153      	bne.n	142d0 <cbvprintf+0xa60>
		if (decexp > 0) {
   14228:	2a00      	cmp	r2, #0
   1422a:	dc20      	bgt.n	1426e <cbvprintf+0x9fe>
			*buf++ = '0';
   1422c:	2330      	movs	r3, #48	; 0x30
   1422e:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   14232:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   14236:	e02b      	b.n	14290 <cbvprintf+0xa20>
	*v >>= 1;
   14238:	0849      	lsrs	r1, r1, #1
   1423a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   1423e:	0840      	lsrs	r0, r0, #1
   14240:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
   14244:	a812      	add	r0, sp, #72	; 0x48
   14246:	920d      	str	r2, [sp, #52]	; 0x34
   14248:	f012 f8ff 	bl	2644a <_ldiv5>
   1424c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
   1424e:	e7cc      	b.n	141ea <cbvprintf+0x97a>
	*v >>= 1;
   14250:	9b08      	ldr	r3, [sp, #32]
   14252:	920d      	str	r2, [sp, #52]	; 0x34
   14254:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14256:	085b      	lsrs	r3, r3, #1
   14258:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1425c:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   1425e:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
   14260:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
   14264:	f012 f8f1 	bl	2644a <_ldiv5>
		decexp++;
   14268:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1426a:	3201      	adds	r2, #1
   1426c:	e7d9      	b.n	14222 <cbvprintf+0x9b2>
	char *buf = bps;
   1426e:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
   14272:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14274:	2900      	cmp	r1, #0
   14276:	dd09      	ble.n	1428c <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
   14278:	a90f      	add	r1, sp, #60	; 0x3c
   1427a:	a810      	add	r0, sp, #64	; 0x40
   1427c:	920d      	str	r2, [sp, #52]	; 0x34
   1427e:	f012 f903 	bl	26488 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   14282:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
   14284:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   14288:	3a01      	subs	r2, #1
   1428a:	d1f2      	bne.n	14272 <cbvprintf+0xa02>
			conv->pad0_value = decexp;
   1428c:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
   1428e:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   14290:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   14294:	0688      	lsls	r0, r1, #26
   14296:	d401      	bmi.n	1429c <cbvprintf+0xa2c>
   14298:	2f00      	cmp	r7, #0
   1429a:	dd3f      	ble.n	1431c <cbvprintf+0xaac>
			*buf++ = '.';
   1429c:	465b      	mov	r3, fp
   1429e:	212e      	movs	r1, #46	; 0x2e
   142a0:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   142a4:	b192      	cbz	r2, 142cc <cbvprintf+0xa5c>
   142a6:	2f00      	cmp	r7, #0
   142a8:	dd76      	ble.n	14398 <cbvprintf+0xb28>
			conv->pad0_value = -decexp;
   142aa:	4251      	negs	r1, r2
   142ac:	42b9      	cmp	r1, r7
   142ae:	bfa8      	it	ge
   142b0:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   142b2:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   142b4:	9117      	str	r1, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   142b6:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   142ba:	bfd4      	ite	le
   142bc:	2100      	movle	r1, #0
   142be:	2101      	movgt	r1, #1
   142c0:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   142c4:	f361 1045 	bfi	r0, r1, #5, #1
   142c8:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
   142cc:	469b      	mov	fp, r3
   142ce:	e020      	b.n	14312 <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
   142d0:	a90f      	add	r1, sp, #60	; 0x3c
   142d2:	a810      	add	r0, sp, #64	; 0x40
   142d4:	920d      	str	r2, [sp, #52]	; 0x34
   142d6:	f012 f8d7 	bl	26488 <_get_digit>
		if (*buf++ != '0') {
   142da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
   142dc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   142e0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   142e2:	bf18      	it	ne
   142e4:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   142e8:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   142ea:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (conv->flag_hash || (precision > 0)) {
   142ee:	d401      	bmi.n	142f4 <cbvprintf+0xa84>
   142f0:	2f00      	cmp	r7, #0
   142f2:	dd53      	ble.n	1439c <cbvprintf+0xb2c>
			*buf++ = '.';
   142f4:	232e      	movs	r3, #46	; 0x2e
   142f6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   142fa:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   142fe:	e7e5      	b.n	142cc <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
   14300:	a90f      	add	r1, sp, #60	; 0x3c
   14302:	a810      	add	r0, sp, #64	; 0x40
   14304:	920d      	str	r2, [sp, #52]	; 0x34
   14306:	f012 f8bf 	bl	26488 <_get_digit>
   1430a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1430c:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
   14310:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   14312:	2f00      	cmp	r7, #0
   14314:	dd02      	ble.n	1431c <cbvprintf+0xaac>
   14316:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14318:	2900      	cmp	r1, #0
   1431a:	dcf1      	bgt.n	14300 <cbvprintf+0xa90>
	if (prune_zero) {
   1431c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1431e:	2b00      	cmp	r3, #0
   14320:	d13f      	bne.n	143a2 <cbvprintf+0xb32>
	conv->pad0_pre_exp = precision;
   14322:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   14324:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   14328:	2945      	cmp	r1, #69	; 0x45
   1432a:	d123      	bne.n	14374 <cbvprintf+0xb04>
		if (decexp < 0) {
   1432c:	2a00      	cmp	r2, #0
			*buf++ = '-';
   1432e:	bfb4      	ite	lt
   14330:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   14332:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
   14334:	4658      	mov	r0, fp
			decexp = -decexp;
   14336:	bfb8      	it	lt
   14338:	4252      	neglt	r2, r2
		if (decexp >= 100) {
   1433a:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   1433c:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   14340:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
   14344:	dd0a      	ble.n	1435c <cbvprintf+0xaec>
			*buf++ = (decexp / 100) + '0';
   14346:	2764      	movs	r7, #100	; 0x64
   14348:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
   1434c:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
   14350:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   14354:	f10b 0003 	add.w	r0, fp, #3
   14358:	f88b c002 	strb.w	ip, [fp, #2]
		*buf++ = (decexp / 10) + '0';
   1435c:	270a      	movs	r7, #10
   1435e:	fb92 f1f7 	sdiv	r1, r2, r7
   14362:	4683      	mov	fp, r0
		*buf++ = (decexp % 10) + '0';
   14364:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   14368:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1436c:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1436e:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
   14372:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   14374:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14376:	2a00      	cmp	r2, #0
   14378:	dc1e      	bgt.n	143b8 <cbvprintf+0xb48>
   1437a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1437c:	2a00      	cmp	r2, #0
   1437e:	bfd4      	ite	le
   14380:	2200      	movle	r2, #0
   14382:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   14384:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   14388:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   1438c:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1438e:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   14392:	f88b 2000 	strb.w	r2, [fp]
	return bps;
   14396:	e60d      	b.n	13fb4 <cbvprintf+0x744>
			*buf++ = '.';
   14398:	469b      	mov	fp, r3
   1439a:	e7bf      	b.n	1431c <cbvprintf+0xaac>
		if (*buf++ != '0') {
   1439c:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   143a0:	e7bc      	b.n	1431c <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
   143a2:	2100      	movs	r1, #0
   143a4:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
   143a6:	4658      	mov	r0, fp
   143a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
   143ac:	2930      	cmp	r1, #48	; 0x30
   143ae:	d0fa      	beq.n	143a6 <cbvprintf+0xb36>
		if (*buf != '.') {
   143b0:	292e      	cmp	r1, #46	; 0x2e
   143b2:	bf18      	it	ne
   143b4:	4683      	movne	fp, r0
   143b6:	e7b5      	b.n	14324 <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
   143b8:	2201      	movs	r2, #1
   143ba:	e7e3      	b.n	14384 <cbvprintf+0xb14>
			bpe = bps + 5;
   143bc:	f8df b014 	ldr.w	fp, [pc, #20]	; 143d4 <cbvprintf+0xb64>
		char sign = 0;
   143c0:	4606      	mov	r6, r0
			bps = "(nil)";
   143c2:	f1ab 0905 	sub.w	r9, fp, #5
   143c6:	e5f7      	b.n	13fb8 <cbvprintf+0x748>
		} else if (conv->altform_0) {
   143c8:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   143ca:	bf48      	it	mi
   143cc:	3201      	addmi	r2, #1
   143ce:	e5fd      	b.n	13fcc <cbvprintf+0x75c>
   143d0:	00030304 	.word	0x00030304
   143d4:	0002d48f 	.word	0x0002d48f
   143d8:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
   143da:	4641      	mov	r1, r8
   143dc:	9b06      	ldr	r3, [sp, #24]
   143de:	4638      	mov	r0, r7
   143e0:	4798      	blx	r3
   143e2:	2800      	cmp	r0, #0
   143e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   143e6:	da05      	bge.n	143f4 <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
   143e8:	b023      	add	sp, #140	; 0x8c
   143ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   143ee:	2720      	movs	r7, #32
   143f0:	eb0a 0305 	add.w	r3, sl, r5
   143f4:	4652      	mov	r2, sl
				while (width-- > 0) {
   143f6:	2a00      	cmp	r2, #0
   143f8:	eba3 050a 	sub.w	r5, r3, sl
   143fc:	f10a 3aff 	add.w	sl, sl, #4294967295
   14400:	dcea      	bgt.n	143d8 <cbvprintf+0xb68>
		if (sign != 0) {
   14402:	b136      	cbz	r6, 14412 <cbvprintf+0xba2>
			OUTC(sign);
   14404:	4641      	mov	r1, r8
   14406:	4630      	mov	r0, r6
   14408:	9b06      	ldr	r3, [sp, #24]
   1440a:	4798      	blx	r3
   1440c:	2800      	cmp	r0, #0
   1440e:	dbeb      	blt.n	143e8 <cbvprintf+0xb78>
   14410:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   14412:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   14416:	0650      	lsls	r0, r2, #25
   14418:	d57c      	bpl.n	14514 <cbvprintf+0xca4>
			if (conv->specifier_a) {
   1441a:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   1441e:	2a00      	cmp	r2, #0
   14420:	db2b      	blt.n	1447a <cbvprintf+0xc0a>
   14422:	eba5 0509 	sub.w	r5, r5, r9
   14426:	464e      	mov	r6, r9
				while (isdigit((int)*cp)) {
   14428:	f899 0000 	ldrb.w	r0, [r9]
   1442c:	4b59      	ldr	r3, [pc, #356]	; (14594 <cbvprintf+0xd24>)
   1442e:	19af      	adds	r7, r5, r6
   14430:	5cc2      	ldrb	r2, [r0, r3]
   14432:	f109 0901 	add.w	r9, r9, #1
   14436:	0751      	lsls	r1, r2, #29
   14438:	d43f      	bmi.n	144ba <cbvprintf+0xc4a>
				if (!conv->pad_postdp) {
   1443a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
   1443e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
   14442:	0692      	lsls	r2, r2, #26
   14444:	d408      	bmi.n	14458 <cbvprintf+0xbe8>
   14446:	eb09 0507 	add.w	r5, r9, r7
   1444a:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
   1444c:	2a00      	cmp	r2, #0
   1444e:	eba5 0709 	sub.w	r7, r5, r9
   14452:	f109 39ff 	add.w	r9, r9, #4294967295
   14456:	dc36      	bgt.n	144c6 <cbvprintf+0xc56>
				if (*cp == '.') {
   14458:	7830      	ldrb	r0, [r6, #0]
   1445a:	282e      	cmp	r0, #46	; 0x2e
   1445c:	d10a      	bne.n	14474 <cbvprintf+0xc04>
					OUTC(*cp++);
   1445e:	4641      	mov	r1, r8
   14460:	9b06      	ldr	r3, [sp, #24]
   14462:	4798      	blx	r3
						OUTC('0');
   14464:	2800      	cmp	r0, #0
   14466:	dbbf      	blt.n	143e8 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
   14468:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
   1446c:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   14470:	dc30      	bgt.n	144d4 <cbvprintf+0xc64>
					OUTC(*cp++);
   14472:	3601      	adds	r6, #1
   14474:	46b1      	mov	r9, r6
   14476:	1bbf      	subs	r7, r7, r6
   14478:	e039      	b.n	144ee <cbvprintf+0xc7e>
   1447a:	eba5 0709 	sub.w	r7, r5, r9
   1447e:	464d      	mov	r5, r9
   14480:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
   14484:	f819 0b01 	ldrb.w	r0, [r9], #1
   14488:	2870      	cmp	r0, #112	; 0x70
   1448a:	d110      	bne.n	144ae <cbvprintf+0xc3e>
			while (pad_len-- > 0) {
   1448c:	9f18      	ldr	r7, [sp, #96]	; 0x60
   1448e:	4437      	add	r7, r6
   14490:	1bba      	subs	r2, r7, r6
   14492:	2a00      	cmp	r2, #0
   14494:	dc35      	bgt.n	14502 <cbvprintf+0xc92>
			OUTS(cp, bpe);
   14496:	465b      	mov	r3, fp
   14498:	462a      	mov	r2, r5
   1449a:	4641      	mov	r1, r8
   1449c:	9806      	ldr	r0, [sp, #24]
   1449e:	f012 f80a 	bl	264b6 <outs>
   144a2:	2800      	cmp	r0, #0
   144a4:	dba0      	blt.n	143e8 <cbvprintf+0xb78>
   144a6:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   144a8:	4605      	mov	r5, r0
   144aa:	4482      	add	sl, r0
   144ac:	e06c      	b.n	14588 <cbvprintf+0xd18>
					OUTC(*cp++);
   144ae:	4641      	mov	r1, r8
   144b0:	9b06      	ldr	r3, [sp, #24]
   144b2:	4798      	blx	r3
   144b4:	2800      	cmp	r0, #0
   144b6:	dae2      	bge.n	1447e <cbvprintf+0xc0e>
   144b8:	e796      	b.n	143e8 <cbvprintf+0xb78>
					OUTC(*cp++);
   144ba:	4641      	mov	r1, r8
   144bc:	9b06      	ldr	r3, [sp, #24]
   144be:	4798      	blx	r3
   144c0:	2800      	cmp	r0, #0
   144c2:	dab0      	bge.n	14426 <cbvprintf+0xbb6>
   144c4:	e790      	b.n	143e8 <cbvprintf+0xb78>
						OUTC('0');
   144c6:	4641      	mov	r1, r8
   144c8:	2030      	movs	r0, #48	; 0x30
   144ca:	9b06      	ldr	r3, [sp, #24]
   144cc:	4798      	blx	r3
   144ce:	2800      	cmp	r0, #0
   144d0:	dabb      	bge.n	1444a <cbvprintf+0xbda>
   144d2:	e789      	b.n	143e8 <cbvprintf+0xb78>
						OUTC('0');
   144d4:	4641      	mov	r1, r8
   144d6:	2030      	movs	r0, #48	; 0x30
   144d8:	9b06      	ldr	r3, [sp, #24]
   144da:	4798      	blx	r3
   144dc:	f109 39ff 	add.w	r9, r9, #4294967295
   144e0:	e7c0      	b.n	14464 <cbvprintf+0xbf4>
					OUTC(*cp++);
   144e2:	4641      	mov	r1, r8
   144e4:	9b06      	ldr	r3, [sp, #24]
   144e6:	4798      	blx	r3
   144e8:	2800      	cmp	r0, #0
   144ea:	f6ff af7d 	blt.w	143e8 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
   144ee:	4b29      	ldr	r3, [pc, #164]	; (14594 <cbvprintf+0xd24>)
   144f0:	464d      	mov	r5, r9
   144f2:	eb07 0609 	add.w	r6, r7, r9
   144f6:	f819 0b01 	ldrb.w	r0, [r9], #1
   144fa:	5cc2      	ldrb	r2, [r0, r3]
   144fc:	0753      	lsls	r3, r2, #29
   144fe:	d4f0      	bmi.n	144e2 <cbvprintf+0xc72>
   14500:	e7c4      	b.n	1448c <cbvprintf+0xc1c>
				OUTC('0');
   14502:	4641      	mov	r1, r8
   14504:	2030      	movs	r0, #48	; 0x30
   14506:	9b06      	ldr	r3, [sp, #24]
   14508:	4798      	blx	r3
   1450a:	2800      	cmp	r0, #0
   1450c:	f6ff af6c 	blt.w	143e8 <cbvprintf+0xb78>
   14510:	3601      	adds	r6, #1
   14512:	e7bd      	b.n	14490 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
   14514:	06d1      	lsls	r1, r2, #27
   14516:	d401      	bmi.n	1451c <cbvprintf+0xcac>
   14518:	0712      	lsls	r2, r2, #28
   1451a:	d507      	bpl.n	1452c <cbvprintf+0xcbc>
				OUTC('0');
   1451c:	4641      	mov	r1, r8
   1451e:	2030      	movs	r0, #48	; 0x30
   14520:	9b06      	ldr	r3, [sp, #24]
   14522:	4798      	blx	r3
   14524:	2800      	cmp	r0, #0
   14526:	f6ff af5f 	blt.w	143e8 <cbvprintf+0xb78>
   1452a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1452c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   14530:	06d3      	lsls	r3, r2, #27
   14532:	d508      	bpl.n	14546 <cbvprintf+0xcd6>
				OUTC(conv->specifier);
   14534:	4641      	mov	r1, r8
   14536:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   1453a:	9b06      	ldr	r3, [sp, #24]
   1453c:	4798      	blx	r3
   1453e:	2800      	cmp	r0, #0
   14540:	f6ff af52 	blt.w	143e8 <cbvprintf+0xb78>
   14544:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   14546:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   14548:	442f      	add	r7, r5
   1454a:	1b7a      	subs	r2, r7, r5
   1454c:	2a00      	cmp	r2, #0
   1454e:	dc0a      	bgt.n	14566 <cbvprintf+0xcf6>
			OUTS(bps, bpe);
   14550:	465b      	mov	r3, fp
   14552:	464a      	mov	r2, r9
   14554:	4641      	mov	r1, r8
   14556:	9806      	ldr	r0, [sp, #24]
   14558:	f011 ffad 	bl	264b6 <outs>
   1455c:	2800      	cmp	r0, #0
   1455e:	f6ff af43 	blt.w	143e8 <cbvprintf+0xb78>
   14562:	4428      	add	r0, r5
   14564:	e7a0      	b.n	144a8 <cbvprintf+0xc38>
				OUTC('0');
   14566:	4641      	mov	r1, r8
   14568:	2030      	movs	r0, #48	; 0x30
   1456a:	9b06      	ldr	r3, [sp, #24]
   1456c:	4798      	blx	r3
   1456e:	2800      	cmp	r0, #0
   14570:	f6ff af3a 	blt.w	143e8 <cbvprintf+0xb78>
   14574:	3501      	adds	r5, #1
   14576:	e7e8      	b.n	1454a <cbvprintf+0xcda>
			OUTC(' ');
   14578:	4641      	mov	r1, r8
   1457a:	2020      	movs	r0, #32
   1457c:	9b06      	ldr	r3, [sp, #24]
   1457e:	4798      	blx	r3
   14580:	2800      	cmp	r0, #0
   14582:	f6ff af31 	blt.w	143e8 <cbvprintf+0xb78>
   14586:	3501      	adds	r5, #1
		while (width > 0) {
   14588:	ebaa 0305 	sub.w	r3, sl, r5
   1458c:	2b00      	cmp	r3, #0
   1458e:	dcf3      	bgt.n	14578 <cbvprintf+0xd08>
   14590:	f7ff bbae 	b.w	13cf0 <cbvprintf+0x480>
   14594:	00030304 	.word	0x00030304

00014598 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   14598:	b508      	push	{r3, lr}
   1459a:	f04f 0220 	mov.w	r2, #32
   1459e:	f3ef 8311 	mrs	r3, BASEPRI
   145a2:	f382 8812 	msr	BASEPRI_MAX, r2
   145a6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   145aa:	f001 fe3d 	bl	16228 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   145ae:	4803      	ldr	r0, [pc, #12]	; (145bc <sys_reboot+0x24>)
   145b0:	f011 fcb1 	bl	25f16 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   145b4:	f001 f9ec 	bl	15990 <arch_cpu_idle>
   145b8:	e7fc      	b.n	145b4 <sys_reboot+0x1c>
   145ba:	bf00      	nop
   145bc:	0002d490 	.word	0x0002d490

000145c0 <nordicsemi_nrf91_init>:
   145c0:	f04f 0220 	mov.w	r2, #32
   145c4:	f3ef 8311 	mrs	r3, BASEPRI
   145c8:	f382 8812 	msr	BASEPRI_MAX, r2
   145cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   145d0:	2101      	movs	r1, #1
   145d2:	4a04      	ldr	r2, [pc, #16]	; (145e4 <nordicsemi_nrf91_init+0x24>)
   145d4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   145d8:	f383 8811 	msr	BASEPRI, r3
   145dc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   145e0:	2000      	movs	r0, #0
   145e2:	4770      	bx	lr
   145e4:	40039000 	.word	0x40039000

000145e8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   145e8:	b120      	cbz	r0, 145f4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   145ea:	4b03      	ldr	r3, [pc, #12]	; (145f8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   145ec:	0180      	lsls	r0, r0, #6
   145ee:	f043 0301 	orr.w	r3, r3, #1
   145f2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   145f4:	4770      	bx	lr
   145f6:	bf00      	nop
   145f8:	0002c4a0 	.word	0x0002c4a0

000145fc <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   145fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   14600:	4b11      	ldr	r3, [pc, #68]	; (14648 <log_generic+0x4c>)
{
   14602:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   14604:	681b      	ldr	r3, [r3, #0]
{
   14606:	4681      	mov	r9, r0
   14608:	468a      	mov	sl, r1
   1460a:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   1460c:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   1460e:	f04f 0b00 	mov.w	fp, #0
		uint32_t timestamp = timestamp_func();
   14612:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   14614:	4c0d      	ldr	r4, [pc, #52]	; (1464c <log_generic+0x50>)
   14616:	4d0e      	ldr	r5, [pc, #56]	; (14650 <log_generic+0x54>)
   14618:	1b2d      	subs	r5, r5, r4
   1461a:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   1461c:	455d      	cmp	r5, fp
   1461e:	dc02      	bgt.n	14626 <log_generic+0x2a>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   14620:	b005      	add	sp, #20
   14622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   14626:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) && runtime_ok) {
   14628:	795b      	ldrb	r3, [r3, #5]
   1462a:	b14b      	cbz	r3, 14640 <log_generic+0x44>
	if (backend->api->put_sync_string) {
   1462c:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   1462e:	9703      	str	r7, [sp, #12]
   14630:	689e      	ldr	r6, [r3, #8]
   14632:	b12e      	cbz	r6, 14640 <log_generic+0x44>
		backend->api->put_sync_string(backend, src_level,
   14634:	4653      	mov	r3, sl
   14636:	4642      	mov	r2, r8
   14638:	4649      	mov	r1, r9
   1463a:	4620      	mov	r0, r4
   1463c:	9700      	str	r7, [sp, #0]
   1463e:	47b0      	blx	r6
		for (int i = 0; i < log_backend_count_get(); i++) {
   14640:	f10b 0b01 	add.w	fp, fp, #1
   14644:	3410      	adds	r4, #16
   14646:	e7e9      	b.n	1461c <log_generic+0x20>
   14648:	2000c540 	.word	0x2000c540
   1464c:	0002c424 	.word	0x0002c424
   14650:	0002c434 	.word	0x0002c434

00014654 <log_core_init>:
void log_core_init(void)
{
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
   14654:	2300      	movs	r3, #0
   14656:	4a05      	ldr	r2, [pc, #20]	; (1466c <log_core_init+0x18>)
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
	log_output_timestamp_freq_set(freq);
   14658:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   1465c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1465e:	4a04      	ldr	r2, [pc, #16]	; (14670 <log_core_init+0x1c>)
   14660:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   14662:	4b04      	ldr	r3, [pc, #16]	; (14674 <log_core_init+0x20>)
   14664:	4a04      	ldr	r2, [pc, #16]	; (14678 <log_core_init+0x24>)
   14666:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   14668:	f000 ba28 	b.w	14abc <log_output_timestamp_freq_set>
   1466c:	2000efcc 	.word	0x2000efcc
   14670:	2000ddd4 	.word	0x2000ddd4
   14674:	2000c540 	.word	0x2000c540
   14678:	00026527 	.word	0x00026527

0001467c <log_init>:
{
   1467c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1467e:	4b10      	ldr	r3, [pc, #64]	; (146c0 <log_init+0x44>)
   14680:	e8d3 5fef 	ldaex	r5, [r3]
   14684:	1c6a      	adds	r2, r5, #1
   14686:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1468a:	2900      	cmp	r1, #0
   1468c:	d1f8      	bne.n	14680 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   1468e:	b92d      	cbnz	r5, 1469c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   14690:	4c0c      	ldr	r4, [pc, #48]	; (146c4 <log_init+0x48>)
   14692:	4e0d      	ldr	r6, [pc, #52]	; (146c8 <log_init+0x4c>)
   14694:	1b36      	subs	r6, r6, r4
   14696:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   14698:	42b5      	cmp	r5, r6
   1469a:	db00      	blt.n	1469e <log_init+0x22>
}
   1469c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1469e:	7b23      	ldrb	r3, [r4, #12]
   146a0:	b153      	cbz	r3, 146b8 <log_init+0x3c>
			if (backend->api->init != NULL) {
   146a2:	6823      	ldr	r3, [r4, #0]
   146a4:	699b      	ldr	r3, [r3, #24]
   146a6:	b10b      	cbz	r3, 146ac <log_init+0x30>
				backend->api->init(backend);
   146a8:	4620      	mov	r0, r4
   146aa:	4798      	blx	r3
			log_backend_enable(backend,
   146ac:	6863      	ldr	r3, [r4, #4]
   146ae:	2204      	movs	r2, #4
   146b0:	4620      	mov	r0, r4
   146b2:	6819      	ldr	r1, [r3, #0]
   146b4:	f000 f83e 	bl	14734 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   146b8:	3501      	adds	r5, #1
   146ba:	3410      	adds	r4, #16
   146bc:	e7ec      	b.n	14698 <log_init+0x1c>
   146be:	bf00      	nop
   146c0:	2000ddd8 	.word	0x2000ddd8
   146c4:	0002c424 	.word	0x0002c424
   146c8:	0002c434 	.word	0x0002c434

000146cc <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   146cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
   146ce:	4f0c      	ldr	r7, [pc, #48]	; (14700 <z_impl_log_panic+0x34>)
   146d0:	783d      	ldrb	r5, [r7, #0]
   146d2:	b94d      	cbnz	r5, 146e8 <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   146d4:	f7ff ffd2 	bl	1467c <log_init>
   146d8:	4c0a      	ldr	r4, [pc, #40]	; (14704 <z_impl_log_panic+0x38>)
   146da:	4e0b      	ldr	r6, [pc, #44]	; (14708 <z_impl_log_panic+0x3c>)
   146dc:	1b36      	subs	r6, r6, r4
   146de:	1136      	asrs	r6, r6, #4

	for (int i = 0; i < log_backend_count_get(); i++) {
   146e0:	42b5      	cmp	r5, r6
   146e2:	db02      	blt.n	146ea <z_impl_log_panic+0x1e>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
   146e4:	2301      	movs	r3, #1
   146e6:	703b      	strb	r3, [r7, #0]
}
   146e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   146ea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   146ec:	795b      	ldrb	r3, [r3, #5]
   146ee:	b11b      	cbz	r3, 146f8 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
   146f0:	6823      	ldr	r3, [r4, #0]
   146f2:	4620      	mov	r0, r4
   146f4:	695b      	ldr	r3, [r3, #20]
   146f6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   146f8:	3501      	adds	r5, #1
   146fa:	3410      	adds	r4, #16
   146fc:	e7f0      	b.n	146e0 <z_impl_log_panic+0x14>
   146fe:	bf00      	nop
   14700:	2000efcc 	.word	0x2000efcc
   14704:	0002c424 	.word	0x0002c424
   14708:	0002c434 	.word	0x0002c434

0001470c <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   1470c:	2201      	movs	r2, #1
   1470e:	4b01      	ldr	r3, [pc, #4]	; (14714 <z_log_notify_backend_enabled+0x8>)
   14710:	701a      	strb	r2, [r3, #0]
}
   14712:	4770      	bx	lr
   14714:	2000efcb 	.word	0x2000efcb

00014718 <log_source_name_get>:
   14718:	4a04      	ldr	r2, [pc, #16]	; (1472c <log_source_name_get+0x14>)
   1471a:	4b05      	ldr	r3, [pc, #20]	; (14730 <log_source_name_get+0x18>)
   1471c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1471e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   14722:	bf34      	ite	cc
   14724:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   14728:	2000      	movcs	r0, #0
}
   1472a:	4770      	bx	lr
   1472c:	0002c344 	.word	0x0002c344
   14730:	0002c424 	.word	0x0002c424

00014734 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14734:	4b05      	ldr	r3, [pc, #20]	; (1474c <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
   14736:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   14738:	1ac3      	subs	r3, r0, r3
   1473a:	111b      	asrs	r3, r3, #4
   1473c:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
   1473e:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   14740:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   14742:	6843      	ldr	r3, [r0, #4]
	backend->cb->ctx = ctx;
   14744:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   14746:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
   14748:	f7ff bfe0 	b.w	1470c <z_log_notify_backend_enabled>
   1474c:	0002c424 	.word	0x0002c424

00014750 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14750:	b40e      	push	{r1, r2, r3}
   14752:	b503      	push	{r0, r1, lr}
   14754:	ab03      	add	r3, sp, #12
   14756:	f853 2b04 	ldr.w	r2, [r3], #4
   1475a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1475c:	4804      	ldr	r0, [pc, #16]	; (14770 <print_formatted+0x20>)
	va_start(args, fmt);
   1475e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14760:	f7ff f886 	bl	13870 <cbvprintf>
	va_end(args);

	return length;
}
   14764:	b002      	add	sp, #8
   14766:	f85d eb04 	ldr.w	lr, [sp], #4
   1476a:	b003      	add	sp, #12
   1476c:	4770      	bx	lr
   1476e:	bf00      	nop
   14770:	0002655b 	.word	0x0002655b

00014774 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   14774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14778:	461f      	mov	r7, r3
   1477a:	b087      	sub	sp, #28
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1477c:	f001 0301 	and.w	r3, r1, #1
{
   14780:	9205      	str	r2, [sp, #20]
   14782:	4606      	mov	r6, r0
   14784:	4688      	mov	r8, r1
   14786:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   1478a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1478e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14792:	9304      	str	r3, [sp, #16]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   14794:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   14798:	f011 fedd 	bl	26556 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1479c:	4602      	mov	r2, r0
   1479e:	2800      	cmp	r0, #0
   147a0:	d044      	beq.n	1482c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   147a2:	4630      	mov	r0, r6
   147a4:	4938      	ldr	r1, [pc, #224]	; (14888 <prefix_print+0x114>)
   147a6:	f7ff ffd3 	bl	14750 <print_formatted>
   147aa:	4604      	mov	r4, r0
	}

	if (stamp) {
   147ac:	f1bb 0f00 	cmp.w	fp, #0
   147b0:	d008      	beq.n	147c4 <prefix_print+0x50>
	if (!format) {
   147b2:	f018 0f44 	tst.w	r8, #68	; 0x44
   147b6:	d13b      	bne.n	14830 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   147b8:	463a      	mov	r2, r7
   147ba:	4630      	mov	r0, r6
   147bc:	4933      	ldr	r1, [pc, #204]	; (1488c <prefix_print+0x118>)
   147be:	f7ff ffc7 	bl	14750 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   147c2:	4404      	add	r4, r0
	if (color) {
   147c4:	9b04      	ldr	r3, [sp, #16]
   147c6:	b153      	cbz	r3, 147de <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   147c8:	4b31      	ldr	r3, [pc, #196]	; (14890 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   147ca:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   147cc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   147d0:	4b30      	ldr	r3, [pc, #192]	; (14894 <prefix_print+0x120>)
   147d2:	4931      	ldr	r1, [pc, #196]	; (14898 <prefix_print+0x124>)
   147d4:	2a00      	cmp	r2, #0
   147d6:	bf08      	it	eq
   147d8:	461a      	moveq	r2, r3
   147da:	f7ff ffb9 	bl	14750 <print_formatted>
	if (level_on) {
   147de:	b13d      	cbz	r5, 147f0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   147e0:	4b2e      	ldr	r3, [pc, #184]	; (1489c <prefix_print+0x128>)
   147e2:	4630      	mov	r0, r6
   147e4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   147e8:	492d      	ldr	r1, [pc, #180]	; (148a0 <prefix_print+0x12c>)
   147ea:	f7ff ffb1 	bl	14750 <print_formatted>
   147ee:	4605      	mov	r5, r0
	if (source_id >= 0) {
   147f0:	f1ba 0f00 	cmp.w	sl, #0
   147f4:	db16      	blt.n	14824 <prefix_print+0xb0>
		total += print_formatted(output,
   147f6:	9b05      	ldr	r3, [sp, #20]
   147f8:	2b00      	cmp	r3, #0
   147fa:	d043      	beq.n	14884 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   147fc:	2301      	movs	r3, #1
   147fe:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   14802:	4b28      	ldr	r3, [pc, #160]	; (148a4 <prefix_print+0x130>)
   14804:	f019 0f10 	tst.w	r9, #16
   14808:	4f27      	ldr	r7, [pc, #156]	; (148a8 <prefix_print+0x134>)
   1480a:	bf18      	it	ne
   1480c:	461f      	movne	r7, r3
   1480e:	4651      	mov	r1, sl
   14810:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   14814:	f7ff ff80 	bl	14718 <log_source_name_get>
   14818:	4639      	mov	r1, r7
   1481a:	4602      	mov	r2, r0
   1481c:	4630      	mov	r0, r6
   1481e:	f7ff ff97 	bl	14750 <print_formatted>
   14822:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   14824:	1928      	adds	r0, r5, r4
   14826:	b007      	add	sp, #28
   14828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1482c:	4604      	mov	r4, r0
   1482e:	e7bd      	b.n	147ac <prefix_print+0x38>
	} else if (freq != 0U) {
   14830:	4b1e      	ldr	r3, [pc, #120]	; (148ac <prefix_print+0x138>)
   14832:	6818      	ldr	r0, [r3, #0]
   14834:	2800      	cmp	r0, #0
   14836:	d0c4      	beq.n	147c2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   14838:	4b1d      	ldr	r3, [pc, #116]	; (148b0 <prefix_print+0x13c>)
   1483a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1483e:	6819      	ldr	r1, [r3, #0]
		mins = seconds / 60U;
   14840:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		timestamp /= timestamp_div;
   14844:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   14848:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
   1484c:	fbb1 f2fc 	udiv	r2, r1, ip
		remainder = timestamp % freq;
   14850:	fb00 7711 	mls	r7, r0, r1, r7
   14854:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   14858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1485c:	434f      	muls	r7, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1485e:	fbb7 f8f0 	udiv	r8, r7, r0
   14862:	fb00 7718 	mls	r7, r0, r8, r7
		mins = seconds / 60U;
   14866:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1486a:	434f      	muls	r7, r1
   1486c:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   14870:	fb0e c113 	mls	r1, lr, r3, ip
   14874:	e9cd 8001 	strd	r8, r0, [sp, #4]
   14878:	9100      	str	r1, [sp, #0]
   1487a:	4630      	mov	r0, r6
   1487c:	490d      	ldr	r1, [pc, #52]	; (148b4 <prefix_print+0x140>)
   1487e:	f7ff ff67 	bl	14750 <print_formatted>
   14882:	e79e      	b.n	147c2 <prefix_print+0x4e>
		total += print_formatted(output,
   14884:	4f08      	ldr	r7, [pc, #32]	; (148a8 <prefix_print+0x134>)
   14886:	e7c2      	b.n	1480e <prefix_print+0x9a>
   14888:	0002d4cf 	.word	0x0002d4cf
   1488c:	0002d4d3 	.word	0x0002d4d3
   14890:	0002c5c0 	.word	0x0002c5c0
   14894:	0002d4c1 	.word	0x0002d4c1
   14898:	0002e0c8 	.word	0x0002e0c8
   1489c:	0002c5d4 	.word	0x0002c5d4
   148a0:	0002d4f8 	.word	0x0002d4f8
   148a4:	0002d4cb 	.word	0x0002d4cb
   148a8:	0002d4c6 	.word	0x0002d4c6
   148ac:	2000dddc 	.word	0x2000dddc
   148b0:	2000dde0 	.word	0x2000dde0
   148b4:	0002d4dc 	.word	0x0002d4dc

000148b8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   148b8:	b538      	push	{r3, r4, r5, lr}
   148ba:	460c      	mov	r4, r1
	if (color) {
   148bc:	07e1      	lsls	r1, r4, #31
{
   148be:	4605      	mov	r5, r0
	if (color) {
   148c0:	d503      	bpl.n	148ca <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   148c2:	4a08      	ldr	r2, [pc, #32]	; (148e4 <postfix_print+0x2c>)
   148c4:	4908      	ldr	r1, [pc, #32]	; (148e8 <postfix_print+0x30>)
   148c6:	f7ff ff43 	bl	14750 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   148ca:	06e2      	lsls	r2, r4, #27
   148cc:	d408      	bmi.n	148e0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   148ce:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   148d0:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   148d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   148d6:	bf4c      	ite	mi
   148d8:	4904      	ldrmi	r1, [pc, #16]	; (148ec <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   148da:	4905      	ldrpl	r1, [pc, #20]	; (148f0 <postfix_print+0x38>)
   148dc:	f7ff bf38 	b.w	14750 <print_formatted>
}
   148e0:	bd38      	pop	{r3, r4, r5, pc}
   148e2:	bf00      	nop
   148e4:	0002d4c1 	.word	0x0002d4c1
   148e8:	0002e0c8 	.word	0x0002e0c8
   148ec:	0002fa73 	.word	0x0002fa73
   148f0:	0002fa72 	.word	0x0002fa72

000148f4 <hexdump_line_print>:
{
   148f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   148f8:	461d      	mov	r5, r3
   148fa:	9b08      	ldr	r3, [sp, #32]
   148fc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   148fe:	06da      	lsls	r2, r3, #27
{
   14900:	4604      	mov	r4, r0
   14902:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14904:	d405      	bmi.n	14912 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14906:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   14908:	bf4c      	ite	mi
   1490a:	492b      	ldrmi	r1, [pc, #172]	; (149b8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   1490c:	492b      	ldrpl	r1, [pc, #172]	; (149bc <hexdump_line_print+0xc8>)
   1490e:	f7ff ff1f 	bl	14750 <print_formatted>
{
   14912:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   14916:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 149c4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   1491a:	45a8      	cmp	r8, r5
   1491c:	db2d      	blt.n	1497a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1491e:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   14920:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 149c8 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   14924:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 149cc <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   14928:	f8df a098 	ldr.w	sl, [pc, #152]	; 149c4 <hexdump_line_print+0xd0>
		if (i < length) {
   1492c:	42bd      	cmp	r5, r7
   1492e:	d232      	bcs.n	14996 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   14930:	4649      	mov	r1, r9
   14932:	4620      	mov	r0, r4
   14934:	5d72      	ldrb	r2, [r6, r5]
   14936:	f7ff ff0b 	bl	14750 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1493a:	3501      	adds	r5, #1
   1493c:	2d10      	cmp	r5, #16
   1493e:	d123      	bne.n	14988 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   14940:	4620      	mov	r0, r4
   14942:	491f      	ldr	r1, [pc, #124]	; (149c0 <hexdump_line_print+0xcc>)
   14944:	f7ff ff04 	bl	14750 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14948:	2500      	movs	r5, #0
			print_formatted(output, " ");
   1494a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 149c4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1494e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 149d0 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   14952:	f8df a080 	ldr.w	sl, [pc, #128]	; 149d4 <hexdump_line_print+0xe0>
		if (i < length) {
   14956:	42af      	cmp	r7, r5
   14958:	d929      	bls.n	149ae <hexdump_line_print+0xba>
			char c = (char)data[i];
   1495a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   1495c:	4651      	mov	r1, sl
   1495e:	f812 3009 	ldrb.w	r3, [r2, r9]
   14962:	4620      	mov	r0, r4
   14964:	f013 0f97 	tst.w	r3, #151	; 0x97
   14968:	bf08      	it	eq
   1496a:	222e      	moveq	r2, #46	; 0x2e
   1496c:	f7ff fef0 	bl	14750 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14970:	3501      	adds	r5, #1
   14972:	2d10      	cmp	r5, #16
   14974:	d114      	bne.n	149a0 <hexdump_line_print+0xac>
}
   14976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   1497a:	4649      	mov	r1, r9
   1497c:	4620      	mov	r0, r4
   1497e:	f7ff fee7 	bl	14750 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14982:	f108 0801 	add.w	r8, r8, #1
   14986:	e7c8      	b.n	1491a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   14988:	076a      	lsls	r2, r5, #29
   1498a:	d1cf      	bne.n	1492c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   1498c:	4651      	mov	r1, sl
   1498e:	4620      	mov	r0, r4
   14990:	f7ff fede 	bl	14750 <print_formatted>
   14994:	e7ca      	b.n	1492c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   14996:	4641      	mov	r1, r8
   14998:	4620      	mov	r0, r4
   1499a:	f7ff fed9 	bl	14750 <print_formatted>
   1499e:	e7cc      	b.n	1493a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   149a0:	076b      	lsls	r3, r5, #29
   149a2:	d1d8      	bne.n	14956 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   149a4:	4641      	mov	r1, r8
   149a6:	4620      	mov	r0, r4
   149a8:	f7ff fed2 	bl	14750 <print_formatted>
   149ac:	e7d3      	b.n	14956 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   149ae:	4641      	mov	r1, r8
   149b0:	4620      	mov	r0, r4
   149b2:	f7ff fecd 	bl	14750 <print_formatted>
   149b6:	e7db      	b.n	14970 <hexdump_line_print+0x7c>
   149b8:	0002fa73 	.word	0x0002fa73
   149bc:	0002fa72 	.word	0x0002fa72
   149c0:	0002d508 	.word	0x0002d508
   149c4:	0002d506 	.word	0x0002d506
   149c8:	0002d504 	.word	0x0002d504
   149cc:	0002d4fe 	.word	0x0002d4fe
   149d0:	00030304 	.word	0x00030304
   149d4:	0002e249 	.word	0x0002e249

000149d8 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   149d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   149dc:	f011 0607 	ands.w	r6, r1, #7
{
   149e0:	4605      	mov	r5, r0
   149e2:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   149e6:	461c      	mov	r4, r3
	if (!raw_string) {
   149e8:	d00b      	beq.n	14a02 <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
   149ea:	f3c1 1389 	ubfx	r3, r1, #6, #10
   149ee:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   149f2:	e9cd 6100 	strd	r6, r1, [sp]
   149f6:	9302      	str	r3, [sp, #8]
   149f8:	4639      	mov	r1, r7
   149fa:	4613      	mov	r3, r2
   149fc:	2201      	movs	r2, #1
   149fe:	f7ff feb9 	bl	14774 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   14a02:	4643      	mov	r3, r8
   14a04:	4622      	mov	r2, r4
   14a06:	4629      	mov	r1, r5
   14a08:	480d      	ldr	r0, [pc, #52]	; (14a40 <log_output_string+0x68>)
   14a0a:	f7fe ff31 	bl	13870 <cbvprintf>

	(void)length;

	if (raw_string) {
   14a0e:	b98e      	cbnz	r6, 14a34 <log_output_string+0x5c>
   14a10:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   14a12:	4633      	mov	r3, r6
   14a14:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   14a18:	2e00      	cmp	r6, #0
   14a1a:	d1fa      	bne.n	14a12 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   14a1c:	2b0a      	cmp	r3, #10
   14a1e:	d103      	bne.n	14a28 <log_output_string+0x50>
			print_formatted(output, "\r");
   14a20:	4628      	mov	r0, r5
   14a22:	4908      	ldr	r1, [pc, #32]	; (14a44 <log_output_string+0x6c>)
   14a24:	f7ff fe94 	bl	14750 <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14a28:	4628      	mov	r0, r5
}
   14a2a:	b004      	add	sp, #16
   14a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
   14a30:	f011 bdac 	b.w	2658c <log_output_flush>
		postfix_print(output, flags, level);
   14a34:	4632      	mov	r2, r6
   14a36:	4639      	mov	r1, r7
   14a38:	4628      	mov	r0, r5
   14a3a:	f7ff ff3d 	bl	148b8 <postfix_print>
   14a3e:	e7f3      	b.n	14a28 <log_output_string+0x50>
   14a40:	0002655b 	.word	0x0002655b
   14a44:	0002d50a 	.word	0x0002d50a

00014a48 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   14a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14a4c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14a4e:	4698      	mov	r8, r3
   14a50:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   14a54:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   14a58:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(output, flags, true, timestamp,
   14a5c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   14a60:	e9cd 9100 	strd	r9, r1, [sp]
   14a64:	9302      	str	r3, [sp, #8]
   14a66:	4631      	mov	r1, r6
   14a68:	4613      	mov	r3, r2
   14a6a:	2201      	movs	r2, #1
{
   14a6c:	4604      	mov	r4, r0
	prefix_offset = prefix_print(output, flags, true, timestamp,
   14a6e:	f7ff fe81 	bl	14774 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   14a72:	4642      	mov	r2, r8
	prefix_offset = prefix_print(output, flags, true, timestamp,
   14a74:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
   14a76:	4910      	ldr	r1, [pc, #64]	; (14ab8 <log_output_hexdump+0x70>)
   14a78:	4620      	mov	r0, r4
   14a7a:	f7ff fe69 	bl	14750 <print_formatted>

	while (length != 0U) {
   14a7e:	b955      	cbnz	r5, 14a96 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
   14a80:	4620      	mov	r0, r4
   14a82:	464a      	mov	r2, r9
   14a84:	4631      	mov	r1, r6
   14a86:	f7ff ff17 	bl	148b8 <postfix_print>
	log_output_flush(output);
   14a8a:	4620      	mov	r0, r4
}
   14a8c:	b004      	add	sp, #16
   14a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   14a92:	f011 bd7b 	b.w	2658c <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   14a96:	2d10      	cmp	r5, #16
   14a98:	46a8      	mov	r8, r5
   14a9a:	bf28      	it	cs
   14a9c:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
   14aa0:	4639      	mov	r1, r7
   14aa2:	4653      	mov	r3, sl
   14aa4:	4642      	mov	r2, r8
   14aa6:	4620      	mov	r0, r4
   14aa8:	9600      	str	r6, [sp, #0]
   14aaa:	f7ff ff23 	bl	148f4 <hexdump_line_print>
		data += part_len;
   14aae:	4447      	add	r7, r8
		length -= part_len;
   14ab0:	eba5 0508 	sub.w	r5, r5, r8
   14ab4:	e7e3      	b.n	14a7e <log_output_hexdump+0x36>
   14ab6:	bf00      	nop
   14ab8:	0002e0c8 	.word	0x0002e0c8

00014abc <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14abc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14abe:	2100      	movs	r1, #0
	timestamp_div = 1U;
   14ac0:	4a07      	ldr	r2, [pc, #28]	; (14ae0 <log_output_timestamp_freq_set+0x24>)
{
   14ac2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   14ac4:	4c07      	ldr	r4, [pc, #28]	; (14ae4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   14ac6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   14ac8:	42a0      	cmp	r0, r4
   14aca:	d804      	bhi.n	14ad6 <log_output_timestamp_freq_set+0x1a>
   14acc:	b101      	cbz	r1, 14ad0 <log_output_timestamp_freq_set+0x14>
   14ace:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   14ad0:	4b05      	ldr	r3, [pc, #20]	; (14ae8 <log_output_timestamp_freq_set+0x2c>)
   14ad2:	6018      	str	r0, [r3, #0]
}
   14ad4:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   14ad6:	2101      	movs	r1, #1
		frequency /= 2U;
   14ad8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14ada:	005b      	lsls	r3, r3, #1
   14adc:	e7f4      	b.n	14ac8 <log_output_timestamp_freq_set+0xc>
   14ade:	bf00      	nop
   14ae0:	2000dde0 	.word	0x2000dde0
   14ae4:	000f4240 	.word	0x000f4240
   14ae8:	2000dddc 	.word	0x2000dddc

00014aec <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   14aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14aee:	460d      	mov	r5, r1
   14af0:	4604      	mov	r4, r0
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   14af2:	4f06      	ldr	r7, [pc, #24]	; (14b0c <char_out+0x20>)
   14af4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   14af6:	42b4      	cmp	r4, r6
   14af8:	d101      	bne.n	14afe <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   14afa:	4628      	mov	r0, r5
   14afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   14afe:	6838      	ldr	r0, [r7, #0]
   14b00:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14b04:	6883      	ldr	r3, [r0, #8]
   14b06:	685b      	ldr	r3, [r3, #4]
   14b08:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14b0a:	e7f4      	b.n	14af6 <char_out+0xa>
   14b0c:	2000ddf8 	.word	0x2000ddf8

00014b10 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   14b10:	4b01      	ldr	r3, [pc, #4]	; (14b18 <log_backend_uart_init+0x8>)
   14b12:	4a02      	ldr	r2, [pc, #8]	; (14b1c <log_backend_uart_init+0xc>)
   14b14:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   14b16:	4770      	bx	lr
   14b18:	2000ddf8 	.word	0x2000ddf8
   14b1c:	0002c0c0 	.word	0x0002c0c0

00014b20 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   14b20:	2201      	movs	r2, #1
   14b22:	4b02      	ldr	r3, [pc, #8]	; (14b2c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   14b24:	4802      	ldr	r0, [pc, #8]	; (14b30 <panic+0x10>)
   14b26:	701a      	strb	r2, [r3, #0]
   14b28:	f011 bd30 	b.w	2658c <log_output_flush>
   14b2c:	2000efcd 	.word	0x2000efcd
   14b30:	0002c604 	.word	0x0002c604

00014b34 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   14b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   14b36:	200f      	movs	r0, #15
   14b38:	9002      	str	r0, [sp, #8]
   14b3a:	9807      	ldr	r0, [sp, #28]
   14b3c:	9001      	str	r0, [sp, #4]
   14b3e:	9806      	ldr	r0, [sp, #24]
   14b40:	9000      	str	r0, [sp, #0]
   14b42:	4803      	ldr	r0, [pc, #12]	; (14b50 <sync_hexdump+0x1c>)
   14b44:	f7ff ff80 	bl	14a48 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   14b48:	b005      	add	sp, #20
   14b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b4e:	bf00      	nop
   14b50:	0002c604 	.word	0x0002c604

00014b54 <sync_string>:
{
   14b54:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   14b56:	200f      	movs	r0, #15
   14b58:	9001      	str	r0, [sp, #4]
   14b5a:	9804      	ldr	r0, [sp, #16]
   14b5c:	9000      	str	r0, [sp, #0]
   14b5e:	4803      	ldr	r0, [pc, #12]	; (14b6c <sync_string+0x18>)
   14b60:	f7ff ff3a 	bl	149d8 <log_output_string>
}
   14b64:	b003      	add	sp, #12
   14b66:	f85d fb04 	ldr.w	pc, [sp], #4
   14b6a:	bf00      	nop
   14b6c:	0002c604 	.word	0x0002c604

00014b70 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   14b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14b72:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   14b74:	4c0f      	ldr	r4, [pc, #60]	; (14bb4 <z_impl_zsock_socket+0x44>)
   14b76:	4e10      	ldr	r6, [pc, #64]	; (14bb8 <z_impl_zsock_socket+0x48>)
   14b78:	42b4      	cmp	r4, r6
   14b7a:	d307      	bcc.n	14b8c <z_impl_zsock_socket+0x1c>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   14b7c:	f012 fba6 	bl	272cc <__errno>
   14b80:	236a      	movs	r3, #106	; 0x6a
   14b82:	6003      	str	r3, [r0, #0]
	return -1;
}
   14b84:	f04f 30ff 	mov.w	r0, #4294967295
   14b88:	b002      	add	sp, #8
   14b8a:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   14b8c:	6823      	ldr	r3, [r4, #0]
   14b8e:	42ab      	cmp	r3, r5
   14b90:	d000      	beq.n	14b94 <z_impl_zsock_socket+0x24>
   14b92:	b96b      	cbnz	r3, 14bb0 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   14b94:	4628      	mov	r0, r5
   14b96:	6863      	ldr	r3, [r4, #4]
   14b98:	e9cd 1200 	strd	r1, r2, [sp]
   14b9c:	4798      	blx	r3
   14b9e:	e9dd 1200 	ldrd	r1, r2, [sp]
   14ba2:	b128      	cbz	r0, 14bb0 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   14ba4:	4628      	mov	r0, r5
   14ba6:	68a3      	ldr	r3, [r4, #8]
}
   14ba8:	b002      	add	sp, #8
   14baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   14bae:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   14bb0:	340c      	adds	r4, #12
   14bb2:	e7e1      	b.n	14b78 <z_impl_zsock_socket+0x8>
   14bb4:	0002c310 	.word	0x0002c310
   14bb8:	0002c31c 	.word	0x0002c31c

00014bbc <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   14bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc0:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   14bc2:	2700      	movs	r7, #0
{
   14bc4:	b09b      	sub	sp, #108	; 0x6c
   14bc6:	9104      	str	r1, [sp, #16]

	end = sys_clock_timeout_end_calc(timeout);
   14bc8:	4610      	mov	r0, r2
   14bca:	4619      	mov	r1, r3
{
   14bcc:	461d      	mov	r5, r3
   14bce:	4614      	mov	r4, r2
	end = sys_clock_timeout_end_calc(timeout);
   14bd0:	f015 ff76 	bl	2aac0 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   14bd4:	46b0      	mov	r8, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   14bd6:	46b9      	mov	r9, r7
	end = sys_clock_timeout_end_calc(timeout);
   14bd8:	e9cd 0105 	strd	r0, r1, [sp, #20]
	pev = poll_events;
   14bdc:	ab0b      	add	r3, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   14bde:	f8dd b010 	ldr.w	fp, [sp, #16]
	pev = poll_events;
   14be2:	9308      	str	r3, [sp, #32]
	bool offload = false;
   14be4:	9703      	str	r7, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   14be6:	f1bb 0f00 	cmp.w	fp, #0
   14bea:	d11f      	bne.n	14c2c <zsock_poll_internal+0x70>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   14bec:	9b03      	ldr	r3, [sp, #12]
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d063      	beq.n	14cba <zsock_poll_internal+0xfe>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14bf2:	3501      	adds	r5, #1
   14bf4:	bf0b      	itete	eq
   14bf6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   14bfa:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   14bfe:	f04f 33ff 	moveq.w	r3, #4294967295
   14c02:	fba4 4503 	umullne	r4, r5, r4, r3
   14c06:	bf1c      	itt	ne
   14c08:	0be3      	lsrne	r3, r4, #15
   14c0a:	ea43 4345 	orrne.w	r3, r3, r5, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   14c0e:	9301      	str	r3, [sp, #4]
   14c10:	9b04      	ldr	r3, [sp, #16]
   14c12:	4639      	mov	r1, r7
   14c14:	9300      	str	r3, [sp, #0]
   14c16:	f44f 7282 	mov.w	r2, #260	; 0x104
   14c1a:	4633      	mov	r3, r6
   14c1c:	4648      	mov	r0, r9
   14c1e:	f012 f83a 	bl	26c96 <z_fdtable_call_ioctl>
   14c22:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   14c24:	4638      	mov	r0, r7
   14c26:	b01b      	add	sp, #108	; 0x6c
   14c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   14c2c:	f8d8 0000 	ldr.w	r0, [r8]
   14c30:	2800      	cmp	r0, #0
   14c32:	db3d      	blt.n	14cb0 <zsock_poll_internal+0xf4>
	ctx = z_get_fd_obj_and_vtable(sock,
   14c34:	aa0a      	add	r2, sp, #40	; 0x28
   14c36:	a909      	add	r1, sp, #36	; 0x24
   14c38:	f7fe fc14 	bl	13464 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   14c3c:	9007      	str	r0, [sp, #28]
   14c3e:	2800      	cmp	r0, #0
   14c40:	d036      	beq.n	14cb0 <zsock_poll_internal+0xf4>
		(void)k_mutex_lock(lock, K_FOREVER);
   14c42:	f04f 32ff 	mov.w	r2, #4294967295
   14c46:	f04f 33ff 	mov.w	r3, #4294967295
   14c4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   14c4c:	f012 f832 	bl	26cb4 <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   14c50:	ab1a      	add	r3, sp, #104	; 0x68
   14c52:	9301      	str	r3, [sp, #4]
   14c54:	ab08      	add	r3, sp, #32
   14c56:	9300      	str	r3, [sp, #0]
   14c58:	f44f 7281 	mov.w	r2, #258	; 0x102
   14c5c:	4643      	mov	r3, r8
   14c5e:	9907      	ldr	r1, [sp, #28]
   14c60:	9809      	ldr	r0, [sp, #36]	; 0x24
   14c62:	f012 f818 	bl	26c96 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   14c66:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   14c6a:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   14c6c:	d00e      	beq.n	14c8c <zsock_poll_internal+0xd0>
		} else if (result == -EXDEV) {
   14c6e:	f110 0f12 	cmn.w	r0, #18
   14c72:	9907      	ldr	r1, [sp, #28]
   14c74:	d10e      	bne.n	14c94 <zsock_poll_internal+0xd8>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   14c76:	f1b9 0f00 	cmp.w	r9, #0
   14c7a:	d102      	bne.n	14c82 <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   14c7c:	460f      	mov	r7, r1
   14c7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
			offload = true;
   14c82:	2301      	movs	r3, #1
			result = 0;
   14c84:	f04f 0a00 	mov.w	sl, #0
			offload = true;
   14c88:	9303      	str	r3, [sp, #12]
   14c8a:	e003      	b.n	14c94 <zsock_poll_internal+0xd8>
			timeout = K_NO_WAIT;
   14c8c:	2400      	movs	r4, #0
   14c8e:	2500      	movs	r5, #0
			result = 0;
   14c90:	f04f 0a00 	mov.w	sl, #0
		k_mutex_unlock(lock);
   14c94:	980a      	ldr	r0, [sp, #40]	; 0x28
   14c96:	f011 fffc 	bl	26c92 <k_mutex_unlock>
		if (result < 0) {
   14c9a:	f1ba 0f00 	cmp.w	sl, #0
   14c9e:	da07      	bge.n	14cb0 <zsock_poll_internal+0xf4>
			errno = -result;
   14ca0:	f012 fb14 	bl	272cc <__errno>
   14ca4:	f1ca 0300 	rsb	r3, sl, #0
			return -1;
   14ca8:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   14cac:	6003      	str	r3, [r0, #0]
			return -1;
   14cae:	e7b9      	b.n	14c24 <zsock_poll_internal+0x68>
	for (pfd = fds, i = nfds; i--; pfd++) {
   14cb0:	f108 0808 	add.w	r8, r8, #8
   14cb4:	f10b 3bff 	add.w	fp, fp, #4294967295
   14cb8:	e795      	b.n	14be6 <zsock_poll_internal+0x2a>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   14cba:	ea54 0305 	orrs.w	r3, r4, r5
   14cbe:	d011      	beq.n	14ce4 <zsock_poll_internal+0x128>
   14cc0:	1c6a      	adds	r2, r5, #1
   14cc2:	bf08      	it	eq
   14cc4:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   14cc8:	d00c      	beq.n	14ce4 <zsock_poll_internal+0x128>
		int64_t remaining = end - sys_clock_tick_get();
   14cca:	f00f fa95 	bl	241f8 <sys_clock_tick_get>
   14cce:	9b05      	ldr	r3, [sp, #20]
   14cd0:	1a1c      	subs	r4, r3, r0
   14cd2:	9b06      	ldr	r3, [sp, #24]
   14cd4:	eb63 0501 	sbc.w	r5, r3, r1
   14cd8:	2c00      	cmp	r4, #0
   14cda:	f175 0300 	sbcs.w	r3, r5, #0
   14cde:	bfbc      	itt	lt
   14ce0:	2400      	movlt	r4, #0
   14ce2:	2500      	movlt	r5, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   14ce4:	9908      	ldr	r1, [sp, #32]
   14ce6:	af0b      	add	r7, sp, #44	; 0x2c
   14ce8:	4b3e      	ldr	r3, [pc, #248]	; (14de4 <zsock_poll_internal+0x228>)
   14cea:	1bc9      	subs	r1, r1, r7
   14cec:	1089      	asrs	r1, r1, #2
   14cee:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   14cf0:	462b      	mov	r3, r5
   14cf2:	4622      	mov	r2, r4
   14cf4:	4638      	mov	r0, r7
   14cf6:	f00f fa99 	bl	2422c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   14cfa:	f100 030b 	add.w	r3, r0, #11
   14cfe:	2b0b      	cmp	r3, #11
   14d00:	4681      	mov	r9, r0
   14d02:	d808      	bhi.n	14d16 <zsock_poll_internal+0x15a>
   14d04:	f640 0881 	movw	r8, #2177	; 0x881
   14d08:	fa28 f803 	lsr.w	r8, r8, r3
   14d0c:	ea6f 0808 	mvn.w	r8, r8
   14d10:	f018 0801 	ands.w	r8, r8, #1
   14d14:	d004      	beq.n	14d20 <zsock_poll_internal+0x164>
			errno = -ret;
   14d16:	f012 fad9 	bl	272cc <__errno>
   14d1a:	f1c9 0300 	rsb	r3, r9, #0
   14d1e:	e7c3      	b.n	14ca8 <zsock_poll_internal+0xec>
		pev = poll_events;
   14d20:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   14d22:	46b1      	mov	r9, r6
		ret = 0;
   14d24:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   14d26:	f8dd a010 	ldr.w	sl, [sp, #16]
   14d2a:	f1ba 0f00 	cmp.w	sl, #0
   14d2e:	d11b      	bne.n	14d68 <zsock_poll_internal+0x1ac>
		if (retry) {
   14d30:	f1b8 0f00 	cmp.w	r8, #0
   14d34:	f43f af76 	beq.w	14c24 <zsock_poll_internal+0x68>
			if (ret > 0) {
   14d38:	2f00      	cmp	r7, #0
   14d3a:	f73f af73 	bgt.w	14c24 <zsock_poll_internal+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14d3e:	ea54 0305 	orrs.w	r3, r4, r5
   14d42:	f43f af6f 	beq.w	14c24 <zsock_poll_internal+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14d46:	1c6b      	adds	r3, r5, #1
   14d48:	bf08      	it	eq
   14d4a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   14d4e:	d0c9      	beq.n	14ce4 <zsock_poll_internal+0x128>
				int64_t remaining = end - sys_clock_tick_get();
   14d50:	f00f fa52 	bl	241f8 <sys_clock_tick_get>
   14d54:	9b05      	ldr	r3, [sp, #20]
   14d56:	1a1c      	subs	r4, r3, r0
   14d58:	9b06      	ldr	r3, [sp, #24]
   14d5a:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   14d5e:	2c01      	cmp	r4, #1
   14d60:	f175 0300 	sbcs.w	r3, r5, #0
   14d64:	dabe      	bge.n	14ce4 <zsock_poll_internal+0x128>
   14d66:	e75d      	b.n	14c24 <zsock_poll_internal+0x68>
			pfd->revents = 0;
   14d68:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   14d6c:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   14d70:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   14d74:	2800      	cmp	r0, #0
   14d76:	db2d      	blt.n	14dd4 <zsock_poll_internal+0x218>
	ctx = z_get_fd_obj_and_vtable(sock,
   14d78:	aa0a      	add	r2, sp, #40	; 0x28
   14d7a:	a909      	add	r1, sp, #36	; 0x24
   14d7c:	f7fe fb72 	bl	13464 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   14d80:	4683      	mov	fp, r0
   14d82:	b920      	cbnz	r0, 14d8e <zsock_poll_internal+0x1d2>
				pfd->revents = ZSOCK_POLLNVAL;
   14d84:	2320      	movs	r3, #32
   14d86:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   14d8a:	3701      	adds	r7, #1
   14d8c:	e022      	b.n	14dd4 <zsock_poll_internal+0x218>
			(void)k_mutex_lock(lock, K_FOREVER);
   14d8e:	f04f 32ff 	mov.w	r2, #4294967295
   14d92:	f04f 33ff 	mov.w	r3, #4294967295
   14d96:	980a      	ldr	r0, [sp, #40]	; 0x28
   14d98:	f011 ff8c 	bl	26cb4 <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   14d9c:	ab08      	add	r3, sp, #32
   14d9e:	4659      	mov	r1, fp
   14da0:	f240 1203 	movw	r2, #259	; 0x103
   14da4:	9300      	str	r3, [sp, #0]
   14da6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14da8:	464b      	mov	r3, r9
   14daa:	f011 ff74 	bl	26c96 <z_fdtable_call_ioctl>
   14dae:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   14db0:	980a      	ldr	r0, [sp, #40]	; 0x28
   14db2:	f011 ff6e 	bl	26c92 <k_mutex_unlock>
			if (result == -EAGAIN) {
   14db6:	f11b 0f0b 	cmn.w	fp, #11
   14dba:	d010      	beq.n	14dde <zsock_poll_internal+0x222>
			} else if (result != 0) {
   14dbc:	f1bb 0f00 	cmp.w	fp, #0
   14dc0:	d004      	beq.n	14dcc <zsock_poll_internal+0x210>
				errno = -result;
   14dc2:	f012 fa83 	bl	272cc <__errno>
   14dc6:	f1cb 0300 	rsb	r3, fp, #0
   14dca:	e76d      	b.n	14ca8 <zsock_poll_internal+0xec>
			if (pfd->revents != 0) {
   14dcc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   14dd0:	2b00      	cmp	r3, #0
   14dd2:	d1da      	bne.n	14d8a <zsock_poll_internal+0x1ce>
		for (pfd = fds, i = nfds; i--; pfd++) {
   14dd4:	f109 0908 	add.w	r9, r9, #8
   14dd8:	f10a 3aff 	add.w	sl, sl, #4294967295
   14ddc:	e7a5      	b.n	14d2a <zsock_poll_internal+0x16e>
				retry = true;
   14dde:	f04f 0801 	mov.w	r8, #1
   14de2:	e7f7      	b.n	14dd4 <zsock_poll_internal+0x218>
   14de4:	cccccccd 	.word	0xcccccccd

00014de8 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   14de8:	4b01      	ldr	r3, [pc, #4]	; (14df0 <socket_offload_dns_register+0x8>)
   14dea:	6018      	str	r0, [r3, #0]
}
   14dec:	4770      	bx	lr
   14dee:	bf00      	nop
   14df0:	2000ddfc 	.word	0x2000ddfc

00014df4 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   14df4:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   14df6:	4c03      	ldr	r4, [pc, #12]	; (14e04 <socket_offload_getaddrinfo+0x10>)
   14df8:	6824      	ldr	r4, [r4, #0]
   14dfa:	6824      	ldr	r4, [r4, #0]
   14dfc:	46a4      	mov	ip, r4
}
   14dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   14e02:	4760      	bx	ip
   14e04:	2000ddfc 	.word	0x2000ddfc

00014e08 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   14e08:	4b01      	ldr	r3, [pc, #4]	; (14e10 <socket_offload_freeaddrinfo+0x8>)
   14e0a:	681b      	ldr	r3, [r3, #0]
   14e0c:	685b      	ldr	r3, [r3, #4]
   14e0e:	4718      	bx	r3
   14e10:	2000ddfc 	.word	0x2000ddfc

00014e14 <credentials_init>:

/* A mutex for protecting access to the credentials array. */
static struct k_mutex credential_lock;

static int credentials_init(const struct device *unused)
{
   14e14:	b508      	push	{r3, lr}
	(void)memset(credentials, 0, sizeof(credentials));
   14e16:	2240      	movs	r2, #64	; 0x40
   14e18:	2100      	movs	r1, #0
   14e1a:	4804      	ldr	r0, [pc, #16]	; (14e2c <credentials_init+0x18>)
   14e1c:	f016 f834 	bl	2ae88 <memset>
	return z_impl_k_mutex_init(mutex);
   14e20:	4803      	ldr	r0, [pc, #12]	; (14e30 <credentials_init+0x1c>)
   14e22:	f015 fbd9 	bl	2a5d8 <z_impl_k_mutex_init>

	k_mutex_init(&credential_lock);

	return 0;
}
   14e26:	2000      	movs	r0, #0
   14e28:	bd08      	pop	{r3, pc}
   14e2a:	bf00      	nop
   14e2c:	2000de14 	.word	0x2000de14
   14e30:	2000de00 	.word	0x2000de00

00014e34 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   14e34:	4b0c      	ldr	r3, [pc, #48]	; (14e68 <flash_area_open+0x34>)
{
   14e36:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   14e38:	681b      	ldr	r3, [r3, #0]
   14e3a:	b173      	cbz	r3, 14e5a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   14e3c:	4a0b      	ldr	r2, [pc, #44]	; (14e6c <flash_area_open+0x38>)
   14e3e:	6815      	ldr	r5, [r2, #0]
   14e40:	2200      	movs	r2, #0
   14e42:	42aa      	cmp	r2, r5
   14e44:	db02      	blt.n	14e4c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   14e46:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   14e4a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   14e4c:	461c      	mov	r4, r3
   14e4e:	f813 6b10 	ldrb.w	r6, [r3], #16
   14e52:	4286      	cmp	r6, r0
   14e54:	d004      	beq.n	14e60 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   14e56:	3201      	adds	r2, #1
   14e58:	e7f3      	b.n	14e42 <flash_area_open+0xe>
		return -EACCES;
   14e5a:	f06f 000c 	mvn.w	r0, #12
   14e5e:	e7f4      	b.n	14e4a <flash_area_open+0x16>
	return 0;
   14e60:	2000      	movs	r0, #0
	*fap = area;
   14e62:	600c      	str	r4, [r1, #0]
	return 0;
   14e64:	e7f1      	b.n	14e4a <flash_area_open+0x16>
   14e66:	bf00      	nop
   14e68:	2000c58c 	.word	0x2000c58c
   14e6c:	0002c654 	.word	0x0002c654

00014e70 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   14e70:	b570      	push	{r4, r5, r6, lr}
   14e72:	b088      	sub	sp, #32
   14e74:	4605      	mov	r5, r0
   14e76:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   14e78:	b2c0      	uxtb	r0, r0
   14e7a:	4669      	mov	r1, sp
{
   14e7c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   14e7e:	f7ff ffd9 	bl	14e34 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   14e82:	2800      	cmp	r0, #0
   14e84:	db1f      	blt.n	14ec6 <flash_area_get_sectors+0x56>
   14e86:	9b00      	ldr	r3, [sp, #0]
   14e88:	b1eb      	cbz	r3, 14ec6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   14e8a:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
   14e8c:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
   14e8e:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   14e90:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   14e92:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
   14e94:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   14e98:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
   14e9a:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
   14e9c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   14ea0:	9205      	str	r2, [sp, #20]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   14ea2:	f00d ff5f 	bl	22d64 <z_impl_device_get_binding>
   14ea6:	4605      	mov	r5, r0
	flash_area_close(fa);
   14ea8:	9800      	ldr	r0, [sp, #0]
   14eaa:	f012 f82a 	bl	26f02 <flash_area_close>
	if (flash_dev == NULL) {
   14eae:	b16d      	cbz	r5, 14ecc <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   14eb0:	4628      	mov	r0, r5
   14eb2:	4908      	ldr	r1, [pc, #32]	; (14ed4 <flash_area_get_sectors+0x64>)
   14eb4:	aa01      	add	r2, sp, #4
   14eb6:	f013 fb08 	bl	284ca <flash_page_foreach>
	if (cb_data->status == 0) {
   14eba:	9807      	ldr	r0, [sp, #28]
   14ebc:	b908      	cbnz	r0, 14ec2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   14ebe:	9b05      	ldr	r3, [sp, #20]
   14ec0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   14ec2:	b008      	add	sp, #32
   14ec4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   14ec6:	f06f 0015 	mvn.w	r0, #21
   14eca:	e7fa      	b.n	14ec2 <flash_area_get_sectors+0x52>
		return -ENODEV;
   14ecc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   14ed0:	e7f7      	b.n	14ec2 <flash_area_get_sectors+0x52>
   14ed2:	bf00      	nop
   14ed4:	00027009 	.word	0x00027009

00014ed8 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   14ed8:	4b10      	ldr	r3, [pc, #64]	; (14f1c <settings_save_one+0x44>)
{
   14eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   14ede:	681c      	ldr	r4, [r3, #0]
{
   14ee0:	4605      	mov	r5, r0
   14ee2:	460e      	mov	r6, r1
   14ee4:	4617      	mov	r7, r2
	if (!cs) {
   14ee6:	b1ac      	cbz	r4, 14f14 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   14ee8:	f04f 32ff 	mov.w	r2, #4294967295
   14eec:	f04f 33ff 	mov.w	r3, #4294967295
   14ef0:	480b      	ldr	r0, [pc, #44]	; (14f20 <settings_save_one+0x48>)
   14ef2:	f00e f98d 	bl	23210 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   14ef6:	6863      	ldr	r3, [r4, #4]
   14ef8:	4632      	mov	r2, r6
   14efa:	f8d3 8008 	ldr.w	r8, [r3, #8]
   14efe:	4629      	mov	r1, r5
   14f00:	463b      	mov	r3, r7
   14f02:	4620      	mov	r0, r4
   14f04:	47c0      	blx	r8
   14f06:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14f08:	4805      	ldr	r0, [pc, #20]	; (14f20 <settings_save_one+0x48>)
   14f0a:	f00e f9ff 	bl	2330c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   14f0e:	4620      	mov	r0, r4
   14f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14f14:	f06f 0401 	mvn.w	r4, #1
   14f18:	e7f9      	b.n	14f0e <settings_save_one+0x36>
   14f1a:	bf00      	nop
   14f1c:	2000de5c 	.word	0x2000de5c
   14f20:	2000ca10 	.word	0x2000ca10

00014f24 <settings_src_register>:
	parent->next = child;
   14f24:	2300      	movs	r3, #0
   14f26:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   14f28:	4b04      	ldr	r3, [pc, #16]	; (14f3c <settings_src_register+0x18>)
   14f2a:	685a      	ldr	r2, [r3, #4]
   14f2c:	b912      	cbnz	r2, 14f34 <settings_src_register+0x10>
	list->head = node;
   14f2e:	e9c3 0000 	strd	r0, r0, [r3]
}
   14f32:	4770      	bx	lr
	parent->next = child;
   14f34:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14f36:	6058      	str	r0, [r3, #4]
}
   14f38:	4770      	bx	lr
   14f3a:	bf00      	nop
   14f3c:	2000de54 	.word	0x2000de54

00014f40 <settings_dst_register>:
	settings_save_dst = cs;
   14f40:	4b01      	ldr	r3, [pc, #4]	; (14f48 <settings_dst_register+0x8>)
   14f42:	6018      	str	r0, [r3, #0]
}
   14f44:	4770      	bx	lr
   14f46:	bf00      	nop
   14f48:	2000de5c 	.word	0x2000de5c

00014f4c <settings_load_subtree>:
	const struct settings_load_arg arg = {
   14f4c:	2300      	movs	r3, #0
{
   14f4e:	b530      	push	{r4, r5, lr}
   14f50:	b085      	sub	sp, #20
   14f52:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   14f54:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14f58:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   14f5a:	f04f 33ff 	mov.w	r3, #4294967295
   14f5e:	f04f 32ff 	mov.w	r2, #4294967295
   14f62:	480d      	ldr	r0, [pc, #52]	; (14f98 <settings_load_subtree+0x4c>)
   14f64:	f00e f954 	bl	23210 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14f68:	4b0c      	ldr	r3, [pc, #48]	; (14f9c <settings_load_subtree+0x50>)
   14f6a:	681c      	ldr	r4, [r3, #0]
   14f6c:	2c00      	cmp	r4, #0
   14f6e:	bf38      	it	cc
   14f70:	2400      	movcc	r4, #0
   14f72:	b13c      	cbz	r4, 14f84 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   14f74:	6863      	ldr	r3, [r4, #4]
   14f76:	4620      	mov	r0, r4
   14f78:	681b      	ldr	r3, [r3, #0]
   14f7a:	a901      	add	r1, sp, #4
   14f7c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f7e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14f80:	2c00      	cmp	r4, #0
   14f82:	d1f6      	bne.n	14f72 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   14f84:	4628      	mov	r0, r5
   14f86:	f000 f8ad 	bl	150e4 <settings_commit_subtree>
   14f8a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14f8c:	4802      	ldr	r0, [pc, #8]	; (14f98 <settings_load_subtree+0x4c>)
   14f8e:	f00e f9bd 	bl	2330c <z_impl_k_mutex_unlock>
}
   14f92:	4620      	mov	r0, r4
   14f94:	b005      	add	sp, #20
   14f96:	bd30      	pop	{r4, r5, pc}
   14f98:	2000ca10 	.word	0x2000ca10
   14f9c:	2000de54 	.word	0x2000de54

00014fa0 <settings_store_init>:
	list->head = NULL;
   14fa0:	2200      	movs	r2, #0
   14fa2:	4b02      	ldr	r3, [pc, #8]	; (14fac <settings_store_init+0xc>)
	list->tail = NULL;
   14fa4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   14fa8:	4770      	bx	lr
   14faa:	bf00      	nop
   14fac:	2000de54 	.word	0x2000de54

00014fb0 <settings_init>:
	list->head = NULL;
   14fb0:	2200      	movs	r2, #0
   14fb2:	4b02      	ldr	r3, [pc, #8]	; (14fbc <settings_init+0xc>)
	list->tail = NULL;
   14fb4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   14fb8:	f7ff bff2 	b.w	14fa0 <settings_store_init>
   14fbc:	2000de60 	.word	0x2000de60

00014fc0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   14fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14fc4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   14fc6:	460e      	mov	r6, r1
   14fc8:	b109      	cbz	r1, 14fce <settings_parse_and_lookup+0xe>
		*next = NULL;
   14fca:	2300      	movs	r3, #0
   14fcc:	600b      	str	r3, [r1, #0]
   14fce:	2500      	movs	r5, #0
   14fd0:	4c1d      	ldr	r4, [pc, #116]	; (15048 <settings_parse_and_lookup+0x88>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14fd2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 15050 <settings_parse_and_lookup+0x90>
   14fd6:	4544      	cmp	r4, r8
   14fd8:	d308      	bcc.n	14fec <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14fda:	4b1c      	ldr	r3, [pc, #112]	; (1504c <settings_parse_and_lookup+0x8c>)
   14fdc:	681c      	ldr	r4, [r3, #0]
   14fde:	b10c      	cbz	r4, 14fe4 <settings_parse_and_lookup+0x24>
   14fe0:	3c14      	subs	r4, #20
   14fe2:	b9c4      	cbnz	r4, 15016 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   14fe4:	4628      	mov	r0, r5
   14fe6:	b002      	add	sp, #8
   14fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14fec:	4638      	mov	r0, r7
   14fee:	6821      	ldr	r1, [r4, #0]
   14ff0:	aa01      	add	r2, sp, #4
   14ff2:	f012 f827 	bl	27044 <settings_name_steq>
   14ff6:	b160      	cbz	r0, 15012 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   14ff8:	b925      	cbnz	r5, 15004 <settings_parse_and_lookup+0x44>
			if (next) {
   14ffa:	b10e      	cbz	r6, 15000 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   14ffc:	9b01      	ldr	r3, [sp, #4]
   14ffe:	6033      	str	r3, [r6, #0]
   15000:	4625      	mov	r5, r4
   15002:	e006      	b.n	15012 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   15004:	2200      	movs	r2, #0
   15006:	6829      	ldr	r1, [r5, #0]
   15008:	6820      	ldr	r0, [r4, #0]
   1500a:	f012 f81b 	bl	27044 <settings_name_steq>
   1500e:	2800      	cmp	r0, #0
   15010:	d1f3      	bne.n	14ffa <settings_parse_and_lookup+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   15012:	3414      	adds	r4, #20
   15014:	e7df      	b.n	14fd6 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   15016:	4638      	mov	r0, r7
   15018:	6821      	ldr	r1, [r4, #0]
   1501a:	aa01      	add	r2, sp, #4
   1501c:	f012 f812 	bl	27044 <settings_name_steq>
   15020:	b160      	cbz	r0, 1503c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   15022:	b925      	cbnz	r5, 1502e <settings_parse_and_lookup+0x6e>
			if (next) {
   15024:	b10e      	cbz	r6, 1502a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   15026:	9b01      	ldr	r3, [sp, #4]
   15028:	6033      	str	r3, [r6, #0]
   1502a:	4625      	mov	r5, r4
   1502c:	e006      	b.n	1503c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1502e:	2200      	movs	r2, #0
   15030:	6829      	ldr	r1, [r5, #0]
   15032:	6820      	ldr	r0, [r4, #0]
   15034:	f012 f806 	bl	27044 <settings_name_steq>
   15038:	2800      	cmp	r0, #0
   1503a:	d1f3      	bne.n	15024 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1503c:	f114 0f14 	cmn.w	r4, #20
   15040:	d0d0      	beq.n	14fe4 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15042:	6964      	ldr	r4, [r4, #20]
   15044:	e7cb      	b.n	14fde <settings_parse_and_lookup+0x1e>
   15046:	bf00      	nop
   15048:	0002c31c 	.word	0x0002c31c
   1504c:	2000de60 	.word	0x2000de60
   15050:	0002c344 	.word	0x0002c344

00015054 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   15054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15058:	b086      	sub	sp, #24
   1505a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1505c:	4605      	mov	r5, r0
   1505e:	460c      	mov	r4, r1
   15060:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   15062:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   15064:	b1bf      	cbz	r7, 15096 <settings_call_set_handler+0x42>
   15066:	6839      	ldr	r1, [r7, #0]
   15068:	b181      	cbz	r1, 1508c <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   1506a:	aa05      	add	r2, sp, #20
   1506c:	9303      	str	r3, [sp, #12]
   1506e:	f011 ffe9 	bl	27044 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   15072:	9b03      	ldr	r3, [sp, #12]
   15074:	b950      	cbnz	r0, 1508c <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   15076:	2000      	movs	r0, #0
   15078:	e005      	b.n	15086 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1507a:	68ba      	ldr	r2, [r7, #8]
   1507c:	4621      	mov	r1, r4
   1507e:	9200      	str	r2, [sp, #0]
   15080:	9805      	ldr	r0, [sp, #20]
   15082:	4632      	mov	r2, r6
   15084:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   15086:	b006      	add	sp, #24
   15088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   1508c:	f8d7 8004 	ldr.w	r8, [r7, #4]
   15090:	f1b8 0f00 	cmp.w	r8, #0
   15094:	d1f1      	bne.n	1507a <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   15096:	4628      	mov	r0, r5
   15098:	a905      	add	r1, sp, #20
   1509a:	9303      	str	r3, [sp, #12]
   1509c:	f7ff ff90 	bl	14fc0 <settings_parse_and_lookup>
		if (!ch) {
   150a0:	2800      	cmp	r0, #0
   150a2:	d0e8      	beq.n	15076 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   150a4:	4632      	mov	r2, r6
   150a6:	6887      	ldr	r7, [r0, #8]
   150a8:	4621      	mov	r1, r4
   150aa:	9b03      	ldr	r3, [sp, #12]
   150ac:	9805      	ldr	r0, [sp, #20]
   150ae:	47b8      	blx	r7
		if (rc != 0) {
   150b0:	4606      	mov	r6, r0
   150b2:	2800      	cmp	r0, #0
   150b4:	d0df      	beq.n	15076 <settings_call_set_handler+0x22>
   150b6:	4b08      	ldr	r3, [pc, #32]	; (150d8 <settings_call_set_handler+0x84>)
   150b8:	4c08      	ldr	r4, [pc, #32]	; (150dc <settings_call_set_handler+0x88>)
   150ba:	4628      	mov	r0, r5
   150bc:	1ae4      	subs	r4, r4, r3
   150be:	f011 fa49 	bl	26554 <z_log_strdup>
   150c2:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set-value failure. key: %s error(%d)",
   150c4:	01a4      	lsls	r4, r4, #6
   150c6:	f044 0401 	orr.w	r4, r4, #1
   150ca:	4602      	mov	r2, r0
   150cc:	4633      	mov	r3, r6
   150ce:	4620      	mov	r0, r4
   150d0:	4903      	ldr	r1, [pc, #12]	; (150e0 <settings_call_set_handler+0x8c>)
   150d2:	f011 fa2c 	bl	2652e <log_string_sync>
   150d6:	e7ce      	b.n	15076 <settings_call_set_handler+0x22>
   150d8:	0002c344 	.word	0x0002c344
   150dc:	0002c40c 	.word	0x0002c40c
   150e0:	0002d553 	.word	0x0002d553

000150e4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   150e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150e6:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   150e8:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   150ea:	4c19      	ldr	r4, [pc, #100]	; (15150 <settings_commit_subtree+0x6c>)
   150ec:	4f19      	ldr	r7, [pc, #100]	; (15154 <settings_commit_subtree+0x70>)
   150ee:	42bc      	cmp	r4, r7
   150f0:	d306      	bcc.n	15100 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   150f2:	4b19      	ldr	r3, [pc, #100]	; (15158 <settings_commit_subtree+0x74>)
   150f4:	681c      	ldr	r4, [r3, #0]
   150f6:	b10c      	cbz	r4, 150fc <settings_commit_subtree+0x18>
   150f8:	3c14      	subs	r4, #20
   150fa:	b99c      	cbnz	r4, 15124 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   150fc:	4628      	mov	r0, r5
   150fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   15100:	b91e      	cbnz	r6, 1510a <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   15102:	68e3      	ldr	r3, [r4, #12]
   15104:	b94b      	cbnz	r3, 1511a <settings_commit_subtree+0x36>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   15106:	3414      	adds	r4, #20
   15108:	e7f1      	b.n	150ee <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1510a:	2200      	movs	r2, #0
   1510c:	4631      	mov	r1, r6
   1510e:	6820      	ldr	r0, [r4, #0]
   15110:	f011 ff98 	bl	27044 <settings_name_steq>
   15114:	2800      	cmp	r0, #0
   15116:	d1f4      	bne.n	15102 <settings_commit_subtree+0x1e>
   15118:	e7f5      	b.n	15106 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   1511a:	4798      	blx	r3
				rc = rc2;
   1511c:	2d00      	cmp	r5, #0
   1511e:	bf08      	it	eq
   15120:	4605      	moveq	r5, r0
   15122:	e7f0      	b.n	15106 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   15124:	b936      	cbnz	r6, 15134 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
   15126:	68e3      	ldr	r3, [r4, #12]
   15128:	b963      	cbnz	r3, 15144 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1512a:	f114 0f14 	cmn.w	r4, #20
   1512e:	d0e5      	beq.n	150fc <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15130:	6964      	ldr	r4, [r4, #20]
   15132:	e7e0      	b.n	150f6 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   15134:	2200      	movs	r2, #0
   15136:	4631      	mov	r1, r6
   15138:	6820      	ldr	r0, [r4, #0]
   1513a:	f011 ff83 	bl	27044 <settings_name_steq>
   1513e:	2800      	cmp	r0, #0
   15140:	d1f1      	bne.n	15126 <settings_commit_subtree+0x42>
   15142:	e7f2      	b.n	1512a <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   15144:	4798      	blx	r3
				rc = rc2;
   15146:	2d00      	cmp	r5, #0
   15148:	bf08      	it	eq
   1514a:	4605      	moveq	r5, r0
   1514c:	e7ed      	b.n	1512a <settings_commit_subtree+0x46>
   1514e:	bf00      	nop
   15150:	0002c31c 	.word	0x0002c31c
   15154:	0002c344 	.word	0x0002c344
   15158:	2000de60 	.word	0x2000de60

0001515c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   1515c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   1515e:	4c06      	ldr	r4, [pc, #24]	; (15178 <settings_subsys_init+0x1c>)
   15160:	7823      	ldrb	r3, [r4, #0]
   15162:	b93b      	cbnz	r3, 15174 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   15164:	f7ff ff24 	bl	14fb0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   15168:	f000 faa8 	bl	156bc <settings_backend_init>

	if (!err) {
   1516c:	b908      	cbnz	r0, 15172 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   1516e:	2301      	movs	r3, #1
   15170:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   15172:	bd10      	pop	{r4, pc}
		return 0;
   15174:	2000      	movs	r0, #0
   15176:	e7fc      	b.n	15172 <settings_subsys_init+0x16>
   15178:	2000efcf 	.word	0x2000efcf

0001517c <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   1517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15180:	b08b      	sub	sp, #44	; 0x2c
   15182:	9301      	str	r3, [sp, #4]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   15184:	4b2a      	ldr	r3, [pc, #168]	; (15230 <settings_line_raw_read_until+0xb4>)
{
   15186:	4606      	mov	r6, r0
   15188:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   1518a:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   1518c:	f893 a00c 	ldrb.w	sl, [r3, #12]
	if (len_req == 0) {
   15190:	2a00      	cmp	r2, #0
   15192:	d046      	beq.n	15222 <settings_line_raw_read_until+0xa6>
   15194:	4617      	mov	r7, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   15196:	9302      	str	r3, [sp, #8]
		off = seek / rbs * rbs;
   15198:	fb96 fbfa 	sdiv	fp, r6, sl
		read_size = sizeof(temp_buf);
   1519c:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
   1519e:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
   151a2:	9305      	str	r3, [sp, #20]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   151a4:	9b02      	ldr	r3, [sp, #8]
   151a6:	4659      	mov	r1, fp
   151a8:	681c      	ldr	r4, [r3, #0]
   151aa:	9815      	ldr	r0, [sp, #84]	; 0x54
   151ac:	ab05      	add	r3, sp, #20
   151ae:	aa06      	add	r2, sp, #24
   151b0:	47a0      	blx	r4
		if (rc) {
   151b2:	4604      	mov	r4, r0
   151b4:	2800      	cmp	r0, #0
   151b6:	d137      	bne.n	15228 <settings_line_raw_read_until+0xac>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   151b8:	9a05      	ldr	r2, [sp, #20]
   151ba:	eba6 0b0b 	sub.w	fp, r6, fp
   151be:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   151c2:	42ba      	cmp	r2, r7
   151c4:	bf28      	it	cs
   151c6:	463a      	movcs	r2, r7
   151c8:	ab06      	add	r3, sp, #24
   151ca:	449b      	add	fp, r3

		if (until_char != NULL) {
   151cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   151ce:	4691      	mov	r9, r2
		if (until_char != NULL) {
   151d0:	b31b      	cbz	r3, 1521a <settings_line_raw_read_until+0x9e>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   151d2:	4658      	mov	r0, fp
   151d4:	7819      	ldrb	r1, [r3, #0]
   151d6:	f015 fe1b 	bl	2ae10 <memchr>
			if (pend != NULL) {
   151da:	b300      	cbz	r0, 1521e <settings_line_raw_read_until+0xa2>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   151dc:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   151de:	eba0 090b 	sub.w	r9, r0, fp
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   151e2:	4659      	mov	r1, fp
   151e4:	464a      	mov	r2, r9
   151e6:	4640      	mov	r0, r8
   151e8:	9303      	str	r3, [sp, #12]
   151ea:	f015 fe2d 	bl	2ae48 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   151ee:	9905      	ldr	r1, [sp, #20]
   151f0:	9b03      	ldr	r3, [sp, #12]
   151f2:	290f      	cmp	r1, #15
		rem_size -= len;
   151f4:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   151f8:	d904      	bls.n	15204 <settings_line_raw_read_until+0x88>
   151fa:	b91b      	cbnz	r3, 15204 <settings_line_raw_read_until+0x88>
			break;
		}

		out += len;
   151fc:	44c8      	add	r8, r9
		seek += len;
   151fe:	444e      	add	r6, r9
	while (rem_size) {
   15200:	2f00      	cmp	r7, #0
   15202:	d1c9      	bne.n	15198 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   15204:	9a01      	ldr	r2, [sp, #4]
   15206:	1bed      	subs	r5, r5, r7
   15208:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   1520a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1520c:	b10a      	cbz	r2, 15212 <settings_line_raw_read_until+0x96>
		return (rc) ? 0 : 1;
   1520e:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   15212:	4620      	mov	r0, r4
   15214:	b00b      	add	sp, #44	; 0x2c
   15216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   1521a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1521c:	e7e1      	b.n	151e2 <settings_line_raw_read_until+0x66>
   1521e:	4623      	mov	r3, r4
   15220:	e7df      	b.n	151e2 <settings_line_raw_read_until+0x66>
		return -EINVAL;
   15222:	f06f 0415 	mvn.w	r4, #21
   15226:	e7f4      	b.n	15212 <settings_line_raw_read_until+0x96>
			return -EIO;
   15228:	f06f 0404 	mvn.w	r4, #4
   1522c:	e7f1      	b.n	15212 <settings_line_raw_read_until+0x96>
   1522e:	bf00      	nop
   15230:	2000de68 	.word	0x2000de68

00015234 <settings_line_write>:
{
   15234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   15238:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 152f8 <settings_line_write+0xc4>
{
   1523c:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   1523e:	f89a 800c 	ldrb.w	r8, [sl, #12]
{
   15242:	4681      	mov	r9, r0
   15244:	468b      	mov	fp, r1
   15246:	4617      	mov	r7, r2
   15248:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   1524a:	f7fb feb7 	bl	10fbc <strlen>
	w_size = rem - rem % wbs;
   1524e:	fbb0 f4f8 	udiv	r4, r0, r8
   15252:	fb08 0414 	mls	r4, r8, r4, r0
   15256:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   15258:	462b      	mov	r3, r5
   1525a:	f8da 6004 	ldr.w	r6, [sl, #4]
   1525e:	464a      	mov	r2, r9
   15260:	9901      	ldr	r1, [sp, #4]
   15262:	9810      	ldr	r0, [sp, #64]	; 0x40
   15264:	47b0      	blx	r6
	w_loc += w_size;
   15266:	9b01      	ldr	r3, [sp, #4]
   15268:	442b      	add	r3, r5
   1526a:	461e      	mov	r6, r3
	if (rem) {
   1526c:	b134      	cbz	r4, 1527c <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   1526e:	2310      	movs	r3, #16
   15270:	4622      	mov	r2, r4
   15272:	eb09 0105 	add.w	r1, r9, r5
   15276:	a802      	add	r0, sp, #8
   15278:	f015 fdf3 	bl	2ae62 <__memcpy_chk>
	w_buf[rem] = '=';
   1527c:	223d      	movs	r2, #61	; 0x3d
   1527e:	ab06      	add	r3, sp, #24
   15280:	4423      	add	r3, r4
   15282:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   15286:	f104 0901 	add.w	r9, r4, #1
		while (w_size < sizeof(w_buf)) {
   1528a:	f1b9 0f0f 	cmp.w	r9, #15
   1528e:	d90b      	bls.n	152a8 <settings_line_write+0x74>
   15290:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   15292:	464b      	mov	r3, r9
   15294:	4631      	mov	r1, r6
   15296:	f8da 5004 	ldr.w	r5, [sl, #4]
   1529a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1529c:	aa02      	add	r2, sp, #8
   1529e:	47a8      	blx	r5
		if (rc) {
   152a0:	bb20      	cbnz	r0, 152ec <settings_line_write+0xb8>
		if (done) {
   152a2:	bb2c      	cbnz	r4, 152f0 <settings_line_write+0xbc>
		w_loc += w_size;
   152a4:	444e      	add	r6, r9
		w_size = 0;
   152a6:	46a1      	mov	r9, r4
			if (rem) {
   152a8:	b17f      	cbz	r7, 152ca <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   152aa:	f1c9 0410 	rsb	r4, r9, #16
   152ae:	42bc      	cmp	r4, r7
   152b0:	bf28      	it	cs
   152b2:	463c      	movcs	r4, r7
   152b4:	ab02      	add	r3, sp, #8
   152b6:	4659      	mov	r1, fp
   152b8:	eb03 0009 	add.w	r0, r3, r9
   152bc:	4622      	mov	r2, r4
   152be:	f015 fdc3 	bl	2ae48 <memcpy>
				value += add;
   152c2:	44a3      	add	fp, r4
				rem -= add;
   152c4:	1b3f      	subs	r7, r7, r4
				w_size += add;
   152c6:	44a1      	add	r9, r4
   152c8:	e7df      	b.n	1528a <settings_line_write+0x56>
				add = (w_size) % wbs;
   152ca:	fbb9 f4f8 	udiv	r4, r9, r8
   152ce:	fb08 9414 	mls	r4, r8, r4, r9
				if (add) {
   152d2:	b14c      	cbz	r4, 152e8 <settings_line_write+0xb4>
					add = wbs - add;
   152d4:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   152d8:	ab02      	add	r3, sp, #8
   152da:	eb03 0009 	add.w	r0, r3, r9
   152de:	4622      	mov	r2, r4
   152e0:	4639      	mov	r1, r7
   152e2:	f015 fdd1 	bl	2ae88 <memset>
					w_size += add;
   152e6:	44a1      	add	r9, r4
				done = true;
   152e8:	2401      	movs	r4, #1
   152ea:	e7d2      	b.n	15292 <settings_line_write+0x5e>
			return -EIO;
   152ec:	f06f 0004 	mvn.w	r0, #4
}
   152f0:	b007      	add	sp, #28
   152f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f6:	bf00      	nop
   152f8:	2000de68 	.word	0x2000de68

000152fc <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   152fc:	4b03      	ldr	r3, [pc, #12]	; (1530c <settings_line_val_get_len+0x10>)
{
   152fe:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   15300:	689b      	ldr	r3, [r3, #8]
{
   15302:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   15304:	4608      	mov	r0, r1
   15306:	4798      	blx	r3

	return len - val_off;
}
   15308:	1b00      	subs	r0, r0, r4
   1530a:	bd10      	pop	{r4, pc}
   1530c:	2000de68 	.word	0x2000de68

00015310 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   15310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15314:	4680      	mov	r8, r0
   15316:	468a      	mov	sl, r1
   15318:	4691      	mov	r9, r2
   1531a:	461d      	mov	r5, r3
	int rc = -EINVAL;
   1531c:	f06f 0015 	mvn.w	r0, #21
{
   15320:	b086      	sub	sp, #24
   15322:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   15324:	4f13      	ldr	r7, [pc, #76]	; (15374 <settings_line_entry_copy+0x64>)
	while (len) {
   15326:	b916      	cbnz	r6, 1532e <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   15328:	b006      	add	sp, #24
   1532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   1532e:	2e10      	cmp	r6, #16
   15330:	4633      	mov	r3, r6
   15332:	bf28      	it	cs
   15334:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   15336:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   15338:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   1533a:	4648      	mov	r0, r9
   1533c:	683c      	ldr	r4, [r7, #0]
   1533e:	ab01      	add	r3, sp, #4
   15340:	aa02      	add	r2, sp, #8
   15342:	47a0      	blx	r4
		if (rc) {
   15344:	2800      	cmp	r0, #0
   15346:	d1ef      	bne.n	15328 <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   15348:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   1534a:	7b39      	ldrb	r1, [r7, #12]
   1534c:	fbb3 f2f1 	udiv	r2, r3, r1
   15350:	fb01 3212 	mls	r2, r1, r2, r3
   15354:	b10a      	cbz	r2, 1535a <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   15356:	440b      	add	r3, r1
   15358:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   1535a:	4651      	mov	r1, sl
   1535c:	4640      	mov	r0, r8
   1535e:	687c      	ldr	r4, [r7, #4]
   15360:	aa02      	add	r2, sp, #8
   15362:	47a0      	blx	r4
		if (rc) {
   15364:	2800      	cmp	r0, #0
   15366:	d1df      	bne.n	15328 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   15368:	9b01      	ldr	r3, [sp, #4]
   1536a:	441d      	add	r5, r3
		dst_off += chunk_size;
   1536c:	449a      	add	sl, r3
		len -= chunk_size;
   1536e:	1af6      	subs	r6, r6, r3
   15370:	e7d9      	b.n	15326 <settings_line_entry_copy+0x16>
   15372:	bf00      	nop
   15374:	2000de68 	.word	0x2000de68

00015378 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   15378:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   1537a:	4c03      	ldr	r4, [pc, #12]	; (15388 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   1537c:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   15380:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   15382:	7323      	strb	r3, [r4, #12]
}
   15384:	bd10      	pop	{r4, pc}
   15386:	bf00      	nop
   15388:	2000de68 	.word	0x2000de68

0001538c <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   1538c:	b530      	push	{r4, r5, lr}
   1538e:	4604      	mov	r4, r0
   15390:	b085      	sub	sp, #20
   15392:	4610      	mov	r0, r2
   15394:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   15396:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   1539a:	f7ff ffaf 	bl	152fc <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   1539e:	4a04      	ldr	r2, [pc, #16]	; (153b0 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   153a0:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   153a2:	9500      	str	r5, [sp, #0]
   153a4:	4620      	mov	r0, r4
   153a6:	ab02      	add	r3, sp, #8
   153a8:	f7ff fe54 	bl	15054 <settings_call_set_handler>
					 &value_ctx, arg);
}
   153ac:	b005      	add	sp, #20
   153ae:	bd30      	pop	{r4, r5, pc}
   153b0:	000270a5 	.word	0x000270a5

000153b4 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   153b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b8:	4607      	mov	r7, r0
   153ba:	b0b3      	sub	sp, #204	; 0xcc
   153bc:	4688      	mov	r8, r1
   153be:	4691      	mov	r9, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   153c0:	2100      	movs	r1, #0
   153c2:	2210      	movs	r2, #16
   153c4:	a802      	add	r0, sp, #8
{
   153c6:	469a      	mov	sl, r3
	struct fcb_entry_ctx entry_ctx = {
   153c8:	f015 fd5e 	bl	2ae88 <memset>
   153cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   153ce:	4c2c      	ldr	r4, [pc, #176]	; (15480 <settings_fcb_load_priv+0xcc>)
   153d0:	9306      	str	r3, [sp, #24]
   153d2:	4b2c      	ldr	r3, [pc, #176]	; (15484 <settings_fcb_load_priv+0xd0>)
   153d4:	1ae4      	subs	r4, r4, r3
   153d6:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("failed to load line");
   153d8:	01a4      	lsls	r4, r4, #6
   153da:	f044 0401 	orr.w	r4, r4, #1
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   153de:	f107 0b08 	add.w	fp, r7, #8
   153e2:	4658      	mov	r0, fp
   153e4:	a902      	add	r1, sp, #8
   153e6:	f011 fbfc 	bl	26be2 <fcb_getnext>
   153ea:	b118      	cbz	r0, 153f4 <settings_fcb_load_priv+0x40>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   153ec:	2000      	movs	r0, #0
   153ee:	b033      	add	sp, #204	; 0xcc
   153f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   153f4:	466a      	mov	r2, sp
   153f6:	214a      	movs	r1, #74	; 0x4a
   153f8:	ab02      	add	r3, sp, #8
   153fa:	a80c      	add	r0, sp, #48	; 0x30
   153fc:	f011 fe61 	bl	270c2 <settings_line_name_read>
		if (rc) {
   15400:	b128      	cbz	r0, 1540e <settings_fcb_load_priv+0x5a>
			LOG_ERR("Failed to load line name: %d", rc);
   15402:	4602      	mov	r2, r0
   15404:	4920      	ldr	r1, [pc, #128]	; (15488 <settings_fcb_load_priv+0xd4>)
   15406:	4620      	mov	r0, r4
   15408:	f011 f891 	bl	2652e <log_string_sync>
			continue;
   1540c:	e7e7      	b.n	153de <settings_fcb_load_priv+0x2a>
		name[name_len] = '\0';
   1540e:	9b00      	ldr	r3, [sp, #0]
   15410:	aa32      	add	r2, sp, #200	; 0xc8
   15412:	441a      	add	r2, r3
   15414:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   15418:	f1ba 0f00 	cmp.w	sl, #0
   1541c:	d010      	beq.n	15440 <settings_fcb_load_priv+0x8c>
	if (off >= entry_ctx->loc.fe_data_len) {
   1541e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   15422:	3301      	adds	r3, #1
   15424:	429a      	cmp	r2, r3
   15426:	ddda      	ble.n	153de <settings_fcb_load_priv+0x2a>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   15428:	ad07      	add	r5, sp, #28
   1542a:	ae02      	add	r6, sp, #8
   1542c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1542e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15430:	6833      	ldr	r3, [r6, #0]
   15432:	602b      	str	r3, [r5, #0]
			LOG_ERR("failed to load line");
   15434:	4d15      	ldr	r5, [pc, #84]	; (1548c <settings_fcb_load_priv+0xd8>)
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   15436:	4658      	mov	r0, fp
   15438:	a907      	add	r1, sp, #28
   1543a:	f011 fbd2 	bl	26be2 <fcb_getnext>
   1543e:	b130      	cbz	r0, 1544e <settings_fcb_load_priv+0x9a>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   15440:	9a00      	ldr	r2, [sp, #0]
   15442:	464b      	mov	r3, r9
   15444:	3201      	adds	r2, #1
   15446:	a902      	add	r1, sp, #8
   15448:	a80c      	add	r0, sp, #48	; 0x30
   1544a:	47c0      	blx	r8
   1544c:	e7c7      	b.n	153de <settings_fcb_load_priv+0x2a>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   1544e:	214a      	movs	r1, #74	; 0x4a
   15450:	ab07      	add	r3, sp, #28
   15452:	aa01      	add	r2, sp, #4
   15454:	a81f      	add	r0, sp, #124	; 0x7c
   15456:	f011 fe34 	bl	270c2 <settings_line_name_read>
   1545a:	b120      	cbz	r0, 15466 <settings_fcb_load_priv+0xb2>
			LOG_ERR("failed to load line");
   1545c:	4629      	mov	r1, r5
   1545e:	4620      	mov	r0, r4
   15460:	f011 f865 	bl	2652e <log_string_sync>
			continue;
   15464:	e7e7      	b.n	15436 <settings_fcb_load_priv+0x82>
		name2[name2_len] = '\0';
   15466:	9b01      	ldr	r3, [sp, #4]
   15468:	aa32      	add	r2, sp, #200	; 0xc8
   1546a:	4413      	add	r3, r2
   1546c:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   15470:	a91f      	add	r1, sp, #124	; 0x7c
   15472:	a80c      	add	r0, sp, #48	; 0x30
   15474:	f7fb fd98 	bl	10fa8 <strcmp>
   15478:	2800      	cmp	r0, #0
   1547a:	d1dc      	bne.n	15436 <settings_fcb_load_priv+0x82>
   1547c:	e7af      	b.n	153de <settings_fcb_load_priv+0x2a>
   1547e:	bf00      	nop
   15480:	0002c40c 	.word	0x0002c40c
   15484:	0002c344 	.word	0x0002c344
   15488:	0002d581 	.word	0x0002d581
   1548c:	0002d59e 	.word	0x0002d59e

00015490 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   15490:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   15492:	2301      	movs	r3, #1
   15494:	4901      	ldr	r1, [pc, #4]	; (1549c <settings_fcb_load+0xc>)
   15496:	f7ff bf8d 	b.w	153b4 <settings_fcb_load_priv>
   1549a:	bf00      	nop
   1549c:	0001538d 	.word	0x0001538d

000154a0 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   154a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a4:	4605      	mov	r5, r0
   154a6:	4688      	mov	r8, r1
   154a8:	4692      	mov	sl, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   154aa:	4699      	mov	r9, r3
{
   154ac:	b0c1      	sub	sp, #260	; 0x104
	if (val_len > 0 && value == NULL) {
   154ae:	b103      	cbz	r3, 154b2 <settings_fcb_save+0x12>
   154b0:	b18a      	cbz	r2, 154d6 <settings_fcb_save+0x36>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   154b2:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   154b4:	4628      	mov	r0, r5
   154b6:	4623      	mov	r3, r4
   154b8:	495f      	ldr	r1, [pc, #380]	; (15638 <settings_fcb_save+0x198>)
   154ba:	aa07      	add	r2, sp, #28
	cdca.val = (char *)value;
   154bc:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	cdca.val_len = val_len;
   154c0:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   154c4:	f7ff ff76 	bl	153b4 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   154c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   154ca:	2b01      	cmp	r3, #1
   154cc:	f000 80b0 	beq.w	15630 <settings_fcb_save+0x190>
	if (!name) {
   154d0:	f1b8 0f00 	cmp.w	r8, #0
   154d4:	d102      	bne.n	154dc <settings_fcb_save+0x3c>
		return -EINVAL;
   154d6:	f06f 0415 	mvn.w	r4, #21
   154da:	e0a9      	b.n	15630 <settings_fcb_save+0x190>
	len = settings_line_len_calc(name, val_len);
   154dc:	4649      	mov	r1, r9
   154de:	4640      	mov	r0, r8
   154e0:	f011 fdd0 	bl	27084 <settings_line_len_calc>
   154e4:	4e55      	ldr	r6, [pc, #340]	; (1563c <settings_fcb_save+0x19c>)
   154e6:	4b56      	ldr	r3, [pc, #344]	; (15640 <settings_fcb_save+0x1a0>)
   154e8:	9003      	str	r0, [sp, #12]
   154ea:	1af6      	subs	r6, r6, r3
   154ec:	08f6      	lsrs	r6, r6, #3
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   154ee:	01b6      	lsls	r6, r6, #6
   154f0:	f046 0601 	orr.w	r6, r6, #1
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   154f4:	7b6b      	ldrb	r3, [r5, #13]
   154f6:	429c      	cmp	r4, r3
   154f8:	daed      	bge.n	154d6 <settings_fcb_save+0x36>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   154fa:	f105 0708 	add.w	r7, r5, #8
   154fe:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   15502:	465a      	mov	r2, fp
   15504:	4638      	mov	r0, r7
   15506:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1550a:	f011 f868 	bl	265de <fcb_append>
		if (rc != -ENOSPC) {
   1550e:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   15512:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   15514:	d176      	bne.n	15604 <settings_fcb_save+0x164>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   15516:	7b6b      	ldrb	r3, [r5, #13]
   15518:	3b01      	subs	r3, #1
   1551a:	42a3      	cmp	r3, r4
   1551c:	dd1b      	ble.n	15556 <settings_fcb_save+0xb6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   1551e:	4638      	mov	r0, r7
   15520:	f011 f841 	bl	265a6 <fcb_append_to_scratch>
	if (rc) {
   15524:	4683      	mov	fp, r0
   15526:	b9b0      	cbnz	r0, 15556 <settings_fcb_save+0xb6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   15528:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1552a:	f011 fd64 	bl	26ff6 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   1552e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   15530:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   15534:	f8df b110 	ldr.w	fp, [pc, #272]	; 15648 <settings_fcb_save+0x1a8>
	loc1.fap = cf->cf_fcb.fap;
   15538:	9314      	str	r3, [sp, #80]	; 0x50
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   1553a:	4638      	mov	r0, r7
   1553c:	a910      	add	r1, sp, #64	; 0x40
   1553e:	f011 fb50 	bl	26be2 <fcb_getnext>
   15542:	b150      	cbz	r0, 1555a <settings_fcb_save+0xba>
	rc = fcb_rotate(&cf->cf_fcb);
   15544:	4638      	mov	r0, r7
   15546:	f011 fb67 	bl	26c18 <fcb_rotate>
	if (rc != 0) {
   1554a:	4602      	mov	r2, r0
   1554c:	b118      	cbz	r0, 15556 <settings_fcb_save+0xb6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   1554e:	4630      	mov	r0, r6
   15550:	493c      	ldr	r1, [pc, #240]	; (15644 <settings_fcb_save+0x1a4>)
   15552:	f010 ffec 	bl	2652e <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   15556:	3401      	adds	r4, #1
   15558:	e7cc      	b.n	154f4 <settings_fcb_save+0x54>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   1555a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1555c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1555e:	429a      	cmp	r2, r3
   15560:	d1f0      	bne.n	15544 <settings_fcb_save+0xa4>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   15562:	2149      	movs	r1, #73	; 0x49
   15564:	ab10      	add	r3, sp, #64	; 0x40
   15566:	aa05      	add	r2, sp, #20
   15568:	a81a      	add	r0, sp, #104	; 0x68
   1556a:	f011 fdaa 	bl	270c2 <settings_line_name_read>
		if (rc) {
   1556e:	2800      	cmp	r0, #0
   15570:	d1e3      	bne.n	1553a <settings_fcb_save+0x9a>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   15572:	9b05      	ldr	r3, [sp, #20]
   15574:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   15578:	3301      	adds	r3, #1
   1557a:	4293      	cmp	r3, r2
   1557c:	d0dd      	beq.n	1553a <settings_fcb_save+0x9a>
		loc2 = loc1;
   1557e:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
   15582:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   15586:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1558a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1558e:	f8de 3000 	ldr.w	r3, [lr]
   15592:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   15596:	4638      	mov	r0, r7
   15598:	a915      	add	r1, sp, #84	; 0x54
   1559a:	f011 fb22 	bl	26be2 <fcb_getnext>
   1559e:	b1f0      	cbz	r0, 155de <settings_fcb_save+0x13e>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   155a0:	4638      	mov	r0, r7
   155a2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
   155a6:	aa15      	add	r2, sp, #84	; 0x54
   155a8:	f011 f819 	bl	265de <fcb_append>
		if (rc) {
   155ac:	2800      	cmp	r0, #0
   155ae:	d1c4      	bne.n	1553a <settings_fcb_save+0x9a>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   155b0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   155b4:	4601      	mov	r1, r0
   155b6:	9300      	str	r3, [sp, #0]
   155b8:	aa10      	add	r2, sp, #64	; 0x40
   155ba:	4603      	mov	r3, r0
   155bc:	a815      	add	r0, sp, #84	; 0x54
   155be:	f7ff fea7 	bl	15310 <settings_line_entry_copy>
		if (rc) {
   155c2:	2800      	cmp	r0, #0
   155c4:	d1b9      	bne.n	1553a <settings_fcb_save+0x9a>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   155c6:	4638      	mov	r0, r7
   155c8:	a915      	add	r1, sp, #84	; 0x54
   155ca:	f011 f88e 	bl	266ea <fcb_append_finish>
		if (rc != 0) {
   155ce:	4602      	mov	r2, r0
   155d0:	2800      	cmp	r0, #0
   155d2:	d0b2      	beq.n	1553a <settings_fcb_save+0x9a>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   155d4:	4659      	mov	r1, fp
   155d6:	4630      	mov	r0, r6
   155d8:	f010 ffa9 	bl	2652e <log_string_sync>
   155dc:	e7ad      	b.n	1553a <settings_fcb_save+0x9a>
			rc = settings_line_name_read(name2, sizeof(name2),
   155de:	2149      	movs	r1, #73	; 0x49
   155e0:	ab15      	add	r3, sp, #84	; 0x54
   155e2:	aa06      	add	r2, sp, #24
   155e4:	a82d      	add	r0, sp, #180	; 0xb4
   155e6:	f011 fd6c 	bl	270c2 <settings_line_name_read>
			if (rc) {
   155ea:	2800      	cmp	r0, #0
   155ec:	d1d3      	bne.n	15596 <settings_fcb_save+0xf6>
			if ((val1_off == val2_off) &&
   155ee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   155f2:	429a      	cmp	r2, r3
   155f4:	d1cf      	bne.n	15596 <settings_fcb_save+0xf6>
			    !memcmp(name1, name2, val1_off)) {
   155f6:	a92d      	add	r1, sp, #180	; 0xb4
   155f8:	a81a      	add	r0, sp, #104	; 0x68
   155fa:	f015 fc17 	bl	2ae2c <memcmp>
			if ((val1_off == val2_off) &&
   155fe:	2800      	cmp	r0, #0
   15600:	d1c9      	bne.n	15596 <settings_fcb_save+0xf6>
   15602:	e79a      	b.n	1553a <settings_fcb_save+0x9a>
	if (rc) {
   15604:	2800      	cmp	r0, #0
   15606:	f47f af66 	bne.w	154d6 <settings_fcb_save+0x36>
	loc.fap = cf->cf_fcb.fap;
   1560a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   1560c:	4651      	mov	r1, sl
	loc.fap = cf->cf_fcb.fap;
   1560e:	920f      	str	r2, [sp, #60]	; 0x3c
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   15610:	4640      	mov	r0, r8
   15612:	464a      	mov	r2, r9
   15614:	f8cd b000 	str.w	fp, [sp]
   15618:	f7ff fe0c 	bl	15234 <settings_line_write>
	if (rc != -EIO) {
   1561c:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   1561e:	4604      	mov	r4, r0
	if (rc != -EIO) {
   15620:	d006      	beq.n	15630 <settings_fcb_save+0x190>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   15622:	4659      	mov	r1, fp
   15624:	4638      	mov	r0, r7
   15626:	f011 f860 	bl	266ea <fcb_append_finish>
			rc = i;
   1562a:	2c00      	cmp	r4, #0
   1562c:	bf08      	it	eq
   1562e:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   15630:	4620      	mov	r0, r4
   15632:	b041      	add	sp, #260	; 0x104
   15634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15638:	000270e3 	.word	0x000270e3
   1563c:	0002c40c 	.word	0x0002c40c
   15640:	0002c344 	.word	0x0002c344
   15644:	0002d5d3 	.word	0x0002d5d3
   15648:	0002d5b2 	.word	0x0002d5b2

0001564c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   1564c:	2301      	movs	r3, #1
{
   1564e:	b570      	push	{r4, r5, r6, lr}
   15650:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   15652:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   15654:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   15656:	f100 0608 	add.w	r6, r0, #8
   1565a:	4631      	mov	r1, r6
   1565c:	2002      	movs	r0, #2
   1565e:	f011 f94b 	bl	268f8 <fcb_init>
		if (rc) {
   15662:	4605      	mov	r5, r0
   15664:	b9b0      	cbnz	r0, 15694 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   15666:	4630      	mov	r0, r6
   15668:	f011 f8ac 	bl	267c4 <fcb_free_sector_cnt>
   1566c:	2800      	cmp	r0, #0
   1566e:	dc0a      	bgt.n	15686 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   15670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   15672:	6c20      	ldr	r0, [r4, #64]	; 0x40
   15674:	e9d3 1200 	ldrd	r1, r2, [r3]
   15678:	f011 fc8e 	bl	26f98 <flash_area_erase>
			if (rc) {
   1567c:	2800      	cmp	r0, #0
   1567e:	d0ec      	beq.n	1565a <settings_fcb_src+0xe>
				return -EIO;
   15680:	f06f 0504 	mvn.w	r5, #4
   15684:	e004      	b.n	15690 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   15686:	4b05      	ldr	r3, [pc, #20]	; (1569c <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   15688:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   1568a:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   1568c:	f7ff fc4a 	bl	14f24 <settings_src_register>
}
   15690:	4628      	mov	r0, r5
   15692:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   15694:	f06f 0515 	mvn.w	r5, #21
   15698:	e7fa      	b.n	15690 <settings_fcb_src+0x44>
   1569a:	bf00      	nop
   1569c:	0002c614 	.word	0x0002c614

000156a0 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   156a0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   156a4:	4a02      	ldr	r2, [pc, #8]	; (156b0 <settings_mount_fcb_backend+0x10>)
   156a6:	4903      	ldr	r1, [pc, #12]	; (156b4 <settings_mount_fcb_backend+0x14>)
   156a8:	4803      	ldr	r0, [pc, #12]	; (156b8 <settings_mount_fcb_backend+0x18>)
   156aa:	f7ff be65 	b.w	15378 <settings_line_io_init>
   156ae:	bf00      	nop
   156b0:	00027161 	.word	0x00027161
   156b4:	00027165 	.word	0x00027165
   156b8:	00027179 	.word	0x00027179

000156bc <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   156bc:	2309      	movs	r3, #9
{
   156be:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   156c0:	2002      	movs	r0, #2
   156c2:	4669      	mov	r1, sp
   156c4:	4a21      	ldr	r2, [pc, #132]	; (1574c <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   156c6:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   156c8:	f7ff fbd2 	bl	14e70 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   156cc:	f110 0f13 	cmn.w	r0, #19
   156d0:	d03a      	beq.n	15748 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   156d2:	b138      	cbz	r0, 156e4 <settings_backend_init+0x28>
   156d4:	300c      	adds	r0, #12
   156d6:	d005      	beq.n	156e4 <settings_backend_init+0x28>
		k_panic();
   156d8:	4040      	eors	r0, r0
   156da:	f380 8811 	msr	BASEPRI, r0
   156de:	f04f 0004 	mov.w	r0, #4
   156e2:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   156e4:	4d1a      	ldr	r5, [pc, #104]	; (15750 <settings_backend_init+0x94>)
   156e6:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   156e8:	4628      	mov	r0, r5
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   156ea:	736b      	strb	r3, [r5, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   156ec:	f7ff ffae 	bl	1564c <settings_fcb_src>

	if (rc != 0) {
   156f0:	b308      	cbz	r0, 15736 <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   156f2:	a901      	add	r1, sp, #4
   156f4:	2002      	movs	r0, #2
   156f6:	f7ff fb9d 	bl	14e34 <flash_area_open>

		if (rc == 0) {
   156fa:	4601      	mov	r1, r0
   156fc:	b160      	cbz	r0, 15718 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   156fe:	4040      	eors	r0, r0
   15700:	f380 8811 	msr	BASEPRI, r0
   15704:	f04f 0004 	mov.w	r0, #4
   15708:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   1570a:	4040      	eors	r0, r0
   1570c:	f380 8811 	msr	BASEPRI, r0
   15710:	f04f 0004 	mov.w	r0, #4
   15714:	df02      	svc	2
   15716:	e00e      	b.n	15736 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   15718:	9801      	ldr	r0, [sp, #4]
   1571a:	6882      	ldr	r2, [r0, #8]
   1571c:	f011 fc3c 	bl	26f98 <flash_area_erase>
   15720:	4604      	mov	r4, r0
			flash_area_close(fap);
   15722:	9801      	ldr	r0, [sp, #4]
   15724:	f011 fbed 	bl	26f02 <flash_area_close>
		if (rc != 0) {
   15728:	2c00      	cmp	r4, #0
   1572a:	d1e8      	bne.n	156fe <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   1572c:	4628      	mov	r0, r5
   1572e:	f7ff ff8d 	bl	1564c <settings_fcb_src>
	if (rc != 0) {
   15732:	2800      	cmp	r0, #0
   15734:	d1e9      	bne.n	1570a <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   15736:	4b07      	ldr	r3, [pc, #28]	; (15754 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   15738:	4805      	ldr	r0, [pc, #20]	; (15750 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   1573a:	606b      	str	r3, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1573c:	f7ff fc00 	bl	14f40 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   15740:	4803      	ldr	r0, [pc, #12]	; (15750 <settings_backend_init+0x94>)
   15742:	f7ff ffad 	bl	156a0 <settings_mount_fcb_backend>

	return rc;
   15746:	2000      	movs	r0, #0
}
   15748:	b003      	add	sp, #12
   1574a:	bd30      	pop	{r4, r5, pc}
   1574c:	2000de78 	.word	0x2000de78
   15750:	2000c544 	.word	0x2000c544
   15754:	0002c614 	.word	0x0002c614

00015758 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1575c:	4605      	mov	r5, r0
	__asm__ volatile(
   1575e:	f04f 0320 	mov.w	r3, #32
   15762:	f3ef 8611 	mrs	r6, BASEPRI
   15766:	f383 8812 	msr	BASEPRI_MAX, r3
   1576a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1576e:	4b10      	ldr	r3, [pc, #64]	; (157b0 <pm_state_notify+0x58>)
   15770:	681c      	ldr	r4, [r3, #0]
   15772:	2c00      	cmp	r4, #0
   15774:	bf38      	it	cc
   15776:	2400      	movcc	r4, #0
   15778:	b19c      	cbz	r4, 157a2 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   1577a:	f04f 090c 	mov.w	r9, #12
   1577e:	4f0d      	ldr	r7, [pc, #52]	; (157b4 <pm_state_notify+0x5c>)
   15780:	f8df 8034 	ldr.w	r8, [pc, #52]	; 157b8 <pm_state_notify+0x60>
			callback = notifier->state_exit;
   15784:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15788:	2d00      	cmp	r5, #0
   1578a:	bf08      	it	eq
   1578c:	4613      	moveq	r3, r2
		if (callback) {
   1578e:	b12b      	cbz	r3, 1579c <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   15790:	f898 2014 	ldrb.w	r2, [r8, #20]
   15794:	fb09 f202 	mul.w	r2, r9, r2
   15798:	5cb8      	ldrb	r0, [r7, r2]
   1579a:	4798      	blx	r3
   1579c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1579e:	2c00      	cmp	r4, #0
   157a0:	d1f0      	bne.n	15784 <pm_state_notify+0x2c>
	__asm__ volatile(
   157a2:	f386 8811 	msr	BASEPRI, r6
   157a6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   157aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   157ae:	bf00      	nop
   157b0:	2000dec0 	.word	0x2000dec0
   157b4:	2000decc 	.word	0x2000decc
   157b8:	2000ef70 	.word	0x2000ef70

000157bc <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   157bc:	2201      	movs	r2, #1
   157be:	f000 031f 	and.w	r3, r0, #31
   157c2:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   157c4:	4b08      	ldr	r3, [pc, #32]	; (157e8 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   157c6:	0940      	lsrs	r0, r0, #5
   157c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   157cc:	e8d0 3fef 	ldaex	r3, [r0]
   157d0:	ea43 0102 	orr.w	r1, r3, r2
   157d4:	e8c0 1fec 	stlex	ip, r1, [r0]
   157d8:	f1bc 0f00 	cmp.w	ip, #0
   157dc:	d1f6      	bne.n	157cc <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
   157de:	421a      	tst	r2, r3
}
   157e0:	bf14      	ite	ne
   157e2:	2001      	movne	r0, #1
   157e4:	2000      	moveq	r0, #0
   157e6:	4770      	bx	lr
   157e8:	2000ded8 	.word	0x2000ded8

000157ec <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   157ec:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   157ee:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   157f0:	4b1a      	ldr	r3, [pc, #104]	; (1585c <pm_system_resume+0x70>)
{
   157f2:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
   157f4:	7d1d      	ldrb	r5, [r3, #20]
   157f6:	f005 031f 	and.w	r3, r5, #31
   157fa:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   157fc:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   157fe:	4b18      	ldr	r3, [pc, #96]	; (15860 <pm_system_resume+0x74>)
   15800:	0969      	lsrs	r1, r5, #5
   15802:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15806:	e8d3 1fef 	ldaex	r1, [r3]
   1580a:	ea01 0400 	and.w	r4, r1, r0
   1580e:	e8c3 4fec 	stlex	ip, r4, [r3]
   15812:	f1bc 0f00 	cmp.w	ip, #0
   15816:	d1f6      	bne.n	15806 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   15818:	4211      	tst	r1, r2
   1581a:	d017      	beq.n	1584c <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
   1581c:	220c      	movs	r2, #12
   1581e:	4c11      	ldr	r4, [pc, #68]	; (15864 <pm_system_resume+0x78>)
   15820:	ab01      	add	r3, sp, #4
   15822:	fb02 4205 	mla	r2, r2, r5, r4
   15826:	ca07      	ldmia	r2, {r0, r1, r2}
   15828:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1582c:	4a0e      	ldr	r2, [pc, #56]	; (15868 <pm_system_resume+0x7c>)
   1582e:	b17a      	cbz	r2, 15850 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
   15830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15834:	f010 fe6c 	bl	26510 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   15838:	2000      	movs	r0, #0
   1583a:	f7ff ff8d 	bl	15758 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1583e:	230c      	movs	r3, #12
   15840:	2200      	movs	r2, #0
   15842:	436b      	muls	r3, r5
   15844:	18e1      	adds	r1, r4, r3
   15846:	50e2      	str	r2, [r4, r3]
   15848:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   1584c:	b005      	add	sp, #20
   1584e:	bd30      	pop	{r4, r5, pc}
   15850:	f382 8811 	msr	BASEPRI, r2
   15854:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15858:	e7ee      	b.n	15838 <pm_system_resume+0x4c>
   1585a:	bf00      	nop
   1585c:	2000ef70 	.word	0x2000ef70
   15860:	2000dec8 	.word	0x2000dec8
   15864:	2000decc 	.word	0x2000decc
   15868:	00026511 	.word	0x00026511

0001586c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   1586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   15870:	4b33      	ldr	r3, [pc, #204]	; (15940 <pm_system_suspend+0xd4>)
{
   15872:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   15874:	7d1c      	ldrb	r4, [r3, #20]
{
   15876:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   15878:	4620      	mov	r0, r4
   1587a:	f7ff ff9f 	bl	157bc <atomic_test_and_set_bit.constprop.0>
   1587e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 15958 <pm_system_suspend+0xec>
   15882:	b960      	cbnz	r0, 1589e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   15884:	250c      	movs	r5, #12
   15886:	466e      	mov	r6, sp
   15888:	fb05 8504 	mla	r5, r5, r4, r8
   1588c:	463a      	mov	r2, r7
   1588e:	4621      	mov	r1, r4
   15890:	4630      	mov	r0, r6
   15892:	f011 fc89 	bl	271a8 <pm_policy_next_state>
   15896:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1589a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   1589e:	230c      	movs	r3, #12
   158a0:	4363      	muls	r3, r4
   158a2:	f818 0003 	ldrb.w	r0, [r8, r3]
   158a6:	eb08 0203 	add.w	r2, r8, r3
   158aa:	0965      	lsrs	r5, r4, #5
   158ac:	f004 061f 	and.w	r6, r4, #31
   158b0:	b3a8      	cbz	r0, 1591e <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   158b2:	1c7b      	adds	r3, r7, #1
   158b4:	d00f      	beq.n	158d6 <pm_system_suspend+0x6a>
   158b6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   158ba:	2100      	movs	r1, #0
   158bc:	f8d2 e008 	ldr.w	lr, [r2, #8]
   158c0:	4820      	ldr	r0, [pc, #128]	; (15944 <pm_system_suspend+0xd8>)
   158c2:	2300      	movs	r3, #0
   158c4:	fbec 010e 	umlal	r0, r1, ip, lr
   158c8:	4a1f      	ldr	r2, [pc, #124]	; (15948 <pm_system_suspend+0xdc>)
   158ca:	f7fb f9bd 	bl	10c48 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   158ce:	2101      	movs	r1, #1
   158d0:	1a38      	subs	r0, r7, r0
   158d2:	f015 f8d0 	bl	2aa76 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   158d6:	f00d fff1 	bl	238bc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   158da:	2001      	movs	r0, #1
   158dc:	f7ff ff3c 	bl	15758 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   158e0:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158e2:	4b1a      	ldr	r3, [pc, #104]	; (1594c <pm_system_suspend+0xe0>)
   158e4:	40b2      	lsls	r2, r6
   158e6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   158ea:	e8d3 1fef 	ldaex	r1, [r3]
   158ee:	4311      	orrs	r1, r2
   158f0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   158f4:	2800      	cmp	r0, #0
   158f6:	d1f8      	bne.n	158ea <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   158f8:	230c      	movs	r3, #12
   158fa:	fb03 8404 	mla	r4, r3, r4, r8
   158fe:	ab05      	add	r3, sp, #20
   15900:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   15904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   15908:	4a11      	ldr	r2, [pc, #68]	; (15950 <pm_system_suspend+0xe4>)
   1590a:	b11a      	cbz	r2, 15914 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
   1590c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15910:	f010 fdeb 	bl	264ea <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   15914:	f7ff ff6a 	bl	157ec <pm_system_resume>
	k_sched_unlock();
   15918:	f00e f9c8 	bl	23cac <k_sched_unlock>
	bool ret = true;
   1591c:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   1591e:	2301      	movs	r3, #1
   15920:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15922:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15924:	4a0b      	ldr	r2, [pc, #44]	; (15954 <pm_system_suspend+0xe8>)
   15926:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1592a:	e8d5 2fef 	ldaex	r2, [r5]
   1592e:	401a      	ands	r2, r3
   15930:	e8c5 2fe1 	stlex	r1, r2, [r5]
   15934:	2900      	cmp	r1, #0
   15936:	d1f8      	bne.n	1592a <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   15938:	b008      	add	sp, #32
   1593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1593e:	bf00      	nop
   15940:	2000ef70 	.word	0x2000ef70
   15944:	000f423f 	.word	0x000f423f
   15948:	000f4240 	.word	0x000f4240
   1594c:	2000dec8 	.word	0x2000dec8
   15950:	000264eb 	.word	0x000264eb
   15954:	2000ded8 	.word	0x2000ded8
   15958:	2000decc 	.word	0x2000decc

0001595c <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   1595c:	b508      	push	{r3, lr}
	k_sched_lock();
   1595e:	f00d ffad 	bl	238bc <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   15962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   15966:	4801      	ldr	r0, [pc, #4]	; (1596c <before_nse+0x10>)
   15968:	f011 bc4e 	b.w	27208 <z_arm_save_fp_context>
   1596c:	2000dedc 	.word	0x2000dedc

00015970 <after_nse>:

void after_nse(void)
{
   15970:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   15972:	4803      	ldr	r0, [pc, #12]	; (15980 <after_nse+0x10>)
   15974:	f011 fc60 	bl	27238 <z_arm_restore_fp_context>
	k_sched_unlock();
}
   15978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_sched_unlock();
   1597c:	f00e b996 	b.w	23cac <k_sched_unlock>
   15980:	2000dedc 	.word	0x2000dedc

00015984 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15984:	4901      	ldr	r1, [pc, #4]	; (1598c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15986:	2210      	movs	r2, #16
	str	r2, [r1]
   15988:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1598a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1598c:	e000ed10 	.word	0xe000ed10

00015990 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15990:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15992:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15994:	f380 8811 	msr	BASEPRI, r0
	isb
   15998:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1599c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   159a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   159a2:	b662      	cpsie	i
	isb
   159a4:	f3bf 8f6f 	isb	sy

	bx	lr
   159a8:	4770      	bx	lr
   159aa:	bf00      	nop

000159ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   159ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   159ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   159b0:	f381 8811 	msr	BASEPRI, r1

	wfe
   159b4:	bf20      	wfe

	msr	BASEPRI, r0
   159b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   159ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   159bc:	4770      	bx	lr
   159be:	bf00      	nop

000159c0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   159c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159c4:	4606      	mov	r6, r0

	if (esf != NULL) {
   159c6:	460d      	mov	r5, r1
{
   159c8:	b087      	sub	sp, #28
	if (esf != NULL) {
   159ca:	2900      	cmp	r1, #0
   159cc:	d051      	beq.n	15a72 <z_arm_fatal_error+0xb2>
   159ce:	4b2c      	ldr	r3, [pc, #176]	; (15a80 <z_arm_fatal_error+0xc0>)
   159d0:	4c2c      	ldr	r4, [pc, #176]	; (15a84 <z_arm_fatal_error+0xc4>)
   159d2:	46a8      	mov	r8, r5
   159d4:	1ae4      	subs	r4, r4, r3
   159d6:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   159d8:	688b      	ldr	r3, [r1, #8]
   159da:	01a4      	lsls	r4, r4, #6
   159dc:	f044 0401 	orr.w	r4, r4, #1
   159e0:	9300      	str	r3, [sp, #0]
   159e2:	e9d1 2300 	ldrd	r2, r3, [r1]
   159e6:	4620      	mov	r0, r4
   159e8:	4927      	ldr	r1, [pc, #156]	; (15a88 <z_arm_fatal_error+0xc8>)
   159ea:	f010 fda0 	bl	2652e <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   159ee:	696b      	ldr	r3, [r5, #20]
   159f0:	4620      	mov	r0, r4
   159f2:	9300      	str	r3, [sp, #0]
   159f4:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   159f8:	4924      	ldr	r1, [pc, #144]	; (15a8c <z_arm_fatal_error+0xcc>)
   159fa:	f010 fd98 	bl	2652e <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   159fe:	4620      	mov	r0, r4
   15a00:	69ea      	ldr	r2, [r5, #28]
   15a02:	4923      	ldr	r1, [pc, #140]	; (15a90 <z_arm_fatal_error+0xd0>)
   15a04:	f010 fd93 	bl	2652e <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   15a08:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   15a0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15a9c <z_arm_fatal_error+0xdc>
   15a0e:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   15a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15a16:	ed98 7a08 	vldr	s14, [r8, #32]
   15a1a:	edcd 7a05 	vstr	s15, [sp, #20]
   15a1e:	1cfb      	adds	r3, r7, #3
   15a20:	9304      	str	r3, [sp, #16]
   15a22:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   15a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15a2a:	edcd 7a03 	vstr	s15, [sp, #12]
   15a2e:	1cbb      	adds	r3, r7, #2
   15a30:	9302      	str	r3, [sp, #8]
   15a32:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   15a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15a3a:	edcd 7a01 	vstr	s15, [sp, #4]
   15a3e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   15a42:	1c7b      	adds	r3, r7, #1
   15a44:	463a      	mov	r2, r7
   15a46:	9300      	str	r3, [sp, #0]
   15a48:	4649      	mov	r1, r9
   15a4a:	ee17 3a90 	vmov	r3, s15
   15a4e:	4620      	mov	r0, r4
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   15a50:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   15a52:	f010 fd6c 	bl	2652e <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   15a56:	2f10      	cmp	r7, #16
   15a58:	f108 0810 	add.w	r8, r8, #16
   15a5c:	d1d7      	bne.n	15a0e <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   15a5e:	4620      	mov	r0, r4
   15a60:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   15a62:	490c      	ldr	r1, [pc, #48]	; (15a94 <z_arm_fatal_error+0xd4>)
   15a64:	f010 fd63 	bl	2652e <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15a68:	4620      	mov	r0, r4
   15a6a:	69aa      	ldr	r2, [r5, #24]
   15a6c:	490a      	ldr	r1, [pc, #40]	; (15a98 <z_arm_fatal_error+0xd8>)
   15a6e:	f010 fd5e 	bl	2652e <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15a72:	4629      	mov	r1, r5
   15a74:	4630      	mov	r0, r6
}
   15a76:	b007      	add	sp, #28
   15a78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
   15a7c:	f00d b9a4 	b.w	22dc8 <z_fatal_error>
   15a80:	0002c344 	.word	0x0002c344
   15a84:	0002c3fc 	.word	0x0002c3fc
   15a88:	0002d603 	.word	0x0002d603
   15a8c:	0002d632 	.word	0x0002d632
   15a90:	0002d661 	.word	0x0002d661
   15a94:	0002d6b3 	.word	0x0002d6b3
   15a98:	0002d6c2 	.word	0x0002d6c2
   15a9c:	0002d670 	.word	0x0002d670

00015aa0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15aa0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	db08      	blt.n	15ab8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15aa6:	2201      	movs	r2, #1
   15aa8:	f000 001f 	and.w	r0, r0, #31
   15aac:	fa02 f000 	lsl.w	r0, r2, r0
   15ab0:	4a02      	ldr	r2, [pc, #8]	; (15abc <arch_irq_enable+0x1c>)
   15ab2:	095b      	lsrs	r3, r3, #5
   15ab4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   15ab8:	4770      	bx	lr
   15aba:	bf00      	nop
   15abc:	e000e100 	.word	0xe000e100

00015ac0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15ac0:	4b05      	ldr	r3, [pc, #20]	; (15ad8 <arch_irq_is_enabled+0x18>)
   15ac2:	0942      	lsrs	r2, r0, #5
   15ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15ac8:	2301      	movs	r3, #1
   15aca:	f000 001f 	and.w	r0, r0, #31
   15ace:	fa03 f000 	lsl.w	r0, r3, r0
}
   15ad2:	4010      	ands	r0, r2
   15ad4:	4770      	bx	lr
   15ad6:	bf00      	nop
   15ad8:	e000e100 	.word	0xe000e100

00015adc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15adc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15ade:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   15ae0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15ae4:	bfac      	ite	ge
   15ae6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15aea:	4b06      	ldrlt	r3, [pc, #24]	; (15b04 <z_arm_irq_priority_set+0x28>)
   15aec:	ea4f 1141 	mov.w	r1, r1, lsl #5
   15af0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15af2:	bfab      	itete	ge
   15af4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15af8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15afc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15b00:	5419      	strblt	r1, [r3, r0]
}
   15b02:	4770      	bx	lr
   15b04:	e000ed14 	.word	0xe000ed14

00015b08 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15b08:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15b0a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15b0c:	4b04      	ldr	r3, [pc, #16]	; (15b20 <_arch_isr_direct_pm+0x18>)
   15b0e:	699a      	ldr	r2, [r3, #24]
   15b10:	b11a      	cbz	r2, 15b1a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   15b12:	2200      	movs	r2, #0
   15b14:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   15b16:	f014 fd58 	bl	2a5ca <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15b1a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15b1c:	bd08      	pop	{r3, pc}
   15b1e:	bf00      	nop
   15b20:	2000ef70 	.word	0x2000ef70

00015b24 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15b24:	bf30      	wfi
    b z_SysNmiOnReset
   15b26:	f7ff bffd 	b.w	15b24 <z_SysNmiOnReset>
   15b2a:	bf00      	nop

00015b2c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15b2c:	4a14      	ldr	r2, [pc, #80]	; (15b80 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15b2e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15b30:	4b14      	ldr	r3, [pc, #80]	; (15b84 <z_arm_prep_c+0x58>)
   15b32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15b36:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b3c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15b40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15b44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   15b4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15b50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   15b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   15b58:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   15b5c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   15b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b64:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   15b68:	2300      	movs	r3, #0
   15b6a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15b6e:	f00d f9cf 	bl	22f10 <z_bss_zero>
	z_data_copy();
   15b72:	f00e f9e5 	bl	23f40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15b76:	f000 fb33 	bl	161e0 <z_arm_interrupt_init>
	z_cstart();
   15b7a:	f00d f9d3 	bl	22f24 <z_cstart>
   15b7e:	bf00      	nop
   15b80:	00010000 	.word	0x00010000
   15b84:	e000ed00 	.word	0xe000ed00

00015b88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15b88:	4a09      	ldr	r2, [pc, #36]	; (15bb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   15b8a:	490a      	ldr	r1, [pc, #40]	; (15bb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   15b8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   15b8e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   15b90:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   15b92:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15b94:	4908      	ldr	r1, [pc, #32]	; (15bb8 <arch_swap+0x30>)
   15b96:	684b      	ldr	r3, [r1, #4]
   15b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15b9c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   15b9e:	2300      	movs	r3, #0
   15ba0:	f383 8811 	msr	BASEPRI, r3
   15ba4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15ba8:	6893      	ldr	r3, [r2, #8]
}
   15baa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   15bac:	4770      	bx	lr
   15bae:	bf00      	nop
   15bb0:	2000ef70 	.word	0x2000ef70
   15bb4:	0002cbc8 	.word	0x0002cbc8
   15bb8:	e000ed00 	.word	0xe000ed00

00015bbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15bbc:	4922      	ldr	r1, [pc, #136]	; (15c48 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15bbe:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   15bc0:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15bc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15bc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15bca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15bce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   15bd2:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   15bd6:	d103      	bne.n	15be0 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   15bd8:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   15bdc:	ec80 8a10 	vstmia	r0, {s16-s31}

00015be0 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15be0:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   15be2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15be6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15bea:	4f18      	ldr	r7, [pc, #96]	; (15c4c <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15bec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15bf0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15bf2:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15bf4:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   15bf6:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15bfa:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   15bfc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15bfe:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15c00:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   15c04:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   15c08:	d003      	beq.n	15c12 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   15c0a:	2300      	movs	r3, #0
    vmsr fpscr, r3
   15c0c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   15c10:	e003      	b.n	15c1a <in_fp_endif>

00015c12 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   15c12:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   15c16:	ec90 8a10 	vldmia	r0, {s16-s31}

00015c1a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   15c1a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   15c1e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   15c22:	f383 8814 	msr	CONTROL, r3
    isb
   15c26:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15c2a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15c2e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15c32:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   15c36:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   15c3a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   15c3c:	f011 fae0 	bl	27200 <configure_builtin_stack_guard>
    pop {r2, lr}
   15c40:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15c44:	4770      	bx	lr
   15c46:	0000      	.short	0x0000
    ldr r1, =_kernel
   15c48:	2000ef70 	.word	0x2000ef70
    ldr v4, =_SCS_ICSR
   15c4c:	e000ed04 	.word	0xe000ed04

00015c50 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15c50:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15c54:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   15c56:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15c5a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15c5e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15c60:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15c64:	2902      	cmp	r1, #2
    beq _oops
   15c66:	d0ff      	beq.n	15c68 <_oops>

00015c68 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15c68:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   15c6a:	f011 faba 	bl	271e2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   15c6e:	bd01      	pop	{r0, pc}

00015c70 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   15c70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15c74:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   15c76:	490d      	ldr	r1, [pc, #52]	; (15cac <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   15c78:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   15c7c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   15c7e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   15c82:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15c86:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   15c88:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   15c8c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15c94:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   15c98:	2300      	movs	r3, #0
   15c9a:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   15c9c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15ca0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   15ca2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   15ca4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15ca8:	4770      	bx	lr
   15caa:	bf00      	nop
   15cac:	000260a3 	.word	0x000260a3

00015cb0 <arch_switch_to_main_thread>:
   15cb0:	2300      	movs	r3, #0
   15cb2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15cb6:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   15cba:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   15cbe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   15cc2:	f3bf 8f6f 	isb	sy
   15cc6:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15cca:	4b09      	ldr	r3, [pc, #36]	; (15cf0 <arch_switch_to_main_thread+0x40>)
   15ccc:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   15cce:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15cd0:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15cd4:	4610      	mov	r0, r2
   15cd6:	f381 8809 	msr	PSP, r1
   15cda:	2100      	movs	r1, #0
   15cdc:	b663      	cpsie	if
   15cde:	f381 8811 	msr	BASEPRI, r1
   15ce2:	f3bf 8f6f 	isb	sy
   15ce6:	2200      	movs	r2, #0
   15ce8:	2300      	movs	r3, #0
   15cea:	f010 f9da 	bl	260a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15cee:	bf00      	nop
   15cf0:	2000ef70 	.word	0x2000ef70

00015cf4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15cf4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15cf6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15cf8:	4a0b      	ldr	r2, [pc, #44]	; (15d28 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15cfa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15cfc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15cfe:	bf1e      	ittt	ne
	movne	r1, #0
   15d00:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15d02:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15d04:	f014 fc61 	blne	2a5ca <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15d08:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15d0a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15d0e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15d12:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15d16:	4905      	ldr	r1, [pc, #20]	; (15d2c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15d18:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15d1a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15d1c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15d1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15d22:	4903      	ldr	r1, [pc, #12]	; (15d30 <_isr_wrapper+0x3c>)
	bx r1
   15d24:	4708      	bx	r1
   15d26:	0000      	.short	0x0000
	ldr r2, =_kernel
   15d28:	2000ef70 	.word	0x2000ef70
	ldr r1, =_sw_isr_table
   15d2c:	0002c108 	.word	0x0002c108
	ldr r1, =z_arm_int_exit
   15d30:	00015d35 	.word	0x00015d35

00015d34 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15d34:	4b04      	ldr	r3, [pc, #16]	; (15d48 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15d36:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15d38:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15d3a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15d3c:	d003      	beq.n	15d46 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15d3e:	4903      	ldr	r1, [pc, #12]	; (15d4c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15d44:	600a      	str	r2, [r1, #0]

00015d46 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15d46:	4770      	bx	lr
	ldr r3, =_kernel
   15d48:	2000ef70 	.word	0x2000ef70
	ldr r1, =_SCS_ICSR
   15d4c:	e000ed04 	.word	0xe000ed04

00015d50 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   15d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d54:	4b28      	ldr	r3, [pc, #160]	; (15df8 <mem_manage_fault.isra.0+0xa8>)
   15d56:	4c29      	ldr	r4, [pc, #164]	; (15dfc <mem_manage_fault.isra.0+0xac>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15d58:	4d29      	ldr	r5, [pc, #164]	; (15e00 <mem_manage_fault.isra.0+0xb0>)
   15d5a:	1ae4      	subs	r4, r4, r3
   15d5c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   15d5e:	01a4      	lsls	r4, r4, #6
   15d60:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   15d64:	4607      	mov	r7, r0
   15d66:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   15d68:	4640      	mov	r0, r8
   15d6a:	4926      	ldr	r1, [pc, #152]	; (15e04 <mem_manage_fault.isra.0+0xb4>)
   15d6c:	f010 fbdf 	bl	2652e <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15d70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15d72:	06d0      	lsls	r0, r2, #27
   15d74:	d503      	bpl.n	15d7e <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   15d76:	4640      	mov	r0, r8
   15d78:	4923      	ldr	r1, [pc, #140]	; (15e08 <mem_manage_fault.isra.0+0xb8>)
   15d7a:	f010 fbd8 	bl	2652e <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15d7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d80:	0719      	lsls	r1, r3, #28
   15d82:	d504      	bpl.n	15d8e <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   15d84:	4921      	ldr	r1, [pc, #132]	; (15e0c <mem_manage_fault.isra.0+0xbc>)
   15d86:	f044 0001 	orr.w	r0, r4, #1
   15d8a:	f010 fbd0 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15d8e:	4d1c      	ldr	r5, [pc, #112]	; (15e00 <mem_manage_fault.isra.0+0xb0>)
   15d90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15d92:	079a      	lsls	r2, r3, #30
   15d94:	d512      	bpl.n	15dbc <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   15d96:	f044 0801 	orr.w	r8, r4, #1
   15d9a:	4640      	mov	r0, r8
   15d9c:	491c      	ldr	r1, [pc, #112]	; (15e10 <mem_manage_fault.isra.0+0xc0>)
   15d9e:	f010 fbc6 	bl	2652e <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   15da2:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15da4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15da6:	061b      	lsls	r3, r3, #24
   15da8:	d508      	bpl.n	15dbc <mem_manage_fault.isra.0+0x6c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15daa:	4640      	mov	r0, r8
   15dac:	4919      	ldr	r1, [pc, #100]	; (15e14 <mem_manage_fault.isra.0+0xc4>)
   15dae:	f010 fbbe 	bl	2652e <log_string_sync>
			if (from_hard_fault != 0) {
   15db2:	b11f      	cbz	r7, 15dbc <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15db4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15dba:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15dbc:	4d10      	ldr	r5, [pc, #64]	; (15e00 <mem_manage_fault.isra.0+0xb0>)
   15dbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15dc0:	07d0      	lsls	r0, r2, #31
   15dc2:	d504      	bpl.n	15dce <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   15dc4:	4914      	ldr	r1, [pc, #80]	; (15e18 <mem_manage_fault.isra.0+0xc8>)
   15dc6:	f044 0001 	orr.w	r0, r4, #1
   15dca:	f010 fbb0 	bl	2652e <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15dce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15dd0:	0699      	lsls	r1, r3, #26
   15dd2:	d504      	bpl.n	15dde <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   15dd4:	4911      	ldr	r1, [pc, #68]	; (15e1c <mem_manage_fault.isra.0+0xcc>)
   15dd6:	f044 0001 	orr.w	r0, r4, #1
   15dda:	f010 fba8 	bl	2652e <log_string_sync>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   15dde:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15de0:	4b07      	ldr	r3, [pc, #28]	; (15e00 <mem_manage_fault.isra.0+0xb0>)
   15de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15de4:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15de6:	bf58      	it	pl
   15de8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15dec:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   15df0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15df2:	7030      	strb	r0, [r6, #0]

	return reason;
}
   15df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15df8:	0002c344 	.word	0x0002c344
   15dfc:	0002c3fc 	.word	0x0002c3fc
   15e00:	e000ed00 	.word	0xe000ed00
   15e04:	0002d6f0 	.word	0x0002d6f0
   15e08:	0002d706 	.word	0x0002d706
   15e0c:	0002d739 	.word	0x0002d739
   15e10:	0002d74c 	.word	0x0002d74c
   15e14:	0002d764 	.word	0x0002d764
   15e18:	0002d77a 	.word	0x0002d77a
   15e1c:	0002d799 	.word	0x0002d799

00015e20 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e24:	4b29      	ldr	r3, [pc, #164]	; (15ecc <bus_fault.isra.0+0xac>)
   15e26:	4c2a      	ldr	r4, [pc, #168]	; (15ed0 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15e28:	4d2a      	ldr	r5, [pc, #168]	; (15ed4 <bus_fault.isra.0+0xb4>)
   15e2a:	1ae4      	subs	r4, r4, r3
   15e2c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   15e2e:	01a4      	lsls	r4, r4, #6
   15e30:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15e34:	4607      	mov	r7, r0
   15e36:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   15e38:	4640      	mov	r0, r8
   15e3a:	4927      	ldr	r1, [pc, #156]	; (15ed8 <bus_fault.isra.0+0xb8>)
   15e3c:	f010 fb77 	bl	2652e <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15e40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15e42:	04d1      	lsls	r1, r2, #19
   15e44:	d503      	bpl.n	15e4e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   15e46:	4640      	mov	r0, r8
   15e48:	4924      	ldr	r1, [pc, #144]	; (15edc <bus_fault.isra.0+0xbc>)
   15e4a:	f010 fb70 	bl	2652e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15e4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e50:	051a      	lsls	r2, r3, #20
   15e52:	d504      	bpl.n	15e5e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   15e54:	4922      	ldr	r1, [pc, #136]	; (15ee0 <bus_fault.isra.0+0xc0>)
   15e56:	f044 0001 	orr.w	r0, r4, #1
   15e5a:	f010 fb68 	bl	2652e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15e5e:	4d1d      	ldr	r5, [pc, #116]	; (15ed4 <bus_fault.isra.0+0xb4>)
   15e60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e62:	059b      	lsls	r3, r3, #22
   15e64:	d512      	bpl.n	15e8c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   15e66:	f044 0801 	orr.w	r8, r4, #1
   15e6a:	4640      	mov	r0, r8
   15e6c:	491d      	ldr	r1, [pc, #116]	; (15ee4 <bus_fault.isra.0+0xc4>)
   15e6e:	f010 fb5e 	bl	2652e <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   15e72:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15e74:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e76:	0418      	lsls	r0, r3, #16
   15e78:	d508      	bpl.n	15e8c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15e7a:	4640      	mov	r0, r8
   15e7c:	491a      	ldr	r1, [pc, #104]	; (15ee8 <bus_fault.isra.0+0xc8>)
   15e7e:	f010 fb56 	bl	2652e <log_string_sync>
			if (from_hard_fault != 0) {
   15e82:	b11f      	cbz	r7, 15e8c <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15e84:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15e8a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15e8c:	4d11      	ldr	r5, [pc, #68]	; (15ed4 <bus_fault.isra.0+0xb4>)
   15e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15e90:	0559      	lsls	r1, r3, #21
   15e92:	d504      	bpl.n	15e9e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   15e94:	4915      	ldr	r1, [pc, #84]	; (15eec <bus_fault.isra.0+0xcc>)
   15e96:	f044 0001 	orr.w	r0, r4, #1
   15e9a:	f010 fb48 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15e9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15ea0:	05da      	lsls	r2, r3, #23
   15ea2:	d50d      	bpl.n	15ec0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   15ea4:	4912      	ldr	r1, [pc, #72]	; (15ef0 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15ea6:	f044 0001 	orr.w	r0, r4, #1
   15eaa:	f010 fb40 	bl	2652e <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   15eae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15eb0:	4a08      	ldr	r2, [pc, #32]	; (15ed4 <bus_fault.isra.0+0xb4>)
   15eb2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15eb4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15eb8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15eba:	7030      	strb	r0, [r6, #0]

	return reason;
}
   15ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15ec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15ec2:	049b      	lsls	r3, r3, #18
   15ec4:	d5f3      	bpl.n	15eae <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15ec6:	490b      	ldr	r1, [pc, #44]	; (15ef4 <bus_fault.isra.0+0xd4>)
   15ec8:	e7ed      	b.n	15ea6 <bus_fault.isra.0+0x86>
   15eca:	bf00      	nop
   15ecc:	0002c344 	.word	0x0002c344
   15ed0:	0002c3fc 	.word	0x0002c3fc
   15ed4:	e000ed00 	.word	0xe000ed00
   15ed8:	0002d7c8 	.word	0x0002d7c8
   15edc:	0002d7de 	.word	0x0002d7de
   15ee0:	0002d739 	.word	0x0002d739
   15ee4:	0002d7ef 	.word	0x0002d7ef
   15ee8:	0002d808 	.word	0x0002d808
   15eec:	0002d81d 	.word	0x0002d81d
   15ef0:	0002d838 	.word	0x0002d838
   15ef4:	0002d799 	.word	0x0002d799

00015ef8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15ef8:	b570      	push	{r4, r5, r6, lr}
   15efa:	4b28      	ldr	r3, [pc, #160]	; (15f9c <usage_fault.isra.0+0xa4>)
   15efc:	4c28      	ldr	r4, [pc, #160]	; (15fa0 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15efe:	4d29      	ldr	r5, [pc, #164]	; (15fa4 <usage_fault.isra.0+0xac>)
   15f00:	1ae4      	subs	r4, r4, r3
   15f02:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15f04:	01a4      	lsls	r4, r4, #6
   15f06:	f044 0601 	orr.w	r6, r4, #1
   15f0a:	4630      	mov	r0, r6
   15f0c:	4926      	ldr	r1, [pc, #152]	; (15fa8 <usage_fault.isra.0+0xb0>)
   15f0e:	f010 fb0e 	bl	2652e <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15f12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15f14:	0193      	lsls	r3, r2, #6
   15f16:	d503      	bpl.n	15f20 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   15f18:	4630      	mov	r0, r6
   15f1a:	4924      	ldr	r1, [pc, #144]	; (15fac <usage_fault.isra.0+0xb4>)
   15f1c:	f010 fb07 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15f20:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f22:	01dd      	lsls	r5, r3, #7
   15f24:	d504      	bpl.n	15f30 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   15f26:	4922      	ldr	r1, [pc, #136]	; (15fb0 <usage_fault.isra.0+0xb8>)
   15f28:	f044 0001 	orr.w	r0, r4, #1
   15f2c:	f010 faff 	bl	2652e <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   15f30:	4d1c      	ldr	r5, [pc, #112]	; (15fa4 <usage_fault.isra.0+0xac>)
   15f32:	6aae      	ldr	r6, [r5, #40]	; 0x28
   15f34:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   15f38:	d005      	beq.n	15f46 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   15f3a:	491e      	ldr	r1, [pc, #120]	; (15fb4 <usage_fault.isra.0+0xbc>)
   15f3c:	f044 0001 	orr.w	r0, r4, #1
   15f40:	f010 faf5 	bl	2652e <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   15f44:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15f46:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f48:	0318      	lsls	r0, r3, #12
   15f4a:	d504      	bpl.n	15f56 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   15f4c:	491a      	ldr	r1, [pc, #104]	; (15fb8 <usage_fault.isra.0+0xc0>)
   15f4e:	f044 0001 	orr.w	r0, r4, #1
   15f52:	f010 faec 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15f56:	4d13      	ldr	r5, [pc, #76]	; (15fa4 <usage_fault.isra.0+0xac>)
   15f58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15f5a:	0351      	lsls	r1, r2, #13
   15f5c:	d504      	bpl.n	15f68 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15f5e:	4917      	ldr	r1, [pc, #92]	; (15fbc <usage_fault.isra.0+0xc4>)
   15f60:	f044 0001 	orr.w	r0, r4, #1
   15f64:	f010 fae3 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15f68:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f6a:	039a      	lsls	r2, r3, #14
   15f6c:	d504      	bpl.n	15f78 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15f6e:	4914      	ldr	r1, [pc, #80]	; (15fc0 <usage_fault.isra.0+0xc8>)
   15f70:	f044 0001 	orr.w	r0, r4, #1
   15f74:	f010 fadb 	bl	2652e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15f78:	4d0a      	ldr	r5, [pc, #40]	; (15fa4 <usage_fault.isra.0+0xac>)
   15f7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15f7c:	03db      	lsls	r3, r3, #15
   15f7e:	d504      	bpl.n	15f8a <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15f80:	4910      	ldr	r1, [pc, #64]	; (15fc4 <usage_fault.isra.0+0xcc>)
   15f82:	f044 0001 	orr.w	r0, r4, #1
   15f86:	f010 fad2 	bl	2652e <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15f8a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   15f8c:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15f8e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15f92:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15f96:	62ab      	str	r3, [r5, #40]	; 0x28
}
   15f98:	bd70      	pop	{r4, r5, r6, pc}
   15f9a:	bf00      	nop
   15f9c:	0002c344 	.word	0x0002c344
   15fa0:	0002c3fc 	.word	0x0002c3fc
   15fa4:	e000ed00 	.word	0xe000ed00
   15fa8:	0002d850 	.word	0x0002d850
   15fac:	0002d868 	.word	0x0002d868
   15fb0:	0002d87b 	.word	0x0002d87b
   15fb4:	0002d895 	.word	0x0002d895
   15fb8:	0002d8bf 	.word	0x0002d8bf
   15fbc:	0002d8dd 	.word	0x0002d8dd
   15fc0:	0002d902 	.word	0x0002d902
   15fc4:	0002d91c 	.word	0x0002d91c

00015fc8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15fcc:	4b6a      	ldr	r3, [pc, #424]	; (16178 <z_arm_fault+0x1b0>)
{
   15fce:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15fd0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   15fd4:	460d      	mov	r5, r1
   15fd6:	4614      	mov	r4, r2
   15fd8:	2700      	movs	r7, #0
   15fda:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15fdc:	f3c8 0608 	ubfx	r6, r8, #0, #9
   15fe0:	f387 8811 	msr	BASEPRI, r7
   15fe4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15fe8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15fec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15ff0:	d124      	bne.n	1603c <z_arm_fault+0x74>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   15ff2:	07d0      	lsls	r0, r2, #31
   15ff4:	d422      	bmi.n	1603c <z_arm_fault+0x74>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   15ff6:	0651      	lsls	r1, r2, #25
   15ff8:	d403      	bmi.n	16002 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15ffa:	0722      	lsls	r2, r4, #28
   15ffc:	d40e      	bmi.n	1601c <z_arm_fault+0x54>
			*nested_exc = true;
   15ffe:	2701      	movs	r7, #1
   16000:	e00e      	b.n	16020 <z_arm_fault+0x58>
   16002:	485e      	ldr	r0, [pc, #376]	; (1617c <z_arm_fault+0x1b4>)
   16004:	4b5e      	ldr	r3, [pc, #376]	; (16180 <z_arm_fault+0x1b8>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   16006:	495f      	ldr	r1, [pc, #380]	; (16184 <z_arm_fault+0x1bc>)
   16008:	1a1b      	subs	r3, r3, r0
   1600a:	08db      	lsrs	r3, r3, #3
   1600c:	019b      	lsls	r3, r3, #6
   1600e:	f043 0001 	orr.w	r0, r3, #1
   16012:	f010 fa8c 	bl	2652e <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   16016:	f014 0704 	ands.w	r7, r4, #4
   1601a:	d001      	beq.n	16020 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   1601c:	46a9      	mov	r9, r5
	*nested_exc = false;
   1601e:	2700      	movs	r7, #0
	*recoverable = false;
   16020:	2300      	movs	r3, #0
   16022:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   16026:	1ef3      	subs	r3, r6, #3
   16028:	2b09      	cmp	r3, #9
   1602a:	f200 808b 	bhi.w	16144 <z_arm_fault+0x17c>
   1602e:	e8df f003 	tbb	[pc, r3]
   16032:	7807      	.short	0x7807
   16034:	8989757c 	.word	0x8989757c
   16038:	80898989 	.word	0x80898989
		return NULL;
   1603c:	46b9      	mov	r9, r7
   1603e:	e7ef      	b.n	16020 <z_arm_fault+0x58>
	*recoverable = false;
   16040:	f04f 0800 	mov.w	r8, #0
   16044:	4b4d      	ldr	r3, [pc, #308]	; (1617c <z_arm_fault+0x1b4>)
   16046:	4e4e      	ldr	r6, [pc, #312]	; (16180 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   16048:	494f      	ldr	r1, [pc, #316]	; (16188 <z_arm_fault+0x1c0>)
   1604a:	1af6      	subs	r6, r6, r3
   1604c:	08f6      	lsrs	r6, r6, #3
   1604e:	01b6      	lsls	r6, r6, #6
   16050:	f046 0601 	orr.w	r6, r6, #1
   16054:	4630      	mov	r0, r6
   16056:	f010 fa6a 	bl	2652e <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1605a:	4b47      	ldr	r3, [pc, #284]	; (16178 <z_arm_fault+0x1b0>)
	*recoverable = false;
   1605c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16060:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   16062:	f014 0402 	ands.w	r4, r4, #2
   16066:	d005      	beq.n	16074 <z_arm_fault+0xac>
		PR_EXC("  Bus fault on vector table read");
   16068:	4630      	mov	r0, r6
   1606a:	4948      	ldr	r1, [pc, #288]	; (1618c <z_arm_fault+0x1c4>)
	PR_FAULT_INFO(
   1606c:	f010 fa5f 	bl	2652e <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16070:	2400      	movs	r4, #0
}
   16072:	e006      	b.n	16082 <z_arm_fault+0xba>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   16074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16076:	2a00      	cmp	r2, #0
   16078:	da1d      	bge.n	160b6 <z_arm_fault+0xee>
		PR_EXC("  Debug event");
   1607a:	4630      	mov	r0, r6
   1607c:	4944      	ldr	r1, [pc, #272]	; (16190 <z_arm_fault+0x1c8>)
   1607e:	f010 fa56 	bl	2652e <log_string_sync>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   16082:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16086:	b99b      	cbnz	r3, 160b0 <z_arm_fault+0xe8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   16088:	2268      	movs	r2, #104	; 0x68
   1608a:	4649      	mov	r1, r9
   1608c:	a802      	add	r0, sp, #8
   1608e:	f014 fedb 	bl	2ae48 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   16092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16094:	2f00      	cmp	r7, #0
   16096:	d069      	beq.n	1616c <z_arm_fault+0x1a4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   16098:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1609c:	b922      	cbnz	r2, 160a8 <z_arm_fault+0xe0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1609e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   160a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   160a6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   160a8:	4620      	mov	r0, r4
   160aa:	a902      	add	r1, sp, #8
   160ac:	f7ff fc88 	bl	159c0 <z_arm_fatal_error>
}
   160b0:	b01d      	add	sp, #116	; 0x74
   160b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   160b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   160b8:	005b      	lsls	r3, r3, #1
   160ba:	d5e2      	bpl.n	16082 <z_arm_fault+0xba>
		PR_EXC("  Fault escalation (see below)");
   160bc:	4630      	mov	r0, r6
   160be:	4935      	ldr	r1, [pc, #212]	; (16194 <z_arm_fault+0x1cc>)
   160c0:	f010 fa35 	bl	2652e <log_string_sync>
	uint16_t fault_insn = *(ret_addr - 1);
   160c4:	f8d9 3018 	ldr.w	r3, [r9, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   160c8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   160cc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   160d0:	429a      	cmp	r2, r3
   160d2:	d00c      	beq.n	160ee <z_arm_fault+0x126>
		} else if (SCB_MMFSR != 0) {
   160d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   160d8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   160dc:	781b      	ldrb	r3, [r3, #0]
   160de:	b17b      	cbz	r3, 16100 <z_arm_fault+0x138>
			reason = mem_manage_fault(esf, 1, recoverable);
   160e0:	2001      	movs	r0, #1
   160e2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   160e6:	f7ff fe33 	bl	15d50 <mem_manage_fault.isra.0>
   160ea:	4604      	mov	r4, r0
		break;
   160ec:	e7c9      	b.n	16082 <z_arm_fault+0xba>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   160ee:	4630      	mov	r0, r6
   160f0:	f8d9 2000 	ldr.w	r2, [r9]
   160f4:	4928      	ldr	r1, [pc, #160]	; (16198 <z_arm_fault+0x1d0>)
   160f6:	f010 fa1a 	bl	2652e <log_string_sync>
			reason = esf->basic.r0;
   160fa:	f8d9 4000 	ldr.w	r4, [r9]
   160fe:	e7c0      	b.n	16082 <z_arm_fault+0xba>
		} else if (SCB_BFSR != 0) {
   16100:	4b26      	ldr	r3, [pc, #152]	; (1619c <z_arm_fault+0x1d4>)
   16102:	781b      	ldrb	r3, [r3, #0]
   16104:	b12b      	cbz	r3, 16112 <z_arm_fault+0x14a>
			reason = bus_fault(esf, 1, recoverable);
   16106:	2001      	movs	r0, #1
   16108:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1610c:	f7ff fe88 	bl	15e20 <bus_fault.isra.0>
   16110:	e7eb      	b.n	160ea <z_arm_fault+0x122>
		} else if (SCB_UFSR != 0) {
   16112:	4b23      	ldr	r3, [pc, #140]	; (161a0 <z_arm_fault+0x1d8>)
   16114:	881b      	ldrh	r3, [r3, #0]
   16116:	b29b      	uxth	r3, r3
   16118:	2b00      	cmp	r3, #0
   1611a:	d0b2      	beq.n	16082 <z_arm_fault+0xba>
		reason = usage_fault(esf);
   1611c:	f7ff feec 	bl	15ef8 <usage_fault.isra.0>
   16120:	e7e3      	b.n	160ea <z_arm_fault+0x122>
		reason = mem_manage_fault(esf, 0, recoverable);
   16122:	2000      	movs	r0, #0
   16124:	f10d 0107 	add.w	r1, sp, #7
   16128:	e7dd      	b.n	160e6 <z_arm_fault+0x11e>
		reason = bus_fault(esf, 0, recoverable);
   1612a:	2000      	movs	r0, #0
   1612c:	f10d 0107 	add.w	r1, sp, #7
   16130:	e7ec      	b.n	1610c <z_arm_fault+0x144>
   16132:	4813      	ldr	r0, [pc, #76]	; (16180 <z_arm_fault+0x1b8>)
   16134:	4b11      	ldr	r3, [pc, #68]	; (1617c <z_arm_fault+0x1b4>)
	PR_FAULT_INFO(
   16136:	491b      	ldr	r1, [pc, #108]	; (161a4 <z_arm_fault+0x1dc>)
   16138:	1ac0      	subs	r0, r0, r3
   1613a:	08c0      	lsrs	r0, r0, #3
   1613c:	0180      	lsls	r0, r0, #6
   1613e:	f040 0001 	orr.w	r0, r0, #1
   16142:	e793      	b.n	1606c <z_arm_fault+0xa4>
   16144:	4b0d      	ldr	r3, [pc, #52]	; (1617c <z_arm_fault+0x1b4>)
   16146:	480e      	ldr	r0, [pc, #56]	; (16180 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO("***** %s %d) *****",
   16148:	4917      	ldr	r1, [pc, #92]	; (161a8 <z_arm_fault+0x1e0>)
   1614a:	1ac0      	subs	r0, r0, r3
   1614c:	08c0      	lsrs	r0, r0, #3
   1614e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   16152:	ea4f 1080 	mov.w	r0, r0, lsl #6
   16156:	4a15      	ldr	r2, [pc, #84]	; (161ac <z_arm_fault+0x1e4>)
   16158:	f1a6 0310 	sub.w	r3, r6, #16
   1615c:	bf08      	it	eq
   1615e:	460a      	moveq	r2, r1
   16160:	f040 0001 	orr.w	r0, r0, #1
   16164:	4912      	ldr	r1, [pc, #72]	; (161b0 <z_arm_fault+0x1e8>)
   16166:	f010 f9e2 	bl	2652e <log_string_sync>
   1616a:	e781      	b.n	16070 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1616c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16170:	f023 0301 	bic.w	r3, r3, #1
   16174:	e797      	b.n	160a6 <z_arm_fault+0xde>
   16176:	bf00      	nop
   16178:	e000ed00 	.word	0xe000ed00
   1617c:	0002c344 	.word	0x0002c344
   16180:	0002c3fc 	.word	0x0002c3fc
   16184:	0002d975 	.word	0x0002d975
   16188:	0002d998 	.word	0x0002d998
   1618c:	0002d9af 	.word	0x0002d9af
   16190:	0002d9d0 	.word	0x0002d9d0
   16194:	0002d9de 	.word	0x0002d9de
   16198:	0002d9fd 	.word	0x0002d9fd
   1619c:	e000ed29 	.word	0xe000ed29
   161a0:	e000ed2a 	.word	0xe000ed2a
   161a4:	0002da19 	.word	0x0002da19
   161a8:	0002d947 	.word	0x0002d947
   161ac:	0002d95c 	.word	0x0002d95c
   161b0:	0002da3d 	.word	0x0002da3d

000161b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   161b4:	4b04      	ldr	r3, [pc, #16]	; (161c8 <z_arm_fault_init+0x14>)
   161b6:	695a      	ldr	r2, [r3, #20]
   161b8:	f042 0210 	orr.w	r2, r2, #16
   161bc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   161be:	695a      	ldr	r2, [r3, #20]
   161c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   161c4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   161c6:	4770      	bx	lr
   161c8:	e000ed00 	.word	0xe000ed00

000161cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   161cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   161d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   161d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   161d6:	4672      	mov	r2, lr
	bl z_arm_fault
   161d8:	f7ff fef6 	bl	15fc8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   161dc:	bd01      	pop	{r0, pc}
   161de:	bf00      	nop

000161e0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   161e0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161e2:	2120      	movs	r1, #32
   161e4:	4803      	ldr	r0, [pc, #12]	; (161f4 <z_arm_interrupt_init+0x14>)
   161e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   161e8:	3301      	adds	r3, #1
   161ea:	2b41      	cmp	r3, #65	; 0x41
   161ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   161f0:	d1f9      	bne.n	161e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   161f2:	4770      	bx	lr
   161f4:	e000e100 	.word	0xe000e100

000161f8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   161f8:	f015 feec 	bl	2bfd4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   161fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   161fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16202:	4808      	ldr	r0, [pc, #32]	; (16224 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16204:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   16208:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1620a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1620e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16212:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16214:	4308      	orrs	r0, r1
    msr CONTROL, r0
   16216:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1621a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1621e:	f7ff fc85 	bl	15b2c <z_arm_prep_c>
   16222:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   16224:	200115d8 	.word	0x200115d8

00016228 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   16228:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1622c:	4905      	ldr	r1, [pc, #20]	; (16244 <sys_arch_reboot+0x1c>)
   1622e:	4b06      	ldr	r3, [pc, #24]	; (16248 <sys_arch_reboot+0x20>)
   16230:	68ca      	ldr	r2, [r1, #12]
   16232:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16236:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16238:	60cb      	str	r3, [r1, #12]
   1623a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1623e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16240:	e7fd      	b.n	1623e <sys_arch_reboot+0x16>
   16242:	bf00      	nop
   16244:	e000ed00 	.word	0xe000ed00
   16248:	05fa0004 	.word	0x05fa0004

0001624c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1624c:	4b06      	ldr	r3, [pc, #24]	; (16268 <z_impl_k_thread_abort+0x1c>)
   1624e:	689b      	ldr	r3, [r3, #8]
   16250:	4283      	cmp	r3, r0
   16252:	d107      	bne.n	16264 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16254:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16258:	b123      	cbz	r3, 16264 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1625a:	4a04      	ldr	r2, [pc, #16]	; (1626c <z_impl_k_thread_abort+0x20>)
   1625c:	6853      	ldr	r3, [r2, #4]
   1625e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16262:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   16264:	f00d be08 	b.w	23e78 <z_thread_abort>
   16268:	2000ef70 	.word	0x2000ef70
   1626c:	e000ed00 	.word	0xe000ed00

00016270 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   16270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16272:	4c09      	ldr	r4, [pc, #36]	; (16298 <z_arm_configure_static_mpu_regions+0x28>)
   16274:	4a09      	ldr	r2, [pc, #36]	; (1629c <z_arm_configure_static_mpu_regions+0x2c>)
   16276:	4623      	mov	r3, r4
   16278:	2101      	movs	r1, #1
   1627a:	4809      	ldr	r0, [pc, #36]	; (162a0 <z_arm_configure_static_mpu_regions+0x30>)
   1627c:	f000 f916 	bl	164ac <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   16280:	2300      	movs	r3, #0
   16282:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   16284:	4b07      	ldr	r3, [pc, #28]	; (162a4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16286:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   16288:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1628a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1628c:	9301      	str	r3, [sp, #4]
   1628e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16290:	f000 f916 	bl	164c0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   16294:	b004      	add	sp, #16
   16296:	bd10      	pop	{r4, pc}
   16298:	20040000 	.word	0x20040000
   1629c:	2000c500 	.word	0x2000c500
   162a0:	0002c658 	.word	0x0002c658
   162a4:	2000cb18 	.word	0x2000cb18

000162a8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   162a8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   162aa:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   162ac:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   162ae:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   162b2:	f004 031f 	and.w	r3, r4, #31
   162b6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   162b8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   162ba:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   162bc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   162c0:	4904      	ldr	r1, [pc, #16]	; (162d4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   162c2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   162c6:	f043 0301 	orr.w	r3, r3, #1
   162ca:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   162cc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   162ce:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   162d0:	bd10      	pop	{r4, pc}
   162d2:	bf00      	nop
   162d4:	e000ed90 	.word	0xe000ed90

000162d8 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   162d8:	4602      	mov	r2, r0
   162da:	b508      	push	{r3, lr}
   162dc:	4806      	ldr	r0, [pc, #24]	; (162f8 <region_allocate_and_init.part.0+0x20>)
   162de:	4b07      	ldr	r3, [pc, #28]	; (162fc <region_allocate_and_init.part.0+0x24>)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   162e0:	4907      	ldr	r1, [pc, #28]	; (16300 <region_allocate_and_init.part.0+0x28>)
   162e2:	1a1b      	subs	r3, r3, r0
   162e4:	08db      	lsrs	r3, r3, #3
   162e6:	019b      	lsls	r3, r3, #6
   162e8:	f043 0001 	orr.w	r0, r3, #1
   162ec:	f010 f91f 	bl	2652e <log_string_sync>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   162f0:	f06f 0015 	mvn.w	r0, #21
   162f4:	bd08      	pop	{r3, pc}
   162f6:	bf00      	nop
   162f8:	0002c344 	.word	0x0002c344
   162fc:	0002c3b4 	.word	0x0002c3b4
   16300:	0002da54 	.word	0x0002da54

00016304 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   16304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16308:	4688      	mov	r8, r1
   1630a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1630c:	4606      	mov	r6, r0
   1630e:	2700      	movs	r7, #0
	MPU->RNR = index;
   16310:	4d58      	ldr	r5, [pc, #352]	; (16474 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   16312:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   16314:	4547      	cmp	r7, r8
   16316:	da31      	bge.n	1637c <mpu_configure_regions_and_partition.constprop.0+0x78>
		if (regions[i].size == 0U) {
   16318:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1631c:	f1b9 0f00 	cmp.w	r9, #0
   16320:	d04e      	beq.n	163c0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   16322:	f1b9 0f1f 	cmp.w	r9, #31
   16326:	d91c      	bls.n	16362 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		&&
   16328:	f019 0f1f 	tst.w	r9, #31
   1632c:	d119      	bne.n	16362 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		((part->start &
   1632e:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   16332:	f01a 0f1f 	tst.w	sl, #31
   16336:	d114      	bne.n	16362 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   16338:	4650      	mov	r0, sl
   1633a:	f010 ff93 	bl	27264 <arm_cmse_mpu_region_get>
   1633e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   16340:	eb09 000a 	add.w	r0, r9, sl
   16344:	3801      	subs	r0, #1
   16346:	f010 ff8d 	bl	27264 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1634a:	4583      	cmp	fp, r0
   1634c:	d01a      	beq.n	16384 <mpu_configure_regions_and_partition.constprop.0+0x80>
	return -EINVAL;
   1634e:	f06f 0b15 	mvn.w	fp, #21
   16352:	4849      	ldr	r0, [pc, #292]	; (16478 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   16354:	4b49      	ldr	r3, [pc, #292]	; (1647c <mpu_configure_regions_and_partition.constprop.0+0x178>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   16356:	465a      	mov	r2, fp
   16358:	1ac0      	subs	r0, r0, r3
   1635a:	08c0      	lsrs	r0, r0, #3
   1635c:	4948      	ldr	r1, [pc, #288]	; (16480 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   1635e:	0180      	lsls	r0, r0, #6
   16360:	e006      	b.n	16370 <mpu_configure_regions_and_partition.constprop.0+0x6c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   16362:	463a      	mov	r2, r7
   16364:	4844      	ldr	r0, [pc, #272]	; (16478 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   16366:	4b45      	ldr	r3, [pc, #276]	; (1647c <mpu_configure_regions_and_partition.constprop.0+0x178>)
   16368:	4946      	ldr	r1, [pc, #280]	; (16484 <mpu_configure_regions_and_partition.constprop.0+0x180>)
   1636a:	1ac0      	subs	r0, r0, r3
   1636c:	08c0      	lsrs	r0, r0, #3
   1636e:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   16370:	f040 0001 	orr.w	r0, r0, #1
   16374:	f010 f8db 	bl	2652e <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   16378:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1637c:	4620      	mov	r0, r4
   1637e:	b005      	add	sp, #20
   16380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   16384:	f11b 0f16 	cmn.w	fp, #22
   16388:	d0e3      	beq.n	16352 <mpu_configure_regions_and_partition.constprop.0+0x4e>
			(u_reg_index > (reg_index - 1))) {
   1638a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1638c:	455b      	cmp	r3, fp
   1638e:	dbe0      	blt.n	16352 <mpu_configure_regions_and_partition.constprop.0+0x4e>
	MPU->RNR = index;
   16390:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   16394:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   16396:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1639a:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1639c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   163a0:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   163a4:	e9d6 3200 	ldrd	r3, r2, [r6]
   163a8:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   163aa:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   163ac:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   163b0:	d11b      	bne.n	163ea <mpu_configure_regions_and_partition.constprop.0+0xe6>
   163b2:	45ca      	cmp	sl, r9
   163b4:	d107      	bne.n	163c6 <mpu_configure_regions_and_partition.constprop.0+0xc2>
			mpu_configure_region(u_reg_index, &regions[i]);
   163b6:	4631      	mov	r1, r6
   163b8:	fa5f f08b 	uxtb.w	r0, fp
   163bc:	f010 ff5c 	bl	27278 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   163c0:	3701      	adds	r7, #1
   163c2:	360c      	adds	r6, #12
   163c4:	e7a6      	b.n	16314 <mpu_configure_regions_and_partition.constprop.0+0x10>
				mpu_configure_region(reg_index, &regions[i]);
   163c6:	4631      	mov	r1, r6
	MPU->RNR = index;
   163c8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   163cc:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   163ce:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   163d2:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   163d6:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   163d8:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   163da:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   163dc:	f010 ff4c 	bl	27278 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   163e0:	f110 0f16 	cmn.w	r0, #22
   163e4:	d0c8      	beq.n	16378 <mpu_configure_regions_and_partition.constprop.0+0x74>
			reg_index++;
   163e6:	1c44      	adds	r4, r0, #1
   163e8:	e7ea      	b.n	163c0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   163ea:	3b01      	subs	r3, #1
   163ec:	45ca      	cmp	sl, r9
   163ee:	b2e0      	uxtb	r0, r4
   163f0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   163f4:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   163f8:	d106      	bne.n	16408 <mpu_configure_regions_and_partition.constprop.0+0x104>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   163fa:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   163fc:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   163fe:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   16402:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16404:	612b      	str	r3, [r5, #16]
			reg_index =
   16406:	e7e9      	b.n	163dc <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16408:	6929      	ldr	r1, [r5, #16]
   1640a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1640e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16410:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   16412:	4631      	mov	r1, r6
   16414:	f010 ff30 	bl	27278 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   16418:	f110 0f16 	cmn.w	r0, #22
   1641c:	d0ac      	beq.n	16378 <mpu_configure_regions_and_partition.constprop.0+0x74>
	MPU->RNR = index;
   1641e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   16422:	68ea      	ldr	r2, [r5, #12]
   16424:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   16428:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1642c:	f362 0304 	bfi	r3, r2, #0, #5
   16430:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   16434:	692b      	ldr	r3, [r5, #16]
   16436:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1643a:	085b      	lsrs	r3, r3, #1
   1643c:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   16440:	e9d6 1300 	ldrd	r1, r3, [r6]
   16444:	440b      	add	r3, r1
   16446:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   16448:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1644c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1644e:	4453      	add	r3, sl
   16450:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   16454:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   16456:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1645a:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1645c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   16460:	9303      	str	r3, [sp, #12]
   16462:	d902      	bls.n	1646a <mpu_configure_regions_and_partition.constprop.0+0x166>
   16464:	f7ff ff38 	bl	162d8 <region_allocate_and_init.part.0>
   16468:	e7ba      	b.n	163e0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
	region_init(index, region_conf);
   1646a:	4669      	mov	r1, sp
   1646c:	f7ff ff1c 	bl	162a8 <region_init>
			if (reg_index == -EINVAL) {
   16470:	e7b9      	b.n	163e6 <mpu_configure_regions_and_partition.constprop.0+0xe2>
   16472:	bf00      	nop
   16474:	e000ed90 	.word	0xe000ed90
   16478:	0002c3b4 	.word	0x0002c3b4
   1647c:	0002c344 	.word	0x0002c344
   16480:	0002da9d 	.word	0x0002da9d
   16484:	0002da7a 	.word	0x0002da7a

00016488 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16488:	2205      	movs	r2, #5
   1648a:	4b03      	ldr	r3, [pc, #12]	; (16498 <arm_core_mpu_enable+0x10>)
   1648c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1648e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16492:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16496:	4770      	bx	lr
   16498:	e000ed90 	.word	0xe000ed90

0001649c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1649c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   164a0:	2200      	movs	r2, #0
   164a2:	4b01      	ldr	r3, [pc, #4]	; (164a8 <arm_core_mpu_disable+0xc>)
   164a4:	605a      	str	r2, [r3, #4]
}
   164a6:	4770      	bx	lr
   164a8:	e000ed90 	.word	0xe000ed90

000164ac <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   164ac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   164ae:	4c03      	ldr	r4, [pc, #12]	; (164bc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   164b0:	7822      	ldrb	r2, [r4, #0]
   164b2:	f7ff ff27 	bl	16304 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   164b6:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   164b8:	bd10      	pop	{r4, pc}
   164ba:	bf00      	nop
   164bc:	2000efd0 	.word	0x2000efd0

000164c0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   164c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c4:	4d26      	ldr	r5, [pc, #152]	; (16560 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   164c6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   164c8:	4606      	mov	r6, r0
   164ca:	f04f 0800 	mov.w	r8, #0
   164ce:	46ab      	mov	fp, r5
	MPU->RNR = index;
   164d0:	4f24      	ldr	r7, [pc, #144]	; (16564 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   164d2:	45d0      	cmp	r8, sl
   164d4:	da1b      	bge.n	1650e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   164d6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   164da:	f1b9 0f00 	cmp.w	r9, #0
   164de:	d039      	beq.n	16554 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   164e0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   164e2:	4608      	mov	r0, r1
   164e4:	9101      	str	r1, [sp, #4]
   164e6:	f010 febd 	bl	27264 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   164ea:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   164ec:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   164ee:	eb09 0001 	add.w	r0, r9, r1
   164f2:	3801      	subs	r0, #1
   164f4:	f010 feb6 	bl	27264 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   164f8:	4284      	cmp	r4, r0
   164fa:	f04f 0214 	mov.w	r2, #20
   164fe:	4b1a      	ldr	r3, [pc, #104]	; (16568 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   16500:	d008      	beq.n	16514 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   16502:	f06f 0315 	mvn.w	r3, #21
   16506:	fb02 f808 	mul.w	r8, r2, r8
   1650a:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1650e:	b003      	add	sp, #12
   16510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   16514:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   16518:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1651a:	d0f8      	beq.n	1650e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1651c:	7819      	ldrb	r1, [r3, #0]
   1651e:	42a1      	cmp	r1, r4
   16520:	ddf5      	ble.n	1650e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   16522:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   16526:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   16528:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1652a:	68fc      	ldr	r4, [r7, #12]
   1652c:	f100 0108 	add.w	r1, r0, #8
   16530:	7b00      	ldrb	r0, [r0, #12]
   16532:	f364 0004 	bfi	r0, r4, #0, #5
   16536:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   16538:	6938      	ldr	r0, [r7, #16]
   1653a:	790c      	ldrb	r4, [r1, #4]
   1653c:	0840      	lsrs	r0, r0, #1
   1653e:	f360 1447 	bfi	r4, r0, #5, #3
   16542:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   16544:	68f9      	ldr	r1, [r7, #12]
   16546:	f021 011f 	bic.w	r1, r1, #31
   1654a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1654c:	6939      	ldr	r1, [r7, #16]
   1654e:	f021 011f 	bic.w	r1, r1, #31
   16552:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   16554:	f108 0801 	add.w	r8, r8, #1
   16558:	3514      	adds	r5, #20
   1655a:	360c      	adds	r6, #12
   1655c:	e7b9      	b.n	164d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1655e:	bf00      	nop
   16560:	2000df64 	.word	0x2000df64
   16564:	e000ed90 	.word	0xe000ed90
   16568:	2000efd0 	.word	0x2000efd0

0001656c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1656c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1656e:	4c0e      	ldr	r4, [pc, #56]	; (165a8 <z_arm_mpu_init+0x3c>)
   16570:	6825      	ldr	r5, [r4, #0]
   16572:	2d10      	cmp	r5, #16
   16574:	d814      	bhi.n	165a0 <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16576:	f7ff ff91 	bl	1649c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1657a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1657c:	4b0b      	ldr	r3, [pc, #44]	; (165ac <z_arm_mpu_init+0x40>)
   1657e:	4a0c      	ldr	r2, [pc, #48]	; (165b0 <z_arm_mpu_init+0x44>)
   16580:	631a      	str	r2, [r3, #48]	; 0x30
   16582:	4285      	cmp	r5, r0
   16584:	d105      	bne.n	16592 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16586:	4b0b      	ldr	r3, [pc, #44]	; (165b4 <z_arm_mpu_init+0x48>)
   16588:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1658a:	f7ff ff7d 	bl	16488 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1658e:	2000      	movs	r0, #0
}
   16590:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   16592:	6861      	ldr	r1, [r4, #4]
   16594:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   16598:	f7ff fe86 	bl	162a8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1659c:	3001      	adds	r0, #1
   1659e:	e7f0      	b.n	16582 <z_arm_mpu_init+0x16>
		return -1;
   165a0:	f04f 30ff 	mov.w	r0, #4294967295
   165a4:	e7f4      	b.n	16590 <z_arm_mpu_init+0x24>
   165a6:	bf00      	nop
   165a8:	0002c664 	.word	0x0002c664
   165ac:	e000ed90 	.word	0xe000ed90
   165b0:	0044ffaa 	.word	0x0044ffaa
   165b4:	2000efd0 	.word	0x2000efd0

000165b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   165b8:	4b01      	ldr	r3, [pc, #4]	; (165c0 <__stdout_hook_install+0x8>)
   165ba:	6018      	str	r0, [r3, #0]
}
   165bc:	4770      	bx	lr
   165be:	bf00      	nop
   165c0:	2000c590 	.word	0x2000c590

000165c4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   165c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165c6:	460d      	mov	r5, r1
   165c8:	4f09      	ldr	r7, [pc, #36]	; (165f0 <z_impl_zephyr_write_stdout+0x2c>)
   165ca:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   165cc:	f1c0 0401 	rsb	r4, r0, #1
   165d0:	19a3      	adds	r3, r4, r6
   165d2:	429d      	cmp	r5, r3
   165d4:	dc01      	bgt.n	165da <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   165d6:	4628      	mov	r0, r5
   165d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   165da:	7873      	ldrb	r3, [r6, #1]
   165dc:	2b0a      	cmp	r3, #10
   165de:	d102      	bne.n	165e6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   165e0:	200d      	movs	r0, #13
   165e2:	683b      	ldr	r3, [r7, #0]
   165e4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   165e6:	683b      	ldr	r3, [r7, #0]
   165e8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   165ec:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   165ee:	e7ef      	b.n	165d0 <z_impl_zephyr_write_stdout+0xc>
   165f0:	2000c590 	.word	0x2000c590

000165f4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   165f4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   165f6:	4c07      	ldr	r4, [pc, #28]	; (16614 <_sbrk+0x20>)
   165f8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   165fa:	18c2      	adds	r2, r0, r3
   165fc:	4806      	ldr	r0, [pc, #24]	; (16618 <_sbrk+0x24>)
   165fe:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   16602:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   16606:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   16608:	bf2e      	itee	cs
   1660a:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1660e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   16610:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   16612:	bd10      	pop	{r4, pc}
   16614:	2000df78 	.word	0x2000df78
   16618:	20014600 	.word	0x20014600

0001661c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   1661c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1661e:	211d      	movs	r1, #29
   16620:	4804      	ldr	r0, [pc, #16]	; (16634 <__chk_fail+0x18>)
   16622:	f7ff ffcf 	bl	165c4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   16626:	4040      	eors	r0, r0
   16628:	f380 8811 	msr	BASEPRI, r0
   1662c:	f04f 0003 	mov.w	r0, #3
   16630:	df02      	svc	2
	CODE_UNREACHABLE;
   16632:	bf00      	nop
   16634:	0002dac0 	.word	0x0002dac0

00016638 <k_mutex_unlock.constprop.0>:
   16638:	4801      	ldr	r0, [pc, #4]	; (16640 <k_mutex_unlock.constprop.0+0x8>)
   1663a:	f00c be67 	b.w	2330c <z_impl_k_mutex_unlock>
   1663e:	bf00      	nop
   16640:	2000c9e8 	.word	0x2000c9e8

00016644 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   16644:	4602      	mov	r2, r0
   16646:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   16648:	4801      	ldr	r0, [pc, #4]	; (16650 <k_mutex_lock.constprop.0+0xc>)
   1664a:	f00c bde1 	b.w	23210 <z_impl_k_mutex_lock>
   1664e:	bf00      	nop
   16650:	2000c9e8 	.word	0x2000c9e8

00016654 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   16654:	b538      	push	{r3, r4, r5, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   16656:	f04f 30ff 	mov.w	r0, #4294967295
   1665a:	f04f 31ff 	mov.w	r1, #4294967295
   1665e:	f7ff fff1 	bl	16644 <k_mutex_lock.constprop.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   16662:	4c0a      	ldr	r4, [pc, #40]	; (1668c <net_if_init+0x38>)
   16664:	4d0a      	ldr	r5, [pc, #40]	; (16690 <net_if_init+0x3c>)
   16666:	42ac      	cmp	r4, r5
   16668:	4620      	mov	r0, r4
   1666a:	d303      	bcc.n	16674 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1666c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
   16670:	f7ff bfe2 	b.w	16638 <k_mutex_unlock.constprop.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   16674:	6803      	ldr	r3, [r0, #0]
   16676:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   16678:	681b      	ldr	r3, [r3, #0]
   1667a:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1667c:	2b00      	cmp	r3, #0
   1667e:	d0f2      	beq.n	16666 <net_if_init+0x12>
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	2b00      	cmp	r3, #0
   16684:	d0ef      	beq.n	16666 <net_if_init+0x12>
	api->init(iface);
   16686:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   16688:	e7ed      	b.n	16666 <net_if_init+0x12>
   1668a:	bf00      	nop
   1668c:	2000caf8 	.word	0x2000caf8
   16690:	2000cafc 	.word	0x2000cafc

00016694 <net_if_post_init>:

void net_if_post_init(void)
{
   16694:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   16696:	4c07      	ldr	r4, [pc, #28]	; (166b4 <net_if_post_init+0x20>)
   16698:	4d07      	ldr	r5, [pc, #28]	; (166b8 <net_if_post_init+0x24>)
   1669a:	42ac      	cmp	r4, r5
   1669c:	d300      	bcc.n	166a0 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1669e:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   166a0:	2103      	movs	r1, #3
   166a2:	4620      	mov	r0, r4
   166a4:	f010 fe2d 	bl	27302 <net_if_flag_is_set>
   166a8:	b910      	cbnz	r0, 166b0 <net_if_post_init+0x1c>
			net_if_up(iface);
   166aa:	4620      	mov	r0, r4
   166ac:	f010 fe33 	bl	27316 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   166b0:	3404      	adds	r4, #4
   166b2:	e7f2      	b.n	1669a <net_if_post_init+0x6>
   166b4:	2000caf8 	.word	0x2000caf8
   166b8:	2000cafc 	.word	0x2000cafc

000166bc <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   166bc:	2300      	movs	r3, #0
{
   166be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   166c2:	2802      	cmp	r0, #2
{
   166c4:	b089      	sub	sp, #36	; 0x24
   166c6:	4607      	mov	r7, r0
   166c8:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   166ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   166ce:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   166d0:	d13e      	bne.n	16750 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   166d2:	a806      	add	r0, sp, #24
   166d4:	9105      	str	r1, [sp, #20]
   166d6:	4601      	mov	r1, r0
{
   166d8:	461a      	mov	r2, r3
   166da:	e006      	b.n	166ea <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   166dc:	780c      	ldrb	r4, [r1, #0]
   166de:	3201      	adds	r2, #1
   166e0:	3401      	adds	r4, #1
   166e2:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   166e4:	b2d4      	uxtb	r4, r2
   166e6:	2c07      	cmp	r4, #7
   166e8:	d804      	bhi.n	166f4 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   166ea:	9c04      	ldr	r4, [sp, #16]
   166ec:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   166f0:	2c00      	cmp	r4, #0
   166f2:	d0f3      	beq.n	166dc <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   166f4:	3301      	adds	r3, #1
   166f6:	2b08      	cmp	r3, #8
   166f8:	f101 0101 	add.w	r1, r1, #1
   166fc:	d1ec      	bne.n	166d8 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   166fe:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   16702:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   16706:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   16708:	f810 2b01 	ldrb.w	r2, [r0], #1
   1670c:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   1670e:	bf88      	it	hi
   16710:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   16714:	f103 0301 	add.w	r3, r3, #1
   16718:	b2db      	uxtb	r3, r3
				pos = i;
   1671a:	bf88      	it	hi
   1671c:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   1671e:	2b08      	cmp	r3, #8
   16720:	d1f2      	bne.n	16708 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   16722:	469b      	mov	fp, r3
   16724:	f1b9 0f01 	cmp.w	r9, #1
   16728:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1672c:	bf08      	it	eq
   1672e:	f04f 38ff 	moveq.w	r8, #4294967295
   16732:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   16734:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   16736:	4634      	mov	r4, r6
   16738:	460d      	mov	r5, r1
   1673a:	455d      	cmp	r5, fp
   1673c:	db17      	blt.n	1676e <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   1673e:	42b4      	cmp	r4, r6
   16740:	d008      	beq.n	16754 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   16742:	2300      	movs	r3, #0
   16744:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   16746:	bf0c      	ite	eq
   16748:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   1674c:	7023      	strbne	r3, [r4, #0]
   1674e:	e002      	b.n	16756 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   16750:	2801      	cmp	r0, #1
   16752:	d004      	beq.n	1675e <z_impl_net_addr_ntop+0xa2>
		return NULL;
   16754:	2600      	movs	r6, #0
	}

	return dst;
}
   16756:	4630      	mov	r0, r6
   16758:	b009      	add	sp, #36	; 0x24
   1675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1675e:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   16760:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   16764:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   16768:	4681      	mov	r9, r0
		delim = '.';
   1676a:	9303      	str	r3, [sp, #12]
   1676c:	e7e2      	b.n	16734 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   1676e:	f1bb 0f04 	cmp.w	fp, #4
   16772:	d13b      	bne.n	167ec <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   16774:	9b04      	ldr	r3, [sp, #16]
   16776:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   16778:	b94a      	cbnz	r2, 1678e <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   1677a:	2330      	movs	r3, #48	; 0x30
   1677c:	4620      	mov	r0, r4
   1677e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   16782:	9b03      	ldr	r3, [sp, #12]
   16784:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   16786:	3501      	adds	r5, #1
   16788:	4604      	mov	r4, r0
   1678a:	b2ed      	uxtb	r5, r5
   1678c:	e7d5      	b.n	1673a <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   1678e:	f04f 0e09 	mov.w	lr, #9
   16792:	f04f 0a00 	mov.w	sl, #0
   16796:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1679a:	483a      	ldr	r0, [pc, #232]	; (16884 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   1679c:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   167a0:	45f2      	cmp	sl, lr
		value = value % divisor;
   167a2:	fbbc f2f0 	udiv	r2, ip, r0
   167a6:	fb00 c212 	mls	r2, r0, r2, ip
   167aa:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   167ac:	dc01      	bgt.n	167b2 <z_impl_net_addr_ntop+0xf6>
   167ae:	4584      	cmp	ip, r0
   167b0:	d308      	bcc.n	167c4 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   167b2:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   167b6:	46f2      	mov	sl, lr
   167b8:	9b02      	ldr	r3, [sp, #8]
   167ba:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   167be:	f803 cb01 	strb.w	ip, [r3], #1
   167c2:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   167c4:	220a      	movs	r2, #10
   167c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   167ca:	f1be 3fff 	cmp.w	lr, #4294967295
   167ce:	fbb0 f0f2 	udiv	r0, r0, r2
   167d2:	d1e3      	bne.n	1679c <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   167d4:	f04f 0200 	mov.w	r2, #0
   167d8:	9b02      	ldr	r3, [sp, #8]
   167da:	701a      	strb	r2, [r3, #0]
	return buf - start;
   167dc:	1b1b      	subs	r3, r3, r4
			ptr += l;
   167de:	b2da      	uxtb	r2, r3
   167e0:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   167e4:	1c58      	adds	r0, r3, #1
   167e6:	9b03      	ldr	r3, [sp, #12]
   167e8:	54a3      	strb	r3, [r4, r2]
			continue;
   167ea:	e7cc      	b.n	16786 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   167ec:	45a8      	cmp	r8, r5
   167ee:	d110      	bne.n	16812 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   167f0:	b911      	cbnz	r1, 167f8 <z_impl_net_addr_ntop+0x13c>
   167f2:	f1b8 0f00 	cmp.w	r8, #0
   167f6:	d102      	bne.n	167fe <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   167f8:	233a      	movs	r3, #58	; 0x3a
   167fa:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   167fe:	233a      	movs	r3, #58	; 0x3a
   16800:	4620      	mov	r0, r4
   16802:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   16806:	f109 33ff 	add.w	r3, r9, #4294967295
   1680a:	441d      	add	r5, r3
			needcolon = false;
   1680c:	2100      	movs	r1, #0
			i += longest - 1U;
   1680e:	b2ed      	uxtb	r5, r5
			continue;
   16810:	e7b9      	b.n	16786 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   16812:	b111      	cbz	r1, 1681a <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   16814:	233a      	movs	r3, #58	; 0x3a
   16816:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1681a:	9b05      	ldr	r3, [sp, #20]
   1681c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   16820:	0219      	lsls	r1, r3, #8
   16822:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   16826:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1682a:	b20a      	sxth	r2, r1
		bh = value >> 8;
   1682c:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   16830:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   16834:	d016      	beq.n	16864 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   16836:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   16838:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1683a:	d90b      	bls.n	16854 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1683c:	2300      	movs	r3, #0
   1683e:	2261      	movs	r2, #97	; 0x61
   16840:	4620      	mov	r0, r4
   16842:	f010 fda3 	bl	2738c <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   16846:	2301      	movs	r3, #1
   16848:	2261      	movs	r2, #97	; 0x61
   1684a:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1684c:	f010 fd9e 	bl	2738c <net_byte_to_hex>
		needcolon = true;
   16850:	2101      	movs	r1, #1
   16852:	e798      	b.n	16786 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   16854:	b25b      	sxtb	r3, r3
   16856:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   16858:	bf94      	ite	ls
   1685a:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   1685c:	3357      	addhi	r3, #87	; 0x57
   1685e:	1c60      	adds	r0, r4, #1
   16860:	7023      	strb	r3, [r4, #0]
   16862:	e7f0      	b.n	16846 <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   16864:	f1ba 0f0f 	cmp.w	sl, #15
   16868:	d903      	bls.n	16872 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1686a:	2261      	movs	r2, #97	; 0x61
   1686c:	4651      	mov	r1, sl
   1686e:	4620      	mov	r0, r4
   16870:	e7ec      	b.n	1684c <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   16872:	b253      	sxtb	r3, r2
   16874:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   16878:	bf94      	ite	ls
   1687a:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1687c:	3357      	addhi	r3, #87	; 0x57
   1687e:	1c60      	adds	r0, r4, #1
   16880:	7023      	strb	r3, [r4, #0]
   16882:	e7e5      	b.n	16850 <z_impl_net_addr_ntop+0x194>
   16884:	3b9aca00 	.word	0x3b9aca00

00016888 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   16888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1688c:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1688e:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
	start = buf->cur;

	MQTT_HEXDUMP_TRC(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   16892:	4b3b      	ldr	r3, [pc, #236]	; (16980 <connect_request_encode+0xf8>)
   16894:	4a3b      	ldr	r2, [pc, #236]	; (16984 <connect_request_encode+0xfc>)
{
   16896:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   16898:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1689c:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1689e:	2804      	cmp	r0, #4
   168a0:	bf0c      	ite	eq
   168a2:	4610      	moveq	r0, r2
   168a4:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   168a6:	600d      	str	r5, [r1, #0]
{
   168a8:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   168aa:	f010 ff14 	bl	276d6 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   168ae:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   168b2:	4603      	mov	r3, r0
   168b4:	b938      	cbnz	r0, 168c6 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   168b6:	e9d8 2000 	ldrd	r2, r0, [r8]
   168ba:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   168bc:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   168c0:	d104      	bne.n	168cc <connect_request_encode+0x44>
		return -ENOMEM;
   168c2:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   168c6:	4618      	mov	r0, r3
   168c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   168cc:	1c50      	adds	r0, r2, #1
   168ce:	f8c8 0000 	str.w	r0, [r8]
   168d2:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   168d4:	e9d8 6200 	ldrd	r6, r2, [r8]
   168d8:	4296      	cmp	r6, r2
   168da:	d0f2      	beq.n	168c2 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   168dc:	1c72      	adds	r2, r6, #1
   168de:	f8c8 2000 	str.w	r2, [r8]
   168e2:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   168e4:	4641      	mov	r1, r8
   168e6:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
   168ea:	f010 fee2 	bl	276b2 <pack_uint16>
	if (err_code != 0) {
   168ee:	4603      	mov	r3, r0
   168f0:	2800      	cmp	r0, #0
   168f2:	d1e8      	bne.n	168c6 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   168f4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   168f8:	f010 feed 	bl	276d6 <pack_utf8_str>
	if (err_code != 0) {
   168fc:	4603      	mov	r3, r0
   168fe:	2800      	cmp	r0, #0
   16900:	d1e1      	bne.n	168c6 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   16902:	6e38      	ldr	r0, [r7, #96]	; 0x60
	uint8_t connect_flags = client->clean_session << 1;
   16904:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   16906:	b1d8      	cbz	r0, 16940 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   16908:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1690c:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   16910:	f003 0301 	and.w	r3, r3, #1
   16914:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   16918:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1691a:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1691c:	00db      	lsls	r3, r3, #3
   1691e:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   16922:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   16924:	f010 fed7 	bl	276d6 <pack_utf8_str>
		if (err_code != 0) {
   16928:	4603      	mov	r3, r0
   1692a:	2800      	cmp	r0, #0
   1692c:	d1cb      	bne.n	168c6 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1692e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
			err_code = pack_utf8_str(client->will_message, buf);
   16930:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   16932:	b30b      	cbz	r3, 16978 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   16934:	4618      	mov	r0, r3
   16936:	f010 fece 	bl	276d6 <pack_utf8_str>
			if (err_code != 0) {
   1693a:	4603      	mov	r3, r0
   1693c:	2800      	cmp	r0, #0
   1693e:	d1c2      	bne.n	168c6 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   16940:	6db8      	ldr	r0, [r7, #88]	; 0x58
   16942:	b138      	cbz	r0, 16954 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   16944:	4641      	mov	r1, r8
   16946:	f010 fec6 	bl	276d6 <pack_utf8_str>
		if (err_code != 0) {
   1694a:	4603      	mov	r3, r0
   1694c:	2800      	cmp	r0, #0
   1694e:	d1ba      	bne.n	168c6 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   16950:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   16954:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   16956:	b138      	cbz	r0, 16968 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   16958:	4641      	mov	r1, r8
   1695a:	f010 febc 	bl	276d6 <pack_utf8_str>
		if (err_code != 0) {
   1695e:	4603      	mov	r3, r0
   16960:	2800      	cmp	r0, #0
   16962:	d1b0      	bne.n	168c6 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   16964:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   16968:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1696a:	4642      	mov	r2, r8
   1696c:	4629      	mov	r1, r5
}
   1696e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   16972:	2010      	movs	r0, #16
   16974:	f010 beca 	b.w	2770c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   16978:	f010 fe9b 	bl	276b2 <pack_uint16>
   1697c:	e7dd      	b.n	1693a <connect_request_encode+0xb2>
   1697e:	bf00      	nop
   16980:	0002c68c 	.word	0x0002c68c
   16984:	0002c694 	.word	0x0002c694

00016988 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   16988:	e9d0 2300 	ldrd	r2, r3, [r0]
   1698c:	1a9b      	subs	r3, r3, r2
   1698e:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16990:	bf81      	itttt	hi
   16992:	4b05      	ldrhi	r3, [pc, #20]	; (169a8 <disconnect_encode+0x20>)
   16994:	881b      	ldrhhi	r3, [r3, #0]
   16996:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   16998:	6803      	ldrhi	r3, [r0, #0]
   1699a:	bf83      	ittte	hi
   1699c:	3302      	addhi	r3, #2
   1699e:	6043      	strhi	r3, [r0, #4]

	return 0;
   169a0:	2000      	movhi	r0, #0
		return -ENOMEM;
   169a2:	f06f 000b 	mvnls.w	r0, #11
}
   169a6:	4770      	bx	lr
   169a8:	0002daf5 	.word	0x0002daf5

000169ac <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   169ac:	e9d0 2300 	ldrd	r2, r3, [r0]
   169b0:	1a9b      	subs	r3, r3, r2
   169b2:	2b01      	cmp	r3, #1
   169b4:	bf81      	itttt	hi
   169b6:	4b05      	ldrhi	r3, [pc, #20]	; (169cc <ping_request_encode+0x20>)
   169b8:	881b      	ldrhhi	r3, [r3, #0]
   169ba:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   169bc:	6803      	ldrhi	r3, [r0, #0]
   169be:	bf83      	ittte	hi
   169c0:	3302      	addhi	r3, #2
   169c2:	6043      	strhi	r3, [r0, #4]

	return 0;
   169c4:	2000      	movhi	r0, #0
		return -ENOMEM;
   169c6:	f06f 000b 	mvnls.w	r0, #11
}
   169ca:	4770      	bx	lr
   169cc:	0002daf7 	.word	0x0002daf7

000169d0 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   169d0:	2314      	movs	r3, #20
   169d2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   169d6:	4353      	muls	r3, r2
   169d8:	4a01      	ldr	r2, [pc, #4]	; (169e0 <mqtt_transport_connect+0x10>)
   169da:	58d3      	ldr	r3, [r2, r3]
   169dc:	4718      	bx	r3
   169de:	bf00      	nop
   169e0:	0002c69c 	.word	0x0002c69c

000169e4 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   169e4:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   169e6:	2514      	movs	r5, #20
   169e8:	4c03      	ldr	r4, [pc, #12]	; (169f8 <mqtt_transport_write+0x14>)
   169ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   169ee:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   169f2:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   169f4:	685b      	ldr	r3, [r3, #4]
   169f6:	4718      	bx	r3
   169f8:	0002c69c 	.word	0x0002c69c

000169fc <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   169fc:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   169fe:	2414      	movs	r4, #20
   16a00:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   16a04:	4a03      	ldr	r2, [pc, #12]	; (16a14 <mqtt_transport_write_msg+0x18>)
   16a06:	fb04 2303 	mla	r3, r4, r3, r2
}
   16a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   16a0e:	689b      	ldr	r3, [r3, #8]
   16a10:	4718      	bx	r3
   16a12:	bf00      	nop
   16a14:	0002c69c 	.word	0x0002c69c

00016a18 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   16a18:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   16a1a:	2614      	movs	r6, #20
   16a1c:	4d04      	ldr	r5, [pc, #16]	; (16a30 <mqtt_transport_read+0x18>)
   16a1e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   16a22:	fb06 5404 	mla	r4, r6, r4, r5
   16a26:	68e4      	ldr	r4, [r4, #12]
   16a28:	46a4      	mov	ip, r4
							 shall_block);
}
   16a2a:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   16a2c:	4760      	bx	ip
   16a2e:	bf00      	nop
   16a30:	0002c69c 	.word	0x0002c69c

00016a34 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   16a34:	2114      	movs	r1, #20
   16a36:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   16a3a:	4a02      	ldr	r2, [pc, #8]	; (16a44 <mqtt_transport_disconnect+0x10>)
   16a3c:	fb01 2303 	mla	r3, r1, r3, r2
   16a40:	691b      	ldr	r3, [r3, #16]
   16a42:	4718      	bx	r3
   16a44:	0002c69c 	.word	0x0002c69c

00016a48 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16a48:	b570      	push	{r4, r5, r6, lr}
   16a4a:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   16a4c:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   16a4e:	480d      	ldr	r0, [pc, #52]	; (16a84 <onoff_stop+0x3c>)
{
   16a50:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   16a52:	1a23      	subs	r3, r4, r0
   16a54:	109a      	asrs	r2, r3, #2
   16a56:	4b0c      	ldr	r3, [pc, #48]	; (16a88 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   16a58:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   16a5a:	4353      	muls	r3, r2
   16a5c:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   16a5e:	435d      	muls	r5, r3
   16a60:	f105 0340 	add.w	r3, r5, #64	; 0x40
   16a64:	4418      	add	r0, r3
   16a66:	f011 fc47 	bl	282f8 <set_off_state>
	if (err < 0) {
   16a6a:	1e01      	subs	r1, r0, #0
   16a6c:	db04      	blt.n	16a78 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   16a6e:	4b07      	ldr	r3, [pc, #28]	; (16a8c <onoff_stop+0x44>)
   16a70:	442b      	add	r3, r5
   16a72:	685b      	ldr	r3, [r3, #4]
   16a74:	4798      	blx	r3
	return 0;
   16a76:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   16a78:	4620      	mov	r0, r4
   16a7a:	4633      	mov	r3, r6
}
   16a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   16a80:	4718      	bx	r3
   16a82:	bf00      	nop
   16a84:	2000df8c 	.word	0x2000df8c
   16a88:	b6db6db7 	.word	0xb6db6db7
   16a8c:	0002c6dc 	.word	0x0002c6dc

00016a90 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   16a94:	4c0f      	ldr	r4, [pc, #60]	; (16ad4 <onoff_start+0x44>)
   16a96:	4d10      	ldr	r5, [pc, #64]	; (16ad8 <onoff_start+0x48>)
   16a98:	1b03      	subs	r3, r0, r4
   16a9a:	109b      	asrs	r3, r3, #2
   16a9c:	435d      	muls	r5, r3
   16a9e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   16aa0:	250c      	movs	r5, #12
   16aa2:	435d      	muls	r5, r3
{
   16aa4:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   16aa6:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   16aaa:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   16aac:	4420      	add	r0, r4
   16aae:	2140      	movs	r1, #64	; 0x40
   16ab0:	f011 fc3b 	bl	2832a <set_starting_state>
	if (err < 0) {
   16ab4:	1e01      	subs	r1, r0, #0
   16ab6:	db08      	blt.n	16aca <onoff_start+0x3a>
	subdata->cb = cb;
   16ab8:	4b08      	ldr	r3, [pc, #32]	; (16adc <onoff_start+0x4c>)
   16aba:	442c      	add	r4, r5
	subdata->user_data = user_data;
   16abc:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   16ac0:	4b07      	ldr	r3, [pc, #28]	; (16ae0 <onoff_start+0x50>)
   16ac2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   16ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   16ac8:	4718      	bx	r3
		notify(mgr, err);
   16aca:	4638      	mov	r0, r7
   16acc:	4633      	mov	r3, r6
}
   16ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   16ad2:	4718      	bx	r3
   16ad4:	2000df8c 	.word	0x2000df8c
   16ad8:	b6db6db7 	.word	0xb6db6db7
   16adc:	0002838d 	.word	0x0002838d
   16ae0:	0002c6dc 	.word	0x0002c6dc

00016ae4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   16ae4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16ae6:	2200      	movs	r2, #0
   16ae8:	2101      	movs	r1, #1
{
   16aea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16aec:	2005      	movs	r0, #5
   16aee:	f7fe fff5 	bl	15adc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   16af2:	2005      	movs	r0, #5
   16af4:	f7fe ffd4 	bl	15aa0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16af8:	480f      	ldr	r0, [pc, #60]	; (16b38 <clk_init+0x54>)
   16afa:	f008 f9e3 	bl	1eec4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   16afe:	4b0f      	ldr	r3, [pc, #60]	; (16b3c <clk_init+0x58>)
   16b00:	4298      	cmp	r0, r3
   16b02:	d115      	bne.n	16b30 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   16b04:	f012 fd99 	bl	2963a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   16b08:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   16b0a:	490d      	ldr	r1, [pc, #52]	; (16b40 <clk_init+0x5c>)
   16b0c:	4630      	mov	r0, r6
   16b0e:	f00f fa6c 	bl	25fea <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   16b12:	2800      	cmp	r0, #0
   16b14:	db0b      	blt.n	16b2e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16b16:	2501      	movs	r5, #1
   16b18:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   16b1a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16b1c:	4908      	ldr	r1, [pc, #32]	; (16b40 <clk_init+0x5c>)
   16b1e:	f104 001c 	add.w	r0, r4, #28
   16b22:	f00f fa62 	bl	25fea <onoff_manager_init>
		if (err < 0) {
   16b26:	2800      	cmp	r0, #0
   16b28:	db01      	blt.n	16b2e <clk_init+0x4a>
	}

	return 0;
   16b2a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16b2c:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   16b2e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   16b30:	f06f 0004 	mvn.w	r0, #4
   16b34:	e7fb      	b.n	16b2e <clk_init+0x4a>
   16b36:	bf00      	nop
   16b38:	00016b81 	.word	0x00016b81
   16b3c:	0bad0000 	.word	0x0bad0000
   16b40:	0002c6f4 	.word	0x0002c6f4

00016b44 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   16b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   16b46:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   16b48:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   16b4a:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   16b4c:	434b      	muls	r3, r1
   16b4e:	480a      	ldr	r0, [pc, #40]	; (16b78 <clkstarted_handle.constprop.0+0x34>)
   16b50:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   16b52:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   16b54:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   16b58:	4418      	add	r0, r3
	sub_data->cb = NULL;
   16b5a:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   16b5c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   16b5e:	f011 fc02 	bl	28366 <set_on_state>
	if (callback) {
   16b62:	b135      	cbz	r5, 16b72 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16b64:	462b      	mov	r3, r5
   16b66:	9a01      	ldr	r2, [sp, #4]
   16b68:	4804      	ldr	r0, [pc, #16]	; (16b7c <clkstarted_handle.constprop.0+0x38>)
}
   16b6a:	b002      	add	sp, #8
   16b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   16b70:	4718      	bx	r3
}
   16b72:	b002      	add	sp, #8
   16b74:	bd70      	pop	{r4, r5, r6, pc}
   16b76:	bf00      	nop
   16b78:	2000df8c 	.word	0x2000df8c
   16b7c:	0002c078 	.word	0x0002c078

00016b80 <clock_event_handler>:
	switch (event) {
   16b80:	b110      	cbz	r0, 16b88 <clock_event_handler+0x8>
   16b82:	2801      	cmp	r0, #1
   16b84:	d004      	beq.n	16b90 <clock_event_handler+0x10>
   16b86:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   16b88:	4b03      	ldr	r3, [pc, #12]	; (16b98 <clock_event_handler+0x18>)
   16b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16b8c:	075b      	lsls	r3, r3, #29
   16b8e:	d101      	bne.n	16b94 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   16b90:	f7ff bfd8 	b.w	16b44 <clkstarted_handle.constprop.0>
}
   16b94:	4770      	bx	lr
   16b96:	bf00      	nop
   16b98:	2000df8c 	.word	0x2000df8c

00016b9c <generic_hfclk_start>:
{
   16b9c:	b508      	push	{r3, lr}
	__asm__ volatile(
   16b9e:	f04f 0320 	mov.w	r3, #32
   16ba2:	f3ef 8111 	mrs	r1, BASEPRI
   16ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   16baa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   16bae:	4a11      	ldr	r2, [pc, #68]	; (16bf4 <generic_hfclk_start+0x58>)
   16bb0:	6813      	ldr	r3, [r2, #0]
   16bb2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   16bb6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   16bba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   16bbc:	d00b      	beq.n	16bd6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16bbe:	4a0e      	ldr	r2, [pc, #56]	; (16bf8 <generic_hfclk_start+0x5c>)
   16bc0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16bc4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   16bc8:	f013 0301 	ands.w	r3, r3, #1
   16bcc:	d003      	beq.n	16bd6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   16bce:	480b      	ldr	r0, [pc, #44]	; (16bfc <generic_hfclk_start+0x60>)
   16bd0:	f011 fbc9 	bl	28366 <set_on_state>
			already_started = true;
   16bd4:	2301      	movs	r3, #1
	__asm__ volatile(
   16bd6:	f381 8811 	msr	BASEPRI, r1
   16bda:	f3bf 8f6f 	isb	sy
	if (already_started) {
   16bde:	b123      	cbz	r3, 16bea <generic_hfclk_start+0x4e>
}
   16be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   16be4:	2000      	movs	r0, #0
   16be6:	f7ff bfad 	b.w	16b44 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   16bea:	2001      	movs	r0, #1
}
   16bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16bf0:	f008 b978 	b.w	1eee4 <nrfx_clock_start>
   16bf4:	2000dfdc 	.word	0x2000dfdc
   16bf8:	40005000 	.word	0x40005000
   16bfc:	2000dfcc 	.word	0x2000dfcc

00016c00 <generic_hfclk_stop>:
   16c00:	4b07      	ldr	r3, [pc, #28]	; (16c20 <generic_hfclk_stop+0x20>)
   16c02:	e8d3 2fef 	ldaex	r2, [r3]
   16c06:	f022 0102 	bic.w	r1, r2, #2
   16c0a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   16c0e:	2800      	cmp	r0, #0
   16c10:	d1f7      	bne.n	16c02 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   16c12:	07d3      	lsls	r3, r2, #31
   16c14:	d402      	bmi.n	16c1c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   16c16:	2001      	movs	r0, #1
   16c18:	f008 b996 	b.w	1ef48 <nrfx_clock_stop>
}
   16c1c:	4770      	bx	lr
   16c1e:	bf00      	nop
   16c20:	2000dfdc 	.word	0x2000dfdc

00016c24 <api_blocking_start>:
{
   16c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16c26:	2200      	movs	r2, #0
   16c28:	2301      	movs	r3, #1
   16c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16c2e:	ab04      	add	r3, sp, #16
   16c30:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16c34:	4a09      	ldr	r2, [pc, #36]	; (16c5c <api_blocking_start+0x38>)
   16c36:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16c38:	f8cd d000 	str.w	sp, [sp]
   16c3c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16c40:	f011 fbcb 	bl	283da <api_start>
	if (err < 0) {
   16c44:	2800      	cmp	r0, #0
   16c46:	db05      	blt.n	16c54 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   16c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   16c4c:	2300      	movs	r3, #0
   16c4e:	4668      	mov	r0, sp
   16c50:	f00c fbfc 	bl	2344c <z_impl_k_sem_take>
}
   16c54:	b007      	add	sp, #28
   16c56:	f85d fb04 	ldr.w	pc, [sp], #4
   16c5a:	bf00      	nop
   16c5c:	000283ad 	.word	0x000283ad

00016c60 <z_nrf_clock_control_lf_on>:
{
   16c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16c64:	2201      	movs	r2, #1
   16c66:	4607      	mov	r7, r0
   16c68:	4936      	ldr	r1, [pc, #216]	; (16d44 <z_nrf_clock_control_lf_on+0xe4>)
   16c6a:	e8d1 3fef 	ldaex	r3, [r1]
   16c6e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   16c72:	2800      	cmp	r0, #0
   16c74:	d1f9      	bne.n	16c6a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   16c76:	b933      	cbnz	r3, 16c86 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   16c78:	4933      	ldr	r1, [pc, #204]	; (16d48 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   16c7a:	4834      	ldr	r0, [pc, #208]	; (16d4c <z_nrf_clock_control_lf_on+0xec>)
   16c7c:	604b      	str	r3, [r1, #4]
   16c7e:	60cb      	str	r3, [r1, #12]
   16c80:	608a      	str	r2, [r1, #8]
   16c82:	f00f f9c5 	bl	26010 <onoff_request>
	switch (start_mode) {
   16c86:	1e7b      	subs	r3, r7, #1
   16c88:	2b01      	cmp	r3, #1
   16c8a:	d82e      	bhi.n	16cea <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16c8c:	2f01      	cmp	r7, #1
   16c8e:	d106      	bne.n	16c9e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   16c90:	4b2f      	ldr	r3, [pc, #188]	; (16d50 <z_nrf_clock_control_lf_on+0xf0>)
   16c92:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16c96:	f003 0303 	and.w	r3, r3, #3
   16c9a:	2b02      	cmp	r3, #2
   16c9c:	d025      	beq.n	16cea <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16c9e:	f013 fc87 	bl	2a5b0 <k_is_in_isr>
   16ca2:	4604      	mov	r4, r0
   16ca4:	b918      	cbnz	r0, 16cae <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   16ca6:	4b2b      	ldr	r3, [pc, #172]	; (16d54 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   16ca8:	781b      	ldrb	r3, [r3, #0]
   16caa:	2b00      	cmp	r3, #0
   16cac:	d144      	bne.n	16d38 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   16cae:	f04f 0320 	mov.w	r3, #32
   16cb2:	f3ef 8611 	mrs	r6, BASEPRI
   16cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   16cba:	f3bf 8f6f 	isb	sy
   16cbe:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16cc0:	4d23      	ldr	r5, [pc, #140]	; (16d50 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16cc2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 16d60 <z_nrf_clock_control_lf_on+0x100>
   16cc6:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16cc8:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16ccc:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   16cd0:	03d2      	lsls	r2, r2, #15
   16cd2:	d50c      	bpl.n	16cee <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   16cd4:	f003 0303 	and.w	r3, r3, #3
   16cd8:	2b02      	cmp	r3, #2
   16cda:	d001      	beq.n	16ce0 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   16cdc:	2f01      	cmp	r7, #1
   16cde:	d106      	bne.n	16cee <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   16ce0:	b334      	cbz	r4, 16d30 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   16ce2:	f386 8811 	msr	BASEPRI, r6
   16ce6:	f3bf 8f6f 	isb	sy
}
   16cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   16cee:	b1d4      	cbz	r4, 16d26 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   16cf0:	4630      	mov	r0, r6
   16cf2:	f7fe fe5b 	bl	159ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   16cf6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   16cfa:	b2db      	uxtb	r3, r3
   16cfc:	2b01      	cmp	r3, #1
   16cfe:	d1e3      	bne.n	16cc8 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16d00:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   16d04:	2a00      	cmp	r2, #0
   16d06:	d0df      	beq.n	16cc8 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d08:	2200      	movs	r2, #0
   16d0a:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   16d0e:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   16d12:	2202      	movs	r2, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16d14:	2120      	movs	r1, #32
   16d16:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   16d1a:	4a0f      	ldr	r2, [pc, #60]	; (16d58 <z_nrf_clock_control_lf_on+0xf8>)
   16d1c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d20:	4a0e      	ldr	r2, [pc, #56]	; (16d5c <z_nrf_clock_control_lf_on+0xfc>)
   16d22:	6013      	str	r3, [r2, #0]
}
   16d24:	e7d0      	b.n	16cc8 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   16d26:	2100      	movs	r1, #0
   16d28:	2021      	movs	r0, #33	; 0x21
   16d2a:	f00d f875 	bl	23e18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16d2e:	e7e2      	b.n	16cf6 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   16d30:	2302      	movs	r3, #2
   16d32:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   16d36:	e7d8      	b.n	16cea <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   16d38:	2202      	movs	r2, #2
   16d3a:	4b05      	ldr	r3, [pc, #20]	; (16d50 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   16d3c:	4606      	mov	r6, r0
   16d3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   16d42:	e7bd      	b.n	16cc0 <z_nrf_clock_control_lf_on+0x60>
   16d44:	2000dfe0 	.word	0x2000dfe0
   16d48:	2000df7c 	.word	0x2000df7c
   16d4c:	2000dfa8 	.word	0x2000dfa8
   16d50:	40005000 	.word	0x40005000
   16d54:	2000f391 	.word	0x2000f391
   16d58:	e000e100 	.word	0xe000e100
   16d5c:	40005008 	.word	0x40005008
   16d60:	40005104 	.word	0x40005104

00016d64 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   16d64:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   16d66:	4808      	ldr	r0, [pc, #32]	; (16d88 <uart_console_init+0x24>)
   16d68:	4b08      	ldr	r3, [pc, #32]	; (16d8c <uart_console_init+0x28>)
   16d6a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   16d6c:	f013 fb9f 	bl	2a4ae <z_device_ready>
   16d70:	b138      	cbz	r0, 16d82 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   16d72:	4807      	ldr	r0, [pc, #28]	; (16d90 <uart_console_init+0x2c>)
   16d74:	f7ff fc20 	bl	165b8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16d78:	4805      	ldr	r0, [pc, #20]	; (16d90 <uart_console_init+0x2c>)
   16d7a:	f7fc fc03 	bl	13584 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   16d7e:	2000      	movs	r0, #0
}
   16d80:	bd08      	pop	{r3, pc}
		return -ENODEV;
   16d82:	f06f 0012 	mvn.w	r0, #18
   16d86:	e7fb      	b.n	16d80 <uart_console_init+0x1c>
   16d88:	0002c0c0 	.word	0x0002c0c0
   16d8c:	2000dfe4 	.word	0x2000dfe4
   16d90:	00016d95 	.word	0x00016d95

00016d94 <console_out>:
	if ('\n' == c) {
   16d94:	280a      	cmp	r0, #10
{
   16d96:	b538      	push	{r3, r4, r5, lr}
   16d98:	4604      	mov	r4, r0
   16d9a:	4d07      	ldr	r5, [pc, #28]	; (16db8 <console_out+0x24>)
	if ('\n' == c) {
   16d9c:	d104      	bne.n	16da8 <console_out+0x14>
   16d9e:	6828      	ldr	r0, [r5, #0]
   16da0:	6883      	ldr	r3, [r0, #8]
   16da2:	210d      	movs	r1, #13
   16da4:	685b      	ldr	r3, [r3, #4]
   16da6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   16da8:	6828      	ldr	r0, [r5, #0]
   16daa:	6883      	ldr	r3, [r0, #8]
   16dac:	b2e1      	uxtb	r1, r4
   16dae:	685b      	ldr	r3, [r3, #4]
   16db0:	4798      	blx	r3
}
   16db2:	4620      	mov	r0, r4
   16db4:	bd38      	pop	{r3, r4, r5, pc}
   16db6:	bf00      	nop
   16db8:	2000dfe4 	.word	0x2000dfe4

00016dbc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   16dbc:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16dbe:	6840      	ldr	r0, [r0, #4]
   16dc0:	f001 051f 	and.w	r5, r1, #31
   16dc4:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   16dc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16dca:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   16dce:	b085      	sub	sp, #20
   16dd0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   16dd4:	d104      	bne.n	16de0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   16dd6:	4628      	mov	r0, r5
   16dd8:	f008 fb78 	bl	1f4cc <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   16ddc:	2000      	movs	r0, #0
   16dde:	e02c      	b.n	16e3a <gpio_nrfx_pin_interrupt_configure+0x7e>
	if (mode == GPIO_INT_MODE_LEVEL) {
   16de0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   16de4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   16de8:	d129      	bne.n	16e3e <gpio_nrfx_pin_interrupt_configure+0x82>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   16dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   16dee:	bf0c      	ite	eq
   16df0:	2304      	moveq	r3, #4
   16df2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   16df4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   16df8:	6883      	ldr	r3, [r0, #8]
   16dfa:	fa23 f101 	lsr.w	r1, r3, r1
   16dfe:	07c9      	lsls	r1, r1, #31
   16e00:	d429      	bmi.n	16e56 <gpio_nrfx_pin_interrupt_configure+0x9a>
   16e02:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   16e06:	d126      	bne.n	16e56 <gpio_nrfx_pin_interrupt_configure+0x9a>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16e08:	4a1b      	ldr	r2, [pc, #108]	; (16e78 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   16e0a:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16e0e:	3380      	adds	r3, #128	; 0x80
   16e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16e14:	07db      	lsls	r3, r3, #31
   16e16:	d41e      	bmi.n	16e56 <gpio_nrfx_pin_interrupt_configure+0x9a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16e18:	f10d 0407 	add.w	r4, sp, #7
   16e1c:	4621      	mov	r1, r4
   16e1e:	4628      	mov	r0, r5
   16e20:	f008 fac2 	bl	1f3a8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   16e24:	4b15      	ldr	r3, [pc, #84]	; (16e7c <gpio_nrfx_pin_interrupt_configure+0xc0>)
   16e26:	4298      	cmp	r0, r3
   16e28:	d114      	bne.n	16e54 <gpio_nrfx_pin_interrupt_configure+0x98>
			err = nrfx_gpiote_channel_alloc(&ch);
   16e2a:	4620      	mov	r0, r4
   16e2c:	f008 fb06 	bl	1f43c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   16e30:	4b13      	ldr	r3, [pc, #76]	; (16e80 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   16e32:	4298      	cmp	r0, r3
   16e34:	d00e      	beq.n	16e54 <gpio_nrfx_pin_interrupt_configure+0x98>
				return -ENOMEM;
   16e36:	f06f 000b 	mvn.w	r0, #11
}
   16e3a:	b005      	add	sp, #20
   16e3c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   16e3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   16e42:	d005      	beq.n	16e50 <gpio_nrfx_pin_interrupt_configure+0x94>
   16e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   16e48:	bf0c      	ite	eq
   16e4a:	2302      	moveq	r3, #2
   16e4c:	2301      	movne	r3, #1
   16e4e:	e7d1      	b.n	16df4 <gpio_nrfx_pin_interrupt_configure+0x38>
   16e50:	2303      	movs	r3, #3
   16e52:	e7cf      	b.n	16df4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   16e54:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16e56:	2300      	movs	r3, #0
   16e58:	4628      	mov	r0, r5
   16e5a:	4619      	mov	r1, r3
   16e5c:	aa02      	add	r2, sp, #8
   16e5e:	f008 f963 	bl	1f128 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16e62:	4b07      	ldr	r3, [pc, #28]	; (16e80 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   16e64:	4298      	cmp	r0, r3
   16e66:	d104      	bne.n	16e72 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   16e68:	2101      	movs	r1, #1
   16e6a:	4628      	mov	r0, r5
   16e6c:	f008 faec 	bl	1f448 <nrfx_gpiote_trigger_enable>
   16e70:	e7b4      	b.n	16ddc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   16e72:	f06f 0004 	mvn.w	r0, #4
   16e76:	e7e0      	b.n	16e3a <gpio_nrfx_pin_interrupt_configure+0x7e>
   16e78:	40842500 	.word	0x40842500
   16e7c:	0bad0004 	.word	0x0bad0004
   16e80:	0bad0000 	.word	0x0bad0000

00016e84 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16e84:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   16e86:	f008 fac9 	bl	1f41c <nrfx_gpiote_is_init>
   16e8a:	4604      	mov	r4, r0
   16e8c:	b968      	cbnz	r0, 16eaa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   16e8e:	f008 fa9d 	bl	1f3cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   16e92:	4b08      	ldr	r3, [pc, #32]	; (16eb4 <gpio_nrfx_init+0x30>)
   16e94:	4298      	cmp	r0, r3
   16e96:	d10a      	bne.n	16eae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   16e98:	4621      	mov	r1, r4
   16e9a:	4807      	ldr	r0, [pc, #28]	; (16eb8 <gpio_nrfx_init+0x34>)
   16e9c:	f008 fa7e 	bl	1f39c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16ea0:	4622      	mov	r2, r4
   16ea2:	2105      	movs	r1, #5
   16ea4:	2031      	movs	r0, #49	; 0x31
   16ea6:	f7fe fe19 	bl	15adc <z_arm_irq_priority_set>
		return 0;
   16eaa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   16eac:	bd10      	pop	{r4, pc}
		return -EIO;
   16eae:	f06f 0004 	mvn.w	r0, #4
   16eb2:	e7fb      	b.n	16eac <gpio_nrfx_init+0x28>
   16eb4:	0bad0000 	.word	0x0bad0000
   16eb8:	00016ebd 	.word	0x00016ebd

00016ebc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16ebc:	0943      	lsrs	r3, r0, #5
{
   16ebe:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   16ec0:	d118      	bne.n	16ef4 <nrfx_gpio_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16ec2:	4b0d      	ldr	r3, [pc, #52]	; (16ef8 <nrfx_gpio_handler+0x3c>)
   16ec4:	6859      	ldr	r1, [r3, #4]
   16ec6:	b1a9      	cbz	r1, 16ef4 <nrfx_gpio_handler+0x38>
   16ec8:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
   16eca:	2301      	movs	r3, #1
   16ecc:	2c00      	cmp	r4, #0
   16ece:	bf38      	it	cc
   16ed0:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16ed2:	4e0a      	ldr	r6, [pc, #40]	; (16efc <nrfx_gpio_handler+0x40>)
   16ed4:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
   16ed8:	688a      	ldr	r2, [r1, #8]
   16eda:	402a      	ands	r2, r5
   16edc:	d002      	beq.n	16ee4 <nrfx_gpio_handler+0x28>
			cb->handler(port, cb, cb->pin_mask & pins);
   16ede:	4630      	mov	r0, r6
   16ee0:	684b      	ldr	r3, [r1, #4]
   16ee2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16ee4:	b134      	cbz	r4, 16ef4 <nrfx_gpio_handler+0x38>
	return node->next;
   16ee6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16ee8:	4621      	mov	r1, r4
   16eea:	2b00      	cmp	r3, #0
   16eec:	bf38      	it	cc
   16eee:	2300      	movcc	r3, #0
   16ef0:	461c      	mov	r4, r3
   16ef2:	e7f1      	b.n	16ed8 <nrfx_gpio_handler+0x1c>
}
   16ef4:	bd70      	pop	{r4, r5, r6, pc}
   16ef6:	bf00      	nop
   16ef8:	2000dfe8 	.word	0x2000dfe8
   16efc:	0002c090 	.word	0x0002c090

00016f00 <gpio_nrfx_pin_configure>:
{
   16f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   16f04:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16f06:	f001 051f 	and.w	r5, r1, #31
   16f0a:	7b3b      	ldrb	r3, [r7, #12]
{
   16f0c:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   16f0e:	4614      	mov	r4, r2
{
   16f10:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16f12:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   16f16:	b9ca      	cbnz	r2, 16f4c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   16f18:	a902      	add	r1, sp, #8
   16f1a:	4628      	mov	r0, r5
   16f1c:	f008 fa44 	bl	1f3a8 <nrfx_gpiote_channel_get>
   16f20:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   16f22:	4628      	mov	r0, r5
   16f24:	f008 faf4 	bl	1f510 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   16f28:	4b47      	ldr	r3, [pc, #284]	; (17048 <gpio_nrfx_pin_configure+0x148>)
   16f2a:	4298      	cmp	r0, r3
   16f2c:	d004      	beq.n	16f38 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   16f2e:	f06f 0004 	mvn.w	r0, #4
}
   16f32:	b005      	add	sp, #20
   16f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   16f38:	4284      	cmp	r4, r0
   16f3a:	d105      	bne.n	16f48 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   16f3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16f40:	f008 fa76 	bl	1f430 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   16f44:	42a0      	cmp	r0, r4
   16f46:	d1f2      	bne.n	16f2e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   16f48:	2000      	movs	r0, #0
   16f4a:	e7f2      	b.n	16f32 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   16f4c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   16f50:	f10d 0103 	add.w	r1, sp, #3
   16f54:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   16f56:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   16f5a:	f008 fa25 	bl	1f3a8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16f5e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   16f60:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16f62:	4649      	mov	r1, r9
   16f64:	4628      	mov	r0, r5
   16f66:	aa02      	add	r2, sp, #8
   16f68:	f008 f8de 	bl	1f128 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16f6c:	4b36      	ldr	r3, [pc, #216]	; (17048 <gpio_nrfx_pin_configure+0x148>)
   16f6e:	4298      	cmp	r0, r3
   16f70:	d002      	beq.n	16f78 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f72:	f06f 0015 	mvn.w	r0, #21
   16f76:	e7dc      	b.n	16f32 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   16f78:	4580      	cmp	r8, r0
   16f7a:	d103      	bne.n	16f84 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   16f7c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   16f80:	f008 fa56 	bl	1f430 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   16f84:	05a3      	lsls	r3, r4, #22
   16f86:	d54c      	bpl.n	17022 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16f88:	4b30      	ldr	r3, [pc, #192]	; (1704c <gpio_nrfx_pin_configure+0x14c>)
   16f8a:	4a31      	ldr	r2, [pc, #196]	; (17050 <gpio_nrfx_pin_configure+0x150>)
   16f8c:	4023      	ands	r3, r4
   16f8e:	4293      	cmp	r3, r2
   16f90:	d039      	beq.n	17006 <gpio_nrfx_pin_configure+0x106>
   16f92:	d80c      	bhi.n	16fae <gpio_nrfx_pin_configure+0xae>
   16f94:	2b06      	cmp	r3, #6
   16f96:	d014      	beq.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
   16f98:	d804      	bhi.n	16fa4 <gpio_nrfx_pin_configure+0xa4>
   16f9a:	b193      	cbz	r3, 16fc2 <gpio_nrfx_pin_configure+0xc2>
   16f9c:	2b02      	cmp	r3, #2
   16f9e:	d1e8      	bne.n	16f72 <gpio_nrfx_pin_configure+0x72>
   16fa0:	2304      	movs	r3, #4
   16fa2:	e00e      	b.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
   16fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16fa8:	d1e3      	bne.n	16f72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   16faa:	2301      	movs	r3, #1
   16fac:	e009      	b.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16fae:	4a29      	ldr	r2, [pc, #164]	; (17054 <gpio_nrfx_pin_configure+0x154>)
   16fb0:	4293      	cmp	r3, r2
   16fb2:	d02a      	beq.n	1700a <gpio_nrfx_pin_configure+0x10a>
   16fb4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16fb8:	d029      	beq.n	1700e <gpio_nrfx_pin_configure+0x10e>
   16fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16fbe:	d1d8      	bne.n	16f72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   16fc0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   16fc2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   16fc6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   16fca:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   16fce:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   16fd0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   16fd4:	bf4c      	ite	mi
   16fd6:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   16fd8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   16fdc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   16fde:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   16fe2:	d516      	bpl.n	17012 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   16fe4:	2101      	movs	r1, #1
   16fe6:	687b      	ldr	r3, [r7, #4]
   16fe8:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   16fec:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   16fee:	2200      	movs	r2, #0
   16ff0:	4628      	mov	r0, r5
   16ff2:	a901      	add	r1, sp, #4
   16ff4:	f008 f93e 	bl	1f274 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   16ff8:	4b13      	ldr	r3, [pc, #76]	; (17048 <gpio_nrfx_pin_configure+0x148>)
   16ffa:	4298      	cmp	r0, r3
   16ffc:	bf14      	ite	ne
   16ffe:	f06f 0015 	mvnne.w	r0, #21
   17002:	2000      	moveq	r0, #0
   17004:	e795      	b.n	16f32 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   17006:	2307      	movs	r3, #7
   17008:	e7db      	b.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1700a:	2305      	movs	r3, #5
   1700c:	e7d9      	b.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1700e:	2303      	movs	r3, #3
   17010:	e7d7      	b.n	16fc2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17012:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17014:	bf41      	itttt	mi
   17016:	2101      	movmi	r1, #1
   17018:	687b      	ldrmi	r3, [r7, #4]
   1701a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1701e:	60de      	strmi	r6, [r3, #12]
}
   17020:	e7e5      	b.n	16fee <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   17022:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17024:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17028:	bf4c      	ite	mi
   1702a:	2403      	movmi	r4, #3
   1702c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17030:	461a      	mov	r2, r3
   17032:	4628      	mov	r0, r5
   17034:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   17036:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1703a:	f008 f875 	bl	1f128 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1703e:	4b02      	ldr	r3, [pc, #8]	; (17048 <gpio_nrfx_pin_configure+0x148>)
   17040:	4298      	cmp	r0, r3
   17042:	d081      	beq.n	16f48 <gpio_nrfx_pin_configure+0x48>
   17044:	e795      	b.n	16f72 <gpio_nrfx_pin_configure+0x72>
   17046:	bf00      	nop
   17048:	0bad0000 	.word	0x0bad0000
   1704c:	00f00006 	.word	0x00f00006
   17050:	00100006 	.word	0x00100006
   17054:	00400002 	.word	0x00400002

00017058 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   17058:	4b02      	ldr	r3, [pc, #8]	; (17064 <flash_nrf_pages_layout+0xc>)
   1705a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1705c:	2301      	movs	r3, #1
   1705e:	6013      	str	r3, [r2, #0]
}
   17060:	4770      	bx	lr
   17062:	bf00      	nop
   17064:	2000dff4 	.word	0x2000dff4

00017068 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   17068:	4800      	ldr	r0, [pc, #0]	; (1706c <flash_nrf_get_parameters+0x4>)
   1706a:	4770      	bx	lr
   1706c:	0002c74c 	.word	0x0002c74c

00017070 <flash_nrf_read>:
{
   17070:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17072:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   17074:	4619      	mov	r1, r3
   17076:	4620      	mov	r0, r4
{
   17078:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   1707a:	9301      	str	r3, [sp, #4]
   1707c:	f011 fa12 	bl	284a4 <is_regular_addr_valid>
   17080:	9a01      	ldr	r2, [sp, #4]
   17082:	b978      	cbnz	r0, 170a4 <flash_nrf_read+0x34>
   17084:	4b10      	ldr	r3, [pc, #64]	; (170c8 <flash_nrf_read+0x58>)
   17086:	4811      	ldr	r0, [pc, #68]	; (170cc <flash_nrf_read+0x5c>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17088:	4911      	ldr	r1, [pc, #68]	; (170d0 <flash_nrf_read+0x60>)
   1708a:	1ac0      	subs	r0, r0, r3
   1708c:	08c0      	lsrs	r0, r0, #3
   1708e:	0180      	lsls	r0, r0, #6
   17090:	4613      	mov	r3, r2
   17092:	f040 0001 	orr.w	r0, r0, #1
   17096:	4622      	mov	r2, r4
   17098:	f00f fa49 	bl	2652e <log_string_sync>
		return -EINVAL;
   1709c:	f06f 0015 	mvn.w	r0, #21
}
   170a0:	b003      	add	sp, #12
   170a2:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   170a4:	b16a      	cbz	r2, 170c2 <flash_nrf_read+0x52>
	if (addr < PM_APP_ADDRESS) {
   170a6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
		return spm_request_read(data, addr, len);
   170aa:	4621      	mov	r1, r4
   170ac:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   170ae:	da04      	bge.n	170ba <flash_nrf_read+0x4a>
}
   170b0:	b003      	add	sp, #12
   170b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   170b6:	f010 b888 	b.w	271ca <spm_request_read>
   170ba:	f013 fec5 	bl	2ae48 <memcpy>
	return 0;
   170be:	2000      	movs	r0, #0
   170c0:	e7ee      	b.n	170a0 <flash_nrf_read+0x30>
		return 0;
   170c2:	4610      	mov	r0, r2
   170c4:	e7ec      	b.n	170a0 <flash_nrf_read+0x30>
   170c6:	bf00      	nop
   170c8:	0002c344 	.word	0x0002c344
   170cc:	0002c384 	.word	0x0002c384
   170d0:	0002db2c 	.word	0x0002db2c

000170d4 <flash_nrf_erase>:
{
   170d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170d6:	460d      	mov	r5, r1
   170d8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   170da:	f012 fabc 	bl	29656 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   170de:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   170e0:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   170e2:	4628      	mov	r0, r5
   170e4:	f011 f9de 	bl	284a4 <is_regular_addr_valid>
   170e8:	462f      	mov	r7, r5
   170ea:	b378      	cbz	r0, 1714c <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   170ec:	fbb5 f3f6 	udiv	r3, r5, r6
   170f0:	fb06 5313 	mls	r3, r6, r3, r5
   170f4:	b923      	cbnz	r3, 17100 <flash_nrf_erase+0x2c>
   170f6:	fbb4 f2f6 	udiv	r2, r4, r6
   170fa:	fb06 4012 	mls	r0, r6, r2, r4
   170fe:	b170      	cbz	r0, 1711e <flash_nrf_erase+0x4a>
   17100:	4b17      	ldr	r3, [pc, #92]	; (17160 <flash_nrf_erase+0x8c>)
   17102:	4818      	ldr	r0, [pc, #96]	; (17164 <flash_nrf_erase+0x90>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   17104:	462a      	mov	r2, r5
   17106:	1ac0      	subs	r0, r0, r3
   17108:	4623      	mov	r3, r4
   1710a:	08c0      	lsrs	r0, r0, #3
   1710c:	4916      	ldr	r1, [pc, #88]	; (17168 <flash_nrf_erase+0x94>)
   1710e:	0180      	lsls	r0, r0, #6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17110:	f040 0001 	orr.w	r0, r0, #1
   17114:	f00f fa0b 	bl	2652e <log_string_sync>
		return -EINVAL;
   17118:	f06f 0015 	mvn.w	r0, #21
   1711c:	e015      	b.n	1714a <flash_nrf_erase+0x76>
		if (!n_pages) {
   1711e:	42b4      	cmp	r4, r6
   17120:	d313      	bcc.n	1714a <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   17122:	f04f 32ff 	mov.w	r2, #4294967295
   17126:	f04f 33ff 	mov.w	r3, #4294967295
   1712a:	4810      	ldr	r0, [pc, #64]	; (1716c <flash_nrf_erase+0x98>)
   1712c:	f00c f98e 	bl	2344c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17130:	f012 fa91 	bl	29656 <nrfx_nvmc_flash_page_size_get>
   17134:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   17136:	4638      	mov	r0, r7
   17138:	f008 fb50 	bl	1f7dc <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1713c:	1b64      	subs	r4, r4, r5
   1713e:	442f      	add	r7, r5
   17140:	d1f9      	bne.n	17136 <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   17142:	480a      	ldr	r0, [pc, #40]	; (1716c <flash_nrf_erase+0x98>)
   17144:	f00c f95c 	bl	23400 <z_impl_k_sem_give>
	return ret;
   17148:	4620      	mov	r0, r4
}
   1714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1714c:	4b04      	ldr	r3, [pc, #16]	; (17160 <flash_nrf_erase+0x8c>)
   1714e:	4805      	ldr	r0, [pc, #20]	; (17164 <flash_nrf_erase+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17150:	462a      	mov	r2, r5
   17152:	1ac0      	subs	r0, r0, r3
   17154:	08c0      	lsrs	r0, r0, #3
   17156:	4623      	mov	r3, r4
   17158:	4905      	ldr	r1, [pc, #20]	; (17170 <flash_nrf_erase+0x9c>)
   1715a:	0180      	lsls	r0, r0, #6
   1715c:	e7d8      	b.n	17110 <flash_nrf_erase+0x3c>
   1715e:	bf00      	nop
   17160:	0002c344 	.word	0x0002c344
   17164:	0002c384 	.word	0x0002c384
   17168:	0002db49 	.word	0x0002db49
   1716c:	2000dffc 	.word	0x2000dffc
   17170:	0002db2c 	.word	0x0002db2c

00017174 <nrf_flash_init>:
{
   17174:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17176:	2201      	movs	r2, #1
   17178:	4806      	ldr	r0, [pc, #24]	; (17194 <nrf_flash_init+0x20>)
   1717a:	4611      	mov	r1, r2
   1717c:	f013 faae 	bl	2a6dc <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   17180:	f012 fa6c 	bl	2965c <nrfx_nvmc_flash_page_count_get>
   17184:	4c04      	ldr	r4, [pc, #16]	; (17198 <nrf_flash_init+0x24>)
   17186:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   17188:	f012 fa65 	bl	29656 <nrfx_nvmc_flash_page_size_get>
   1718c:	6060      	str	r0, [r4, #4]
}
   1718e:	2000      	movs	r0, #0
   17190:	bd10      	pop	{r4, pc}
   17192:	bf00      	nop
   17194:	2000dffc 	.word	0x2000dffc
   17198:	2000dff4 	.word	0x2000dff4

0001719c <flash_nrf_write>:
{
   1719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1719e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   171a0:	4619      	mov	r1, r3
   171a2:	4630      	mov	r0, r6
{
   171a4:	4617      	mov	r7, r2
   171a6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   171a8:	f011 f97c 	bl	284a4 <is_regular_addr_valid>
   171ac:	b970      	cbnz	r0, 171cc <flash_nrf_write+0x30>
   171ae:	4b1e      	ldr	r3, [pc, #120]	; (17228 <flash_nrf_write+0x8c>)
   171b0:	481e      	ldr	r0, [pc, #120]	; (1722c <flash_nrf_write+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   171b2:	4632      	mov	r2, r6
   171b4:	1ac0      	subs	r0, r0, r3
   171b6:	4623      	mov	r3, r4
   171b8:	08c0      	lsrs	r0, r0, #3
   171ba:	491d      	ldr	r1, [pc, #116]	; (17230 <flash_nrf_write+0x94>)
   171bc:	0180      	lsls	r0, r0, #6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   171be:	f040 0001 	orr.w	r0, r0, #1
   171c2:	f00f f9b4 	bl	2652e <log_string_sync>
		return -EINVAL;
   171c6:	f06f 0015 	mvn.w	r0, #21
}
   171ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   171cc:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   171d0:	f015 0503 	ands.w	r5, r5, #3
   171d4:	d008      	beq.n	171e8 <flash_nrf_write+0x4c>
   171d6:	4b14      	ldr	r3, [pc, #80]	; (17228 <flash_nrf_write+0x8c>)
   171d8:	4814      	ldr	r0, [pc, #80]	; (1722c <flash_nrf_write+0x90>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   171da:	4632      	mov	r2, r6
   171dc:	1ac0      	subs	r0, r0, r3
   171de:	08c0      	lsrs	r0, r0, #3
   171e0:	4623      	mov	r3, r4
   171e2:	4914      	ldr	r1, [pc, #80]	; (17234 <flash_nrf_write+0x98>)
   171e4:	0180      	lsls	r0, r0, #6
   171e6:	e7ea      	b.n	171be <flash_nrf_write+0x22>
	if (!len) {
   171e8:	b1dc      	cbz	r4, 17222 <flash_nrf_write+0x86>
	return z_impl_k_sem_take(sem, timeout);
   171ea:	f04f 32ff 	mov.w	r2, #4294967295
   171ee:	f04f 33ff 	mov.w	r3, #4294967295
   171f2:	4811      	ldr	r0, [pc, #68]	; (17238 <flash_nrf_write+0x9c>)
   171f4:	f00c f92a 	bl	2344c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   171f8:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   171fc:	42ac      	cmp	r4, r5
   171fe:	eb06 0005 	add.w	r0, r6, r5
   17202:	d109      	bne.n	17218 <flash_nrf_write+0x7c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   17204:	4a0d      	ldr	r2, [pc, #52]	; (1723c <flash_nrf_write+0xa0>)
   17206:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1720a:	07db      	lsls	r3, r3, #31
   1720c:	d5fb      	bpl.n	17206 <flash_nrf_write+0x6a>
	z_impl_k_sem_give(sem);
   1720e:	480a      	ldr	r0, [pc, #40]	; (17238 <flash_nrf_write+0x9c>)
   17210:	f00c f8f6 	bl	23400 <z_impl_k_sem_give>
	return ret;
   17214:	2000      	movs	r0, #0
}
   17216:	e7d8      	b.n	171ca <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   17218:	5979      	ldr	r1, [r7, r5]
   1721a:	f008 fafb 	bl	1f814 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1721e:	3504      	adds	r5, #4
}
   17220:	e7ec      	b.n	171fc <flash_nrf_write+0x60>
		return 0;
   17222:	4620      	mov	r0, r4
   17224:	e7d1      	b.n	171ca <flash_nrf_write+0x2e>
   17226:	bf00      	nop
   17228:	0002c344 	.word	0x0002c344
   1722c:	0002c384 	.word	0x0002c384
   17230:	0002db2c 	.word	0x0002db2c
   17234:	0002db68 	.word	0x0002db68
   17238:	2000dffc 	.word	0x2000dffc
   1723c:	40039000 	.word	0x40039000

00017240 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   17240:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   17242:	794b      	ldrb	r3, [r1, #5]
   17244:	2b01      	cmp	r3, #1
   17246:	d026      	beq.n	17296 <uarte_nrfx_configure+0x56>
   17248:	2b03      	cmp	r3, #3
   1724a:	d121      	bne.n	17290 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1724c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1724e:	798b      	ldrb	r3, [r1, #6]
   17250:	2b03      	cmp	r3, #3
   17252:	d11d      	bne.n	17290 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   17254:	79cc      	ldrb	r4, [r1, #7]
   17256:	b10c      	cbz	r4, 1725c <uarte_nrfx_configure+0x1c>
   17258:	2c01      	cmp	r4, #1
   1725a:	d119      	bne.n	17290 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1725c:	790a      	ldrb	r2, [r1, #4]
   1725e:	b112      	cbz	r2, 17266 <uarte_nrfx_configure+0x26>
   17260:	2a02      	cmp	r2, #2
   17262:	d115      	bne.n	17290 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   17264:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17266:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17268:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1726a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1726e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   17270:	d065      	beq.n	1733e <uarte_nrfx_configure+0xfe>
   17272:	d82d      	bhi.n	172d0 <uarte_nrfx_configure+0x90>
   17274:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17278:	d064      	beq.n	17344 <uarte_nrfx_configure+0x104>
   1727a:	d816      	bhi.n	172aa <uarte_nrfx_configure+0x6a>
   1727c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17280:	d062      	beq.n	17348 <uarte_nrfx_configure+0x108>
   17282:	d80a      	bhi.n	1729a <uarte_nrfx_configure+0x5a>
   17284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17288:	d061      	beq.n	1734e <uarte_nrfx_configure+0x10e>
   1728a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1728e:	d061      	beq.n	17354 <uarte_nrfx_configure+0x114>
   17290:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17294:	e052      	b.n	1733c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   17296:	2600      	movs	r6, #0
   17298:	e7d9      	b.n	1724e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1729a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1729e:	d05c      	beq.n	1735a <uarte_nrfx_configure+0x11a>
   172a0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   172a4:	d1f4      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   172a6:	4b37      	ldr	r3, [pc, #220]	; (17384 <uarte_nrfx_configure+0x144>)
   172a8:	e03c      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   172aa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   172ae:	d057      	beq.n	17360 <uarte_nrfx_configure+0x120>
   172b0:	d807      	bhi.n	172c2 <uarte_nrfx_configure+0x82>
   172b2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   172b6:	d055      	beq.n	17364 <uarte_nrfx_configure+0x124>
   172b8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   172bc:	d1e8      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   172be:	4b32      	ldr	r3, [pc, #200]	; (17388 <uarte_nrfx_configure+0x148>)
   172c0:	e030      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   172c2:	f647 2712 	movw	r7, #31250	; 0x7a12
   172c6:	42bb      	cmp	r3, r7
   172c8:	d1e2      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   172ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   172ce:	e029      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   172d0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   172d4:	d048      	beq.n	17368 <uarte_nrfx_configure+0x128>
   172d6:	d813      	bhi.n	17300 <uarte_nrfx_configure+0xc0>
   172d8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   172dc:	d047      	beq.n	1736e <uarte_nrfx_configure+0x12e>
   172de:	d809      	bhi.n	172f4 <uarte_nrfx_configure+0xb4>
   172e0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   172e4:	42bb      	cmp	r3, r7
   172e6:	d044      	beq.n	17372 <uarte_nrfx_configure+0x132>
   172e8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   172ec:	d1d0      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   172ee:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   172f2:	e017      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   172f4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   172f8:	d1ca      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   172fa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   172fe:	e011      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17300:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   17304:	d038      	beq.n	17378 <uarte_nrfx_configure+0x138>
   17306:	d808      	bhi.n	1731a <uarte_nrfx_configure+0xda>
   17308:	4f20      	ldr	r7, [pc, #128]	; (1738c <uarte_nrfx_configure+0x14c>)
   1730a:	42bb      	cmp	r3, r7
   1730c:	d037      	beq.n	1737e <uarte_nrfx_configure+0x13e>
   1730e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   17312:	d1bd      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   17314:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   17318:	e004      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1731a:	4f1d      	ldr	r7, [pc, #116]	; (17390 <uarte_nrfx_configure+0x150>)
   1731c:	42bb      	cmp	r3, r7
   1731e:	d1b7      	bne.n	17290 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   17320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   17324:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   17328:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   1732a:	4334      	orrs	r4, r6
   1732c:	4322      	orrs	r2, r4
   1732e:	3304      	adds	r3, #4
   17330:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17332:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   17336:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1733a:	2000      	movs	r0, #0
}
   1733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1733e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   17342:	e7ef      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   17344:	4b13      	ldr	r3, [pc, #76]	; (17394 <uarte_nrfx_configure+0x154>)
   17346:	e7ed      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17348:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1734c:	e7ea      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1734e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   17352:	e7e7      	b.n	17324 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17354:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17358:	e7e4      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1735a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1735e:	e7e1      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17360:	4b0d      	ldr	r3, [pc, #52]	; (17398 <uarte_nrfx_configure+0x158>)
   17362:	e7df      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   17364:	4b0d      	ldr	r3, [pc, #52]	; (1739c <uarte_nrfx_configure+0x15c>)
   17366:	e7dd      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17368:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1736c:	e7da      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1736e:	4b0c      	ldr	r3, [pc, #48]	; (173a0 <uarte_nrfx_configure+0x160>)
   17370:	e7d8      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   17372:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   17376:	e7d5      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17378:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1737c:	e7d2      	b.n	17324 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1737e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17382:	e7cf      	b.n	17324 <uarte_nrfx_configure+0xe4>
   17384:	0013b000 	.word	0x0013b000
   17388:	004ea000 	.word	0x004ea000
   1738c:	0003d090 	.word	0x0003d090
   17390:	000f4240 	.word	0x000f4240
   17394:	00275000 	.word	0x00275000
   17398:	0075c000 	.word	0x0075c000
   1739c:	003af000 	.word	0x003af000
   173a0:	013a9000 	.word	0x013a9000

000173a4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   173a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173a6:	4605      	mov	r5, r0
   173a8:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   173aa:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   173ac:	f013 f900 	bl	2a5b0 <k_is_in_isr>
   173b0:	b910      	cbnz	r0, 173b8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   173b2:	4b20      	ldr	r3, [pc, #128]	; (17434 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   173b4:	781b      	ldrb	r3, [r3, #0]
   173b6:	b983      	cbnz	r3, 173da <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   173b8:	f04f 0320 	mov.w	r3, #32
   173bc:	f3ef 8411 	mrs	r4, BASEPRI
   173c0:	f383 8812 	msr	BASEPRI_MAX, r3
   173c4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   173c8:	4628      	mov	r0, r5
   173ca:	f011 f919 	bl	28600 <is_tx_ready>
   173ce:	bb28      	cbnz	r0, 1741c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   173d0:	f384 8811 	msr	BASEPRI, r4
   173d4:	f3bf 8f6f 	isb	sy
}
   173d8:	e7ee      	b.n	173b8 <uarte_nrfx_poll_out+0x14>
{
   173da:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   173dc:	4628      	mov	r0, r5
   173de:	f011 f90f 	bl	28600 <is_tx_ready>
   173e2:	b970      	cbnz	r0, 17402 <uarte_nrfx_poll_out+0x5e>
   173e4:	2001      	movs	r0, #1
   173e6:	f012 f926 	bl	29636 <nrfx_busy_wait>
   173ea:	3c01      	subs	r4, #1
   173ec:	d1f6      	bne.n	173dc <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   173ee:	2100      	movs	r1, #0
   173f0:	2021      	movs	r0, #33	; 0x21
   173f2:	f00c fd11 	bl	23e18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   173f6:	e7f0      	b.n	173da <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   173f8:	f384 8811 	msr	BASEPRI, r4
   173fc:	f3bf 8f6f 	isb	sy
}
   17400:	e7f5      	b.n	173ee <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   17402:	f04f 0320 	mov.w	r3, #32
   17406:	f3ef 8411 	mrs	r4, BASEPRI
   1740a:	f383 8812 	msr	BASEPRI_MAX, r3
   1740e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17412:	4628      	mov	r0, r5
   17414:	f011 f8f4 	bl	28600 <is_tx_ready>
   17418:	2800      	cmp	r0, #0
   1741a:	d0ed      	beq.n	173f8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1741c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1741e:	2201      	movs	r2, #1
   17420:	4628      	mov	r0, r5
	data->char_out = c;
   17422:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   17426:	f011 f97c 	bl	28722 <tx_start>
	__asm__ volatile(
   1742a:	f384 8811 	msr	BASEPRI, r4
   1742e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   17432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17434:	2000f391 	.word	0x2000f391

00017438 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1743c:	4606      	mov	r6, r0
   1743e:	2101      	movs	r1, #1
   17440:	2200      	movs	r2, #0
   17442:	2008      	movs	r0, #8
   17444:	f7fe fb4a 	bl	15adc <z_arm_irq_priority_set>
   17448:	2008      	movs	r0, #8
   1744a:	f7fe fb29 	bl	15aa0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1744e:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   17450:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   17452:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   17454:	683c      	ldr	r4, [r7, #0]
   17456:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1745a:	602e      	str	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1745c:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1745e:	68d8      	ldr	r0, [r3, #12]
   17460:	1c41      	adds	r1, r0, #1
   17462:	d00b      	beq.n	1747c <uarte_0_init+0x44>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17464:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   17466:	f8df c154 	ldr.w	ip, [pc, #340]	; 175bc <uarte_0_init+0x184>
    *p_pin = pin_number & 0x1F;
   1746a:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1746e:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   17470:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
   17474:	2103      	movs	r1, #3
   17476:	3280      	adds	r2, #128	; 0x80
   17478:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1747c:	6919      	ldr	r1, [r3, #16]
   1747e:	1c4a      	adds	r2, r1, #1
   17480:	d00d      	beq.n	1749e <uarte_0_init+0x66>
			nrf_gpio_cfg_input(cfg->rx_pin,
   17482:	7f1a      	ldrb	r2, [r3, #28]
   17484:	f8df c134 	ldr.w	ip, [pc, #308]	; 175bc <uarte_0_init+0x184>
   17488:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1748a:	bf14      	ite	ne
   1748c:	f04f 0e0c 	movne.w	lr, #12
   17490:	f04f 0e00 	moveq.w	lr, #0
    *p_pin = pin_number & 0x1F;
   17494:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
   17498:	3280      	adds	r2, #128	; 0x80
   1749a:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1749e:	f8d3 c014 	ldr.w	ip, [r3, #20]
   174a2:	f1bc 3fff 	cmp.w	ip, #4294967295
   174a6:	d00e      	beq.n	174c6 <uarte_0_init+0x8e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   174a8:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
   174ac:	f8df 810c 	ldr.w	r8, [pc, #268]	; 175bc <uarte_0_init+0x184>
    *p_pin = pin_number & 0x1F;
   174b0:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   174b4:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
   174b8:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
   174bc:	f04f 0e03 	mov.w	lr, #3
   174c0:	3280      	adds	r2, #128	; 0x80
   174c2:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   174c6:	f8d3 e018 	ldr.w	lr, [r3, #24]
   174ca:	f1be 3fff 	cmp.w	lr, #4294967295
   174ce:	d00d      	beq.n	174ec <uarte_0_init+0xb4>
			nrf_gpio_cfg_input(cfg->cts_pin,
   174d0:	7f5a      	ldrb	r2, [r3, #29]
   174d2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 175bc <uarte_0_init+0x184>
   174d6:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   174d8:	bf14      	ite	ne
   174da:	f04f 090c 	movne.w	r9, #12
   174de:	f04f 0900 	moveq.w	r9, #0
    *p_pin = pin_number & 0x1F;
   174e2:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
   174e6:	3280      	adds	r2, #128	; 0x80
   174e8:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   174ec:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   174ee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   174f2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   174f6:	6931      	ldr	r1, [r6, #16]
   174f8:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   174fa:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   174fe:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   17500:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   17504:	f7ff fe9c 	bl	17240 <uarte_nrfx_configure>
	if (err) {
   17508:	4606      	mov	r6, r0
   1750a:	b9a8      	cbnz	r0, 17538 <uarte_0_init+0x100>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1750c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1750e:	0799      	lsls	r1, r3, #30
   17510:	d522      	bpl.n	17558 <uarte_0_init+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   17512:	f105 0016 	add.w	r0, r5, #22
   17516:	f007 fd8b 	bl	1f030 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1751a:	4b23      	ldr	r3, [pc, #140]	; (175a8 <uarte_0_init+0x170>)
   1751c:	4298      	cmp	r0, r3
   1751e:	d00e      	beq.n	1753e <uarte_0_init+0x106>
   17520:	4b22      	ldr	r3, [pc, #136]	; (175ac <uarte_0_init+0x174>)
   17522:	4823      	ldr	r0, [pc, #140]	; (175b0 <uarte_0_init+0x178>)
		LOG_ERR("Failed to allocate PPI Channel");
   17524:	4923      	ldr	r1, [pc, #140]	; (175b4 <uarte_0_init+0x17c>)
   17526:	1ac0      	subs	r0, r0, r3
   17528:	08c0      	lsrs	r0, r0, #3
   1752a:	0180      	lsls	r0, r0, #6
   1752c:	f040 0001 	orr.w	r0, r0, #1
   17530:	f00e fffd 	bl	2652e <log_string_sync>
		return -EIO;
   17534:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
   17538:	4630      	mov	r0, r6
   1753a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1753e:	7dab      	ldrb	r3, [r5, #22]
   17540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17544:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   17548:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1754c:	2301      	movs	r3, #1
   1754e:	7daa      	ldrb	r2, [r5, #22]
   17550:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   17552:	4a19      	ldr	r2, [pc, #100]	; (175b8 <uarte_0_init+0x180>)
   17554:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17558:	2308      	movs	r3, #8
   1755a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1755e:	7a3b      	ldrb	r3, [r7, #8]
   17560:	b95b      	cbnz	r3, 1757a <uarte_0_init+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17562:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17566:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1756a:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1756e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17572:	2301      	movs	r3, #1
   17574:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17578:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1757a:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1757c:	3514      	adds	r5, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1757e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   17580:	bf5c      	itt	pl
   17582:	f44f 7280 	movpl.w	r2, #256	; 0x100
   17586:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1758a:	06db      	lsls	r3, r3, #27
   1758c:	bf44      	itt	mi
   1758e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   17592:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   17596:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17598:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1759c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175a0:	2301      	movs	r3, #1
   175a2:	60a3      	str	r3, [r4, #8]
   175a4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   175a6:	e7c7      	b.n	17538 <uarte_0_init+0x100>
   175a8:	0bad0000 	.word	0x0bad0000
   175ac:	0002c344 	.word	0x0002c344
   175b0:	0002c41c 	.word	0x0002c41c
   175b4:	0002db90 	.word	0x0002db90
   175b8:	40017000 	.word	0x40017000
   175bc:	40842500 	.word	0x40842500

000175c0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   175c0:	4919      	ldr	r1, [pc, #100]	; (17628 <sys_clock_timeout_handler+0x68>)
{
   175c2:	b570      	push	{r4, r5, r6, lr}
   175c4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   175c6:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   175ca:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   175cc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   175d0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   175d4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   175d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   175da:	f04f 0500 	mov.w	r5, #0
   175de:	d20a      	bcs.n	175f6 <sys_clock_timeout_handler+0x36>
		return true;
   175e0:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   175e2:	4b12      	ldr	r3, [pc, #72]	; (1762c <sys_clock_timeout_handler+0x6c>)
   175e4:	6819      	ldr	r1, [r3, #0]
   175e6:	060a      	lsls	r2, r1, #24
   175e8:	0a0b      	lsrs	r3, r1, #8
   175ea:	1992      	adds	r2, r2, r6
   175ec:	4910      	ldr	r1, [pc, #64]	; (17630 <sys_clock_timeout_handler+0x70>)
   175ee:	f143 0300 	adc.w	r3, r3, #0
   175f2:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   175f6:	f00c fd95 	bl	24124 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   175fa:	00a3      	lsls	r3, r4, #2
   175fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17600:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   17604:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   17608:	42b2      	cmp	r2, r6
   1760a:	d10b      	bne.n	17624 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1760c:	b91d      	cbnz	r5, 17616 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1760e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17612:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17616:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1761a:	4b06      	ldr	r3, [pc, #24]	; (17634 <sys_clock_timeout_handler+0x74>)
   1761c:	fa00 f404 	lsl.w	r4, r0, r4
   17620:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   17624:	bd70      	pop	{r4, r5, r6, pc}
   17626:	bf00      	nop
   17628:	2000cc78 	.word	0x2000cc78
   1762c:	2000e01c 	.word	0x2000e01c
   17630:	2000cc60 	.word	0x2000cc60
   17634:	40015000 	.word	0x40015000

00017638 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   17638:	2301      	movs	r3, #1
   1763a:	4083      	lsls	r3, r0
{
   1763c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1763e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17640:	4a0c      	ldr	r2, [pc, #48]	; (17674 <compare_int_lock+0x3c>)
   17642:	e8d2 1fef 	ldaex	r1, [r2]
   17646:	ea01 0c04 	and.w	ip, r1, r4
   1764a:	e8c2 cfee 	stlex	lr, ip, [r2]
   1764e:	f1be 0f00 	cmp.w	lr, #0
   17652:	d1f6      	bne.n	17642 <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17658:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1765c:	4a06      	ldr	r2, [pc, #24]	; (17678 <compare_int_lock+0x40>)
   1765e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   17662:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17666:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1766a:	420b      	tst	r3, r1
}
   1766c:	bf14      	ite	ne
   1766e:	2001      	movne	r0, #1
   17670:	2000      	moveq	r0, #0
   17672:	bd10      	pop	{r4, pc}
   17674:	2000e018 	.word	0x2000e018
   17678:	40015000 	.word	0x40015000

0001767c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1767c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1767e:	4a0e      	ldr	r2, [pc, #56]	; (176b8 <compare_int_unlock.part.0+0x3c>)
   17680:	4083      	lsls	r3, r0
   17682:	e8d2 1fef 	ldaex	r1, [r2]
   17686:	4319      	orrs	r1, r3
   17688:	e8c2 1fec 	stlex	ip, r1, [r2]
   1768c:	f1bc 0f00 	cmp.w	ip, #0
   17690:	d1f7      	bne.n	17682 <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   17696:	4a09      	ldr	r2, [pc, #36]	; (176bc <compare_int_unlock.part.0+0x40>)
   17698:	4083      	lsls	r3, r0
   1769a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1769e:	4b08      	ldr	r3, [pc, #32]	; (176c0 <compare_int_unlock.part.0+0x44>)
   176a0:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   176a4:	fa23 f000 	lsr.w	r0, r3, r0
   176a8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   176aa:	bf42      	ittt	mi
   176ac:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   176b0:	4b04      	ldrmi	r3, [pc, #16]	; (176c4 <compare_int_unlock.part.0+0x48>)
   176b2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   176b6:	4770      	bx	lr
   176b8:	2000e018 	.word	0x2000e018
   176bc:	40015000 	.word	0x40015000
   176c0:	2000e014 	.word	0x2000e014
   176c4:	e000e100 	.word	0xe000e100

000176c8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   176c8:	4b0d      	ldr	r3, [pc, #52]	; (17700 <z_nrf_rtc_timer_read+0x38>)
   176ca:	681b      	ldr	r3, [r3, #0]
   176cc:	0a19      	lsrs	r1, r3, #8
   176ce:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   176d0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   176d4:	4b0b      	ldr	r3, [pc, #44]	; (17704 <z_nrf_rtc_timer_read+0x3c>)
   176d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   176da:	18c0      	adds	r0, r0, r3
   176dc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   176e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   176e4:	d20a      	bcs.n	176fc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   176e6:	4b08      	ldr	r3, [pc, #32]	; (17708 <z_nrf_rtc_timer_read+0x40>)
   176e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   176ec:	4299      	cmp	r1, r3
   176ee:	bf08      	it	eq
   176f0:	4290      	cmpeq	r0, r2
   176f2:	d203      	bcs.n	176fc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   176f4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   176f8:	f141 0100 	adc.w	r1, r1, #0
}
   176fc:	4770      	bx	lr
   176fe:	bf00      	nop
   17700:	2000e01c 	.word	0x2000e01c
   17704:	40015000 	.word	0x40015000
   17708:	2000cc60 	.word	0x2000cc60

0001770c <compare_set>:
{
   1770c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17710:	4616      	mov	r6, r2
   17712:	461f      	mov	r7, r3
   17714:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   17716:	f7ff ff8f 	bl	17638 <compare_int_lock>
   1771a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1771c:	f7ff ffd4 	bl	176c8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   17720:	42b9      	cmp	r1, r7
   17722:	bf08      	it	eq
   17724:	42b0      	cmpeq	r0, r6
   17726:	d27b      	bcs.n	17820 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
   17728:	2300      	movs	r3, #0
   1772a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1772e:	ebb6 0800 	subs.w	r8, r6, r0
   17732:	eb67 0901 	sbc.w	r9, r7, r1
   17736:	454b      	cmp	r3, r9
   17738:	bf08      	it	eq
   1773a:	4542      	cmpeq	r2, r8
   1773c:	d37d      	bcc.n	1783a <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   1773e:	4b40      	ldr	r3, [pc, #256]	; (17840 <compare_set+0x134>)
   17740:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17744:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   17748:	429f      	cmp	r7, r3
   1774a:	bf08      	it	eq
   1774c:	4296      	cmpeq	r6, r2
   1774e:	d051      	beq.n	177f4 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17750:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   17754:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   17758:	4614      	mov	r4, r2
   1775a:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1775e:	f105 0850 	add.w	r8, r5, #80	; 0x50
   17762:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   17766:	ea4f 0888 	mov.w	r8, r8, lsl #2
   1776a:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1776e:	fa1f f888 	uxth.w	r8, r8
   17772:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   17776:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1777a:	4b32      	ldr	r3, [pc, #200]	; (17844 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1777c:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17780:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
   17784:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   17788:	eba0 000a 	sub.w	r0, r0, sl
   1778c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   17790:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   17794:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   17796:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1779a:	d105      	bne.n	177a8 <compare_set+0x9c>
   1779c:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1779e:	2013      	movs	r0, #19
   177a0:	f013 f98a 	bl	2aab8 <z_impl_k_busy_wait>
   177a4:	4b27      	ldr	r3, [pc, #156]	; (17844 <compare_set+0x138>)
   177a6:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   177a8:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   177ac:	eba4 000c 	sub.w	r0, r4, ip
   177b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   177b4:	2100      	movs	r1, #0
			cc_val = now + 2;
   177b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   177ba:	bf88      	it	hi
   177bc:	4664      	movhi	r4, ip
   177be:	f8c8 1000 	str.w	r1, [r8]
   177c2:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   177c6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
   177ca:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   177ce:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   177d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   177d6:	4582      	cmp	sl, r0
   177d8:	d006      	beq.n	177e8 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   177da:	1a20      	subs	r0, r4, r0
   177dc:	3802      	subs	r0, #2
   177de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   177e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   177e6:	d819      	bhi.n	1781c <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
   177e8:	1aa4      	subs	r4, r4, r2
   177ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   177ee:	1932      	adds	r2, r6, r4
   177f0:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   177f4:	4c12      	ldr	r4, [pc, #72]	; (17840 <compare_set+0x134>)
   177f6:	0129      	lsls	r1, r5, #4
   177f8:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   177fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   17800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
   17802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
   17804:	5062      	str	r2, [r4, r1]
	return ret;
   17806:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
   17808:	6043      	str	r3, [r0, #4]
	if (key) {
   1780a:	9b00      	ldr	r3, [sp, #0]
   1780c:	b113      	cbz	r3, 17814 <compare_set+0x108>
   1780e:	4628      	mov	r0, r5
   17810:	f7ff ff34 	bl	1767c <compare_int_unlock.part.0>
}
   17814:	4620      	mov	r0, r4
   17816:	b003      	add	sp, #12
   17818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1781c:	4620      	mov	r0, r4
   1781e:	e7b1      	b.n	17784 <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
   17820:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17822:	4a09      	ldr	r2, [pc, #36]	; (17848 <compare_set+0x13c>)
   17824:	40ab      	lsls	r3, r5
   17826:	e8d2 1fef 	ldaex	r1, [r2]
   1782a:	4319      	orrs	r1, r3
   1782c:	e8c2 1fe0 	stlex	r0, r1, [r2]
   17830:	2800      	cmp	r0, #0
   17832:	d1f8      	bne.n	17826 <compare_set+0x11a>
   17834:	4632      	mov	r2, r6
   17836:	463b      	mov	r3, r7
   17838:	e7dc      	b.n	177f4 <compare_set+0xe8>
			return -EINVAL;
   1783a:	f06f 0415 	mvn.w	r4, #21
   1783e:	e7e4      	b.n	1780a <compare_set+0xfe>
   17840:	2000cc68 	.word	0x2000cc68
   17844:	40015000 	.word	0x40015000
   17848:	2000e014 	.word	0x2000e014

0001784c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1784c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1784e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   17850:	f04f 30ff 	mov.w	r0, #4294967295
   17854:	f04f 31ff 	mov.w	r1, #4294967295
   17858:	4d16      	ldr	r5, [pc, #88]	; (178b4 <sys_clock_driver_init+0x68>)
   1785a:	4b17      	ldr	r3, [pc, #92]	; (178b8 <sys_clock_driver_init+0x6c>)
   1785c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   17860:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   17864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17868:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1786a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1786e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   17872:	4b12      	ldr	r3, [pc, #72]	; (178bc <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   17874:	2101      	movs	r1, #1
   17876:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1787a:	2015      	movs	r0, #21
   1787c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17880:	4622      	mov	r2, r4
   17882:	f7fe f92b 	bl	15adc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   17886:	2015      	movs	r0, #21
   17888:	f7fe f90a 	bl	15aa0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1788c:	2301      	movs	r3, #1
   1788e:	4a0c      	ldr	r2, [pc, #48]	; (178c0 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   17890:	4620      	mov	r0, r4
   17892:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   17894:	4a0b      	ldr	r2, [pc, #44]	; (178c4 <sys_clock_driver_init+0x78>)
   17896:	602b      	str	r3, [r5, #0]
   17898:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1789a:	4b0b      	ldr	r3, [pc, #44]	; (178c8 <sys_clock_driver_init+0x7c>)
   1789c:	4a0b      	ldr	r2, [pc, #44]	; (178cc <sys_clock_driver_init+0x80>)
   1789e:	9300      	str	r3, [sp, #0]
   178a0:	9401      	str	r4, [sp, #4]
   178a2:	2300      	movs	r3, #0
   178a4:	f7ff ff32 	bl	1770c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   178a8:	4630      	mov	r0, r6
   178aa:	f7ff f9d9 	bl	16c60 <z_nrf_clock_control_lf_on>

	return 0;
}
   178ae:	4620      	mov	r0, r4
   178b0:	b002      	add	sp, #8
   178b2:	bd70      	pop	{r4, r5, r6, pc}
   178b4:	40015000 	.word	0x40015000
   178b8:	2000cc68 	.word	0x2000cc68
   178bc:	e000e100 	.word	0xe000e100
   178c0:	40015008 	.word	0x40015008
   178c4:	2000e018 	.word	0x2000e018
   178c8:	000175c1 	.word	0x000175c1
   178cc:	007fffff 	.word	0x007fffff

000178d0 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   178d0:	4b33      	ldr	r3, [pc, #204]	; (179a0 <rtc_nrf_isr+0xd0>)
{
   178d2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   178d6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   178da:	079a      	lsls	r2, r3, #30
   178dc:	d509      	bpl.n	178f2 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   178de:	4b31      	ldr	r3, [pc, #196]	; (179a4 <rtc_nrf_isr+0xd4>)
   178e0:	681a      	ldr	r2, [r3, #0]
   178e2:	b132      	cbz	r2, 178f2 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   178e4:	2200      	movs	r2, #0
   178e6:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   178e8:	4a2f      	ldr	r2, [pc, #188]	; (179a8 <rtc_nrf_isr+0xd8>)
   178ea:	681b      	ldr	r3, [r3, #0]
   178ec:	6813      	ldr	r3, [r2, #0]
   178ee:	3301      	adds	r3, #1
   178f0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   178f2:	f04f 0320 	mov.w	r3, #32
   178f6:	f3ef 8211 	mrs	r2, BASEPRI
   178fa:	f383 8812 	msr	BASEPRI_MAX, r3
   178fe:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   17902:	4b27      	ldr	r3, [pc, #156]	; (179a0 <rtc_nrf_isr+0xd0>)
   17904:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   17908:	03db      	lsls	r3, r3, #15
   1790a:	d50d      	bpl.n	17928 <rtc_nrf_isr+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1790c:	4b27      	ldr	r3, [pc, #156]	; (179ac <rtc_nrf_isr+0xdc>)
   1790e:	e8d3 1fef 	ldaex	r1, [r3]
   17912:	f021 0001 	bic.w	r0, r1, #1
   17916:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1791a:	2c00      	cmp	r4, #0
   1791c:	d1f7      	bne.n	1790e <rtc_nrf_isr+0x3e>
   1791e:	4b24      	ldr	r3, [pc, #144]	; (179b0 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17920:	2900      	cmp	r1, #0
   17922:	d135      	bne.n	17990 <rtc_nrf_isr+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17924:	6819      	ldr	r1, [r3, #0]
		if (result) {
   17926:	bb99      	cbnz	r1, 17990 <rtc_nrf_isr+0xc0>
{
   17928:	2300      	movs	r3, #0
	__asm__ volatile(
   1792a:	f382 8811 	msr	BASEPRI, r2
   1792e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   17932:	b353      	cbz	r3, 1798a <rtc_nrf_isr+0xba>
		curr_time = z_nrf_rtc_timer_read();
   17934:	f7ff fec8 	bl	176c8 <z_nrf_rtc_timer_read>
   17938:	4604      	mov	r4, r0
	__asm__ volatile(
   1793a:	f04f 0320 	mov.w	r3, #32
   1793e:	f3ef 8011 	mrs	r0, BASEPRI
   17942:	f383 8812 	msr	BASEPRI_MAX, r3
   17946:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1794a:	4b1a      	ldr	r3, [pc, #104]	; (179b4 <rtc_nrf_isr+0xe4>)
   1794c:	2200      	movs	r2, #0
   1794e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   17952:	4549      	cmp	r1, r9
   17954:	bf08      	it	eq
   17956:	4544      	cmpeq	r4, r8
   17958:	d31f      	bcc.n	1799a <rtc_nrf_isr+0xca>
			user_context = cc_data[chan].user_context;
   1795a:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1795e:	f04f 34ff 	mov.w	r4, #4294967295
   17962:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
   17966:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   17968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1796c:	e9c3 4502 	strd	r4, r5, [r3, #8]
   17970:	4b0b      	ldr	r3, [pc, #44]	; (179a0 <rtc_nrf_isr+0xd0>)
   17972:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   17976:	f380 8811 	msr	BASEPRI, r0
   1797a:	f3bf 8f6f 	isb	sy
		if (handler) {
   1797e:	b121      	cbz	r1, 1798a <rtc_nrf_isr+0xba>
			handler(chan, expire_time, user_context);
   17980:	4642      	mov	r2, r8
   17982:	464b      	mov	r3, r9
   17984:	2000      	movs	r0, #0
   17986:	9600      	str	r6, [sp, #0]
   17988:	4788      	blx	r1
}
   1798a:	b002      	add	sp, #8
   1798c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17990:	2100      	movs	r1, #0
   17992:	6019      	str	r1, [r3, #0]
   17994:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17996:	2301      	movs	r3, #1
}
   17998:	e7c7      	b.n	1792a <rtc_nrf_isr+0x5a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1799a:	4611      	mov	r1, r2
   1799c:	e7eb      	b.n	17976 <rtc_nrf_isr+0xa6>
   1799e:	bf00      	nop
   179a0:	40015000 	.word	0x40015000
   179a4:	40015104 	.word	0x40015104
   179a8:	2000e01c 	.word	0x2000e01c
   179ac:	2000e014 	.word	0x2000e014
   179b0:	40015140 	.word	0x40015140
   179b4:	2000cc68 	.word	0x2000cc68

000179b8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   179b8:	4b14      	ldr	r3, [pc, #80]	; (17a0c <sys_clock_set_timeout+0x54>)
{
   179ba:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   179bc:	f1b0 3fff 	cmp.w	r0, #4294967295
   179c0:	bf08      	it	eq
   179c2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   179c4:	1e44      	subs	r4, r0, #1
   179c6:	2c00      	cmp	r4, #0
   179c8:	dd1d      	ble.n	17a06 <sys_clock_set_timeout+0x4e>
   179ca:	429c      	cmp	r4, r3
   179cc:	bfa8      	it	ge
   179ce:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   179d0:	f7ff fe7a 	bl	176c8 <z_nrf_rtc_timer_read>
   179d4:	4b0e      	ldr	r3, [pc, #56]	; (17a10 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179d6:	490f      	ldr	r1, [pc, #60]	; (17a14 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   179d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   179dc:	1a80      	subs	r0, r0, r2
		ticks = 0;
   179de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   179e2:	bf28      	it	cs
   179e4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   179e6:	3001      	adds	r0, #1
   179e8:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   179ea:	4808      	ldr	r0, [pc, #32]	; (17a0c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179ec:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   179ee:	4284      	cmp	r4, r0
   179f0:	bf28      	it	cs
   179f2:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   179f4:	2000      	movs	r0, #0
   179f6:	1912      	adds	r2, r2, r4
   179f8:	9001      	str	r0, [sp, #4]
   179fa:	f143 0300 	adc.w	r3, r3, #0
   179fe:	f7ff fe85 	bl	1770c <compare_set>
}
   17a02:	b002      	add	sp, #8
   17a04:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17a06:	2400      	movs	r4, #0
   17a08:	e7e2      	b.n	179d0 <sys_clock_set_timeout+0x18>
   17a0a:	bf00      	nop
   17a0c:	007fffff 	.word	0x007fffff
   17a10:	2000cc78 	.word	0x2000cc78
   17a14:	000175c1 	.word	0x000175c1

00017a18 <sys_clock_elapsed>:
{
   17a18:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   17a1a:	f7ff fe55 	bl	176c8 <z_nrf_rtc_timer_read>
   17a1e:	4b02      	ldr	r3, [pc, #8]	; (17a28 <sys_clock_elapsed+0x10>)
   17a20:	681b      	ldr	r3, [r3, #0]
}
   17a22:	1ac0      	subs	r0, r0, r3
   17a24:	bd08      	pop	{r3, pc}
   17a26:	bf00      	nop
   17a28:	2000cc78 	.word	0x2000cc78

00017a2c <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   17a2c:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   17a2e:	4d19      	ldr	r5, [pc, #100]	; (17a94 <_nrf_modem_lib_init+0x68>)
   17a30:	4c19      	ldr	r4, [pc, #100]	; (17a98 <_nrf_modem_lib_init+0x6c>)
   17a32:	782b      	ldrb	r3, [r5, #0]
   17a34:	b933      	cbnz	r3, 17a44 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   17a36:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   17a3a:	4818      	ldr	r0, [pc, #96]	; (17a9c <_nrf_modem_lib_init+0x70>)
   17a3c:	f012 fdcc 	bl	2a5d8 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   17a40:	2301      	movs	r3, #1
   17a42:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   17a44:	2200      	movs	r2, #0
   17a46:	202a      	movs	r0, #42	; 0x2a
   17a48:	4611      	mov	r1, r2
   17a4a:	f7fe f847 	bl	15adc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   17a4e:	2100      	movs	r1, #0
   17a50:	4813      	ldr	r0, [pc, #76]	; (17aa0 <_nrf_modem_lib_init+0x74>)
   17a52:	f00b f90b 	bl	22c6c <nrf_modem_init>
   17a56:	4b13      	ldr	r3, [pc, #76]	; (17aa4 <_nrf_modem_lib_init+0x78>)
   17a58:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   17a5a:	f04f 32ff 	mov.w	r2, #4294967295
   17a5e:	f04f 33ff 	mov.w	r3, #4294967295
   17a62:	480e      	ldr	r0, [pc, #56]	; (17a9c <_nrf_modem_lib_init+0x70>)
   17a64:	f00b fbd4 	bl	23210 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   17a68:	6820      	ldr	r0, [r4, #0]
   17a6a:	b170      	cbz	r0, 17a8a <_nrf_modem_lib_init+0x5e>
	return node->next;
   17a6c:	6804      	ldr	r4, [r0, #0]
   17a6e:	2c00      	cmp	r4, #0
   17a70:	bf38      	it	cc
   17a72:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   17a74:	3004      	adds	r0, #4
   17a76:	f00b fcc3 	bl	23400 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   17a7a:	b134      	cbz	r4, 17a8a <_nrf_modem_lib_init+0x5e>
   17a7c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17a7e:	4620      	mov	r0, r4
   17a80:	2b00      	cmp	r3, #0
   17a82:	bf38      	it	cc
   17a84:	2300      	movcc	r3, #0
   17a86:	461c      	mov	r4, r3
   17a88:	e7f4      	b.n	17a74 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   17a8a:	4804      	ldr	r0, [pc, #16]	; (17a9c <_nrf_modem_lib_init+0x70>)
   17a8c:	f00b fc3e 	bl	2330c <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   17a90:	2000      	movs	r0, #0
   17a92:	bd38      	pop	{r3, r4, r5, pc}
   17a94:	2000eff1 	.word	0x2000eff1
   17a98:	2000e024 	.word	0x2000e024
   17a9c:	2000e02c 	.word	0x2000e02c
   17aa0:	0002c7c8 	.word	0x0002c7c8
   17aa4:	2000e020 	.word	0x2000e020

00017aa8 <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   17aa8:	4b01      	ldr	r3, [pc, #4]	; (17ab0 <nrf_modem_lib_get_init_ret+0x8>)
   17aaa:	6818      	ldr	r0, [r3, #0]
   17aac:	4770      	bx	lr
   17aae:	bf00      	nop
   17ab0:	2000e020 	.word	0x2000e020

00017ab4 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   17ab4:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   17ab6:	4c0d      	ldr	r4, [pc, #52]	; (17aec <thread_monitor_entry_get+0x38>)
{
   17ab8:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   17aba:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   17abc:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   17abe:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   17ac0:	4b0b      	ldr	r3, [pc, #44]	; (17af0 <thread_monitor_entry_get+0x3c>)
   17ac2:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   17ac4:	6801      	ldr	r1, [r0, #0]
   17ac6:	4291      	cmp	r1, r2
   17ac8:	d00e      	beq.n	17ae8 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   17aca:	b151      	cbz	r1, 17ae2 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   17acc:	6841      	ldr	r1, [r0, #4]
   17ace:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   17ad0:	42b1      	cmp	r1, r6
   17ad2:	bfc4      	itt	gt
   17ad4:	4604      	movgt	r4, r0
   17ad6:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   17ad8:	3d01      	subs	r5, #1
   17ada:	f100 0008 	add.w	r0, r0, #8
   17ade:	d1f1      	bne.n	17ac4 <thread_monitor_entry_get+0x10>
   17ae0:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   17ae2:	3b01      	subs	r3, #1
	new_entry->id = id;
   17ae4:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   17ae6:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   17ae8:	bd70      	pop	{r4, r5, r6, pc}
   17aea:	bf00      	nop
   17aec:	2000e0b0 	.word	0x2000e0b0
   17af0:	2000e08c 	.word	0x2000e08c

00017af4 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   17af4:	4668      	mov	r0, sp
   17af6:	f020 0107 	bic.w	r1, r0, #7
   17afa:	468d      	mov	sp, r1
   17afc:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   17afe:	4b0f      	ldr	r3, [pc, #60]	; (17b3c <rpc_proxy_irq_handler+0x48>)
   17b00:	e8d3 2fef 	ldaex	r2, [r3]
   17b04:	3201      	adds	r2, #1
   17b06:	e8c3 2fe1 	stlex	r1, r2, [r3]
   17b0a:	2900      	cmp	r1, #0
   17b0c:	d1f8      	bne.n	17b00 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   17b0e:	f008 f931 	bl	1fd74 <nrf_modem_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   17b12:	4b0b      	ldr	r3, [pc, #44]	; (17b40 <rpc_proxy_irq_handler+0x4c>)
   17b14:	681c      	ldr	r4, [r3, #0]
   17b16:	2c00      	cmp	r4, #0
   17b18:	bf38      	it	cc
   17b1a:	2400      	movcc	r4, #0
   17b1c:	b12c      	cbz	r4, 17b2a <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   17b1e:	1d20      	adds	r0, r4, #4
   17b20:	f00b fc6e 	bl	23400 <z_impl_k_sem_give>
   17b24:	6824      	ldr	r4, [r4, #0]
   17b26:	2c00      	cmp	r4, #0
   17b28:	d1f8      	bne.n	17b1c <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   17b2a:	f7fd ffed 	bl	15b08 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   17b2e:	f7fe f901 	bl	15d34 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   17b32:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   17b36:	4685      	mov	sp, r0
   17b38:	4770      	bx	lr
   17b3a:	bf00      	nop
   17b3c:	2000e08c 	.word	0x2000e08c
   17b40:	2000e0a8 	.word	0x2000e0a8

00017b44 <nrf_modem_os_timedwait>:
{
   17b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b48:	460c      	mov	r4, r1
   17b4a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   17b4c:	f012 ffb2 	bl	2aab4 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   17b50:	6823      	ldr	r3, [r4, #0]
   17b52:	4680      	mov	r8, r0
   17b54:	2b00      	cmp	r3, #0
   17b56:	468a      	mov	sl, r1
   17b58:	d103      	bne.n	17b62 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   17b5a:	f00c f8cf 	bl	23cfc <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   17b5e:	2074      	movs	r0, #116	; 0x74
   17b60:	e091      	b.n	17c86 <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   17b62:	bfbc      	itt	lt
   17b64:	f04f 33ff 	movlt.w	r3, #4294967295
   17b68:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17b6a:	2201      	movs	r2, #1
   17b6c:	2100      	movs	r1, #0
   17b6e:	a802      	add	r0, sp, #8
   17b70:	f012 fdb4 	bl	2a6dc <z_impl_k_sem_init>
   17b74:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   17b76:	f04f 0320 	mov.w	r3, #32
   17b7a:	f3ef 8b11 	mrs	fp, BASEPRI
   17b7e:	f383 8812 	msr	BASEPRI_MAX, r3
   17b82:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   17b86:	f00c f961 	bl	23e4c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   17b8a:	f7ff ff93 	bl	17ab4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   17b8e:	4947      	ldr	r1, [pc, #284]	; (17cac <nrf_modem_os_timedwait+0x168>)
   17b90:	6843      	ldr	r3, [r0, #4]
   17b92:	680a      	ldr	r2, [r1, #0]
   17b94:	4689      	mov	r9, r1
   17b96:	4293      	cmp	r3, r2
   17b98:	f04f 0300 	mov.w	r3, #0
   17b9c:	d108      	bne.n	17bb0 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   17b9e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   17ba0:	4b43      	ldr	r3, [pc, #268]	; (17cb0 <nrf_modem_os_timedwait+0x16c>)
   17ba2:	685a      	ldr	r2, [r3, #4]
   17ba4:	2a00      	cmp	r2, #0
   17ba6:	d171      	bne.n	17c8c <nrf_modem_os_timedwait+0x148>
	list->head = node;
   17ba8:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   17bac:	2301      	movs	r3, #1
}
   17bae:	e000      	b.n	17bb2 <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   17bb0:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   17bb2:	f38b 8811 	msr	BASEPRI, fp
   17bb6:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   17bba:	2b00      	cmp	r3, #0
   17bbc:	d062      	beq.n	17c84 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   17bbe:	6823      	ldr	r3, [r4, #0]
   17bc0:	1c5a      	adds	r2, r3, #1
   17bc2:	d066      	beq.n	17c92 <nrf_modem_os_timedwait+0x14e>
		} else {
			return (t * to_hz + off) / from_hz;
   17bc4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   17bc8:	f240 30e7 	movw	r0, #999	; 0x3e7
   17bcc:	2100      	movs	r1, #0
   17bce:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   17bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17bd6:	2300      	movs	r3, #0
   17bd8:	fbce 010c 	smlal	r0, r1, lr, ip
   17bdc:	f7f9 f834 	bl	10c48 <__aeabi_uldivmod>
   17be0:	4602      	mov	r2, r0
   17be2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17be4:	a802      	add	r0, sp, #8
   17be6:	f00b fc31 	bl	2344c <z_impl_k_sem_take>
	__asm__ volatile(
   17bea:	f04f 0320 	mov.w	r3, #32
   17bee:	f3ef 8b11 	mrs	fp, BASEPRI
   17bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   17bf6:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17bfa:	2000      	movs	r0, #0
   17bfc:	4b2c      	ldr	r3, [pc, #176]	; (17cb0 <nrf_modem_os_timedwait+0x16c>)
   17bfe:	681a      	ldr	r2, [r3, #0]
   17c00:	b15a      	cbz	r2, 17c1a <nrf_modem_os_timedwait+0xd6>
   17c02:	42aa      	cmp	r2, r5
   17c04:	d14f      	bne.n	17ca6 <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   17c06:	9d01      	ldr	r5, [sp, #4]
   17c08:	2800      	cmp	r0, #0
   17c0a:	d146      	bne.n	17c9a <nrf_modem_os_timedwait+0x156>
   17c0c:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   17c0e:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   17c10:	4291      	cmp	r1, r2
   17c12:	d100      	bne.n	17c16 <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   17c14:	605d      	str	r5, [r3, #4]
	parent->next = child;
   17c16:	2300      	movs	r3, #0
   17c18:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   17c1a:	f00c f917 	bl	23e4c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   17c1e:	f7ff ff49 	bl	17ab4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   17c22:	f8d9 3000 	ldr.w	r3, [r9]
   17c26:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   17c28:	f38b 8811 	msr	BASEPRI, fp
   17c2c:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   17c30:	6825      	ldr	r5, [r4, #0]
   17c32:	1c6b      	adds	r3, r5, #1
   17c34:	d026      	beq.n	17c84 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   17c36:	f012 ff3d 	bl	2aab4 <z_impl_k_uptime_ticks>
   17c3a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   17c3e:	468e      	mov	lr, r1
   17c40:	fba8 890c 	umull	r8, r9, r8, ip
   17c44:	fba0 010c 	umull	r0, r1, r0, ip
   17c48:	fb0c 990a 	mla	r9, ip, sl, r9
   17c4c:	fb0c 110e 	mla	r1, ip, lr, r1
   17c50:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   17c54:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   17c58:	1952      	adds	r2, r2, r5
   17c5a:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   17c5e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   17c62:	0bc5      	lsrs	r5, r0, #15
   17c64:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   17c68:	1b56      	subs	r6, r2, r5
   17c6a:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   17c6e:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   17c72:	2e00      	cmp	r6, #0
   17c74:	f177 0300 	sbcs.w	r3, r7, #0
   17c78:	bfb8      	it	lt
   17c7a:	2600      	movlt	r6, #0
   17c7c:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   17c7e:	2e00      	cmp	r6, #0
   17c80:	f43f af6d 	beq.w	17b5e <nrf_modem_os_timedwait+0x1a>
	return 0;
   17c84:	2000      	movs	r0, #0
}
   17c86:	b009      	add	sp, #36	; 0x24
   17c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c8c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   17c8e:	605d      	str	r5, [r3, #4]
   17c90:	e78c      	b.n	17bac <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   17c92:	f04f 32ff 	mov.w	r2, #4294967295
   17c96:	4613      	mov	r3, r2
   17c98:	e7a4      	b.n	17be4 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   17c9a:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   17c9c:	6859      	ldr	r1, [r3, #4]
   17c9e:	4291      	cmp	r1, r2
	list->tail = node;
   17ca0:	bf08      	it	eq
   17ca2:	6058      	streq	r0, [r3, #4]
}
   17ca4:	e7b7      	b.n	17c16 <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17ca6:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17ca8:	6812      	ldr	r2, [r2, #0]
   17caa:	e7a9      	b.n	17c00 <nrf_modem_os_timedwait+0xbc>
   17cac:	2000e08c 	.word	0x2000e08c
   17cb0:	2000e0a8 	.word	0x2000e0a8

00017cb4 <nrf_modem_os_sem_init>:
{
   17cb4:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   17cb6:	6804      	ldr	r4, [r0, #0]
   17cb8:	4b0a      	ldr	r3, [pc, #40]	; (17ce4 <nrf_modem_os_sem_init+0x30>)
   17cba:	b12c      	cbz	r4, 17cc8 <nrf_modem_os_sem_init+0x14>
   17cbc:	429c      	cmp	r4, r3
   17cbe:	d303      	bcc.n	17cc8 <nrf_modem_os_sem_init+0x14>
   17cc0:	f103 0548 	add.w	r5, r3, #72	; 0x48
   17cc4:	42ac      	cmp	r4, r5
   17cc6:	d308      	bcc.n	17cda <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   17cc8:	4d07      	ldr	r5, [pc, #28]	; (17ce8 <nrf_modem_os_sem_init+0x34>)
   17cca:	782c      	ldrb	r4, [r5, #0]
   17ccc:	1c66      	adds	r6, r4, #1
   17cce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   17cd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17cd6:	702e      	strb	r6, [r5, #0]
   17cd8:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   17cda:	6800      	ldr	r0, [r0, #0]
}
   17cdc:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17cde:	f012 bcfd 	b.w	2a6dc <z_impl_k_sem_init>
   17ce2:	bf00      	nop
   17ce4:	2000e044 	.word	0x2000e044
   17ce8:	2000eff2 	.word	0x2000eff2

00017cec <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17cf0:	4b01      	ldr	r3, [pc, #4]	; (17cf8 <nrf_modem_os_application_irq_set+0xc>)
   17cf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   17cf6:	4770      	bx	lr
   17cf8:	e000e100 	.word	0xe000e100

00017cfc <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17d00:	4b01      	ldr	r3, [pc, #4]	; (17d08 <nrf_modem_os_application_irq_clear+0xc>)
   17d02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   17d06:	4770      	bx	lr
   17d08:	e000e100 	.word	0xe000e100

00017d0c <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17d0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   17d10:	4b01      	ldr	r3, [pc, #4]	; (17d18 <nrf_modem_os_trace_irq_set+0xc>)
   17d12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   17d16:	4770      	bx	lr
   17d18:	e000e100 	.word	0xe000e100

00017d1c <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17d1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   17d20:	4b01      	ldr	r3, [pc, #4]	; (17d28 <nrf_modem_os_trace_irq_clear+0xc>)
   17d22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   17d26:	4770      	bx	lr
   17d28:	e000e100 	.word	0xe000e100

00017d2c <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   17d2c:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   17d2e:	2200      	movs	r2, #0
   17d30:	2300      	movs	r3, #0
   17d32:	4801      	ldr	r0, [pc, #4]	; (17d38 <nrf_modem_os_alloc+0xc>)
   17d34:	f012 bc15 	b.w	2a562 <k_heap_alloc>
   17d38:	2000c970 	.word	0x2000c970

00017d3c <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   17d3c:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   17d3e:	4801      	ldr	r0, [pc, #4]	; (17d44 <nrf_modem_os_free+0x8>)
   17d40:	f012 bc19 	b.w	2a576 <k_heap_free>
   17d44:	2000c970 	.word	0x2000c970

00017d48 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   17d48:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   17d4a:	2200      	movs	r2, #0
   17d4c:	2300      	movs	r3, #0
   17d4e:	4801      	ldr	r0, [pc, #4]	; (17d54 <nrf_modem_os_shm_tx_alloc+0xc>)
   17d50:	f012 bc07 	b.w	2a562 <k_heap_alloc>
   17d54:	2000e094 	.word	0x2000e094

00017d58 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   17d58:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   17d5a:	4801      	ldr	r0, [pc, #4]	; (17d60 <nrf_modem_os_shm_tx_free+0x8>)
   17d5c:	f012 bc0b 	b.w	2a576 <k_heap_free>
   17d60:	2000e094 	.word	0x2000e094

00017d64 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   17d64:	b510      	push	{r4, lr}
	list->head = NULL;
   17d66:	2400      	movs	r4, #0
   17d68:	4b0b      	ldr	r3, [pc, #44]	; (17d98 <nrf_modem_os_init+0x34>)
	list->tail = NULL;
   17d6a:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17d6e:	4b0b      	ldr	r3, [pc, #44]	; (17d9c <nrf_modem_os_init+0x38>)
   17d70:	e8d3 2fef 	ldaex	r2, [r3]
   17d74:	e8c3 4fe1 	stlex	r1, r4, [r3]
   17d78:	2900      	cmp	r1, #0
   17d7a:	d1f9      	bne.n	17d70 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   17d7c:	f010 fd9a 	bl	288b4 <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   17d80:	4b07      	ldr	r3, [pc, #28]	; (17da0 <nrf_modem_os_init+0x3c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   17d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   17d86:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   17d88:	4b06      	ldr	r3, [pc, #24]	; (17da4 <nrf_modem_os_init+0x40>)
	k_heap_init(&shmem_heap,
   17d8a:	4907      	ldr	r1, [pc, #28]	; (17da8 <nrf_modem_os_init+0x44>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   17d8c:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   17d8e:	4807      	ldr	r0, [pc, #28]	; (17dac <nrf_modem_os_init+0x48>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   17d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   17d94:	f012 bb95 	b.w	2a4c2 <k_heap_init>
   17d98:	2000e0a8 	.word	0x2000e0a8
   17d9c:	2000e08c 	.word	0x2000e08c
   17da0:	2000e040 	.word	0x2000e040
   17da4:	2000e090 	.word	0x2000e090
   17da8:	200084e8 	.word	0x200084e8
   17dac:	2000e094 	.word	0x2000e094

00017db0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   17db0:	2801      	cmp	r0, #1
   17db2:	d021      	beq.n	17df8 <z_to_nrf_optname+0x48>
   17db4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   17db8:	d126      	bne.n	17e08 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   17dba:	3901      	subs	r1, #1
   17dbc:	290b      	cmp	r1, #11
   17dbe:	d823      	bhi.n	17e08 <z_to_nrf_optname+0x58>
   17dc0:	e8df f001 	tbb	[pc, r1]
   17dc4:	0e0c0a06 	.word	0x0e0c0a06
   17dc8:	22221210 	.word	0x22221210
   17dcc:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   17dd0:	2302      	movs	r3, #2
	int retval = 0;
   17dd2:	2000      	movs	r0, #0
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_HOSTNAME;
   17dd4:	6013      	str	r3, [r2, #0]
			break;
   17dd6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   17dd8:	2305      	movs	r3, #5
   17dda:	e7fa      	b.n	17dd2 <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   17ddc:	2306      	movs	r3, #6
   17dde:	e7f8      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   17de0:	2307      	movs	r3, #7
   17de2:	e7f6      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   17de4:	2304      	movs	r3, #4
   17de6:	e7f4      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   17de8:	2301      	movs	r3, #1
   17dea:	e7f2      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   17dec:	2303      	movs	r3, #3
   17dee:	e7f0      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   17df0:	2309      	movs	r3, #9
   17df2:	e7ee      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   17df4:	2308      	movs	r3, #8
   17df6:	e7ec      	b.n	17dd2 <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   17df8:	2937      	cmp	r1, #55	; 0x37
   17dfa:	dc05      	bgt.n	17e08 <z_to_nrf_optname+0x58>
   17dfc:	2913      	cmp	r1, #19
   17dfe:	dc06      	bgt.n	17e0e <z_to_nrf_optname+0x5e>
   17e00:	2902      	cmp	r1, #2
   17e02:	d059      	beq.n	17eb8 <z_to_nrf_optname+0x108>
   17e04:	2904      	cmp	r1, #4
   17e06:	d0ed      	beq.n	17de4 <z_to_nrf_optname+0x34>
   17e08:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   17e0c:	4770      	bx	lr
   17e0e:	3914      	subs	r1, #20
   17e10:	2923      	cmp	r1, #35	; 0x23
   17e12:	d8f9      	bhi.n	17e08 <z_to_nrf_optname+0x58>
   17e14:	a301      	add	r3, pc, #4	; (adr r3, 17e1c <z_to_nrf_optname+0x6c>)
   17e16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   17e1a:	bf00      	nop
   17e1c:	00017ead 	.word	0x00017ead
   17e20:	00017eb1 	.word	0x00017eb1
   17e24:	00017e09 	.word	0x00017e09
   17e28:	00017e09 	.word	0x00017e09
   17e2c:	00017e09 	.word	0x00017e09
   17e30:	00017eb5 	.word	0x00017eb5
   17e34:	00017e09 	.word	0x00017e09
   17e38:	00017e09 	.word	0x00017e09
   17e3c:	00017e09 	.word	0x00017e09
   17e40:	00017e09 	.word	0x00017e09
   17e44:	00017ebd 	.word	0x00017ebd
   17e48:	00017ec1 	.word	0x00017ec1
   17e4c:	00017ec5 	.word	0x00017ec5
   17e50:	00017e09 	.word	0x00017e09
   17e54:	00017e09 	.word	0x00017e09
   17e58:	00017e09 	.word	0x00017e09
   17e5c:	00017e09 	.word	0x00017e09
   17e60:	00017e09 	.word	0x00017e09
   17e64:	00017e09 	.word	0x00017e09
   17e68:	00017e09 	.word	0x00017e09
   17e6c:	00017e09 	.word	0x00017e09
   17e70:	00017e09 	.word	0x00017e09
   17e74:	00017e09 	.word	0x00017e09
   17e78:	00017e09 	.word	0x00017e09
   17e7c:	00017e09 	.word	0x00017e09
   17e80:	00017e09 	.word	0x00017e09
   17e84:	00017e09 	.word	0x00017e09
   17e88:	00017e09 	.word	0x00017e09
   17e8c:	00017e09 	.word	0x00017e09
   17e90:	00017e09 	.word	0x00017e09
   17e94:	00017ecd 	.word	0x00017ecd
   17e98:	00017ed1 	.word	0x00017ed1
   17e9c:	00017ed5 	.word	0x00017ed5
   17ea0:	00017ed9 	.word	0x00017ed9
   17ea4:	00017edd 	.word	0x00017edd
   17ea8:	00017ec9 	.word	0x00017ec9
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   17eac:	2314      	movs	r3, #20
   17eae:	e790      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   17eb0:	2315      	movs	r3, #21
   17eb2:	e78e      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   17eb4:	2319      	movs	r3, #25
   17eb6:	e78c      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   17eb8:	2328      	movs	r3, #40	; 0x28
   17eba:	e78a      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   17ebc:	231e      	movs	r3, #30
   17ebe:	e788      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   17ec0:	231f      	movs	r3, #31
   17ec2:	e786      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   17ec4:	2320      	movs	r3, #32
   17ec6:	e784      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   17ec8:	2337      	movs	r3, #55	; 0x37
   17eca:	e782      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   17ecc:	2332      	movs	r3, #50	; 0x32
   17ece:	e780      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   17ed0:	2333      	movs	r3, #51	; 0x33
   17ed2:	e77e      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   17ed4:	2334      	movs	r3, #52	; 0x34
   17ed6:	e77c      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   17ed8:	2335      	movs	r3, #53	; 0x35
   17eda:	e77a      	b.n	17dd2 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   17edc:	2336      	movs	r3, #54	; 0x36
   17ede:	e778      	b.n	17dd2 <z_to_nrf_optname+0x22>

00017ee0 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   17ee0:	f04f 32ff 	mov.w	r2, #4294967295
   17ee4:	4b05      	ldr	r3, [pc, #20]	; (17efc <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   17ee6:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   17ee8:	601a      	str	r2, [r3, #0]
   17eea:	609a      	str	r2, [r3, #8]
   17eec:	611a      	str	r2, [r3, #16]
   17eee:	619a      	str	r2, [r3, #24]
   17ef0:	621a      	str	r2, [r3, #32]
   17ef2:	629a      	str	r2, [r3, #40]	; 0x28
   17ef4:	631a      	str	r2, [r3, #48]	; 0x30
   17ef6:	639a      	str	r2, [r3, #56]	; 0x38
}
   17ef8:	4770      	bx	lr
   17efa:	bf00      	nop
   17efc:	2000e104 	.word	0x2000e104

00017f00 <nrf91_socket_offload_ioctl>:
{
   17f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f04:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   17f08:	b091      	sub	sp, #68	; 0x44
   17f0a:	2b03      	cmp	r3, #3
   17f0c:	d878      	bhi.n	18000 <nrf91_socket_offload_ioctl+0x100>
   17f0e:	e8df f003 	tbb	[pc, r3]
   17f12:	0295      	.short	0x0295
   17f14:	7308      	.short	0x7308
		return 0;
   17f16:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   17f1a:	4620      	mov	r0, r4
   17f1c:	b011      	add	sp, #68	; 0x44
   17f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   17f22:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   17f26:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   17f2a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   17f2c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   17f30:	4668      	mov	r0, sp
   17f32:	2240      	movs	r2, #64	; 0x40
   17f34:	f012 ffa8 	bl	2ae88 <memset>
	for (int i = 0; i < nfds; i++) {
   17f38:	466e      	mov	r6, sp
   17f3a:	464d      	mov	r5, r9
   17f3c:	464f      	mov	r7, r9
	int retval = 0;
   17f3e:	4654      	mov	r4, sl
		tmp[i].events = 0;
   17f40:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   17f42:	4940      	ldr	r1, [pc, #256]	; (18044 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   17f44:	45d0      	cmp	r8, sl
   17f46:	dc32      	bgt.n	17fae <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   17f48:	2c00      	cmp	r4, #0
   17f4a:	dce6      	bgt.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17f4c:	465a      	mov	r2, fp
   17f4e:	4641      	mov	r1, r8
   17f50:	4668      	mov	r0, sp
   17f52:	f012 fa77 	bl	2a444 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   17f56:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17f58:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   17f5a:	4598      	cmp	r8, r3
   17f5c:	dddd      	ble.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   17f5e:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   17f62:	2a00      	cmp	r2, #0
   17f64:	db20      	blt.n	17fa8 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   17f66:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   17f6a:	88d2      	ldrh	r2, [r2, #6]
   17f6c:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   17f6e:	bf42      	ittt	mi
   17f70:	88e9      	ldrhmi	r1, [r5, #6]
   17f72:	f041 0101 	orrmi.w	r1, r1, #1
   17f76:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   17f78:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   17f7a:	bf42      	ittt	mi
   17f7c:	88e9      	ldrhmi	r1, [r5, #6]
   17f7e:	f041 0104 	orrmi.w	r1, r1, #4
   17f82:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   17f84:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   17f86:	bf42      	ittt	mi
   17f88:	88e9      	ldrhmi	r1, [r5, #6]
   17f8a:	f041 0108 	orrmi.w	r1, r1, #8
   17f8e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   17f90:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   17f92:	bf42      	ittt	mi
   17f94:	88e9      	ldrhmi	r1, [r5, #6]
   17f96:	f041 0120 	orrmi.w	r1, r1, #32
   17f9a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   17f9c:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   17f9e:	bf42      	ittt	mi
   17fa0:	88ea      	ldrhmi	r2, [r5, #6]
   17fa2:	f042 0210 	orrmi.w	r2, r2, #16
   17fa6:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   17fa8:	3301      	adds	r3, #1
   17faa:	3508      	adds	r5, #8
   17fac:	e7d5      	b.n	17f5a <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   17fae:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   17fb0:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   17fb2:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   17fb4:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   17fb6:	da05      	bge.n	17fc4 <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   17fb8:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   17fba:	f10a 0a01 	add.w	sl, sl, #1
   17fbe:	3608      	adds	r6, #8
   17fc0:	3708      	adds	r7, #8
   17fc2:	e7bf      	b.n	17f44 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   17fc4:	2286      	movs	r2, #134	; 0x86
   17fc6:	f7fb fa35 	bl	13434 <z_get_fd_obj>
			if (obj != NULL) {
   17fca:	2300      	movs	r3, #0
   17fcc:	491d      	ldr	r1, [pc, #116]	; (18044 <nrf91_socket_offload_ioctl+0x144>)
   17fce:	b178      	cbz	r0, 17ff0 <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   17fd0:	6802      	ldr	r2, [r0, #0]
   17fd2:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   17fd4:	88b8      	ldrh	r0, [r7, #4]
   17fd6:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   17fd8:	bf42      	ittt	mi
   17fda:	88b2      	ldrhmi	r2, [r6, #4]
   17fdc:	f042 0201 	orrmi.w	r2, r2, #1
   17fe0:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   17fe2:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   17fe4:	bf42      	ittt	mi
   17fe6:	88b2      	ldrhmi	r2, [r6, #4]
   17fe8:	f042 0202 	orrmi.w	r2, r2, #2
   17fec:	80b2      	strhmi	r2, [r6, #4]
   17fee:	e7e4      	b.n	17fba <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   17ff0:	2220      	movs	r2, #32
				retval++;
   17ff2:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   17ff4:	80fa      	strh	r2, [r7, #6]
				retval++;
   17ff6:	e7ed      	b.n	17fd4 <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   17ff8:	6813      	ldr	r3, [r2, #0]
		return 0;
   17ffa:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   17ffc:	6043      	str	r3, [r0, #4]
		return 0;
   17ffe:	e78c      	b.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   18000:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   18002:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   18004:	d00b      	beq.n	1801e <nrf91_socket_offload_ioctl+0x11e>
   18006:	2904      	cmp	r1, #4
   18008:	d111      	bne.n	1802e <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   1800a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1800c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   18010:	d10d      	bne.n	1802e <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   18012:	2101      	movs	r1, #1
   18014:	1392      	asrs	r2, r2, #14
   18016:	f012 fa17 	bl	2a448 <nrf_fcntl>
   1801a:	4604      	mov	r4, r0
		break;
   1801c:	e77d      	b.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1801e:	2200      	movs	r2, #0
   18020:	2102      	movs	r1, #2
   18022:	f012 fa11 	bl	2a448 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   18026:	0380      	lsls	r0, r0, #14
   18028:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1802c:	e775      	b.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   1802e:	f00f f94d 	bl	272cc <__errno>
   18032:	2316      	movs	r3, #22
	return retval;
   18034:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   18038:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1803a:	e76e      	b.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   1803c:	f06f 0411 	mvn.w	r4, #17
   18040:	e76b      	b.n	17f1a <nrf91_socket_offload_ioctl+0x1a>
   18042:	bf00      	nop
   18044:	0002c7f4 	.word	0x0002c7f4

00018048 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   18048:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1804a:	4b03      	ldr	r3, [pc, #12]	; (18058 <nrf91_socket_iface_init+0x10>)
   1804c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1804e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   18050:	4802      	ldr	r0, [pc, #8]	; (1805c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   18052:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   18054:	f7fc bec8 	b.w	14de8 <socket_offload_dns_register>
   18058:	2000e100 	.word	0x2000e100
   1805c:	0002c7ec 	.word	0x0002c7ec

00018060 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   18060:	4b0c      	ldr	r3, [pc, #48]	; (18094 <nrf91_socket_is_supported+0x34>)
   18062:	781b      	ldrb	r3, [r3, #0]
   18064:	b98b      	cbnz	r3, 1808a <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   18066:	4b0c      	ldr	r3, [pc, #48]	; (18098 <nrf91_socket_is_supported+0x38>)
   18068:	781b      	ldrb	r3, [r3, #0]
   1806a:	b183      	cbz	r3, 1808e <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1806c:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   18070:	2b02      	cmp	r3, #2
   18072:	d908      	bls.n	18086 <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   18074:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   18078:	2801      	cmp	r0, #1
   1807a:	bf8c      	ite	hi
   1807c:	2000      	movhi	r0, #0
   1807e:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   18080:	f080 0001 	eor.w	r0, r0, #1
   18084:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   18086:	2001      	movs	r0, #1
   18088:	e7fa      	b.n	18080 <nrf91_socket_is_supported+0x20>
		return false;
   1808a:	2000      	movs	r0, #0
   1808c:	4770      	bx	lr
	return true;
   1808e:	2001      	movs	r0, #1
}
   18090:	4770      	bx	lr
   18092:	bf00      	nop
   18094:	2000f073 	.word	0x2000f073
   18098:	2000f074 	.word	0x2000f074

0001809c <nrf91_socket_offload_getaddrinfo>:
{
   1809c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   180a0:	4614      	mov	r4, r2
   180a2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   180a4:	2100      	movs	r1, #0
{
   180a6:	b08a      	sub	sp, #40	; 0x28
   180a8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   180aa:	2220      	movs	r2, #32
   180ac:	a802      	add	r0, sp, #8
{
   180ae:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   180b0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   180b2:	f012 fee9 	bl	2ae88 <memset>
	if (hints != NULL) {
   180b6:	b324      	cbz	r4, 18102 <nrf91_socket_offload_getaddrinfo+0x66>
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   180b8:	221c      	movs	r2, #28
   180ba:	2100      	movs	r1, #0
   180bc:	a803      	add	r0, sp, #12
   180be:	f012 fee3 	bl	2ae88 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   180c2:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   180c4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   180c8:	04d0      	lsls	r0, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   180ca:	bf48      	it	mi
   180cc:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   180d0:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   180d2:	68e3      	ldr	r3, [r4, #12]
   180d4:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   180d6:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   180d8:	2b03      	cmp	r3, #3
   180da:	f200 80af 	bhi.w	1823c <nrf91_socket_offload_getaddrinfo+0x1a0>
   180de:	4a5a      	ldr	r2, [pc, #360]	; (18248 <nrf91_socket_offload_getaddrinfo+0x1ac>)
   180e0:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   180e2:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   180e6:	f000 80a9 	beq.w	1823c <nrf91_socket_offload_getaddrinfo+0x1a0>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   180ea:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   180ec:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   180ee:	f010 fc00 	bl	288f2 <z_to_nrf_protocol>
   180f2:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   180f4:	307b      	adds	r0, #123	; 0x7b
   180f6:	f000 80a4 	beq.w	18242 <nrf91_socket_offload_getaddrinfo+0x1a6>
	if (z_in->ai_canonname != NULL) {
   180fa:	69e3      	ldr	r3, [r4, #28]
   180fc:	b103      	cbz	r3, 18100 <nrf91_socket_offload_getaddrinfo+0x64>
		nrf_out->ai_canonname = z_in->ai_canonname;
   180fe:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   18100:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   18102:	f04f 32ff 	mov.w	r2, #4294967295
   18106:	f04f 33ff 	mov.w	r3, #4294967295
   1810a:	4850      	ldr	r0, [pc, #320]	; (1824c <nrf91_socket_offload_getaddrinfo+0x1b0>)
   1810c:	f010 fd1a 	bl	28b44 <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   18110:	4628      	mov	r0, r5
   18112:	4622      	mov	r2, r4
   18114:	4631      	mov	r1, r6
   18116:	ab01      	add	r3, sp, #4
   18118:	f012 f990 	bl	2a43c <nrf_getaddrinfo>
	if (retval != 0) {
   1811c:	4605      	mov	r5, r0
   1811e:	b170      	cbz	r0, 1813e <nrf91_socket_offload_getaddrinfo+0xa2>
	switch (nrf_gai_err) {
   18120:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18124:	440d      	add	r5, r1
   18126:	2d14      	cmp	r5, #20
   18128:	f200 8085 	bhi.w	18236 <nrf91_socket_offload_getaddrinfo+0x19a>
   1812c:	4b48      	ldr	r3, [pc, #288]	; (18250 <nrf91_socket_offload_getaddrinfo+0x1b4>)
   1812e:	575d      	ldrsb	r5, [r3, r5]
	k_mutex_unlock(&getaddrinfo_lock);
   18130:	4846      	ldr	r0, [pc, #280]	; (1824c <nrf91_socket_offload_getaddrinfo+0x1b0>)
   18132:	f010 fbf9 	bl	28928 <k_mutex_unlock>
}
   18136:	4628      	mov	r0, r5
   18138:	b00a      	add	sp, #40	; 0x28
   1813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct zsock_addrinfo *latest_z_res = NULL;
   1813e:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   18140:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   18142:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   18144:	f8df a10c 	ldr.w	sl, [pc, #268]	; 18254 <nrf91_socket_offload_getaddrinfo+0x1b8>
   18148:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1814a:	b91e      	cbnz	r6, 18154 <nrf91_socket_offload_getaddrinfo+0xb8>
	nrf_freeaddrinfo(nrf_res);
   1814c:	9801      	ldr	r0, [sp, #4]
   1814e:	f012 f977 	bl	2a440 <nrf_freeaddrinfo>
   18152:	e7ed      	b.n	18130 <nrf91_socket_offload_getaddrinfo+0x94>
					k_malloc(sizeof(struct zsock_addrinfo));
   18154:	2050      	movs	r0, #80	; 0x50
   18156:	f012 fe3b 	bl	2add0 <k_malloc>
		if (next_z_res == NULL) {
   1815a:	4604      	mov	r4, r0
   1815c:	2800      	cmp	r0, #0
   1815e:	d059      	beq.n	18214 <nrf91_socket_offload_getaddrinfo+0x178>
	family = nrf_to_z_family(nrf_in->ai_family);
   18160:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   18162:	68b3      	ldr	r3, [r6, #8]
   18164:	2a0a      	cmp	r2, #10
	z_out->ai_next = NULL;
   18166:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1816a:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1816e:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   18172:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   18174:	d851      	bhi.n	1821a <nrf91_socket_offload_getaddrinfo+0x17e>
   18176:	f91a 3002 	ldrsb.w	r3, [sl, r2]
	if (family == -EAFNOSUPPORT) {
   1817a:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   1817e:	d04c      	beq.n	1821a <nrf91_socket_offload_getaddrinfo+0x17e>
	z_out->ai_family = family;
   18180:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   18182:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   18184:	2b02      	cmp	r3, #2
   18186:	d031      	beq.n	181ec <nrf91_socket_offload_getaddrinfo+0x150>
   18188:	dc0d      	bgt.n	181a6 <nrf91_socket_offload_getaddrinfo+0x10a>
   1818a:	b1a3      	cbz	r3, 181b6 <nrf91_socket_offload_getaddrinfo+0x11a>
   1818c:	2b01      	cmp	r3, #1
   1818e:	d02f      	beq.n	181f0 <nrf91_socket_offload_getaddrinfo+0x154>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   18190:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   18194:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   18196:	2300      	movs	r3, #0
   18198:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   1819a:	4620      	mov	r0, r4
   1819c:	f012 fe11 	bl	2adc2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   181a0:	f06f 0506 	mvn.w	r5, #6
   181a4:	e03e      	b.n	18224 <nrf91_socket_offload_getaddrinfo+0x188>
	switch (proto) {
   181a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   181aa:	d01c      	beq.n	181e6 <nrf91_socket_offload_getaddrinfo+0x14a>
   181ac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   181b0:	d1ee      	bne.n	18190 <nrf91_socket_offload_getaddrinfo+0xf4>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   181b2:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   181b6:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   181b8:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   181ba:	d11b      	bne.n	181f4 <nrf91_socket_offload_getaddrinfo+0x158>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   181bc:	2008      	movs	r0, #8
   181be:	f012 fe07 	bl	2add0 <k_malloc>
   181c2:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   181c4:	b318      	cbz	r0, 1820e <nrf91_socket_offload_getaddrinfo+0x172>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   181c6:	2308      	movs	r3, #8
   181c8:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   181ca:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   181cc:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   181ce:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   181d0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   181d2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   181d4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   181d6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   181d8:	f1b8 0f00 	cmp.w	r8, #0
   181dc:	d128      	bne.n	18230 <nrf91_socket_offload_getaddrinfo+0x194>
			*res = next_z_res;
   181de:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   181e0:	46a0      	mov	r8, r4
   181e2:	69f6      	ldr	r6, [r6, #28]
   181e4:	e7b1      	b.n	1814a <nrf91_socket_offload_getaddrinfo+0xae>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   181e6:	f44f 7381 	mov.w	r3, #258	; 0x102
   181ea:	e7e4      	b.n	181b6 <nrf91_socket_offload_getaddrinfo+0x11a>
   181ec:	2311      	movs	r3, #17
   181ee:	e7e2      	b.n	181b6 <nrf91_socket_offload_getaddrinfo+0x11a>
   181f0:	2306      	movs	r3, #6
   181f2:	e7e0      	b.n	181b6 <nrf91_socket_offload_getaddrinfo+0x11a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   181f4:	2a0a      	cmp	r2, #10
   181f6:	d1d0      	bne.n	1819a <nrf91_socket_offload_getaddrinfo+0xfe>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   181f8:	2018      	movs	r0, #24
   181fa:	f012 fde9 	bl	2add0 <k_malloc>
   181fe:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   18200:	b128      	cbz	r0, 1820e <nrf91_socket_offload_getaddrinfo+0x172>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   18202:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   18204:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   18206:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   18208:	f010 fbf5 	bl	289f6 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   1820c:	e7e4      	b.n	181d8 <nrf91_socket_offload_getaddrinfo+0x13c>
			k_free(next_z_res);
   1820e:	4620      	mov	r0, r4
   18210:	f012 fdd7 	bl	2adc2 <k_free>
			retval = DNS_EAI_MEMORY;
   18214:	f06f 0509 	mvn.w	r5, #9
   18218:	e004      	b.n	18224 <nrf91_socket_offload_getaddrinfo+0x188>
			k_free(next_z_res);
   1821a:	4620      	mov	r0, r4
   1821c:	f012 fdd1 	bl	2adc2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   18220:	f06f 0508 	mvn.w	r5, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   18224:	6838      	ldr	r0, [r7, #0]
   18226:	f010 fbd9 	bl	289dc <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1822a:	2300      	movs	r3, #0
   1822c:	603b      	str	r3, [r7, #0]
   1822e:	e78d      	b.n	1814c <nrf91_socket_offload_getaddrinfo+0xb0>
			latest_z_res->ai_next = next_z_res;
   18230:	f8c8 4000 	str.w	r4, [r8]
   18234:	e7d4      	b.n	181e0 <nrf91_socket_offload_getaddrinfo+0x144>
	switch (nrf_gai_err) {
   18236:	f04f 35ff 	mov.w	r5, #4294967295
   1823a:	e779      	b.n	18130 <nrf91_socket_offload_getaddrinfo+0x94>
			return DNS_EAI_ADDRFAMILY;
   1823c:	f06f 0508 	mvn.w	r5, #8
   18240:	e779      	b.n	18136 <nrf91_socket_offload_getaddrinfo+0x9a>
			return DNS_EAI_SOCKTYPE;
   18242:	f06f 0506 	mvn.w	r5, #6
   18246:	e776      	b.n	18136 <nrf91_socket_offload_getaddrinfo+0x9a>
   18248:	0002dbef 	.word	0x0002dbef
   1824c:	2000c9c0 	.word	0x2000c9c0
   18250:	0002dbfe 	.word	0x0002dbfe
   18254:	0002dbf3 	.word	0x0002dbf3

00018258 <nrf91_socket_offload_sendmsg>:
{
   18258:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1825c:	4680      	mov	r8, r0
   1825e:	4691      	mov	r9, r2
	if (msg == NULL) {
   18260:	460c      	mov	r4, r1
   18262:	b1f9      	cbz	r1, 182a4 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   18264:	2300      	movs	r3, #0
	ssize_t len = 0;
   18266:	461a      	mov	r2, r3
   18268:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1826a:	4298      	cmp	r0, r3
   1826c:	d124      	bne.n	182b8 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   1826e:	2a80      	cmp	r2, #128	; 0x80
   18270:	d86d      	bhi.n	1834e <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   18272:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   18274:	f04f 32ff 	mov.w	r2, #4294967295
   18278:	f04f 33ff 	mov.w	r3, #4294967295
   1827c:	4836      	ldr	r0, [pc, #216]	; (18358 <nrf91_socket_offload_sendmsg+0x100>)
   1827e:	f010 fc61 	bl	28b44 <k_mutex_lock.constprop.0>
		len = 0;
   18282:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   18284:	4e35      	ldr	r6, [pc, #212]	; (1835c <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   18286:	68e3      	ldr	r3, [r4, #12]
   18288:	429d      	cmp	r5, r3
   1828a:	d31c      	bcc.n	182c6 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   1828c:	2600      	movs	r6, #0
		ret = 0;
   1828e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   18290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1835c <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   18294:	42b7      	cmp	r7, r6
   18296:	dd01      	ble.n	1829c <nrf91_socket_offload_sendmsg+0x44>
   18298:	2d00      	cmp	r5, #0
   1829a:	da25      	bge.n	182e8 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   1829c:	482e      	ldr	r0, [pc, #184]	; (18358 <nrf91_socket_offload_sendmsg+0x100>)
   1829e:	f010 fb43 	bl	28928 <k_mutex_unlock>
		return ret;
   182a2:	e005      	b.n	182b0 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   182a4:	f00f f812 	bl	272cc <__errno>
   182a8:	2316      	movs	r3, #22
		return -1;
   182aa:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   182ae:	6003      	str	r3, [r0, #0]
}
   182b0:	4628      	mov	r0, r5
   182b2:	b002      	add	sp, #8
   182b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   182b8:	68a1      	ldr	r1, [r4, #8]
   182ba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   182be:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   182c0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   182c2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   182c4:	e7d1      	b.n	1826a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   182c6:	68a1      	ldr	r1, [r4, #8]
   182c8:	19f0      	adds	r0, r6, r7
   182ca:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   182ce:	685a      	ldr	r2, [r3, #4]
   182d0:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   182d4:	f012 fdb8 	bl	2ae48 <memcpy>
			len += msg->msg_iov[i].iov_len;
   182d8:	68a3      	ldr	r3, [r4, #8]
   182da:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   182de:	4453      	add	r3, sl
   182e0:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   182e2:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   182e4:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   182e6:	e7ce      	b.n	18286 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   182e8:	6863      	ldr	r3, [r4, #4]
   182ea:	1bba      	subs	r2, r7, r6
   182ec:	9301      	str	r3, [sp, #4]
   182ee:	6823      	ldr	r3, [r4, #0]
   182f0:	eb0a 0106 	add.w	r1, sl, r6
   182f4:	9300      	str	r3, [sp, #0]
   182f6:	4640      	mov	r0, r8
   182f8:	464b      	mov	r3, r9
   182fa:	f010 fba9 	bl	28a50 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   182fe:	1e05      	subs	r5, r0, #0
				offset += ret;
   18300:	bfc8      	it	gt
   18302:	1976      	addgt	r6, r6, r5
   18304:	e7c6      	b.n	18294 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   18306:	68a3      	ldr	r3, [r4, #8]
   18308:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1830c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   18310:	685b      	ldr	r3, [r3, #4]
   18312:	b133      	cbz	r3, 18322 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   18314:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   18316:	68a3      	ldr	r3, [r4, #8]
   18318:	eb03 020a 	add.w	r2, r3, sl
   1831c:	6852      	ldr	r2, [r2, #4]
   1831e:	4297      	cmp	r7, r2
   18320:	d304      	bcc.n	1832c <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   18322:	3601      	adds	r6, #1
   18324:	68e3      	ldr	r3, [r4, #12]
   18326:	42b3      	cmp	r3, r6
   18328:	d8ed      	bhi.n	18306 <nrf91_socket_offload_sendmsg+0xae>
   1832a:	e7c1      	b.n	182b0 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   1832c:	f853 100a 	ldr.w	r1, [r3, sl]
   18330:	6863      	ldr	r3, [r4, #4]
   18332:	4640      	mov	r0, r8
   18334:	9301      	str	r3, [sp, #4]
   18336:	6823      	ldr	r3, [r4, #0]
   18338:	1bd2      	subs	r2, r2, r7
   1833a:	9300      	str	r3, [sp, #0]
   1833c:	4439      	add	r1, r7
   1833e:	464b      	mov	r3, r9
   18340:	f010 fb86 	bl	28a50 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   18344:	1e03      	subs	r3, r0, #0
   18346:	db05      	blt.n	18354 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   18348:	441f      	add	r7, r3
			len += ret;
   1834a:	441d      	add	r5, r3
   1834c:	e7e3      	b.n	18316 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1834e:	2600      	movs	r6, #0
	len = 0;
   18350:	4635      	mov	r5, r6
   18352:	e7e7      	b.n	18324 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   18354:	461d      	mov	r5, r3
   18356:	e7ab      	b.n	182b0 <nrf91_socket_offload_sendmsg+0x58>
   18358:	2000c9fc 	.word	0x2000c9fc
   1835c:	2000eff3 	.word	0x2000eff3

00018360 <allocate_ctx>:
{
   18360:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   18362:	f04f 32ff 	mov.w	r2, #4294967295
   18366:	f04f 33ff 	mov.w	r3, #4294967295
{
   1836a:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1836c:	480b      	ldr	r0, [pc, #44]	; (1839c <allocate_ctx+0x3c>)
   1836e:	f010 fbe9 	bl	28b44 <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   18372:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   18374:	4a0a      	ldr	r2, [pc, #40]	; (183a0 <allocate_ctx+0x40>)
   18376:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1837a:	3101      	adds	r1, #1
   1837c:	d108      	bne.n	18390 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   1837e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   18382:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   18386:	4805      	ldr	r0, [pc, #20]	; (1839c <allocate_ctx+0x3c>)
   18388:	f010 face 	bl	28928 <k_mutex_unlock>
}
   1838c:	4628      	mov	r0, r5
   1838e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   18390:	3301      	adds	r3, #1
   18392:	2b08      	cmp	r3, #8
   18394:	d1ef      	bne.n	18376 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   18396:	2500      	movs	r5, #0
   18398:	e7f5      	b.n	18386 <allocate_ctx+0x26>
   1839a:	bf00      	nop
   1839c:	2000c998 	.word	0x2000c998
   183a0:	2000e104 	.word	0x2000e104

000183a4 <release_ctx>:
{
   183a4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   183a6:	4d09      	ldr	r5, [pc, #36]	; (183cc <release_ctx+0x28>)
{
   183a8:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   183aa:	f04f 32ff 	mov.w	r2, #4294967295
   183ae:	f04f 33ff 	mov.w	r3, #4294967295
   183b2:	4628      	mov	r0, r5
   183b4:	f010 fbc6 	bl	28b44 <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   183b8:	2300      	movs	r3, #0
   183ba:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   183be:	4628      	mov	r0, r5
	ctx->lock = NULL;
   183c0:	e9c4 2300 	strd	r2, r3, [r4]
}
   183c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   183c8:	f010 baae 	b.w	28928 <k_mutex_unlock>
   183cc:	2000c998 	.word	0x2000c998

000183d0 <nrf91_socket_offload_accept>:
{
   183d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   183d4:	b08b      	sub	sp, #44	; 0x2c
   183d6:	4607      	mov	r7, r0
   183d8:	460c      	mov	r4, r1
   183da:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   183dc:	f7fb f85c 	bl	13498 <z_reserve_fd>
   183e0:	4606      	mov	r6, r0
	if (fd < 0) {
   183e2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   183e4:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   183e6:	db23      	blt.n	18430 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   183e8:	b32c      	cbz	r4, 18436 <nrf91_socket_offload_accept+0x66>
   183ea:	b33d      	cbz	r5, 1843c <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   183ec:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   183ee:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   183f0:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   183f2:	bf0c      	ite	eq
   183f4:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   183f6:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   183f8:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   183fa:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   183fc:	4639      	mov	r1, r7
   183fe:	f011 ffc3 	bl	2a388 <nrf_accept>
	if (new_sd < 0) {
   18402:	f1b0 0900 	subs.w	r9, r0, #0
   18406:	db3c      	blt.n	18482 <nrf91_socket_offload_accept+0xb2>
	ctx = allocate_ctx(new_sd);
   18408:	f7ff ffaa 	bl	18360 <allocate_ctx>
	if (ctx == NULL) {
   1840c:	4680      	mov	r8, r0
   1840e:	b9c0      	cbnz	r0, 18442 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   18410:	f00e ff5c 	bl	272cc <__errno>
   18414:	230c      	movs	r3, #12
   18416:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   18418:	4648      	mov	r0, r9
   1841a:	f011 ff50 	bl	2a2be <nrf_close>
	if (ctx != NULL) {
   1841e:	f1b8 0f00 	cmp.w	r8, #0
   18422:	d002      	beq.n	1842a <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   18424:	4640      	mov	r0, r8
   18426:	f7ff ffbd 	bl	183a4 <release_ctx>
	z_free_fd(fd);
   1842a:	4630      	mov	r0, r6
   1842c:	f7fb f884 	bl	13538 <z_free_fd>
		return -1;
   18430:	f04f 36ff 	mov.w	r6, #4294967295
   18434:	e018      	b.n	18468 <nrf91_socket_offload_accept+0x98>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   18436:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   18438:	4627      	mov	r7, r4
   1843a:	e7df      	b.n	183fc <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1843c:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1843e:	462f      	mov	r7, r5
   18440:	e7dc      	b.n	183fc <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   18442:	b164      	cbz	r4, 1845e <nrf91_socket_offload_accept+0x8e>
   18444:	b15d      	cbz	r5, 1845e <nrf91_socket_offload_accept+0x8e>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   18446:	687b      	ldr	r3, [r7, #4]
   18448:	2b02      	cmp	r3, #2
   1844a:	d111      	bne.n	18470 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in);
   1844c:	2308      	movs	r3, #8
   1844e:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   18450:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   18454:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   18456:	2301      	movs	r3, #1
   18458:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1845a:	9b04      	ldr	r3, [sp, #16]
   1845c:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1845e:	4641      	mov	r1, r8
   18460:	4630      	mov	r0, r6
   18462:	4a0b      	ldr	r2, [pc, #44]	; (18490 <nrf91_socket_offload_accept+0xc0>)
   18464:	f7fb f84e 	bl	13504 <z_finalize_fd>
}
   18468:	4630      	mov	r0, r6
   1846a:	b00b      	add	sp, #44	; 0x2c
   1846c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   18470:	2b0a      	cmp	r3, #10
   18472:	d1d1      	bne.n	18418 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   18474:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   18476:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   18478:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1847a:	a901      	add	r1, sp, #4
   1847c:	f010 fabb 	bl	289f6 <nrf_to_z_ipv6>
   18480:	e7ed      	b.n	1845e <nrf91_socket_offload_accept+0x8e>
	if (new_sd != -1) {
   18482:	f1b9 3fff 	cmp.w	r9, #4294967295
   18486:	d0d0      	beq.n	1842a <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   18488:	f04f 0800 	mov.w	r8, #0
   1848c:	e7c4      	b.n	18418 <nrf91_socket_offload_accept+0x48>
   1848e:	bf00      	nop
   18490:	0002c7f4 	.word	0x0002c7f4

00018494 <nrf91_socket_create>:
{
   18494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   18496:	1e0e      	subs	r6, r1, #0
{
   18498:	4605      	mov	r5, r0
   1849a:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   1849c:	da12      	bge.n	184c4 <nrf91_socket_create+0x30>
	k_sched_lock();
   1849e:	f00b fa0d 	bl	238bc <k_sched_lock>
	*offload_lock = true;
   184a2:	4f28      	ldr	r7, [pc, #160]	; (18544 <nrf91_socket_create+0xb0>)
   184a4:	2301      	movs	r3, #1
   184a6:	703b      	strb	r3, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&type, *(uintptr_t *)&proto, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   184a8:	4628      	mov	r0, r5
   184aa:	9a01      	ldr	r2, [sp, #4]
   184ac:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   184b0:	f7fc fb5e 	bl	14b70 <z_impl_zsock_socket>
	*offload_lock = false;
   184b4:	2300      	movs	r3, #0
   184b6:	703b      	strb	r3, [r7, #0]
   184b8:	4604      	mov	r4, r0
	k_sched_unlock();
   184ba:	f00b fbf7 	bl	23cac <k_sched_unlock>
}
   184be:	4620      	mov	r0, r4
   184c0:	b003      	add	sp, #12
   184c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   184c4:	0073      	lsls	r3, r6, #1
   184c6:	d503      	bpl.n	184d0 <nrf91_socket_create+0x3c>
	k_sched_lock();
   184c8:	f00b f9f8 	bl	238bc <k_sched_lock>
	*offload_lock = true;
   184cc:	4f1e      	ldr	r7, [pc, #120]	; (18548 <nrf91_socket_create+0xb4>)
   184ce:	e7e9      	b.n	184a4 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   184d0:	f7fa ffe2 	bl	13498 <z_reserve_fd>
	if (fd < 0) {
   184d4:	1e04      	subs	r4, r0, #0
   184d6:	db0f      	blt.n	184f8 <nrf91_socket_create+0x64>
	family = z_to_nrf_family(family);
   184d8:	b2ad      	uxth	r5, r5
	switch (z_family) {
   184da:	2d03      	cmp	r5, #3
   184dc:	d805      	bhi.n	184ea <nrf91_socket_create+0x56>
   184de:	4b1b      	ldr	r3, [pc, #108]	; (1854c <nrf91_socket_create+0xb8>)
	if (family == -EAFNOSUPPORT) {
   184e0:	9a01      	ldr	r2, [sp, #4]
   184e2:	575d      	ldrsb	r5, [r3, r5]
   184e4:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   184e8:	d109      	bne.n	184fe <nrf91_socket_create+0x6a>
		errno = EAFNOSUPPORT;
   184ea:	f00e feef 	bl	272cc <__errno>
   184ee:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   184f0:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   184f2:	4620      	mov	r0, r4
   184f4:	f7fb f820 	bl	13538 <z_free_fd>
		return -1;
   184f8:	f04f 34ff 	mov.w	r4, #4294967295
   184fc:	e7df      	b.n	184be <nrf91_socket_create+0x2a>
	proto = z_to_nrf_protocol(proto);
   184fe:	4610      	mov	r0, r2
   18500:	f010 f9f7 	bl	288f2 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   18504:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   18508:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1850a:	d103      	bne.n	18514 <nrf91_socket_create+0x80>
		errno = EPROTONOSUPPORT;
   1850c:	f00e fede 	bl	272cc <__errno>
   18510:	237b      	movs	r3, #123	; 0x7b
   18512:	e7ed      	b.n	184f0 <nrf91_socket_create+0x5c>
	retval = nrf_socket(family, type, proto);
   18514:	4628      	mov	r0, r5
   18516:	4631      	mov	r1, r6
   18518:	f011 fec0 	bl	2a29c <nrf_socket>
	if (sd < 0) {
   1851c:	1e05      	subs	r5, r0, #0
   1851e:	dbe8      	blt.n	184f2 <nrf91_socket_create+0x5e>
	ctx = allocate_ctx(sd);
   18520:	f7ff ff1e 	bl	18360 <allocate_ctx>
	if (ctx == NULL) {
   18524:	4601      	mov	r1, r0
   18526:	b938      	cbnz	r0, 18538 <nrf91_socket_create+0xa4>
		errno = ENOMEM;
   18528:	f00e fed0 	bl	272cc <__errno>
   1852c:	230c      	movs	r3, #12
   1852e:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   18530:	4628      	mov	r0, r5
   18532:	f011 fec4 	bl	2a2be <nrf_close>
   18536:	e7dc      	b.n	184f2 <nrf91_socket_create+0x5e>
	z_finalize_fd(fd, ctx,
   18538:	4620      	mov	r0, r4
   1853a:	4a05      	ldr	r2, [pc, #20]	; (18550 <nrf91_socket_create+0xbc>)
   1853c:	f7fa ffe2 	bl	13504 <z_finalize_fd>
	return fd;
   18540:	e7bd      	b.n	184be <nrf91_socket_create+0x2a>
   18542:	bf00      	nop
   18544:	2000f073 	.word	0x2000f073
   18548:	2000f074 	.word	0x2000f074
   1854c:	0002dbef 	.word	0x0002dbef
   18550:	0002c7f4 	.word	0x0002c7f4

00018554 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   18554:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   18556:	4808      	ldr	r0, [pc, #32]	; (18578 <at_monitor_sys_init+0x24>)
   18558:	f009 fc80 	bl	21e5c <nrf_modem_at_notif_handler_set>
	if (err) {
   1855c:	b150      	cbz	r0, 18574 <at_monitor_sys_init+0x20>
   1855e:	4a07      	ldr	r2, [pc, #28]	; (1857c <at_monitor_sys_init+0x28>)
   18560:	4b07      	ldr	r3, [pc, #28]	; (18580 <at_monitor_sys_init+0x2c>)
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   18562:	4908      	ldr	r1, [pc, #32]	; (18584 <at_monitor_sys_init+0x30>)
   18564:	1a9b      	subs	r3, r3, r2
   18566:	08db      	lsrs	r3, r3, #3
   18568:	019b      	lsls	r3, r3, #6
   1856a:	4602      	mov	r2, r0
   1856c:	f043 0001 	orr.w	r0, r3, #1
   18570:	f00d ffdd 	bl	2652e <log_string_sync>
	}

	return 0;
}
   18574:	2000      	movs	r0, #0
   18576:	bd08      	pop	{r3, pc}
   18578:	00018589 	.word	0x00018589
   1857c:	0002c344 	.word	0x0002c344
   18580:	0002c354 	.word	0x0002c354
   18584:	0002dc13 	.word	0x0002dc13

00018588 <at_monitor_dispatch>:
{
   18588:	b570      	push	{r4, r5, r6, lr}
   1858a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1858c:	4c25      	ldr	r4, [pc, #148]	; (18624 <at_monitor_dispatch+0x9c>)
   1858e:	4e26      	ldr	r6, [pc, #152]	; (18628 <at_monitor_dispatch+0xa0>)
   18590:	42b4      	cmp	r4, r6
   18592:	d304      	bcc.n	1859e <at_monitor_dispatch+0x16>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   18594:	4c25      	ldr	r4, [pc, #148]	; (1862c <at_monitor_dispatch+0xa4>)
   18596:	4e26      	ldr	r6, [pc, #152]	; (18630 <at_monitor_dispatch+0xa8>)
   18598:	42b4      	cmp	r4, r6
   1859a:	d30f      	bcc.n	185bc <at_monitor_dispatch+0x34>
}
   1859c:	bd70      	pop	{r4, r5, r6, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1859e:	7a23      	ldrb	r3, [r4, #8]
   185a0:	b923      	cbnz	r3, 185ac <at_monitor_dispatch+0x24>
   185a2:	6821      	ldr	r1, [r4, #0]
   185a4:	b921      	cbnz	r1, 185b0 <at_monitor_dispatch+0x28>
			e->handler(notif);
   185a6:	4628      	mov	r0, r5
   185a8:	6863      	ldr	r3, [r4, #4]
   185aa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   185ac:	340c      	adds	r4, #12
   185ae:	e7ef      	b.n	18590 <at_monitor_dispatch+0x8>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   185b0:	4628      	mov	r0, r5
   185b2:	f012 fdde 	bl	2b172 <strstr>
   185b6:	2800      	cmp	r0, #0
   185b8:	d1f5      	bne.n	185a6 <at_monitor_dispatch+0x1e>
   185ba:	e7f7      	b.n	185ac <at_monitor_dispatch+0x24>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   185bc:	7a23      	ldrb	r3, [r4, #8]
   185be:	bb13      	cbnz	r3, 18606 <at_monitor_dispatch+0x7e>
   185c0:	6821      	ldr	r1, [r4, #0]
   185c2:	b9d9      	cbnz	r1, 185fc <at_monitor_dispatch+0x74>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   185c4:	4628      	mov	r0, r5
   185c6:	f7f8 fcf9 	bl	10fbc <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   185ca:	2200      	movs	r2, #0
   185cc:	1d41      	adds	r1, r0, #5
   185ce:	2300      	movs	r3, #0
   185d0:	4818      	ldr	r0, [pc, #96]	; (18634 <at_monitor_dispatch+0xac>)
   185d2:	f011 ffc6 	bl	2a562 <k_heap_alloc>
	if (!at_notif) {
   185d6:	4604      	mov	r4, r0
   185d8:	b9b8      	cbnz	r0, 1860a <at_monitor_dispatch+0x82>
   185da:	4b17      	ldr	r3, [pc, #92]	; (18638 <at_monitor_dispatch+0xb0>)
   185dc:	4c17      	ldr	r4, [pc, #92]	; (1863c <at_monitor_dispatch+0xb4>)
   185de:	4628      	mov	r0, r5
   185e0:	1ae4      	subs	r4, r4, r3
   185e2:	f00d ffb7 	bl	26554 <z_log_strdup>
   185e6:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("No heap space for incoming notification: %s",
   185e8:	01a4      	lsls	r4, r4, #6
   185ea:	f044 0402 	orr.w	r4, r4, #2
   185ee:	4602      	mov	r2, r0
   185f0:	4913      	ldr	r1, [pc, #76]	; (18640 <at_monitor_dispatch+0xb8>)
   185f2:	4620      	mov	r0, r4
}
   185f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   185f8:	f00d bf99 	b.w	2652e <log_string_sync>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   185fc:	4628      	mov	r0, r5
   185fe:	f012 fdb8 	bl	2b172 <strstr>
   18602:	2800      	cmp	r0, #0
   18604:	d1de      	bne.n	185c4 <at_monitor_dispatch+0x3c>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   18606:	340c      	adds	r4, #12
   18608:	e7c6      	b.n	18598 <at_monitor_dispatch+0x10>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1860a:	4629      	mov	r1, r5
   1860c:	3004      	adds	r0, #4
   1860e:	f012 fd62 	bl	2b0d6 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   18612:	4621      	mov	r1, r4
   18614:	480b      	ldr	r0, [pc, #44]	; (18644 <at_monitor_dispatch+0xbc>)
   18616:	f012 f856 	bl	2a6c6 <k_queue_append>
}
   1861a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_submit(&at_monitor_work);
   1861e:	480a      	ldr	r0, [pc, #40]	; (18648 <at_monitor_dispatch+0xc0>)
   18620:	f00b b84e 	b.w	236c0 <k_work_submit>
   18624:	2000c900 	.word	0x2000c900
   18628:	2000c900 	.word	0x2000c900
   1862c:	2000c8ac 	.word	0x2000c8ac
   18630:	2000c900 	.word	0x2000c900
   18634:	2000c95c 	.word	0x2000c95c
   18638:	0002c344 	.word	0x0002c344
   1863c:	0002c354 	.word	0x0002c354
   18640:	0002dc40 	.word	0x0002dc40
   18644:	2000cae0 	.word	0x2000cae0
   18648:	2000c5c4 	.word	0x2000c5c4

0001864c <at_monitor_task>:
{
   1864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   18650:	4f12      	ldr	r7, [pc, #72]	; (1869c <at_monitor_task+0x50>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   18652:	f8df 8050 	ldr.w	r8, [pc, #80]	; 186a4 <at_monitor_task+0x58>
		k_heap_free(&at_monitor_heap, at_notif);
   18656:	f8df 9050 	ldr.w	r9, [pc, #80]	; 186a8 <at_monitor_task+0x5c>
   1865a:	2200      	movs	r2, #0
   1865c:	2300      	movs	r3, #0
   1865e:	4638      	mov	r0, r7
   18660:	f00a fe9a 	bl	23398 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   18664:	4605      	mov	r5, r0
   18666:	b9b0      	cbnz	r0, 18696 <at_monitor_task+0x4a>
}
   18668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   1866c:	7a23      	ldrb	r3, [r4, #8]
   1866e:	b923      	cbnz	r3, 1867a <at_monitor_task+0x2e>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   18670:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   18672:	b951      	cbnz	r1, 1868a <at_monitor_task+0x3e>
				e->handler(at_notif->data);
   18674:	4630      	mov	r0, r6
   18676:	6863      	ldr	r3, [r4, #4]
   18678:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1867a:	340c      	adds	r4, #12
   1867c:	4544      	cmp	r4, r8
   1867e:	d3f5      	bcc.n	1866c <at_monitor_task+0x20>
		k_heap_free(&at_monitor_heap, at_notif);
   18680:	4629      	mov	r1, r5
   18682:	4648      	mov	r0, r9
   18684:	f011 ff77 	bl	2a576 <k_heap_free>
   18688:	e7e7      	b.n	1865a <at_monitor_task+0xe>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   1868a:	4630      	mov	r0, r6
   1868c:	f012 fd71 	bl	2b172 <strstr>
   18690:	2800      	cmp	r0, #0
   18692:	d1ef      	bne.n	18674 <at_monitor_task+0x28>
   18694:	e7f1      	b.n	1867a <at_monitor_task+0x2e>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   18696:	4c02      	ldr	r4, [pc, #8]	; (186a0 <at_monitor_task+0x54>)
   18698:	1d2e      	adds	r6, r5, #4
   1869a:	e7ef      	b.n	1867c <at_monitor_task+0x30>
   1869c:	2000cae0 	.word	0x2000cae0
   186a0:	2000c8ac 	.word	0x2000c8ac
   186a4:	2000c900 	.word	0x2000c900
   186a8:	2000c95c 	.word	0x2000c95c

000186ac <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   186ac:	4b06      	ldr	r3, [pc, #24]	; (186c8 <is_valid_notification_char+0x1c>)
   186ae:	5cc3      	ldrb	r3, [r0, r3]
   186b0:	f003 0303 	and.w	r3, r3, #3
   186b4:	2b02      	cmp	r3, #2
   186b6:	bf08      	it	eq
   186b8:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   186ba:	3841      	subs	r0, #65	; 0x41
   186bc:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   186be:	2819      	cmp	r0, #25
   186c0:	bf8c      	ite	hi
   186c2:	2000      	movhi	r0, #0
   186c4:	2001      	movls	r0, #1
   186c6:	4770      	bx	lr
   186c8:	00030304 	.word	0x00030304

000186cc <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   186cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   186ce:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   186d0:	2400      	movs	r4, #0
   186d2:	4e0a      	ldr	r6, [pc, #40]	; (186fc <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   186d4:	f856 1b04 	ldr.w	r1, [r6], #4
   186d8:	4608      	mov	r0, r1
   186da:	9101      	str	r1, [sp, #4]
   186dc:	f7f8 fc6e 	bl	10fbc <strlen>
   186e0:	9901      	ldr	r1, [sp, #4]
   186e2:	4602      	mov	r2, r0
   186e4:	4628      	mov	r0, r5
   186e6:	f012 fcfe 	bl	2b0e6 <strncmp>
		if (!diff) {
   186ea:	b128      	cbz	r0, 186f8 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   186ec:	3401      	adds	r4, #1
   186ee:	2c04      	cmp	r4, #4
   186f0:	d1f0      	bne.n	186d4 <is_result+0x8>
			return true;
		}
	}

	return false;
   186f2:	2000      	movs	r0, #0
}
   186f4:	b002      	add	sp, #8
   186f6:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   186f8:	2001      	movs	r0, #1
   186fa:	e7fb      	b.n	186f4 <is_result+0x28>
   186fc:	0002c82c 	.word	0x0002c82c

00018700 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   18700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   18704:	6805      	ldr	r5, [r0, #0]
{
   18706:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   18708:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1870a:	782b      	ldrb	r3, [r5, #0]
{
   1870c:	4680      	mov	r8, r0
   1870e:	460f      	mov	r7, r1
   18710:	4616      	mov	r6, r2
   18712:	2b00      	cmp	r3, #0
   18714:	f000 80ca 	beq.w	188ac <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   18718:	4b66      	ldr	r3, [pc, #408]	; (188b4 <at_parse_process_element+0x1b4>)
   1871a:	781c      	ldrb	r4, [r3, #0]
   1871c:	2c06      	cmp	r4, #6
   1871e:	d110      	bne.n	18742 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   18720:	1c6b      	adds	r3, r5, #1
   18722:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   18724:	9a00      	ldr	r2, [sp, #0]
   18726:	7810      	ldrb	r0, [r2, #0]
   18728:	f7ff ffc0 	bl	186ac <is_valid_notification_char>
   1872c:	b930      	cbnz	r0, 1873c <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1872e:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   18730:	462a      	mov	r2, r5
   18732:	4639      	mov	r1, r7
   18734:	4630      	mov	r0, r6
   18736:	f010 fb5f 	bl	28df8 <at_params_string_put>
   1873a:	e01c      	b.n	18776 <at_parse_process_element+0x76>
			tmpstr++;
   1873c:	3201      	adds	r2, #1
   1873e:	9200      	str	r2, [sp, #0]
   18740:	e7f0      	b.n	18724 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   18742:	2c07      	cmp	r4, #7
   18744:	d125      	bne.n	18792 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   18746:	4668      	mov	r0, sp
   18748:	f010 facc 	bl	28ce4 <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1874c:	4a5a      	ldr	r2, [pc, #360]	; (188b8 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   1874e:	9b00      	ldr	r3, [sp, #0]
   18750:	7819      	ldrb	r1, [r3, #0]
   18752:	5c89      	ldrb	r1, [r1, r2]
   18754:	0749      	lsls	r1, r1, #29
   18756:	d115      	bne.n	18784 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   18758:	462a      	mov	r2, r5
   1875a:	1b5b      	subs	r3, r3, r5
   1875c:	4639      	mov	r1, r7
   1875e:	4630      	mov	r0, r6
   18760:	f010 fb4a 	bl	28df8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   18764:	9b00      	ldr	r3, [sp, #0]
   18766:	781a      	ldrb	r2, [r3, #0]
   18768:	2a3d      	cmp	r2, #61	; 0x3d
   1876a:	d10e      	bne.n	1878a <at_parse_process_element+0x8a>
   1876c:	785a      	ldrb	r2, [r3, #1]
   1876e:	2a3f      	cmp	r2, #63	; 0x3f
   18770:	d101      	bne.n	18776 <at_parse_process_element+0x76>
			tmpstr += 2;
   18772:	3302      	adds	r3, #2
			tmpstr++;
   18774:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   18776:	2000      	movs	r0, #0
	*str = tmpstr;
   18778:	9b00      	ldr	r3, [sp, #0]
   1877a:	f8c8 3000 	str.w	r3, [r8]
}
   1877e:	b023      	add	sp, #140	; 0x8c
   18780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   18784:	3301      	adds	r3, #1
   18786:	9300      	str	r3, [sp, #0]
   18788:	e7e1      	b.n	1874e <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1878a:	2a3f      	cmp	r2, #63	; 0x3f
   1878c:	d1f3      	bne.n	18776 <at_parse_process_element+0x76>
			tmpstr++;
   1878e:	3301      	adds	r3, #1
   18790:	e7f0      	b.n	18774 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   18792:	2c08      	cmp	r4, #8
   18794:	d103      	bne.n	1879e <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   18796:	4610      	mov	r0, r2
   18798:	f010 fb04 	bl	28da4 <at_params_empty_put>
   1879c:	e7eb      	b.n	18776 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   1879e:	2c02      	cmp	r4, #2
   187a0:	d111      	bne.n	187c6 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   187a2:	9a00      	ldr	r2, [sp, #0]
   187a4:	7811      	ldrb	r1, [r2, #0]
   187a6:	4608      	mov	r0, r1
   187a8:	f010 fa93 	bl	28cd2 <is_lfcr>
   187ac:	b918      	cbnz	r0, 187b6 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187ae:	b111      	cbz	r1, 187b6 <at_parse_process_element+0xb6>
			tmpstr++;
   187b0:	3201      	adds	r2, #1
   187b2:	9200      	str	r2, [sp, #0]
   187b4:	e7f5      	b.n	187a2 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   187b6:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   187b8:	462a      	mov	r2, r5
   187ba:	4639      	mov	r1, r7
   187bc:	4630      	mov	r0, r6
   187be:	f010 fb1b 	bl	28df8 <at_params_string_put>
		tmpstr++;
   187c2:	9b00      	ldr	r3, [sp, #0]
   187c4:	e7e3      	b.n	1878e <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   187c6:	2c03      	cmp	r4, #3
   187c8:	d109      	bne.n	187de <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   187ca:	9b00      	ldr	r3, [sp, #0]
   187cc:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   187ce:	2a22      	cmp	r2, #34	; 0x22
   187d0:	d003      	beq.n	187da <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187d2:	b112      	cbz	r2, 187da <at_parse_process_element+0xda>
			tmpstr++;
   187d4:	3301      	adds	r3, #1
   187d6:	9300      	str	r3, [sp, #0]
   187d8:	e7f7      	b.n	187ca <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   187da:	1b5b      	subs	r3, r3, r5
   187dc:	e7ec      	b.n	187b8 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   187de:	2c01      	cmp	r4, #1
   187e0:	d13c      	bne.n	1885c <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   187e2:	4628      	mov	r0, r5
   187e4:	220a      	movs	r2, #10
   187e6:	a901      	add	r1, sp, #4
   187e8:	f00c fc2c 	bl	25044 <strtoul>
		tmpstr = next;
   187ec:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   187ee:	4d33      	ldr	r5, [pc, #204]	; (188bc <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   187f0:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   187f2:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   187f4:	9800      	ldr	r0, [sp, #0]
   187f6:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   187f8:	2b29      	cmp	r3, #41	; 0x29
   187fa:	d01f      	beq.n	1883c <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187fc:	b1f3      	cbz	r3, 1883c <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   187fe:	3b2c      	subs	r3, #44	; 0x2c
   18800:	b2db      	uxtb	r3, r3
   18802:	3001      	adds	r0, #1
   18804:	2b11      	cmp	r3, #17
				tmparray[i++] =
   18806:	9000      	str	r0, [sp, #0]
   18808:	d826      	bhi.n	18858 <at_parse_process_element+0x158>
   1880a:	fa25 f303 	lsr.w	r3, r5, r3
   1880e:	07db      	lsls	r3, r3, #31
   18810:	d522      	bpl.n	18858 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   18812:	220a      	movs	r2, #10
   18814:	a901      	add	r1, sp, #4
   18816:	f00c fc15 	bl	25044 <strtoul>
				tmparray[i++] =
   1881a:	ab22      	add	r3, sp, #136	; 0x88
   1881c:	f104 0901 	add.w	r9, r4, #1
   18820:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   18824:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   18828:	9800      	ldr	r0, [sp, #0]
   1882a:	f7f8 fbc7 	bl	10fbc <strlen>
   1882e:	4604      	mov	r4, r0
   18830:	9801      	ldr	r0, [sp, #4]
   18832:	f7f8 fbc3 	bl	10fbc <strlen>
   18836:	4284      	cmp	r4, r0
   18838:	d107      	bne.n	1884a <at_parse_process_element+0x14a>
				tmparray[i++] =
   1883a:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1883c:	4639      	mov	r1, r7
   1883e:	4630      	mov	r0, r6
   18840:	00a3      	lsls	r3, r4, #2
   18842:	aa02      	add	r2, sp, #8
   18844:	f010 fafb 	bl	28e3e <at_params_array_put>
		tmpstr++;
   18848:	e7bb      	b.n	187c2 <at_parse_process_element+0xc2>
					tmpstr = next;
   1884a:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1884c:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   18850:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   18852:	d0f2      	beq.n	1883a <at_parse_process_element+0x13a>
				tmpstr++;
   18854:	464c      	mov	r4, r9
   18856:	e7cd      	b.n	187f4 <at_parse_process_element+0xf4>
   18858:	46a1      	mov	r9, r4
   1885a:	e7fb      	b.n	18854 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   1885c:	2c04      	cmp	r4, #4
   1885e:	d10d      	bne.n	1887c <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   18860:	220a      	movs	r2, #10
   18862:	4628      	mov	r0, r5
   18864:	a902      	add	r1, sp, #8
   18866:	f00c fb69 	bl	24f3c <strtoll>
   1886a:	460b      	mov	r3, r1
		tmpstr = next;
   1886c:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1886e:	4602      	mov	r2, r0
		tmpstr = next;
   18870:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   18872:	4630      	mov	r0, r6
   18874:	4639      	mov	r1, r7
   18876:	f010 faaa 	bl	28dce <at_params_int_put>
   1887a:	e77c      	b.n	18776 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   1887c:	2c05      	cmp	r4, #5
   1887e:	d10b      	bne.n	18898 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   18880:	490d      	ldr	r1, [pc, #52]	; (188b8 <at_parse_process_element+0x1b8>)
   18882:	9b00      	ldr	r3, [sp, #0]
   18884:	781a      	ldrb	r2, [r3, #0]
   18886:	5c52      	ldrb	r2, [r2, r1]
   18888:	f012 0f44 	tst.w	r2, #68	; 0x44
   1888c:	d101      	bne.n	18892 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   1888e:	1b5b      	subs	r3, r3, r5
   18890:	e74e      	b.n	18730 <at_parse_process_element+0x30>
			tmpstr++;
   18892:	3301      	adds	r3, #1
   18894:	9300      	str	r3, [sp, #0]
   18896:	e7f4      	b.n	18882 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   18898:	2c09      	cmp	r4, #9
   1889a:	f47f af6c 	bne.w	18776 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   1889e:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   188a0:	781a      	ldrb	r2, [r3, #0]
   188a2:	2a00      	cmp	r2, #0
   188a4:	d0f3      	beq.n	1888e <at_parse_process_element+0x18e>
			tmpstr++;
   188a6:	3301      	adds	r3, #1
   188a8:	9300      	str	r3, [sp, #0]
   188aa:	e7f8      	b.n	1889e <at_parse_process_element+0x19e>
		return -1;
   188ac:	f04f 30ff 	mov.w	r0, #4294967295
   188b0:	e765      	b.n	1877e <at_parse_process_element+0x7e>
   188b2:	bf00      	nop
   188b4:	2000f076 	.word	0x2000f076
   188b8:	00030304 	.word	0x00030304
   188bc:	00024001 	.word	0x00024001

000188c0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   188c0:	b510      	push	{r4, lr}
   188c2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   188c4:	f7f8 fb7a 	bl	10fbc <strlen>
   188c8:	2801      	cmp	r0, #1
   188ca:	d922      	bls.n	18912 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   188cc:	7821      	ldrb	r1, [r4, #0]
   188ce:	4b13      	ldr	r3, [pc, #76]	; (1891c <is_command+0x5c>)
   188d0:	5cca      	ldrb	r2, [r1, r3]
   188d2:	f002 0203 	and.w	r2, r2, #3
   188d6:	2a02      	cmp	r2, #2
   188d8:	bf08      	it	eq
   188da:	3920      	subeq	r1, #32
   188dc:	2941      	cmp	r1, #65	; 0x41
   188de:	461a      	mov	r2, r3
   188e0:	d117      	bne.n	18912 <is_command+0x52>
   188e2:	7863      	ldrb	r3, [r4, #1]
   188e4:	5cd2      	ldrb	r2, [r2, r3]
   188e6:	f002 0203 	and.w	r2, r2, #3
   188ea:	2a02      	cmp	r2, #2
   188ec:	bf08      	it	eq
   188ee:	3b20      	subeq	r3, #32
   188f0:	2b54      	cmp	r3, #84	; 0x54
   188f2:	d10e      	bne.n	18912 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   188f4:	78a2      	ldrb	r2, [r4, #2]
   188f6:	2a25      	cmp	r2, #37	; 0x25
   188f8:	d00d      	beq.n	18916 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   188fa:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   188fe:	2b23      	cmp	r3, #35	; 0x23
   18900:	d009      	beq.n	18916 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   18902:	4610      	mov	r0, r2
   18904:	f010 f9e5 	bl	28cd2 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   18908:	b910      	cbnz	r0, 18910 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1890a:	fab2 f082 	clz	r0, r2
   1890e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   18910:	bd10      	pop	{r4, pc}
		return false;
   18912:	2000      	movs	r0, #0
   18914:	e7fc      	b.n	18910 <is_command+0x50>
		return true;
   18916:	2001      	movs	r0, #1
   18918:	e7fa      	b.n	18910 <is_command+0x50>
   1891a:	bf00      	nop
   1891c:	00030304 	.word	0x00030304

00018920 <at_parse_detect_type>:
{
   18920:	b570      	push	{r4, r5, r6, lr}
   18922:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   18924:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   18926:	4e64      	ldr	r6, [pc, #400]	; (18ab8 <at_parse_detect_type+0x198>)
   18928:	2900      	cmp	r1, #0
   1892a:	d137      	bne.n	1899c <at_parse_detect_type+0x7c>
   1892c:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1892e:	2b2b      	cmp	r3, #43	; 0x2b
   18930:	d001      	beq.n	18936 <at_parse_detect_type+0x16>
   18932:	2b25      	cmp	r3, #37	; 0x25
   18934:	d132      	bne.n	1899c <at_parse_detect_type+0x7c>
	state = new_state;
   18936:	2206      	movs	r2, #6
   18938:	4b60      	ldr	r3, [pc, #384]	; (18abc <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1893a:	4620      	mov	r0, r4
	state = new_state;
   1893c:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1893e:	4960      	ldr	r1, [pc, #384]	; (18ac0 <at_parse_detect_type+0x1a0>)
   18940:	2205      	movs	r2, #5
   18942:	f012 fbd0 	bl	2b0e6 <strncmp>
   18946:	b920      	cbnz	r0, 18952 <at_parse_detect_type+0x32>
			retval = true;
   18948:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   1894a:	7030      	strb	r0, [r6, #0]
	return 0;
   1894c:	2000      	movs	r0, #0
	*str = tmpstr;
   1894e:	602c      	str	r4, [r5, #0]
	return 0;
   18950:	e064      	b.n	18a1c <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   18952:	2205      	movs	r2, #5
   18954:	4620      	mov	r0, r4
   18956:	495b      	ldr	r1, [pc, #364]	; (18ac4 <at_parse_detect_type+0x1a4>)
   18958:	f012 fbc5 	bl	2b0e6 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1895c:	2800      	cmp	r0, #0
   1895e:	d0f3      	beq.n	18948 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   18960:	220b      	movs	r2, #11
   18962:	4620      	mov	r0, r4
   18964:	4958      	ldr	r1, [pc, #352]	; (18ac8 <at_parse_detect_type+0x1a8>)
   18966:	f012 fbbe 	bl	2b0e6 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1896a:	2800      	cmp	r0, #0
   1896c:	d0ec      	beq.n	18948 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1896e:	220a      	movs	r2, #10
   18970:	4620      	mov	r0, r4
   18972:	4956      	ldr	r1, [pc, #344]	; (18acc <at_parse_detect_type+0x1ac>)
   18974:	f012 fbb7 	bl	2b0e6 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   18978:	2800      	cmp	r0, #0
   1897a:	d0e5      	beq.n	18948 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1897c:	220b      	movs	r2, #11
   1897e:	4620      	mov	r0, r4
   18980:	4953      	ldr	r1, [pc, #332]	; (18ad0 <at_parse_detect_type+0x1b0>)
   18982:	f012 fbb0 	bl	2b0e6 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   18986:	2800      	cmp	r0, #0
   18988:	d0de      	beq.n	18948 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1898a:	2207      	movs	r2, #7
   1898c:	4620      	mov	r0, r4
   1898e:	4951      	ldr	r1, [pc, #324]	; (18ad4 <at_parse_detect_type+0x1b4>)
   18990:	f012 fba9 	bl	2b0e6 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   18994:	fab0 f080 	clz	r0, r0
   18998:	0940      	lsrs	r0, r0, #5
   1899a:	e7d6      	b.n	1894a <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   1899c:	7833      	ldrb	r3, [r6, #0]
   1899e:	b113      	cbz	r3, 189a6 <at_parse_detect_type+0x86>
	state = new_state;
   189a0:	4b46      	ldr	r3, [pc, #280]	; (18abc <at_parse_detect_type+0x19c>)
   189a2:	2202      	movs	r2, #2
   189a4:	e043      	b.n	18a2e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   189a6:	2900      	cmp	r1, #0
   189a8:	dd39      	ble.n	18a1e <at_parse_detect_type+0xfe>
   189aa:	4622      	mov	r2, r4
   189ac:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   189ae:	f812 0b01 	ldrb.w	r0, [r2], #1
   189b2:	f010 f98e 	bl	28cd2 <is_lfcr>
   189b6:	2800      	cmp	r0, #0
   189b8:	d1f8      	bne.n	189ac <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   189ba:	4630      	mov	r0, r6
   189bc:	f7f8 fafe 	bl	10fbc <strlen>
   189c0:	2803      	cmp	r0, #3
   189c2:	d970      	bls.n	18aa6 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   189c4:	7832      	ldrb	r2, [r6, #0]
   189c6:	4b44      	ldr	r3, [pc, #272]	; (18ad8 <at_parse_detect_type+0x1b8>)
   189c8:	5cd1      	ldrb	r1, [r2, r3]
   189ca:	f001 0103 	and.w	r1, r1, #3
   189ce:	2902      	cmp	r1, #2
   189d0:	bf08      	it	eq
   189d2:	3a20      	subeq	r2, #32
   189d4:	2a41      	cmp	r2, #65	; 0x41
   189d6:	d166      	bne.n	18aa6 <at_parse_detect_type+0x186>
   189d8:	7872      	ldrb	r2, [r6, #1]
   189da:	5c99      	ldrb	r1, [r3, r2]
   189dc:	f001 0103 	and.w	r1, r1, #3
   189e0:	2902      	cmp	r1, #2
   189e2:	bf08      	it	eq
   189e4:	3a20      	subeq	r2, #32
   189e6:	2a54      	cmp	r2, #84	; 0x54
   189e8:	d15d      	bne.n	18aa6 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   189ea:	78b2      	ldrb	r2, [r6, #2]
   189ec:	5c99      	ldrb	r1, [r3, r2]
   189ee:	f001 0103 	and.w	r1, r1, #3
   189f2:	2902      	cmp	r1, #2
   189f4:	bf08      	it	eq
   189f6:	3a20      	subeq	r2, #32
   189f8:	2a2b      	cmp	r2, #43	; 0x2b
   189fa:	d00a      	beq.n	18a12 <at_parse_detect_type+0xf2>
   189fc:	2a25      	cmp	r2, #37	; 0x25
   189fe:	d152      	bne.n	18aa6 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   18a00:	78f2      	ldrb	r2, [r6, #3]
   18a02:	5c9b      	ldrb	r3, [r3, r2]
   18a04:	f003 0303 	and.w	r3, r3, #3
   18a08:	2b02      	cmp	r3, #2
   18a0a:	bf08      	it	eq
   18a0c:	3a20      	subeq	r2, #32
   18a0e:	2a58      	cmp	r2, #88	; 0x58
   18a10:	d049      	beq.n	18aa6 <at_parse_detect_type+0x186>
	state = new_state;
   18a12:	2209      	movs	r2, #9
		return -2;
   18a14:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   18a18:	4b28      	ldr	r3, [pc, #160]	; (18abc <at_parse_detect_type+0x19c>)
   18a1a:	701a      	strb	r2, [r3, #0]
}
   18a1c:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   18a1e:	d108      	bne.n	18a32 <at_parse_detect_type+0x112>
   18a20:	4620      	mov	r0, r4
   18a22:	f7ff ff4d 	bl	188c0 <is_command>
   18a26:	4b25      	ldr	r3, [pc, #148]	; (18abc <at_parse_detect_type+0x19c>)
   18a28:	2800      	cmp	r0, #0
   18a2a:	d0ba      	beq.n	189a2 <at_parse_detect_type+0x82>
	state = new_state;
   18a2c:	2207      	movs	r2, #7
   18a2e:	701a      	strb	r2, [r3, #0]
}
   18a30:	e78c      	b.n	1894c <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   18a32:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   18a34:	4b28      	ldr	r3, [pc, #160]	; (18ad8 <at_parse_detect_type+0x1b8>)
   18a36:	5cd3      	ldrb	r3, [r2, r3]
   18a38:	0759      	lsls	r1, r3, #29
   18a3a:	d403      	bmi.n	18a44 <at_parse_detect_type+0x124>
   18a3c:	2a2d      	cmp	r2, #45	; 0x2d
   18a3e:	d001      	beq.n	18a44 <at_parse_detect_type+0x124>
   18a40:	2a2b      	cmp	r2, #43	; 0x2b
   18a42:	d102      	bne.n	18a4a <at_parse_detect_type+0x12a>
	state = new_state;
   18a44:	2204      	movs	r2, #4
   18a46:	4b1d      	ldr	r3, [pc, #116]	; (18abc <at_parse_detect_type+0x19c>)
   18a48:	e7f1      	b.n	18a2e <at_parse_detect_type+0x10e>
	if (chr == '"') {
   18a4a:	2a22      	cmp	r2, #34	; 0x22
   18a4c:	d006      	beq.n	18a5c <at_parse_detect_type+0x13c>
	if (chr == '(') {
   18a4e:	2a28      	cmp	r2, #40	; 0x28
   18a50:	d109      	bne.n	18a66 <at_parse_detect_type+0x146>
   18a52:	2201      	movs	r2, #1
   18a54:	4b19      	ldr	r3, [pc, #100]	; (18abc <at_parse_detect_type+0x19c>)
		tmpstr++;
   18a56:	4414      	add	r4, r2
	state = new_state;
   18a58:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   18a5a:	e777      	b.n	1894c <at_parse_detect_type+0x2c>
	state = new_state;
   18a5c:	2203      	movs	r2, #3
   18a5e:	4b17      	ldr	r3, [pc, #92]	; (18abc <at_parse_detect_type+0x19c>)
		tmpstr++;
   18a60:	3401      	adds	r4, #1
	state = new_state;
   18a62:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   18a64:	e772      	b.n	1894c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   18a66:	4610      	mov	r0, r2
   18a68:	f010 f933 	bl	28cd2 <is_lfcr>
   18a6c:	b178      	cbz	r0, 18a8e <at_parse_detect_type+0x16e>
   18a6e:	4913      	ldr	r1, [pc, #76]	; (18abc <at_parse_detect_type+0x19c>)
   18a70:	7808      	ldrb	r0, [r1, #0]
   18a72:	2804      	cmp	r0, #4
   18a74:	d108      	bne.n	18a88 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   18a76:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   18a7a:	f010 f92a 	bl	28cd2 <is_lfcr>
   18a7e:	2800      	cmp	r0, #0
   18a80:	d1f9      	bne.n	18a76 <at_parse_detect_type+0x156>
	state = new_state;
   18a82:	2305      	movs	r3, #5
   18a84:	700b      	strb	r3, [r1, #0]
}
   18a86:	e761      	b.n	1894c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   18a88:	2808      	cmp	r0, #8
   18a8a:	f43f af5f 	beq.w	1894c <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18a8e:	3a2c      	subs	r2, #44	; 0x2c
   18a90:	b2d2      	uxtb	r2, r2
   18a92:	2a11      	cmp	r2, #17
   18a94:	d80c      	bhi.n	18ab0 <at_parse_detect_type+0x190>
   18a96:	4b11      	ldr	r3, [pc, #68]	; (18adc <at_parse_detect_type+0x1bc>)
   18a98:	fa23 f202 	lsr.w	r2, r3, r2
   18a9c:	07d3      	lsls	r3, r2, #31
   18a9e:	d507      	bpl.n	18ab0 <at_parse_detect_type+0x190>
	state = new_state;
   18aa0:	2208      	movs	r2, #8
   18aa2:	4b06      	ldr	r3, [pc, #24]	; (18abc <at_parse_detect_type+0x19c>)
   18aa4:	e7c3      	b.n	18a2e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   18aa6:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18aa8:	2b2b      	cmp	r3, #43	; 0x2b
   18aaa:	d001      	beq.n	18ab0 <at_parse_detect_type+0x190>
   18aac:	2b25      	cmp	r3, #37	; 0x25
   18aae:	d1c0      	bne.n	18a32 <at_parse_detect_type+0x112>
		return -1;
   18ab0:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   18ab4:	602c      	str	r4, [r5, #0]
		return -1;
   18ab6:	e7b1      	b.n	18a1c <at_parse_detect_type+0xfc>
   18ab8:	2000f075 	.word	0x2000f075
   18abc:	2000f076 	.word	0x2000f076
   18ac0:	0002dc77 	.word	0x0002dc77
   18ac4:	0002dc7d 	.word	0x0002dc7d
   18ac8:	0002dc83 	.word	0x0002dc83
   18acc:	0002dc8f 	.word	0x0002dc8f
   18ad0:	0002dc9a 	.word	0x0002dc9a
   18ad4:	0002dca6 	.word	0x0002dca6
   18ad8:	00030304 	.word	0x00030304
   18adc:	00024001 	.word	0x00024001

00018ae0 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   18ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ae4:	4689      	mov	r9, r1
   18ae6:	4616      	mov	r6, r2
   18ae8:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   18aea:	4680      	mov	r8, r0
{
   18aec:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   18aee:	2800      	cmp	r0, #0
   18af0:	f000 8097 	beq.w	18c22 <at_parser_max_params_from_str+0x142>
   18af4:	2a00      	cmp	r2, #0
   18af6:	f000 8094 	beq.w	18c22 <at_parser_max_params_from_str+0x142>
   18afa:	6853      	ldr	r3, [r2, #4]
   18afc:	2b00      	cmp	r3, #0
   18afe:	f000 8090 	beq.w	18c22 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   18b02:	2500      	movs	r5, #0
	int index = 0;
   18b04:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   18b06:	4610      	mov	r0, r2
   18b08:	f010 f926 	bl	28d58 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   18b0c:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   18b0e:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   18b12:	429f      	cmp	r7, r3
   18b14:	bf28      	it	cs
   18b16:	461f      	movcs	r7, r3
	state = IDLE;
   18b18:	4b43      	ldr	r3, [pc, #268]	; (18c28 <at_parser_max_params_from_str+0x148>)
   18b1a:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   18b1c:	4b43      	ldr	r3, [pc, #268]	; (18c2c <at_parser_max_params_from_str+0x14c>)
   18b1e:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   18b20:	9b03      	ldr	r3, [sp, #12]
   18b22:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18b24:	2a00      	cmp	r2, #0
   18b26:	d055      	beq.n	18bd4 <at_parser_max_params_from_str+0xf4>
   18b28:	42a7      	cmp	r7, r4
   18b2a:	d953      	bls.n	18bd4 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   18b2c:	4940      	ldr	r1, [pc, #256]	; (18c30 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   18b2e:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   18b30:	5c52      	ldrb	r2, [r2, r1]
   18b32:	0711      	lsls	r1, r2, #28
			str++;
   18b34:	bf48      	it	mi
   18b36:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   18b38:	4621      	mov	r1, r4
			str++;
   18b3a:	bf48      	it	mi
   18b3c:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   18b3e:	f7ff feef 	bl	18920 <at_parse_detect_type>
		if (ret == -1) {
   18b42:	1c42      	adds	r2, r0, #1
   18b44:	d046      	beq.n	18bd4 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   18b46:	3002      	adds	r0, #2
			index = 0;
   18b48:	bf08      	it	eq
   18b4a:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   18b4c:	4632      	mov	r2, r6
   18b4e:	4621      	mov	r1, r4
   18b50:	a803      	add	r0, sp, #12
			str = *at_params_str;
   18b52:	bf08      	it	eq
   18b54:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   18b58:	f7ff fdd2 	bl	18700 <at_parse_process_element>
   18b5c:	3001      	adds	r0, #1
   18b5e:	d039      	beq.n	18bd4 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   18b60:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18b62:	7813      	ldrb	r3, [r2, #0]
   18b64:	3b2c      	subs	r3, #44	; 0x2c
   18b66:	b2db      	uxtb	r3, r3
   18b68:	2b11      	cmp	r3, #17
   18b6a:	d81b      	bhi.n	18ba4 <at_parser_max_params_from_str+0xc4>
   18b6c:	4931      	ldr	r1, [pc, #196]	; (18c34 <at_parser_max_params_from_str+0x154>)
   18b6e:	fa21 f303 	lsr.w	r3, r1, r3
   18b72:	07db      	lsls	r3, r3, #31
   18b74:	d516      	bpl.n	18ba4 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   18b76:	7850      	ldrb	r0, [r2, #1]
   18b78:	f010 f8ab 	bl	28cd2 <is_lfcr>
   18b7c:	b178      	cbz	r0, 18b9e <at_parser_max_params_from_str+0xbe>
				index++;
   18b7e:	3401      	adds	r4, #1
				if (index == max_params) {
   18b80:	42bc      	cmp	r4, r7
   18b82:	d046      	beq.n	18c12 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   18b84:	4621      	mov	r1, r4
   18b86:	a803      	add	r0, sp, #12
   18b88:	f7ff feca 	bl	18920 <at_parse_detect_type>
   18b8c:	3001      	adds	r0, #1
   18b8e:	d021      	beq.n	18bd4 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   18b90:	4632      	mov	r2, r6
   18b92:	4621      	mov	r1, r4
   18b94:	a803      	add	r0, sp, #12
   18b96:	f7ff fdb3 	bl	18700 <at_parse_process_element>
   18b9a:	3001      	adds	r0, #1
   18b9c:	d01a      	beq.n	18bd4 <at_parser_max_params_from_str+0xf4>
			str++;
   18b9e:	9b03      	ldr	r3, [sp, #12]
   18ba0:	3301      	adds	r3, #1
   18ba2:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   18ba4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18ba8:	f89b 0000 	ldrb.w	r0, [fp]
   18bac:	f010 f891 	bl	28cd2 <is_lfcr>
   18bb0:	b350      	cbz	r0, 18c08 <at_parser_max_params_from_str+0x128>
   18bb2:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   18bb6:	eba1 0a0b 	sub.w	sl, r1, fp
   18bba:	9101      	str	r1, [sp, #4]
   18bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
   18bc0:	4610      	mov	r0, r2
   18bc2:	f010 f886 	bl	28cd2 <is_lfcr>
   18bc6:	9b01      	ldr	r3, [sp, #4]
   18bc8:	2800      	cmp	r0, #0
   18bca:	d1f4      	bne.n	18bb6 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18bcc:	b99a      	cbnz	r2, 18bf6 <at_parser_max_params_from_str+0x116>
				str += i;
   18bce:	9b03      	ldr	r3, [sp, #12]
   18bd0:	4453      	add	r3, sl
   18bd2:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   18bd4:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   18bd6:	b9f5      	cbnz	r5, 18c16 <at_parser_max_params_from_str+0x136>
   18bd8:	7823      	ldrb	r3, [r4, #0]
   18bda:	b11b      	cbz	r3, 18be4 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   18bdc:	4620      	mov	r0, r4
   18bde:	f7ff fd75 	bl	186cc <is_result>
   18be2:	b1d8      	cbz	r0, 18c1c <at_parser_max_params_from_str+0x13c>
	return 0;
   18be4:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   18be6:	f1b9 0f00 	cmp.w	r9, #0
   18bea:	d001      	beq.n	18bf0 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   18bec:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   18bf0:	b005      	add	sp, #20
   18bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18bf6:	2a2b      	cmp	r2, #43	; 0x2b
   18bf8:	d0e9      	beq.n	18bce <at_parser_max_params_from_str+0xee>
   18bfa:	2a25      	cmp	r2, #37	; 0x25
   18bfc:	d0e7      	beq.n	18bce <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   18bfe:	4618      	mov	r0, r3
   18c00:	f7ff fd64 	bl	186cc <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   18c04:	2800      	cmp	r0, #0
   18c06:	d1e2      	bne.n	18bce <at_parser_max_params_from_str+0xee>
		index++;
   18c08:	3401      	adds	r4, #1
			oversized = true;
   18c0a:	42bc      	cmp	r4, r7
   18c0c:	bf08      	it	eq
   18c0e:	2501      	moveq	r5, #1
   18c10:	e786      	b.n	18b20 <at_parser_max_params_from_str+0x40>
					oversized = true;
   18c12:	4605      	mov	r5, r0
   18c14:	e7de      	b.n	18bd4 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   18c16:	f06f 0006 	mvn.w	r0, #6
   18c1a:	e7e4      	b.n	18be6 <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   18c1c:	f06f 000a 	mvn.w	r0, #10
   18c20:	e7e1      	b.n	18be6 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   18c22:	f06f 0015 	mvn.w	r0, #21
   18c26:	e7e3      	b.n	18bf0 <at_parser_max_params_from_str+0x110>
   18c28:	2000f076 	.word	0x2000f076
   18c2c:	2000f075 	.word	0x2000f075
   18c30:	00030304 	.word	0x00030304
   18c34:	00024001 	.word	0x00024001

00018c38 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   18c38:	b510      	push	{r4, lr}
   18c3a:	4604      	mov	r4, r0
   18c3c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   18c3e:	2240      	movs	r2, #64	; 0x40
   18c40:	2100      	movs	r1, #0
   18c42:	4668      	mov	r0, sp
   18c44:	f012 f920 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   18c48:	2201      	movs	r2, #1
   18c4a:	4620      	mov	r0, r4
   18c4c:	a902      	add	r1, sp, #8
   18c4e:	f000 ff87 	bl	19b60 <parse_rrc_mode>
	if (err) {
   18c52:	b160      	cbz	r0, 18c6e <at_handler_cscon+0x36>
   18c54:	4a09      	ldr	r2, [pc, #36]	; (18c7c <at_handler_cscon+0x44>)
   18c56:	4b0a      	ldr	r3, [pc, #40]	; (18c80 <at_handler_cscon+0x48>)
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   18c58:	490a      	ldr	r1, [pc, #40]	; (18c84 <at_handler_cscon+0x4c>)
   18c5a:	1a9b      	subs	r3, r3, r2
   18c5c:	08db      	lsrs	r3, r3, #3
   18c5e:	019b      	lsls	r3, r3, #6
   18c60:	4602      	mov	r2, r0
   18c62:	f043 0001 	orr.w	r0, r3, #1
   18c66:	f00d fc62 	bl	2652e <log_string_sync>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   18c6a:	b010      	add	sp, #64	; 0x40
   18c6c:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   18c6e:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   18c70:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   18c72:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   18c76:	f000 fe83 	bl	19980 <event_handler_list_dispatch>
   18c7a:	e7f6      	b.n	18c6a <at_handler_cscon+0x32>
   18c7c:	0002c344 	.word	0x0002c344
   18c80:	0002c3a4 	.word	0x0002c3a4
   18c84:	0002dcd1 	.word	0x0002dcd1

00018c88 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   18c88:	b510      	push	{r4, lr}
   18c8a:	4604      	mov	r4, r0
   18c8c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   18c8e:	2100      	movs	r1, #0
   18c90:	2240      	movs	r2, #64	; 0x40
   18c92:	4668      	mov	r0, sp
   18c94:	f012 f8f8 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   18c98:	4620      	mov	r0, r4
   18c9a:	a902      	add	r1, sp, #8
   18c9c:	f7f8 f998 	bl	10fd0 <parse_edrx>
	if (err) {
   18ca0:	b160      	cbz	r0, 18cbc <at_handler_cedrxp+0x34>
   18ca2:	4a0a      	ldr	r2, [pc, #40]	; (18ccc <at_handler_cedrxp+0x44>)
   18ca4:	4b0a      	ldr	r3, [pc, #40]	; (18cd0 <at_handler_cedrxp+0x48>)
		LOG_ERR("Can't parse eDRX, error: %d", err);
   18ca6:	490b      	ldr	r1, [pc, #44]	; (18cd4 <at_handler_cedrxp+0x4c>)
   18ca8:	1a9b      	subs	r3, r3, r2
   18caa:	08db      	lsrs	r3, r3, #3
   18cac:	019b      	lsls	r3, r3, #6
   18cae:	4602      	mov	r2, r0
   18cb0:	f043 0001 	orr.w	r0, r3, #1
   18cb4:	f00d fc3b 	bl	2652e <log_string_sync>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   18cb8:	b010      	add	sp, #64	; 0x40
   18cba:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   18cbc:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   18cbe:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   18cc0:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   18cc4:	f000 fe5c 	bl	19980 <event_handler_list_dispatch>
   18cc8:	e7f6      	b.n	18cb8 <at_handler_cedrxp+0x30>
   18cca:	bf00      	nop
   18ccc:	0002c344 	.word	0x0002c344
   18cd0:	0002c3a4 	.word	0x0002c3a4
   18cd4:	0002dcf8 	.word	0x0002dcf8

00018cd8 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   18cd8:	b510      	push	{r4, lr}
   18cda:	4604      	mov	r4, r0
   18cdc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   18cde:	2100      	movs	r1, #0
   18ce0:	2240      	movs	r2, #64	; 0x40
   18ce2:	4668      	mov	r0, sp
   18ce4:	f012 f8d0 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   18ce8:	4620      	mov	r0, r4
   18cea:	a902      	add	r1, sp, #8
   18cec:	f001 f896 	bl	19e1c <parse_xt3412>
	if (err) {
   18cf0:	b160      	cbz	r0, 18d0c <at_handler_xt3412+0x34>
   18cf2:	4a0e      	ldr	r2, [pc, #56]	; (18d2c <at_handler_xt3412+0x54>)
   18cf4:	4b0e      	ldr	r3, [pc, #56]	; (18d30 <at_handler_xt3412+0x58>)
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   18cf6:	490f      	ldr	r1, [pc, #60]	; (18d34 <at_handler_xt3412+0x5c>)
   18cf8:	1a9b      	subs	r3, r3, r2
   18cfa:	08db      	lsrs	r3, r3, #3
   18cfc:	019b      	lsls	r3, r3, #6
   18cfe:	4602      	mov	r2, r0
   18d00:	f043 0001 	orr.w	r0, r3, #1
   18d04:	f00d fc13 	bl	2652e <log_string_sync>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   18d08:	b010      	add	sp, #64	; 0x40
   18d0a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   18d0c:	2300      	movs	r3, #0
   18d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   18d12:	f241 3288 	movw	r2, #5000	; 0x1388
   18d16:	4299      	cmp	r1, r3
   18d18:	bf08      	it	eq
   18d1a:	4290      	cmpeq	r0, r2
   18d1c:	d1f4      	bne.n	18d08 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   18d1e:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   18d20:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   18d22:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   18d26:	f000 fe2b 	bl	19980 <event_handler_list_dispatch>
   18d2a:	e7ed      	b.n	18d08 <at_handler_xt3412+0x30>
   18d2c:	0002c344 	.word	0x0002c344
   18d30:	0002c3a4 	.word	0x0002c3a4
   18d34:	0002dd14 	.word	0x0002dd14

00018d38 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   18d38:	b530      	push	{r4, r5, lr}
   18d3a:	4605      	mov	r5, r0
   18d3c:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   18d3e:	2240      	movs	r2, #64	; 0x40
   18d40:	2100      	movs	r1, #0
   18d42:	4668      	mov	r0, sp
   18d44:	f012 f8a0 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	int ncell_count = neighborcell_count_get(response);
   18d48:	4628      	mov	r0, r5
   18d4a:	f001 f8d1 	bl	19ef0 <neighborcell_count_get>
   18d4e:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   18d50:	f000 fde0 	bl	19914 <event_handler_list_is_empty>
   18d54:	b980      	cbnz	r0, 18d78 <at_handler_ncellmeas+0x40>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   18d56:	b18c      	cbz	r4, 18d7c <at_handler_ncellmeas+0x44>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   18d58:	4620      	mov	r0, r4
   18d5a:	2110      	movs	r1, #16
   18d5c:	f012 f83c 	bl	2add8 <k_calloc>
		if (neighbor_cells == NULL) {
   18d60:	4604      	mov	r4, r0
   18d62:	b958      	cbnz	r0, 18d7c <at_handler_ncellmeas+0x44>
   18d64:	481e      	ldr	r0, [pc, #120]	; (18de0 <at_handler_ncellmeas+0xa8>)
   18d66:	4b1f      	ldr	r3, [pc, #124]	; (18de4 <at_handler_ncellmeas+0xac>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   18d68:	491f      	ldr	r1, [pc, #124]	; (18de8 <at_handler_ncellmeas+0xb0>)
   18d6a:	1ac0      	subs	r0, r0, r3
   18d6c:	08c0      	lsrs	r0, r0, #3
   18d6e:	0180      	lsls	r0, r0, #6
   18d70:	f040 0001 	orr.w	r0, r0, #1
   18d74:	f00d fbdb 	bl	2652e <log_string_sync>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   18d78:	b011      	add	sp, #68	; 0x44
   18d7a:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   18d7c:	4628      	mov	r0, r5
   18d7e:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   18d80:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   18d82:	f001 f8db 	bl	19f3c <parse_ncellmeas>
	switch (err) {
   18d86:	1dc3      	adds	r3, r0, #7
   18d88:	d00d      	beq.n	18da6 <at_handler_ncellmeas+0x6e>
   18d8a:	2801      	cmp	r0, #1
   18d8c:	d91b      	bls.n	18dc6 <at_handler_ncellmeas+0x8e>
   18d8e:	4a15      	ldr	r2, [pc, #84]	; (18de4 <at_handler_ncellmeas+0xac>)
   18d90:	4b13      	ldr	r3, [pc, #76]	; (18de0 <at_handler_ncellmeas+0xa8>)
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   18d92:	4916      	ldr	r1, [pc, #88]	; (18dec <at_handler_ncellmeas+0xb4>)
   18d94:	1a9b      	subs	r3, r3, r2
   18d96:	08db      	lsrs	r3, r3, #3
   18d98:	019b      	lsls	r3, r3, #6
   18d9a:	4602      	mov	r2, r0
   18d9c:	f043 0001 	orr.w	r0, r3, #1
   18da0:	f00d fbc5 	bl	2652e <log_string_sync>
   18da4:	e015      	b.n	18dd2 <at_handler_ncellmeas+0x9a>
   18da6:	4b0f      	ldr	r3, [pc, #60]	; (18de4 <at_handler_ncellmeas+0xac>)
   18da8:	4d0d      	ldr	r5, [pc, #52]	; (18de0 <at_handler_ncellmeas+0xa8>)
		LOG_WRN("Not all neighbor cells could be parsed");
   18daa:	4911      	ldr	r1, [pc, #68]	; (18df0 <at_handler_ncellmeas+0xb8>)
   18dac:	1aed      	subs	r5, r5, r3
   18dae:	08ed      	lsrs	r5, r5, #3
   18db0:	01ad      	lsls	r5, r5, #6
   18db2:	f045 0502 	orr.w	r5, r5, #2
   18db6:	4628      	mov	r0, r5
   18db8:	f00d fbb9 	bl	2652e <log_string_sync>
		LOG_WRN("More cells than the configured max count of %d were found",
   18dbc:	220a      	movs	r2, #10
   18dbe:	4628      	mov	r0, r5
   18dc0:	490c      	ldr	r1, [pc, #48]	; (18df4 <at_handler_ncellmeas+0xbc>)
   18dc2:	f00d fbb4 	bl	2652e <log_string_sync>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   18dc6:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   18dc8:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   18dca:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   18dce:	f000 fdd7 	bl	19980 <event_handler_list_dispatch>
	if (neighbor_cells) {
   18dd2:	2c00      	cmp	r4, #0
   18dd4:	d0d0      	beq.n	18d78 <at_handler_ncellmeas+0x40>
		k_free(neighbor_cells);
   18dd6:	4620      	mov	r0, r4
   18dd8:	f011 fff3 	bl	2adc2 <k_free>
   18ddc:	e7cc      	b.n	18d78 <at_handler_ncellmeas+0x40>
   18dde:	bf00      	nop
   18de0:	0002c3a4 	.word	0x0002c3a4
   18de4:	0002c344 	.word	0x0002c344
   18de8:	0002dd48 	.word	0x0002dd48
   18dec:	0002ddd6 	.word	0x0002ddd6
   18df0:	0002dd75 	.word	0x0002dd75
   18df4:	0002dd9c 	.word	0x0002dd9c

00018df8 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   18df8:	b510      	push	{r4, lr}
   18dfa:	4604      	mov	r4, r0
   18dfc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   18dfe:	2100      	movs	r1, #0
   18e00:	2240      	movs	r2, #64	; 0x40
   18e02:	4668      	mov	r0, sp
   18e04:	f012 f840 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   18e08:	4620      	mov	r0, r4
   18e0a:	a902      	add	r1, sp, #8
   18e0c:	f001 f9f4 	bl	1a1f8 <parse_xmodemsleep>
	if (err) {
   18e10:	b160      	cbz	r0, 18e2c <at_handler_xmodemsleep+0x34>
   18e12:	4a14      	ldr	r2, [pc, #80]	; (18e64 <at_handler_xmodemsleep+0x6c>)
   18e14:	4b14      	ldr	r3, [pc, #80]	; (18e68 <at_handler_xmodemsleep+0x70>)
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   18e16:	4915      	ldr	r1, [pc, #84]	; (18e6c <at_handler_xmodemsleep+0x74>)
   18e18:	1a9b      	subs	r3, r3, r2
   18e1a:	08db      	lsrs	r3, r3, #3
   18e1c:	019b      	lsls	r3, r3, #6
   18e1e:	4602      	mov	r2, r0
   18e20:	f043 0001 	orr.w	r0, r3, #1
   18e24:	f00d fb83 	bl	2652e <log_string_sync>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   18e28:	b010      	add	sp, #64	; 0x40
   18e2a:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   18e2c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18e30:	1e5a      	subs	r2, r3, #1
   18e32:	2a01      	cmp	r2, #1
   18e34:	d901      	bls.n	18e3a <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   18e36:	2b04      	cmp	r3, #4
   18e38:	d1f6      	bne.n	18e28 <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   18e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18e3e:	2100      	movs	r1, #0
   18e40:	f241 3088 	movw	r0, #5000	; 0x1388
   18e44:	428b      	cmp	r3, r1
   18e46:	bf08      	it	eq
   18e48:	4282      	cmpeq	r2, r0
   18e4a:	d106      	bne.n	18e5a <at_handler_xmodemsleep+0x62>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   18e4c:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   18e4e:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   18e50:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   18e54:	f000 fd94 	bl	19980 <event_handler_list_dispatch>
   18e58:	e7e6      	b.n	18e28 <at_handler_xmodemsleep+0x30>
	} else if (evt.modem_sleep.time == 0) {
   18e5a:	4313      	orrs	r3, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   18e5c:	bf0c      	ite	eq
   18e5e:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   18e60:	230a      	movne	r3, #10
   18e62:	e7f4      	b.n	18e4e <at_handler_xmodemsleep+0x56>
   18e64:	0002c344 	.word	0x0002c344
   18e68:	0002c3a4 	.word	0x0002c3a4
   18e6c:	0002de00 	.word	0x0002de00

00018e70 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   18e70:	b510      	push	{r4, lr}
   18e72:	4604      	mov	r4, r0
   18e74:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   18e76:	2100      	movs	r1, #0
   18e78:	2240      	movs	r2, #64	; 0x40
   18e7a:	4668      	mov	r0, sp
   18e7c:	f012 f804 	bl	2ae88 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   18e80:	4620      	mov	r0, r4
   18e82:	a902      	add	r1, sp, #8
   18e84:	f001 fa2c 	bl	1a2e0 <parse_mdmev>
	if (err) {
   18e88:	b160      	cbz	r0, 18ea4 <at_handler_mdmev+0x34>
   18e8a:	4a0a      	ldr	r2, [pc, #40]	; (18eb4 <at_handler_mdmev+0x44>)
   18e8c:	4b0a      	ldr	r3, [pc, #40]	; (18eb8 <at_handler_mdmev+0x48>)
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   18e8e:	490b      	ldr	r1, [pc, #44]	; (18ebc <at_handler_mdmev+0x4c>)
   18e90:	1a9b      	subs	r3, r3, r2
   18e92:	08db      	lsrs	r3, r3, #3
   18e94:	019b      	lsls	r3, r3, #6
   18e96:	4602      	mov	r2, r0
   18e98:	f043 0001 	orr.w	r0, r3, #1
   18e9c:	f00d fb47 	bl	2652e <log_string_sync>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   18ea0:	b010      	add	sp, #64	; 0x40
   18ea2:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   18ea4:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   18ea6:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   18ea8:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   18eac:	f000 fd68 	bl	19980 <event_handler_list_dispatch>
   18eb0:	e7f6      	b.n	18ea0 <at_handler_mdmev+0x30>
   18eb2:	bf00      	nop
   18eb4:	0002c344 	.word	0x0002c344
   18eb8:	0002c3a4 	.word	0x0002c3a4
   18ebc:	0002de3c 	.word	0x0002de3c

00018ec0 <enable_notifications>:

static int enable_notifications(void)
{
   18ec0:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   18ec2:	4821      	ldr	r0, [pc, #132]	; (18f48 <enable_notifications+0x88>)
{
   18ec4:	b08f      	sub	sp, #60	; 0x3c
	err = nrf_modem_at_printf(AT_CEREG_5);
   18ec6:	f008 ffcf 	bl	21e68 <nrf_modem_at_printf>
	if (err) {
   18eca:	b170      	cbz	r0, 18eea <enable_notifications+0x2a>
   18ecc:	4a1f      	ldr	r2, [pc, #124]	; (18f4c <enable_notifications+0x8c>)
   18ece:	4b20      	ldr	r3, [pc, #128]	; (18f50 <enable_notifications+0x90>)
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   18ed0:	4920      	ldr	r1, [pc, #128]	; (18f54 <enable_notifications+0x94>)
   18ed2:	1a9b      	subs	r3, r3, r2
   18ed4:	08db      	lsrs	r3, r3, #3
   18ed6:	019b      	lsls	r3, r3, #6
   18ed8:	4602      	mov	r2, r0
   18eda:	f043 0001 	orr.w	r0, r3, #1
   18ede:	f00d fb26 	bl	2652e <log_string_sync>
		return -EFAULT;
   18ee2:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   18ee6:	b00f      	add	sp, #60	; 0x3c
   18ee8:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
   18eea:	481b      	ldr	r0, [pc, #108]	; (18f58 <enable_notifications+0x98>)
   18eec:	f008 ffbc 	bl	21e68 <nrf_modem_at_printf>
	if (err) {
   18ef0:	2800      	cmp	r0, #0
   18ef2:	d0f8      	beq.n	18ee6 <enable_notifications+0x26>
   18ef4:	4b15      	ldr	r3, [pc, #84]	; (18f4c <enable_notifications+0x8c>)
   18ef6:	4c16      	ldr	r4, [pc, #88]	; (18f50 <enable_notifications+0x90>)
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   18ef8:	4602      	mov	r2, r0
   18efa:	1ae4      	subs	r4, r4, r3
   18efc:	08e4      	lsrs	r4, r4, #3
   18efe:	01a4      	lsls	r4, r4, #6
   18f00:	f044 0502 	orr.w	r5, r4, #2
   18f04:	4628      	mov	r0, r5
   18f06:	4915      	ldr	r1, [pc, #84]	; (18f5c <enable_notifications+0x9c>)
   18f08:	f00d fb11 	bl	2652e <log_string_sync>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   18f0c:	4628      	mov	r0, r5
   18f0e:	4914      	ldr	r1, [pc, #80]	; (18f60 <enable_notifications+0xa0>)
   18f10:	f00d fb0d 	bl	2652e <log_string_sync>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   18f14:	2132      	movs	r1, #50	; 0x32
   18f16:	4a13      	ldr	r2, [pc, #76]	; (18f64 <enable_notifications+0xa4>)
   18f18:	a801      	add	r0, sp, #4
   18f1a:	f008 ffcd 	bl	21eb8 <nrf_modem_at_cmd>
		if (err == 0) {
   18f1e:	4605      	mov	r5, r0
   18f20:	b978      	cbnz	r0, 18f42 <enable_notifications+0x82>
			char *end = strstr(buf, "\r\nOK");
   18f22:	4911      	ldr	r1, [pc, #68]	; (18f68 <enable_notifications+0xa8>)
   18f24:	a801      	add	r0, sp, #4
   18f26:	f012 f924 	bl	2b172 <strstr>
			if (end) {
   18f2a:	b100      	cbz	r0, 18f2e <enable_notifications+0x6e>
				*end = '\0';
   18f2c:	7005      	strb	r5, [r0, #0]
   18f2e:	a801      	add	r0, sp, #4
   18f30:	f00d fb10 	bl	26554 <z_log_strdup>
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   18f34:	f044 0402 	orr.w	r4, r4, #2
   18f38:	4602      	mov	r2, r0
   18f3a:	490c      	ldr	r1, [pc, #48]	; (18f6c <enable_notifications+0xac>)
   18f3c:	4620      	mov	r0, r4
   18f3e:	f00d faf6 	bl	2652e <log_string_sync>
	return 0;
   18f42:	2000      	movs	r0, #0
   18f44:	e7cf      	b.n	18ee6 <enable_notifications+0x26>
   18f46:	bf00      	nop
   18f48:	0002de6c 	.word	0x0002de6c
   18f4c:	0002c344 	.word	0x0002c344
   18f50:	0002c3a4 	.word	0x0002c3a4
   18f54:	0002de77 	.word	0x0002de77
   18f58:	0002e527 	.word	0x0002e527
   18f5c:	0002dead 	.word	0x0002dead
   18f60:	0002dee5 	.word	0x0002dee5
   18f64:	0002df16 	.word	0x0002df16
   18f68:	0002df1e 	.word	0x0002df1e
   18f6c:	0002df23 	.word	0x0002df23

00018f70 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   18f70:	b948      	cbnz	r0, 18f86 <lte_lc_register_handler+0x16>
   18f72:	4806      	ldr	r0, [pc, #24]	; (18f8c <lte_lc_register_handler+0x1c>)
   18f74:	4b06      	ldr	r3, [pc, #24]	; (18f90 <lte_lc_register_handler+0x20>)
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   18f76:	4907      	ldr	r1, [pc, #28]	; (18f94 <lte_lc_register_handler+0x24>)
   18f78:	1ac0      	subs	r0, r0, r3
   18f7a:	08c0      	lsrs	r0, r0, #3
   18f7c:	0180      	lsls	r0, r0, #6
   18f7e:	f040 0003 	orr.w	r0, r0, #3
   18f82:	f00d bad4 	b.w	2652e <log_string_sync>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   18f86:	f000 bccd 	b.w	19924 <event_handler_list_append_handler>
   18f8a:	bf00      	nop
   18f8c:	0002c3a4 	.word	0x0002c3a4
   18f90:	0002c344 	.word	0x0002c344
   18f94:	0002df46 	.word	0x0002df46

00018f98 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   18f98:	b508      	push	{r3, lr}
	int err;

	if (enable) {
   18f9a:	2800      	cmp	r0, #0
   18f9c:	d033      	beq.n	19006 <lte_lc_psm_req+0x6e>
		if (strlen(psm_param_rptau) == 8 &&
   18f9e:	481b      	ldr	r0, [pc, #108]	; (1900c <lte_lc_psm_req+0x74>)
   18fa0:	f7f8 f80c 	bl	10fbc <strlen>
   18fa4:	2808      	cmp	r0, #8
   18fa6:	d118      	bne.n	18fda <lte_lc_psm_req+0x42>
		    strlen(psm_param_rat) == 8) {
   18fa8:	4819      	ldr	r0, [pc, #100]	; (19010 <lte_lc_psm_req+0x78>)
   18faa:	f7f8 f807 	bl	10fbc <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   18fae:	2808      	cmp	r0, #8
   18fb0:	d113      	bne.n	18fda <lte_lc_psm_req+0x42>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   18fb2:	4a17      	ldr	r2, [pc, #92]	; (19010 <lte_lc_psm_req+0x78>)
   18fb4:	4915      	ldr	r1, [pc, #84]	; (1900c <lte_lc_psm_req+0x74>)
   18fb6:	4817      	ldr	r0, [pc, #92]	; (19014 <lte_lc_psm_req+0x7c>)
   18fb8:	f008 ff56 	bl	21e68 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   18fbc:	b160      	cbz	r0, 18fd8 <lte_lc_psm_req+0x40>
   18fbe:	4a16      	ldr	r2, [pc, #88]	; (19018 <lte_lc_psm_req+0x80>)
   18fc0:	4b16      	ldr	r3, [pc, #88]	; (1901c <lte_lc_psm_req+0x84>)
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   18fc2:	4917      	ldr	r1, [pc, #92]	; (19020 <lte_lc_psm_req+0x88>)
   18fc4:	1a9b      	subs	r3, r3, r2
   18fc6:	08db      	lsrs	r3, r3, #3
   18fc8:	019b      	lsls	r3, r3, #6
   18fca:	4602      	mov	r2, r0
   18fcc:	f043 0001 	orr.w	r0, r3, #1
   18fd0:	f00d faad 	bl	2652e <log_string_sync>
		return -EFAULT;
   18fd4:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   18fd8:	bd08      	pop	{r3, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   18fda:	480c      	ldr	r0, [pc, #48]	; (1900c <lte_lc_psm_req+0x74>)
   18fdc:	f7f7 ffee 	bl	10fbc <strlen>
   18fe0:	2808      	cmp	r0, #8
   18fe2:	d104      	bne.n	18fee <lte_lc_psm_req+0x56>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   18fe4:	4909      	ldr	r1, [pc, #36]	; (1900c <lte_lc_psm_req+0x74>)
   18fe6:	480f      	ldr	r0, [pc, #60]	; (19024 <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   18fe8:	f008 ff3e 	bl	21e68 <nrf_modem_at_printf>
   18fec:	e7e6      	b.n	18fbc <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   18fee:	4808      	ldr	r0, [pc, #32]	; (19010 <lte_lc_psm_req+0x78>)
   18ff0:	f7f7 ffe4 	bl	10fbc <strlen>
   18ff4:	2808      	cmp	r0, #8
   18ff6:	d102      	bne.n	18ffe <lte_lc_psm_req+0x66>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   18ff8:	4905      	ldr	r1, [pc, #20]	; (19010 <lte_lc_psm_req+0x78>)
   18ffa:	480b      	ldr	r0, [pc, #44]	; (19028 <lte_lc_psm_req+0x90>)
   18ffc:	e7f4      	b.n	18fe8 <lte_lc_psm_req+0x50>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   18ffe:	480b      	ldr	r0, [pc, #44]	; (1902c <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   19000:	f008 ff32 	bl	21e68 <nrf_modem_at_printf>
   19004:	e7da      	b.n	18fbc <lte_lc_psm_req+0x24>
   19006:	480a      	ldr	r0, [pc, #40]	; (19030 <lte_lc_psm_req+0x98>)
   19008:	e7fa      	b.n	19000 <lte_lc_psm_req+0x68>
   1900a:	bf00      	nop
   1900c:	2000c877 	.word	0x2000c877
   19010:	2000c86e 	.word	0x2000c86e
   19014:	0002dfb8 	.word	0x0002dfb8
   19018:	0002c344 	.word	0x0002c344
   1901c:	0002c3a4 	.word	0x0002c3a4
   19020:	0002dfff 	.word	0x0002dfff
   19024:	0002dfcf 	.word	0x0002dfcf
   19028:	0002dfe1 	.word	0x0002dfe1
   1902c:	0002dff4 	.word	0x0002dff4
   19030:	0002e53e 	.word	0x0002e53e

00019034 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   19034:	2300      	movs	r3, #0
{
   19036:	b5f0      	push	{r4, r5, r6, r7, lr}
   19038:	b08d      	sub	sp, #52	; 0x34
   1903a:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1903c:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1903e:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   19042:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   19046:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   1904a:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   1904e:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   19052:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   19056:	2800      	cmp	r0, #0
   19058:	d067      	beq.n	1912a <lte_lc_psm_get+0xf6>
   1905a:	2900      	cmp	r1, #0
   1905c:	d065      	beq.n	1912a <lte_lc_psm_get+0xf6>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1905e:	4c34      	ldr	r4, [pc, #208]	; (19130 <lte_lc_psm_get+0xfc>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   19060:	4a34      	ldr	r2, [pc, #208]	; (19134 <lte_lc_psm_get+0x100>)
   19062:	21a0      	movs	r1, #160	; 0xa0
   19064:	4620      	mov	r0, r4
	response[0] = '\0';
   19066:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   19068:	f008 ff26 	bl	21eb8 <nrf_modem_at_cmd>
	if (err < 0) {
   1906c:	1e02      	subs	r2, r0, #0
   1906e:	da0e      	bge.n	1908e <lte_lc_psm_get+0x5a>
   19070:	4831      	ldr	r0, [pc, #196]	; (19138 <lte_lc_psm_get+0x104>)
   19072:	4b32      	ldr	r3, [pc, #200]	; (1913c <lte_lc_psm_get+0x108>)
		LOG_ERR("AT command failed, error: %d", err);
   19074:	4932      	ldr	r1, [pc, #200]	; (19140 <lte_lc_psm_get+0x10c>)
   19076:	1a1b      	subs	r3, r3, r0
   19078:	08db      	lsrs	r3, r3, #3
   1907a:	019b      	lsls	r3, r3, #6
   1907c:	f043 0001 	orr.w	r0, r3, #1
   19080:	f00d fa55 	bl	2652e <log_string_sync>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   19084:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   19088:	4620      	mov	r0, r4
   1908a:	b00d      	add	sp, #52	; 0x34
   1908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   1908e:	4620      	mov	r0, r4
   19090:	212c      	movs	r1, #44	; 0x2c
   19092:	f012 f813 	bl	2b0bc <strchr>
   19096:	270c      	movs	r7, #12
   19098:	4604      	mov	r4, r0
		if (comma_ptr) {
   1909a:	b194      	cbz	r4, 190c2 <lte_lc_psm_get+0x8e>
			comma_ptr = strchr(comma_ptr + 1, ch);
   1909c:	1c60      	adds	r0, r4, #1
   1909e:	212c      	movs	r1, #44	; 0x2c
   190a0:	f012 f80c 	bl	2b0bc <strchr>
	for (int i = 0; i < 12; i++) {
   190a4:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   190a6:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   190a8:	d1f7      	bne.n	1909a <lte_lc_psm_get+0x66>
	if (comma_ptr) {
   190aa:	b150      	cbz	r0, 190c2 <lte_lc_psm_get+0x8e>
		strncpy(active_time_str, comma_ptr + 2, 8);
   190ac:	1c81      	adds	r1, r0, #2
   190ae:	2208      	movs	r2, #8
   190b0:	a803      	add	r0, sp, #12
   190b2:	f012 f82a 	bl	2b10a <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   190b6:	1c60      	adds	r0, r4, #1
   190b8:	212c      	movs	r1, #44	; 0x2c
   190ba:	f011 ffff 	bl	2b0bc <strchr>
	if (comma_ptr) {
   190be:	4604      	mov	r4, r0
   190c0:	b950      	cbnz	r0, 190d8 <lte_lc_psm_get+0xa4>
   190c2:	4b1d      	ldr	r3, [pc, #116]	; (19138 <lte_lc_psm_get+0x104>)
   190c4:	481d      	ldr	r0, [pc, #116]	; (1913c <lte_lc_psm_get+0x108>)
			LOG_ERR("AT command parsing failed");
   190c6:	491f      	ldr	r1, [pc, #124]	; (19144 <lte_lc_psm_get+0x110>)
   190c8:	1ac0      	subs	r0, r0, r3
   190ca:	08c0      	lsrs	r0, r0, #3
   190cc:	0180      	lsls	r0, r0, #6
   190ce:	f040 0001 	orr.w	r0, r0, #1
   190d2:	f00d fa2c 	bl	2652e <log_string_sync>
   190d6:	e7d5      	b.n	19084 <lte_lc_psm_get+0x50>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   190d8:	1c81      	adds	r1, r0, #2
   190da:	2208      	movs	r2, #8
   190dc:	a806      	add	r0, sp, #24
   190de:	f012 f814 	bl	2b10a <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   190e2:	212c      	movs	r1, #44	; 0x2c
   190e4:	1c60      	adds	r0, r4, #1
   190e6:	f011 ffe9 	bl	2b0bc <strchr>
	if (comma_ptr) {
   190ea:	b998      	cbnz	r0, 19114 <lte_lc_psm_get+0xe0>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   190ec:	ab01      	add	r3, sp, #4
   190ee:	aa09      	add	r2, sp, #36	; 0x24
   190f0:	a906      	add	r1, sp, #24
   190f2:	a803      	add	r0, sp, #12
   190f4:	f000 fc94 	bl	19a20 <parse_psm>
	if (err) {
   190f8:	4604      	mov	r4, r0
   190fa:	b188      	cbz	r0, 19120 <lte_lc_psm_get+0xec>
   190fc:	4b0e      	ldr	r3, [pc, #56]	; (19138 <lte_lc_psm_get+0x104>)
   190fe:	480f      	ldr	r0, [pc, #60]	; (1913c <lte_lc_psm_get+0x108>)
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   19100:	4622      	mov	r2, r4
   19102:	1ac0      	subs	r0, r0, r3
   19104:	08c0      	lsrs	r0, r0, #3
   19106:	0180      	lsls	r0, r0, #6
   19108:	490f      	ldr	r1, [pc, #60]	; (19148 <lte_lc_psm_get+0x114>)
   1910a:	f040 0001 	orr.w	r0, r0, #1
   1910e:	f00d fa0e 	bl	2652e <log_string_sync>
		return err;
   19112:	e7b9      	b.n	19088 <lte_lc_psm_get+0x54>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   19114:	1c81      	adds	r1, r0, #2
   19116:	2208      	movs	r2, #8
   19118:	a809      	add	r0, sp, #36	; 0x24
   1911a:	f011 fff6 	bl	2b10a <strncpy>
   1911e:	e7e5      	b.n	190ec <lte_lc_psm_get+0xb8>
	*tau = psm_cfg.tau;
   19120:	9b01      	ldr	r3, [sp, #4]
   19122:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   19124:	9b02      	ldr	r3, [sp, #8]
   19126:	602b      	str	r3, [r5, #0]
	return 0;
   19128:	e7ae      	b.n	19088 <lte_lc_psm_get+0x54>
		return -EINVAL;
   1912a:	f06f 0415 	mvn.w	r4, #21
   1912e:	e7ab      	b.n	19088 <lte_lc_psm_get+0x54>
   19130:	2000f086 	.word	0x2000f086
   19134:	0002e02e 	.word	0x0002e02e
   19138:	0002c344 	.word	0x0002c344
   1913c:	0002c3a4 	.word	0x0002c3a4
   19140:	0002e03b 	.word	0x0002e03b
   19144:	0002e058 	.word	0x0002e058
   19148:	0002e072 	.word	0x0002e072

0001914c <at_handler_cereg>:
{
   1914c:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   1914e:	2400      	movs	r4, #0
{
   19150:	4606      	mov	r6, r0
   19152:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   19154:	2240      	movs	r2, #64	; 0x40
   19156:	2100      	movs	r1, #0
   19158:	a812      	add	r0, sp, #72	; 0x48
   1915a:	f011 fe95 	bl	2ae88 <memset>
	struct lte_lc_cell cell = {0};
   1915e:	2230      	movs	r2, #48	; 0x30
   19160:	4621      	mov	r1, r4
   19162:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   19164:	f88d 400e 	strb.w	r4, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   19168:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   1916a:	f011 fe8d 	bl	2ae88 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1916e:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   19172:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   19174:	2101      	movs	r1, #1
   19176:	9300      	str	r3, [sp, #0]
   19178:	4630      	mov	r0, r6
   1917a:	ab06      	add	r3, sp, #24
   1917c:	f10d 020e 	add.w	r2, sp, #14
	struct lte_lc_psm_cfg psm_cfg = {0};
   19180:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   19182:	f000 fd4f 	bl	19c24 <parse_cereg>
	if (err) {
   19186:	4605      	mov	r5, r0
   19188:	b188      	cbz	r0, 191ae <at_handler_cereg+0x62>
   1918a:	4b47      	ldr	r3, [pc, #284]	; (192a8 <at_handler_cereg+0x15c>)
   1918c:	4c47      	ldr	r4, [pc, #284]	; (192ac <at_handler_cereg+0x160>)
   1918e:	4630      	mov	r0, r6
   19190:	1ae4      	subs	r4, r4, r3
   19192:	f00d f9df 	bl	26554 <z_log_strdup>
   19196:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Failed to parse notification (error %d): %s",
   19198:	01a4      	lsls	r4, r4, #6
   1919a:	f044 0401 	orr.w	r4, r4, #1
   1919e:	4603      	mov	r3, r0
   191a0:	462a      	mov	r2, r5
   191a2:	4620      	mov	r0, r4
   191a4:	4942      	ldr	r1, [pc, #264]	; (192b0 <at_handler_cereg+0x164>)
   191a6:	f00d f9c2 	bl	2652e <log_string_sync>
}
   191aa:	b023      	add	sp, #140	; 0x8c
   191ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   191ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
   191b2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   191b6:	2b01      	cmp	r3, #1
   191b8:	d105      	bne.n	191c6 <at_handler_cereg+0x7a>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   191ba:	9b08      	ldr	r3, [sp, #32]
   191bc:	3301      	adds	r3, #1
   191be:	d059      	beq.n	19274 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
   191c0:	483c      	ldr	r0, [pc, #240]	; (192b4 <at_handler_cereg+0x168>)
   191c2:	f00a f91d 	bl	23400 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   191c6:	f000 fba5 	bl	19914 <event_handler_list_is_empty>
   191ca:	2800      	cmp	r0, #0
   191cc:	d1ed      	bne.n	191aa <at_handler_cereg+0x5e>
	if (reg_status != prev_reg_status) {
   191ce:	4a3a      	ldr	r2, [pc, #232]	; (192b8 <at_handler_cereg+0x16c>)
   191d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   191d4:	7811      	ldrb	r1, [r2, #0]
   191d6:	4299      	cmp	r1, r3
   191d8:	d007      	beq.n	191ea <at_handler_cereg+0x9e>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   191da:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   191de:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   191e0:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   191e2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   191e6:	f000 fbcb 	bl	19980 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   191ea:	2230      	movs	r2, #48	; 0x30
   191ec:	4933      	ldr	r1, [pc, #204]	; (192bc <at_handler_cereg+0x170>)
   191ee:	a806      	add	r0, sp, #24
   191f0:	f011 fe1c 	bl	2ae2c <memcmp>
   191f4:	b1c8      	cbz	r0, 1922a <at_handler_cereg+0xde>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   191f6:	2304      	movs	r3, #4
   191f8:	4d30      	ldr	r5, [pc, #192]	; (192bc <at_handler_cereg+0x170>)
   191fa:	ac06      	add	r4, sp, #24
   191fc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   19200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19208:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1920c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   19210:	ae14      	add	r6, sp, #80	; 0x50
   19212:	ad06      	add	r5, sp, #24
   19214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19216:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1921a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1921c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19220:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   19224:	a812      	add	r0, sp, #72	; 0x48
   19226:	f000 fbab 	bl	19980 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1922a:	4a25      	ldr	r2, [pc, #148]	; (192c0 <at_handler_cereg+0x174>)
   1922c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19230:	7811      	ldrb	r1, [r2, #0]
   19232:	4299      	cmp	r1, r3
   19234:	d008      	beq.n	19248 <at_handler_cereg+0xfc>
		prev_lte_mode = lte_mode;
   19236:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   19238:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1923a:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1923c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   19240:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   19244:	f000 fb9c 	bl	19980 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   19248:	f89d 400e 	ldrb.w	r4, [sp, #14]
   1924c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   19250:	2c01      	cmp	r4, #1
   19252:	d1aa      	bne.n	191aa <at_handler_cereg+0x5e>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   19254:	4638      	mov	r0, r7
   19256:	a905      	add	r1, sp, #20
   19258:	f7ff feec 	bl	19034 <lte_lc_psm_get>
	if (err) {
   1925c:	b170      	cbz	r0, 1927c <at_handler_cereg+0x130>
   1925e:	4b12      	ldr	r3, [pc, #72]	; (192a8 <at_handler_cereg+0x15c>)
   19260:	4812      	ldr	r0, [pc, #72]	; (192ac <at_handler_cereg+0x160>)
		LOG_ERR("Failed to get PSM information");
   19262:	4918      	ldr	r1, [pc, #96]	; (192c4 <at_handler_cereg+0x178>)
   19264:	1ac0      	subs	r0, r0, r3
   19266:	08c0      	lsrs	r0, r0, #3
   19268:	0180      	lsls	r0, r0, #6
   1926a:	f040 0001 	orr.w	r0, r0, #1
   1926e:	f00d f95e 	bl	2652e <log_string_sync>
		return;
   19272:	e79a      	b.n	191aa <at_handler_cereg+0x5e>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   19274:	2304      	movs	r3, #4
   19276:	f88d 300e 	strb.w	r3, [sp, #14]
   1927a:	e7a4      	b.n	191c6 <at_handler_cereg+0x7a>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   1927c:	4d12      	ldr	r5, [pc, #72]	; (192c8 <at_handler_cereg+0x17c>)
   1927e:	2208      	movs	r2, #8
   19280:	4629      	mov	r1, r5
   19282:	4638      	mov	r0, r7
   19284:	f011 fdd2 	bl	2ae2c <memcmp>
   19288:	2800      	cmp	r0, #0
   1928a:	d08e      	beq.n	191aa <at_handler_cereg+0x5e>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1928c:	e897 0003 	ldmia.w	r7, {r0, r1}
   19290:	ab14      	add	r3, sp, #80	; 0x50
   19292:	e885 0003 	stmia.w	r5, {r0, r1}
   19296:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1929a:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1929c:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   192a0:	f000 fb6e 	bl	19980 <event_handler_list_dispatch>
   192a4:	e781      	b.n	191aa <at_handler_cereg+0x5e>
   192a6:	bf00      	nop
   192a8:	0002c344 	.word	0x0002c344
   192ac:	0002c3a4 	.word	0x0002c3a4
   192b0:	0002e09f 	.word	0x0002e09f
   192b4:	2000e148 	.word	0x2000e148
   192b8:	2000f07b 	.word	0x2000f07b
   192bc:	2000cc80 	.word	0x2000cc80
   192c0:	2000f07a 	.word	0x2000f07a
   192c4:	0002e0cb 	.word	0x0002e0cb
   192c8:	2000e160 	.word	0x2000e160

000192cc <lte_lc_edrx_req>:

	return 0;
}

int lte_lc_edrx_req(bool enable)
{
   192cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   192d0:	2104      	movs	r1, #4
   192d2:	2305      	movs	r3, #5
   192d4:	e9cd 1302 	strd	r1, r3, [sp, #8]

	if (!enable) {
   192d8:	b9a0      	cbnz	r0, 19304 <lte_lc_edrx_req+0x38>
		err = nrf_modem_at_printf(edrx_disable);
   192da:	482b      	ldr	r0, [pc, #172]	; (19388 <lte_lc_edrx_req+0xbc>)
   192dc:	f008 fdc4 	bl	21e68 <nrf_modem_at_printf>
		if (err) {
   192e0:	2800      	cmp	r0, #0
   192e2:	d04f      	beq.n	19384 <lte_lc_edrx_req+0xb8>
   192e4:	4a29      	ldr	r2, [pc, #164]	; (1938c <lte_lc_edrx_req+0xc0>)
   192e6:	4b2a      	ldr	r3, [pc, #168]	; (19390 <lte_lc_edrx_req+0xc4>)
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   192e8:	492a      	ldr	r1, [pc, #168]	; (19394 <lte_lc_edrx_req+0xc8>)
   192ea:	1a9b      	subs	r3, r3, r2
   192ec:	4602      	mov	r2, r0
   192ee:	08db      	lsrs	r3, r3, #3
   192f0:	019b      	lsls	r3, r3, #6
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   192f2:	f043 0001 	orr.w	r0, r3, #1
   192f6:	f00d f91a 	bl	2652e <log_string_sync>
			return -EFAULT;
   192fa:	f06f 000d 	mvn.w	r0, #13
		}
	}

	return 0;
}
   192fe:	b004      	add	sp, #16
   19300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   19304:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
   19306:	4f24      	ldr	r7, [pc, #144]	; (19398 <lte_lc_edrx_req+0xcc>)
   19308:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 193b4 <lte_lc_edrx_req+0xe8>
   1930c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 193b8 <lte_lc_edrx_req+0xec>
   19310:	ae02      	add	r6, sp, #8
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   19312:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   19316:	4c21      	ldr	r4, [pc, #132]	; (1939c <lte_lc_edrx_req+0xd0>)
   19318:	f1ba 0f04 	cmp.w	sl, #4
   1931c:	bf0c      	ite	eq
   1931e:	463a      	moveq	r2, r7
   19320:	4642      	movne	r2, r8
		if (strlen(edrx_param) == 4) {
   19322:	4610      	mov	r0, r2
					edrx_param_ltem : edrx_param_nbiot;
   19324:	bf08      	it	eq
   19326:	464c      	moveq	r4, r9
		if (strlen(edrx_param) == 4) {
   19328:	9201      	str	r2, [sp, #4]
   1932a:	f7f7 fe47 	bl	10fbc <strlen>
   1932e:	2804      	cmp	r0, #4
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   19330:	4651      	mov	r1, sl
		if (strlen(edrx_param) == 4) {
   19332:	9a01      	ldr	r2, [sp, #4]
   19334:	d10d      	bne.n	19352 <lte_lc_edrx_req+0x86>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   19336:	481a      	ldr	r0, [pc, #104]	; (193a0 <lte_lc_edrx_req+0xd4>)
   19338:	f008 fd96 	bl	21e68 <nrf_modem_at_printf>
		if (err) {
   1933c:	b168      	cbz	r0, 1935a <lte_lc_edrx_req+0x8e>
   1933e:	4a13      	ldr	r2, [pc, #76]	; (1938c <lte_lc_edrx_req+0xc0>)
   19340:	4b13      	ldr	r3, [pc, #76]	; (19390 <lte_lc_edrx_req+0xc4>)
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   19342:	4918      	ldr	r1, [pc, #96]	; (193a4 <lte_lc_edrx_req+0xd8>)
   19344:	1a9b      	subs	r3, r3, r2
   19346:	08db      	lsrs	r3, r3, #3
   19348:	4602      	mov	r2, r0
   1934a:	019b      	lsls	r3, r3, #6
   1934c:	e7d1      	b.n	192f2 <lte_lc_edrx_req+0x26>
   1934e:	2501      	movs	r5, #1
   19350:	e7df      	b.n	19312 <lte_lc_edrx_req+0x46>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   19352:	4815      	ldr	r0, [pc, #84]	; (193a8 <lte_lc_edrx_req+0xdc>)
   19354:	f008 fd88 	bl	21e68 <nrf_modem_at_printf>
   19358:	e7f0      	b.n	1933c <lte_lc_edrx_req+0x70>
		if (strlen(ptw_param) != 4) {
   1935a:	4620      	mov	r0, r4
   1935c:	f7f7 fe2e 	bl	10fbc <strlen>
   19360:	2804      	cmp	r0, #4
   19362:	d10d      	bne.n	19380 <lte_lc_edrx_req+0xb4>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   19364:	4622      	mov	r2, r4
   19366:	4651      	mov	r1, sl
   19368:	4810      	ldr	r0, [pc, #64]	; (193ac <lte_lc_edrx_req+0xe0>)
   1936a:	f008 fd7d 	bl	21e68 <nrf_modem_at_printf>
		if (err) {
   1936e:	b138      	cbz	r0, 19380 <lte_lc_edrx_req+0xb4>
   19370:	4a06      	ldr	r2, [pc, #24]	; (1938c <lte_lc_edrx_req+0xc0>)
   19372:	4b07      	ldr	r3, [pc, #28]	; (19390 <lte_lc_edrx_req+0xc4>)
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   19374:	490e      	ldr	r1, [pc, #56]	; (193b0 <lte_lc_edrx_req+0xe4>)
   19376:	1a9b      	subs	r3, r3, r2
   19378:	08db      	lsrs	r3, r3, #3
   1937a:	4602      	mov	r2, r0
   1937c:	019b      	lsls	r3, r3, #6
   1937e:	e7b8      	b.n	192f2 <lte_lc_edrx_req+0x26>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   19380:	2d00      	cmp	r5, #0
   19382:	d0e4      	beq.n	1934e <lte_lc_edrx_req+0x82>
		return 0;
   19384:	2000      	movs	r0, #0
   19386:	e7ba      	b.n	192fe <lte_lc_edrx_req+0x32>
   19388:	0002e532 	.word	0x0002e532
   1938c:	0002c344 	.word	0x0002c344
   19390:	0002c3a4 	.word	0x0002c3a4
   19394:	0002e0e9 	.word	0x0002e0e9
   19398:	2000c864 	.word	0x2000c864
   1939c:	2000f081 	.word	0x2000f081
   193a0:	0002e114 	.word	0x0002e114
   193a4:	0002e137 	.word	0x0002e137
   193a8:	0002e128 	.word	0x0002e128
   193ac:	0002e161 	.word	0x0002e161
   193b0:	0002e172 	.word	0x0002e172
   193b4:	2000c869 	.word	0x2000c869
   193b8:	2000f07c 	.word	0x2000f07c

000193bc <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   193bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   193be:	2400      	movs	r4, #0

	if (status == NULL) {
   193c0:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   193c2:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   193c4:	b1d8      	cbz	r0, 193fe <lte_lc_nw_reg_status_get+0x42>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   193c6:	f10d 0202 	add.w	r2, sp, #2
   193ca:	490e      	ldr	r1, [pc, #56]	; (19404 <lte_lc_nw_reg_status_get+0x48>)
   193cc:	480e      	ldr	r0, [pc, #56]	; (19408 <lte_lc_nw_reg_status_get+0x4c>)
   193ce:	ab01      	add	r3, sp, #4
   193d0:	f008 fdd8 	bl	21f84 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   193d4:	1e02      	subs	r2, r0, #0
   193d6:	dc0d      	bgt.n	193f4 <lte_lc_nw_reg_status_get+0x38>
   193d8:	480c      	ldr	r0, [pc, #48]	; (1940c <lte_lc_nw_reg_status_get+0x50>)
   193da:	4b0d      	ldr	r3, [pc, #52]	; (19410 <lte_lc_nw_reg_status_get+0x54>)
		LOG_ERR("Could not get registration status, error: %d", err);
   193dc:	490d      	ldr	r1, [pc, #52]	; (19414 <lte_lc_nw_reg_status_get+0x58>)
   193de:	1a1b      	subs	r3, r3, r0
   193e0:	08db      	lsrs	r3, r3, #3
   193e2:	019b      	lsls	r3, r3, #6
   193e4:	f043 0001 	orr.w	r0, r3, #1
   193e8:	f00d f8a1 	bl	2652e <log_string_sync>
		return -EFAULT;
   193ec:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   193f0:	b003      	add	sp, #12
   193f2:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   193f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   193f8:	4620      	mov	r0, r4
	*status = status_tmp;
   193fa:	702b      	strb	r3, [r5, #0]
	return 0;
   193fc:	e7f8      	b.n	193f0 <lte_lc_nw_reg_status_get+0x34>
		return -EINVAL;
   193fe:	f06f 0015 	mvn.w	r0, #21
   19402:	e7f5      	b.n	193f0 <lte_lc_nw_reg_status_get+0x34>
   19404:	0002e19c 	.word	0x0002e19c
   19408:	0002e1b8 	.word	0x0002e1b8
   1940c:	0002c344 	.word	0x0002c344
   19410:	0002c3a4 	.word	0x0002c3a4
   19414:	0002e1c2 	.word	0x0002e1c2

00019418 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   19418:	2807      	cmp	r0, #7
{
   1941a:	b538      	push	{r3, r4, r5, lr}
   1941c:	4605      	mov	r5, r0
   1941e:	460c      	mov	r4, r1
	switch (mode) {
   19420:	d90d      	bls.n	1943e <lte_lc_system_mode_set+0x26>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   19422:	462a      	mov	r2, r5
   19424:	481b      	ldr	r0, [pc, #108]	; (19494 <lte_lc_system_mode_set+0x7c>)
   19426:	4b1c      	ldr	r3, [pc, #112]	; (19498 <lte_lc_system_mode_set+0x80>)
   19428:	491c      	ldr	r1, [pc, #112]	; (1949c <lte_lc_system_mode_set+0x84>)
   1942a:	1ac0      	subs	r0, r0, r3
   1942c:	08c0      	lsrs	r0, r0, #3
   1942e:	0180      	lsls	r0, r0, #6
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   19430:	f040 0001 	orr.w	r0, r0, #1
   19434:	f00d f87b 	bl	2652e <log_string_sync>
		return -EINVAL;
   19438:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   1943c:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   1943e:	2904      	cmp	r1, #4
   19440:	d907      	bls.n	19452 <lte_lc_system_mode_set+0x3a>
   19442:	4814      	ldr	r0, [pc, #80]	; (19494 <lte_lc_system_mode_set+0x7c>)
   19444:	4b14      	ldr	r3, [pc, #80]	; (19498 <lte_lc_system_mode_set+0x80>)
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   19446:	460a      	mov	r2, r1
   19448:	1ac0      	subs	r0, r0, r3
   1944a:	08c0      	lsrs	r0, r0, #3
   1944c:	4914      	ldr	r1, [pc, #80]	; (194a0 <lte_lc_system_mode_set+0x88>)
   1944e:	0180      	lsls	r0, r0, #6
   19450:	e7ee      	b.n	19430 <lte_lc_system_mode_set+0x18>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   19452:	4b14      	ldr	r3, [pc, #80]	; (194a4 <lte_lc_system_mode_set+0x8c>)
   19454:	5c5a      	ldrb	r2, [r3, r1]
   19456:	4b14      	ldr	r3, [pc, #80]	; (194a8 <lte_lc_system_mode_set+0x90>)
   19458:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1945c:	4813      	ldr	r0, [pc, #76]	; (194ac <lte_lc_system_mode_set+0x94>)
   1945e:	f008 fd03 	bl	21e68 <nrf_modem_at_printf>
	if (err) {
   19462:	b168      	cbz	r0, 19480 <lte_lc_system_mode_set+0x68>
   19464:	4a0c      	ldr	r2, [pc, #48]	; (19498 <lte_lc_system_mode_set+0x80>)
   19466:	4b0b      	ldr	r3, [pc, #44]	; (19494 <lte_lc_system_mode_set+0x7c>)
		LOG_ERR("Could not send AT command, error: %d", err);
   19468:	4911      	ldr	r1, [pc, #68]	; (194b0 <lte_lc_system_mode_set+0x98>)
   1946a:	1a9b      	subs	r3, r3, r2
   1946c:	08db      	lsrs	r3, r3, #3
   1946e:	019b      	lsls	r3, r3, #6
   19470:	4602      	mov	r2, r0
   19472:	f043 0001 	orr.w	r0, r3, #1
   19476:	f00d f85a 	bl	2652e <log_string_sync>
		return -EFAULT;
   1947a:	f06f 000d 	mvn.w	r0, #13
   1947e:	e7dd      	b.n	1943c <lte_lc_system_mode_set+0x24>
	sys_mode_current = mode;
   19480:	4b0c      	ldr	r3, [pc, #48]	; (194b4 <lte_lc_system_mode_set+0x9c>)
   19482:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   19484:	4b0c      	ldr	r3, [pc, #48]	; (194b8 <lte_lc_system_mode_set+0xa0>)
   19486:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   19488:	4b0c      	ldr	r3, [pc, #48]	; (194bc <lte_lc_system_mode_set+0xa4>)
   1948a:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   1948c:	4b0c      	ldr	r3, [pc, #48]	; (194c0 <lte_lc_system_mode_set+0xa8>)
   1948e:	701c      	strb	r4, [r3, #0]
	return 0;
   19490:	e7d4      	b.n	1943c <lte_lc_system_mode_set+0x24>
   19492:	bf00      	nop
   19494:	0002c3a4 	.word	0x0002c3a4
   19498:	0002c344 	.word	0x0002c344
   1949c:	0002e1ef 	.word	0x0002e1ef
   194a0:	0002e211 	.word	0x0002e211
   194a4:	0002e548 	.word	0x0002e548
   194a8:	0002c83c 	.word	0x0002c83c
   194ac:	0002e236 	.word	0x0002e236
   194b0:	0002e24c 	.word	0x0002e24c
   194b4:	2000f126 	.word	0x2000f126
   194b8:	2000c880 	.word	0x2000c880
   194bc:	2000f078 	.word	0x2000f078
   194c0:	2000f079 	.word	0x2000f079

000194c4 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   194c4:	b530      	push	{r4, r5, lr}
   194c6:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   194c8:	4605      	mov	r5, r0
{
   194ca:	b087      	sub	sp, #28
	if (mode == NULL) {
   194cc:	2800      	cmp	r0, #0
   194ce:	d07d      	beq.n	195cc <lte_lc_system_mode_get+0x108>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   194d0:	ab05      	add	r3, sp, #20
   194d2:	9301      	str	r3, [sp, #4]
   194d4:	ab04      	add	r3, sp, #16
   194d6:	9300      	str	r3, [sp, #0]
   194d8:	493e      	ldr	r1, [pc, #248]	; (195d4 <lte_lc_system_mode_get+0x110>)
   194da:	483f      	ldr	r0, [pc, #252]	; (195d8 <lte_lc_system_mode_get+0x114>)
   194dc:	ab03      	add	r3, sp, #12
   194de:	aa02      	add	r2, sp, #8
   194e0:	f008 fd50 	bl	21f84 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   194e4:	2804      	cmp	r0, #4
   194e6:	d00b      	beq.n	19500 <lte_lc_system_mode_get+0x3c>
   194e8:	4a3c      	ldr	r2, [pc, #240]	; (195dc <lte_lc_system_mode_get+0x118>)
   194ea:	4b3d      	ldr	r3, [pc, #244]	; (195e0 <lte_lc_system_mode_get+0x11c>)
		LOG_ERR("Failed to get system mode, error: %d", err);
   194ec:	493d      	ldr	r1, [pc, #244]	; (195e4 <lte_lc_system_mode_get+0x120>)
   194ee:	1a9b      	subs	r3, r3, r2
   194f0:	08db      	lsrs	r3, r3, #3
   194f2:	019b      	lsls	r3, r3, #6
   194f4:	4602      	mov	r2, r0
   194f6:	f043 0001 	orr.w	r0, r3, #1
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   194fa:	f00d f818 	bl	2652e <log_string_sync>
			return -EFAULT;
   194fe:	e03f      	b.n	19580 <lte_lc_system_mode_get+0xbc>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   19500:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   19502:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   19504:	2b00      	cmp	r3, #0
   19506:	bf14      	ite	ne
   19508:	2302      	movne	r3, #2
   1950a:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1950c:	2a00      	cmp	r2, #0
   1950e:	bf14      	ite	ne
   19510:	2204      	movne	r2, #4
   19512:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   19514:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   19516:	9a04      	ldr	r2, [sp, #16]
   19518:	2a00      	cmp	r2, #0
   1951a:	bf14      	ite	ne
   1951c:	2208      	movne	r2, #8
   1951e:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   19520:	4313      	orrs	r3, r2
   19522:	2b0e      	cmp	r3, #14
   19524:	d822      	bhi.n	1956c <lte_lc_system_mode_get+0xa8>
   19526:	e8df f003 	tbb	[pc, r3]
   1952a:	2108      	.short	0x2108
   1952c:	21152113 	.word	0x21152113
   19530:	2117211d 	.word	0x2117211d
   19534:	211b2119 	.word	0x211b2119
   19538:	1f          	.byte	0x1f
   19539:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1953a:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   1953c:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   1953e:	b32c      	cbz	r4, 1958c <lte_lc_system_mode_get+0xc8>
		switch (mode_preference) {
   19540:	9a05      	ldr	r2, [sp, #20]
   19542:	2a04      	cmp	r2, #4
   19544:	d839      	bhi.n	195ba <lte_lc_system_mode_get+0xf6>
   19546:	e8df f002 	tbb	[pc, r2]
   1954a:	301f      	.short	0x301f
   1954c:	3432      	.short	0x3432
   1954e:	36          	.byte	0x36
   1954f:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   19550:	2301      	movs	r3, #1
   19552:	e7f3      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   19554:	2302      	movs	r3, #2
   19556:	e7f1      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   19558:	2303      	movs	r3, #3
   1955a:	e7ef      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   1955c:	2304      	movs	r3, #4
   1955e:	e7ed      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   19560:	2305      	movs	r3, #5
   19562:	e7eb      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   19564:	2306      	movs	r3, #6
   19566:	e7e9      	b.n	1953c <lte_lc_system_mode_get+0x78>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   19568:	2307      	movs	r3, #7
   1956a:	e7e7      	b.n	1953c <lte_lc_system_mode_get+0x78>
   1956c:	481c      	ldr	r0, [pc, #112]	; (195e0 <lte_lc_system_mode_get+0x11c>)
   1956e:	4b1b      	ldr	r3, [pc, #108]	; (195dc <lte_lc_system_mode_get+0x118>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   19570:	491d      	ldr	r1, [pc, #116]	; (195e8 <lte_lc_system_mode_get+0x124>)
   19572:	1ac0      	subs	r0, r0, r3
   19574:	08c0      	lsrs	r0, r0, #3
   19576:	0180      	lsls	r0, r0, #6
   19578:	f040 0001 	orr.w	r0, r0, #1
   1957c:	f00c ffd7 	bl	2652e <log_string_sync>
		return -EFAULT;
   19580:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   19584:	b007      	add	sp, #28
   19586:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   19588:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   1958a:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   1958c:	4b17      	ldr	r3, [pc, #92]	; (195ec <lte_lc_system_mode_get+0x128>)
   1958e:	782a      	ldrb	r2, [r5, #0]
   19590:	7819      	ldrb	r1, [r3, #0]
   19592:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   19594:	bf18      	it	ne
   19596:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   19598:	b12c      	cbz	r4, 195a6 <lte_lc_system_mode_get+0xe2>
   1959a:	4b15      	ldr	r3, [pc, #84]	; (195f0 <lte_lc_system_mode_get+0x12c>)
   1959c:	7822      	ldrb	r2, [r4, #0]
   1959e:	7819      	ldrb	r1, [r3, #0]
   195a0:	4291      	cmp	r1, r2
   195a2:	d000      	beq.n	195a6 <lte_lc_system_mode_get+0xe2>
		mode_pref_current = *preference;
   195a4:	701a      	strb	r2, [r3, #0]
	return 0;
   195a6:	2000      	movs	r0, #0
   195a8:	e7ec      	b.n	19584 <lte_lc_system_mode_get+0xc0>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   195aa:	2301      	movs	r3, #1
   195ac:	e7ed      	b.n	1958a <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   195ae:	2302      	movs	r3, #2
   195b0:	e7eb      	b.n	1958a <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   195b2:	2303      	movs	r3, #3
   195b4:	e7e9      	b.n	1958a <lte_lc_system_mode_get+0xc6>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   195b6:	2304      	movs	r3, #4
   195b8:	e7e7      	b.n	1958a <lte_lc_system_mode_get+0xc6>
   195ba:	4809      	ldr	r0, [pc, #36]	; (195e0 <lte_lc_system_mode_get+0x11c>)
   195bc:	4b07      	ldr	r3, [pc, #28]	; (195dc <lte_lc_system_mode_get+0x118>)
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   195be:	490d      	ldr	r1, [pc, #52]	; (195f4 <lte_lc_system_mode_get+0x130>)
   195c0:	1ac0      	subs	r0, r0, r3
   195c2:	08c0      	lsrs	r0, r0, #3
   195c4:	0180      	lsls	r0, r0, #6
   195c6:	f040 0001 	orr.w	r0, r0, #1
   195ca:	e796      	b.n	194fa <lte_lc_system_mode_get+0x36>
		return -EINVAL;
   195cc:	f06f 0015 	mvn.w	r0, #21
   195d0:	e7d8      	b.n	19584 <lte_lc_system_mode_get+0xc0>
   195d2:	bf00      	nop
   195d4:	0002e271 	.word	0x0002e271
   195d8:	0002e28c 	.word	0x0002e28c
   195dc:	0002c344 	.word	0x0002c344
   195e0:	0002c3a4 	.word	0x0002c3a4
   195e4:	0002e29c 	.word	0x0002e29c
   195e8:	0002e2c1 	.word	0x0002e2c1
   195ec:	2000f126 	.word	0x2000f126
   195f0:	2000f078 	.word	0x2000f078
   195f4:	0002e2ed 	.word	0x0002e2ed

000195f8 <init_and_config>:
{
   195f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   195fa:	4f27      	ldr	r7, [pc, #156]	; (19698 <init_and_config+0xa0>)
   195fc:	7839      	ldrb	r1, [r7, #0]
   195fe:	2900      	cmp	r1, #0
   19600:	d144      	bne.n	1968c <init_and_config+0x94>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   19602:	4d26      	ldr	r5, [pc, #152]	; (1969c <init_and_config+0xa4>)
   19604:	4e26      	ldr	r6, [pc, #152]	; (196a0 <init_and_config+0xa8>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   19606:	2201      	movs	r2, #1
   19608:	4826      	ldr	r0, [pc, #152]	; (196a4 <init_and_config+0xac>)
   1960a:	f011 f867 	bl	2a6dc <z_impl_k_sem_init>
   1960e:	4629      	mov	r1, r5
   19610:	4630      	mov	r0, r6
   19612:	f7ff ff57 	bl	194c4 <lte_lc_system_mode_get>
	if (err) {
   19616:	4604      	mov	r4, r0
   19618:	b160      	cbz	r0, 19634 <init_and_config+0x3c>
		LOG_ERR("Could not get current system mode, error: %d", err);
   1961a:	4622      	mov	r2, r4
   1961c:	4822      	ldr	r0, [pc, #136]	; (196a8 <init_and_config+0xb0>)
   1961e:	4b23      	ldr	r3, [pc, #140]	; (196ac <init_and_config+0xb4>)
   19620:	4923      	ldr	r1, [pc, #140]	; (196b0 <init_and_config+0xb8>)
   19622:	1ac0      	subs	r0, r0, r3
   19624:	08c0      	lsrs	r0, r0, #3
   19626:	0180      	lsls	r0, r0, #6
			LOG_ERR("Could not set system mode, error: %d", err);
   19628:	f040 0001 	orr.w	r0, r0, #1
   1962c:	f00c ff7f 	bl	2652e <log_string_sync>
}
   19630:	4620      	mov	r0, r4
   19632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   19634:	4b1f      	ldr	r3, [pc, #124]	; (196b4 <init_and_config+0xbc>)
   19636:	7818      	ldrb	r0, [r3, #0]
   19638:	4b1f      	ldr	r3, [pc, #124]	; (196b8 <init_and_config+0xc0>)
   1963a:	7819      	ldrb	r1, [r3, #0]
   1963c:	7833      	ldrb	r3, [r6, #0]
   1963e:	4283      	cmp	r3, r0
   19640:	d102      	bne.n	19648 <init_and_config+0x50>
   19642:	782b      	ldrb	r3, [r5, #0]
   19644:	428b      	cmp	r3, r1
   19646:	d00b      	beq.n	19660 <init_and_config+0x68>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   19648:	f7ff fee6 	bl	19418 <lte_lc_system_mode_set>
		if (err) {
   1964c:	4604      	mov	r4, r0
   1964e:	b138      	cbz	r0, 19660 <init_and_config+0x68>
   19650:	4815      	ldr	r0, [pc, #84]	; (196a8 <init_and_config+0xb0>)
   19652:	4b16      	ldr	r3, [pc, #88]	; (196ac <init_and_config+0xb4>)
			LOG_ERR("Could not set system mode, error: %d", err);
   19654:	4622      	mov	r2, r4
   19656:	1ac0      	subs	r0, r0, r3
   19658:	08c0      	lsrs	r0, r0, #3
   1965a:	4918      	ldr	r1, [pc, #96]	; (196bc <init_and_config+0xc4>)
   1965c:	0180      	lsls	r0, r0, #6
   1965e:	e7e3      	b.n	19628 <init_and_config+0x30>
	if (lte_lc_edrx_req(true) != 0) {
   19660:	2001      	movs	r0, #1
   19662:	f7ff fe33 	bl	192cc <lte_lc_edrx_req>
   19666:	b998      	cbnz	r0, 19690 <init_and_config+0x98>
	err = enable_notifications();
   19668:	f7ff fc2a 	bl	18ec0 <enable_notifications>
	if (err) {
   1966c:	4604      	mov	r4, r0
   1966e:	b150      	cbz	r0, 19686 <init_and_config+0x8e>
   19670:	4b0e      	ldr	r3, [pc, #56]	; (196ac <init_and_config+0xb4>)
   19672:	480d      	ldr	r0, [pc, #52]	; (196a8 <init_and_config+0xb0>)
		LOG_ERR("Failed to enable notifications");
   19674:	4912      	ldr	r1, [pc, #72]	; (196c0 <init_and_config+0xc8>)
   19676:	1ac0      	subs	r0, r0, r3
   19678:	08c0      	lsrs	r0, r0, #3
   1967a:	0180      	lsls	r0, r0, #6
   1967c:	f040 0001 	orr.w	r0, r0, #1
   19680:	f00c ff55 	bl	2652e <log_string_sync>
		return err;
   19684:	e7d4      	b.n	19630 <init_and_config+0x38>
	is_initialized = true;
   19686:	2301      	movs	r3, #1
   19688:	703b      	strb	r3, [r7, #0]
	return 0;
   1968a:	e7d1      	b.n	19630 <init_and_config+0x38>
		return 0;
   1968c:	2400      	movs	r4, #0
   1968e:	e7cf      	b.n	19630 <init_and_config+0x38>
		return -EIO;
   19690:	f06f 0404 	mvn.w	r4, #4
   19694:	e7cc      	b.n	19630 <init_and_config+0x38>
   19696:	bf00      	nop
   19698:	2000f077 	.word	0x2000f077
   1969c:	2000f078 	.word	0x2000f078
   196a0:	2000f126 	.word	0x2000f126
   196a4:	2000e148 	.word	0x2000e148
   196a8:	0002c3a4 	.word	0x0002c3a4
   196ac:	0002c344 	.word	0x0002c344
   196b0:	0002e30c 	.word	0x0002e30c
   196b4:	2000c880 	.word	0x2000c880
   196b8:	2000f079 	.word	0x2000f079
   196bc:	0002e339 	.word	0x0002e339
   196c0:	0002e35e 	.word	0x0002e35e

000196c4 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   196c4:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   196c6:	4604      	mov	r4, r0
   196c8:	b1d8      	cbz	r0, 19702 <lte_lc_func_mode_get+0x3e>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   196ca:	490f      	ldr	r1, [pc, #60]	; (19708 <lte_lc_func_mode_get+0x44>)
   196cc:	480f      	ldr	r0, [pc, #60]	; (1970c <lte_lc_func_mode_get+0x48>)
   196ce:	f10d 0206 	add.w	r2, sp, #6
   196d2:	f008 fc57 	bl	21f84 <nrf_modem_at_scanf>
	if (err != 1) {
   196d6:	2801      	cmp	r0, #1
   196d8:	d00e      	beq.n	196f8 <lte_lc_func_mode_get+0x34>
   196da:	4a0d      	ldr	r2, [pc, #52]	; (19710 <lte_lc_func_mode_get+0x4c>)
   196dc:	4b0d      	ldr	r3, [pc, #52]	; (19714 <lte_lc_func_mode_get+0x50>)
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   196de:	490e      	ldr	r1, [pc, #56]	; (19718 <lte_lc_func_mode_get+0x54>)
   196e0:	1a9b      	subs	r3, r3, r2
   196e2:	08db      	lsrs	r3, r3, #3
   196e4:	019b      	lsls	r3, r3, #6
   196e6:	4602      	mov	r2, r0
   196e8:	f043 0001 	orr.w	r0, r3, #1
   196ec:	f00c ff1f 	bl	2652e <log_string_sync>
		return -EFAULT;
   196f0:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   196f4:	b002      	add	sp, #8
   196f6:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   196f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   196fc:	2000      	movs	r0, #0
	*mode = mode_tmp;
   196fe:	7023      	strb	r3, [r4, #0]
	return 0;
   19700:	e7f8      	b.n	196f4 <lte_lc_func_mode_get+0x30>
		return -EINVAL;
   19702:	f06f 0015 	mvn.w	r0, #21
   19706:	e7f5      	b.n	196f4 <lte_lc_func_mode_get+0x30>
   19708:	0002e37d 	.word	0x0002e37d
   1970c:	0002e388 	.word	0x0002e388
   19710:	0002c344 	.word	0x0002c344
   19714:	0002c3a4 	.word	0x0002c3a4
   19718:	0002e391 	.word	0x0002e391

0001971c <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   1971c:	2804      	cmp	r0, #4
{
   1971e:	b510      	push	{r4, lr}
   19720:	4604      	mov	r4, r0
	switch (mode) {
   19722:	d81f      	bhi.n	19764 <lte_lc_func_mode_set+0x48>
   19724:	2804      	cmp	r0, #4
   19726:	d822      	bhi.n	1976e <lte_lc_func_mode_set+0x52>
   19728:	e8df f000 	tbb	[pc, r0]
   1972c:	212f0b2f 	.word	0x212f0b2f
   19730:	2f          	.byte	0x2f
   19731:	00          	.byte	0x00
   19732:	2201      	movs	r2, #1
   19734:	fa02 f303 	lsl.w	r3, r2, r3
   19738:	4a18      	ldr	r2, [pc, #96]	; (1979c <lte_lc_func_mode_set+0x80>)
   1973a:	4213      	tst	r3, r2
   1973c:	d125      	bne.n	1978a <lte_lc_func_mode_set+0x6e>
   1973e:	079b      	lsls	r3, r3, #30
   19740:	d515      	bpl.n	1976e <lte_lc_func_mode_set+0x52>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   19742:	f7ff fbbd 	bl	18ec0 <enable_notifications>
		if (err) {
   19746:	b300      	cbz	r0, 1978a <lte_lc_func_mode_set+0x6e>
   19748:	4a15      	ldr	r2, [pc, #84]	; (197a0 <lte_lc_func_mode_set+0x84>)
   1974a:	4b16      	ldr	r3, [pc, #88]	; (197a4 <lte_lc_func_mode_set+0x88>)
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1974c:	4916      	ldr	r1, [pc, #88]	; (197a8 <lte_lc_func_mode_set+0x8c>)
   1974e:	1a9b      	subs	r3, r3, r2
   19750:	08db      	lsrs	r3, r3, #3
   19752:	019b      	lsls	r3, r3, #6
   19754:	4602      	mov	r2, r0
   19756:	f043 0001 	orr.w	r0, r3, #1
   1975a:	f00c fee8 	bl	2652e <log_string_sync>
			return -EFAULT;
   1975e:	f06f 000d 	mvn.w	r0, #13
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
}
   19762:	bd10      	pop	{r4, pc}
	switch (mode) {
   19764:	f1a0 0314 	sub.w	r3, r0, #20
   19768:	b2db      	uxtb	r3, r3
   1976a:	2b18      	cmp	r3, #24
   1976c:	d9e1      	bls.n	19732 <lte_lc_func_mode_set+0x16>
   1976e:	4b0c      	ldr	r3, [pc, #48]	; (197a0 <lte_lc_func_mode_set+0x84>)
   19770:	480c      	ldr	r0, [pc, #48]	; (197a4 <lte_lc_func_mode_set+0x88>)
		LOG_ERR("Invalid functional mode: %d", mode);
   19772:	4622      	mov	r2, r4
   19774:	1ac0      	subs	r0, r0, r3
   19776:	08c0      	lsrs	r0, r0, #3
   19778:	0180      	lsls	r0, r0, #6
   1977a:	f040 0001 	orr.w	r0, r0, #1
   1977e:	490b      	ldr	r1, [pc, #44]	; (197ac <lte_lc_func_mode_set+0x90>)
   19780:	f00c fed5 	bl	2652e <log_string_sync>
		return -EINVAL;
   19784:	f06f 0015 	mvn.w	r0, #21
   19788:	e7eb      	b.n	19762 <lte_lc_func_mode_set+0x46>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   1978a:	4621      	mov	r1, r4
   1978c:	4808      	ldr	r0, [pc, #32]	; (197b0 <lte_lc_func_mode_set+0x94>)
   1978e:	f008 fb6b 	bl	21e68 <nrf_modem_at_printf>
   19792:	2800      	cmp	r0, #0
   19794:	bf18      	it	ne
   19796:	f06f 000d 	mvnne.w	r0, #13
   1979a:	e7e2      	b.n	19762 <lte_lc_func_mode_set+0x46>
   1979c:	01300c01 	.word	0x01300c01
   197a0:	0002c344 	.word	0x0002c344
   197a4:	0002c3a4 	.word	0x0002c3a4
   197a8:	0002e3cc 	.word	0x0002e3cc
   197ac:	0002e3f6 	.word	0x0002e3f6
   197b0:	0002e412 	.word	0x0002e412

000197b4 <connect_lte>:
	if (!is_initialized) {
   197b4:	4b49      	ldr	r3, [pc, #292]	; (198dc <connect_lte+0x128>)
{
   197b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (!is_initialized) {
   197ba:	781b      	ldrb	r3, [r3, #0]
{
   197bc:	4606      	mov	r6, r0
	if (!is_initialized) {
   197be:	b973      	cbnz	r3, 197de <connect_lte+0x2a>
   197c0:	4b47      	ldr	r3, [pc, #284]	; (198e0 <connect_lte+0x12c>)
   197c2:	4848      	ldr	r0, [pc, #288]	; (198e4 <connect_lte+0x130>)
		LOG_ERR("The LTE link controller is not initialized");
   197c4:	4948      	ldr	r1, [pc, #288]	; (198e8 <connect_lte+0x134>)
   197c6:	1ac0      	subs	r0, r0, r3
   197c8:	08c0      	lsrs	r0, r0, #3
   197ca:	0180      	lsls	r0, r0, #6
   197cc:	f040 0001 	orr.w	r0, r0, #1
   197d0:	f00c fead 	bl	2652e <log_string_sync>
		return -EPERM;
   197d4:	f04f 30ff 	mov.w	r0, #4294967295
}
   197d8:	b002      	add	sp, #8
   197da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   197de:	2501      	movs	r5, #1
   197e0:	4c42      	ldr	r4, [pc, #264]	; (198ec <connect_lte+0x138>)
   197e2:	e8d4 3fef 	ldaex	r3, [r4]
   197e6:	e8c4 5fe2 	stlex	r2, r5, [r4]
   197ea:	2a00      	cmp	r2, #0
   197ec:	d1f9      	bne.n	197e2 <connect_lte+0x2e>
	if (atomic_set(&in_progress, 1)) {
   197ee:	2b00      	cmp	r3, #0
   197f0:	d170      	bne.n	198d4 <connect_lte+0x120>
	err = lte_lc_nw_reg_status_get(&reg_status);
   197f2:	f10d 0007 	add.w	r0, sp, #7
   197f6:	f7ff fde1 	bl	193bc <lte_lc_nw_reg_status_get>
	if (err) {
   197fa:	b158      	cbz	r0, 19814 <connect_lte+0x60>
   197fc:	4b38      	ldr	r3, [pc, #224]	; (198e0 <connect_lte+0x12c>)
   197fe:	4839      	ldr	r0, [pc, #228]	; (198e4 <connect_lte+0x130>)
		LOG_ERR("Failed to get current registration status");
   19800:	493b      	ldr	r1, [pc, #236]	; (198f0 <connect_lte+0x13c>)
   19802:	1ac0      	subs	r0, r0, r3
   19804:	08c0      	lsrs	r0, r0, #3
   19806:	0180      	lsls	r0, r0, #6
   19808:	4328      	orrs	r0, r5
   1980a:	f00c fe90 	bl	2652e <log_string_sync>
		return -EFAULT;
   1980e:	f06f 000d 	mvn.w	r0, #13
   19812:	e7e1      	b.n	197d8 <connect_lte+0x24>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   19814:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19818:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1981c:	2b01      	cmp	r3, #1
   1981e:	d0db      	beq.n	197d8 <connect_lte+0x24>
	if (blocking) {
   19820:	b126      	cbz	r6, 1982c <connect_lte+0x78>
   19822:	4601      	mov	r1, r0
   19824:	462a      	mov	r2, r5
   19826:	4833      	ldr	r0, [pc, #204]	; (198f4 <connect_lte+0x140>)
   19828:	f010 ff58 	bl	2a6dc <z_impl_k_sem_init>
   1982c:	f04f 0802 	mov.w	r8, #2
   19830:	4d2c      	ldr	r5, [pc, #176]	; (198e4 <connect_lte+0x130>)
   19832:	4b2b      	ldr	r3, [pc, #172]	; (198e0 <connect_lte+0x12c>)
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   19834:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 19904 <connect_lte+0x150>
   19838:	1aed      	subs	r5, r5, r3
   1983a:	4f2f      	ldr	r7, [pc, #188]	; (198f8 <connect_lte+0x144>)
   1983c:	08ed      	lsrs	r5, r5, #3
		err = lte_lc_func_mode_get(&current_func_mode);
   1983e:	f10d 0006 	add.w	r0, sp, #6
   19842:	f7ff ff3f 	bl	196c4 <lte_lc_func_mode_get>
		if (err) {
   19846:	b9b8      	cbnz	r0, 19878 <connect_lte+0xc4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   19848:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1984c:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   19850:	d00b      	beq.n	1986a <connect_lte+0xb6>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   19852:	2001      	movs	r0, #1
   19854:	f7ff ff62 	bl	1971c <lte_lc_func_mode_set>
		if (err || !blocking) {
   19858:	b188      	cbz	r0, 1987e <connect_lte+0xca>
   1985a:	2300      	movs	r3, #0
   1985c:	e8d4 2fef 	ldaex	r2, [r4]
   19860:	e8c4 3fe1 	stlex	r1, r3, [r4]
   19864:	2900      	cmp	r1, #0
   19866:	d0b7      	beq.n	197d8 <connect_lte+0x24>
   19868:	e7f8      	b.n	1985c <connect_lte+0xa8>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   1986a:	f899 1000 	ldrb.w	r1, [r9]
   1986e:	7838      	ldrb	r0, [r7, #0]
   19870:	f7ff fdd2 	bl	19418 <lte_lc_system_mode_set>
			if (err) {
   19874:	2800      	cmp	r0, #0
   19876:	d0ec      	beq.n	19852 <connect_lte+0x9e>
			err = -EFAULT;
   19878:	f06f 000d 	mvn.w	r0, #13
   1987c:	e7ed      	b.n	1985a <connect_lte+0xa6>
		if (err || !blocking) {
   1987e:	2e00      	cmp	r6, #0
   19880:	d0eb      	beq.n	1985a <connect_lte+0xa6>
	return z_impl_k_sem_take(sem, timeout);
   19882:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   19886:	2300      	movs	r3, #0
   19888:	481a      	ldr	r0, [pc, #104]	; (198f4 <connect_lte+0x140>)
   1988a:	f009 fddf 	bl	2344c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1988e:	f110 0f0b 	cmn.w	r0, #11
   19892:	d1e2      	bne.n	1985a <connect_lte+0xa6>
			LOG_INF("Network connection attempt timed out");
   19894:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   19898:	f04a 0a03 	orr.w	sl, sl, #3
   1989c:	4650      	mov	r0, sl
   1989e:	4917      	ldr	r1, [pc, #92]	; (198fc <connect_lte+0x148>)
   198a0:	f00c fe45 	bl	2652e <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   198a4:	f1b8 0f01 	cmp.w	r8, #1
   198a8:	d011      	beq.n	198ce <connect_lte+0x11a>
				if (sys_mode_target == sys_mode_preferred) {
   198aa:	783b      	ldrb	r3, [r7, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   198ac:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   198ae:	2b04      	cmp	r3, #4
   198b0:	bf0c      	ite	eq
   198b2:	2305      	moveq	r3, #5
   198b4:	2304      	movne	r3, #4
   198b6:	703b      	strb	r3, [r7, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   198b8:	f7ff ff30 	bl	1971c <lte_lc_func_mode_set>
				if (err) {
   198bc:	2800      	cmp	r0, #0
   198be:	d1db      	bne.n	19878 <connect_lte+0xc4>
				LOG_INF("Using fallback network mode");
   198c0:	4650      	mov	r0, sl
   198c2:	490f      	ldr	r1, [pc, #60]	; (19900 <connect_lte+0x14c>)
   198c4:	f00c fe33 	bl	2652e <log_string_sync>
	} while (tries > 0);
   198c8:	f04f 0801 	mov.w	r8, #1
   198cc:	e7b7      	b.n	1983e <connect_lte+0x8a>
				err = -ETIMEDOUT;
   198ce:	f06f 0073 	mvn.w	r0, #115	; 0x73
   198d2:	e7c2      	b.n	1985a <connect_lte+0xa6>
		return -EINPROGRESS;
   198d4:	f06f 0076 	mvn.w	r0, #118	; 0x76
   198d8:	e77e      	b.n	197d8 <connect_lte+0x24>
   198da:	bf00      	nop
   198dc:	2000f077 	.word	0x2000f077
   198e0:	0002c344 	.word	0x0002c344
   198e4:	0002c3a4 	.word	0x0002c3a4
   198e8:	0002e41d 	.word	0x0002e41d
   198ec:	2000e144 	.word	0x2000e144
   198f0:	0002e448 	.word	0x0002e448
   198f4:	2000e148 	.word	0x2000e148
   198f8:	2000c880 	.word	0x2000c880
   198fc:	0002e472 	.word	0x0002e472
   19900:	0002e497 	.word	0x0002e497
   19904:	2000f078 	.word	0x2000f078

00019908 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   19908:	4801      	ldr	r0, [pc, #4]	; (19910 <k_mutex_unlock.constprop.0+0x8>)
   1990a:	f009 bcff 	b.w	2330c <z_impl_k_mutex_unlock>
   1990e:	bf00      	nop
   19910:	2000c9d4 	.word	0x2000c9d4

00019914 <event_handler_list_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   19914:	4b02      	ldr	r3, [pc, #8]	; (19920 <event_handler_list_is_empty+0xc>)
   19916:	6818      	ldr	r0, [r3, #0]
}
   19918:	fab0 f080 	clz	r0, r0
   1991c:	0940      	lsrs	r0, r0, #5
   1991e:	4770      	bx	lr
   19920:	2000e168 	.word	0x2000e168

00019924 <event_handler_list_append_handler>:
{
   19924:	b570      	push	{r4, r5, r6, lr}
   19926:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   19928:	4d13      	ldr	r5, [pc, #76]	; (19978 <event_handler_list_append_handler+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
   1992a:	f04f 32ff 	mov.w	r2, #4294967295
   1992e:	f04f 33ff 	mov.w	r3, #4294967295
   19932:	4812      	ldr	r0, [pc, #72]	; (1997c <event_handler_list_append_handler+0x58>)
   19934:	f009 fc6c 	bl	23210 <z_impl_k_mutex_lock>
	return list->head;
   19938:	682c      	ldr	r4, [r5, #0]
	return node->next;
   1993a:	2c00      	cmp	r4, #0
   1993c:	bf38      	it	cc
   1993e:	2400      	movcc	r4, #0
   19940:	b944      	cbnz	r4, 19954 <event_handler_list_append_handler+0x30>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   19942:	2008      	movs	r0, #8
   19944:	f011 fa44 	bl	2add0 <k_malloc>
	if (to_ins == NULL) {
   19948:	b948      	cbnz	r0, 1995e <event_handler_list_append_handler+0x3a>
		k_mutex_unlock(&list_mtx);
   1994a:	f7ff ffdd 	bl	19908 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   1994e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19952:	bd70      	pop	{r4, r5, r6, pc}
		if (curr->handler == handler) {
   19954:	6863      	ldr	r3, [r4, #4]
   19956:	429e      	cmp	r6, r3
   19958:	d007      	beq.n	1996a <event_handler_list_append_handler+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1995a:	6824      	ldr	r4, [r4, #0]
   1995c:	e7ed      	b.n	1993a <event_handler_list_append_handler+0x16>
	parent->next = child;
   1995e:	e9c0 4600 	strd	r4, r6, [r0]
Z_GENLIST_APPEND(slist, snode)
   19962:	686b      	ldr	r3, [r5, #4]
   19964:	b92b      	cbnz	r3, 19972 <event_handler_list_append_handler+0x4e>
	list->head = node;
   19966:	e9c5 0000 	strd	r0, r0, [r5]
	k_mutex_unlock(&list_mtx);
   1996a:	f7ff ffcd 	bl	19908 <k_mutex_unlock.constprop.0>
	return 0;
   1996e:	2000      	movs	r0, #0
   19970:	e7ef      	b.n	19952 <event_handler_list_append_handler+0x2e>
	parent->next = child;
   19972:	6018      	str	r0, [r3, #0]
	list->tail = node;
   19974:	6068      	str	r0, [r5, #4]
}
   19976:	e7f8      	b.n	1996a <event_handler_list_append_handler+0x46>
   19978:	2000e168 	.word	0x2000e168
   1997c:	2000c9d4 	.word	0x2000c9d4

00019980 <event_handler_list_dispatch>:
{
   19980:	b538      	push	{r3, r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   19982:	4c11      	ldr	r4, [pc, #68]	; (199c8 <event_handler_list_dispatch+0x48>)
   19984:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   19986:	6823      	ldr	r3, [r4, #0]
   19988:	b1e3      	cbz	r3, 199c4 <event_handler_list_dispatch+0x44>
   1998a:	f04f 33ff 	mov.w	r3, #4294967295
   1998e:	f04f 32ff 	mov.w	r2, #4294967295
   19992:	480e      	ldr	r0, [pc, #56]	; (199cc <event_handler_list_dispatch+0x4c>)
   19994:	f009 fc3c 	bl	23210 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   19998:	6823      	ldr	r3, [r4, #0]
   1999a:	b91b      	cbnz	r3, 199a4 <event_handler_list_dispatch+0x24>
}
   1999c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   199a0:	f7ff bfb2 	b.w	19908 <k_mutex_unlock.constprop.0>
	return node->next;
   199a4:	681c      	ldr	r4, [r3, #0]
   199a6:	2c00      	cmp	r4, #0
   199a8:	bf38      	it	cc
   199aa:	2400      	movcc	r4, #0
		curr->handler(evt);
   199ac:	4628      	mov	r0, r5
   199ae:	685b      	ldr	r3, [r3, #4]
   199b0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   199b2:	2c00      	cmp	r4, #0
   199b4:	d0f2      	beq.n	1999c <event_handler_list_dispatch+0x1c>
   199b6:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   199b8:	4623      	mov	r3, r4
   199ba:	2a00      	cmp	r2, #0
   199bc:	bf38      	it	cc
   199be:	2200      	movcc	r2, #0
   199c0:	4614      	mov	r4, r2
   199c2:	e7f3      	b.n	199ac <event_handler_list_dispatch+0x2c>
}
   199c4:	bd38      	pop	{r3, r4, r5, pc}
   199c6:	bf00      	nop
   199c8:	2000e168 	.word	0x2000e168
   199cc:	2000c9d4 	.word	0x2000c9d4

000199d0 <response_is_valid>:
{
   199d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   199d2:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   199d4:	4604      	mov	r4, r0
   199d6:	b100      	cbz	r0, 199da <response_is_valid+0xa>
   199d8:	b95a      	cbnz	r2, 199f2 <response_is_valid+0x22>
   199da:	480e      	ldr	r0, [pc, #56]	; (19a14 <response_is_valid+0x44>)
   199dc:	4b0e      	ldr	r3, [pc, #56]	; (19a18 <response_is_valid+0x48>)
		LOG_ERR("Invalid pointer provided");
   199de:	490f      	ldr	r1, [pc, #60]	; (19a1c <response_is_valid+0x4c>)
   199e0:	1ac0      	subs	r0, r0, r3
   199e2:	08c0      	lsrs	r0, r0, #3
   199e4:	0180      	lsls	r0, r0, #6
   199e6:	f040 0001 	orr.w	r0, r0, #1
   199ea:	f00c fda0 	bl	2652e <log_string_sync>
		return false;
   199ee:	2000      	movs	r0, #0
   199f0:	e00d      	b.n	19a0e <response_is_valid+0x3e>
	if ((response_len < strlen(check)) ||
   199f2:	4610      	mov	r0, r2
   199f4:	9201      	str	r2, [sp, #4]
   199f6:	f7f7 fae1 	bl	10fbc <strlen>
   199fa:	4285      	cmp	r5, r0
   199fc:	d3f7      	bcc.n	199ee <response_is_valid+0x1e>
	    (memcmp(response, check, response_len) != 0)) {
   199fe:	462a      	mov	r2, r5
   19a00:	4620      	mov	r0, r4
   19a02:	9901      	ldr	r1, [sp, #4]
   19a04:	f011 fa12 	bl	2ae2c <memcmp>
	if ((response_len < strlen(check)) ||
   19a08:	fab0 f080 	clz	r0, r0
   19a0c:	0940      	lsrs	r0, r0, #5
}
   19a0e:	b003      	add	sp, #12
   19a10:	bd30      	pop	{r4, r5, pc}
   19a12:	bf00      	nop
   19a14:	0002c3ac 	.word	0x0002c3ac
   19a18:	0002c344 	.word	0x0002c344
   19a1c:	0002e54d 	.word	0x0002e54d

00019a20 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   19a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   19a24:	f04f 0800 	mov.w	r8, #0
{
   19a28:	4606      	mov	r6, r0
   19a2a:	460f      	mov	r7, r1
   19a2c:	4614      	mov	r4, r2
   19a2e:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   19a30:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   19a34:	f7f7 fac2 	bl	10fbc <strlen>
   19a38:	2808      	cmp	r0, #8
   19a3a:	d004      	beq.n	19a46 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   19a3c:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   19a40:	b003      	add	sp, #12
   19a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   19a46:	4638      	mov	r0, r7
   19a48:	f7f7 fab8 	bl	10fbc <strlen>
   19a4c:	2808      	cmp	r0, #8
   19a4e:	d1f5      	bne.n	19a3c <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   19a50:	883a      	ldrh	r2, [r7, #0]
   19a52:	78bb      	ldrb	r3, [r7, #2]
   19a54:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   19a58:	4641      	mov	r1, r8
   19a5a:	2202      	movs	r2, #2
   19a5c:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   19a5e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   19a62:	f00b faef 	bl	25044 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   19a66:	2807      	cmp	r0, #7
   19a68:	d90a      	bls.n	19a80 <parse_psm+0x60>
   19a6a:	4835      	ldr	r0, [pc, #212]	; (19b40 <parse_psm+0x120>)
   19a6c:	4b35      	ldr	r3, [pc, #212]	; (19b44 <parse_psm+0x124>)
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   19a6e:	4936      	ldr	r1, [pc, #216]	; (19b48 <parse_psm+0x128>)
   19a70:	1ac0      	subs	r0, r0, r3
   19a72:	08c0      	lsrs	r0, r0, #3
   19a74:	0180      	lsls	r0, r0, #6
		LOG_ERR("Unable to parse active time string");
   19a76:	f040 0001 	orr.w	r0, r0, #1
   19a7a:	f00c fd58 	bl	2652e <log_string_sync>
   19a7e:	e7dd      	b.n	19a3c <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   19a80:	4b32      	ldr	r3, [pc, #200]	; (19b4c <parse_psm+0x12c>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   19a82:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   19a84:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   19a88:	4641      	mov	r1, r8
   19a8a:	1cf8      	adds	r0, r7, #3
   19a8c:	f00b fada 	bl	25044 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   19a90:	f1b9 0f00 	cmp.w	r9, #0
   19a94:	d11c      	bne.n	19ad0 <parse_psm+0xb0>
   19a96:	f04f 33ff 	mov.w	r3, #4294967295
   19a9a:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   19a9c:	b1ec      	cbz	r4, 19ada <parse_psm+0xba>
   19a9e:	4620      	mov	r0, r4
   19aa0:	f7f7 fa8c 	bl	10fbc <strlen>
   19aa4:	2808      	cmp	r0, #8
   19aa6:	d118      	bne.n	19ada <parse_psm+0xba>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   19aa8:	8822      	ldrh	r2, [r4, #0]
   19aaa:	78a3      	ldrb	r3, [r4, #2]
   19aac:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   19ab0:	2100      	movs	r1, #0
   19ab2:	2202      	movs	r2, #2
   19ab4:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   19ab6:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   19aba:	f00b fac3 	bl	25044 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   19abe:	2807      	cmp	r0, #7
   19ac0:	d91f      	bls.n	19b02 <parse_psm+0xe2>
   19ac2:	481f      	ldr	r0, [pc, #124]	; (19b40 <parse_psm+0x120>)
   19ac4:	4b1f      	ldr	r3, [pc, #124]	; (19b44 <parse_psm+0x124>)
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   19ac6:	4922      	ldr	r1, [pc, #136]	; (19b50 <parse_psm+0x130>)
   19ac8:	1ac0      	subs	r0, r0, r3
   19aca:	08c0      	lsrs	r0, r0, #3
   19acc:	0180      	lsls	r0, r0, #6
   19ace:	e7d2      	b.n	19a76 <parse_psm+0x56>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   19ad0:	fb00 f009 	mul.w	r0, r0, r9
   19ad4:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   19ad6:	3001      	adds	r0, #1
   19ad8:	d0e0      	beq.n	19a9c <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   19ada:	8832      	ldrh	r2, [r6, #0]
   19adc:	78b3      	ldrb	r3, [r6, #2]
   19ade:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   19ae2:	2100      	movs	r1, #0
   19ae4:	2202      	movs	r2, #2
   19ae6:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   19ae8:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   19aec:	f00b faaa 	bl	25044 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   19af0:	2807      	cmp	r0, #7
   19af2:	d915      	bls.n	19b20 <parse_psm+0x100>
   19af4:	4812      	ldr	r0, [pc, #72]	; (19b40 <parse_psm+0x120>)
   19af6:	4b13      	ldr	r3, [pc, #76]	; (19b44 <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   19af8:	4916      	ldr	r1, [pc, #88]	; (19b54 <parse_psm+0x134>)
   19afa:	1ac0      	subs	r0, r0, r3
   19afc:	08c0      	lsrs	r0, r0, #3
   19afe:	0180      	lsls	r0, r0, #6
   19b00:	e7b9      	b.n	19a76 <parse_psm+0x56>
		timer_unit = t3412_lookup[lut_idx];
   19b02:	4b15      	ldr	r3, [pc, #84]	; (19b58 <parse_psm+0x138>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   19b04:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   19b06:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   19b0a:	2100      	movs	r1, #0
   19b0c:	1ce0      	adds	r0, r4, #3
   19b0e:	f00b fa99 	bl	25044 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   19b12:	b117      	cbz	r7, 19b1a <parse_psm+0xfa>
   19b14:	4378      	muls	r0, r7
   19b16:	6028      	str	r0, [r5, #0]
   19b18:	e7df      	b.n	19ada <parse_psm+0xba>
   19b1a:	f04f 30ff 	mov.w	r0, #4294967295
   19b1e:	e7fa      	b.n	19b16 <parse_psm+0xf6>
	timer_unit = t3324_lookup[lut_idx];
   19b20:	4b0e      	ldr	r3, [pc, #56]	; (19b5c <parse_psm+0x13c>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   19b22:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   19b24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   19b28:	2100      	movs	r1, #0
   19b2a:	1cf0      	adds	r0, r6, #3
   19b2c:	f00b fa8a 	bl	25044 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   19b30:	b11c      	cbz	r4, 19b3a <parse_psm+0x11a>
   19b32:	4360      	muls	r0, r4
   19b34:	6068      	str	r0, [r5, #4]
	return 0;
   19b36:	2000      	movs	r0, #0
   19b38:	e782      	b.n	19a40 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   19b3a:	f04f 30ff 	mov.w	r0, #4294967295
   19b3e:	e7f9      	b.n	19b34 <parse_psm+0x114>
   19b40:	0002c3ac 	.word	0x0002c3ac
   19b44:	0002c344 	.word	0x0002c344
   19b48:	0002e69d 	.word	0x0002e69d
   19b4c:	0002c890 	.word	0x0002c890
   19b50:	0002e6d2 	.word	0x0002e6d2
   19b54:	0002e6fe 	.word	0x0002e6fe
   19b58:	0002c870 	.word	0x0002c870
   19b5c:	0002c870 	.word	0x0002c870

00019b60 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   19b60:	2300      	movs	r3, #0
{
   19b62:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b64:	b085      	sub	sp, #20
   19b66:	4607      	mov	r7, r0
   19b68:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   19b6a:	a802      	add	r0, sp, #8
   19b6c:	2104      	movs	r1, #4
{
   19b6e:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   19b70:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   19b74:	f00f f8dd 	bl	28d32 <at_params_list_init>
	if (err) {
   19b78:	4604      	mov	r4, r0
   19b7a:	b168      	cbz	r0, 19b98 <parse_rrc_mode+0x38>
   19b7c:	4823      	ldr	r0, [pc, #140]	; (19c0c <parse_rrc_mode+0xac>)
   19b7e:	4b24      	ldr	r3, [pc, #144]	; (19c10 <parse_rrc_mode+0xb0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   19b80:	4622      	mov	r2, r4
   19b82:	1ac0      	subs	r0, r0, r3
   19b84:	08c0      	lsrs	r0, r0, #3
   19b86:	0180      	lsls	r0, r0, #6
   19b88:	4922      	ldr	r1, [pc, #136]	; (19c14 <parse_rrc_mode+0xb4>)
   19b8a:	f040 0001 	orr.w	r0, r0, #1
   19b8e:	f00c fcce 	bl	2652e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   19b92:	4620      	mov	r0, r4
   19b94:	b005      	add	sp, #20
   19b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   19b98:	4601      	mov	r1, r0
   19b9a:	aa02      	add	r2, sp, #8
   19b9c:	4638      	mov	r0, r7
   19b9e:	f00f f8af 	bl	28d00 <at_parser_params_from_str>
	if (err) {
   19ba2:	4604      	mov	r4, r0
   19ba4:	b170      	cbz	r0, 19bc4 <parse_rrc_mode+0x64>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   19ba6:	4622      	mov	r2, r4
   19ba8:	4818      	ldr	r0, [pc, #96]	; (19c0c <parse_rrc_mode+0xac>)
   19baa:	4b19      	ldr	r3, [pc, #100]	; (19c10 <parse_rrc_mode+0xb0>)
   19bac:	491a      	ldr	r1, [pc, #104]	; (19c18 <parse_rrc_mode+0xb8>)
   19bae:	1ac0      	subs	r0, r0, r3
   19bb0:	08c0      	lsrs	r0, r0, #3
   19bb2:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get signalling mode, error: %d", err);
   19bb4:	f040 0001 	orr.w	r0, r0, #1
   19bb8:	f00c fcb9 	bl	2652e <log_string_sync>
	at_params_list_free(&resp_list);
   19bbc:	a802      	add	r0, sp, #8
   19bbe:	f00f f8e3 	bl	28d88 <at_params_list_free>
	return err;
   19bc2:	e7e6      	b.n	19b92 <parse_rrc_mode+0x32>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   19bc4:	4631      	mov	r1, r6
   19bc6:	aa01      	add	r2, sp, #4
   19bc8:	a802      	add	r0, sp, #8
   19bca:	f00f f98f 	bl	28eec <at_params_int_get>
	if (err) {
   19bce:	4604      	mov	r4, r0
   19bd0:	b138      	cbz	r0, 19be2 <parse_rrc_mode+0x82>
   19bd2:	480e      	ldr	r0, [pc, #56]	; (19c0c <parse_rrc_mode+0xac>)
   19bd4:	4b0e      	ldr	r3, [pc, #56]	; (19c10 <parse_rrc_mode+0xb0>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   19bd6:	4622      	mov	r2, r4
   19bd8:	1ac0      	subs	r0, r0, r3
   19bda:	08c0      	lsrs	r0, r0, #3
   19bdc:	490f      	ldr	r1, [pc, #60]	; (19c1c <parse_rrc_mode+0xbc>)
   19bde:	0180      	lsls	r0, r0, #6
   19be0:	e7e8      	b.n	19bb4 <parse_rrc_mode+0x54>
	if (temp_mode == 0) {
   19be2:	9a01      	ldr	r2, [sp, #4]
   19be4:	b90a      	cbnz	r2, 19bea <parse_rrc_mode+0x8a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   19be6:	7028      	strb	r0, [r5, #0]
   19be8:	e7e8      	b.n	19bbc <parse_rrc_mode+0x5c>
	} else if (temp_mode == 1) {
   19bea:	2a01      	cmp	r2, #1
   19bec:	d101      	bne.n	19bf2 <parse_rrc_mode+0x92>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   19bee:	702a      	strb	r2, [r5, #0]
   19bf0:	e7e4      	b.n	19bbc <parse_rrc_mode+0x5c>
   19bf2:	4b07      	ldr	r3, [pc, #28]	; (19c10 <parse_rrc_mode+0xb0>)
   19bf4:	4805      	ldr	r0, [pc, #20]	; (19c0c <parse_rrc_mode+0xac>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   19bf6:	490a      	ldr	r1, [pc, #40]	; (19c20 <parse_rrc_mode+0xc0>)
   19bf8:	1ac0      	subs	r0, r0, r3
   19bfa:	08c0      	lsrs	r0, r0, #3
   19bfc:	0180      	lsls	r0, r0, #6
   19bfe:	f040 0001 	orr.w	r0, r0, #1
   19c02:	f00c fc94 	bl	2652e <log_string_sync>
		err = -EINVAL;
   19c06:	f06f 0415 	mvn.w	r4, #21
   19c0a:	e7d7      	b.n	19bbc <parse_rrc_mode+0x5c>
   19c0c:	0002c3ac 	.word	0x0002c3ac
   19c10:	0002c344 	.word	0x0002c344
   19c14:	0002e566 	.word	0x0002e566
   19c18:	0002e721 	.word	0x0002e721
   19c1c:	0002e74c 	.word	0x0002e74c
   19c20:	0002e775 	.word	0x0002e775

00019c24 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   19c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19c28:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   19c2a:	2300      	movs	r3, #0
{
   19c2c:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   19c2e:	9303      	str	r3, [sp, #12]
   19c30:	f8ad 3010 	strh.w	r3, [sp, #16]
   19c34:	f88d 3012 	strb.w	r3, [sp, #18]
{
   19c38:	4690      	mov	r8, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   19c3a:	2309      	movs	r3, #9
   19c3c:	2207      	movs	r2, #7
{
   19c3e:	4605      	mov	r5, r0
   19c40:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   19c42:	a805      	add	r0, sp, #20
   19c44:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   19c46:	e9cd 2300 	strd	r2, r3, [sp]
{
   19c4a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   19c4e:	f00f f870 	bl	28d32 <at_params_list_init>
	if (err) {
   19c52:	4604      	mov	r4, r0
   19c54:	b170      	cbz	r0, 19c74 <parse_cereg+0x50>
   19c56:	4867      	ldr	r0, [pc, #412]	; (19df4 <parse_cereg+0x1d0>)
   19c58:	4b67      	ldr	r3, [pc, #412]	; (19df8 <parse_cereg+0x1d4>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   19c5a:	4622      	mov	r2, r4
   19c5c:	1ac0      	subs	r0, r0, r3
   19c5e:	08c0      	lsrs	r0, r0, #3
   19c60:	0180      	lsls	r0, r0, #6
   19c62:	4966      	ldr	r1, [pc, #408]	; (19dfc <parse_cereg+0x1d8>)
   19c64:	f040 0001 	orr.w	r0, r0, #1
   19c68:	f00c fc61 	bl	2652e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   19c6c:	4620      	mov	r0, r4
   19c6e:	b00b      	add	sp, #44	; 0x2c
   19c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   19c74:	4601      	mov	r1, r0
   19c76:	aa05      	add	r2, sp, #20
   19c78:	4628      	mov	r0, r5
   19c7a:	f00f f841 	bl	28d00 <at_parser_params_from_str>
	if (err) {
   19c7e:	4604      	mov	r4, r0
   19c80:	b170      	cbz	r0, 19ca0 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   19c82:	4622      	mov	r2, r4
   19c84:	485b      	ldr	r0, [pc, #364]	; (19df4 <parse_cereg+0x1d0>)
   19c86:	4b5c      	ldr	r3, [pc, #368]	; (19df8 <parse_cereg+0x1d4>)
   19c88:	495d      	ldr	r1, [pc, #372]	; (19e00 <parse_cereg+0x1dc>)
   19c8a:	1ac0      	subs	r0, r0, r3
   19c8c:	08c0      	lsrs	r0, r0, #3
   19c8e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get response prefix, error: %d", err);
   19c90:	f040 0001 	orr.w	r0, r0, #1
   19c94:	f00c fc4b 	bl	2652e <log_string_sync>
	at_params_list_free(&resp_list);
   19c98:	a805      	add	r0, sp, #20
   19c9a:	f00f f875 	bl	28d88 <at_params_list_free>
	return err;
   19c9e:	e7e5      	b.n	19c6c <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   19ca0:	4601      	mov	r1, r0
   19ca2:	466b      	mov	r3, sp
   19ca4:	aa03      	add	r2, sp, #12
   19ca6:	a805      	add	r0, sp, #20
   19ca8:	f00f f94f 	bl	28f4a <at_params_string_get>
	if (err) {
   19cac:	4604      	mov	r4, r0
   19cae:	b138      	cbz	r0, 19cc0 <parse_cereg+0x9c>
   19cb0:	4850      	ldr	r0, [pc, #320]	; (19df4 <parse_cereg+0x1d0>)
   19cb2:	4b51      	ldr	r3, [pc, #324]	; (19df8 <parse_cereg+0x1d4>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   19cb4:	4622      	mov	r2, r4
   19cb6:	1ac0      	subs	r0, r0, r3
   19cb8:	08c0      	lsrs	r0, r0, #3
   19cba:	4952      	ldr	r1, [pc, #328]	; (19e04 <parse_cereg+0x1e0>)
   19cbc:	0180      	lsls	r0, r0, #6
   19cbe:	e7e7      	b.n	19c90 <parse_cereg+0x6c>
	if (!response_is_valid(response_prefix, response_prefix_len,
   19cc0:	4a51      	ldr	r2, [pc, #324]	; (19e08 <parse_cereg+0x1e4>)
   19cc2:	9900      	ldr	r1, [sp, #0]
   19cc4:	a803      	add	r0, sp, #12
   19cc6:	f7ff fe83 	bl	199d0 <response_is_valid>
   19cca:	2800      	cmp	r0, #0
   19ccc:	d0e4      	beq.n	19c98 <parse_cereg+0x74>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   19cce:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   19cd0:	bf14      	ite	ne
   19cd2:	2101      	movne	r1, #1
   19cd4:	2102      	moveq	r1, #2
   19cd6:	aa07      	add	r2, sp, #28
   19cd8:	a805      	add	r0, sp, #20
   19cda:	f00f f907 	bl	28eec <at_params_int_get>
	if (err) {
   19cde:	1e05      	subs	r5, r0, #0
   19ce0:	d142      	bne.n	19d68 <parse_cereg+0x144>
	switch (reg_status) {
   19ce2:	9d07      	ldr	r5, [sp, #28]
   19ce4:	2d08      	cmp	r5, #8
   19ce6:	d01e      	beq.n	19d26 <parse_cereg+0x102>
   19ce8:	dc1b      	bgt.n	19d22 <parse_cereg+0xfe>
   19cea:	2d05      	cmp	r5, #5
   19cec:	d91b      	bls.n	19d26 <parse_cereg+0x102>
   19cee:	4b42      	ldr	r3, [pc, #264]	; (19df8 <parse_cereg+0x1d4>)
   19cf0:	4840      	ldr	r0, [pc, #256]	; (19df4 <parse_cereg+0x1d0>)
		LOG_ERR("Invalid network registration status: %d", reg_status);
   19cf2:	462a      	mov	r2, r5
   19cf4:	1ac0      	subs	r0, r0, r3
   19cf6:	08c0      	lsrs	r0, r0, #3
   19cf8:	0180      	lsls	r0, r0, #6
   19cfa:	4944      	ldr	r1, [pc, #272]	; (19e0c <parse_cereg+0x1e8>)
   19cfc:	f040 0001 	orr.w	r0, r0, #1
   19d00:	f00c fc15 	bl	2652e <log_string_sync>
		return -EINVAL;
   19d04:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   19d08:	462a      	mov	r2, r5
   19d0a:	483a      	ldr	r0, [pc, #232]	; (19df4 <parse_cereg+0x1d0>)
   19d0c:	4b3a      	ldr	r3, [pc, #232]	; (19df8 <parse_cereg+0x1d4>)
   19d0e:	4940      	ldr	r1, [pc, #256]	; (19e10 <parse_cereg+0x1ec>)
   19d10:	1ac0      	subs	r0, r0, r3
   19d12:	08c0      	lsrs	r0, r0, #3
   19d14:	0180      	lsls	r0, r0, #6
			LOG_ERR("Could not get cell ID, error: %d", err);
   19d16:	f040 0001 	orr.w	r0, r0, #1
   19d1a:	f00c fc08 	bl	2652e <log_string_sync>
			goto clean_exit;
   19d1e:	462c      	mov	r4, r5
   19d20:	e7ba      	b.n	19c98 <parse_cereg+0x74>
	switch (reg_status) {
   19d22:	2d5a      	cmp	r5, #90	; 0x5a
   19d24:	d1e3      	bne.n	19cee <parse_cereg+0xca>
	if (reg_status) {
   19d26:	f1b8 0f00 	cmp.w	r8, #0
   19d2a:	d001      	beq.n	19d30 <parse_cereg+0x10c>
		*reg_status = status;
   19d2c:	f888 5000 	strb.w	r5, [r8]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   19d30:	2e00      	cmp	r6, #0
   19d32:	d046      	beq.n	19dc2 <parse_cereg+0x19e>
   19d34:	2d5a      	cmp	r5, #90	; 0x5a
   19d36:	d058      	beq.n	19dea <parse_cereg+0x1c6>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   19d38:	a805      	add	r0, sp, #20
   19d3a:	f00f f926 	bl	28f8a <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   19d3e:	2803      	cmp	r0, #3
   19d40:	d953      	bls.n	19dea <parse_cereg+0x1c6>
		err = at_params_string_get(
   19d42:	2f00      	cmp	r7, #0
   19d44:	bf14      	ite	ne
   19d46:	2102      	movne	r1, #2
   19d48:	2103      	moveq	r1, #3
   19d4a:	ab01      	add	r3, sp, #4
   19d4c:	aa07      	add	r2, sp, #28
   19d4e:	a805      	add	r0, sp, #20
   19d50:	f00f f8fb 	bl	28f4a <at_params_string_get>
		if (err) {
   19d54:	4605      	mov	r5, r0
   19d56:	b148      	cbz	r0, 19d6c <parse_cereg+0x148>
   19d58:	4826      	ldr	r0, [pc, #152]	; (19df4 <parse_cereg+0x1d0>)
   19d5a:	4b27      	ldr	r3, [pc, #156]	; (19df8 <parse_cereg+0x1d4>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
   19d5c:	462a      	mov	r2, r5
   19d5e:	1ac0      	subs	r0, r0, r3
   19d60:	08c0      	lsrs	r0, r0, #3
   19d62:	492c      	ldr	r1, [pc, #176]	; (19e14 <parse_cereg+0x1f0>)
   19d64:	0180      	lsls	r0, r0, #6
   19d66:	e7d6      	b.n	19d16 <parse_cereg+0xf2>
	if (status < 0) {
   19d68:	dadd      	bge.n	19d26 <parse_cereg+0x102>
   19d6a:	e7cd      	b.n	19d08 <parse_cereg+0xe4>
		str_buf[len] = '\0';
   19d6c:	9b01      	ldr	r3, [sp, #4]
   19d6e:	aa0a      	add	r2, sp, #40	; 0x28
   19d70:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   19d72:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   19d74:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   19d78:	2210      	movs	r2, #16
   19d7a:	a807      	add	r0, sp, #28
   19d7c:	f00b f962 	bl	25044 <strtoul>
		len = sizeof(str_buf) - 1;
   19d80:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   19d82:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   19d84:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   19d86:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   19d88:	bf14      	ite	ne
   19d8a:	2103      	movne	r1, #3
   19d8c:	2104      	moveq	r1, #4
   19d8e:	ab01      	add	r3, sp, #4
   19d90:	aa07      	add	r2, sp, #28
   19d92:	a805      	add	r0, sp, #20
   19d94:	f00f f8d9 	bl	28f4a <at_params_string_get>
		if (err) {
   19d98:	4605      	mov	r5, r0
   19d9a:	b138      	cbz	r0, 19dac <parse_cereg+0x188>
   19d9c:	4815      	ldr	r0, [pc, #84]	; (19df4 <parse_cereg+0x1d0>)
   19d9e:	4b16      	ldr	r3, [pc, #88]	; (19df8 <parse_cereg+0x1d4>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   19da0:	462a      	mov	r2, r5
   19da2:	1ac0      	subs	r0, r0, r3
   19da4:	08c0      	lsrs	r0, r0, #3
   19da6:	491c      	ldr	r1, [pc, #112]	; (19e18 <parse_cereg+0x1f4>)
   19da8:	0180      	lsls	r0, r0, #6
   19daa:	e7b4      	b.n	19d16 <parse_cereg+0xf2>
		str_buf[len] = '\0';
   19dac:	9b01      	ldr	r3, [sp, #4]
   19dae:	aa0a      	add	r2, sp, #40	; 0x28
   19db0:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   19db2:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   19db4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   19db8:	2210      	movs	r2, #16
   19dba:	a807      	add	r0, sp, #28
   19dbc:	f00b f942 	bl	25044 <strtoul>
   19dc0:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   19dc2:	f1b9 0f00 	cmp.w	r9, #0
   19dc6:	f43f af67 	beq.w	19c98 <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   19dca:	2f00      	cmp	r7, #0
   19dcc:	bf14      	ite	ne
   19dce:	2104      	movne	r1, #4
   19dd0:	2105      	moveq	r1, #5
   19dd2:	aa02      	add	r2, sp, #8
   19dd4:	a805      	add	r0, sp, #20
   19dd6:	f00f f889 	bl	28eec <at_params_int_get>
		if (err) {
   19dda:	b920      	cbnz	r0, 19de6 <parse_cereg+0x1c2>
			*lte_mode = mode;
   19ddc:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   19de0:	f889 3000 	strb.w	r3, [r9]
   19de4:	e758      	b.n	19c98 <parse_cereg+0x74>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   19de6:	2300      	movs	r3, #0
   19de8:	e7fa      	b.n	19de0 <parse_cereg+0x1bc>
		cell->tac = UINT32_MAX;
   19dea:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   19dee:	e9c6 3302 	strd	r3, r3, [r6, #8]
   19df2:	e7e6      	b.n	19dc2 <parse_cereg+0x19e>
   19df4:	0002c3ac 	.word	0x0002c3ac
   19df8:	0002c344 	.word	0x0002c344
   19dfc:	0002e566 	.word	0x0002e566
   19e00:	0002e791 	.word	0x0002e791
   19e04:	0002e7be 	.word	0x0002e7be
   19e08:	0002e4e9 	.word	0x0002e4e9
   19e0c:	0002e7e7 	.word	0x0002e7e7
   19e10:	0002e1c2 	.word	0x0002e1c2
   19e14:	0002e80f 	.word	0x0002e80f
   19e18:	0002e83b 	.word	0x0002e83b

00019e1c <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   19e1c:	2300      	movs	r3, #0
{
   19e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19e20:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   19e22:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   19e24:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   19e28:	2900      	cmp	r1, #0
   19e2a:	d04f      	beq.n	19ecc <parse_xt3412+0xb0>
   19e2c:	2800      	cmp	r0, #0
   19e2e:	d04d      	beq.n	19ecc <parse_xt3412+0xb0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   19e30:	2104      	movs	r1, #4
   19e32:	4668      	mov	r0, sp
   19e34:	f00e ff7d 	bl	28d32 <at_params_list_init>
	if (err) {
   19e38:	4604      	mov	r4, r0
   19e3a:	b168      	cbz	r0, 19e58 <parse_xt3412+0x3c>
   19e3c:	4825      	ldr	r0, [pc, #148]	; (19ed4 <parse_xt3412+0xb8>)
   19e3e:	4b26      	ldr	r3, [pc, #152]	; (19ed8 <parse_xt3412+0xbc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   19e40:	4622      	mov	r2, r4
   19e42:	1ac0      	subs	r0, r0, r3
   19e44:	08c0      	lsrs	r0, r0, #3
   19e46:	0180      	lsls	r0, r0, #6
   19e48:	4924      	ldr	r1, [pc, #144]	; (19edc <parse_xt3412+0xc0>)
   19e4a:	f040 0001 	orr.w	r0, r0, #1
   19e4e:	f00c fb6e 	bl	2652e <log_string_sync>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   19e52:	4620      	mov	r0, r4
   19e54:	b002      	add	sp, #8
   19e56:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   19e58:	4601      	mov	r1, r0
   19e5a:	466a      	mov	r2, sp
   19e5c:	4630      	mov	r0, r6
   19e5e:	f00e ff4f 	bl	28d00 <at_parser_params_from_str>
	if (err) {
   19e62:	4604      	mov	r4, r0
   19e64:	b170      	cbz	r0, 19e84 <parse_xt3412+0x68>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   19e66:	4622      	mov	r2, r4
   19e68:	481a      	ldr	r0, [pc, #104]	; (19ed4 <parse_xt3412+0xb8>)
   19e6a:	4b1b      	ldr	r3, [pc, #108]	; (19ed8 <parse_xt3412+0xbc>)
   19e6c:	491c      	ldr	r1, [pc, #112]	; (19ee0 <parse_xt3412+0xc4>)
   19e6e:	1ac0      	subs	r0, r0, r3
   19e70:	08c0      	lsrs	r0, r0, #3
   19e72:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   19e74:	f040 0001 	orr.w	r0, r0, #1
   19e78:	f00c fb59 	bl	2652e <log_string_sync>
	at_params_list_free(&resp_list);
   19e7c:	4668      	mov	r0, sp
   19e7e:	f00e ff83 	bl	28d88 <at_params_list_free>
	return err;
   19e82:	e7e6      	b.n	19e52 <parse_xt3412+0x36>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   19e84:	462a      	mov	r2, r5
   19e86:	2102      	movs	r1, #2
   19e88:	4668      	mov	r0, sp
   19e8a:	f00f f84a 	bl	28f22 <at_params_int64_get>
	if (err) {
   19e8e:	4604      	mov	r4, r0
   19e90:	b138      	cbz	r0, 19ea2 <parse_xt3412+0x86>
   19e92:	4810      	ldr	r0, [pc, #64]	; (19ed4 <parse_xt3412+0xb8>)
   19e94:	4b10      	ldr	r3, [pc, #64]	; (19ed8 <parse_xt3412+0xbc>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   19e96:	4622      	mov	r2, r4
   19e98:	1ac0      	subs	r0, r0, r3
   19e9a:	08c0      	lsrs	r0, r0, #3
   19e9c:	4911      	ldr	r1, [pc, #68]	; (19ee4 <parse_xt3412+0xc8>)
   19e9e:	0180      	lsls	r0, r0, #6
   19ea0:	e7e8      	b.n	19e74 <parse_xt3412+0x58>
	if ((*time > T3412_MAX) || *time < 0) {
   19ea2:	2108      	movs	r1, #8
   19ea4:	e9d5 2300 	ldrd	r2, r3, [r5]
   19ea8:	480f      	ldr	r0, [pc, #60]	; (19ee8 <parse_xt3412+0xcc>)
   19eaa:	4299      	cmp	r1, r3
   19eac:	bf08      	it	eq
   19eae:	4290      	cmpeq	r0, r2
   19eb0:	d2e4      	bcs.n	19e7c <parse_xt3412+0x60>
   19eb2:	4b09      	ldr	r3, [pc, #36]	; (19ed8 <parse_xt3412+0xbc>)
   19eb4:	4807      	ldr	r0, [pc, #28]	; (19ed4 <parse_xt3412+0xb8>)
		LOG_WRN("Parsed time parameter not within valid range");
   19eb6:	490d      	ldr	r1, [pc, #52]	; (19eec <parse_xt3412+0xd0>)
   19eb8:	1ac0      	subs	r0, r0, r3
   19eba:	08c0      	lsrs	r0, r0, #3
   19ebc:	0180      	lsls	r0, r0, #6
   19ebe:	f040 0002 	orr.w	r0, r0, #2
   19ec2:	f00c fb34 	bl	2652e <log_string_sync>
		err = -EINVAL;
   19ec6:	f06f 0415 	mvn.w	r4, #21
   19eca:	e7d7      	b.n	19e7c <parse_xt3412+0x60>
		return -EINVAL;
   19ecc:	f06f 0415 	mvn.w	r4, #21
   19ed0:	e7bf      	b.n	19e52 <parse_xt3412+0x36>
   19ed2:	bf00      	nop
   19ed4:	0002c3ac 	.word	0x0002c3ac
   19ed8:	0002c344 	.word	0x0002c344
   19edc:	0002e566 	.word	0x0002e566
   19ee0:	0002e85c 	.word	0x0002e85c
   19ee4:	0002e889 	.word	0x0002e889
   19ee8:	5099e000 	.word	0x5099e000
   19eec:	0002e8b6 	.word	0x0002e8b6

00019ef0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   19ef0:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   19ef2:	4604      	mov	r4, r0
   19ef4:	b958      	cbnz	r0, 19f0e <neighborcell_count_get+0x1e>
   19ef6:	4b0e      	ldr	r3, [pc, #56]	; (19f30 <neighborcell_count_get+0x40>)
   19ef8:	480e      	ldr	r0, [pc, #56]	; (19f34 <neighborcell_count_get+0x44>)
		LOG_ERR("at_response is NULL, can't get cell count");
   19efa:	490f      	ldr	r1, [pc, #60]	; (19f38 <neighborcell_count_get+0x48>)
   19efc:	1ac0      	subs	r0, r0, r3
   19efe:	08c0      	lsrs	r0, r0, #3
   19f00:	0180      	lsls	r0, r0, #6
   19f02:	f040 0001 	orr.w	r0, r0, #1
   19f06:	f00c fb12 	bl	2652e <log_string_sync>
		return 0;
   19f0a:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   19f0c:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   19f0e:	2400      	movs	r4, #0
   19f10:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   19f12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   19f16:	282c      	cmp	r0, #44	; 0x2c
   19f18:	d101      	bne.n	19f1e <neighborcell_count_get+0x2e>
			count++;
   19f1a:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   19f1c:	e7f9      	b.n	19f12 <neighborcell_count_get+0x22>
   19f1e:	2800      	cmp	r0, #0
   19f20:	d1f7      	bne.n	19f12 <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   19f22:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   19f24:	bf82      	ittt	hi
   19f26:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   19f28:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   19f2a:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   19f2e:	e7ed      	b.n	19f0c <neighborcell_count_get+0x1c>
   19f30:	0002c344 	.word	0x0002c344
   19f34:	0002c3ac 	.word	0x0002c3ac
   19f38:	0002e8e3 	.word	0x0002e8e3

00019f3c <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   19f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   19f40:	230b      	movs	r3, #11
{
   19f42:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   19f44:	2100      	movs	r1, #0
{
   19f46:	4606      	mov	r6, r0
   19f48:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   19f4a:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   19f4e:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   19f50:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   19f54:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   19f56:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   19f5a:	2b2c      	cmp	r3, #44	; 0x2c
   19f5c:	d101      	bne.n	19f62 <parse_ncellmeas+0x26>
			count++;
   19f5e:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   19f60:	e7f9      	b.n	19f56 <parse_ncellmeas+0x1a>
   19f62:	2b00      	cmp	r3, #0
   19f64:	d1f7      	bne.n	19f56 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   19f66:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   19f6a:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   19f6e:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   19f70:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   19f72:	a807      	add	r0, sp, #28
   19f74:	f00e fedd 	bl	28d32 <at_params_list_init>
	if (err) {
   19f78:	4604      	mov	r4, r0
   19f7a:	b170      	cbz	r0, 19f9a <parse_ncellmeas+0x5e>
   19f7c:	4898      	ldr	r0, [pc, #608]	; (1a1e0 <parse_ncellmeas+0x2a4>)
   19f7e:	4b99      	ldr	r3, [pc, #612]	; (1a1e4 <parse_ncellmeas+0x2a8>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   19f80:	4622      	mov	r2, r4
   19f82:	1ac0      	subs	r0, r0, r3
   19f84:	08c0      	lsrs	r0, r0, #3
   19f86:	0180      	lsls	r0, r0, #6
   19f88:	4997      	ldr	r1, [pc, #604]	; (1a1e8 <parse_ncellmeas+0x2ac>)
   19f8a:	f040 0001 	orr.w	r0, r0, #1
   19f8e:	f00c face 	bl	2652e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   19f92:	4620      	mov	r0, r4
   19f94:	b00d      	add	sp, #52	; 0x34
   19f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   19f9a:	4601      	mov	r1, r0
   19f9c:	aa07      	add	r2, sp, #28
   19f9e:	4630      	mov	r0, r6
   19fa0:	f00e feae 	bl	28d00 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   19fa4:	4604      	mov	r4, r0
   19fa6:	b180      	cbz	r0, 19fca <parse_ncellmeas+0x8e>
   19fa8:	1dc3      	adds	r3, r0, #7
   19faa:	d01f      	beq.n	19fec <parse_ncellmeas+0xb0>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   19fac:	4622      	mov	r2, r4
   19fae:	488c      	ldr	r0, [pc, #560]	; (1a1e0 <parse_ncellmeas+0x2a4>)
   19fb0:	4b8c      	ldr	r3, [pc, #560]	; (1a1e4 <parse_ncellmeas+0x2a8>)
   19fb2:	498e      	ldr	r1, [pc, #568]	; (1a1ec <parse_ncellmeas+0x2b0>)
   19fb4:	1ac0      	subs	r0, r0, r3
   19fb6:	08c0      	lsrs	r0, r0, #3
   19fb8:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get response prefix, error: %d", err);
   19fba:	f040 0001 	orr.w	r0, r0, #1
   19fbe:	f00c fab6 	bl	2652e <log_string_sync>
	at_params_list_free(&resp_list);
   19fc2:	a807      	add	r0, sp, #28
   19fc4:	f00e fee0 	bl	28d88 <at_params_list_free>
	return err;
   19fc8:	e7e3      	b.n	19f92 <parse_ncellmeas+0x56>
	bool incomplete = false;
   19fca:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   19fcc:	2100      	movs	r1, #0
   19fce:	ab04      	add	r3, sp, #16
   19fd0:	aa09      	add	r2, sp, #36	; 0x24
   19fd2:	a807      	add	r0, sp, #28
   19fd4:	f00e ffb9 	bl	28f4a <at_params_string_get>
	if (err) {
   19fd8:	4604      	mov	r4, r0
   19fda:	b148      	cbz	r0, 19ff0 <parse_ncellmeas+0xb4>
   19fdc:	4880      	ldr	r0, [pc, #512]	; (1a1e0 <parse_ncellmeas+0x2a4>)
   19fde:	4b81      	ldr	r3, [pc, #516]	; (1a1e4 <parse_ncellmeas+0x2a8>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   19fe0:	4622      	mov	r2, r4
   19fe2:	1ac0      	subs	r0, r0, r3
   19fe4:	08c0      	lsrs	r0, r0, #3
   19fe6:	4982      	ldr	r1, [pc, #520]	; (1a1f0 <parse_ncellmeas+0x2b4>)
   19fe8:	0180      	lsls	r0, r0, #6
   19fea:	e7e6      	b.n	19fba <parse_ncellmeas+0x7e>
		incomplete = true;
   19fec:	2701      	movs	r7, #1
   19fee:	e7ed      	b.n	19fcc <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   19ff0:	4a80      	ldr	r2, [pc, #512]	; (1a1f4 <parse_ncellmeas+0x2b8>)
   19ff2:	9904      	ldr	r1, [sp, #16]
   19ff4:	a809      	add	r0, sp, #36	; 0x24
   19ff6:	f7ff fceb 	bl	199d0 <response_is_valid>
   19ffa:	2800      	cmp	r0, #0
   19ffc:	d0e1      	beq.n	19fc2 <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   19ffe:	2101      	movs	r1, #1
   1a000:	aa01      	add	r2, sp, #4
   1a002:	a807      	add	r0, sp, #28
   1a004:	f00e ff72 	bl	28eec <at_params_int_get>
	if (err) {
   1a008:	4604      	mov	r4, r0
   1a00a:	2800      	cmp	r0, #0
   1a00c:	d1d9      	bne.n	19fc2 <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1a00e:	9b01      	ldr	r3, [sp, #4]
   1a010:	2b00      	cmp	r3, #0
   1a012:	f040 80e3 	bne.w	1a1dc <parse_ncellmeas+0x2a0>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   1a016:	2102      	movs	r1, #2
   1a018:	aa02      	add	r2, sp, #8
   1a01a:	a807      	add	r0, sp, #28
   1a01c:	f00e fffb 	bl	29016 <string_param_to_int.constprop.0>
	if (err) {
   1a020:	4604      	mov	r4, r0
   1a022:	2800      	cmp	r0, #0
   1a024:	d1cd      	bne.n	19fc2 <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1a026:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   1a028:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1a02c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1a030:	bfa4      	itt	ge
   1a032:	f04f 33ff 	movge.w	r3, #4294967295
   1a036:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   1a038:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1a03a:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   1a03c:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1a03e:	aa05      	add	r2, sp, #20
   1a040:	ab03      	add	r3, sp, #12
   1a042:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   1a044:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1a048:	f00e ff7f 	bl	28f4a <at_params_string_get>
	if (err) {
   1a04c:	4604      	mov	r4, r0
   1a04e:	2800      	cmp	r0, #0
   1a050:	d1b7      	bne.n	19fc2 <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   1a052:	9b03      	ldr	r3, [sp, #12]
   1a054:	aa0c      	add	r2, sp, #48	; 0x30
   1a056:	4413      	add	r3, r2
   1a058:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1a05c:	210a      	movs	r1, #10
   1a05e:	1d2a      	adds	r2, r5, #4
   1a060:	f10d 0017 	add.w	r0, sp, #23
   1a064:	f00e ffb1 	bl	28fca <string_to_int>
	if (err) {
   1a068:	4604      	mov	r4, r0
   1a06a:	2800      	cmp	r0, #0
   1a06c:	d1a9      	bne.n	19fc2 <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   1a06e:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   1a072:	462a      	mov	r2, r5
   1a074:	210a      	movs	r1, #10
   1a076:	a805      	add	r0, sp, #20
   1a078:	f00e ffa7 	bl	28fca <string_to_int>
	if (err) {
   1a07c:	4604      	mov	r4, r0
   1a07e:	2800      	cmp	r0, #0
   1a080:	d19f      	bne.n	19fc2 <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1a082:	2104      	movs	r1, #4
   1a084:	aa02      	add	r2, sp, #8
   1a086:	a807      	add	r0, sp, #28
   1a088:	f00e ffc5 	bl	29016 <string_param_to_int.constprop.0>
	if (err) {
   1a08c:	4604      	mov	r4, r0
   1a08e:	2800      	cmp	r0, #0
   1a090:	d197      	bne.n	19fc2 <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   1a092:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1a094:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   1a096:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1a098:	aa02      	add	r2, sp, #8
   1a09a:	a807      	add	r0, sp, #28
   1a09c:	f00e ff26 	bl	28eec <at_params_int_get>
	if (err) {
   1a0a0:	4604      	mov	r4, r0
   1a0a2:	2800      	cmp	r0, #0
   1a0a4:	d18d      	bne.n	19fc2 <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   1a0a6:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1a0a8:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1a0aa:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1a0ac:	f105 0210 	add.w	r2, r5, #16
   1a0b0:	a807      	add	r0, sp, #28
   1a0b2:	f00e ff1b 	bl	28eec <at_params_int_get>
	if (err) {
   1a0b6:	4604      	mov	r4, r0
   1a0b8:	2800      	cmp	r0, #0
   1a0ba:	d182      	bne.n	19fc2 <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1a0bc:	4641      	mov	r1, r8
   1a0be:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1a0c2:	a807      	add	r0, sp, #28
   1a0c4:	f00e fede 	bl	28e84 <at_params_short_get>
	if (err) {
   1a0c8:	4604      	mov	r4, r0
   1a0ca:	2800      	cmp	r0, #0
   1a0cc:	f47f af79 	bne.w	19fc2 <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1a0d0:	2108      	movs	r1, #8
   1a0d2:	aa02      	add	r2, sp, #8
   1a0d4:	a807      	add	r0, sp, #28
   1a0d6:	f00e ff09 	bl	28eec <at_params_int_get>
	if (err) {
   1a0da:	4604      	mov	r4, r0
   1a0dc:	2800      	cmp	r0, #0
   1a0de:	f47f af70 	bne.w	19fc2 <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   1a0e2:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1a0e4:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   1a0e6:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1a0e8:	aa02      	add	r2, sp, #8
   1a0ea:	a807      	add	r0, sp, #28
   1a0ec:	f00e fefe 	bl	28eec <at_params_int_get>
	if (err) {
   1a0f0:	4604      	mov	r4, r0
   1a0f2:	2800      	cmp	r0, #0
   1a0f4:	f47f af65 	bne.w	19fc2 <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   1a0f8:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1a0fa:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1a0fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1a0fe:	f105 0220 	add.w	r2, r5, #32
   1a102:	a807      	add	r0, sp, #28
   1a104:	f00e ff0d 	bl	28f22 <at_params_int64_get>
	if (err) {
   1a108:	4604      	mov	r4, r0
   1a10a:	2800      	cmp	r0, #0
   1a10c:	f47f af59 	bne.w	19fc2 <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   1a110:	4630      	mov	r0, r6
   1a112:	f7ff feed 	bl	19ef0 <neighborcell_count_get>
   1a116:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   1a11a:	b2c0      	uxtb	r0, r0
   1a11c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1a120:	f100 060b 	add.w	r6, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   1a124:	a807      	add	r0, sp, #28
   1a126:	f00e ff30 	bl	28f8a <at_params_valid_count_get>
   1a12a:	4286      	cmp	r6, r0
   1a12c:	d208      	bcs.n	1a140 <parse_ncellmeas+0x204>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1a12e:	4631      	mov	r1, r6
   1a130:	f105 0218 	add.w	r2, r5, #24
   1a134:	a807      	add	r0, sp, #28
   1a136:	f00e fef4 	bl	28f22 <at_params_int64_get>
		if (err) {
   1a13a:	b128      	cbz	r0, 1a148 <parse_ncellmeas+0x20c>
		err = at_params_int_get(&resp_list,
   1a13c:	4604      	mov	r4, r0
   1a13e:	e740      	b.n	19fc2 <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   1a140:	2200      	movs	r2, #0
   1a142:	2300      	movs	r3, #0
   1a144:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1a148:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a14c:	2b00      	cmp	r3, #0
   1a14e:	f43f af38 	beq.w	19fc2 <parse_ncellmeas+0x86>
   1a152:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1a154:	2b00      	cmp	r3, #0
   1a156:	f43f af34 	beq.w	19fc2 <parse_ncellmeas+0x86>
   1a15a:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1a15c:	f04f 0800 	mov.w	r8, #0
   1a160:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a164:	4598      	cmp	r8, r3
   1a166:	d304      	bcc.n	1a172 <parse_ncellmeas+0x236>
		err = -E2BIG;
   1a168:	2f00      	cmp	r7, #0
   1a16a:	bf18      	it	ne
   1a16c:	f06f 0406 	mvnne.w	r4, #6
   1a170:	e727      	b.n	19fc2 <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   1a172:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1a174:	1f31      	subs	r1, r6, #4
   1a176:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   1a17a:	a807      	add	r0, sp, #28
   1a17c:	ea4f 1908 	mov.w	r9, r8, lsl #4
   1a180:	f00e feb4 	bl	28eec <at_params_int_get>
		if (err) {
   1a184:	2800      	cmp	r0, #0
   1a186:	d1d9      	bne.n	1a13c <parse_ncellmeas+0x200>
					  &cells->neighbor_cells[i].phys_cell_id);
   1a188:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   1a18a:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   1a18c:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   1a18e:	3208      	adds	r2, #8
   1a190:	a807      	add	r0, sp, #28
   1a192:	f00e fe77 	bl	28e84 <at_params_short_get>
		if (err) {
   1a196:	2800      	cmp	r0, #0
   1a198:	d1d0      	bne.n	1a13c <parse_ncellmeas+0x200>
		err = at_params_int_get(&resp_list,
   1a19a:	aa02      	add	r2, sp, #8
   1a19c:	1eb1      	subs	r1, r6, #2
   1a19e:	a807      	add	r0, sp, #28
   1a1a0:	f00e fea4 	bl	28eec <at_params_int_get>
		if (err) {
   1a1a4:	2800      	cmp	r0, #0
   1a1a6:	d1c9      	bne.n	1a13c <parse_ncellmeas+0x200>
		cells->neighbor_cells[i].rsrp = tmp;
   1a1a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1a1aa:	9a02      	ldr	r2, [sp, #8]
   1a1ac:	444b      	add	r3, r9
   1a1ae:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1a1b0:	1e71      	subs	r1, r6, #1
   1a1b2:	aa02      	add	r2, sp, #8
   1a1b4:	a807      	add	r0, sp, #28
   1a1b6:	f00e fe99 	bl	28eec <at_params_int_get>
		if (err) {
   1a1ba:	2800      	cmp	r0, #0
   1a1bc:	d1be      	bne.n	1a13c <parse_ncellmeas+0x200>
		cells->neighbor_cells[i].rsrq = tmp;
   1a1be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a1c0:	9b02      	ldr	r3, [sp, #8]
   1a1c2:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   1a1c4:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   1a1c6:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   1a1c8:	a807      	add	r0, sp, #28
   1a1ca:	3204      	adds	r2, #4
   1a1cc:	f00e fe8e 	bl	28eec <at_params_int_get>
		if (err) {
   1a1d0:	3605      	adds	r6, #5
   1a1d2:	2800      	cmp	r0, #0
   1a1d4:	d1b2      	bne.n	1a13c <parse_ncellmeas+0x200>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1a1d6:	f108 0801 	add.w	r8, r8, #1
   1a1da:	e7c1      	b.n	1a160 <parse_ncellmeas+0x224>
		err = 1;
   1a1dc:	2401      	movs	r4, #1
   1a1de:	e6f0      	b.n	19fc2 <parse_ncellmeas+0x86>
   1a1e0:	0002c3ac 	.word	0x0002c3ac
   1a1e4:	0002c344 	.word	0x0002c344
   1a1e8:	0002e566 	.word	0x0002e566
   1a1ec:	0002e90d 	.word	0x0002e90d
   1a1f0:	0002e7be 	.word	0x0002e7be
   1a1f4:	0002e4c7 	.word	0x0002e4c7

0001a1f8 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   1a1f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   1a1fa:	2300      	movs	r3, #0
{
   1a1fc:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   1a1fe:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1a200:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   1a204:	2900      	cmp	r1, #0
   1a206:	d05b      	beq.n	1a2c0 <parse_xmodemsleep+0xc8>
   1a208:	2800      	cmp	r0, #0
   1a20a:	d059      	beq.n	1a2c0 <parse_xmodemsleep+0xc8>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   1a20c:	2104      	movs	r1, #4
   1a20e:	a802      	add	r0, sp, #8
   1a210:	f00e fd8f 	bl	28d32 <at_params_list_init>
	if (err) {
   1a214:	4604      	mov	r4, r0
   1a216:	b168      	cbz	r0, 1a234 <parse_xmodemsleep+0x3c>
   1a218:	482b      	ldr	r0, [pc, #172]	; (1a2c8 <parse_xmodemsleep+0xd0>)
   1a21a:	4b2c      	ldr	r3, [pc, #176]	; (1a2cc <parse_xmodemsleep+0xd4>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1a21c:	4622      	mov	r2, r4
   1a21e:	1ac0      	subs	r0, r0, r3
   1a220:	08c0      	lsrs	r0, r0, #3
   1a222:	0180      	lsls	r0, r0, #6
   1a224:	492a      	ldr	r1, [pc, #168]	; (1a2d0 <parse_xmodemsleep+0xd8>)
   1a226:	f040 0001 	orr.w	r0, r0, #1
   1a22a:	f00c f980 	bl	2652e <log_string_sync>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1a22e:	4620      	mov	r0, r4
   1a230:	b004      	add	sp, #16
   1a232:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1a234:	4601      	mov	r1, r0
   1a236:	aa02      	add	r2, sp, #8
   1a238:	4630      	mov	r0, r6
   1a23a:	f00e fd61 	bl	28d00 <at_parser_params_from_str>
	if (err) {
   1a23e:	4604      	mov	r4, r0
   1a240:	b158      	cbz	r0, 1a25a <parse_xmodemsleep+0x62>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   1a242:	4622      	mov	r2, r4
   1a244:	4820      	ldr	r0, [pc, #128]	; (1a2c8 <parse_xmodemsleep+0xd0>)
   1a246:	4b21      	ldr	r3, [pc, #132]	; (1a2cc <parse_xmodemsleep+0xd4>)
   1a248:	4922      	ldr	r1, [pc, #136]	; (1a2d4 <parse_xmodemsleep+0xdc>)
   1a24a:	1ac0      	subs	r0, r0, r3
   1a24c:	08c0      	lsrs	r0, r0, #3
   1a24e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1a250:	f040 0001 	orr.w	r0, r0, #1
   1a254:	f00c f96b 	bl	2652e <log_string_sync>
		goto clean_exit;
   1a258:	e01d      	b.n	1a296 <parse_xmodemsleep+0x9e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   1a25a:	2101      	movs	r1, #1
   1a25c:	f10d 0206 	add.w	r2, sp, #6
   1a260:	a802      	add	r0, sp, #8
   1a262:	f00e fe2b 	bl	28ebc <at_params_unsigned_short_get>
	if (err) {
   1a266:	4604      	mov	r4, r0
   1a268:	b138      	cbz	r0, 1a27a <parse_xmodemsleep+0x82>
   1a26a:	4817      	ldr	r0, [pc, #92]	; (1a2c8 <parse_xmodemsleep+0xd0>)
   1a26c:	4b17      	ldr	r3, [pc, #92]	; (1a2cc <parse_xmodemsleep+0xd4>)
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   1a26e:	4622      	mov	r2, r4
   1a270:	1ac0      	subs	r0, r0, r3
   1a272:	08c0      	lsrs	r0, r0, #3
   1a274:	4918      	ldr	r1, [pc, #96]	; (1a2d8 <parse_xmodemsleep+0xe0>)
   1a276:	0180      	lsls	r0, r0, #6
   1a278:	e7ea      	b.n	1a250 <parse_xmodemsleep+0x58>
	modem_sleep->type = type;
   1a27a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   1a27e:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   1a280:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   1a282:	f00e fe82 	bl	28f8a <at_params_valid_count_get>
   1a286:	2802      	cmp	r0, #2
   1a288:	d809      	bhi.n	1a29e <parse_xmodemsleep+0xa6>
		modem_sleep->time = -1;
   1a28a:	f04f 32ff 	mov.w	r2, #4294967295
   1a28e:	f04f 33ff 	mov.w	r3, #4294967295
   1a292:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   1a296:	a802      	add	r0, sp, #8
   1a298:	f00e fd76 	bl	28d88 <at_params_list_free>
	return err;
   1a29c:	e7c7      	b.n	1a22e <parse_xmodemsleep+0x36>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   1a29e:	2102      	movs	r1, #2
   1a2a0:	f105 0208 	add.w	r2, r5, #8
   1a2a4:	a802      	add	r0, sp, #8
   1a2a6:	f00e fe3c 	bl	28f22 <at_params_int64_get>
	if (err) {
   1a2aa:	4604      	mov	r4, r0
   1a2ac:	2800      	cmp	r0, #0
   1a2ae:	d0f2      	beq.n	1a296 <parse_xmodemsleep+0x9e>
   1a2b0:	4805      	ldr	r0, [pc, #20]	; (1a2c8 <parse_xmodemsleep+0xd0>)
   1a2b2:	4b06      	ldr	r3, [pc, #24]	; (1a2cc <parse_xmodemsleep+0xd4>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1a2b4:	4622      	mov	r2, r4
   1a2b6:	1ac0      	subs	r0, r0, r3
   1a2b8:	08c0      	lsrs	r0, r0, #3
   1a2ba:	4908      	ldr	r1, [pc, #32]	; (1a2dc <parse_xmodemsleep+0xe4>)
   1a2bc:	0180      	lsls	r0, r0, #6
   1a2be:	e7c7      	b.n	1a250 <parse_xmodemsleep+0x58>
		return -EINVAL;
   1a2c0:	f06f 0415 	mvn.w	r4, #21
   1a2c4:	e7b3      	b.n	1a22e <parse_xmodemsleep+0x36>
   1a2c6:	bf00      	nop
   1a2c8:	0002c3ac 	.word	0x0002c3ac
   1a2cc:	0002c344 	.word	0x0002c344
   1a2d0:	0002e566 	.word	0x0002e566
   1a2d4:	0002e93f 	.word	0x0002e93f
   1a2d8:	0002e971 	.word	0x0002e971
   1a2dc:	0002e99a 	.word	0x0002e99a

0001a2e0 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   1a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2e2:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   1a2e4:	4604      	mov	r4, r0
   1a2e6:	b318      	cbz	r0, 1a330 <parse_mdmev+0x50>
   1a2e8:	b311      	cbz	r1, 1a330 <parse_mdmev+0x50>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   1a2ea:	2108      	movs	r1, #8
   1a2ec:	4a12      	ldr	r2, [pc, #72]	; (1a338 <parse_mdmev+0x58>)
   1a2ee:	f7ff fb6f 	bl	199d0 <response_is_valid>
   1a2f2:	b960      	cbnz	r0, 1a30e <parse_mdmev+0x2e>
   1a2f4:	4b11      	ldr	r3, [pc, #68]	; (1a33c <parse_mdmev+0x5c>)
   1a2f6:	4812      	ldr	r0, [pc, #72]	; (1a340 <parse_mdmev+0x60>)
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   1a2f8:	4912      	ldr	r1, [pc, #72]	; (1a344 <parse_mdmev+0x64>)
   1a2fa:	1ac0      	subs	r0, r0, r3
   1a2fc:	08c0      	lsrs	r0, r0, #3
   1a2fe:	0180      	lsls	r0, r0, #6
   1a300:	f040 0001 	orr.w	r0, r0, #1
   1a304:	f00c f913 	bl	2652e <log_string_sync>
		return -EIO;
   1a308:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   1a30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   1a30e:	2500      	movs	r5, #0
   1a310:	4f0d      	ldr	r7, [pc, #52]	; (1a348 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   1a312:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   1a314:	4621      	mov	r1, r4
   1a316:	f857 0b04 	ldr.w	r0, [r7], #4
   1a31a:	f7f6 fe45 	bl	10fa8 <strcmp>
   1a31e:	b908      	cbnz	r0, 1a324 <parse_mdmev+0x44>
			*modem_evt = i;
   1a320:	7035      	strb	r5, [r6, #0]
			return 0;
   1a322:	e7f3      	b.n	1a30c <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   1a324:	3501      	adds	r5, #1
   1a326:	2d05      	cmp	r5, #5
   1a328:	d1f4      	bne.n	1a314 <parse_mdmev+0x34>
	return -ENODATA;
   1a32a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a32e:	e7ed      	b.n	1a30c <parse_mdmev+0x2c>
		return -EINVAL;
   1a330:	f06f 0015 	mvn.w	r0, #21
   1a334:	e7ea      	b.n	1a30c <parse_mdmev+0x2c>
   1a336:	bf00      	nop
   1a338:	0002e9cf 	.word	0x0002e9cf
   1a33c:	0002c344 	.word	0x0002c344
   1a340:	0002c3ac 	.word	0x0002c3ac
   1a344:	0002e9d8 	.word	0x0002e9d8
   1a348:	0002c85c 	.word	0x0002c85c

0001a34c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a34c:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1a34e:	f7fa f9bd 	bl	146cc <z_impl_log_panic>
   1a352:	4b06      	ldr	r3, [pc, #24]	; (1a36c <k_sys_fatal_error_handler+0x20>)
   1a354:	4806      	ldr	r0, [pc, #24]	; (1a370 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1a356:	4907      	ldr	r1, [pc, #28]	; (1a374 <k_sys_fatal_error_handler+0x28>)
   1a358:	1ac0      	subs	r0, r0, r3
   1a35a:	08c0      	lsrs	r0, r0, #3
   1a35c:	0180      	lsls	r0, r0, #6
   1a35e:	f040 0001 	orr.w	r0, r0, #1
   1a362:	f00c f8e4 	bl	2652e <log_string_sync>
		sys_arch_reboot(0);
   1a366:	2000      	movs	r0, #0
   1a368:	f7fb ff5e 	bl	16228 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1a36c:	0002c344 	.word	0x0002c344
   1a370:	0002c37c 	.word	0x0002c37c
   1a374:	0002ea50 	.word	0x0002ea50

0001a378 <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   1a378:	b538      	push	{r3, r4, r5, lr}
   1a37a:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   1a37c:	4605      	mov	r5, r0
   1a37e:	b140      	cbz	r0, 1a392 <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, JSON_KEY_STATE);
   1a380:	4904      	ldr	r1, [pc, #16]	; (1a394 <nrf_cloud_decode_desired_obj+0x1c>)
   1a382:	f00e fe8e 	bl	290a2 <json_object_decode>
		if (state_obj == NULL) {
   1a386:	b918      	cbnz	r0, 1a390 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, JSON_KEY_DES);
   1a388:	4628      	mov	r0, r5
   1a38a:	4903      	ldr	r1, [pc, #12]	; (1a398 <nrf_cloud_decode_desired_obj+0x20>)
   1a38c:	f00e fe89 	bl	290a2 <json_object_decode>
		} else {
			*desired_obj = state_obj;
   1a390:	6020      	str	r0, [r4, #0]
		}
	}
}
   1a392:	bd38      	pop	{r3, r4, r5, pc}
   1a394:	0002ea6d 	.word	0x0002ea6d
   1a398:	0002ea73 	.word	0x0002ea73

0001a39c <nrf_cloud_codec_init>:
{
   1a39c:	b510      	push	{r4, lr}
	if (!initialized) {
   1a39e:	4c04      	ldr	r4, [pc, #16]	; (1a3b0 <nrf_cloud_codec_init+0x14>)
   1a3a0:	7823      	ldrb	r3, [r4, #0]
   1a3a2:	b91b      	cbnz	r3, 1a3ac <nrf_cloud_codec_init+0x10>
		cJSON_Init();
   1a3a4:	f004 fd2c 	bl	1ee00 <cJSON_Init>
		initialized = true;
   1a3a8:	2301      	movs	r3, #1
   1a3aa:	7023      	strb	r3, [r4, #0]
}
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	bd10      	pop	{r4, pc}
   1a3b0:	2000f127 	.word	0x2000f127

0001a3b4 <nrf_cloud_decode_requested_state>:
}
#endif

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   1a3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a3b6:	4607      	mov	r7, r0
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   1a3b8:	6840      	ldr	r0, [r0, #4]
{
   1a3ba:	460e      	mov	r6, r1
	root_obj = cJSON_Parse(input->ptr);
   1a3bc:	f00f f881 	bl	294c2 <cJSON_Parse>
	if (root_obj == NULL) {
   1a3c0:	4605      	mov	r5, r0
   1a3c2:	b988      	cbnz	r0, 1a3e8 <nrf_cloud_decode_requested_state+0x34>
   1a3c4:	4b37      	ldr	r3, [pc, #220]	; (1a4a4 <nrf_cloud_decode_requested_state+0xf0>)
   1a3c6:	4c38      	ldr	r4, [pc, #224]	; (1a4a8 <nrf_cloud_decode_requested_state+0xf4>)
   1a3c8:	6878      	ldr	r0, [r7, #4]
   1a3ca:	1ae4      	subs	r4, r4, r3
   1a3cc:	f00c f8c2 	bl	26554 <z_log_strdup>
   1a3d0:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("cJSON_Parse failed: %s",
   1a3d2:	01a4      	lsls	r4, r4, #6
   1a3d4:	f044 0401 	orr.w	r4, r4, #1
   1a3d8:	4602      	mov	r2, r0
   1a3da:	4934      	ldr	r1, [pc, #208]	; (1a4ac <nrf_cloud_decode_requested_state+0xf8>)
   1a3dc:	4620      	mov	r0, r4
   1a3de:	f00c f8a6 	bl	2652e <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
		}
#endif
		cJSON_Delete(root_obj);
		return -ENOENT;
   1a3e2:	f06f 0401 	mvn.w	r4, #1
   1a3e6:	e010      	b.n	1a40a <nrf_cloud_decode_requested_state+0x56>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   1a3e8:	a901      	add	r1, sp, #4
   1a3ea:	f7ff ffc5 	bl	1a378 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, JSON_KEY_TOPIC_PRFX);
   1a3ee:	4930      	ldr	r1, [pc, #192]	; (1a4b0 <nrf_cloud_decode_requested_state+0xfc>)
   1a3f0:	9801      	ldr	r0, [sp, #4]
   1a3f2:	f00e fe56 	bl	290a2 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   1a3f6:	b158      	cbz	r0, 1a410 <nrf_cloud_decode_requested_state+0x5c>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   1a3f8:	6900      	ldr	r0, [r0, #16]
   1a3fa:	f001 fa03 	bl	1b804 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   1a3fe:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   1a400:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   1a402:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   1a404:	f004 fc2e 	bl	1ec64 <cJSON_Delete>
		return 0;
   1a408:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   1a40a:	4620      	mov	r0, r4
   1a40c:	b003      	add	sp, #12
   1a40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   1a410:	4928      	ldr	r1, [pc, #160]	; (1a4b4 <nrf_cloud_decode_requested_state+0x100>)
   1a412:	9801      	ldr	r0, [sp, #4]
   1a414:	f00e fe45 	bl	290a2 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   1a418:	4927      	ldr	r1, [pc, #156]	; (1a4b8 <nrf_cloud_decode_requested_state+0x104>)
   1a41a:	f00e fe42 	bl	290a2 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   1a41e:	b110      	cbz	r0, 1a426 <nrf_cloud_decode_requested_state+0x72>
   1a420:	68c3      	ldr	r3, [r0, #12]
   1a422:	2b10      	cmp	r3, #16
   1a424:	d01c      	beq.n	1a460 <nrf_cloud_decode_requested_state+0xac>
		if (cJSON_HasObjectItem(desired_obj, JSON_KEY_CFG) == false) {
   1a426:	4925      	ldr	r1, [pc, #148]	; (1a4bc <nrf_cloud_decode_requested_state+0x108>)
   1a428:	9801      	ldr	r0, [sp, #4]
   1a42a:	f00f f85a 	bl	294e2 <cJSON_HasObjectItem>
   1a42e:	b998      	cbnz	r0, 1a458 <nrf_cloud_decode_requested_state+0xa4>
   1a430:	4b1c      	ldr	r3, [pc, #112]	; (1a4a4 <nrf_cloud_decode_requested_state+0xf0>)
   1a432:	4c1d      	ldr	r4, [pc, #116]	; (1a4a8 <nrf_cloud_decode_requested_state+0xf4>)
			LOG_WRN("Unhandled data received from nRF Cloud.");
   1a434:	4922      	ldr	r1, [pc, #136]	; (1a4c0 <nrf_cloud_decode_requested_state+0x10c>)
   1a436:	1ae4      	subs	r4, r4, r3
   1a438:	08e4      	lsrs	r4, r4, #3
   1a43a:	01a4      	lsls	r4, r4, #6
   1a43c:	f044 0002 	orr.w	r0, r4, #2
			LOG_INF("Ensure device firmware is up to date.");
   1a440:	f044 0403 	orr.w	r4, r4, #3
			LOG_WRN("Unhandled data received from nRF Cloud.");
   1a444:	f00c f873 	bl	2652e <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   1a448:	4620      	mov	r0, r4
   1a44a:	491e      	ldr	r1, [pc, #120]	; (1a4c4 <nrf_cloud_decode_requested_state+0x110>)
   1a44c:	f00c f86f 	bl	2652e <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   1a450:	4620      	mov	r0, r4
   1a452:	491d      	ldr	r1, [pc, #116]	; (1a4c8 <nrf_cloud_decode_requested_state+0x114>)
   1a454:	f00c f86b 	bl	2652e <log_string_sync>
		cJSON_Delete(root_obj);
   1a458:	4628      	mov	r0, r5
   1a45a:	f004 fc03 	bl	1ec64 <cJSON_Delete>
   1a45e:	e7c0      	b.n	1a3e2 <nrf_cloud_decode_requested_state+0x2e>
	const char *state_str = pairing_state_obj->valuestring;
   1a460:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   1a462:	481a      	ldr	r0, [pc, #104]	; (1a4cc <nrf_cloud_decode_requested_state+0x118>)
   1a464:	f7f6 fdaa 	bl	10fbc <strlen>
   1a468:	4918      	ldr	r1, [pc, #96]	; (1a4cc <nrf_cloud_decode_requested_state+0x118>)
   1a46a:	4602      	mov	r2, r0
   1a46c:	4620      	mov	r0, r4
   1a46e:	f010 fe3a 	bl	2b0e6 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   1a472:	4604      	mov	r4, r0
   1a474:	b928      	cbnz	r0, 1a482 <nrf_cloud_decode_requested_state+0xce>
		(*requested_state) = STATE_UA_PIN_WAIT;
   1a476:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   1a478:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   1a47a:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   1a47c:	f004 fbf2 	bl	1ec64 <cJSON_Delete>
	return 0;
   1a480:	e7c3      	b.n	1a40a <nrf_cloud_decode_requested_state+0x56>
   1a482:	4b08      	ldr	r3, [pc, #32]	; (1a4a4 <nrf_cloud_decode_requested_state+0xf0>)
   1a484:	4808      	ldr	r0, [pc, #32]	; (1a4a8 <nrf_cloud_decode_requested_state+0xf4>)
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   1a486:	4912      	ldr	r1, [pc, #72]	; (1a4d0 <nrf_cloud_decode_requested_state+0x11c>)
   1a488:	1ac0      	subs	r0, r0, r3
   1a48a:	08c0      	lsrs	r0, r0, #3
   1a48c:	0180      	lsls	r0, r0, #6
   1a48e:	f040 0001 	orr.w	r0, r0, #1
   1a492:	f00c f84c 	bl	2652e <log_string_sync>
		cJSON_Delete(root_obj);
   1a496:	4628      	mov	r0, r5
   1a498:	f004 fbe4 	bl	1ec64 <cJSON_Delete>
		return -ENOTSUP;
   1a49c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1a4a0:	e7b3      	b.n	1a40a <nrf_cloud_decode_requested_state+0x56>
   1a4a2:	bf00      	nop
   1a4a4:	0002c344 	.word	0x0002c344
   1a4a8:	0002c3d4 	.word	0x0002c3d4
   1a4ac:	0002ea96 	.word	0x0002ea96
   1a4b0:	0002eaad 	.word	0x0002eaad
   1a4b4:	0002eac8 	.word	0x0002eac8
   1a4b8:	0002ea6d 	.word	0x0002ea6d
   1a4bc:	0002ead0 	.word	0x0002ead0
   1a4c0:	0002ead7 	.word	0x0002ead7
   1a4c4:	0002eaff 	.word	0x0002eaff
   1a4c8:	0002eb25 	.word	0x0002eb25
   1a4cc:	0002eb60 	.word	0x0002eb60
   1a4d0:	0002eb6f 	.word	0x0002eb6f

0001a4d4 <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   1a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a4d8:	460f      	mov	r7, r1
   1a4da:	4690      	mov	r8, r2
	cJSON *root_obj = NULL;
	cJSON *desired_obj = NULL;
	cJSON *reported_obj = NULL;
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   1a4dc:	b920      	cbnz	r0, 1a4e8 <nrf_cloud_encode_config_response+0x14>

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   1a4de:	f06f 0402 	mvn.w	r4, #2

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   1a4e2:	4620      	mov	r0, r4
   1a4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   1a4e8:	6840      	ldr	r0, [r0, #4]
   1a4ea:	f00e ffea 	bl	294c2 <cJSON_Parse>
	if (input_obj == NULL) {
   1a4ee:	4604      	mov	r4, r0
   1a4f0:	2800      	cmp	r0, #0
   1a4f2:	d0f4      	beq.n	1a4de <nrf_cloud_encode_config_response+0xa>
	state_obj = cJSON_DetachItemFromObject(input_obj, JSON_KEY_STATE);
   1a4f4:	4931      	ldr	r1, [pc, #196]	; (1a5bc <nrf_cloud_encode_config_response+0xe8>)
   1a4f6:	f00f f81c 	bl	29532 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   1a4fa:	1e05      	subs	r5, r0, #0
   1a4fc:	bf14      	ite	ne
   1a4fe:	4628      	movne	r0, r5
   1a500:	4620      	moveq	r0, r4
   1a502:	492f      	ldr	r1, [pc, #188]	; (1a5c0 <nrf_cloud_encode_config_response+0xec>)
   1a504:	f00f f815 	bl	29532 <cJSON_DetachItemFromObject>
   1a508:	4606      	mov	r6, r0
	cJSON_Delete(input_obj);
   1a50a:	4620      	mov	r0, r4
   1a50c:	f004 fbaa 	bl	1ec64 <cJSON_Delete>
	if (has_config) {
   1a510:	f1b8 0f00 	cmp.w	r8, #0
   1a514:	d004      	beq.n	1a520 <nrf_cloud_encode_config_response+0x4c>
		*has_config = (config_obj != NULL);
   1a516:	1e33      	subs	r3, r6, #0
   1a518:	bf18      	it	ne
   1a51a:	2301      	movne	r3, #1
   1a51c:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   1a520:	b105      	cbz	r5, 1a524 <nrf_cloud_encode_config_response+0x50>
   1a522:	b94e      	cbnz	r6, 1a538 <nrf_cloud_encode_config_response+0x64>
		output->ptr = NULL;
   1a524:	2400      	movs	r4, #0
		cJSON_Delete(state_obj);
   1a526:	4628      	mov	r0, r5
   1a528:	f004 fb9c 	bl	1ec64 <cJSON_Delete>
		cJSON_Delete(config_obj);
   1a52c:	4630      	mov	r0, r6
   1a52e:	f004 fb99 	bl	1ec64 <cJSON_Delete>
		output->len = 0;
   1a532:	e9c7 4400 	strd	r4, r4, [r7]
		return 0;
   1a536:	e7d4      	b.n	1a4e2 <nrf_cloud_encode_config_response+0xe>
	root_obj = cJSON_CreateObject();
   1a538:	f004 fc56 	bl	1ede8 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   1a53c:	4921      	ldr	r1, [pc, #132]	; (1a5c4 <nrf_cloud_encode_config_response+0xf0>)
	root_obj = cJSON_CreateObject();
   1a53e:	4680      	mov	r8, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   1a540:	f00f f841 	bl	295c6 <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   1a544:	4920      	ldr	r1, [pc, #128]	; (1a5c8 <nrf_cloud_encode_config_response+0xf4>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   1a546:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   1a548:	4640      	mov	r0, r8
   1a54a:	f00f f83c 	bl	295c6 <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   1a54e:	491c      	ldr	r1, [pc, #112]	; (1a5c0 <nrf_cloud_encode_config_response+0xec>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   1a550:	4604      	mov	r4, r0
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   1a552:	4648      	mov	r0, r9
   1a554:	f00e fda9 	bl	290aa <json_add_null_cs>
   1a558:	b148      	cbz	r0, 1a56e <nrf_cloud_encode_config_response+0x9a>
		cJSON_Delete(root_obj);
   1a55a:	4640      	mov	r0, r8
   1a55c:	f004 fb82 	bl	1ec64 <cJSON_Delete>
		cJSON_Delete(config_obj);
   1a560:	4630      	mov	r0, r6
   1a562:	f004 fb7f 	bl	1ec64 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1a566:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
   1a568:	f004 fb7c 	bl	1ec64 <cJSON_Delete>
	if (buffer == NULL) {
   1a56c:	e01a      	b.n	1a5a4 <nrf_cloud_encode_config_response+0xd0>
	    json_add_obj_cs(reported_obj, JSON_KEY_CFG, config_obj)) {
   1a56e:	4620      	mov	r0, r4
   1a570:	4632      	mov	r2, r6
   1a572:	4913      	ldr	r1, [pc, #76]	; (1a5c0 <nrf_cloud_encode_config_response+0xec>)
   1a574:	f00e fd78 	bl	29068 <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   1a578:	4604      	mov	r4, r0
   1a57a:	2800      	cmp	r0, #0
   1a57c:	d1ed      	bne.n	1a55a <nrf_cloud_encode_config_response+0x86>
	cJSON_Delete(state_obj);
   1a57e:	4628      	mov	r0, r5
   1a580:	f004 fb70 	bl	1ec64 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   1a584:	f004 fc30 	bl	1ede8 <cJSON_CreateObject>
	if (state_obj) {
   1a588:	4606      	mov	r6, r0
   1a58a:	b170      	cbz	r0, 1a5aa <nrf_cloud_encode_config_response+0xd6>
		(void)json_add_obj_cs(state_obj, JSON_KEY_STATE, root_obj);
   1a58c:	4642      	mov	r2, r8
   1a58e:	490b      	ldr	r1, [pc, #44]	; (1a5bc <nrf_cloud_encode_config_response+0xe8>)
   1a590:	f00e fd6a 	bl	29068 <json_add_obj_cs>
		buffer = cJSON_PrintUnformatted(state_obj);
   1a594:	4630      	mov	r0, r6
   1a596:	f00e ff98 	bl	294ca <cJSON_PrintUnformatted>
   1a59a:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   1a59c:	4630      	mov	r0, r6
   1a59e:	f004 fb61 	bl	1ec64 <cJSON_Delete>
	if (buffer == NULL) {
   1a5a2:	b925      	cbnz	r5, 1a5ae <nrf_cloud_encode_config_response+0xda>
		return -ENOMEM;
   1a5a4:	f06f 040b 	mvn.w	r4, #11
   1a5a8:	e79b      	b.n	1a4e2 <nrf_cloud_encode_config_response+0xe>
		cJSON_Delete(root_obj);
   1a5aa:	4640      	mov	r0, r8
   1a5ac:	e7dc      	b.n	1a568 <nrf_cloud_encode_config_response+0x94>
	output->len = strlen(buffer);
   1a5ae:	4628      	mov	r0, r5
	output->ptr = buffer;
   1a5b0:	607d      	str	r5, [r7, #4]
	output->len = strlen(buffer);
   1a5b2:	f7f6 fd03 	bl	10fbc <strlen>
   1a5b6:	6038      	str	r0, [r7, #0]
	return 0;
   1a5b8:	e793      	b.n	1a4e2 <nrf_cloud_encode_config_response+0xe>
   1a5ba:	bf00      	nop
   1a5bc:	0002ea6d 	.word	0x0002ea6d
   1a5c0:	0002ead0 	.word	0x0002ead0
   1a5c4:	0002ea73 	.word	0x0002ea73
   1a5c8:	0002ea8d 	.word	0x0002ea8d

0001a5cc <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   1a5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   1a5d0:	b086      	sub	sp, #24
   1a5d2:	4688      	mov	r8, r1
   1a5d4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(output != NULL);

	char *buffer;
	int ret = 0;
	cJSON *root_obj = cJSON_CreateObject();
   1a5d6:	f004 fc07 	bl	1ede8 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   1a5da:	4943      	ldr	r1, [pc, #268]	; (1a6e8 <nrf_cloud_encode_state+0x11c>)
	cJSON *root_obj = cJSON_CreateObject();
   1a5dc:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   1a5de:	f00e fff2 	bl	295c6 <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   1a5e2:	4942      	ldr	r1, [pc, #264]	; (1a6ec <nrf_cloud_encode_state+0x120>)
   1a5e4:	f00e ffef 	bl	295c6 <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   1a5e8:	4941      	ldr	r1, [pc, #260]	; (1a6f0 <nrf_cloud_encode_state+0x124>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   1a5ea:	4683      	mov	fp, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   1a5ec:	f00e ffeb 	bl	295c6 <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   1a5f0:	4940      	ldr	r1, [pc, #256]	; (1a6f4 <nrf_cloud_encode_state+0x128>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   1a5f2:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   1a5f4:	4658      	mov	r0, fp
   1a5f6:	f00e ffe6 	bl	295c6 <cJSON_AddObjectToObjectCS>
   1a5fa:	4682      	mov	sl, r0

	if (!pairing_obj || !connection_obj) {
   1a5fc:	f1b9 0f00 	cmp.w	r9, #0
   1a600:	d000      	beq.n	1a604 <nrf_cloud_encode_state+0x38>
   1a602:	b928      	cbnz	r0, 1a610 <nrf_cloud_encode_state+0x44>

		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);

		if (ret != 0) {
			cJSON_Delete(root_obj);
   1a604:	4638      	mov	r0, r7
   1a606:	f004 fb2d 	bl	1ec64 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   1a60a:	f06f 000b 	mvn.w	r0, #11
   1a60e:	e008      	b.n	1a622 <nrf_cloud_encode_state+0x56>
	switch (reported_state) {
   1a610:	2c06      	cmp	r4, #6
   1a612:	d009      	beq.n	1a628 <nrf_cloud_encode_state+0x5c>
   1a614:	2c07      	cmp	r4, #7
   1a616:	d032      	beq.n	1a67e <nrf_cloud_encode_state+0xb2>
		cJSON_Delete(root_obj);
   1a618:	4638      	mov	r0, r7
   1a61a:	f004 fb23 	bl	1ec64 <cJSON_Delete>
		return -ENOTSUP;
   1a61e:	f06f 0085 	mvn.w	r0, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   1a622:	b006      	add	sp, #24
   1a624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, DUA_PIN_STR);
   1a628:	4a33      	ldr	r2, [pc, #204]	; (1a6f8 <nrf_cloud_encode_state+0x12c>)
   1a62a:	492f      	ldr	r1, [pc, #188]	; (1a6e8 <nrf_cloud_encode_state+0x11c>)
   1a62c:	4648      	mov	r0, r9
   1a62e:	f00e fd2a 	bl	29086 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_TOPICS);
   1a632:	4932      	ldr	r1, [pc, #200]	; (1a6fc <nrf_cloud_encode_state+0x130>)
   1a634:	4648      	mov	r0, r9
   1a636:	f00e fd38 	bl	290aa <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   1a63a:	4931      	ldr	r1, [pc, #196]	; (1a700 <nrf_cloud_encode_state+0x134>)
   1a63c:	4648      	mov	r0, r9
   1a63e:	f00e fd34 	bl	290aa <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_STAGE);
   1a642:	4930      	ldr	r1, [pc, #192]	; (1a704 <nrf_cloud_encode_state+0x138>)
   1a644:	4658      	mov	r0, fp
   1a646:	f00e fd30 	bl	290aa <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_TOPIC_PRFX);
   1a64a:	492f      	ldr	r1, [pc, #188]	; (1a708 <nrf_cloud_encode_state+0x13c>)
   1a64c:	4658      	mov	r0, fp
   1a64e:	f00e fd2c 	bl	290aa <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, JSON_KEY_KEEPALIVE);
   1a652:	4650      	mov	r0, sl
   1a654:	492d      	ldr	r1, [pc, #180]	; (1a70c <nrf_cloud_encode_state+0x140>)
   1a656:	f00e fd28 	bl	290aa <json_add_null_cs>
	buffer = cJSON_PrintUnformatted(root_obj);
   1a65a:	4638      	mov	r0, r7
   1a65c:	f00e ff35 	bl	294ca <cJSON_PrintUnformatted>
   1a660:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   1a662:	4638      	mov	r0, r7
   1a664:	f004 fafe 	bl	1ec64 <cJSON_Delete>
	if (buffer == NULL) {
   1a668:	2c00      	cmp	r4, #0
   1a66a:	d0ce      	beq.n	1a60a <nrf_cloud_encode_state+0x3e>
	output->len = strlen(buffer);
   1a66c:	4620      	mov	r0, r4
	output->ptr = buffer;
   1a66e:	f8c8 4004 	str.w	r4, [r8, #4]
	output->len = strlen(buffer);
   1a672:	f7f6 fca3 	bl	10fbc <strlen>
   1a676:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   1a67a:	2000      	movs	r0, #0
   1a67c:	e7d1      	b.n	1a622 <nrf_cloud_encode_state+0x56>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, &m_endp);
   1a67e:	ab04      	add	r3, sp, #16
   1a680:	2200      	movs	r2, #0
   1a682:	4669      	mov	r1, sp
   1a684:	a802      	add	r0, sp, #8
   1a686:	f001 fc8d 	bl	1bfa4 <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   1a68a:	9a05      	ldr	r2, [sp, #20]
   1a68c:	491e      	ldr	r1, [pc, #120]	; (1a708 <nrf_cloud_encode_state+0x13c>)
   1a68e:	4658      	mov	r0, fp
   1a690:	f00e fcf9 	bl	29086 <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   1a694:	4a1e      	ldr	r2, [pc, #120]	; (1a710 <nrf_cloud_encode_state+0x144>)
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   1a696:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   1a698:	4913      	ldr	r1, [pc, #76]	; (1a6e8 <nrf_cloud_encode_state+0x11c>)
   1a69a:	4648      	mov	r0, r9
   1a69c:	f00e fcf3 	bl	29086 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   1a6a0:	4917      	ldr	r1, [pc, #92]	; (1a700 <nrf_cloud_encode_state+0x134>)
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   1a6a2:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   1a6a4:	4648      	mov	r0, r9
   1a6a6:	f00e fd00 	bl	290aa <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   1a6aa:	491a      	ldr	r1, [pc, #104]	; (1a714 <nrf_cloud_encode_state+0x148>)
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   1a6ac:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   1a6ae:	4658      	mov	r0, fp
   1a6b0:	f00e fcfb 	bl	290aa <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   1a6b4:	4b18      	ldr	r3, [pc, #96]	; (1a718 <nrf_cloud_encode_state+0x14c>)
   1a6b6:	2200      	movs	r2, #0
   1a6b8:	4914      	ldr	r1, [pc, #80]	; (1a70c <nrf_cloud_encode_state+0x140>)
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   1a6ba:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   1a6bc:	4650      	mov	r0, sl
   1a6be:	f00e fcc4 	bl	2904a <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   1a6c2:	490e      	ldr	r1, [pc, #56]	; (1a6fc <nrf_cloud_encode_state+0x130>)
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   1a6c4:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   1a6c6:	4648      	mov	r0, r9
   1a6c8:	f00e ff7d 	bl	295c6 <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   1a6cc:	9a03      	ldr	r2, [sp, #12]
   1a6ce:	4913      	ldr	r1, [pc, #76]	; (1a71c <nrf_cloud_encode_state+0x150>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   1a6d0:	4605      	mov	r5, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   1a6d2:	f00e fcd8 	bl	29086 <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   1a6d6:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   1a6d8:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   1a6da:	4911      	ldr	r1, [pc, #68]	; (1a720 <nrf_cloud_encode_state+0x154>)
   1a6dc:	4628      	mov	r0, r5
   1a6de:	f00e fcd2 	bl	29086 <json_add_str_cs>
		if (ret != 0) {
   1a6e2:	42c4      	cmn	r4, r0
   1a6e4:	d0b9      	beq.n	1a65a <nrf_cloud_encode_state+0x8e>
   1a6e6:	e78d      	b.n	1a604 <nrf_cloud_encode_state+0x38>
   1a6e8:	0002ea6d 	.word	0x0002ea6d
   1a6ec:	0002ea8d 	.word	0x0002ea8d
   1a6f0:	0002eac8 	.word	0x0002eac8
   1a6f4:	0002f767 	.word	0x0002f767
   1a6f8:	0002eb60 	.word	0x0002eb60
   1a6fc:	0002ebc8 	.word	0x0002ebc8
   1a700:	0002ead0 	.word	0x0002ead0
   1a704:	0002ebcf 	.word	0x0002ebcf
   1a708:	0002eaad 	.word	0x0002eaad
   1a70c:	0002ebd5 	.word	0x0002ebd5
   1a710:	0002ebdf 	.word	0x0002ebdf
   1a714:	0002ebe6 	.word	0x0002ebe6
   1a718:	4092c000 	.word	0x4092c000
   1a71c:	0002ebf4 	.word	0x0002ebf4
   1a720:	0002ebf8 	.word	0x0002ebf8

0001a724 <nrf_cloud_decode_data_endpoint>:
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *bulk_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   1a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a728:	4699      	mov	r9, r3
	__ASSERT_NO_MSG(bulk_endpoint != NULL);

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   1a72a:	2300      	movs	r3, #0
{
   1a72c:	b085      	sub	sp, #20

	root_obj = cJSON_Parse(input->ptr);
   1a72e:	6840      	ldr	r0, [r0, #4]
{
   1a730:	460f      	mov	r7, r1
   1a732:	4692      	mov	sl, r2
   1a734:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
	cJSON *desired_obj = NULL;
   1a738:	9303      	str	r3, [sp, #12]
	root_obj = cJSON_Parse(input->ptr);
   1a73a:	f00e fec2 	bl	294c2 <cJSON_Parse>
	if (root_obj == NULL) {
   1a73e:	4605      	mov	r5, r0
   1a740:	b318      	cbz	r0, 1a78a <nrf_cloud_decode_data_endpoint+0x66>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   1a742:	a903      	add	r1, sp, #12
   1a744:	f7ff fe18 	bl	1a378 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   1a748:	f1bb 0f00 	cmp.w	fp, #0
   1a74c:	d020      	beq.n	1a790 <nrf_cloud_decode_data_endpoint+0x6c>
		m_endpoint_obj = json_object_decode(
   1a74e:	4945      	ldr	r1, [pc, #276]	; (1a864 <nrf_cloud_decode_data_endpoint+0x140>)
   1a750:	9803      	ldr	r0, [sp, #12]
   1a752:	f00e fca6 	bl	290a2 <json_object_decode>
   1a756:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   1a758:	4943      	ldr	r1, [pc, #268]	; (1a868 <nrf_cloud_decode_data_endpoint+0x144>)
   1a75a:	9803      	ldr	r0, [sp, #12]
   1a75c:	f00e fca1 	bl	290a2 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   1a760:	4942      	ldr	r1, [pc, #264]	; (1a86c <nrf_cloud_decode_data_endpoint+0x148>)
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   1a762:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   1a764:	f00e fc9d 	bl	290a2 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   1a768:	4941      	ldr	r1, [pc, #260]	; (1a870 <nrf_cloud_decode_data_endpoint+0x14c>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   1a76a:	4680      	mov	r8, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   1a76c:	4630      	mov	r0, r6
   1a76e:	f00e fc98 	bl	290a2 <json_object_decode>
   1a772:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   1a774:	f1b8 0f00 	cmp.w	r8, #0
   1a778:	d004      	beq.n	1a784 <nrf_cloud_decode_data_endpoint+0x60>
   1a77a:	b118      	cbz	r0, 1a784 <nrf_cloud_decode_data_endpoint+0x60>
   1a77c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1a780:	2b10      	cmp	r3, #16
   1a782:	d007      	beq.n	1a794 <nrf_cloud_decode_data_endpoint+0x70>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   1a784:	4628      	mov	r0, r5
   1a786:	f004 fa6d 	bl	1ec64 <cJSON_Delete>
		return -ENOENT;
   1a78a:	f06f 0401 	mvn.w	r4, #1
   1a78e:	e048      	b.n	1a822 <nrf_cloud_decode_data_endpoint+0xfe>
	cJSON *m_endpoint_obj = NULL;
   1a790:	465c      	mov	r4, fp
   1a792:	e7e1      	b.n	1a758 <nrf_cloud_decode_data_endpoint+0x34>
	return !strncmp(s1, s2, strlen(s2));
   1a794:	4837      	ldr	r0, [pc, #220]	; (1a874 <nrf_cloud_decode_data_endpoint+0x150>)
	const char *state_str = pairing_state_obj->valuestring;
   1a796:	f8d8 8010 	ldr.w	r8, [r8, #16]
	return !strncmp(s1, s2, strlen(s2));
   1a79a:	f7f6 fc0f 	bl	10fbc <strlen>
   1a79e:	4935      	ldr	r1, [pc, #212]	; (1a874 <nrf_cloud_decode_data_endpoint+0x150>)
   1a7a0:	4602      	mov	r2, r0
   1a7a2:	4640      	mov	r0, r8
   1a7a4:	f010 fc9f 	bl	2b0e6 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   1a7a8:	2800      	cmp	r0, #0
   1a7aa:	d1eb      	bne.n	1a784 <nrf_cloud_decode_data_endpoint+0x60>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   1a7ac:	b14c      	cbz	r4, 1a7c2 <nrf_cloud_decode_data_endpoint+0x9e>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   1a7ae:	4620      	mov	r0, r4
   1a7b0:	4659      	mov	r1, fp
   1a7b2:	f00e fcad 	bl	29110 <json_decode_and_alloc>
		if (err) {
   1a7b6:	4604      	mov	r4, r0
   1a7b8:	b118      	cbz	r0, 1a7c2 <nrf_cloud_decode_data_endpoint+0x9e>
			cJSON_Delete(root_obj);
   1a7ba:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
		return err;
	}

	cJSON_Delete(root_obj);
   1a7bc:	f004 fa52 	bl	1ec64 <cJSON_Delete>

	return err;
   1a7c0:	e02f      	b.n	1a822 <nrf_cloud_decode_data_endpoint+0xfe>
	cJSON *tx_obj = json_object_decode(topic_obj, JSON_KEY_DEVICE_TO_CLOUD);
   1a7c2:	492d      	ldr	r1, [pc, #180]	; (1a878 <nrf_cloud_decode_data_endpoint+0x154>)
   1a7c4:	4630      	mov	r0, r6
   1a7c6:	f00e fc6c 	bl	290a2 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   1a7ca:	4639      	mov	r1, r7
   1a7cc:	f00e fca0 	bl	29110 <json_decode_and_alloc>
	if (err) {
   1a7d0:	4604      	mov	r4, r0
   1a7d2:	b170      	cbz	r0, 1a7f2 <nrf_cloud_decode_data_endpoint+0xce>
		cJSON_Delete(root_obj);
   1a7d4:	4628      	mov	r0, r5
   1a7d6:	f004 fa45 	bl	1ec64 <cJSON_Delete>
   1a7da:	4828      	ldr	r0, [pc, #160]	; (1a87c <nrf_cloud_decode_data_endpoint+0x158>)
   1a7dc:	4b28      	ldr	r3, [pc, #160]	; (1a880 <nrf_cloud_decode_data_endpoint+0x15c>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_DEVICE_TO_CLOUD);
   1a7de:	4a26      	ldr	r2, [pc, #152]	; (1a878 <nrf_cloud_decode_data_endpoint+0x154>)
   1a7e0:	1ac0      	subs	r0, r0, r3
   1a7e2:	08c0      	lsrs	r0, r0, #3
   1a7e4:	0180      	lsls	r0, r0, #6
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   1a7e6:	4927      	ldr	r1, [pc, #156]	; (1a884 <nrf_cloud_decode_data_endpoint+0x160>)
   1a7e8:	f040 0001 	orr.w	r0, r0, #1
   1a7ec:	f00b fe9f 	bl	2652e <log_string_sync>
		return err;
   1a7f0:	e017      	b.n	1a822 <nrf_cloud_decode_data_endpoint+0xfe>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(JSON_KEY_TOPIC_BULK);
   1a7f2:	683c      	ldr	r4, [r7, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   1a7f4:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(JSON_KEY_TOPIC_BULK);
   1a7f6:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   1a7f8:	4620      	mov	r0, r4
   1a7fa:	f010 faed 	bl	2add8 <k_calloc>
   1a7fe:	f8c9 0004 	str.w	r0, [r9, #4]
	if (bulk_endpoint->ptr == NULL) {
   1a802:	b990      	cbnz	r0, 1a82a <nrf_cloud_decode_data_endpoint+0x106>
		cJSON_Delete(root_obj);
   1a804:	4628      	mov	r0, r5
   1a806:	f004 fa2d 	bl	1ec64 <cJSON_Delete>
   1a80a:	4b1d      	ldr	r3, [pc, #116]	; (1a880 <nrf_cloud_decode_data_endpoint+0x15c>)
   1a80c:	481b      	ldr	r0, [pc, #108]	; (1a87c <nrf_cloud_decode_data_endpoint+0x158>)
		LOG_ERR("Could not allocate memory for bulk topic");
   1a80e:	491e      	ldr	r1, [pc, #120]	; (1a888 <nrf_cloud_decode_data_endpoint+0x164>)
   1a810:	1ac0      	subs	r0, r0, r3
   1a812:	08c0      	lsrs	r0, r0, #3
   1a814:	0180      	lsls	r0, r0, #6
   1a816:	f040 0001 	orr.w	r0, r0, #1
   1a81a:	f00b fe88 	bl	2652e <log_string_sync>
		return -ENOMEM;
   1a81e:	f06f 040b 	mvn.w	r4, #11
}
   1a822:	4620      	mov	r0, r4
   1a824:	b005      	add	sp, #20
   1a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   1a82a:	4b18      	ldr	r3, [pc, #96]	; (1a88c <nrf_cloud_decode_data_endpoint+0x168>)
   1a82c:	4621      	mov	r1, r4
   1a82e:	4a18      	ldr	r2, [pc, #96]	; (1a890 <nrf_cloud_decode_data_endpoint+0x16c>)
   1a830:	9300      	str	r3, [sp, #0]
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	f00b fb7c 	bl	25f30 <snprintk>
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   1a838:	4916      	ldr	r1, [pc, #88]	; (1a894 <nrf_cloud_decode_data_endpoint+0x170>)
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   1a83a:	f8c9 0000 	str.w	r0, [r9]
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   1a83e:	4630      	mov	r0, r6
   1a840:	f00e fc2f 	bl	290a2 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   1a844:	4651      	mov	r1, sl
   1a846:	f00e fc63 	bl	29110 <json_decode_and_alloc>
	if (err) {
   1a84a:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   1a84c:	4628      	mov	r0, r5
	if (err) {
   1a84e:	2c00      	cmp	r4, #0
   1a850:	d0b4      	beq.n	1a7bc <nrf_cloud_decode_data_endpoint+0x98>
		cJSON_Delete(root_obj);
   1a852:	f004 fa07 	bl	1ec64 <cJSON_Delete>
   1a856:	4809      	ldr	r0, [pc, #36]	; (1a87c <nrf_cloud_decode_data_endpoint+0x158>)
   1a858:	4b09      	ldr	r3, [pc, #36]	; (1a880 <nrf_cloud_decode_data_endpoint+0x15c>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   1a85a:	4a0e      	ldr	r2, [pc, #56]	; (1a894 <nrf_cloud_decode_data_endpoint+0x170>)
   1a85c:	1ac0      	subs	r0, r0, r3
   1a85e:	08c0      	lsrs	r0, r0, #3
   1a860:	0180      	lsls	r0, r0, #6
   1a862:	e7c0      	b.n	1a7e6 <nrf_cloud_decode_data_endpoint+0xc2>
   1a864:	0002eaad 	.word	0x0002eaad
   1a868:	0002eac8 	.word	0x0002eac8
   1a86c:	0002ea6d 	.word	0x0002ea6d
   1a870:	0002ebc8 	.word	0x0002ebc8
   1a874:	0002ebdf 	.word	0x0002ebdf
   1a878:	0002ebf4 	.word	0x0002ebf4
   1a87c:	0002c3d4 	.word	0x0002c3d4
   1a880:	0002c344 	.word	0x0002c344
   1a884:	0002ebfc 	.word	0x0002ebfc
   1a888:	0002ec1a 	.word	0x0002ec1a
   1a88c:	0002ec43 	.word	0x0002ec43
   1a890:	0002f359 	.word	0x0002f359
   1a894:	0002ebf8 	.word	0x0002ebf8

0001a898 <nrf_cloud_detect_disconnection_request>:
	cJSON_Delete(cell_pos_obj);
	return ret;
}

bool nrf_cloud_detect_disconnection_request(const char *const buf)
{
   1a898:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   1a89a:	4604      	mov	r4, r0
   1a89c:	b910      	cbnz	r0, 1a8a4 <nrf_cloud_detect_disconnection_request+0xc>
		return false;
   1a89e:	2400      	movs	r4, #0
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
	return ret;
}
   1a8a0:	4620      	mov	r0, r4
   1a8a2:	bd38      	pop	{r3, r4, r5, pc}
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   1a8a4:	22c8      	movs	r2, #200	; 0xc8
   1a8a6:	2100      	movs	r1, #0
   1a8a8:	f010 fab2 	bl	2ae10 <memchr>
   1a8ac:	2800      	cmp	r0, #0
   1a8ae:	d0f6      	beq.n	1a89e <nrf_cloud_detect_disconnection_request+0x6>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	490f      	ldr	r1, [pc, #60]	; (1a8f0 <nrf_cloud_detect_disconnection_request+0x58>)
   1a8b4:	f010 fc5d 	bl	2b172 <strstr>
   1a8b8:	2800      	cmp	r0, #0
   1a8ba:	d0f0      	beq.n	1a89e <nrf_cloud_detect_disconnection_request+0x6>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   1a8bc:	4620      	mov	r0, r4
   1a8be:	490d      	ldr	r1, [pc, #52]	; (1a8f4 <nrf_cloud_detect_disconnection_request+0x5c>)
   1a8c0:	f010 fc57 	bl	2b172 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   1a8c4:	2800      	cmp	r0, #0
   1a8c6:	d0ea      	beq.n	1a89e <nrf_cloud_detect_disconnection_request+0x6>
	cJSON *discon_request_obj = cJSON_Parse(buf);
   1a8c8:	4620      	mov	r0, r4
   1a8ca:	f00e fdfa 	bl	294c2 <cJSON_Parse>
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   1a8ce:	4a09      	ldr	r2, [pc, #36]	; (1a8f4 <nrf_cloud_detect_disconnection_request+0x5c>)
   1a8d0:	4909      	ldr	r1, [pc, #36]	; (1a8f8 <nrf_cloud_detect_disconnection_request+0x60>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   1a8d2:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   1a8d4:	f00e fbf6 	bl	290c4 <json_item_string_exists>
   1a8d8:	4604      	mov	r4, r0
   1a8da:	b128      	cbz	r0, 1a8e8 <nrf_cloud_detect_disconnection_request+0x50>
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   1a8dc:	4628      	mov	r0, r5
   1a8de:	4a04      	ldr	r2, [pc, #16]	; (1a8f0 <nrf_cloud_detect_disconnection_request+0x58>)
   1a8e0:	4906      	ldr	r1, [pc, #24]	; (1a8fc <nrf_cloud_detect_disconnection_request+0x64>)
   1a8e2:	f00e fbef 	bl	290c4 <json_item_string_exists>
   1a8e6:	4604      	mov	r4, r0
	cJSON_Delete(discon_request_obj);
   1a8e8:	4628      	mov	r0, r5
   1a8ea:	f004 f9bb 	bl	1ec64 <cJSON_Delete>
	return ret;
   1a8ee:	e7d7      	b.n	1a8a0 <nrf_cloud_detect_disconnection_request+0x8>
   1a8f0:	0002ec49 	.word	0x0002ec49
   1a8f4:	0002ec50 	.word	0x0002ec50
   1a8f8:	0002ea81 	.word	0x0002ea81
   1a8fc:	0002ea7b 	.word	0x0002ea7b

0001a900 <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   1a900:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a902:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   1a904:	4606      	mov	r6, r0
{
   1a906:	b089      	sub	sp, #36	; 0x24
	if (!buf || !buf_sz) {
   1a908:	b340      	cbz	r0, 1a95c <nrf_cloud_configured_client_id_get+0x5c>
   1a90a:	b339      	cbz	r1, 1a95c <nrf_cloud_configured_client_id_get+0x5c>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   1a90c:	af02      	add	r7, sp, #8
   1a90e:	2116      	movs	r1, #22
   1a910:	4638      	mov	r0, r7
   1a912:	4a15      	ldr	r2, [pc, #84]	; (1a968 <nrf_cloud_configured_client_id_get+0x68>)
   1a914:	f007 fad0 	bl	21eb8 <nrf_modem_at_cmd>
	if (err) {
   1a918:	4604      	mov	r4, r0
   1a91a:	b168      	cbz	r0, 1a938 <nrf_cloud_configured_client_id_get+0x38>
   1a91c:	4813      	ldr	r0, [pc, #76]	; (1a96c <nrf_cloud_configured_client_id_get+0x6c>)
   1a91e:	4b14      	ldr	r3, [pc, #80]	; (1a970 <nrf_cloud_configured_client_id_get+0x70>)
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   1a920:	4622      	mov	r2, r4
   1a922:	1ac0      	subs	r0, r0, r3
   1a924:	08c0      	lsrs	r0, r0, #3
   1a926:	0180      	lsls	r0, r0, #6
   1a928:	4912      	ldr	r1, [pc, #72]	; (1a974 <nrf_cloud_configured_client_id_get+0x74>)
   1a92a:	f040 0001 	orr.w	r0, r0, #1
   1a92e:	f00b fdfe 	bl	2652e <log_string_sync>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   1a932:	4620      	mov	r0, r4
   1a934:	b009      	add	sp, #36	; 0x24
   1a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   1a938:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   1a93a:	f88d 0017 	strb.w	r0, [sp, #23]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   1a93e:	9300      	str	r3, [sp, #0]
   1a940:	4629      	mov	r1, r5
   1a942:	4630      	mov	r0, r6
   1a944:	4b0c      	ldr	r3, [pc, #48]	; (1a978 <nrf_cloud_configured_client_id_get+0x78>)
   1a946:	4a0d      	ldr	r2, [pc, #52]	; (1a97c <nrf_cloud_configured_client_id_get+0x7c>)
   1a948:	9701      	str	r7, [sp, #4]
   1a94a:	f00b faf1 	bl	25f30 <snprintk>
	if (print_ret <= 0) {
   1a94e:	2800      	cmp	r0, #0
   1a950:	dd07      	ble.n	1a962 <nrf_cloud_configured_client_id_get+0x62>
	} else if (print_ret >= buf_sz) {
   1a952:	4285      	cmp	r5, r0
		return -EMSGSIZE;
   1a954:	bf98      	it	ls
   1a956:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   1a95a:	e7ea      	b.n	1a932 <nrf_cloud_configured_client_id_get+0x32>
		return -EINVAL;
   1a95c:	f06f 0415 	mvn.w	r4, #21
   1a960:	e7e7      	b.n	1a932 <nrf_cloud_configured_client_id_get+0x32>
		return -EIO;
   1a962:	f06f 0404 	mvn.w	r4, #4
   1a966:	e7e4      	b.n	1a932 <nrf_cloud_configured_client_id_get+0x32>
   1a968:	0002ec70 	.word	0x0002ec70
   1a96c:	0002c3cc 	.word	0x0002c3cc
   1a970:	0002c344 	.word	0x0002c344
   1a974:	0002ec78 	.word	0x0002ec78
   1a978:	0002ec99 	.word	0x0002ec99
   1a97c:	0002ec9e 	.word	0x0002ec9e

0001a980 <api_connect_error_translate.part.0>:

	atomic_set(&uninit_in_progress, 0);
	return err;
}

static int connect_error_translate(const int err)
   1a980:	4602      	mov	r2, r0
   1a982:	b508      	push	{r3, lr}
   1a984:	4806      	ldr	r0, [pc, #24]	; (1a9a0 <api_connect_error_translate.part.0+0x20>)
   1a986:	4b07      	ldr	r3, [pc, #28]	; (1a9a4 <api_connect_error_translate.part.0+0x24>)
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF cloud connect failed %d", err);
   1a988:	4907      	ldr	r1, [pc, #28]	; (1a9a8 <api_connect_error_translate.part.0+0x28>)
   1a98a:	1a1b      	subs	r3, r3, r0
   1a98c:	08db      	lsrs	r3, r3, #3
   1a98e:	019b      	lsls	r3, r3, #6
   1a990:	f043 0001 	orr.w	r0, r3, #1
   1a994:	f00b fdcb 	bl	2652e <log_string_sync>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
	}
}
   1a998:	f06f 0004 	mvn.w	r0, #4
   1a99c:	bd08      	pop	{r3, pc}
   1a99e:	bf00      	nop
   1a9a0:	0002c344 	.word	0x0002c344
   1a9a4:	0002c3c4 	.word	0x0002c3c4
   1a9a8:	0002ecb9 	.word	0x0002ecb9

0001a9ac <connect_error_translate>:
	switch (err) {
   1a9ac:	2800      	cmp	r0, #0
   1a9ae:	dc0e      	bgt.n	1a9ce <connect_error_translate+0x22>
   1a9b0:	f110 0f0d 	cmn.w	r0, #13
   1a9b4:	da0d      	bge.n	1a9d2 <connect_error_translate+0x26>
   1a9b6:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   1a9ba:	d042      	beq.n	1aa42 <connect_error_translate+0x96>
   1a9bc:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   1a9c0:	da2d      	bge.n	1aa1e <connect_error_translate+0x72>
   1a9c2:	f110 0f77 	cmn.w	r0, #119	; 0x77
   1a9c6:	d03f      	beq.n	1aa48 <connect_error_translate+0x9c>
   1a9c8:	f110 0f74 	cmn.w	r0, #116	; 0x74
   1a9cc:	d03f      	beq.n	1aa4e <connect_error_translate+0xa2>
   1a9ce:	f7ff bfd7 	b.w	1a980 <api_connect_error_translate.part.0>
   1a9d2:	f100 030d 	add.w	r3, r0, #13
   1a9d6:	2b0d      	cmp	r3, #13
   1a9d8:	d8f9      	bhi.n	1a9ce <connect_error_translate+0x22>
   1a9da:	a201      	add	r2, pc, #4	; (adr r2, 1a9e0 <connect_error_translate+0x34>)
   1a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a9e0:	0001aa31 	.word	0x0001aa31
   1a9e4:	0001aa3d 	.word	0x0001aa3d
   1a9e8:	0001a9cf 	.word	0x0001a9cf
   1a9ec:	0001aa19 	.word	0x0001aa19
   1a9f0:	0001a9cf 	.word	0x0001a9cf
   1a9f4:	0001aa37 	.word	0x0001aa37
   1a9f8:	0001a9cf 	.word	0x0001a9cf
   1a9fc:	0001a9cf 	.word	0x0001a9cf
   1aa00:	0001a9cf 	.word	0x0001a9cf
   1aa04:	0001a9cf 	.word	0x0001a9cf
   1aa08:	0001a9cf 	.word	0x0001a9cf
   1aa0c:	0001a9cf 	.word	0x0001a9cf
   1aa10:	0001a9cf 	.word	0x0001a9cf
   1aa14:	0001aa2f 	.word	0x0001aa2f
   1aa18:	f06f 0002 	mvn.w	r0, #2
   1aa1c:	4770      	bx	lr
   1aa1e:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   1aa22:	d017      	beq.n	1aa54 <connect_error_translate+0xa8>
   1aa24:	f110 0f16 	cmn.w	r0, #22
   1aa28:	d1d1      	bne.n	1a9ce <connect_error_translate+0x22>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   1aa2a:	f06f 0006 	mvn.w	r0, #6
}
   1aa2e:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   1aa30:	f04f 30ff 	mov.w	r0, #4294967295
   1aa34:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   1aa36:	f06f 0003 	mvn.w	r0, #3
   1aa3a:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   1aa3c:	f06f 0005 	mvn.w	r0, #5
   1aa40:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   1aa42:	f06f 0008 	mvn.w	r0, #8
   1aa46:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   1aa48:	f06f 000a 	mvn.w	r0, #10
   1aa4c:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   1aa4e:	f06f 0009 	mvn.w	r0, #9
   1aa52:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   1aa54:	f06f 0007 	mvn.w	r0, #7
   1aa58:	4770      	bx	lr
   1aa5a:	bf00      	nop

0001aa5c <api_event_handler>:
		return CLOUD_CONNECT_RES_ERR_MISC;
	}
}

static void api_event_handler(const struct nrf_cloud_evt *nrf_cloud_evt)
{
   1aa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa5e:	4604      	mov	r4, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   1aa60:	4f32      	ldr	r7, [pc, #200]	; (1ab2c <api_event_handler+0xd0>)
{
   1aa62:	b089      	sub	sp, #36	; 0x24
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   1aa64:	683d      	ldr	r5, [r7, #0]
	struct cloud_event evt = { 0 };
   1aa66:	221c      	movs	r2, #28
   1aa68:	2100      	movs	r1, #0
   1aa6a:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   1aa6c:	686e      	ldr	r6, [r5, #4]
	struct cloud_event evt = { 0 };
   1aa6e:	f010 fa0b 	bl	2ae88 <memset>

	switch (nrf_cloud_evt->type) {
   1aa72:	7823      	ldrb	r3, [r4, #0]
   1aa74:	2b0a      	cmp	r3, #10
   1aa76:	d80a      	bhi.n	1aa8e <api_event_handler+0x32>
   1aa78:	b15b      	cbz	r3, 1aa92 <api_event_handler+0x36>
   1aa7a:	3b01      	subs	r3, #1
   1aa7c:	2b09      	cmp	r3, #9
   1aa7e:	d808      	bhi.n	1aa92 <api_event_handler+0x36>
   1aa80:	e8df f003 	tbb	[pc, r3]
   1aa84:	26221509 	.word	0x26221509
   1aa88:	2a073d28 	.word	0x2a073d28
   1aa8c:	4c07      	.short	0x4c07
   1aa8e:	2bff      	cmp	r3, #255	; 0xff
   1aa90:	d02d      	beq.n	1aaee <api_event_handler+0x92>
		break;
	default:
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
		break;
	}
}
   1aa92:	b009      	add	sp, #36	; 0x24
   1aa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		evt.type = CLOUD_EVT_CONNECTED;
   1aa96:	2301      	movs	r3, #1
   1aa98:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   1aa9c:	6863      	ldr	r3, [r4, #4]
   1aa9e:	3b00      	subs	r3, #0
   1aaa0:	bf18      	it	ne
   1aaa2:	2301      	movne	r3, #1
   1aaa4:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aaa8:	68f2      	ldr	r2, [r6, #12]
   1aaaa:	a901      	add	r1, sp, #4
   1aaac:	e025      	b.n	1aafa <api_event_handler+0x9e>
		evt.type = CLOUD_EVT_CONNECTING;
   1aaae:	2300      	movs	r3, #0
			api_connect_error_translate(nrf_cloud_evt->status);
   1aab0:	6860      	ldr	r0, [r4, #4]
		evt.type = CLOUD_EVT_CONNECTING;
   1aab2:	f88d 3004 	strb.w	r3, [sp, #4]
			api_connect_error_translate(nrf_cloud_evt->status);
   1aab6:	f00e fb6f 	bl	29198 <api_connect_error_translate>
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aaba:	68f2      	ldr	r2, [r6, #12]
		evt.data.err =
   1aabc:	9002      	str	r0, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aabe:	6838      	ldr	r0, [r7, #0]
   1aac0:	a901      	add	r1, sp, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aac2:	f00e fb50 	bl	29166 <cloud_notify_event>
}
   1aac6:	e7e4      	b.n	1aa92 <api_event_handler+0x36>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   1aac8:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_DISCONNECTED;
   1aaca:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aace:	e7eb      	b.n	1aaa8 <api_event_handler+0x4c>
		evt.type = CLOUD_EVT_PAIR_DONE;
   1aad0:	2308      	movs	r3, #8
   1aad2:	e7fa      	b.n	1aaca <api_event_handler+0x6e>
		evt.type = CLOUD_EVT_READY;
   1aad4:	2303      	movs	r3, #3
   1aad6:	e7f8      	b.n	1aaca <api_event_handler+0x6e>
		atomic_set(&transport_disconnected, 1);
   1aad8:	2101      	movs	r1, #1
   1aada:	4815      	ldr	r0, [pc, #84]	; (1ab30 <api_event_handler+0xd4>)
   1aadc:	f00e fb4c 	bl	29178 <atomic_set>
			api_disconnect_status_translate(nrf_cloud_evt->status);
   1aae0:	7923      	ldrb	r3, [r4, #4]
   1aae2:	2b03      	cmp	r3, #3
   1aae4:	bf28      	it	cs
   1aae6:	2303      	movcs	r3, #3
   1aae8:	9302      	str	r3, [sp, #8]
		evt.type = CLOUD_EVT_DISCONNECTED;
   1aaea:	2302      	movs	r3, #2
   1aaec:	e7ed      	b.n	1aaca <api_event_handler+0x6e>
		evt.type = CLOUD_EVT_ERROR;
   1aaee:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aaf0:	68f2      	ldr	r2, [r6, #12]
		evt.type = CLOUD_EVT_ERROR;
   1aaf2:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aaf6:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1aafa:	4628      	mov	r0, r5
   1aafc:	e7e1      	b.n	1aac2 <api_event_handler+0x66>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   1aafe:	2306      	movs	r3, #6
   1ab00:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   1ab04:	68e3      	ldr	r3, [r4, #12]
   1ab06:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   1ab08:	68a3      	ldr	r3, [r4, #8]
   1ab0a:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_MSG;
   1ab0c:	2300      	movs	r3, #0
   1ab0e:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   1ab12:	6963      	ldr	r3, [r4, #20]
   1ab14:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   1ab16:	6923      	ldr	r3, [r4, #16]
   1ab18:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   1ab1a:	e7c5      	b.n	1aaa8 <api_event_handler+0x4c>
		evt.type = CLOUD_EVT_FOTA_DONE;
   1ab1c:	230a      	movs	r3, #10
   1ab1e:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   1ab22:	68e3      	ldr	r3, [r4, #12]
   1ab24:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   1ab26:	68a3      	ldr	r3, [r4, #8]
   1ab28:	9303      	str	r3, [sp, #12]
   1ab2a:	e7bd      	b.n	1aaa8 <api_event_handler+0x4c>
   1ab2c:	2000e17c 	.word	0x2000e17c
   1ab30:	2000e180 	.word	0x2000e180

0001ab34 <nfsm_get_current_state>:
	return current_state;
   1ab34:	4b01      	ldr	r3, [pc, #4]	; (1ab3c <nfsm_get_current_state+0x8>)
   1ab36:	7818      	ldrb	r0, [r3, #0]
}
   1ab38:	4770      	bx	lr
   1ab3a:	bf00      	nop
   1ab3c:	2000f128 	.word	0x2000f128

0001ab40 <nfsm_set_current_state_and_notify>:
{
   1ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab42:	4607      	mov	r7, r0
	bool discon_evt = (evt != NULL) &&
   1ab44:	460c      	mov	r4, r1
   1ab46:	b341      	cbz	r1, 1ab9a <nfsm_set_current_state_and_notify+0x5a>
   1ab48:	780d      	ldrb	r5, [r1, #0]
   1ab4a:	f1a5 0308 	sub.w	r3, r5, #8
   1ab4e:	425d      	negs	r5, r3
   1ab50:	415d      	adcs	r5, r3
   1ab52:	f04f 32ff 	mov.w	r2, #4294967295
   1ab56:	f04f 33ff 	mov.w	r3, #4294967295
   1ab5a:	4811      	ldr	r0, [pc, #68]	; (1aba0 <nfsm_set_current_state_and_notify+0x60>)
   1ab5c:	f008 fb58 	bl	23210 <z_impl_k_mutex_lock>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ab60:	4e10      	ldr	r6, [pc, #64]	; (1aba4 <nfsm_set_current_state_and_notify+0x64>)
   1ab62:	e8d6 2faf 	lda	r2, [r6]
	if (!atomic_get(&uninit_in_progress)) {
   1ab66:	b90a      	cbnz	r2, 1ab6c <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   1ab68:	4b0f      	ldr	r3, [pc, #60]	; (1aba8 <nfsm_set_current_state_and_notify+0x68>)
   1ab6a:	701f      	strb	r7, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   1ab6c:	480c      	ldr	r0, [pc, #48]	; (1aba0 <nfsm_set_current_state_and_notify+0x60>)
   1ab6e:	f008 fbcd 	bl	2330c <z_impl_k_mutex_unlock>
	if (discon_evt) {
   1ab72:	b11d      	cbz	r5, 1ab7c <nfsm_set_current_state_and_notify+0x3c>
		atomic_set(&transport_disconnected, 1);
   1ab74:	2101      	movs	r1, #1
   1ab76:	480d      	ldr	r0, [pc, #52]	; (1abac <nfsm_set_current_state_and_notify+0x6c>)
   1ab78:	f00e fafe 	bl	29178 <atomic_set>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   1ab7c:	4b0c      	ldr	r3, [pc, #48]	; (1abb0 <nfsm_set_current_state_and_notify+0x70>)
   1ab7e:	681b      	ldr	r3, [r3, #0]
   1ab80:	b113      	cbz	r3, 1ab88 <nfsm_set_current_state_and_notify+0x48>
   1ab82:	b10c      	cbz	r4, 1ab88 <nfsm_set_current_state_and_notify+0x48>
		app_event_handler(evt);
   1ab84:	4620      	mov	r0, r4
   1ab86:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   1ab88:	b14d      	cbz	r5, 1ab9e <nfsm_set_current_state_and_notify+0x5e>
   1ab8a:	e8d6 3faf 	lda	r3, [r6]
   1ab8e:	b133      	cbz	r3, 1ab9e <nfsm_set_current_state_and_notify+0x5e>
}
   1ab90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1ab94:	4807      	ldr	r0, [pc, #28]	; (1abb4 <nfsm_set_current_state_and_notify+0x74>)
   1ab96:	f008 bc33 	b.w	23400 <z_impl_k_sem_give>
	bool discon_evt = (evt != NULL) &&
   1ab9a:	460d      	mov	r5, r1
   1ab9c:	e7d9      	b.n	1ab52 <nfsm_set_current_state_and_notify+0x12>
}
   1ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aba0:	2000ca24 	.word	0x2000ca24
   1aba4:	2000e184 	.word	0x2000e184
   1aba8:	2000f128 	.word	0x2000f128
   1abac:	2000e180 	.word	0x2000e180
   1abb0:	2000e170 	.word	0x2000e170
   1abb4:	2000cac8 	.word	0x2000cac8

0001abb8 <nfsm_get_disconnect_requested>:
   1abb8:	4b03      	ldr	r3, [pc, #12]	; (1abc8 <nfsm_get_disconnect_requested+0x10>)
   1abba:	e8d3 0faf 	lda	r0, [r3]
}
   1abbe:	3800      	subs	r0, #0
   1abc0:	bf18      	it	ne
   1abc2:	2001      	movne	r0, #1
   1abc4:	4770      	bx	lr
   1abc6:	bf00      	nop
   1abc8:	2000e178 	.word	0x2000e178

0001abcc <nrf_cloud_init>:
{
   1abcc:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE ||
   1abce:	4b15      	ldr	r3, [pc, #84]	; (1ac24 <nrf_cloud_init+0x58>)
{
   1abd0:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE ||
   1abd2:	781b      	ldrb	r3, [r3, #0]
   1abd4:	b11b      	cbz	r3, 1abde <nrf_cloud_init+0x12>
		return -EACCES;
   1abd6:	f06f 040c 	mvn.w	r4, #12
}
   1abda:	4620      	mov	r0, r4
   1abdc:	bd38      	pop	{r3, r4, r5, pc}
   1abde:	4b12      	ldr	r3, [pc, #72]	; (1ac28 <nrf_cloud_init+0x5c>)
   1abe0:	e8d3 3faf 	lda	r3, [r3]
	if (current_state != STATE_IDLE ||
   1abe4:	2b00      	cmp	r3, #0
   1abe6:	d1f6      	bne.n	1abd6 <nrf_cloud_init+0xa>
	if (param->event_handler == NULL) {
   1abe8:	6803      	ldr	r3, [r0, #0]
   1abea:	b1bb      	cbz	r3, 1ac1c <nrf_cloud_init+0x50>
	err = nfsm_init();
   1abec:	f000 fc00 	bl	1b3f0 <nfsm_init>
	if (err) {
   1abf0:	4604      	mov	r4, r0
   1abf2:	2800      	cmp	r0, #0
   1abf4:	d1f1      	bne.n	1abda <nrf_cloud_init+0xe>
	err = nrf_cloud_codec_init();
   1abf6:	f7ff fbd1 	bl	1a39c <nrf_cloud_codec_init>
	if (err) {
   1abfa:	4604      	mov	r4, r0
   1abfc:	2800      	cmp	r0, #0
   1abfe:	d1ec      	bne.n	1abda <nrf_cloud_init+0xe>
	err = nct_init(param->client_id);
   1ac00:	6868      	ldr	r0, [r5, #4]
   1ac02:	f000 ffaf 	bl	1bb64 <nct_init>
	if (err) {
   1ac06:	4604      	mov	r4, r0
   1ac08:	2800      	cmp	r0, #0
   1ac0a:	d1e6      	bne.n	1abda <nrf_cloud_init+0xe>
	app_event_handler = param->event_handler;
   1ac0c:	682a      	ldr	r2, [r5, #0]
   1ac0e:	4b07      	ldr	r3, [pc, #28]	; (1ac2c <nrf_cloud_init+0x60>)
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   1ac10:	4601      	mov	r1, r0
   1ac12:	2001      	movs	r0, #1
	app_event_handler = param->event_handler;
   1ac14:	601a      	str	r2, [r3, #0]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   1ac16:	f7ff ff93 	bl	1ab40 <nfsm_set_current_state_and_notify>
	return 0;
   1ac1a:	e7de      	b.n	1abda <nrf_cloud_init+0xe>
		return -EINVAL;
   1ac1c:	f06f 0415 	mvn.w	r4, #21
   1ac20:	e7db      	b.n	1abda <nrf_cloud_init+0xe>
   1ac22:	bf00      	nop
   1ac24:	2000f128 	.word	0x2000f128
   1ac28:	2000e184 	.word	0x2000e184
   1ac2c:	2000e170 	.word	0x2000e170

0001ac30 <api_init>:

static int api_init(const struct cloud_backend *const backend,
		cloud_evt_handler_t handler)
{
	struct nrf_cloud_init_param params = {
   1ac30:	2300      	movs	r3, #0
{
   1ac32:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_init_param params = {
   1ac34:	9301      	str	r3, [sp, #4]
   1ac36:	4b06      	ldr	r3, [pc, #24]	; (1ac50 <api_init+0x20>)
   1ac38:	9300      	str	r3, [sp, #0]
	}

	params.client_id = backend->config->id;
#endif

	backend->config->handler = handler;
   1ac3a:	6843      	ldr	r3, [r0, #4]
   1ac3c:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   1ac3e:	4b05      	ldr	r3, [pc, #20]	; (1ac54 <api_init+0x24>)
   1ac40:	6018      	str	r0, [r3, #0]

	return nrf_cloud_init(&params);
   1ac42:	4668      	mov	r0, sp
   1ac44:	f7ff ffc2 	bl	1abcc <nrf_cloud_init>
}
   1ac48:	b003      	add	sp, #12
   1ac4a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac4e:	bf00      	nop
   1ac50:	0001aa5d 	.word	0x0001aa5d
   1ac54:	2000e17c 	.word	0x2000e17c

0001ac58 <nrf_cloud_uninit>:
{
   1ac58:	b538      	push	{r3, r4, r5, lr}
	err = nrf_cloud_fota_uninit();
   1ac5a:	f001 fe81 	bl	1c960 <nrf_cloud_fota_uninit>
	if (err == -EBUSY) {
   1ac5e:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_fota_uninit();
   1ac62:	4604      	mov	r4, r0
	if (err == -EBUSY) {
   1ac64:	d10b      	bne.n	1ac7e <nrf_cloud_uninit+0x26>
   1ac66:	4825      	ldr	r0, [pc, #148]	; (1acfc <nrf_cloud_uninit+0xa4>)
   1ac68:	4b25      	ldr	r3, [pc, #148]	; (1ad00 <nrf_cloud_uninit+0xa8>)
		LOG_WRN("Cannot uninitialize while a FOTA job is active");
   1ac6a:	4926      	ldr	r1, [pc, #152]	; (1ad04 <nrf_cloud_uninit+0xac>)
   1ac6c:	1ac0      	subs	r0, r0, r3
   1ac6e:	08c0      	lsrs	r0, r0, #3
   1ac70:	0180      	lsls	r0, r0, #6
   1ac72:	f040 0002 	orr.w	r0, r0, #2
   1ac76:	f00b fc5a 	bl	2652e <log_string_sync>
}
   1ac7a:	4620      	mov	r0, r4
   1ac7c:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set(&uninit_in_progress, 1);
   1ac7e:	2101      	movs	r1, #1
   1ac80:	4821      	ldr	r0, [pc, #132]	; (1ad08 <nrf_cloud_uninit+0xb0>)
   1ac82:	f00e fa79 	bl	29178 <atomic_set>
	return z_impl_k_mutex_lock(mutex, timeout);
   1ac86:	f04f 32ff 	mov.w	r2, #4294967295
   1ac8a:	f04f 33ff 	mov.w	r3, #4294967295
   1ac8e:	481f      	ldr	r0, [pc, #124]	; (1ad0c <nrf_cloud_uninit+0xb4>)
   1ac90:	f008 fabe 	bl	23210 <z_impl_k_mutex_lock>
	current_state = STATE_IDLE;
   1ac94:	2200      	movs	r2, #0
	prev_state = current_state;
   1ac96:	4b1e      	ldr	r3, [pc, #120]	; (1ad10 <nrf_cloud_uninit+0xb8>)
   1ac98:	781d      	ldrb	r5, [r3, #0]
	current_state = STATE_IDLE;
   1ac9a:	701a      	strb	r2, [r3, #0]
	prev_state = current_state;
   1ac9c:	b2ed      	uxtb	r5, r5
	return z_impl_k_mutex_unlock(mutex);
   1ac9e:	481b      	ldr	r0, [pc, #108]	; (1ad0c <nrf_cloud_uninit+0xb4>)
   1aca0:	f008 fb34 	bl	2330c <z_impl_k_mutex_unlock>
	if (prev_state >= STATE_CONNECTED) {
   1aca4:	2d01      	cmp	r5, #1
   1aca6:	d91e      	bls.n	1ace6 <nrf_cloud_uninit+0x8e>
		atomic_set(&disconnect_requested, 1);
   1aca8:	2101      	movs	r1, #1
   1acaa:	481a      	ldr	r0, [pc, #104]	; (1ad14 <nrf_cloud_uninit+0xbc>)
   1acac:	f00e fa64 	bl	29178 <atomic_set>
	z_impl_k_sem_reset(sem);
   1acb0:	4819      	ldr	r0, [pc, #100]	; (1ad18 <nrf_cloud_uninit+0xc0>)
   1acb2:	f008 fbf5 	bl	234a0 <z_impl_k_sem_reset>
		(void)nct_disconnect();
   1acb6:	f001 fa09 	bl	1c0cc <nct_disconnect>
	return z_impl_k_sem_take(sem, timeout);
   1acba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1acbe:	2300      	movs	r3, #0
   1acc0:	4815      	ldr	r0, [pc, #84]	; (1ad18 <nrf_cloud_uninit+0xc0>)
   1acc2:	f008 fbc3 	bl	2344c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1acc6:	f110 0f0b 	cmn.w	r0, #11
   1acca:	4604      	mov	r4, r0
   1accc:	d10b      	bne.n	1ace6 <nrf_cloud_uninit+0x8e>
   1acce:	4b0c      	ldr	r3, [pc, #48]	; (1ad00 <nrf_cloud_uninit+0xa8>)
   1acd0:	480a      	ldr	r0, [pc, #40]	; (1acfc <nrf_cloud_uninit+0xa4>)
			LOG_WRN("Did not receive expected disconnect event during cloud unint");
   1acd2:	4912      	ldr	r1, [pc, #72]	; (1ad1c <nrf_cloud_uninit+0xc4>)
   1acd4:	1ac0      	subs	r0, r0, r3
   1acd6:	08c0      	lsrs	r0, r0, #3
   1acd8:	0180      	lsls	r0, r0, #6
   1acda:	f040 0002 	orr.w	r0, r0, #2
   1acde:	f00b fc26 	bl	2652e <log_string_sync>
			err = -EISCONN;
   1ace2:	f06f 047e 	mvn.w	r4, #126	; 0x7e
	app_event_handler = NULL;
   1ace6:	2500      	movs	r5, #0
   1ace8:	4b0d      	ldr	r3, [pc, #52]	; (1ad20 <nrf_cloud_uninit+0xc8>)
   1acea:	601d      	str	r5, [r3, #0]
	nct_uninit();
   1acec:	f001 f854 	bl	1bd98 <nct_uninit>
	atomic_set(&uninit_in_progress, 0);
   1acf0:	4629      	mov	r1, r5
   1acf2:	4805      	ldr	r0, [pc, #20]	; (1ad08 <nrf_cloud_uninit+0xb0>)
   1acf4:	f00e fa40 	bl	29178 <atomic_set>
	return err;
   1acf8:	e7bf      	b.n	1ac7a <nrf_cloud_uninit+0x22>
   1acfa:	bf00      	nop
   1acfc:	0002c3c4 	.word	0x0002c3c4
   1ad00:	0002c344 	.word	0x0002c344
   1ad04:	0002ecd5 	.word	0x0002ecd5
   1ad08:	2000e184 	.word	0x2000e184
   1ad0c:	2000ca24 	.word	0x2000ca24
   1ad10:	2000f128 	.word	0x2000f128
   1ad14:	2000e178 	.word	0x2000e178
   1ad18:	2000cac8 	.word	0x2000cac8
   1ad1c:	0002ed04 	.word	0x0002ed04
   1ad20:	2000e170 	.word	0x2000e170

0001ad24 <nrf_cloud_connect>:
{
   1ad24:	b510      	push	{r4, lr}
	if (current_state == STATE_IDLE) {
   1ad26:	4b12      	ldr	r3, [pc, #72]	; (1ad70 <nrf_cloud_connect+0x4c>)
   1ad28:	781a      	ldrb	r2, [r3, #0]
   1ad2a:	b1d2      	cbz	r2, 1ad62 <nrf_cloud_connect+0x3e>
	} else if (current_state != STATE_INITIALIZED) {
   1ad2c:	781a      	ldrb	r2, [r3, #0]
   1ad2e:	2a01      	cmp	r2, #1
   1ad30:	d11a      	bne.n	1ad68 <nrf_cloud_connect+0x44>
	if (current_state == STATE_IDLE) {
   1ad32:	781b      	ldrb	r3, [r3, #0]
   1ad34:	b17b      	cbz	r3, 1ad56 <nrf_cloud_connect+0x32>
   1ad36:	4b0f      	ldr	r3, [pc, #60]	; (1ad74 <nrf_cloud_connect+0x50>)
   1ad38:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   1ad3c:	b974      	cbnz	r4, 1ad5c <nrf_cloud_connect+0x38>
	atomic_set(&disconnect_requested, 0);
   1ad3e:	4621      	mov	r1, r4
   1ad40:	480d      	ldr	r0, [pc, #52]	; (1ad78 <nrf_cloud_connect+0x54>)
   1ad42:	f00e fa19 	bl	29178 <atomic_set>
	z_impl_k_sem_give(sem);
   1ad46:	480d      	ldr	r0, [pc, #52]	; (1ad7c <nrf_cloud_connect+0x58>)
   1ad48:	f008 fb5a 	bl	23400 <z_impl_k_sem_give>
	return 0;
   1ad4c:	4620      	mov	r0, r4
}
   1ad4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   1ad52:	f7ff be2b 	b.w	1a9ac <connect_error_translate>
		return -EACCES;
   1ad56:	f06f 000c 	mvn.w	r0, #12
   1ad5a:	e7f8      	b.n	1ad4e <nrf_cloud_connect+0x2a>
		return -EINPROGRESS;
   1ad5c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   1ad60:	e7f5      	b.n	1ad4e <nrf_cloud_connect+0x2a>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   1ad62:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ad66:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   1ad68:	f06f 000a 	mvn.w	r0, #10
   1ad6c:	e7fb      	b.n	1ad66 <nrf_cloud_connect+0x42>
   1ad6e:	bf00      	nop
   1ad70:	2000f128 	.word	0x2000f128
   1ad74:	2000e174 	.word	0x2000e174
   1ad78:	2000e178 	.word	0x2000e178
   1ad7c:	2000ca68 	.word	0x2000ca68

0001ad80 <nrf_cloud_disconnect>:
{
   1ad80:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   1ad82:	4b07      	ldr	r3, [pc, #28]	; (1ada0 <nrf_cloud_disconnect+0x20>)
   1ad84:	781b      	ldrb	r3, [r3, #0]
   1ad86:	2b01      	cmp	r3, #1
   1ad88:	d907      	bls.n	1ad9a <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   1ad8a:	2101      	movs	r1, #1
   1ad8c:	4805      	ldr	r0, [pc, #20]	; (1ada4 <nrf_cloud_disconnect+0x24>)
   1ad8e:	f00e f9f3 	bl	29178 <atomic_set>
}
   1ad92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   1ad96:	f001 b999 	b.w	1c0cc <nct_disconnect>
}
   1ad9a:	f06f 000c 	mvn.w	r0, #12
   1ad9e:	bd08      	pop	{r3, pc}
   1ada0:	2000f128 	.word	0x2000f128
   1ada4:	2000e178 	.word	0x2000e178

0001ada8 <nrf_cloud_run>:
{
   1ada8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   1adac:	f04f 0800 	mov.w	r8, #0
   1adb0:	4c44      	ldr	r4, [pc, #272]	; (1aec4 <nrf_cloud_run+0x11c>)
   1adb2:	4b45      	ldr	r3, [pc, #276]	; (1aec8 <nrf_cloud_run+0x120>)
	return z_impl_k_sem_take(sem, timeout);
   1adb4:	4e45      	ldr	r6, [pc, #276]	; (1aecc <nrf_cloud_run+0x124>)
   1adb6:	1ae4      	subs	r4, r4, r3
	atomic_set(&connection_poll_active, 1);
   1adb8:	4f45      	ldr	r7, [pc, #276]	; (1aed0 <nrf_cloud_run+0x128>)
{
   1adba:	b088      	sub	sp, #32
   1adbc:	08e4      	lsrs	r4, r4, #3
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   1adbe:	f04f 0a02 	mov.w	sl, #2
   1adc2:	f04f 32ff 	mov.w	r2, #4294967295
   1adc6:	f04f 33ff 	mov.w	r3, #4294967295
   1adca:	4630      	mov	r0, r6
	return current_state;
   1adcc:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1aee0 <nrf_cloud_run+0x138>
   1add0:	f008 fb3c 	bl	2344c <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   1add4:	2101      	movs	r1, #1
   1add6:	4638      	mov	r0, r7
   1add8:	f00e f9ce 	bl	29178 <atomic_set>
	return current_state;
   1addc:	f899 0000 	ldrb.w	r0, [r9]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1ade0:	a902      	add	r1, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   1ade2:	f88d a008 	strb.w	sl, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   1ade6:	f8cd 800c 	str.w	r8, [sp, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1adea:	f7ff fea9 	bl	1ab40 <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   1adee:	2100      	movs	r1, #0
   1adf0:	4838      	ldr	r0, [pc, #224]	; (1aed4 <nrf_cloud_run+0x12c>)
   1adf2:	f00e f9c1 	bl	29178 <atomic_set>
	return nct_connect();
   1adf6:	f000 ffeb 	bl	1bdd0 <nct_connect>
	ret = connect_error_translate(ret);
   1adfa:	f7ff fdd7 	bl	1a9ac <connect_error_translate>
	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   1adfe:	4605      	mov	r5, r0
   1ae00:	b188      	cbz	r0, 1ae26 <nrf_cloud_run+0x7e>
		evt.status = ret;
   1ae02:	9003      	str	r0, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1ae04:	a902      	add	r1, sp, #8
	return current_state;
   1ae06:	f899 0000 	ldrb.w	r0, [r9]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   1ae0a:	f88d a008 	strb.w	sl, [sp, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1ae0e:	f7ff fe97 	bl	1ab40 <nfsm_set_current_state_and_notify>
	atomic_set(&connection_poll_active, 0);
   1ae12:	2100      	movs	r1, #0
   1ae14:	4638      	mov	r0, r7
   1ae16:	f00e f9af 	bl	29178 <atomic_set>
   1ae1a:	2200      	movs	r2, #0
   1ae1c:	2300      	movs	r3, #0
   1ae1e:	4630      	mov	r0, r6
   1ae20:	f008 fb14 	bl	2344c <z_impl_k_sem_take>
	goto start;
   1ae24:	e7cb      	b.n	1adbe <nrf_cloud_run+0x16>
	fds[0].fd = nct_socket_get();
   1ae26:	f001 f9cd 	bl	1c1c4 <nct_socket_get>
	fds[0].events = POLLIN;
   1ae2a:	2301      	movs	r3, #1
   1ae2c:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   1ae30:	2308      	movs	r3, #8
	atomic_set(&transport_disconnected, 0);
   1ae32:	4629      	mov	r1, r5
	fds[0].fd = nct_socket_get();
   1ae34:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   1ae36:	4828      	ldr	r0, [pc, #160]	; (1aed8 <nrf_cloud_run+0x130>)
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   1ae38:	f88d 3008 	strb.w	r3, [sp, #8]
	atomic_set(&transport_disconnected, 0);
   1ae3c:	f00e f99c 	bl	29178 <atomic_set>
   1ae40:	4d25      	ldr	r5, [pc, #148]	; (1aed8 <nrf_cloud_run+0x130>)
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   1ae42:	f001 f9b9 	bl	1c1b8 <nct_keepalive_time_left>
   1ae46:	4602      	mov	r2, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1ae48:	2101      	movs	r1, #1
   1ae4a:	4668      	mov	r0, sp
   1ae4c:	f00c f806 	bl	26e5c <z_impl_zsock_poll>
		if (ret == 0) {
   1ae50:	4602      	mov	r2, r0
   1ae52:	b940      	cbnz	r0, 1ae66 <nrf_cloud_run+0xbe>
	return nct_process();
   1ae54:	f001 f944 	bl	1c0e0 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   1ae58:	2800      	cmp	r0, #0
   1ae5a:	daf2      	bge.n	1ae42 <nrf_cloud_run+0x9a>
   1ae5c:	300b      	adds	r0, #11
   1ae5e:	d0f0      	beq.n	1ae42 <nrf_cloud_run+0x9a>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   1ae60:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   1ae62:	9303      	str	r3, [sp, #12]
			break;
   1ae64:	e00d      	b.n	1ae82 <nrf_cloud_run+0xda>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   1ae66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ae6a:	07d8      	lsls	r0, r3, #31
   1ae6c:	d515      	bpl.n	1ae9a <nrf_cloud_run+0xf2>
	return nct_process();
   1ae6e:	f001 f937 	bl	1c0e0 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   1ae72:	2800      	cmp	r0, #0
   1ae74:	da01      	bge.n	1ae7a <nrf_cloud_run+0xd2>
   1ae76:	300b      	adds	r0, #11
   1ae78:	d1f2      	bne.n	1ae60 <nrf_cloud_run+0xb8>
   1ae7a:	e8d5 3faf 	lda	r3, [r5]
			if (atomic_get(&transport_disconnected) == 1) {
   1ae7e:	2b01      	cmp	r3, #1
   1ae80:	d1df      	bne.n	1ae42 <nrf_cloud_run+0x9a>
   1ae82:	4b15      	ldr	r3, [pc, #84]	; (1aed8 <nrf_cloud_run+0x130>)
   1ae84:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   1ae88:	2b00      	cmp	r3, #0
   1ae8a:	d1c2      	bne.n	1ae12 <nrf_cloud_run+0x6a>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   1ae8c:	a902      	add	r1, sp, #8
   1ae8e:	2001      	movs	r0, #1
   1ae90:	f7ff fe56 	bl	1ab40 <nfsm_set_current_state_and_notify>
		nrf_cloud_disconnect();
   1ae94:	f7ff ff74 	bl	1ad80 <nrf_cloud_disconnect>
   1ae98:	e7bb      	b.n	1ae12 <nrf_cloud_run+0x6a>
		if (ret < 0) {
   1ae9a:	2a00      	cmp	r2, #0
   1ae9c:	da07      	bge.n	1aeae <nrf_cloud_run+0x106>
			LOG_ERR("poll() returned an error: %d", ret);
   1ae9e:	01a0      	lsls	r0, r4, #6
   1aea0:	490e      	ldr	r1, [pc, #56]	; (1aedc <nrf_cloud_run+0x134>)
   1aea2:	f040 0001 	orr.w	r0, r0, #1
   1aea6:	f00b fb42 	bl	2652e <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   1aeaa:	2303      	movs	r3, #3
   1aeac:	e7d9      	b.n	1ae62 <nrf_cloud_run+0xba>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   1aeae:	0699      	lsls	r1, r3, #26
   1aeb0:	d503      	bpl.n	1aeba <nrf_cloud_run+0x112>
			if (nfsm_get_disconnect_requested()) {
   1aeb2:	f7ff fe81 	bl	1abb8 <nfsm_get_disconnect_requested>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   1aeb6:	2302      	movs	r3, #2
   1aeb8:	e7d3      	b.n	1ae62 <nrf_cloud_run+0xba>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   1aeba:	06da      	lsls	r2, r3, #27
   1aebc:	d4d0      	bmi.n	1ae60 <nrf_cloud_run+0xb8>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   1aebe:	071b      	lsls	r3, r3, #28
   1aec0:	d5bf      	bpl.n	1ae42 <nrf_cloud_run+0x9a>
   1aec2:	e7f2      	b.n	1aeaa <nrf_cloud_run+0x102>
   1aec4:	0002c3c4 	.word	0x0002c3c4
   1aec8:	0002c344 	.word	0x0002c344
   1aecc:	2000ca68 	.word	0x2000ca68
   1aed0:	2000e174 	.word	0x2000e174
   1aed4:	2000e178 	.word	0x2000e178
   1aed8:	2000e180 	.word	0x2000e180
   1aedc:	0002ed41 	.word	0x0002ed41
   1aee0:	2000f128 	.word	0x2000f128

0001aee4 <nrf_cloud_send>:
{
   1aee4:	b510      	push	{r4, lr}
	if (current_state != STATE_DC_CONNECTED) {
   1aee6:	4b39      	ldr	r3, [pc, #228]	; (1afcc <nrf_cloud_send+0xe8>)
{
   1aee8:	b086      	sub	sp, #24
	if (current_state != STATE_DC_CONNECTED) {
   1aeea:	781b      	ldrb	r3, [r3, #0]
   1aeec:	2b09      	cmp	r3, #9
   1aeee:	d169      	bne.n	1afc4 <nrf_cloud_send+0xe0>
	switch (msg->topic_type) {
   1aef0:	7a03      	ldrb	r3, [r0, #8]
   1aef2:	2b02      	cmp	r3, #2
   1aef4:	d01e      	beq.n	1af34 <nrf_cloud_send+0x50>
   1aef6:	2b03      	cmp	r3, #3
   1aef8:	d040      	beq.n	1af7c <nrf_cloud_send+0x98>
   1aefa:	2b01      	cmp	r3, #1
   1aefc:	d155      	bne.n	1afaa <nrf_cloud_send+0xc6>
		const struct nct_cc_data shadow_data = {
   1aefe:	2200      	movs	r2, #0
   1af00:	9205      	str	r2, [sp, #20]
   1af02:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1af06:	6802      	ldr	r2, [r0, #0]
   1af08:	f88d 3016 	strb.w	r3, [sp, #22]
   1af0c:	9201      	str	r2, [sp, #4]
   1af0e:	6842      	ldr	r2, [r0, #4]
		err = nct_cc_send(&shadow_data);
   1af10:	a801      	add	r0, sp, #4
		const struct nct_cc_data shadow_data = {
   1af12:	9202      	str	r2, [sp, #8]
		err = nct_cc_send(&shadow_data);
   1af14:	f000 ffaa 	bl	1be6c <nct_cc_send>
		if (err) {
   1af18:	4604      	mov	r4, r0
   1af1a:	b360      	cbz	r0, 1af76 <nrf_cloud_send+0x92>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   1af1c:	4622      	mov	r2, r4
   1af1e:	482c      	ldr	r0, [pc, #176]	; (1afd0 <nrf_cloud_send+0xec>)
   1af20:	4b2c      	ldr	r3, [pc, #176]	; (1afd4 <nrf_cloud_send+0xf0>)
   1af22:	492d      	ldr	r1, [pc, #180]	; (1afd8 <nrf_cloud_send+0xf4>)
   1af24:	1ac0      	subs	r0, r0, r3
   1af26:	08c0      	lsrs	r0, r0, #3
   1af28:	0180      	lsls	r0, r0, #6
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   1af2a:	f040 0001 	orr.w	r0, r0, #1
   1af2e:	f00b fafe 	bl	2652e <log_string_sync>
			return err;
   1af32:	e020      	b.n	1af76 <nrf_cloud_send+0x92>
		const struct nct_dc_data buf = {
   1af34:	2300      	movs	r3, #0
   1af36:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1af3a:	9305      	str	r3, [sp, #20]
   1af3c:	6803      	ldr	r3, [r0, #0]
   1af3e:	9301      	str	r3, [sp, #4]
   1af40:	6843      	ldr	r3, [r0, #4]
   1af42:	9302      	str	r3, [sp, #8]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   1af44:	7a43      	ldrb	r3, [r0, #9]
   1af46:	b923      	cbnz	r3, 1af52 <nrf_cloud_send+0x6e>
			err = nct_dc_stream(&buf);
   1af48:	a801      	add	r0, sp, #4
   1af4a:	f00e f987 	bl	2925c <nct_dc_stream>
	return 0;
   1af4e:	2400      	movs	r4, #0
   1af50:	e011      	b.n	1af76 <nrf_cloud_send+0x92>
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   1af52:	2b01      	cmp	r3, #1
   1af54:	d103      	bne.n	1af5e <nrf_cloud_send+0x7a>
			err = nct_dc_send(&buf);
   1af56:	a801      	add	r0, sp, #4
   1af58:	f00e f97d 	bl	29256 <nct_dc_send>
   1af5c:	e7f7      	b.n	1af4e <nrf_cloud_send+0x6a>
   1af5e:	4b1d      	ldr	r3, [pc, #116]	; (1afd4 <nrf_cloud_send+0xf0>)
   1af60:	481b      	ldr	r0, [pc, #108]	; (1afd0 <nrf_cloud_send+0xec>)
			LOG_ERR("Unsupported QoS setting");
   1af62:	491e      	ldr	r1, [pc, #120]	; (1afdc <nrf_cloud_send+0xf8>)
   1af64:	1ac0      	subs	r0, r0, r3
   1af66:	08c0      	lsrs	r0, r0, #3
   1af68:	0180      	lsls	r0, r0, #6
   1af6a:	f040 0001 	orr.w	r0, r0, #1
   1af6e:	f00b fade 	bl	2652e <log_string_sync>
			return err;
   1af72:	f06f 0415 	mvn.w	r4, #21
}
   1af76:	4620      	mov	r0, r4
   1af78:	b006      	add	sp, #24
   1af7a:	bd10      	pop	{r4, pc}
		const struct nct_dc_data buf = {
   1af7c:	2300      	movs	r3, #0
   1af7e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1af82:	9305      	str	r3, [sp, #20]
   1af84:	6803      	ldr	r3, [r0, #0]
		err = nct_dc_bulk_send(&buf, msg->qos);
   1af86:	7a41      	ldrb	r1, [r0, #9]
		const struct nct_dc_data buf = {
   1af88:	9301      	str	r3, [sp, #4]
   1af8a:	6843      	ldr	r3, [r0, #4]
		err = nct_dc_bulk_send(&buf, msg->qos);
   1af8c:	a801      	add	r0, sp, #4
		const struct nct_dc_data buf = {
   1af8e:	9302      	str	r3, [sp, #8]
		err = nct_dc_bulk_send(&buf, msg->qos);
   1af90:	f001 f842 	bl	1c018 <nct_dc_bulk_send>
		if (err) {
   1af94:	4604      	mov	r4, r0
   1af96:	2800      	cmp	r0, #0
   1af98:	d0ed      	beq.n	1af76 <nrf_cloud_send+0x92>
   1af9a:	480d      	ldr	r0, [pc, #52]	; (1afd0 <nrf_cloud_send+0xec>)
   1af9c:	4b0d      	ldr	r3, [pc, #52]	; (1afd4 <nrf_cloud_send+0xf0>)
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   1af9e:	4622      	mov	r2, r4
   1afa0:	1ac0      	subs	r0, r0, r3
   1afa2:	08c0      	lsrs	r0, r0, #3
   1afa4:	490e      	ldr	r1, [pc, #56]	; (1afe0 <nrf_cloud_send+0xfc>)
   1afa6:	0180      	lsls	r0, r0, #6
   1afa8:	e7bf      	b.n	1af2a <nrf_cloud_send+0x46>
   1afaa:	4b0a      	ldr	r3, [pc, #40]	; (1afd4 <nrf_cloud_send+0xf0>)
   1afac:	4808      	ldr	r0, [pc, #32]	; (1afd0 <nrf_cloud_send+0xec>)
		LOG_ERR("Unknown topic type");
   1afae:	490d      	ldr	r1, [pc, #52]	; (1afe4 <nrf_cloud_send+0x100>)
   1afb0:	1ac0      	subs	r0, r0, r3
   1afb2:	08c0      	lsrs	r0, r0, #3
   1afb4:	0180      	lsls	r0, r0, #6
   1afb6:	f040 0001 	orr.w	r0, r0, #1
   1afba:	f00b fab8 	bl	2652e <log_string_sync>
		return -ENODATA;
   1afbe:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1afc2:	e7d8      	b.n	1af76 <nrf_cloud_send+0x92>
		return -EACCES;
   1afc4:	f06f 040c 	mvn.w	r4, #12
   1afc8:	e7d5      	b.n	1af76 <nrf_cloud_send+0x92>
   1afca:	bf00      	nop
   1afcc:	2000f128 	.word	0x2000f128
   1afd0:	0002c3c4 	.word	0x0002c3c4
   1afd4:	0002c344 	.word	0x0002c344
   1afd8:	0002ed5e 	.word	0x0002ed5e
   1afdc:	0002ed7d 	.word	0x0002ed7d
   1afe0:	0002ed95 	.word	0x0002ed95
   1afe4:	0002edb8 	.word	0x0002edb8

0001afe8 <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   1afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   1afea:	694c      	ldr	r4, [r1, #20]
   1afec:	2c00      	cmp	r4, #0
   1afee:	d141      	bne.n	1b074 <api_send+0x8c>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   1aff0:	898b      	ldrh	r3, [r1, #12]
   1aff2:	b123      	cbz	r3, 1affe <api_send+0x16>
   1aff4:	2b01      	cmp	r3, #1
   1aff6:	d032      	beq.n	1b05e <api_send+0x76>
	if (err) {
		return err;
	}

	return 0;
}
   1aff8:	4620      	mov	r0, r4
   1affa:	b004      	add	sp, #16
   1affc:	bd10      	pop	{r4, pc}
		struct nrf_cloud_tx_data buf = {
   1affe:	f8ad 300d 	strh.w	r3, [sp, #13]
   1b002:	f88d 300f 	strb.w	r3, [sp, #15]
   1b006:	684b      	ldr	r3, [r1, #4]
   1b008:	9301      	str	r3, [sp, #4]
   1b00a:	680b      	ldr	r3, [r1, #0]
   1b00c:	9302      	str	r3, [sp, #8]
   1b00e:	2302      	movs	r3, #2
   1b010:	f88d 300c 	strb.w	r3, [sp, #12]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   1b014:	7a0b      	ldrb	r3, [r1, #8]
   1b016:	b99b      	cbnz	r3, 1b040 <api_send+0x58>
			buf.qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1b018:	f88d 300d 	strb.w	r3, [sp, #13]
		err = nrf_cloud_send(&shadow_data);
   1b01c:	a801      	add	r0, sp, #4
   1b01e:	f7ff ff61 	bl	1aee4 <nrf_cloud_send>
		if (err) {
   1b022:	4604      	mov	r4, r0
   1b024:	2800      	cmp	r0, #0
   1b026:	d0e7      	beq.n	1aff8 <api_send+0x10>
   1b028:	4b14      	ldr	r3, [pc, #80]	; (1b07c <api_send+0x94>)
   1b02a:	4815      	ldr	r0, [pc, #84]	; (1b080 <api_send+0x98>)
			LOG_ERR("nrf_cloud_send failed, error: %d", err);
   1b02c:	4622      	mov	r2, r4
   1b02e:	1ac0      	subs	r0, r0, r3
   1b030:	08c0      	lsrs	r0, r0, #3
   1b032:	0180      	lsls	r0, r0, #6
   1b034:	4913      	ldr	r1, [pc, #76]	; (1b084 <api_send+0x9c>)
   1b036:	f040 0001 	orr.w	r0, r0, #1
   1b03a:	f00b fa78 	bl	2652e <log_string_sync>
			return err;
   1b03e:	e7db      	b.n	1aff8 <api_send+0x10>
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   1b040:	2b01      	cmp	r3, #1
   1b042:	d0e9      	beq.n	1b018 <api_send+0x30>
   1b044:	4b0d      	ldr	r3, [pc, #52]	; (1b07c <api_send+0x94>)
   1b046:	480e      	ldr	r0, [pc, #56]	; (1b080 <api_send+0x98>)
			LOG_ERR("Unsupported QoS setting");
   1b048:	490f      	ldr	r1, [pc, #60]	; (1b088 <api_send+0xa0>)
   1b04a:	1ac0      	subs	r0, r0, r3
   1b04c:	08c0      	lsrs	r0, r0, #3
   1b04e:	0180      	lsls	r0, r0, #6
   1b050:	f040 0001 	orr.w	r0, r0, #1
   1b054:	f00b fa6b 	bl	2652e <log_string_sync>
			return err;
   1b058:	f06f 0415 	mvn.w	r4, #21
   1b05c:	e7cc      	b.n	1aff8 <api_send+0x10>
		struct nrf_cloud_tx_data shadow_data = {
   1b05e:	684a      	ldr	r2, [r1, #4]
   1b060:	f8ad 400d 	strh.w	r4, [sp, #13]
   1b064:	9201      	str	r2, [sp, #4]
   1b066:	680a      	ldr	r2, [r1, #0]
   1b068:	f88d 400f 	strb.w	r4, [sp, #15]
   1b06c:	9202      	str	r2, [sp, #8]
   1b06e:	f88d 300c 	strb.w	r3, [sp, #12]
   1b072:	e7d3      	b.n	1b01c <api_send+0x34>
		return -ENOTSUP;
   1b074:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1b078:	e7be      	b.n	1aff8 <api_send+0x10>
   1b07a:	bf00      	nop
   1b07c:	0002c344 	.word	0x0002c344
   1b080:	0002c3c4 	.word	0x0002c3c4
   1b084:	0002edcb 	.word	0x0002edcb
   1b088:	0002ed7d 	.word	0x0002ed7d

0001b08c <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   1b08c:	4b01      	ldr	r3, [pc, #4]	; (1b094 <nct_input+0x8>)
   1b08e:	7819      	ldrb	r1, [r3, #0]
   1b090:	f000 b9b4 	b.w	1b3fc <nfsm_handle_incoming_event>
   1b094:	2000f128 	.word	0x2000f128

0001b098 <nct_apply_update>:
	app_event_handler(evt);
   1b098:	4b01      	ldr	r3, [pc, #4]	; (1b0a0 <nct_apply_update+0x8>)
   1b09a:	681b      	ldr	r3, [r3, #0]
   1b09c:	4718      	bx	r3
   1b09e:	bf00      	nop
   1b0a0:	2000e170 	.word	0x2000e170

0001b0a4 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   1b0a4:	b510      	push	{r4, lr}
   1b0a6:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   1b0a8:	2214      	movs	r2, #20
   1b0aa:	2100      	movs	r1, #0
   1b0ac:	a801      	add	r0, sp, #4
   1b0ae:	f00f feeb 	bl	2ae88 <memset>
   1b0b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1b0b6:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b0ba:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.message_id = NCT_MSG_ID_STATE_REPORT,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   1b0bc:	2006      	movs	r0, #6
   1b0be:	a901      	add	r1, sp, #4
	struct nct_cc_data msg = {
   1b0c0:	f88d 3016 	strb.w	r3, [sp, #22]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   1b0c4:	f7ff fa82 	bl	1a5cc <nrf_cloud_encode_state>
	if (err) {
   1b0c8:	4604      	mov	r4, r0
   1b0ca:	b168      	cbz	r0, 1b0e8 <state_ua_pin_wait+0x44>
   1b0cc:	4819      	ldr	r0, [pc, #100]	; (1b134 <state_ua_pin_wait+0x90>)
   1b0ce:	4b1a      	ldr	r3, [pc, #104]	; (1b138 <state_ua_pin_wait+0x94>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   1b0d0:	4622      	mov	r2, r4
   1b0d2:	1ac0      	subs	r0, r0, r3
   1b0d4:	08c0      	lsrs	r0, r0, #3
   1b0d6:	0180      	lsls	r0, r0, #6
   1b0d8:	4918      	ldr	r1, [pc, #96]	; (1b13c <state_ua_pin_wait+0x98>)
   1b0da:	f040 0001 	orr.w	r0, r0, #1
   1b0de:	f00b fa26 	bl	2652e <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   1b0e2:	4620      	mov	r0, r4
   1b0e4:	b00c      	add	sp, #48	; 0x30
   1b0e6:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   1b0e8:	a801      	add	r0, sp, #4
   1b0ea:	f000 febf 	bl	1be6c <nct_cc_send>
	if (err) {
   1b0ee:	4604      	mov	r4, r0
   1b0f0:	b170      	cbz	r0, 1b110 <state_ua_pin_wait+0x6c>
   1b0f2:	4b11      	ldr	r3, [pc, #68]	; (1b138 <state_ua_pin_wait+0x94>)
   1b0f4:	480f      	ldr	r0, [pc, #60]	; (1b134 <state_ua_pin_wait+0x90>)
		LOG_ERR("nct_cc_send failed %d", err);
   1b0f6:	4622      	mov	r2, r4
   1b0f8:	1ac0      	subs	r0, r0, r3
   1b0fa:	08c0      	lsrs	r0, r0, #3
   1b0fc:	0180      	lsls	r0, r0, #6
   1b0fe:	4910      	ldr	r1, [pc, #64]	; (1b140 <state_ua_pin_wait+0x9c>)
   1b100:	f040 0001 	orr.w	r0, r0, #1
   1b104:	f00b fa13 	bl	2652e <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   1b108:	9802      	ldr	r0, [sp, #8]
   1b10a:	f00f fe5a 	bl	2adc2 <k_free>
		return err;
   1b10e:	e7e8      	b.n	1b0e2 <state_ua_pin_wait+0x3e>
	nrf_cloud_free((void *)msg.data.ptr);
   1b110:	9802      	ldr	r0, [sp, #8]
   1b112:	f00f fe56 	bl	2adc2 <k_free>
	struct nrf_cloud_evt evt = {
   1b116:	2218      	movs	r2, #24
   1b118:	4621      	mov	r1, r4
   1b11a:	eb0d 0002 	add.w	r0, sp, r2
   1b11e:	f00f feb3 	bl	2ae88 <memset>
   1b122:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   1b124:	2006      	movs	r0, #6
   1b126:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   1b128:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   1b12c:	f7ff fd08 	bl	1ab40 <nfsm_set_current_state_and_notify>
	return 0;
   1b130:	e7d7      	b.n	1b0e2 <state_ua_pin_wait+0x3e>
   1b132:	bf00      	nop
   1b134:	0002c3e4 	.word	0x0002c3e4
   1b138:	0002c344 	.word	0x0002c344
   1b13c:	0002ee0d 	.word	0x0002ee0d
   1b140:	0002ee2e 	.word	0x0002ee2e

0001b144 <dc_rx_data_handler>:
	return -EFTYPE;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
	struct nrf_cloud_evt cloud_evt = {
   1b144:	2300      	movs	r3, #0
{
   1b146:	b510      	push	{r4, lr}
   1b148:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   1b14a:	e9cd 3300 	strd	r3, r3, [sp]
   1b14e:	2306      	movs	r3, #6
   1b150:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   1b154:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   1b156:	aa02      	add	r2, sp, #8
   1b158:	e893 0003 	ldmia.w	r3, {r0, r1}
   1b15c:	e882 0003 	stmia.w	r2, {r0, r1}
   1b160:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1b164:	aa06      	add	r2, sp, #24
   1b166:	e902 0003 	stmdb	r2, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   1b16a:	6858      	ldr	r0, [r3, #4]
   1b16c:	f7ff fb94 	bl	1a898 <nrf_cloud_detect_disconnection_request>
   1b170:	4604      	mov	r4, r0
	/* All data is forwared to the app... unless a callback is registered */
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
		return 0;
	}

	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   1b172:	f7ff fcdf 	bl	1ab34 <nfsm_get_current_state>
   1b176:	4669      	mov	r1, sp
   1b178:	f7ff fce2 	bl	1ab40 <nfsm_set_current_state_and_notify>

	if (discon_req) {
   1b17c:	b16c      	cbz	r4, 1b19a <dc_rx_data_handler+0x56>
		LOG_DBG("Device deleted from nRF Cloud");
		int err = nrf_cloud_disconnect();
   1b17e:	f7ff fdff 	bl	1ad80 <nrf_cloud_disconnect>

		if (err < 0) {
   1b182:	1e02      	subs	r2, r0, #0
   1b184:	da09      	bge.n	1b19a <dc_rx_data_handler+0x56>
   1b186:	4806      	ldr	r0, [pc, #24]	; (1b1a0 <dc_rx_data_handler+0x5c>)
   1b188:	4b06      	ldr	r3, [pc, #24]	; (1b1a4 <dc_rx_data_handler+0x60>)
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   1b18a:	4907      	ldr	r1, [pc, #28]	; (1b1a8 <dc_rx_data_handler+0x64>)
   1b18c:	1a1b      	subs	r3, r3, r0
   1b18e:	08db      	lsrs	r3, r3, #3
   1b190:	019b      	lsls	r3, r3, #6
   1b192:	f043 0001 	orr.w	r0, r3, #1
   1b196:	f00b f9ca 	bl	2652e <log_string_sync>
		}
	}

	return 0;
}
   1b19a:	2000      	movs	r0, #0
   1b19c:	b006      	add	sp, #24
   1b19e:	bd10      	pop	{r4, pc}
   1b1a0:	0002c344 	.word	0x0002c344
   1b1a4:	0002c3e4 	.word	0x0002c3e4
   1b1a8:	0002ee44 	.word	0x0002ee44

0001b1ac <cc_connection_handler>:
{
   1b1ac:	b510      	push	{r4, lr}
   1b1ae:	4604      	mov	r4, r0
   1b1b0:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   1b1b2:	2100      	movs	r1, #0
   1b1b4:	2218      	movs	r2, #24
   1b1b6:	4668      	mov	r0, sp
   1b1b8:	f00f fe66 	bl	2ae88 <memset>
   1b1bc:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   1b1be:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   1b1c0:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   1b1c4:	b151      	cbz	r1, 1b1dc <cc_connection_handler+0x30>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1b1c6:	f7ff fcb5 	bl	1ab34 <nfsm_get_current_state>
   1b1ca:	4669      	mov	r1, sp
   1b1cc:	f7ff fcb8 	bl	1ab40 <nfsm_set_current_state_and_notify>
		return 0;
   1b1d0:	2400      	movs	r4, #0
		(void)nct_dc_disconnect();
   1b1d2:	f000 ff51 	bl	1c078 <nct_dc_disconnect>
}
   1b1d6:	4620      	mov	r0, r4
   1b1d8:	b006      	add	sp, #24
   1b1da:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   1b1dc:	2004      	movs	r0, #4
   1b1de:	f7ff fcaf 	bl	1ab40 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   1b1e2:	4806      	ldr	r0, [pc, #24]	; (1b1fc <cc_connection_handler+0x50>)
   1b1e4:	f000 fe42 	bl	1be6c <nct_cc_send>
	if (err) {
   1b1e8:	4604      	mov	r4, r0
   1b1ea:	b120      	cbz	r0, 1b1f6 <cc_connection_handler+0x4a>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   1b1ec:	4669      	mov	r1, sp
   1b1ee:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   1b1f0:	f7ff fca6 	bl	1ab40 <nfsm_set_current_state_and_notify>
	return 0;
   1b1f4:	e7ef      	b.n	1b1d6 <cc_connection_handler+0x2a>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   1b1f6:	4601      	mov	r1, r0
   1b1f8:	2005      	movs	r0, #5
   1b1fa:	e7f9      	b.n	1b1f0 <cc_connection_handler+0x44>
   1b1fc:	0002c9d0 	.word	0x0002c9d0

0001b200 <cc_rx_data_handler>:
{
   1b200:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool config_found = false;
   1b202:	2700      	movs	r7, #0
{
   1b204:	b097      	sub	sp, #92	; 0x5c
   1b206:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   1b208:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   1b20a:	f88d 700b 	strb.w	r7, [sp, #11]
	const enum nfsm_state current_state = nfsm_get_current_state();
   1b20e:	f7ff fc91 	bl	1ab34 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   1b212:	2214      	movs	r2, #20
   1b214:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   1b216:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   1b218:	a80b      	add	r0, sp, #44	; 0x2c
   1b21a:	f00f fe35 	bl	2ae88 <memset>
   1b21e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1b222:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   1b226:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   1b228:	2218      	movs	r2, #24
   1b22a:	4639      	mov	r1, r7
   1b22c:	a810      	add	r0, sp, #64	; 0x40
	struct nct_cc_data msg = {
   1b22e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	struct nrf_cloud_evt cloud_evt = {
   1b232:	f00f fe29 	bl	2ae88 <memset>
   1b236:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   1b238:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   1b23a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (evt->param.cc == NULL) {
   1b23e:	b190      	cbz	r0, 1b266 <cc_rx_data_handler+0x66>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   1b240:	f10d 020b 	add.w	r2, sp, #11
   1b244:	a90b      	add	r1, sp, #44	; 0x2c
   1b246:	f7ff f945 	bl	1a4d4 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   1b24a:	b328      	cbz	r0, 1b298 <cc_rx_data_handler+0x98>
   1b24c:	1cc3      	adds	r3, r0, #3
   1b24e:	d023      	beq.n	1b298 <cc_rx_data_handler+0x98>
   1b250:	4a60      	ldr	r2, [pc, #384]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
   1b252:	4b61      	ldr	r3, [pc, #388]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   1b254:	4961      	ldr	r1, [pc, #388]	; (1b3dc <cc_rx_data_handler+0x1dc>)
   1b256:	1a9b      	subs	r3, r3, r2
   1b258:	08db      	lsrs	r3, r3, #3
   1b25a:	019b      	lsls	r3, r3, #6
   1b25c:	4602      	mov	r2, r0
   1b25e:	f043 0001 	orr.w	r0, r3, #1
   1b262:	f00b f964 	bl	2652e <log_string_sync>
	err = nrf_cloud_decode_requested_state(payload, &new_state);
   1b266:	4620      	mov	r0, r4
   1b268:	f10d 010a 	add.w	r1, sp, #10
   1b26c:	f7ff f8a2 	bl	1a3b4 <nrf_cloud_decode_requested_state>
	if (err) {
   1b270:	4604      	mov	r4, r0
   1b272:	2800      	cmp	r0, #0
   1b274:	d03a      	beq.n	1b2ec <cc_rx_data_handler+0xec>
		if (!config_found) {
   1b276:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	f040 80a8 	bne.w	1b3d0 <cc_rx_data_handler+0x1d0>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   1b280:	4622      	mov	r2, r4
   1b282:	4855      	ldr	r0, [pc, #340]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
   1b284:	4b53      	ldr	r3, [pc, #332]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
   1b286:	4956      	ldr	r1, [pc, #344]	; (1b3e0 <cc_rx_data_handler+0x1e0>)
   1b288:	1ac0      	subs	r0, r0, r3
   1b28a:	08c0      	lsrs	r0, r0, #3
   1b28c:	0180      	lsls	r0, r0, #6
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   1b28e:	f040 0001 	orr.w	r0, r0, #1
   1b292:	f00b f94c 	bl	2652e <log_string_sync>
		return err;
   1b296:	e047      	b.n	1b328 <cc_rx_data_handler+0x128>
	if (*config_found == false) {
   1b298:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1b29c:	2b00      	cmp	r3, #0
   1b29e:	d0e2      	beq.n	1b266 <cc_rx_data_handler+0x66>
	if (msg.data.ptr) {
   1b2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b2a2:	b193      	cbz	r3, 1b2ca <cc_rx_data_handler+0xca>
		err = nct_cc_send(&msg);
   1b2a4:	a80b      	add	r0, sp, #44	; 0x2c
   1b2a6:	f000 fde1 	bl	1be6c <nct_cc_send>
   1b2aa:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   1b2ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b2ae:	f00f fd88 	bl	2adc2 <k_free>
		if (err) {
   1b2b2:	b157      	cbz	r7, 1b2ca <cc_rx_data_handler+0xca>
   1b2b4:	4847      	ldr	r0, [pc, #284]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
   1b2b6:	4b48      	ldr	r3, [pc, #288]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
			LOG_ERR("nct_cc_send failed %d", err);
   1b2b8:	463a      	mov	r2, r7
   1b2ba:	1a1b      	subs	r3, r3, r0
   1b2bc:	08db      	lsrs	r3, r3, #3
   1b2be:	019b      	lsls	r3, r3, #6
   1b2c0:	4948      	ldr	r1, [pc, #288]	; (1b3e4 <cc_rx_data_handler+0x1e4>)
   1b2c2:	f043 0001 	orr.w	r0, r3, #1
   1b2c6:	f00b f932 	bl	2652e <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   1b2ca:	6873      	ldr	r3, [r6, #4]
   1b2cc:	aa12      	add	r2, sp, #72	; 0x48
   1b2ce:	e893 0003 	ldmia.w	r3, {r0, r1}
   1b2d2:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   1b2d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1b2da:	ab16      	add	r3, sp, #88	; 0x58
   1b2dc:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   1b2e0:	f7ff fc28 	bl	1ab34 <nfsm_get_current_state>
   1b2e4:	a910      	add	r1, sp, #64	; 0x40
   1b2e6:	f7ff fc2b 	bl	1ab40 <nfsm_set_current_state_and_notify>
	return err;
   1b2ea:	e7bc      	b.n	1b266 <cc_rx_data_handler+0x66>
	switch (current_state) {
   1b2ec:	2d07      	cmp	r5, #7
   1b2ee:	d817      	bhi.n	1b320 <cc_rx_data_handler+0x120>
   1b2f0:	2d03      	cmp	r5, #3
   1b2f2:	d919      	bls.n	1b328 <cc_rx_data_handler+0x128>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   1b2f4:	f89d 500a 	ldrb.w	r5, [sp, #10]
   1b2f8:	2d07      	cmp	r5, #7
   1b2fa:	d15c      	bne.n	1b3b6 <cc_rx_data_handler+0x1b6>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &bulk, &endpoint);
   1b2fc:	af09      	add	r7, sp, #36	; 0x24
   1b2fe:	6870      	ldr	r0, [r6, #4]
   1b300:	9700      	str	r7, [sp, #0]
   1b302:	ab07      	add	r3, sp, #28
   1b304:	aa03      	add	r2, sp, #12
   1b306:	a905      	add	r1, sp, #20
   1b308:	f7ff fa0c 	bl	1a724 <nrf_cloud_decode_data_endpoint>
	if (err) {
   1b30c:	4604      	mov	r4, r0
   1b30e:	b170      	cbz	r0, 1b32e <cc_rx_data_handler+0x12e>
   1b310:	4831      	ldr	r0, [pc, #196]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
   1b312:	4b30      	ldr	r3, [pc, #192]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   1b314:	4622      	mov	r2, r4
   1b316:	1ac0      	subs	r0, r0, r3
   1b318:	08c0      	lsrs	r0, r0, #3
   1b31a:	4933      	ldr	r1, [pc, #204]	; (1b3e8 <cc_rx_data_handler+0x1e8>)
   1b31c:	0180      	lsls	r0, r0, #6
   1b31e:	e7b6      	b.n	1b28e <cc_rx_data_handler+0x8e>
	switch (current_state) {
   1b320:	3d08      	subs	r5, #8
   1b322:	b2ed      	uxtb	r5, r5
   1b324:	2d01      	cmp	r5, #1
   1b326:	d94c      	bls.n	1b3c2 <cc_rx_data_handler+0x1c2>
}
   1b328:	4620      	mov	r0, r4
   1b32a:	b017      	add	sp, #92	; 0x5c
   1b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &bulk, &endpoint);
   1b32e:	463b      	mov	r3, r7
   1b330:	aa07      	add	r2, sp, #28
   1b332:	a903      	add	r1, sp, #12
   1b334:	a805      	add	r0, sp, #20
   1b336:	f000 fdfb 	bl	1bf30 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   1b33a:	4621      	mov	r1, r4
   1b33c:	2214      	movs	r2, #20
   1b33e:	a80b      	add	r0, sp, #44	; 0x2c
   1b340:	f00f fda2 	bl	2ae88 <memset>
   1b344:	f240 132d 	movw	r3, #301	; 0x12d
   1b348:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   1b34c:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   1b34e:	4628      	mov	r0, r5
   1b350:	a90b      	add	r1, sp, #44	; 0x2c
	struct nct_cc_data msg = {
   1b352:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   1b356:	f7ff f939 	bl	1a5cc <nrf_cloud_encode_state>
	if (err) {
   1b35a:	4604      	mov	r4, r0
   1b35c:	b138      	cbz	r0, 1b36e <cc_rx_data_handler+0x16e>
   1b35e:	481e      	ldr	r0, [pc, #120]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
   1b360:	4b1c      	ldr	r3, [pc, #112]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   1b362:	4622      	mov	r2, r4
   1b364:	1ac0      	subs	r0, r0, r3
   1b366:	08c0      	lsrs	r0, r0, #3
   1b368:	4920      	ldr	r1, [pc, #128]	; (1b3ec <cc_rx_data_handler+0x1ec>)
   1b36a:	0180      	lsls	r0, r0, #6
   1b36c:	e78f      	b.n	1b28e <cc_rx_data_handler+0x8e>
	err = nct_cc_send(&msg);
   1b36e:	a80b      	add	r0, sp, #44	; 0x2c
   1b370:	f000 fd7c 	bl	1be6c <nct_cc_send>
	if (err) {
   1b374:	4604      	mov	r4, r0
   1b376:	b170      	cbz	r0, 1b396 <cc_rx_data_handler+0x196>
   1b378:	4b16      	ldr	r3, [pc, #88]	; (1b3d4 <cc_rx_data_handler+0x1d4>)
   1b37a:	4817      	ldr	r0, [pc, #92]	; (1b3d8 <cc_rx_data_handler+0x1d8>)
		LOG_ERR("nct_cc_send failed %d", err);
   1b37c:	4622      	mov	r2, r4
   1b37e:	1ac0      	subs	r0, r0, r3
   1b380:	08c0      	lsrs	r0, r0, #3
   1b382:	0180      	lsls	r0, r0, #6
   1b384:	4917      	ldr	r1, [pc, #92]	; (1b3e4 <cc_rx_data_handler+0x1e4>)
   1b386:	f040 0001 	orr.w	r0, r0, #1
   1b38a:	f00b f8d0 	bl	2652e <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   1b38e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b390:	f00f fd17 	bl	2adc2 <k_free>
		return err;
   1b394:	e7c8      	b.n	1b328 <cc_rx_data_handler+0x128>
	nrf_cloud_free((void *)msg.data.ptr);
   1b396:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b398:	f00f fd13 	bl	2adc2 <k_free>
	struct nrf_cloud_evt evt = {
   1b39c:	4621      	mov	r1, r4
   1b39e:	2218      	movs	r2, #24
   1b3a0:	a810      	add	r0, sp, #64	; 0x40
   1b3a2:	f00f fd71 	bl	2ae88 <memset>
   1b3a6:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   1b3a8:	4628      	mov	r0, r5
   1b3aa:	a910      	add	r1, sp, #64	; 0x40
	struct nrf_cloud_evt evt = {
   1b3ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   1b3b0:	f7ff fbc6 	bl	1ab40 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   1b3b4:	e7b8      	b.n	1b328 <cc_rx_data_handler+0x128>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   1b3b6:	2d06      	cmp	r5, #6
   1b3b8:	d1b6      	bne.n	1b328 <cc_rx_data_handler+0x128>
			return state_ua_pin_wait();
   1b3ba:	f7ff fe73 	bl	1b0a4 <state_ua_pin_wait>
   1b3be:	4604      	mov	r4, r0
   1b3c0:	e7b2      	b.n	1b328 <cc_rx_data_handler+0x128>
		if (new_state == STATE_UA_PIN_WAIT) {
   1b3c2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1b3c6:	2b06      	cmp	r3, #6
   1b3c8:	d1ae      	bne.n	1b328 <cc_rx_data_handler+0x128>
			(void)nct_dc_disconnect();
   1b3ca:	f000 fe55 	bl	1c078 <nct_dc_disconnect>
   1b3ce:	e7f4      	b.n	1b3ba <cc_rx_data_handler+0x1ba>
		return 0;
   1b3d0:	2400      	movs	r4, #0
   1b3d2:	e7a9      	b.n	1b328 <cc_rx_data_handler+0x128>
   1b3d4:	0002c344 	.word	0x0002c344
   1b3d8:	0002c3e4 	.word	0x0002c3e4
   1b3dc:	0002ee79 	.word	0x0002ee79
   1b3e0:	0002eea4 	.word	0x0002eea4
   1b3e4:	0002ee2e 	.word	0x0002ee2e
   1b3e8:	0002eecf 	.word	0x0002eecf
   1b3ec:	0002ee0d 	.word	0x0002ee0d

0001b3f0 <nfsm_init>:
	persistent_session = false;
   1b3f0:	2000      	movs	r0, #0
   1b3f2:	4b01      	ldr	r3, [pc, #4]	; (1b3f8 <nfsm_init+0x8>)
   1b3f4:	7018      	strb	r0, [r3, #0]
}
   1b3f6:	4770      	bx	lr
   1b3f8:	2000f129 	.word	0x2000f129

0001b3fc <nfsm_handle_incoming_event>:
{
   1b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3fe:	460e      	mov	r6, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   1b400:	4607      	mov	r7, r0
   1b402:	b1d8      	cbz	r0, 1b43c <nfsm_handle_incoming_event+0x40>
   1b404:	7a03      	ldrb	r3, [r0, #8]
   1b406:	2b09      	cmp	r3, #9
   1b408:	d818      	bhi.n	1b43c <nfsm_handle_incoming_event+0x40>
   1b40a:	2909      	cmp	r1, #9
   1b40c:	d816      	bhi.n	1b43c <nfsm_handle_incoming_event+0x40>
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   1b40e:	4a0d      	ldr	r2, [pc, #52]	; (1b444 <nfsm_handle_incoming_event+0x48>)
   1b410:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1b414:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   1b418:	b174      	cbz	r4, 1b438 <nfsm_handle_incoming_event+0x3c>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   1b41a:	47a0      	blx	r4
		if (err) {
   1b41c:	4604      	mov	r4, r0
   1b41e:	b158      	cbz	r0, 1b438 <nfsm_handle_incoming_event+0x3c>
   1b420:	4809      	ldr	r0, [pc, #36]	; (1b448 <nfsm_handle_incoming_event+0x4c>)
   1b422:	4d0a      	ldr	r5, [pc, #40]	; (1b44c <nfsm_handle_incoming_event+0x50>)
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   1b424:	4632      	mov	r2, r6
   1b426:	1a2d      	subs	r5, r5, r0
   1b428:	08ed      	lsrs	r5, r5, #3
   1b42a:	01ad      	lsls	r5, r5, #6
   1b42c:	7a3b      	ldrb	r3, [r7, #8]
   1b42e:	4908      	ldr	r1, [pc, #32]	; (1b450 <nfsm_handle_incoming_event+0x54>)
   1b430:	f045 0001 	orr.w	r0, r5, #1
   1b434:	f00b f87b 	bl	2652e <log_string_sync>
}
   1b438:	4620      	mov	r0, r4
   1b43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1b43c:	f06f 0415 	mvn.w	r4, #21
   1b440:	e7fa      	b.n	1b438 <nfsm_handle_incoming_event+0x3c>
   1b442:	bf00      	nop
   1b444:	0002ca34 	.word	0x0002ca34
   1b448:	0002c344 	.word	0x0002c344
   1b44c:	0002c3e4 	.word	0x0002c3e4
   1b450:	0002eef8 	.word	0x0002eef8

0001b454 <cc_tx_ack_handler>:
{
   1b454:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   1b456:	8883      	ldrh	r3, [r0, #4]
{
   1b458:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   1b45a:	2bc8      	cmp	r3, #200	; 0xc8
{
   1b45c:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   1b45e:	d105      	bne.n	1b46c <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   1b460:	2100      	movs	r1, #0
   1b462:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1b464:	f7ff fb6c 	bl	1ab40 <nfsm_set_current_state_and_notify>
	return 0;
   1b468:	2400      	movs	r4, #0
   1b46a:	e00e      	b.n	1b48a <cc_tx_ack_handler+0x36>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   1b46c:	f240 122d 	movw	r2, #301	; 0x12d
   1b470:	4293      	cmp	r3, r2
   1b472:	d119      	bne.n	1b4a8 <cc_tx_ack_handler+0x54>
		if (!persistent_session) {
   1b474:	4b16      	ldr	r3, [pc, #88]	; (1b4d0 <cc_tx_ack_handler+0x7c>)
   1b476:	781b      	ldrb	r3, [r3, #0]
   1b478:	b953      	cbnz	r3, 1b490 <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   1b47a:	f000 fdb3 	bl	1bfe4 <nct_dc_connect>
			if (err) {
   1b47e:	4604      	mov	r4, r0
   1b480:	b918      	cbnz	r0, 1b48a <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   1b482:	4601      	mov	r1, r0
   1b484:	2008      	movs	r0, #8
   1b486:	f7ff fb5b 	bl	1ab40 <nfsm_set_current_state_and_notify>
}
   1b48a:	4620      	mov	r0, r4
   1b48c:	b006      	add	sp, #24
   1b48e:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   1b490:	2400      	movs	r4, #0
   1b492:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   1b494:	2108      	movs	r1, #8
   1b496:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   1b498:	9402      	str	r4, [sp, #8]
   1b49a:	e9cd 4400 	strd	r4, r4, [sp]
   1b49e:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   1b4a2:	f7ff ffab 	bl	1b3fc <nfsm_handle_incoming_event>
   1b4a6:	e7f0      	b.n	1b48a <cc_tx_ack_handler+0x36>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   1b4a8:	f242 720f 	movw	r2, #9999	; 0x270f
   1b4ac:	4293      	cmp	r3, r2
   1b4ae:	d9db      	bls.n	1b468 <cc_tx_ack_handler+0x14>
		struct nrf_cloud_evt evt = {
   1b4b0:	2100      	movs	r1, #0
   1b4b2:	2218      	movs	r2, #24
   1b4b4:	4668      	mov	r0, sp
   1b4b6:	f00f fce7 	bl	2ae88 <memset>
   1b4ba:	2307      	movs	r3, #7
   1b4bc:	f88d 3000 	strb.w	r3, [sp]
   1b4c0:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   1b4c2:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   1b4c4:	9302      	str	r3, [sp, #8]
   1b4c6:	9403      	str	r4, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   1b4c8:	f7ff fb34 	bl	1ab34 <nfsm_get_current_state>
   1b4cc:	4669      	mov	r1, sp
   1b4ce:	e7c9      	b.n	1b464 <cc_tx_ack_handler+0x10>
   1b4d0:	2000f129 	.word	0x2000f129

0001b4d4 <connection_handler>:
{
   1b4d4:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   1b4d6:	6804      	ldr	r4, [r0, #0]
{
   1b4d8:	4605      	mov	r5, r0
   1b4da:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   1b4dc:	b164      	cbz	r4, 1b4f8 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   1b4de:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   1b4e0:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   1b4e2:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   1b4e6:	f7ff fb25 	bl	1ab34 <nfsm_get_current_state>
   1b4ea:	a904      	add	r1, sp, #16
   1b4ec:	f7ff fb28 	bl	1ab40 <nfsm_set_current_state_and_notify>
		return 0;
   1b4f0:	2400      	movs	r4, #0
}
   1b4f2:	4620      	mov	r0, r4
   1b4f4:	b00a      	add	sp, #40	; 0x28
   1b4f6:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   1b4f8:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   1b4fa:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   1b4fc:	a904      	add	r1, sp, #16
   1b4fe:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   1b500:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   1b502:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   1b506:	f7ff fb1b 	bl	1ab40 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   1b50a:	792b      	ldrb	r3, [r5, #4]
   1b50c:	2b00      	cmp	r3, #0
   1b50e:	bf14      	ite	ne
   1b510:	4632      	movne	r2, r6
   1b512:	2200      	moveq	r2, #0
   1b514:	4b0b      	ldr	r3, [pc, #44]	; (1b544 <connection_handler+0x70>)
   1b516:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   1b518:	d109      	bne.n	1b52e <connection_handler+0x5a>
		err = nct_cc_connect();
   1b51a:	f000 fc95 	bl	1be48 <nct_cc_connect>
		if (err) {
   1b51e:	4604      	mov	r4, r0
   1b520:	2800      	cmp	r0, #0
   1b522:	d1e6      	bne.n	1b4f2 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   1b524:	4601      	mov	r1, r0
   1b526:	2003      	movs	r0, #3
   1b528:	f7ff fb0a 	bl	1ab40 <nfsm_set_current_state_and_notify>
   1b52c:	e7e1      	b.n	1b4f2 <connection_handler+0x1e>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   1b52e:	2103      	movs	r1, #3
   1b530:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   1b532:	9403      	str	r4, [sp, #12]
   1b534:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b538:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   1b53c:	f7ff ff5e 	bl	1b3fc <nfsm_handle_incoming_event>
   1b540:	e7d7      	b.n	1b4f2 <connection_handler+0x1e>
   1b542:	bf00      	nop
   1b544:	2000f129 	.word	0x2000f129

0001b548 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   1b548:	2200      	movs	r2, #0
   1b54a:	4b05      	ldr	r3, [pc, #20]	; (1b560 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   1b54c:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   1b550:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   1b554:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   1b558:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4
}
   1b55c:	4770      	bx	lr
   1b55e:	bf00      	nop
   1b560:	2000e190 	.word	0x2000e190

0001b564 <get_next_message_id>:

/* Get the next unused message id. */
static uint16_t get_next_message_id(void)
{
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   1b564:	4b08      	ldr	r3, [pc, #32]	; (1b588 <get_next_message_id+0x24>)
   1b566:	f8b3 00dc 	ldrh.w	r0, [r3, #220]	; 0xdc
   1b56a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b56e:	d308      	bcc.n	1b582 <get_next_message_id+0x1e>
   1b570:	f242 720f 	movw	r2, #9999	; 0x270f
   1b574:	4290      	cmp	r0, r2
   1b576:	d004      	beq.n	1b582 <get_next_message_id+0x1e>
	    nct.message_id == NCT_MSG_ID_INCREMENT_END) {
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
	} else {
		++nct.message_id;
   1b578:	3001      	adds	r0, #1
   1b57a:	b280      	uxth	r0, r0
   1b57c:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
	}

	return nct.message_id;
}
   1b580:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   1b582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b586:	e7f9      	b.n	1b57c <get_next_message_id+0x18>
   1b588:	2000e190 	.word	0x2000e190

0001b58c <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   1b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b58e:	460d      	mov	r5, r1
   1b590:	4616      	mov	r6, r2
   1b592:	461f      	mov	r7, r3
	if (!key) {
   1b594:	4604      	mov	r4, r0
   1b596:	b1e8      	cbz	r0, 1b5d4 <nct_settings_set+0x48>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   1b598:	4810      	ldr	r0, [pc, #64]	; (1b5dc <nct_settings_set+0x50>)
   1b59a:	f7f5 fd0f 	bl	10fbc <strlen>
   1b59e:	490f      	ldr	r1, [pc, #60]	; (1b5dc <nct_settings_set+0x50>)
   1b5a0:	4602      	mov	r2, r0
   1b5a2:	4620      	mov	r0, r4
   1b5a4:	f00f fd9f 	bl	2b0e6 <strncmp>
   1b5a8:	4604      	mov	r4, r0
   1b5aa:	b120      	cbz	r0, 1b5b6 <nct_settings_set+0x2a>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   1b5ac:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   1b5b0:	4620      	mov	r0, r4
   1b5b2:	b003      	add	sp, #12
   1b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   1b5b6:	2d04      	cmp	r5, #4
   1b5b8:	d1f8      	bne.n	1b5ac <nct_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   1b5ba:	462a      	mov	r2, r5
   1b5bc:	4638      	mov	r0, r7
   1b5be:	a901      	add	r1, sp, #4
   1b5c0:	47b0      	blx	r6
   1b5c2:	2804      	cmp	r0, #4
   1b5c4:	d1f2      	bne.n	1b5ac <nct_settings_set+0x20>
			persistent_session = (bool)read_val;
   1b5c6:	9b01      	ldr	r3, [sp, #4]
   1b5c8:	4a05      	ldr	r2, [pc, #20]	; (1b5e0 <nct_settings_set+0x54>)
   1b5ca:	3b00      	subs	r3, #0
   1b5cc:	bf18      	it	ne
   1b5ce:	2301      	movne	r3, #1
   1b5d0:	7013      	strb	r3, [r2, #0]
			return 0;
   1b5d2:	e7ed      	b.n	1b5b0 <nct_settings_set+0x24>
		return -EINVAL;
   1b5d4:	f06f 0415 	mvn.w	r4, #21
   1b5d8:	e7ea      	b.n	1b5b0 <nct_settings_set+0x24>
   1b5da:	bf00      	nop
   1b5dc:	0002efbd 	.word	0x0002efbd
   1b5e0:	2000f12b 	.word	0x2000f12b

0001b5e4 <allocate_and_format_topic>:
{
   1b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   1b5e6:	4f13      	ldr	r7, [pc, #76]	; (1b634 <allocate_and_format_topic+0x50>)
{
   1b5e8:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   1b5ea:	6838      	ldr	r0, [r7, #0]
{
   1b5ec:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   1b5ee:	f7f5 fce5 	bl	10fbc <strlen>
   1b5f2:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   1b5f4:	4630      	mov	r0, r6
   1b5f6:	f7f5 fce1 	bl	10fbc <strlen>
   1b5fa:	4404      	add	r4, r0
   1b5fc:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   1b5fe:	2101      	movs	r1, #1
   1b600:	4620      	mov	r0, r4
   1b602:	f00f fbe9 	bl	2add8 <k_calloc>
   1b606:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   1b608:	b170      	cbz	r0, 1b628 <allocate_and_format_topic+0x44>
	ret = snprintk(*topic_buf, topic_sz,
   1b60a:	4632      	mov	r2, r6
   1b60c:	4621      	mov	r1, r4
   1b60e:	683b      	ldr	r3, [r7, #0]
   1b610:	f00a fc8e 	bl	25f30 <snprintk>
	if (ret <= 0 || ret >= topic_sz) {
   1b614:	2800      	cmp	r0, #0
   1b616:	dd01      	ble.n	1b61c <allocate_and_format_topic+0x38>
   1b618:	42a0      	cmp	r0, r4
   1b61a:	d308      	bcc.n	1b62e <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   1b61c:	6828      	ldr	r0, [r5, #0]
   1b61e:	f00f fbd0 	bl	2adc2 <k_free>
		return -EIO;
   1b622:	f06f 0004 	mvn.w	r0, #4
}
   1b626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   1b628:	f06f 000b 	mvn.w	r0, #11
   1b62c:	e7fb      	b.n	1b626 <allocate_and_format_topic+0x42>
	return 0;
   1b62e:	2000      	movs	r0, #0
   1b630:	e7f9      	b.n	1b626 <allocate_and_format_topic+0x42>
   1b632:	bf00      	nop
   1b634:	2000e18c 	.word	0x2000e18c

0001b638 <nct_reset_topics>:
{
   1b638:	b510      	push	{r4, lr}
	if (accepted_topic) {
   1b63a:	4c17      	ldr	r4, [pc, #92]	; (1b698 <nct_reset_topics+0x60>)
   1b63c:	6820      	ldr	r0, [r4, #0]
   1b63e:	b118      	cbz	r0, 1b648 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   1b640:	f00f fbbf 	bl	2adc2 <k_free>
		accepted_topic = NULL;
   1b644:	2300      	movs	r3, #0
   1b646:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   1b648:	4c14      	ldr	r4, [pc, #80]	; (1b69c <nct_reset_topics+0x64>)
   1b64a:	6820      	ldr	r0, [r4, #0]
   1b64c:	b118      	cbz	r0, 1b656 <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   1b64e:	f00f fbb8 	bl	2adc2 <k_free>
		rejected_topic = NULL;
   1b652:	2300      	movs	r3, #0
   1b654:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   1b656:	4c12      	ldr	r4, [pc, #72]	; (1b6a0 <nct_reset_topics+0x68>)
   1b658:	6820      	ldr	r0, [r4, #0]
   1b65a:	b118      	cbz	r0, 1b664 <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   1b65c:	f00f fbb1 	bl	2adc2 <k_free>
		update_delta_topic = NULL;
   1b660:	2300      	movs	r3, #0
   1b662:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   1b664:	4c0f      	ldr	r4, [pc, #60]	; (1b6a4 <nct_reset_topics+0x6c>)
   1b666:	6820      	ldr	r0, [r4, #0]
   1b668:	b118      	cbz	r0, 1b672 <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   1b66a:	f00f fbaa 	bl	2adc2 <k_free>
		update_topic = NULL;
   1b66e:	2300      	movs	r3, #0
   1b670:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   1b672:	4c0d      	ldr	r4, [pc, #52]	; (1b6a8 <nct_reset_topics+0x70>)
   1b674:	6820      	ldr	r0, [r4, #0]
   1b676:	b118      	cbz	r0, 1b680 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   1b678:	f00f fba3 	bl	2adc2 <k_free>
		shadow_get_topic = NULL;
   1b67c:	2300      	movs	r3, #0
   1b67e:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   1b680:	2224      	movs	r2, #36	; 0x24
   1b682:	2100      	movs	r1, #0
   1b684:	4809      	ldr	r0, [pc, #36]	; (1b6ac <nct_reset_topics+0x74>)
   1b686:	f00f fbff 	bl	2ae88 <memset>
}
   1b68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   1b68e:	2218      	movs	r2, #24
   1b690:	2100      	movs	r1, #0
   1b692:	4807      	ldr	r0, [pc, #28]	; (1b6b0 <nct_reset_topics+0x78>)
   1b694:	f00f bbf8 	b.w	2ae88 <memset>
   1b698:	2000e188 	.word	0x2000e188
   1b69c:	2000ecac 	.word	0x2000ecac
   1b6a0:	2000ecb4 	.word	0x2000ecb4
   1b6a4:	2000ecb8 	.word	0x2000ecb8
   1b6a8:	2000ecb0 	.word	0x2000ecb0
   1b6ac:	2000ec70 	.word	0x2000ec70
   1b6b0:	2000ec94 	.word	0x2000ec94

0001b6b4 <dc_endpoint_free>:
{
   1b6b4:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   1b6b6:	4c0d      	ldr	r4, [pc, #52]	; (1b6ec <dc_endpoint_free+0x38>)
   1b6b8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1b6bc:	b108      	cbz	r0, 1b6c2 <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   1b6be:	f00f fb80 	bl	2adc2 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   1b6c2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b6c6:	b108      	cbz	r0, 1b6cc <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   1b6c8:	f00f fb7b 	bl	2adc2 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   1b6cc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1b6d0:	b108      	cbz	r0, 1b6d6 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   1b6d2:	f00f fb76 	bl	2adc2 <k_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   1b6d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1b6da:	b108      	cbz	r0, 1b6e0 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   1b6dc:	f00f fb71 	bl	2adc2 <k_free>
	dc_endpoint_reset();
   1b6e0:	f7ff ff32 	bl	1b548 <dc_endpoint_reset>
}
   1b6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   1b6e8:	f001 b8f6 	b.w	1c8d8 <nrf_cloud_fota_endpoint_clear>
   1b6ec:	2000e190 	.word	0x2000e190

0001b6f0 <dc_send>:
{
   1b6f0:	b530      	push	{r4, r5, lr}
   1b6f2:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   1b6f4:	4604      	mov	r4, r0
{
   1b6f6:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   1b6f8:	b300      	cbz	r0, 1b73c <dc_send+0x4c>
	struct mqtt_publish_param publish = {
   1b6fa:	2210      	movs	r2, #16
   1b6fc:	2100      	movs	r1, #0
   1b6fe:	a802      	add	r0, sp, #8
   1b700:	f00f fbc2 	bl	2ae88 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   1b704:	4b0f      	ldr	r3, [pc, #60]	; (1b744 <dc_send+0x54>)
	struct mqtt_publish_param publish = {
   1b706:	f88d 5008 	strb.w	r5, [sp, #8]
   1b70a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1b70e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1b712:	9200      	str	r2, [sp, #0]
   1b714:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   1b716:	6823      	ldr	r3, [r4, #0]
   1b718:	b11b      	cbz	r3, 1b722 <dc_send+0x32>
   1b71a:	6862      	ldr	r2, [r4, #4]
   1b71c:	b10a      	cbz	r2, 1b722 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   1b71e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   1b722:	b12d      	cbz	r5, 1b730 <dc_send+0x40>
		publish.message_id = get_message_id(dc_data->message_id);
   1b724:	8a20      	ldrh	r0, [r4, #16]
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   1b726:	b908      	cbnz	r0, 1b72c <dc_send+0x3c>
	return get_next_message_id();
   1b728:	f7ff ff1c 	bl	1b564 <get_next_message_id>
		publish.message_id = get_message_id(dc_data->message_id);
   1b72c:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   1b730:	4669      	mov	r1, sp
   1b732:	4805      	ldr	r0, [pc, #20]	; (1b748 <dc_send+0x58>)
   1b734:	f00c fb58 	bl	27de8 <mqtt_publish>
}
   1b738:	b007      	add	sp, #28
   1b73a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1b73c:	f06f 0015 	mvn.w	r0, #21
   1b740:	e7fa      	b.n	1b738 <dc_send+0x48>
   1b742:	bf00      	nop
   1b744:	2000e190 	.word	0x2000e190
   1b748:	2000e1b0 	.word	0x2000e1b0

0001b74c <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   1b74c:	b530      	push	{r4, r5, lr}
	switch (evt->id) {
   1b74e:	7804      	ldrb	r4, [r0, #0]
{
   1b750:	4605      	mov	r5, r0
	switch (evt->id) {
   1b752:	2c01      	cmp	r4, #1
{
   1b754:	b089      	sub	sp, #36	; 0x24
	switch (evt->id) {
   1b756:	d00b      	beq.n	1b770 <nrf_cloud_fota_cb_handler+0x24>
   1b758:	2c02      	cmp	r4, #2
   1b75a:	d01d      	beq.n	1b798 <nrf_cloud_fota_cb_handler+0x4c>
   1b75c:	b9d4      	cbnz	r4, 1b794 <nrf_cloud_fota_cb_handler+0x48>
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
		struct nrf_cloud_evt cloud_evt = {
   1b75e:	2218      	movs	r2, #24
   1b760:	4621      	mov	r1, r4
   1b762:	a802      	add	r0, sp, #8
   1b764:	f00f fb90 	bl	2ae88 <memset>
   1b768:	2309      	movs	r3, #9
		nct_apply_update(&cloud_evt);
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERROR: {
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
		struct nrf_cloud_evt cloud_evt = {
   1b76a:	f88d 3008 	strb.w	r3, [sp, #8]
   1b76e:	e00e      	b.n	1b78e <nrf_cloud_fota_cb_handler+0x42>
		struct nrf_cloud_evt cloud_evt = {
   1b770:	2218      	movs	r2, #24
   1b772:	2100      	movs	r1, #0
   1b774:	a802      	add	r0, sp, #8
   1b776:	f00f fb87 	bl	2ae88 <memset>
   1b77a:	230a      	movs	r3, #10
   1b77c:	f88d 3008 	strb.w	r3, [sp, #8]
			fota_type = evt->type;
   1b780:	78ab      	ldrb	r3, [r5, #2]
   1b782:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   1b786:	f10d 0307 	add.w	r3, sp, #7
			cloud_evt.data.len = sizeof(fota_type);
   1b78a:	e9cd 4304 	strd	r4, r3, [sp, #16]
			.type = NRF_CLOUD_EVT_FOTA_ERROR
		};

		nct_apply_update(&cloud_evt);
   1b78e:	a802      	add	r0, sp, #8
   1b790:	f7ff fc82 	bl	1b098 <nct_apply_update>
	}
	default: {
		break;
	}
	}
}
   1b794:	b009      	add	sp, #36	; 0x24
   1b796:	bd30      	pop	{r4, r5, pc}
   1b798:	4b08      	ldr	r3, [pc, #32]	; (1b7bc <nrf_cloud_fota_cb_handler+0x70>)
   1b79a:	4809      	ldr	r0, [pc, #36]	; (1b7c0 <nrf_cloud_fota_cb_handler+0x74>)
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   1b79c:	4909      	ldr	r1, [pc, #36]	; (1b7c4 <nrf_cloud_fota_cb_handler+0x78>)
   1b79e:	1ac0      	subs	r0, r0, r3
   1b7a0:	08c0      	lsrs	r0, r0, #3
   1b7a2:	0180      	lsls	r0, r0, #6
   1b7a4:	f040 0001 	orr.w	r0, r0, #1
   1b7a8:	f00a fec1 	bl	2652e <log_string_sync>
		struct nrf_cloud_evt cloud_evt = {
   1b7ac:	2218      	movs	r2, #24
   1b7ae:	2100      	movs	r1, #0
   1b7b0:	a802      	add	r0, sp, #8
   1b7b2:	f00f fb69 	bl	2ae88 <memset>
   1b7b6:	230b      	movs	r3, #11
   1b7b8:	e7d7      	b.n	1b76a <nrf_cloud_fota_cb_handler+0x1e>
   1b7ba:	bf00      	nop
   1b7bc:	0002c344 	.word	0x0002c344
   1b7c0:	0002c3ec 	.word	0x0002c3ec
   1b7c4:	0002ef2a 	.word	0x0002ef2a

0001b7c8 <nct_client_id_get>:
{
   1b7c8:	b570      	push	{r4, r5, r6, lr}
	if (!client_id_buf) {
   1b7ca:	4e0d      	ldr	r6, [pc, #52]	; (1b800 <nct_client_id_get+0x38>)
{
   1b7cc:	4605      	mov	r5, r0
	if (!client_id_buf) {
   1b7ce:	6830      	ldr	r0, [r6, #0]
{
   1b7d0:	460c      	mov	r4, r1
	if (!client_id_buf) {
   1b7d2:	b160      	cbz	r0, 1b7ee <nct_client_id_get+0x26>
	} else if (!id || !id_len) {
   1b7d4:	b175      	cbz	r5, 1b7f4 <nct_client_id_get+0x2c>
   1b7d6:	b169      	cbz	r1, 1b7f4 <nct_client_id_get+0x2c>
	size_t len = strlen(client_id_buf);
   1b7d8:	f7f5 fbf0 	bl	10fbc <strlen>
	if (id_len <= len) {
   1b7dc:	4284      	cmp	r4, r0
   1b7de:	d90c      	bls.n	1b7fa <nct_client_id_get+0x32>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1b7e0:	4622      	mov	r2, r4
   1b7e2:	4628      	mov	r0, r5
   1b7e4:	6831      	ldr	r1, [r6, #0]
   1b7e6:	f00f fc90 	bl	2b10a <strncpy>
	return 0;
   1b7ea:	2000      	movs	r0, #0
}
   1b7ec:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1b7ee:	f06f 0012 	mvn.w	r0, #18
   1b7f2:	e7fb      	b.n	1b7ec <nct_client_id_get+0x24>
		return -EINVAL;
   1b7f4:	f06f 0015 	mvn.w	r0, #21
   1b7f8:	e7f8      	b.n	1b7ec <nct_client_id_get+0x24>
		return -EMSGSIZE;
   1b7fa:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b7fe:	e7f5      	b.n	1b7ec <nct_client_id_get+0x24>
   1b800:	2000e18c 	.word	0x2000e18c

0001b804 <nct_set_topic_prefix>:
{
   1b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   1b806:	212f      	movs	r1, #47	; 0x2f
{
   1b808:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   1b80a:	f00f fc57 	bl	2b0bc <strchr>
	if (end_of_stage) {
   1b80e:	4606      	mov	r6, r0
   1b810:	b3a8      	cbz	r0, 1b87e <nct_set_topic_prefix+0x7a>
		len = end_of_stage - topic_prefix;
   1b812:	1b07      	subs	r7, r0, r4
		if (len >= sizeof(stage)) {
   1b814:	2f07      	cmp	r7, #7
   1b816:	d90c      	bls.n	1b832 <nct_set_topic_prefix+0x2e>
   1b818:	4819      	ldr	r0, [pc, #100]	; (1b880 <nct_set_topic_prefix+0x7c>)
   1b81a:	4d1a      	ldr	r5, [pc, #104]	; (1b884 <nct_set_topic_prefix+0x80>)
			LOG_WRN("Truncating copy of stage string length "
   1b81c:	463a      	mov	r2, r7
   1b81e:	1a2d      	subs	r5, r5, r0
   1b820:	08ed      	lsrs	r5, r5, #3
   1b822:	01ad      	lsls	r5, r5, #6
   1b824:	2308      	movs	r3, #8
   1b826:	4918      	ldr	r1, [pc, #96]	; (1b888 <nct_set_topic_prefix+0x84>)
   1b828:	f045 0002 	orr.w	r0, r5, #2
   1b82c:	f00a fe7f 	bl	2652e <log_string_sync>
			len = sizeof(stage) - 1;
   1b830:	2707      	movs	r7, #7
		memcpy(stage, topic_prefix, len);
   1b832:	4d16      	ldr	r5, [pc, #88]	; (1b88c <nct_set_topic_prefix+0x88>)
   1b834:	4621      	mov	r1, r4
   1b836:	2308      	movs	r3, #8
   1b838:	463a      	mov	r2, r7
   1b83a:	4628      	mov	r0, r5
   1b83c:	f00f fb11 	bl	2ae62 <__memcpy_chk>
		stage[len] = '\0';
   1b840:	2300      	movs	r3, #0
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   1b842:	4620      	mov	r0, r4
		stage[len] = '\0';
   1b844:	55eb      	strb	r3, [r5, r7]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   1b846:	f7f5 fbb9 	bl	10fbc <strlen>
   1b84a:	1e84      	subs	r4, r0, #2
   1b84c:	1be4      	subs	r4, r4, r7
		if (len > sizeof(tenant)) {
   1b84e:	2c40      	cmp	r4, #64	; 0x40
   1b850:	d90c      	bls.n	1b86c <nct_set_topic_prefix+0x68>
   1b852:	480b      	ldr	r0, [pc, #44]	; (1b880 <nct_set_topic_prefix+0x7c>)
   1b854:	4d0b      	ldr	r5, [pc, #44]	; (1b884 <nct_set_topic_prefix+0x80>)
			LOG_WRN("Truncating copy of tenant id string length "
   1b856:	4622      	mov	r2, r4
   1b858:	1a2d      	subs	r5, r5, r0
   1b85a:	08ed      	lsrs	r5, r5, #3
   1b85c:	01ad      	lsls	r5, r5, #6
   1b85e:	2340      	movs	r3, #64	; 0x40
   1b860:	490b      	ldr	r1, [pc, #44]	; (1b890 <nct_set_topic_prefix+0x8c>)
   1b862:	f045 0002 	orr.w	r0, r5, #2
   1b866:	f00a fe62 	bl	2652e <log_string_sync>
			len = sizeof(tenant) - 1;
   1b86a:	243f      	movs	r4, #63	; 0x3f
		memcpy(tenant, end_of_stage + 1, len);
   1b86c:	4d09      	ldr	r5, [pc, #36]	; (1b894 <nct_set_topic_prefix+0x90>)
   1b86e:	2340      	movs	r3, #64	; 0x40
   1b870:	4622      	mov	r2, r4
   1b872:	4628      	mov	r0, r5
   1b874:	1c71      	adds	r1, r6, #1
   1b876:	f00f faf4 	bl	2ae62 <__memcpy_chk>
		tenant[len] = '\0';
   1b87a:	2300      	movs	r3, #0
   1b87c:	552b      	strb	r3, [r5, r4]
}
   1b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b880:	0002c344 	.word	0x0002c344
   1b884:	0002c3ec 	.word	0x0002c3ec
   1b888:	0002ef43 	.word	0x0002ef43
   1b88c:	2000f12c 	.word	0x2000f12c
   1b890:	0002ef79 	.word	0x0002ef79
   1b894:	2000f134 	.word	0x2000f134

0001b898 <nct_save_session_state>:
{
   1b898:	b507      	push	{r0, r1, r2, lr}
   1b89a:	9001      	str	r0, [sp, #4]
	persistent_session = (bool)session_valid;
   1b89c:	3800      	subs	r0, #0
   1b89e:	bf18      	it	ne
   1b8a0:	2001      	movne	r0, #1
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   1b8a2:	2204      	movs	r2, #4
	persistent_session = (bool)session_valid;
   1b8a4:	4b04      	ldr	r3, [pc, #16]	; (1b8b8 <nct_save_session_state+0x20>)
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   1b8a6:	eb0d 0102 	add.w	r1, sp, r2
	persistent_session = (bool)session_valid;
   1b8aa:	7018      	strb	r0, [r3, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   1b8ac:	4803      	ldr	r0, [pc, #12]	; (1b8bc <nct_save_session_state+0x24>)
   1b8ae:	f7f9 fb13 	bl	14ed8 <settings_save_one>
}
   1b8b2:	b003      	add	sp, #12
   1b8b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8b8:	2000f12b 	.word	0x2000f12b
   1b8bc:	0002efb3 	.word	0x0002efb3

0001b8c0 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   1b8c0:	2300      	movs	r3, #0
{
   1b8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8c4:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   1b8c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1b8ca:	69cb      	ldr	r3, [r1, #28]
{
   1b8cc:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   1b8ce:	4608      	mov	r0, r1
{
   1b8d0:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   1b8d2:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   1b8d4:	f001 f886 	bl	1c9e4 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   1b8d8:	1e02      	subs	r2, r0, #0
   1b8da:	d045      	beq.n	1b968 <nct_mqtt_evt_handler+0xa8>
		return;
	} else if (err < 0) {
   1b8dc:	da0a      	bge.n	1b8f4 <nct_mqtt_evt_handler+0x34>
   1b8de:	4b6b      	ldr	r3, [pc, #428]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
   1b8e0:	486b      	ldr	r0, [pc, #428]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   1b8e2:	496c      	ldr	r1, [pc, #432]	; (1ba94 <nct_mqtt_evt_handler+0x1d4>)
   1b8e4:	1a1b      	subs	r3, r3, r0
   1b8e6:	08db      	lsrs	r3, r3, #3
   1b8e8:	019b      	lsls	r3, r3, #6

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   1b8ea:	f043 0001 	orr.w	r0, r3, #1
   1b8ee:	f00a fe1e 	bl	2652e <log_string_sync>
   1b8f2:	e039      	b.n	1b968 <nct_mqtt_evt_handler+0xa8>
	switch (_mqtt_evt->type) {
   1b8f4:	7823      	ldrb	r3, [r4, #0]
   1b8f6:	2b08      	cmp	r3, #8
   1b8f8:	d836      	bhi.n	1b968 <nct_mqtt_evt_handler+0xa8>
   1b8fa:	e8df f003 	tbb	[pc, r3]
   1b8fe:	a105      	.short	0xa105
   1b900:	35359a16 	.word	0x35359a16
   1b904:	9035      	.short	0x9035
   1b906:	95          	.byte	0x95
   1b907:	00          	.byte	0x00
		evt.param.flag = (p->session_present_flag != 0) &&
   1b908:	4b63      	ldr	r3, [pc, #396]	; (1ba98 <nct_mqtt_evt_handler+0x1d8>)
   1b90a:	7920      	ldrb	r0, [r4, #4]
   1b90c:	781b      	ldrb	r3, [r3, #0]
   1b90e:	2800      	cmp	r0, #0
   1b910:	bf14      	ite	ne
   1b912:	461a      	movne	r2, r3
   1b914:	2200      	moveq	r2, #0
   1b916:	f88d 2008 	strb.w	r2, [sp, #8]
		if (persistent_session && (p->session_present_flag == 0)) {
   1b91a:	b113      	cbz	r3, 1b922 <nct_mqtt_evt_handler+0x62>
   1b91c:	b908      	cbnz	r0, 1b922 <nct_mqtt_evt_handler+0x62>
			nct_save_session_state(0);
   1b91e:	f7ff ffbb 	bl	1b898 <nct_save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   1b922:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   1b924:	f88d 300c 	strb.w	r3, [sp, #12]
	if (event_notify) {
   1b928:	e057      	b.n	1b9da <nct_mqtt_evt_handler+0x11a>
		int err = publish_get_payload(mqtt_client,
   1b92a:	6967      	ldr	r7, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   1b92c:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   1b930:	d91c      	bls.n	1b96c <nct_mqtt_evt_handler+0xac>
   1b932:	4b57      	ldr	r3, [pc, #348]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
   1b934:	4855      	ldr	r0, [pc, #340]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   1b936:	463a      	mov	r2, r7
   1b938:	1ac0      	subs	r0, r0, r3
   1b93a:	08c0      	lsrs	r0, r0, #3
   1b93c:	0180      	lsls	r0, r0, #6
   1b93e:	f640 0301 	movw	r3, #2049	; 0x801
   1b942:	4956      	ldr	r1, [pc, #344]	; (1ba9c <nct_mqtt_evt_handler+0x1dc>)
   1b944:	f040 0001 	orr.w	r0, r0, #1
   1b948:	f00a fdf1 	bl	2652e <log_string_sync>
		return -EMSGSIZE;
   1b94c:	f06f 0279 	mvn.w	r2, #121	; 0x79
   1b950:	484f      	ldr	r0, [pc, #316]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
   1b952:	4b4e      	ldr	r3, [pc, #312]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
			LOG_ERR("publish_get_payload: failed %d", err);
   1b954:	4952      	ldr	r1, [pc, #328]	; (1baa0 <nct_mqtt_evt_handler+0x1e0>)
   1b956:	1a1b      	subs	r3, r3, r0
   1b958:	08db      	lsrs	r3, r3, #3
   1b95a:	019b      	lsls	r3, r3, #6
   1b95c:	f043 0001 	orr.w	r0, r3, #1
   1b960:	f00a fde5 	bl	2652e <log_string_sync>
			nrf_cloud_disconnect();
   1b964:	f7ff fa0c 	bl	1ad80 <nrf_cloud_disconnect>
		}
	}
}
   1b968:	b00f      	add	sp, #60	; 0x3c
   1b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   1b96c:	4d4d      	ldr	r5, [pc, #308]	; (1baa4 <nct_mqtt_evt_handler+0x1e4>)
   1b96e:	463a      	mov	r2, r7
   1b970:	f205 21de 	addw	r1, r5, #734	; 0x2de
   1b974:	4630      	mov	r0, r6
   1b976:	f00c fba7 	bl	280c8 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   1b97a:	19ea      	adds	r2, r5, r7
   1b97c:	2500      	movs	r5, #0
   1b97e:	f882 52de 	strb.w	r5, [r2, #734]	; 0x2de
		if (err < 0) {
   1b982:	1e02      	subs	r2, r0, #0
   1b984:	dbe4      	blt.n	1b950 <nct_mqtt_evt_handler+0x90>
   1b986:	4f48      	ldr	r7, [pc, #288]	; (1baa8 <nct_mqtt_evt_handler+0x1e8>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   1b988:	68a2      	ldr	r2, [r4, #8]
   1b98a:	687b      	ldr	r3, [r7, #4]
   1b98c:	6839      	ldr	r1, [r7, #0]
   1b98e:	429a      	cmp	r2, r3
   1b990:	bf28      	it	cs
   1b992:	461a      	movcs	r2, r3
   1b994:	6860      	ldr	r0, [r4, #4]
   1b996:	f00f fba6 	bl	2b0e6 <strncmp>
		if (strings_compare(
   1b99a:	bb58      	cbnz	r0, 1b9f4 <nct_mqtt_evt_handler+0x134>
			*opcode = nct_cc_rx_opcode_map[index];
   1b99c:	4b43      	ldr	r3, [pc, #268]	; (1baac <nct_mqtt_evt_handler+0x1ec>)
   1b99e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1b9a2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			cc.message_id = p->message_id;
   1b9a6:	8b23      	ldrh	r3, [r4, #24]
   1b9a8:	f8ad 3020 	strh.w	r3, [sp, #32]
			cc.data.ptr = nct.payload_buf;
   1b9ac:	4b40      	ldr	r3, [pc, #256]	; (1bab0 <nct_mqtt_evt_handler+0x1f0>)
   1b9ae:	9305      	str	r3, [sp, #20]
			cc.data.len = p->message.payload.len;
   1b9b0:	6963      	ldr	r3, [r4, #20]
   1b9b2:	9304      	str	r3, [sp, #16]
			cc.topic.len = p->message.topic.topic.size;
   1b9b4:	68a3      	ldr	r3, [r4, #8]
   1b9b6:	9306      	str	r3, [sp, #24]
			cc.topic.ptr = p->message.topic.topic.utf8;
   1b9b8:	6863      	ldr	r3, [r4, #4]
   1b9ba:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_CC_RX_DATA;
   1b9bc:	2303      	movs	r3, #3
   1b9be:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.cc = &cc;
   1b9c2:	ab04      	add	r3, sp, #16
			evt.param.dc = &dc;
   1b9c4:	9302      	str	r3, [sp, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   1b9c6:	7b23      	ldrb	r3, [r4, #12]
   1b9c8:	2b01      	cmp	r3, #1
   1b9ca:	d106      	bne.n	1b9da <nct_mqtt_evt_handler+0x11a>
			const struct mqtt_puback_param ack = {
   1b9cc:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   1b9ce:	4669      	mov	r1, sp
   1b9d0:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   1b9d2:	f8ad 3000 	strh.w	r3, [sp]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   1b9d6:	f00c fa4c 	bl	27e72 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   1b9da:	a801      	add	r0, sp, #4
   1b9dc:	f7ff fb56 	bl	1b08c <nct_input>
		if (err != 0) {
   1b9e0:	2800      	cmp	r0, #0
   1b9e2:	d0c1      	beq.n	1b968 <nct_mqtt_evt_handler+0xa8>
   1b9e4:	4a2a      	ldr	r2, [pc, #168]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
   1b9e6:	4b29      	ldr	r3, [pc, #164]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
			LOG_ERR("nct_input: failed %d", err);
   1b9e8:	4932      	ldr	r1, [pc, #200]	; (1bab4 <nct_mqtt_evt_handler+0x1f4>)
   1b9ea:	1a9b      	subs	r3, r3, r2
   1b9ec:	08db      	lsrs	r3, r3, #3
   1b9ee:	4602      	mov	r2, r0
   1b9f0:	019b      	lsls	r3, r3, #6
   1b9f2:	e77a      	b.n	1b8ea <nct_mqtt_evt_handler+0x2a>
	for (uint32_t index = 0; index < list_size; index++) {
   1b9f4:	3501      	adds	r5, #1
   1b9f6:	2d03      	cmp	r5, #3
   1b9f8:	f107 070c 	add.w	r7, r7, #12
   1b9fc:	d1c4      	bne.n	1b988 <nct_mqtt_evt_handler+0xc8>
			dc.message_id = p->message_id;
   1b9fe:	8b23      	ldrh	r3, [r4, #24]
   1ba00:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   1ba04:	4b2a      	ldr	r3, [pc, #168]	; (1bab0 <nct_mqtt_evt_handler+0x1f0>)
   1ba06:	930a      	str	r3, [sp, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   1ba08:	6963      	ldr	r3, [r4, #20]
   1ba0a:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.len = p->message.topic.topic.size;
   1ba0c:	68a3      	ldr	r3, [r4, #8]
   1ba0e:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.topic.ptr = p->message.topic.topic.utf8;
   1ba10:	6863      	ldr	r3, [r4, #4]
   1ba12:	930c      	str	r3, [sp, #48]	; 0x30
			evt.type = NCT_EVT_DC_RX_DATA;
   1ba14:	2305      	movs	r3, #5
   1ba16:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.dc = &dc;
   1ba1a:	ab09      	add	r3, sp, #36	; 0x24
   1ba1c:	e7d2      	b.n	1b9c4 <nct_mqtt_evt_handler+0x104>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   1ba1e:	88a3      	ldrh	r3, [r4, #4]
   1ba20:	2b64      	cmp	r3, #100	; 0x64
   1ba22:	d10f      	bne.n	1ba44 <nct_mqtt_evt_handler+0x184>
			evt.type = NCT_EVT_CC_CONNECTED;
   1ba24:	2301      	movs	r3, #1
   1ba26:	e77d      	b.n	1b924 <nct_mqtt_evt_handler+0x64>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   1ba28:	88a3      	ldrh	r3, [r4, #4]
   1ba2a:	2b96      	cmp	r3, #150	; 0x96
   1ba2c:	d19c      	bne.n	1b968 <nct_mqtt_evt_handler+0xa8>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   1ba2e:	2307      	movs	r3, #7
   1ba30:	e778      	b.n	1b924 <nct_mqtt_evt_handler+0x64>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   1ba32:	2304      	movs	r3, #4
   1ba34:	f88d 300c 	strb.w	r3, [sp, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   1ba38:	88a3      	ldrh	r3, [r4, #4]
   1ba3a:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (event_notify) {
   1ba3e:	e7cc      	b.n	1b9da <nct_mqtt_evt_handler+0x11a>
		evt.type = NCT_EVT_DISCONNECTED;
   1ba40:	2309      	movs	r3, #9
   1ba42:	e76f      	b.n	1b924 <nct_mqtt_evt_handler+0x64>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   1ba44:	2b65      	cmp	r3, #101	; 0x65
   1ba46:	d18f      	bne.n	1b968 <nct_mqtt_evt_handler+0xa8>
			evt.type = NCT_EVT_DC_CONNECTED;
   1ba48:	2302      	movs	r3, #2
			err = nct_save_session_state(1);
   1ba4a:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   1ba4c:	f88d 300c 	strb.w	r3, [sp, #12]
			err = nct_save_session_state(1);
   1ba50:	f7ff ff22 	bl	1b898 <nct_save_session_state>
			if (err) {
   1ba54:	b150      	cbz	r0, 1ba6c <nct_mqtt_evt_handler+0x1ac>
   1ba56:	4a0e      	ldr	r2, [pc, #56]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
   1ba58:	4b0c      	ldr	r3, [pc, #48]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
				LOG_ERR("Failed to save session state: %d",
   1ba5a:	4917      	ldr	r1, [pc, #92]	; (1bab8 <nct_mqtt_evt_handler+0x1f8>)
   1ba5c:	1a9b      	subs	r3, r3, r2
   1ba5e:	08db      	lsrs	r3, r3, #3
   1ba60:	019b      	lsls	r3, r3, #6
   1ba62:	4602      	mov	r2, r0
   1ba64:	f043 0001 	orr.w	r0, r3, #1
   1ba68:	f00a fd61 	bl	2652e <log_string_sync>
			err = nrf_cloud_fota_subscribe();
   1ba6c:	f000 ff3c 	bl	1c8e8 <nrf_cloud_fota_subscribe>
			if (err) {
   1ba70:	2800      	cmp	r0, #0
   1ba72:	d0b2      	beq.n	1b9da <nct_mqtt_evt_handler+0x11a>
   1ba74:	4a06      	ldr	r2, [pc, #24]	; (1ba90 <nct_mqtt_evt_handler+0x1d0>)
   1ba76:	4b05      	ldr	r3, [pc, #20]	; (1ba8c <nct_mqtt_evt_handler+0x1cc>)
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   1ba78:	4910      	ldr	r1, [pc, #64]	; (1babc <nct_mqtt_evt_handler+0x1fc>)
   1ba7a:	1a9b      	subs	r3, r3, r2
   1ba7c:	08db      	lsrs	r3, r3, #3
   1ba7e:	019b      	lsls	r3, r3, #6
   1ba80:	4602      	mov	r2, r0
   1ba82:	f043 0001 	orr.w	r0, r3, #1
   1ba86:	f00a fd52 	bl	2652e <log_string_sync>
	if (event_notify) {
   1ba8a:	e7a6      	b.n	1b9da <nct_mqtt_evt_handler+0x11a>
   1ba8c:	0002c3ec 	.word	0x0002c3ec
   1ba90:	0002c344 	.word	0x0002c344
   1ba94:	0002efc4 	.word	0x0002efc4
   1ba98:	2000f12b 	.word	0x2000f12b
   1ba9c:	0002eff0 	.word	0x0002eff0
   1baa0:	0002f021 	.word	0x0002f021
   1baa4:	2000e190 	.word	0x2000e190
   1baa8:	2000ec70 	.word	0x2000ec70
   1baac:	0002ca84 	.word	0x0002ca84
   1bab0:	2000e46e 	.word	0x2000e46e
   1bab4:	0002f080 	.word	0x0002f080
   1bab8:	0002f040 	.word	0x0002f040
   1babc:	0002f061 	.word	0x0002f061

0001bac0 <nct_mqtt_connect>:
{
   1bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   1bac2:	4e22      	ldr	r6, [pc, #136]	; (1bb4c <nct_mqtt_connect+0x8c>)
   1bac4:	7835      	ldrb	r5, [r6, #0]
   1bac6:	2d00      	cmp	r5, #0
   1bac8:	d13b      	bne.n	1bb42 <nct_mqtt_connect+0x82>
		mqtt_client_init(&nct.client);
   1baca:	4c21      	ldr	r4, [pc, #132]	; (1bb50 <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   1bacc:	2701      	movs	r7, #1
		mqtt_client_init(&nct.client);
   1bace:	f104 0020 	add.w	r0, r4, #32
   1bad2:	f00c f92c 	bl	27d2e <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   1bad6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
   1bada:	6763      	str	r3, [r4, #116]	; 0x74
		nct.client.evt_cb = nct_mqtt_evt_handler;
   1badc:	4b1d      	ldr	r3, [pc, #116]	; (1bb54 <nct_mqtt_connect+0x94>)
   1bade:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   1bae2:	4b1d      	ldr	r3, [pc, #116]	; (1bb58 <nct_mqtt_connect+0x98>)
   1bae4:	6818      	ldr	r0, [r3, #0]
   1bae6:	66e0      	str	r0, [r4, #108]	; 0x6c
		nct.client.client_id.size = strlen(client_id_buf);
   1bae8:	f7f5 fa68 	bl	10fbc <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   1baec:	2304      	movs	r3, #4
   1baee:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   1baf2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   1baf6:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
		nct.client.clean_session = persistent_session ? 0U : 1U;
   1bafa:	4b18      	ldr	r3, [pc, #96]	; (1bb5c <nct_mqtt_connect+0x9c>)
   1bafc:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1bb00:	781b      	ldrb	r3, [r3, #0]
		nct.client.user_name = NULL;
   1bb02:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
		nct.client.clean_session = persistent_session ? 0U : 1U;
   1bb06:	f083 0301 	eor.w	r3, r3, #1
   1bb0a:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.rx_buf = nct.rx_buf;
   1bb0e:	f104 03de 	add.w	r3, r4, #222	; 0xde
   1bb12:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   1bb16:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.clean_session = persistent_session ? 0U : 1U;
   1bb1a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
   1bb1e:	f104 054c 	add.w	r5, r4, #76	; 0x4c
		nct.client.tx_buf = nct.tx_buf;
   1bb22:	f504 72ef 	add.w	r2, r4, #478	; 0x1de
		nct.client.client_id.size = strlen(client_id_buf);
   1bb26:	6720      	str	r0, [r4, #112]	; 0x70
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   1bb28:	e9c4 2325 	strd	r2, r3, [r4, #148]	; 0x94
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   1bb2c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   1bb30:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		memcpy(tls_config, &nct.tls_config,
   1bb34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1bb36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bb38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1bb3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		mqtt_client_initialized = true;
   1bb40:	7037      	strb	r7, [r6, #0]
	err = mqtt_connect(&nct.client);
   1bb42:	4807      	ldr	r0, [pc, #28]	; (1bb60 <nct_mqtt_connect+0xa0>)
}
   1bb44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   1bb48:	f00c b90b 	b.w	27d62 <mqtt_connect>
   1bb4c:	2000f12a 	.word	0x2000f12a
   1bb50:	2000e190 	.word	0x2000e190
   1bb54:	0001b8c1 	.word	0x0001b8c1
   1bb58:	2000e18c 	.word	0x2000e18c
   1bb5c:	2000f12b 	.word	0x2000f12b
   1bb60:	2000e1b0 	.word	0x2000e1b0

0001bb64 <nct_init>:

int nct_init(const char * const client_id)
{
   1bb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb68:	4605      	mov	r5, r0
	ret = settings_subsys_init();
   1bb6a:	f7f9 faf7 	bl	1515c <settings_subsys_init>
	if (ret) {
   1bb6e:	4604      	mov	r4, r0
   1bb70:	b168      	cbz	r0, 1bb8e <nct_init+0x2a>
		LOG_ERR("Settings init failed: %d", ret);
   1bb72:	4622      	mov	r2, r4
   1bb74:	486d      	ldr	r0, [pc, #436]	; (1bd2c <nct_init+0x1c8>)
   1bb76:	4b6e      	ldr	r3, [pc, #440]	; (1bd30 <nct_init+0x1cc>)
   1bb78:	496e      	ldr	r1, [pc, #440]	; (1bd34 <nct_init+0x1d0>)
   1bb7a:	1ac0      	subs	r0, r0, r3
   1bb7c:	08c0      	lsrs	r0, r0, #3
   1bb7e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot load settings: %d", ret);
   1bb80:	f040 0001 	orr.w	r0, r0, #1
   1bb84:	f00a fcd3 	bl	2652e <log_string_sync>
	if (err) {
		return err;
	}

	return nct_provision();
}
   1bb88:	4620      	mov	r0, r4
   1bb8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   1bb8e:	486a      	ldr	r0, [pc, #424]	; (1bd38 <nct_init+0x1d4>)
   1bb90:	f7f9 f9dc 	bl	14f4c <settings_load_subtree>
	if (ret) {
   1bb94:	4604      	mov	r4, r0
   1bb96:	2800      	cmp	r0, #0
   1bb98:	f000 809c 	beq.w	1bcd4 <nct_init+0x170>
   1bb9c:	4863      	ldr	r0, [pc, #396]	; (1bd2c <nct_init+0x1c8>)
   1bb9e:	4b64      	ldr	r3, [pc, #400]	; (1bd30 <nct_init+0x1cc>)
		LOG_ERR("Cannot load settings: %d", ret);
   1bba0:	4622      	mov	r2, r4
   1bba2:	1ac0      	subs	r0, r0, r3
   1bba4:	08c0      	lsrs	r0, r0, #3
   1bba6:	4965      	ldr	r1, [pc, #404]	; (1bd3c <nct_init+0x1d8>)
   1bba8:	0180      	lsls	r0, r0, #6
   1bbaa:	e7e9      	b.n	1bb80 <nct_init+0x1c>
	if (client_id_buf) {
   1bbac:	4d64      	ldr	r5, [pc, #400]	; (1bd40 <nct_init+0x1dc>)
   1bbae:	6828      	ldr	r0, [r5, #0]
   1bbb0:	b118      	cbz	r0, 1bbba <nct_init+0x56>
		nrf_cloud_free(client_id_buf);
   1bbb2:	f00f f906 	bl	2adc2 <k_free>
		client_id_buf = NULL;
   1bbb6:	2300      	movs	r3, #0
   1bbb8:	602b      	str	r3, [r5, #0]
	++len;
   1bbba:	3401      	adds	r4, #1
	client_id_buf = nrf_cloud_calloc(len, 1);
   1bbbc:	2101      	movs	r1, #1
   1bbbe:	4620      	mov	r0, r4
   1bbc0:	f00f f90a 	bl	2add8 <k_calloc>
   1bbc4:	6028      	str	r0, [r5, #0]
	if (!client_id_buf) {
   1bbc6:	2800      	cmp	r0, #0
   1bbc8:	f000 8081 	beq.w	1bcce <nct_init+0x16a>
		ret = nrf_cloud_configured_client_id_get(client_id_buf, len);
   1bbcc:	4621      	mov	r1, r4
   1bbce:	f7fe fe97 	bl	1a900 <nrf_cloud_configured_client_id_get>
		if (ret) {
   1bbd2:	4604      	mov	r4, r0
   1bbd4:	b930      	cbnz	r0, 1bbe4 <nct_init+0x80>
	dc_endpoint_reset();
   1bbd6:	f7ff fcb7 	bl	1b548 <dc_endpoint_reset>
	if (!client_id_buf) {
   1bbda:	682b      	ldr	r3, [r5, #0]
   1bbdc:	b953      	cbnz	r3, 1bbf4 <nct_init+0x90>
		return -ENODEV;
   1bbde:	f06f 0412 	mvn.w	r4, #18
   1bbe2:	e7d1      	b.n	1bb88 <nct_init+0x24>
   1bbe4:	4851      	ldr	r0, [pc, #324]	; (1bd2c <nct_init+0x1c8>)
   1bbe6:	4b52      	ldr	r3, [pc, #328]	; (1bd30 <nct_init+0x1cc>)
			LOG_ERR("Could not obtain configured client ID, error: %d", ret);
   1bbe8:	4622      	mov	r2, r4
   1bbea:	1ac0      	subs	r0, r0, r3
   1bbec:	08c0      	lsrs	r0, r0, #3
   1bbee:	4955      	ldr	r1, [pc, #340]	; (1bd44 <nct_init+0x1e0>)
   1bbf0:	0180      	lsls	r0, r0, #6
   1bbf2:	e7c5      	b.n	1bb80 <nct_init+0x1c>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   1bbf4:	f8df b190 	ldr.w	fp, [pc, #400]	; 1bd88 <nct_init+0x224>
	nct_reset_topics();
   1bbf8:	f7ff fd1e 	bl	1b638 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   1bbfc:	4658      	mov	r0, fp
   1bbfe:	4952      	ldr	r1, [pc, #328]	; (1bd48 <nct_init+0x1e4>)
   1bc00:	f7ff fcf0 	bl	1b5e4 <allocate_and_format_topic>
	if (ret) {
   1bc04:	4604      	mov	r4, r0
   1bc06:	2800      	cmp	r0, #0
   1bc08:	d153      	bne.n	1bcb2 <nct_init+0x14e>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   1bc0a:	f8df a180 	ldr.w	sl, [pc, #384]	; 1bd8c <nct_init+0x228>
   1bc0e:	494f      	ldr	r1, [pc, #316]	; (1bd4c <nct_init+0x1e8>)
   1bc10:	4650      	mov	r0, sl
   1bc12:	f7ff fce7 	bl	1b5e4 <allocate_and_format_topic>
	if (ret) {
   1bc16:	4604      	mov	r4, r0
   1bc18:	2800      	cmp	r0, #0
   1bc1a:	d14a      	bne.n	1bcb2 <nct_init+0x14e>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   1bc1c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 1bd90 <nct_init+0x22c>
   1bc20:	494b      	ldr	r1, [pc, #300]	; (1bd50 <nct_init+0x1ec>)
   1bc22:	4648      	mov	r0, r9
   1bc24:	f7ff fcde 	bl	1b5e4 <allocate_and_format_topic>
	if (ret) {
   1bc28:	4604      	mov	r4, r0
   1bc2a:	2800      	cmp	r0, #0
   1bc2c:	d141      	bne.n	1bcb2 <nct_init+0x14e>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   1bc2e:	4f49      	ldr	r7, [pc, #292]	; (1bd54 <nct_init+0x1f0>)
   1bc30:	4949      	ldr	r1, [pc, #292]	; (1bd58 <nct_init+0x1f4>)
   1bc32:	4638      	mov	r0, r7
   1bc34:	f7ff fcd6 	bl	1b5e4 <allocate_and_format_topic>
	if (ret) {
   1bc38:	4604      	mov	r4, r0
   1bc3a:	2800      	cmp	r0, #0
   1bc3c:	d139      	bne.n	1bcb2 <nct_init+0x14e>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   1bc3e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1bd94 <nct_init+0x230>
   1bc42:	4946      	ldr	r1, [pc, #280]	; (1bd5c <nct_init+0x1f8>)
   1bc44:	4640      	mov	r0, r8
   1bc46:	f7ff fccd 	bl	1b5e4 <allocate_and_format_topic>
	if (ret) {
   1bc4a:	4604      	mov	r4, r0
   1bc4c:	2800      	cmp	r0, #0
   1bc4e:	d130      	bne.n	1bcb2 <nct_init+0x14e>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc50:	2601      	movs	r6, #1
   1bc52:	4d43      	ldr	r5, [pc, #268]	; (1bd60 <nct_init+0x1fc>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   1bc54:	f8db 0000 	ldr.w	r0, [fp]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc58:	722e      	strb	r6, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   1bc5a:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   1bc5c:	f7f5 f9ae 	bl	10fbc <strlen>
   1bc60:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   1bc62:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc66:	752e      	strb	r6, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   1bc68:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   1bc6a:	f7f5 f9a7 	bl	10fbc <strlen>
   1bc6e:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   1bc70:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc74:	f885 6020 	strb.w	r6, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   1bc78:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   1bc7a:	f7f5 f99f 	bl	10fbc <strlen>
   1bc7e:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc80:	4d38      	ldr	r5, [pc, #224]	; (1bd64 <nct_init+0x200>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   1bc82:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc86:	722e      	strb	r6, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   1bc88:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   1bc8a:	f7f5 f997 	bl	10fbc <strlen>
   1bc8e:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   1bc90:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1bc92:	752e      	strb	r6, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   1bc94:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   1bc96:	f7f5 f991 	bl	10fbc <strlen>
	nct.tls_config.peer_verify = 2;
   1bc9a:	2202      	movs	r2, #2
   1bc9c:	4b32      	ldr	r3, [pc, #200]	; (1bd68 <nct_init+0x204>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   1bc9e:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   1bca0:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   1bca4:	4a31      	ldr	r2, [pc, #196]	; (1bd6c <nct_init+0x208>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   1bca6:	e9c3 4602 	strd	r4, r6, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   1bcaa:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   1bcac:	4a30      	ldr	r2, [pc, #192]	; (1bd70 <nct_init+0x20c>)
   1bcae:	619a      	str	r2, [r3, #24]
	return nct_provision();
   1bcb0:	e76a      	b.n	1bb88 <nct_init+0x24>
   1bcb2:	4b1f      	ldr	r3, [pc, #124]	; (1bd30 <nct_init+0x1cc>)
   1bcb4:	481d      	ldr	r0, [pc, #116]	; (1bd2c <nct_init+0x1c8>)
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   1bcb6:	4622      	mov	r2, r4
   1bcb8:	1ac0      	subs	r0, r0, r3
   1bcba:	08c0      	lsrs	r0, r0, #3
   1bcbc:	0180      	lsls	r0, r0, #6
   1bcbe:	492d      	ldr	r1, [pc, #180]	; (1bd74 <nct_init+0x210>)
   1bcc0:	f040 0001 	orr.w	r0, r0, #1
   1bcc4:	f00a fc33 	bl	2652e <log_string_sync>
	nct_reset_topics();
   1bcc8:	f7ff fcb6 	bl	1b638 <nct_reset_topics>
	if (err) {
   1bccc:	e75c      	b.n	1bb88 <nct_init+0x24>
		return -ENOMEM;
   1bcce:	f06f 040b 	mvn.w	r4, #11
   1bcd2:	e759      	b.n	1bb88 <nct_init+0x24>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   1bcd4:	4828      	ldr	r0, [pc, #160]	; (1bd78 <nct_init+0x214>)
   1bcd6:	f000 fcf1 	bl	1c6bc <nrf_cloud_fota_init>
	if (err < 0) {
   1bcda:	1e04      	subs	r4, r0, #0
   1bcdc:	f6ff af54 	blt.w	1bb88 <nct_init+0x24>
	} else if (err && persistent_session) {
   1bce0:	d005      	beq.n	1bcee <nct_init+0x18a>
   1bce2:	4b26      	ldr	r3, [pc, #152]	; (1bd7c <nct_init+0x218>)
   1bce4:	781b      	ldrb	r3, [r3, #0]
   1bce6:	b113      	cbz	r3, 1bcee <nct_init+0x18a>
		nct_save_session_state(0);
   1bce8:	2000      	movs	r0, #0
   1bcea:	f7ff fdd5 	bl	1b898 <nct_save_session_state>
		if (client_id) {
   1bcee:	b14d      	cbz	r5, 1bd04 <nct_init+0x1a0>
   1bcf0:	480e      	ldr	r0, [pc, #56]	; (1bd2c <nct_init+0x1c8>)
   1bcf2:	4b0f      	ldr	r3, [pc, #60]	; (1bd30 <nct_init+0x1cc>)
			LOG_WRN("Not configured to for runtime client ID, ignoring");
   1bcf4:	4922      	ldr	r1, [pc, #136]	; (1bd80 <nct_init+0x21c>)
   1bcf6:	1ac0      	subs	r0, r0, r3
   1bcf8:	08c0      	lsrs	r0, r0, #3
   1bcfa:	0180      	lsls	r0, r0, #6
   1bcfc:	f040 0002 	orr.w	r0, r0, #2
   1bd00:	f00a fc15 	bl	2652e <log_string_sync>
		len = nrf_cloud_configured_client_id_length_get();
   1bd04:	f00d fa2d 	bl	29162 <nrf_cloud_configured_client_id_length_get>
	if (!len) {
   1bd08:	4604      	mov	r4, r0
   1bd0a:	2800      	cmp	r0, #0
   1bd0c:	f47f af4e 	bne.w	1bbac <nct_init+0x48>
   1bd10:	4b07      	ldr	r3, [pc, #28]	; (1bd30 <nct_init+0x1cc>)
   1bd12:	4806      	ldr	r0, [pc, #24]	; (1bd2c <nct_init+0x1c8>)
		LOG_WRN("Could not determine size of client ID");
   1bd14:	491b      	ldr	r1, [pc, #108]	; (1bd84 <nct_init+0x220>)
   1bd16:	1ac0      	subs	r0, r0, r3
   1bd18:	08c0      	lsrs	r0, r0, #3
   1bd1a:	0180      	lsls	r0, r0, #6
   1bd1c:	f040 0002 	orr.w	r0, r0, #2
   1bd20:	f00a fc05 	bl	2652e <log_string_sync>
		return -ENOMSG;
   1bd24:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1bd28:	e72e      	b.n	1bb88 <nct_init+0x24>
   1bd2a:	bf00      	nop
   1bd2c:	0002c3ec 	.word	0x0002c3ec
   1bd30:	0002c344 	.word	0x0002c344
   1bd34:	0002f095 	.word	0x0002f095
   1bd38:	0002ee03 	.word	0x0002ee03
   1bd3c:	0002f0ae 	.word	0x0002f0ae
   1bd40:	2000e18c 	.word	0x2000e18c
   1bd44:	0002f11f 	.word	0x0002f11f
   1bd48:	0002f150 	.word	0x0002f150
   1bd4c:	0002f167 	.word	0x0002f167
   1bd50:	0002f18a 	.word	0x0002f18a
   1bd54:	2000ecb8 	.word	0x2000ecb8
   1bd58:	0002f1ad 	.word	0x0002f1ad
   1bd5c:	0002f1ca 	.word	0x0002f1ca
   1bd60:	2000ec70 	.word	0x2000ec70
   1bd64:	2000ec94 	.word	0x2000ec94
   1bd68:	2000e190 	.word	0x2000e190
   1bd6c:	2000c5ec 	.word	0x2000c5ec
   1bd70:	0002f1e4 	.word	0x0002f1e4
   1bd74:	0002f213 	.word	0x0002f213
   1bd78:	0001b74d 	.word	0x0001b74d
   1bd7c:	2000f12b 	.word	0x2000f12b
   1bd80:	0002f0c7 	.word	0x0002f0c7
   1bd84:	0002f0f9 	.word	0x0002f0f9
   1bd88:	2000e188 	.word	0x2000e188
   1bd8c:	2000ecac 	.word	0x2000ecac
   1bd90:	2000ecb4 	.word	0x2000ecb4
   1bd94:	2000ecb0 	.word	0x2000ecb0

0001bd98 <nct_uninit>:

void nct_uninit(void)
{
   1bd98:	b510      	push	{r4, lr}
	LOG_DBG("Uninitializing nRF Cloud transport");
	dc_endpoint_free();
	nct_reset_topics();

	if (client_id_buf) {
   1bd9a:	4c0a      	ldr	r4, [pc, #40]	; (1bdc4 <nct_uninit+0x2c>)
	dc_endpoint_free();
   1bd9c:	f7ff fc8a 	bl	1b6b4 <dc_endpoint_free>
	nct_reset_topics();
   1bda0:	f7ff fc4a 	bl	1b638 <nct_reset_topics>
	if (client_id_buf) {
   1bda4:	6820      	ldr	r0, [r4, #0]
   1bda6:	b118      	cbz	r0, 1bdb0 <nct_uninit+0x18>
		nrf_cloud_free(client_id_buf);
   1bda8:	f00f f80b 	bl	2adc2 <k_free>
		client_id_buf = NULL;
   1bdac:	2300      	movs	r3, #0
   1bdae:	6023      	str	r3, [r4, #0]
	}

	memset(&nct, 0, sizeof(nct));
   1bdb0:	f44f 622e 	mov.w	r2, #2784	; 0xae0
   1bdb4:	2100      	movs	r1, #0
   1bdb6:	4804      	ldr	r0, [pc, #16]	; (1bdc8 <nct_uninit+0x30>)
   1bdb8:	f00f f866 	bl	2ae88 <memset>
	mqtt_client_initialized = false;
   1bdbc:	2200      	movs	r2, #0
   1bdbe:	4b03      	ldr	r3, [pc, #12]	; (1bdcc <nct_uninit+0x34>)
   1bdc0:	701a      	strb	r2, [r3, #0]
}
   1bdc2:	bd10      	pop	{r4, pc}
   1bdc4:	2000e18c 	.word	0x2000e18c
   1bdc8:	2000e190 	.word	0x2000e190
   1bdcc:	2000f12a 	.word	0x2000f12a

0001bdd0 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   1bdd0:	b510      	push	{r4, lr}
   1bdd2:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   1bdd4:	2250      	movs	r2, #80	; 0x50
   1bdd6:	2100      	movs	r1, #0
   1bdd8:	a806      	add	r0, sp, #24
   1bdda:	f00f f855 	bl	2ae88 <memset>
   1bdde:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1bde0:	2100      	movs	r1, #0
   1bde2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   1bde6:	4815      	ldr	r0, [pc, #84]	; (1be3c <nct_connect+0x6c>)
   1bde8:	ab01      	add	r3, sp, #4
   1bdea:	aa06      	add	r2, sp, #24
   1bdec:	f00a ff4d 	bl	26c8a <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   1bdf0:	bb00      	cbnz	r0, 1be34 <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   1bdf2:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   1bdf4:	b913      	cbnz	r3, 1bdfc <nct_connect+0x2c>
	err = -ECHILD;
   1bdf6:	f06f 0409 	mvn.w	r4, #9
   1bdfa:	e013      	b.n	1be24 <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   1bdfc:	695a      	ldr	r2, [r3, #20]
   1bdfe:	2a08      	cmp	r2, #8
   1be00:	d116      	bne.n	1be30 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   1be02:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   1be04:	490e      	ldr	r1, [pc, #56]	; (1be40 <nct_connect+0x70>)
					->sin_addr.s_addr;
   1be06:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   1be08:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
			broker->sin_family = AF_INET;
   1be0c:	4b0d      	ldr	r3, [pc, #52]	; (1be44 <nct_connect+0x74>)
   1be0e:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
		/* coverity[OVERRUN] */
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1be12:	2310      	movs	r3, #16
   1be14:	aa02      	add	r2, sp, #8
   1be16:	31a8      	adds	r1, #168	; 0xa8
   1be18:	2001      	movs	r0, #1
   1be1a:	f7fa fc4f 	bl	166bc <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));

			err = nct_mqtt_connect();
   1be1e:	f7ff fe4f 	bl	1bac0 <nct_mqtt_connect>
   1be22:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1be24:	9801      	ldr	r0, [sp, #4]
   1be26:	f00a ff32 	bl	26c8e <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   1be2a:	4620      	mov	r0, r4
   1be2c:	b01a      	add	sp, #104	; 0x68
   1be2e:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   1be30:	681b      	ldr	r3, [r3, #0]
   1be32:	e7df      	b.n	1bdf4 <nct_connect+0x24>
		return -ECHILD;
   1be34:	f06f 0409 	mvn.w	r4, #9
   1be38:	e7f7      	b.n	1be2a <nct_connect+0x5a>
   1be3a:	bf00      	nop
   1be3c:	0002f1e4 	.word	0x0002f1e4
   1be40:	2000e190 	.word	0x2000e190
   1be44:	b3220001 	.word	0xb3220001

0001be48 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   1be48:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   1be4a:	466b      	mov	r3, sp
   1be4c:	4a05      	ldr	r2, [pc, #20]	; (1be64 <nct_cc_connect+0x1c>)
   1be4e:	e892 0003 	ldmia.w	r2, {r0, r1}
   1be52:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   1be56:	4619      	mov	r1, r3
   1be58:	4803      	ldr	r0, [pc, #12]	; (1be68 <nct_cc_connect+0x20>)
   1be5a:	f00c f85a 	bl	27f12 <mqtt_subscribe>
}
   1be5e:	b003      	add	sp, #12
   1be60:	f85d fb04 	ldr.w	pc, [sp], #4
   1be64:	0002c460 	.word	0x0002c460
   1be68:	2000e1b0 	.word	0x2000e1b0

0001be6c <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   1be6c:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   1be6e:	4604      	mov	r4, r0
{
   1be70:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   1be72:	b970      	cbnz	r0, 1be92 <nct_cc_send+0x26>
   1be74:	4b27      	ldr	r3, [pc, #156]	; (1bf14 <nct_cc_send+0xa8>)
   1be76:	4828      	ldr	r0, [pc, #160]	; (1bf18 <nct_cc_send+0xac>)
		LOG_ERR("cc_data == NULL");
   1be78:	4928      	ldr	r1, [pc, #160]	; (1bf1c <nct_cc_send+0xb0>)
   1be7a:	1ac0      	subs	r0, r0, r3
   1be7c:	08c0      	lsrs	r0, r0, #3
   1be7e:	0180      	lsls	r0, r0, #6
   1be80:	f040 0001 	orr.w	r0, r0, #1
   1be84:	f00a fb53 	bl	2652e <log_string_sync>
		return -EINVAL;
   1be88:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   1be8c:	4620      	mov	r0, r4
   1be8e:	b007      	add	sp, #28
   1be90:	bd30      	pop	{r4, r5, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   1be92:	7c85      	ldrb	r5, [r0, #18]
   1be94:	2d01      	cmp	r5, #1
   1be96:	d90d      	bls.n	1beb4 <nct_cc_send+0x48>
   1be98:	4b1e      	ldr	r3, [pc, #120]	; (1bf14 <nct_cc_send+0xa8>)
   1be9a:	481f      	ldr	r0, [pc, #124]	; (1bf18 <nct_cc_send+0xac>)
		LOG_ERR("opcode = %d", cc_data->opcode);
   1be9c:	462a      	mov	r2, r5
   1be9e:	1ac0      	subs	r0, r0, r3
   1bea0:	08c0      	lsrs	r0, r0, #3
   1bea2:	0180      	lsls	r0, r0, #6
   1bea4:	491e      	ldr	r1, [pc, #120]	; (1bf20 <nct_cc_send+0xb4>)
   1bea6:	f040 0001 	orr.w	r0, r0, #1
   1beaa:	f00a fb40 	bl	2652e <log_string_sync>
		return -ENOTSUP;
   1beae:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1beb2:	e7eb      	b.n	1be8c <nct_cc_send+0x20>
	struct mqtt_publish_param publish = {
   1beb4:	2210      	movs	r2, #16
   1beb6:	2100      	movs	r1, #0
   1beb8:	a802      	add	r0, sp, #8
   1beba:	f00e ffe5 	bl	2ae88 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   1bebe:	220c      	movs	r2, #12
   1bec0:	436a      	muls	r2, r5
   1bec2:	4918      	ldr	r1, [pc, #96]	; (1bf24 <nct_cc_send+0xb8>)
   1bec4:	188b      	adds	r3, r1, r2
	struct mqtt_publish_param publish = {
   1bec6:	588a      	ldr	r2, [r1, r2]
   1bec8:	9200      	str	r2, [sp, #0]
   1beca:	685a      	ldr	r2, [r3, #4]
   1becc:	7a1b      	ldrb	r3, [r3, #8]
   1bece:	9201      	str	r2, [sp, #4]
   1bed0:	f88d 3008 	strb.w	r3, [sp, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   1bed4:	6823      	ldr	r3, [r4, #0]
   1bed6:	b11b      	cbz	r3, 1bee0 <nct_cc_send+0x74>
   1bed8:	6862      	ldr	r2, [r4, #4]
   1beda:	b10a      	cbz	r2, 1bee0 <nct_cc_send+0x74>
		publish.message.payload.len = cc_data->data.len;
   1bedc:	e9cd 2303 	strd	r2, r3, [sp, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   1bee0:	8a20      	ldrh	r0, [r4, #16]
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   1bee2:	b908      	cbnz	r0, 1bee8 <nct_cc_send+0x7c>
	return get_next_message_id();
   1bee4:	f7ff fb3e 	bl	1b564 <get_next_message_id>
	publish.message_id = get_message_id(cc_data->message_id);
   1bee8:	f8ad 0014 	strh.w	r0, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   1beec:	4669      	mov	r1, sp
   1beee:	480e      	ldr	r0, [pc, #56]	; (1bf28 <nct_cc_send+0xbc>)
   1bef0:	f00b ff7a 	bl	27de8 <mqtt_publish>
	if (err) {
   1bef4:	4604      	mov	r4, r0
   1bef6:	2800      	cmp	r0, #0
   1bef8:	d0c8      	beq.n	1be8c <nct_cc_send+0x20>
   1befa:	4b06      	ldr	r3, [pc, #24]	; (1bf14 <nct_cc_send+0xa8>)
   1befc:	4806      	ldr	r0, [pc, #24]	; (1bf18 <nct_cc_send+0xac>)
		LOG_ERR("mqtt_publish failed %d", err);
   1befe:	4622      	mov	r2, r4
   1bf00:	1ac0      	subs	r0, r0, r3
   1bf02:	08c0      	lsrs	r0, r0, #3
   1bf04:	0180      	lsls	r0, r0, #6
   1bf06:	4909      	ldr	r1, [pc, #36]	; (1bf2c <nct_cc_send+0xc0>)
   1bf08:	f040 0001 	orr.w	r0, r0, #1
   1bf0c:	f00a fb0f 	bl	2652e <log_string_sync>
   1bf10:	e7bc      	b.n	1be8c <nct_cc_send+0x20>
   1bf12:	bf00      	nop
   1bf14:	0002c344 	.word	0x0002c344
   1bf18:	0002c3ec 	.word	0x0002c3ec
   1bf1c:	0002f239 	.word	0x0002f239
   1bf20:	0002f249 	.word	0x0002f249
   1bf24:	2000ec94 	.word	0x2000ec94
   1bf28:	2000e1b0 	.word	0x2000e1b0
   1bf2c:	0002f255 	.word	0x0002f255

0001bf30 <nct_dc_endpoint_set>:

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *m_endp)
{
   1bf30:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   1bf34:	4680      	mov	r8, r0
   1bf36:	460f      	mov	r7, r1
   1bf38:	4616      	mov	r6, r2
   1bf3a:	461d      	mov	r5, r3
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   1bf3c:	f7ff fbba 	bl	1b6b4 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   1bf40:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bf44:	4814      	ldr	r0, [pc, #80]	; (1bf98 <nct_dc_endpoint_set+0x68>)
   1bf46:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	nct.dc_tx_endp.size = tx_endp->len;
   1bf4a:	f8d8 3000 	ldr.w	r3, [r8]
   1bf4e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   1bf52:	687b      	ldr	r3, [r7, #4]
   1bf54:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_rx_endp.size = rx_endp->len;
   1bf58:	683b      	ldr	r3, [r7, #0]
   1bf5a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   1bf5e:	6873      	ldr	r3, [r6, #4]
   1bf60:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	nct.dc_bulk_endp.size = bulk_endp->len;
   1bf64:	6833      	ldr	r3, [r6, #0]
   1bf66:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	if (m_endp != NULL) {
   1bf6a:	b19d      	cbz	r5, 1bf94 <nct_dc_endpoint_set+0x64>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   1bf6c:	686b      	ldr	r3, [r5, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   1bf6e:	f100 02cc 	add.w	r2, r0, #204	; 0xcc
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   1bf72:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
		nct.dc_m_endp.size = m_endp->len;
   1bf76:	682b      	ldr	r3, [r5, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   1bf78:	3020      	adds	r0, #32
		nct.dc_m_endp.size = m_endp->len;
   1bf7a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   1bf7e:	4b07      	ldr	r3, [pc, #28]	; (1bf9c <nct_dc_endpoint_set+0x6c>)
   1bf80:	6819      	ldr	r1, [r3, #0]
   1bf82:	f000 fc8b 	bl	1c89c <nrf_cloud_fota_endpoint_set_and_report>
			client_id_buf, &nct.dc_m_endp);
		if (persistent_session) {
   1bf86:	4b06      	ldr	r3, [pc, #24]	; (1bfa0 <nct_dc_endpoint_set+0x70>)
   1bf88:	781b      	ldrb	r3, [r3, #0]
   1bf8a:	b11b      	cbz	r3, 1bf94 <nct_dc_endpoint_set+0x64>
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   1bf8c:	e8bd 41e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, lr}
			(void)nrf_cloud_fota_update_check();
   1bf90:	f000 bd00 	b.w	1c994 <nrf_cloud_fota_update_check>
}
   1bf94:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
   1bf98:	2000e190 	.word	0x2000e190
   1bf9c:	2000e18c 	.word	0x2000e18c
   1bfa0:	2000f12b 	.word	0x2000f12b

0001bfa4 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const m_endp)
{
   1bfa4:	b530      	push	{r4, r5, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   1bfa6:	4c0e      	ldr	r4, [pc, #56]	; (1bfe0 <nct_dc_endpoint_get+0x3c>)
   1bfa8:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
   1bfac:	6045      	str	r5, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   1bfae:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
   1bfb2:	6005      	str	r5, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   1bfb4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1bfb8:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   1bfba:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   1bfbe:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   1bfc0:	b12a      	cbz	r2, 1bfce <nct_dc_endpoint_get+0x2a>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   1bfc2:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
   1bfc6:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   1bfc8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1bfcc:	6011      	str	r1, [r2, #0]
	}

	if (m_endp != NULL) {
   1bfce:	b12b      	cbz	r3, 1bfdc <nct_dc_endpoint_get+0x38>
		m_endp->ptr = nct.dc_m_endp.utf8;
   1bfd0:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   1bfd4:	605a      	str	r2, [r3, #4]
		m_endp->len = nct.dc_m_endp.size;
   1bfd6:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
   1bfda:	601a      	str	r2, [r3, #0]
	}
}
   1bfdc:	bd30      	pop	{r4, r5, pc}
   1bfde:	bf00      	nop
   1bfe0:	2000e190 	.word	0x2000e190

0001bfe4 <nct_dc_connect>:

int nct_dc_connect(void)
{
   1bfe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   1bfe6:	480a      	ldr	r0, [pc, #40]	; (1c010 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   1bfe8:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   1bfea:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
	return mqtt_subscribe(&nct.client, &subscription_list);
   1bfee:	3020      	adds	r0, #32
	struct mqtt_topic subscribe_topic = {
   1bff0:	9303      	str	r3, [sp, #12]
   1bff2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   1bff6:	9304      	str	r3, [sp, #16]
   1bff8:	2301      	movs	r3, #1
   1bffa:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   1bffe:	ab03      	add	r3, sp, #12
   1c000:	9301      	str	r3, [sp, #4]
   1c002:	4b04      	ldr	r3, [pc, #16]	; (1c014 <nct_dc_connect+0x30>)
   1c004:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   1c006:	f00b ff84 	bl	27f12 <mqtt_subscribe>
}
   1c00a:	b007      	add	sp, #28
   1c00c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c010:	2000e190 	.word	0x2000e190
   1c014:	00650001 	.word	0x00650001

0001c018 <nct_dc_bulk_send>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_bulk_send(const struct nct_dc_data *dc_data, enum mqtt_qos qos)
{
   1c018:	b530      	push	{r4, r5, lr}
   1c01a:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   1c01c:	4604      	mov	r4, r0
{
   1c01e:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   1c020:	b310      	cbz	r0, 1c068 <nct_dc_bulk_send+0x50>
	if (qos != MQTT_QOS_0_AT_MOST_ONCE && qos != MQTT_QOS_1_AT_LEAST_ONCE) {
   1c022:	2901      	cmp	r1, #1
   1c024:	d820      	bhi.n	1c068 <nct_dc_bulk_send+0x50>
	struct mqtt_publish_param publish = {
   1c026:	2210      	movs	r2, #16
   1c028:	2100      	movs	r1, #0
   1c02a:	a802      	add	r0, sp, #8
   1c02c:	f00e ff2c 	bl	2ae88 <memset>
		.message.topic.topic.utf8 = nct.dc_bulk_endp.utf8,
   1c030:	4b0f      	ldr	r3, [pc, #60]	; (1c070 <nct_dc_bulk_send+0x58>)
	struct mqtt_publish_param publish = {
   1c032:	f88d 5008 	strb.w	r5, [sp, #8]
   1c036:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   1c03a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   1c03e:	9200      	str	r2, [sp, #0]
   1c040:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   1c042:	6823      	ldr	r3, [r4, #0]
   1c044:	b11b      	cbz	r3, 1c04e <nct_dc_bulk_send+0x36>
   1c046:	6862      	ldr	r2, [r4, #4]
   1c048:	b10a      	cbz	r2, 1c04e <nct_dc_bulk_send+0x36>
		publish.message.payload.len = dc_data->data.len;
   1c04a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   1c04e:	b12d      	cbz	r5, 1c05c <nct_dc_bulk_send+0x44>
		publish.message_id = get_message_id(dc_data->message_id);
   1c050:	8a20      	ldrh	r0, [r4, #16]
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   1c052:	b908      	cbnz	r0, 1c058 <nct_dc_bulk_send+0x40>
	return get_next_message_id();
   1c054:	f7ff fa86 	bl	1b564 <get_next_message_id>
		publish.message_id = get_message_id(dc_data->message_id);
   1c058:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   1c05c:	4669      	mov	r1, sp
   1c05e:	4805      	ldr	r0, [pc, #20]	; (1c074 <nct_dc_bulk_send+0x5c>)
   1c060:	f00b fec2 	bl	27de8 <mqtt_publish>
	return bulk_send(dc_data, qos);
}
   1c064:	b007      	add	sp, #28
   1c066:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c068:	f06f 0015 	mvn.w	r0, #21
	return bulk_send(dc_data, qos);
   1c06c:	e7fa      	b.n	1c064 <nct_dc_bulk_send+0x4c>
   1c06e:	bf00      	nop
   1c070:	2000e190 	.word	0x2000e190
   1c074:	2000e1b0 	.word	0x2000e1b0

0001c078 <nct_dc_disconnect>:

int nct_dc_disconnect(void)
{
   1c078:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;

	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   1c07a:	480f      	ldr	r0, [pc, #60]	; (1c0b8 <nct_dc_disconnect+0x40>)
   1c07c:	4b0f      	ldr	r3, [pc, #60]	; (1c0bc <nct_dc_disconnect+0x44>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   1c07e:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   1c080:	9000      	str	r0, [sp, #0]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   1c082:	38a4      	subs	r0, #164	; 0xa4
	const struct mqtt_subscription_list subscription_list = {
   1c084:	9301      	str	r3, [sp, #4]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   1c086:	f00b ff6b 	bl	27f60 <mqtt_unsubscribe>
   1c08a:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   1c08c:	f000 fc4a 	bl	1c924 <nrf_cloud_fota_unsubscribe>

	if (err) {
   1c090:	4605      	mov	r5, r0
   1c092:	b168      	cbz	r0, 1c0b0 <nct_dc_disconnect+0x38>
   1c094:	480a      	ldr	r0, [pc, #40]	; (1c0c0 <nct_dc_disconnect+0x48>)
   1c096:	4b0b      	ldr	r3, [pc, #44]	; (1c0c4 <nct_dc_disconnect+0x4c>)
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   1c098:	462a      	mov	r2, r5
   1c09a:	1a1b      	subs	r3, r3, r0
   1c09c:	08db      	lsrs	r3, r3, #3
   1c09e:	019b      	lsls	r3, r3, #6
   1c0a0:	4909      	ldr	r1, [pc, #36]	; (1c0c8 <nct_dc_disconnect+0x50>)
   1c0a2:	f043 0001 	orr.w	r0, r3, #1
   1c0a6:	f00a fa42 	bl	2652e <log_string_sync>
		if (ret == 0) {
   1c0aa:	2c00      	cmp	r4, #0
   1c0ac:	bf08      	it	eq
   1c0ae:	462c      	moveq	r4, r5
		}
	}
#endif

	return ret;
}
   1c0b0:	4620      	mov	r0, r4
   1c0b2:	b003      	add	sp, #12
   1c0b4:	bd30      	pop	{r4, r5, pc}
   1c0b6:	bf00      	nop
   1c0b8:	2000e254 	.word	0x2000e254
   1c0bc:	00970001 	.word	0x00970001
   1c0c0:	0002c344 	.word	0x0002c344
   1c0c4:	0002c3ec 	.word	0x0002c3ec
   1c0c8:	0002f26c 	.word	0x0002f26c

0001c0cc <nct_disconnect>:

int nct_disconnect(void)
{
   1c0cc:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   1c0ce:	f7ff faf1 	bl	1b6b4 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   1c0d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   1c0d6:	4801      	ldr	r0, [pc, #4]	; (1c0dc <nct_disconnect+0x10>)
   1c0d8:	f00b bef2 	b.w	27ec0 <mqtt_disconnect>
   1c0dc:	2000e1b0 	.word	0x2000e1b0

0001c0e0 <nct_process>:

int nct_process(void)
{
   1c0e0:	b530      	push	{r4, r5, lr}
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   1c0e2:	4d2e      	ldr	r5, [pc, #184]	; (1c19c <nct_process+0xbc>)
{
   1c0e4:	b085      	sub	sp, #20
	err = mqtt_input(&nct.client);
   1c0e6:	f105 0020 	add.w	r0, r5, #32
   1c0ea:	f00b ffc9 	bl	28080 <mqtt_input>
	if (err) {
   1c0ee:	4604      	mov	r4, r0
   1c0f0:	2800      	cmp	r0, #0
   1c0f2:	d036      	beq.n	1c162 <nct_process+0x82>
   1c0f4:	4b2a      	ldr	r3, [pc, #168]	; (1c1a0 <nct_process+0xc0>)
   1c0f6:	482b      	ldr	r0, [pc, #172]	; (1c1a4 <nct_process+0xc4>)
		LOG_ERR("MQTT input error: %d", err);
   1c0f8:	4622      	mov	r2, r4
   1c0fa:	1ac0      	subs	r0, r0, r3
   1c0fc:	08c0      	lsrs	r0, r0, #3
   1c0fe:	0180      	lsls	r0, r0, #6
   1c100:	4929      	ldr	r1, [pc, #164]	; (1c1a8 <nct_process+0xc8>)
   1c102:	f040 0001 	orr.w	r0, r0, #1
   1c106:	f00a fa12 	bl	2652e <log_string_sync>
		if (err != -ENOTCONN) {
   1c10a:	f114 0f80 	cmn.w	r4, #128	; 0x80
   1c10e:	d125      	bne.n	1c15c <nct_process+0x7c>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   1c110:	f7ff ffdc 	bl	1c0cc <nct_disconnect>
	if (ret) {
   1c114:	b150      	cbz	r0, 1c12c <nct_process+0x4c>
   1c116:	4a22      	ldr	r2, [pc, #136]	; (1c1a0 <nct_process+0xc0>)
   1c118:	4b22      	ldr	r3, [pc, #136]	; (1c1a4 <nct_process+0xc4>)
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   1c11a:	4924      	ldr	r1, [pc, #144]	; (1c1ac <nct_process+0xcc>)
   1c11c:	1a9b      	subs	r3, r3, r2
   1c11e:	08db      	lsrs	r3, r3, #3
   1c120:	019b      	lsls	r3, r3, #6
   1c122:	4602      	mov	r2, r0
   1c124:	f043 0001 	orr.w	r0, r3, #1
   1c128:	f00a fa01 	bl	2652e <log_string_sync>
	}

	struct nct_evt evt = { .status = err };
   1c12c:	2300      	movs	r3, #0
   1c12e:	e9cd 3302 	strd	r3, r3, [sp, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   1c132:	2309      	movs	r3, #9
	ret = nct_input(&evt);
   1c134:	a801      	add	r0, sp, #4
	struct nct_evt evt = { .status = err };
   1c136:	9401      	str	r4, [sp, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   1c138:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = nct_input(&evt);
   1c13c:	f7fe ffa6 	bl	1b08c <nct_input>
	if (ret) {
   1c140:	4605      	mov	r5, r0
   1c142:	b158      	cbz	r0, 1c15c <nct_process+0x7c>
   1c144:	4816      	ldr	r0, [pc, #88]	; (1c1a0 <nct_process+0xc0>)
   1c146:	4b17      	ldr	r3, [pc, #92]	; (1c1a4 <nct_process+0xc4>)
		LOG_ERR("Error sending event to application: %d", err);
   1c148:	4622      	mov	r2, r4
   1c14a:	1a1b      	subs	r3, r3, r0
   1c14c:	08db      	lsrs	r3, r3, #3
   1c14e:	019b      	lsls	r3, r3, #6
   1c150:	4917      	ldr	r1, [pc, #92]	; (1c1b0 <nct_process+0xd0>)
   1c152:	f043 0001 	orr.w	r0, r3, #1
   1c156:	f00a f9ea 	bl	2652e <log_string_sync>
		err = ret;
   1c15a:	462c      	mov	r4, r5
	}
	return err;
}
   1c15c:	4620      	mov	r0, r4
   1c15e:	b005      	add	sp, #20
   1c160:	bd30      	pop	{r4, r5, pc}
	} else if (nct.client.unacked_ping) {
   1c162:	f995 309f 	ldrsb.w	r3, [r5, #159]	; 0x9f
   1c166:	b9ab      	cbnz	r3, 1c194 <nct_process+0xb4>
		err = mqtt_live(&nct.client);
   1c168:	f105 0020 	add.w	r0, r5, #32
   1c16c:	f00b ff4a 	bl	28004 <mqtt_live>
		if (err && (err != -EAGAIN)) {
   1c170:	4604      	mov	r4, r0
   1c172:	2800      	cmp	r0, #0
   1c174:	d0f2      	beq.n	1c15c <nct_process+0x7c>
   1c176:	f110 0f0b 	cmn.w	r0, #11
   1c17a:	d0ef      	beq.n	1c15c <nct_process+0x7c>
   1c17c:	4b08      	ldr	r3, [pc, #32]	; (1c1a0 <nct_process+0xc0>)
   1c17e:	4809      	ldr	r0, [pc, #36]	; (1c1a4 <nct_process+0xc4>)
			LOG_ERR("MQTT ping error: %d", err);
   1c180:	4622      	mov	r2, r4
   1c182:	1ac0      	subs	r0, r0, r3
   1c184:	08c0      	lsrs	r0, r0, #3
   1c186:	0180      	lsls	r0, r0, #6
   1c188:	490a      	ldr	r1, [pc, #40]	; (1c1b4 <nct_process+0xd4>)
   1c18a:	f040 0001 	orr.w	r0, r0, #1
   1c18e:	f00a f9ce 	bl	2652e <log_string_sync>
   1c192:	e7bd      	b.n	1c110 <nct_process+0x30>
		err = -ECONNRESET;
   1c194:	f06f 0467 	mvn.w	r4, #103	; 0x67
   1c198:	e7ba      	b.n	1c110 <nct_process+0x30>
   1c19a:	bf00      	nop
   1c19c:	2000e190 	.word	0x2000e190
   1c1a0:	0002c344 	.word	0x0002c344
   1c1a4:	0002c3ec 	.word	0x0002c3ec
   1c1a8:	0002f28d 	.word	0x0002f28d
   1c1ac:	0002f2b6 	.word	0x0002f2b6
   1c1b0:	0002f2d9 	.word	0x0002f2d9
   1c1b4:	0002f2a2 	.word	0x0002f2a2

0001c1b8 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   1c1b8:	4801      	ldr	r0, [pc, #4]	; (1c1c0 <nct_keepalive_time_left+0x8>)
   1c1ba:	f00b bf4a 	b.w	28052 <mqtt_keepalive_time_left>
   1c1be:	bf00      	nop
   1c1c0:	2000e1b0 	.word	0x2000e1b0

0001c1c4 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   1c1c4:	4b01      	ldr	r3, [pc, #4]	; (1c1cc <nct_socket_get+0x8>)
   1c1c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
   1c1c8:	4770      	bx	lr
   1c1ca:	bf00      	nop
   1c1cc:	2000e190 	.word	0x2000e190

0001c1d0 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, NRF_CLOUD_SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   1c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1d2:	460d      	mov	r5, r1
   1c1d4:	4616      	mov	r6, r2
   1c1d6:	461f      	mov	r7, r3
	if (!key) {
   1c1d8:	4604      	mov	r4, r0
   1c1da:	b1b0      	cbz	r0, 1c20a <fota_settings_set+0x3a>
		return -EINVAL;
	}

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) &&
   1c1dc:	480c      	ldr	r0, [pc, #48]	; (1c210 <fota_settings_set+0x40>)
   1c1de:	f7f4 feed 	bl	10fbc <strlen>
   1c1e2:	490b      	ldr	r1, [pc, #44]	; (1c210 <fota_settings_set+0x40>)
   1c1e4:	4602      	mov	r2, r0
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	f00e ff7d 	bl	2b0e6 <strncmp>
   1c1ec:	4604      	mov	r4, r0
   1c1ee:	b118      	cbz	r0, 1c1f8 <fota_settings_set+0x28>
				log_strdup(saved_job.id), saved_job.type,
				saved_job.validate);
			return 0;
		}
	}
	return -ENOTSUP;
   1c1f0:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) &&
   1c1f8:	2d27      	cmp	r5, #39	; 0x27
   1c1fa:	d1f9      	bne.n	1c1f0 <fota_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&saved_job, len_rd) == len_rd) {
   1c1fc:	462a      	mov	r2, r5
   1c1fe:	4638      	mov	r0, r7
   1c200:	4904      	ldr	r1, [pc, #16]	; (1c214 <fota_settings_set+0x44>)
   1c202:	47b0      	blx	r6
   1c204:	2827      	cmp	r0, #39	; 0x27
   1c206:	d0f5      	beq.n	1c1f4 <fota_settings_set+0x24>
   1c208:	e7f2      	b.n	1c1f0 <fota_settings_set+0x20>
		return -EINVAL;
   1c20a:	f06f 0415 	mvn.w	r4, #21
   1c20e:	e7f1      	b.n	1c1f4 <fota_settings_set+0x24>
   1c210:	0002f4e0 	.word	0x0002f4e0
   1c214:	2000c882 	.word	0x2000c882

0001c218 <publish>:
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   1c218:	4b0a      	ldr	r3, [pc, #40]	; (1c244 <publish+0x2c>)
{
   1c21a:	4601      	mov	r1, r0
   1c21c:	b510      	push	{r4, lr}
	ret = mqtt_publish(client_mqtt, pub);
   1c21e:	6818      	ldr	r0, [r3, #0]
   1c220:	f00b fde2 	bl	27de8 <mqtt_publish>
	if (ret) {
   1c224:	4604      	mov	r4, r0
   1c226:	b150      	cbz	r0, 1c23e <publish+0x26>
   1c228:	4807      	ldr	r0, [pc, #28]	; (1c248 <publish+0x30>)
   1c22a:	4b08      	ldr	r3, [pc, #32]	; (1c24c <publish+0x34>)
		LOG_ERR("Publish failed: %d", ret);
   1c22c:	4622      	mov	r2, r4
   1c22e:	1a1b      	subs	r3, r3, r0
   1c230:	08db      	lsrs	r3, r3, #3
   1c232:	019b      	lsls	r3, r3, #6
   1c234:	4906      	ldr	r1, [pc, #24]	; (1c250 <publish+0x38>)
   1c236:	f043 0001 	orr.w	r0, r3, #1
   1c23a:	f00a f978 	bl	2652e <log_string_sync>
	}
	return ret;
}
   1c23e:	4620      	mov	r0, r4
   1c240:	bd10      	pop	{r4, pc}
   1c242:	bf00      	nop
   1c244:	2000ecbc 	.word	0x2000ecbc
   1c248:	0002c344 	.word	0x0002c344
   1c24c:	0002c3dc 	.word	0x0002c3dc
   1c250:	0002f314 	.word	0x0002f314

0001c254 <save_validate_status>:
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   1c254:	2a05      	cmp	r2, #5
{
   1c256:	4603      	mov	r3, r0
   1c258:	b510      	push	{r4, lr}
   1c25a:	4814      	ldr	r0, [pc, #80]	; (1c2ac <save_validate_status+0x58>)
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   1c25c:	d11b      	bne.n	1c296 <save_validate_status+0x42>
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   1c25e:	2303      	movs	r3, #3
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   1c260:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   1c262:	7043      	strb	r3, [r0, #1]
		memset(saved_job.id, 0, sizeof(saved_job.id));
   1c264:	2225      	movs	r2, #37	; 0x25
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   1c266:	f800 1b02 	strb.w	r1, [r0], #2
		memset(saved_job.id, 0, sizeof(saved_job.id));
   1c26a:	f00e fe0d 	bl	2ae88 <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   1c26e:	2227      	movs	r2, #39	; 0x27
   1c270:	490e      	ldr	r1, [pc, #56]	; (1c2ac <save_validate_status+0x58>)
   1c272:	480f      	ldr	r0, [pc, #60]	; (1c2b0 <save_validate_status+0x5c>)
   1c274:	f7f8 fe30 	bl	14ed8 <settings_save_one>
	if (ret) {
   1c278:	4604      	mov	r4, r0
   1c27a:	b150      	cbz	r0, 1c292 <save_validate_status+0x3e>
   1c27c:	480d      	ldr	r0, [pc, #52]	; (1c2b4 <save_validate_status+0x60>)
   1c27e:	4b0e      	ldr	r3, [pc, #56]	; (1c2b8 <save_validate_status+0x64>)
		LOG_ERR("settings_save_one failed: %d", ret);
   1c280:	4622      	mov	r2, r4
   1c282:	1a1b      	subs	r3, r3, r0
   1c284:	08db      	lsrs	r3, r3, #3
   1c286:	019b      	lsls	r3, r3, #6
   1c288:	490c      	ldr	r1, [pc, #48]	; (1c2bc <save_validate_status+0x68>)
   1c28a:	f043 0001 	orr.w	r0, r3, #1
   1c28e:	f00a f94e 	bl	2652e <log_string_sync>
}
   1c292:	4620      	mov	r0, r4
   1c294:	bd10      	pop	{r4, pc}
		saved_job.type = job_type;
   1c296:	7041      	strb	r1, [r0, #1]
		saved_job.validate = validate;
   1c298:	f800 2b02 	strb.w	r2, [r0], #2
		if (job_id != saved_job.id) {
   1c29c:	4283      	cmp	r3, r0
   1c29e:	d0e6      	beq.n	1c26e <save_validate_status+0x1a>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id));
   1c2a0:	2225      	movs	r2, #37	; 0x25
   1c2a2:	4619      	mov	r1, r3
   1c2a4:	f00e ff31 	bl	2b10a <strncpy>
   1c2a8:	e7e1      	b.n	1c26e <save_validate_status+0x1a>
   1c2aa:	bf00      	nop
   1c2ac:	2000c882 	.word	0x2000c882
   1c2b0:	0002f327 	.word	0x0002f327
   1c2b4:	0002c344 	.word	0x0002c344
   1c2b8:	0002c3dc 	.word	0x0002c3dc
   1c2bc:	0002f33a 	.word	0x0002f33a

0001c2c0 <reset_topics>:
{
   1c2c0:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   1c2c2:	4805      	ldr	r0, [pc, #20]	; (1c2d8 <reset_topics+0x18>)
   1c2c4:	f00c ffcd 	bl	29262 <reset_topic>
	reset_topic(&topic_updt.topic);
   1c2c8:	4804      	ldr	r0, [pc, #16]	; (1c2dc <reset_topics+0x1c>)
   1c2ca:	f00c ffca 	bl	29262 <reset_topic>
}
   1c2ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   1c2d2:	4803      	ldr	r0, [pc, #12]	; (1c2e0 <reset_topics+0x20>)
   1c2d4:	f00c bfc5 	b.w	29262 <reset_topic>
   1c2d8:	2000c5f0 	.word	0x2000c5f0
   1c2dc:	2000c608 	.word	0x2000c608
   1c2e0:	2000c5fc 	.word	0x2000c5fc

0001c2e4 <build_topic>:
{
   1c2e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   1c2e8:	684d      	ldr	r5, [r1, #4]
{
   1c2ea:	4690      	mov	r8, r2
   1c2ec:	460f      	mov	r7, r1
   1c2ee:	461e      	mov	r6, r3
   1c2f0:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   1c2f2:	f7f4 fe63 	bl	10fbc <strlen>
   1c2f6:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   1c2f8:	4640      	mov	r0, r8
   1c2fa:	f7f4 fe5f 	bl	10fbc <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   1c2fe:	1c6b      	adds	r3, r5, #1
   1c300:	eb03 050a 	add.w	r5, r3, sl
   1c304:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   1c306:	2101      	movs	r1, #1
   1c308:	4620      	mov	r0, r4
   1c30a:	f00e fd65 	bl	2add8 <k_calloc>
	if (!buf) {
   1c30e:	4605      	mov	r5, r0
   1c310:	b938      	cbnz	r0, 1c322 <build_topic+0x3e>
		reset_topic(topic_out);
   1c312:	4630      	mov	r0, r6
   1c314:	f00c ffa5 	bl	29262 <reset_topic>
		return ret;
   1c318:	f06f 000b 	mvn.w	r0, #11
}
   1c31c:	b002      	add	sp, #8
   1c31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintk(buf, size, "%s%s%s",
   1c322:	4621      	mov	r1, r4
   1c324:	e9cd 9800 	strd	r9, r8, [sp]
   1c328:	683b      	ldr	r3, [r7, #0]
   1c32a:	4a08      	ldr	r2, [pc, #32]	; (1c34c <build_topic+0x68>)
   1c32c:	f009 fe00 	bl	25f30 <snprintk>
	if (ret <= 0 || ret >= size) {
   1c330:	2800      	cmp	r0, #0
   1c332:	dd01      	ble.n	1c338 <build_topic+0x54>
   1c334:	42a0      	cmp	r0, r4
   1c336:	d305      	bcc.n	1c344 <build_topic+0x60>
		nrf_cloud_free(buf);
   1c338:	4628      	mov	r0, r5
   1c33a:	f00e fd42 	bl	2adc2 <k_free>
		return ret;
   1c33e:	f06f 0006 	mvn.w	r0, #6
   1c342:	e7eb      	b.n	1c31c <build_topic+0x38>
	topic_out->size = ret;
   1c344:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   1c348:	2000      	movs	r0, #0
   1c34a:	e7e7      	b.n	1c31c <build_topic+0x38>
   1c34c:	0002f357 	.word	0x0002f357

0001c350 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   1c350:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   1c352:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   1c354:	f8cd 3003 	str.w	r3, [sp, #3]
   1c358:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   1c35c:	4b0b      	ldr	r3, [pc, #44]	; (1c38c <send_event.constprop.0+0x3c>)
	switch (id) {
   1c35e:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   1c360:	791a      	ldrb	r2, [r3, #4]
   1c362:	f88d 0000 	strb.w	r0, [sp]
   1c366:	f88d 2001 	strb.w	r2, [sp, #1]
   1c36a:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   1c36c:	bf08      	it	eq
   1c36e:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   1c370:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   1c374:	bf08      	it	eq
   1c376:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   1c37a:	4b05      	ldr	r3, [pc, #20]	; (1c390 <send_event.constprop.0+0x40>)
   1c37c:	681b      	ldr	r3, [r3, #0]
   1c37e:	b10b      	cbz	r3, 1c384 <send_event.constprop.0+0x34>
		event_cb(&evt);
   1c380:	4668      	mov	r0, sp
   1c382:	4798      	blx	r3
}
   1c384:	b003      	add	sp, #12
   1c386:	f85d fb04 	ldr.w	pc, [sp], #4
   1c38a:	bf00      	nop
   1c38c:	2000ecc0 	.word	0x2000ecc0
   1c390:	2000ece8 	.word	0x2000ece8

0001c394 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   1c394:	b510      	push	{r4, lr}
	if (job->parsed_payload) {
   1c396:	4c06      	ldr	r4, [pc, #24]	; (1c3b0 <cleanup_job.constprop.0+0x1c>)
   1c398:	6820      	ldr	r0, [r4, #0]
   1c39a:	b108      	cbz	r0, 1c3a0 <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   1c39c:	f002 fc62 	bl	1ec64 <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   1c3a0:	2228      	movs	r2, #40	; 0x28
   1c3a2:	2100      	movs	r1, #0
   1c3a4:	4802      	ldr	r0, [pc, #8]	; (1c3b0 <cleanup_job.constprop.0+0x1c>)
   1c3a6:	f00e fd6f 	bl	2ae88 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   1c3aa:	2303      	movs	r3, #3
   1c3ac:	7223      	strb	r3, [r4, #8]
}
   1c3ae:	bd10      	pop	{r4, pc}
   1c3b0:	2000ecc0 	.word	0x2000ecc0

0001c3b4 <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   1c3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   1c3b8:	68c3      	ldr	r3, [r0, #12]
{
   1c3ba:	4604      	mov	r4, r0
   1c3bc:	b087      	sub	sp, #28
	if ((job == NULL) || (job->info.id == NULL)) {
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d07c      	beq.n	1c4bc <send_job_update+0x108>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   1c3c2:	4b43      	ldr	r3, [pc, #268]	; (1c4d0 <send_job_update+0x11c>)
   1c3c4:	681b      	ldr	r3, [r3, #0]
   1c3c6:	2b00      	cmp	r3, #0
   1c3c8:	d07b      	beq.n	1c4c2 <send_job_update+0x10e>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   1c3ca:	4f42      	ldr	r7, [pc, #264]	; (1c4d4 <send_job_update+0x120>)
   1c3cc:	683b      	ldr	r3, [r7, #0]
   1c3ce:	2b00      	cmp	r3, #0
   1c3d0:	d07a      	beq.n	1c4c8 <send_job_update+0x114>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   1c3d2:	46e8      	mov	r8, sp
   1c3d4:	2218      	movs	r2, #24
   1c3d6:	2100      	movs	r1, #0
   1c3d8:	4640      	mov	r0, r8
   1c3da:	f00e fd55 	bl	2ae88 <memset>
   1c3de:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1c3e2:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   1c3e6:	f002 fcf3 	bl	1edd0 <cJSON_CreateArray>

	if (!array) {
   1c3ea:	4605      	mov	r5, r0
   1c3ec:	b928      	cbnz	r0, 1c3fa <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   1c3ee:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   1c3f2:	4628      	mov	r0, r5
   1c3f4:	b007      	add	sp, #28
   1c3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	cJSON *item = cJSON_CreateString(string);
   1c3fa:	68e0      	ldr	r0, [r4, #12]
   1c3fc:	f002 fcd0 	bl	1eda0 <cJSON_CreateString>
	if (item) {
   1c400:	4601      	mov	r1, r0
   1c402:	b9c8      	cbnz	r0, 1c438 <send_job_update+0x84>
	result = add_string_to_array(array, job->info.id) &&
   1c404:	2600      	movs	r6, #0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   1c406:	7923      	ldrb	r3, [r4, #4]
   1c408:	2b07      	cmp	r3, #7
   1c40a:	d127      	bne.n	1c45c <send_job_update+0xa8>
	cJSON *item = cJSON_CreateNumber(number);
   1c40c:	6a20      	ldr	r0, [r4, #32]
   1c40e:	f7f4 f869 	bl	104e4 <__aeabi_i2d>
   1c412:	ec41 0b10 	vmov	d0, r0, r1
   1c416:	f7f5 f873 	bl	11500 <cJSON_CreateNumber>
	if (item) {
   1c41a:	4681      	mov	r9, r0
   1c41c:	b118      	cbz	r0, 1c426 <send_job_update+0x72>
		cJSON_AddItemToArray(array, item);
   1c41e:	4601      	mov	r1, r0
   1c420:	4628      	mov	r0, r5
   1c422:	f00d f865 	bl	294f0 <cJSON_AddItemToArray>
		result &= add_string_to_array(array,
   1c426:	f1b9 0f00 	cmp.w	r9, #0
   1c42a:	bf08      	it	eq
   1c42c:	2600      	moveq	r6, #0
		cJSON_Delete(array);
   1c42e:	4628      	mov	r0, r5
	if (!result) {
   1c430:	bb06      	cbnz	r6, 1c474 <send_job_update+0xc0>
		cJSON_Delete(array);
   1c432:	f002 fc17 	bl	1ec64 <cJSON_Delete>
   1c436:	e7da      	b.n	1c3ee <send_job_update+0x3a>
		cJSON_AddItemToArray(array, item);
   1c438:	4628      	mov	r0, r5
   1c43a:	f00d f859 	bl	294f0 <cJSON_AddItemToArray>
	cJSON *item = cJSON_CreateNumber(number);
   1c43e:	7920      	ldrb	r0, [r4, #4]
   1c440:	f7f4 f850 	bl	104e4 <__aeabi_i2d>
   1c444:	ec41 0b10 	vmov	d0, r0, r1
   1c448:	f7f5 f85a 	bl	11500 <cJSON_CreateNumber>
	if (item) {
   1c44c:	4601      	mov	r1, r0
   1c44e:	2800      	cmp	r0, #0
   1c450:	d0d8      	beq.n	1c404 <send_job_update+0x50>
		cJSON_AddItemToArray(array, item);
   1c452:	4628      	mov	r0, r5
   1c454:	f00d f84c 	bl	294f0 <cJSON_AddItemToArray>
	result = add_string_to_array(array, job->info.id) &&
   1c458:	2601      	movs	r6, #1
   1c45a:	e7d4      	b.n	1c406 <send_job_update+0x52>
	switch (err) {
   1c45c:	7f23      	ldrb	r3, [r4, #28]
   1c45e:	3b01      	subs	r3, #1
   1c460:	b2db      	uxtb	r3, r3
   1c462:	2b04      	cmp	r3, #4
   1c464:	bf96      	itet	ls
   1c466:	4a1c      	ldrls	r2, [pc, #112]	; (1c4d8 <send_job_update+0x124>)
		result &= add_string_to_array(array,
   1c468:	481c      	ldrhi	r0, [pc, #112]	; (1c4dc <send_job_update+0x128>)
   1c46a:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
	cJSON *item = cJSON_CreateString(string);
   1c46e:	f002 fc97 	bl	1eda0 <cJSON_CreateString>
   1c472:	e7d2      	b.n	1c41a <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   1c474:	f00d f829 	bl	294ca <cJSON_PrintUnformatted>
   1c478:	4606      	mov	r6, r0
	cJSON_Delete(array);
   1c47a:	4628      	mov	r0, r5
   1c47c:	f002 fbf2 	bl	1ec64 <cJSON_Delete>
	if (array_str == NULL) {
   1c480:	2e00      	cmp	r6, #0
   1c482:	d0b4      	beq.n	1c3ee <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   1c484:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1c488:	e888 0007 	stmia.w	r8, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   1c48c:	4630      	mov	r0, r6
		pub_param->message.payload.data = array_str;
   1c48e:	9603      	str	r6, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   1c490:	f7f4 fd94 	bl	10fbc <strlen>
   1c494:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   1c496:	4640      	mov	r0, r8
   1c498:	f7ff febe 	bl	1c218 <publish>
   1c49c:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   1c49e:	4630      	mov	r0, r6
   1c4a0:	f00d f8c6 	bl	29630 <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   1c4a4:	2d00      	cmp	r5, #0
   1c4a6:	d1a4      	bne.n	1c3f2 <send_job_update+0x3e>
	switch (status) {
   1c4a8:	7923      	ldrb	r3, [r4, #4]
   1c4aa:	3b02      	subs	r3, #2
   1c4ac:	2b04      	cmp	r3, #4
   1c4ae:	d8a0      	bhi.n	1c3f2 <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   1c4b0:	2225      	movs	r2, #37	; 0x25
   1c4b2:	68e1      	ldr	r1, [r4, #12]
   1c4b4:	480a      	ldr	r0, [pc, #40]	; (1c4e0 <send_job_update+0x12c>)
   1c4b6:	f00e fe28 	bl	2b10a <strncpy>
   1c4ba:	e79a      	b.n	1c3f2 <send_job_update+0x3e>
		return -EINVAL;
   1c4bc:	f06f 0515 	mvn.w	r5, #21
   1c4c0:	e797      	b.n	1c3f2 <send_job_update+0x3e>
		return -ENXIO;
   1c4c2:	f06f 0505 	mvn.w	r5, #5
   1c4c6:	e794      	b.n	1c3f2 <send_job_update+0x3e>
		return -EHOSTUNREACH;
   1c4c8:	f06f 0575 	mvn.w	r5, #117	; 0x75
   1c4cc:	e791      	b.n	1c3f2 <send_job_update+0x3e>
   1c4ce:	bf00      	nop
   1c4d0:	2000ecbc 	.word	0x2000ecbc
   1c4d4:	2000c608 	.word	0x2000c608
   1c4d8:	0002ca90 	.word	0x0002ca90
   1c4dc:	0002fa74 	.word	0x0002fa74
   1c4e0:	2000f176 	.word	0x2000f176

0001c4e4 <http_fota_handler>:
{
   1c4e4:	b570      	push	{r4, r5, r6, lr}
   1c4e6:	7803      	ldrb	r3, [r0, #0]
   1c4e8:	4605      	mov	r5, r0
   1c4ea:	4e41      	ldr	r6, [pc, #260]	; (1c5f0 <http_fota_handler+0x10c>)
   1c4ec:	2b04      	cmp	r3, #4
   1c4ee:	d844      	bhi.n	1c57a <http_fota_handler+0x96>
   1c4f0:	e8df f003 	tbb	[pc, r3]
   1c4f4:	40250365 	.word	0x40250365
   1c4f8:	46          	.byte	0x46
   1c4f9:	00          	.byte	0x00
   1c4fa:	4b3e      	ldr	r3, [pc, #248]	; (1c5f4 <http_fota_handler+0x110>)
   1c4fc:	483e      	ldr	r0, [pc, #248]	; (1c5f8 <http_fota_handler+0x114>)
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   1c4fe:	4c3f      	ldr	r4, [pc, #252]	; (1c5fc <http_fota_handler+0x118>)
   1c500:	1ac0      	subs	r0, r0, r3
   1c502:	08c0      	lsrs	r0, r0, #3
		LOG_INF("Download complete");
   1c504:	0180      	lsls	r0, r0, #6
   1c506:	493e      	ldr	r1, [pc, #248]	; (1c600 <http_fota_handler+0x11c>)
   1c508:	f040 0003 	orr.w	r0, r0, #3
   1c50c:	f00a f80f 	bl	2652e <log_string_sync>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   1c510:	7923      	ldrb	r3, [r4, #4]
   1c512:	2b07      	cmp	r3, #7
   1c514:	d108      	bne.n	1c528 <http_fota_handler+0x44>
   1c516:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c518:	2b64      	cmp	r3, #100	; 0x64
   1c51a:	d005      	beq.n	1c528 <http_fota_handler+0x44>
			current_fota.dl_progress = 100;
   1c51c:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   1c51e:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   1c520:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   1c524:	f7ff ff46 	bl	1c3b4 <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   1c528:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   1c52a:	7a21      	ldrb	r1, [r4, #8]
   1c52c:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   1c52e:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   1c530:	f7ff fe90 	bl	1c254 <save_validate_status>
		ret = send_job_update(&current_fota);
   1c534:	4831      	ldr	r0, [pc, #196]	; (1c5fc <http_fota_handler+0x118>)
   1c536:	f7ff ff3d 	bl	1c3b4 <send_job_update>
   1c53a:	4604      	mov	r4, r0
		break;
   1c53c:	e00d      	b.n	1c55a <http_fota_handler+0x76>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   1c53e:	2201      	movs	r2, #1
   1c540:	4c2e      	ldr	r4, [pc, #184]	; (1c5fc <http_fota_handler+0x118>)
		save_validate_status(current_fota.info.id,
   1c542:	7a21      	ldrb	r1, [r4, #8]
   1c544:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   1c546:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   1c548:	f7ff fe84 	bl	1c254 <save_validate_status>
		ret = send_job_update(&current_fota);
   1c54c:	4620      	mov	r0, r4
   1c54e:	f7ff ff31 	bl	1c3b4 <send_job_update>
   1c552:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   1c554:	2003      	movs	r0, #3
   1c556:	f7ff fefb 	bl	1c350 <send_event.constprop.0>
	if (ret) {
   1c55a:	b174      	cbz	r4, 1c57a <http_fota_handler+0x96>
   1c55c:	4b25      	ldr	r3, [pc, #148]	; (1c5f4 <http_fota_handler+0x110>)
   1c55e:	4826      	ldr	r0, [pc, #152]	; (1c5f8 <http_fota_handler+0x114>)
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   1c560:	4622      	mov	r2, r4
   1c562:	1ac0      	subs	r0, r0, r3
   1c564:	08c0      	lsrs	r0, r0, #3
   1c566:	0180      	lsls	r0, r0, #6
   1c568:	4926      	ldr	r1, [pc, #152]	; (1c604 <http_fota_handler+0x120>)
   1c56a:	f040 0001 	orr.w	r0, r0, #1
   1c56e:	f009 ffde 	bl	2652e <log_string_sync>
   1c572:	e002      	b.n	1c57a <http_fota_handler+0x96>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   1c574:	2004      	movs	r0, #4
   1c576:	f7ff feeb 	bl	1c350 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   1c57a:	782b      	ldrb	r3, [r5, #0]
   1c57c:	7033      	strb	r3, [r6, #0]
}
   1c57e:	bd70      	pop	{r4, r5, r6, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   1c580:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   1c582:	7831      	ldrb	r1, [r6, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   1c584:	4b1d      	ldr	r3, [pc, #116]	; (1c5fc <http_fota_handler+0x118>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   1c586:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   1c588:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   1c58a:	d002      	beq.n	1c592 <http_fota_handler+0xae>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   1c58c:	7901      	ldrb	r1, [r0, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   1c58e:	4291      	cmp	r1, r2
   1c590:	d110      	bne.n	1c5b4 <http_fota_handler+0xd0>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   1c592:	2206      	movs	r2, #6
   1c594:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   1c596:	2205      	movs	r2, #5
   1c598:	7a19      	ldrb	r1, [r3, #8]
   1c59a:	68d8      	ldr	r0, [r3, #12]
   1c59c:	f7ff fe5a 	bl	1c254 <save_validate_status>
		ret = send_job_update(&current_fota);
   1c5a0:	4816      	ldr	r0, [pc, #88]	; (1c5fc <http_fota_handler+0x118>)
   1c5a2:	f7ff ff07 	bl	1c3b4 <send_job_update>
   1c5a6:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   1c5a8:	2002      	movs	r0, #2
   1c5aa:	f7ff fed1 	bl	1c350 <send_event.constprop.0>
		cleanup_job(&current_fota);
   1c5ae:	f7ff fef1 	bl	1c394 <cleanup_job.constprop.0>
		break;
   1c5b2:	e7d2      	b.n	1c55a <http_fota_handler+0x76>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   1c5b4:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   1c5b6:	bf08      	it	eq
   1c5b8:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   1c5ba:	771a      	strb	r2, [r3, #28]
   1c5bc:	e7eb      	b.n	1c596 <http_fota_handler+0xb2>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   1c5be:	2207      	movs	r2, #7
   1c5c0:	4b0e      	ldr	r3, [pc, #56]	; (1c5fc <http_fota_handler+0x118>)
		if ((current_fota.sent_dl_progress == 100) &&
   1c5c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   1c5c4:	711a      	strb	r2, [r3, #4]
		current_fota.dl_progress = evt->progress;
   1c5c6:	6842      	ldr	r2, [r0, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   1c5c8:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   1c5ca:	621a      	str	r2, [r3, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   1c5cc:	d108      	bne.n	1c5e0 <http_fota_handler+0xfc>
   1c5ce:	2a64      	cmp	r2, #100	; 0x64
   1c5d0:	d0d3      	beq.n	1c57a <http_fota_handler+0x96>
		if (current_fota.sent_dl_progress >
   1c5d2:	2a63      	cmp	r2, #99	; 0x63
   1c5d4:	dd06      	ble.n	1c5e4 <http_fota_handler+0x100>
		    (((current_fota.dl_progress -
   1c5d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c5d8:	1a51      	subs	r1, r2, r1
		if (current_fota.dl_progress != 100 &&
   1c5da:	2909      	cmp	r1, #9
   1c5dc:	ddcd      	ble.n	1c57a <http_fota_handler+0x96>
   1c5de:	e005      	b.n	1c5ec <http_fota_handler+0x108>
		if (current_fota.sent_dl_progress >
   1c5e0:	428a      	cmp	r2, r1
   1c5e2:	da01      	bge.n	1c5e8 <http_fota_handler+0x104>
			current_fota.sent_dl_progress = 0;
   1c5e4:	2100      	movs	r1, #0
   1c5e6:	6259      	str	r1, [r3, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   1c5e8:	2a64      	cmp	r2, #100	; 0x64
   1c5ea:	d1f4      	bne.n	1c5d6 <http_fota_handler+0xf2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   1c5ec:	625a      	str	r2, [r3, #36]	; 0x24
   1c5ee:	e7a1      	b.n	1c534 <http_fota_handler+0x50>
   1c5f0:	2000c881 	.word	0x2000c881
   1c5f4:	0002c344 	.word	0x0002c344
   1c5f8:	0002c3dc 	.word	0x0002c3dc
   1c5fc:	2000ecc0 	.word	0x2000ecc0
   1c600:	0002f35e 	.word	0x0002f35e
   1c604:	0002f370 	.word	0x0002f370

0001c608 <report_validated_job_status>:
{
   1c608:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   1c60a:	4c27      	ldr	r4, [pc, #156]	; (1c6a8 <report_validated_job_status+0xa0>)
{
   1c60c:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   1c60e:	7865      	ldrb	r5, [r4, #1]
   1c610:	2d03      	cmp	r5, #3
   1c612:	d046      	beq.n	1c6a2 <report_validated_job_status+0x9a>
	struct nrf_cloud_fota_job job = {
   1c614:	2228      	movs	r2, #40	; 0x28
   1c616:	2100      	movs	r1, #0
   1c618:	4668      	mov	r0, sp
   1c61a:	f00e fc35 	bl	2ae88 <memset>
	switch (saved_job.validate) {
   1c61e:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   1c620:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   1c622:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   1c624:	f88d 5008 	strb.w	r5, [sp, #8]
   1c628:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   1c62a:	d022      	beq.n	1c672 <report_validated_job_status+0x6a>
   1c62c:	2a04      	cmp	r2, #4
   1c62e:	f04f 0503 	mov.w	r5, #3
   1c632:	d01b      	beq.n	1c66c <report_validated_job_status+0x64>
   1c634:	2a02      	cmp	r2, #2
   1c636:	d120      	bne.n	1c67a <report_validated_job_status+0x72>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   1c638:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   1c63c:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   1c63e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1c642:	2b03      	cmp	r3, #3
   1c644:	d00f      	beq.n	1c666 <report_validated_job_status+0x5e>
		ret = send_job_update(&job);
   1c646:	4668      	mov	r0, sp
   1c648:	f7ff feb4 	bl	1c3b4 <send_job_update>
		if (ret) {
   1c64c:	4604      	mov	r4, r0
   1c64e:	b150      	cbz	r0, 1c666 <report_validated_job_status+0x5e>
   1c650:	4816      	ldr	r0, [pc, #88]	; (1c6ac <report_validated_job_status+0xa4>)
   1c652:	4b17      	ldr	r3, [pc, #92]	; (1c6b0 <report_validated_job_status+0xa8>)
			LOG_ERR("Error sending job update: %d", ret);
   1c654:	4622      	mov	r2, r4
   1c656:	1ac0      	subs	r0, r0, r3
   1c658:	08c0      	lsrs	r0, r0, #3
   1c65a:	0180      	lsls	r0, r0, #6
   1c65c:	4915      	ldr	r1, [pc, #84]	; (1c6b4 <report_validated_job_status+0xac>)
   1c65e:	f040 0001 	orr.w	r0, r0, #1
   1c662:	f009 ff64 	bl	2652e <log_string_sync>
}
   1c666:	4620      	mov	r0, r4
   1c668:	b00b      	add	sp, #44	; 0x2c
   1c66a:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   1c66c:	f88d 501c 	strb.w	r5, [sp, #28]
   1c670:	e7e2      	b.n	1c638 <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   1c672:	2302      	movs	r3, #2
   1c674:	f88d 3004 	strb.w	r3, [sp, #4]
   1c678:	e7e0      	b.n	1c63c <report_validated_job_status+0x34>
   1c67a:	4b0d      	ldr	r3, [pc, #52]	; (1c6b0 <report_validated_job_status+0xa8>)
   1c67c:	480b      	ldr	r0, [pc, #44]	; (1c6ac <report_validated_job_status+0xa4>)
		LOG_ERR("Unexpected job validation status: %d",
   1c67e:	490e      	ldr	r1, [pc, #56]	; (1c6b8 <report_validated_job_status+0xb0>)
   1c680:	1ac0      	subs	r0, r0, r3
   1c682:	08c0      	lsrs	r0, r0, #3
   1c684:	0180      	lsls	r0, r0, #6
   1c686:	f040 0001 	orr.w	r0, r0, #1
   1c68a:	f009 ff50 	bl	2652e <log_string_sync>
		ret = save_validate_status(job.info.id, job.info.type,
   1c68e:	2205      	movs	r2, #5
   1c690:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1c694:	9803      	ldr	r0, [sp, #12]
   1c696:	f7ff fddd 	bl	1c254 <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   1c69a:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   1c69e:	4604      	mov	r4, r0
		break;
   1c6a0:	e7cd      	b.n	1c63e <report_validated_job_status+0x36>
		return 1;
   1c6a2:	2401      	movs	r4, #1
   1c6a4:	e7df      	b.n	1c666 <report_validated_job_status+0x5e>
   1c6a6:	bf00      	nop
   1c6a8:	2000c882 	.word	0x2000c882
   1c6ac:	0002c3dc 	.word	0x0002c3dc
   1c6b0:	0002c344 	.word	0x0002c344
   1c6b4:	0002f3bc 	.word	0x0002f3bc
   1c6b8:	0002f397 	.word	0x0002f397

0001c6bc <nrf_cloud_fota_init>:
{
   1c6bc:	b570      	push	{r4, r5, r6, lr}
	if (cb == NULL) {
   1c6be:	b968      	cbnz	r0, 1c6dc <nrf_cloud_fota_init+0x20>
   1c6c0:	4b46      	ldr	r3, [pc, #280]	; (1c7dc <nrf_cloud_fota_init+0x120>)
   1c6c2:	4847      	ldr	r0, [pc, #284]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
		LOG_ERR("Invalid parameter");
   1c6c4:	4947      	ldr	r1, [pc, #284]	; (1c7e4 <nrf_cloud_fota_init+0x128>)
   1c6c6:	1ac0      	subs	r0, r0, r3
   1c6c8:	08c0      	lsrs	r0, r0, #3
   1c6ca:	0180      	lsls	r0, r0, #6
   1c6cc:	f040 0001 	orr.w	r0, r0, #1
   1c6d0:	f009 ff2d 	bl	2652e <log_string_sync>
		return -EINVAL;
   1c6d4:	f06f 0415 	mvn.w	r4, #21
}
   1c6d8:	4620      	mov	r0, r4
   1c6da:	bd70      	pop	{r4, r5, r6, pc}
	event_cb = cb;
   1c6dc:	4b42      	ldr	r3, [pc, #264]	; (1c7e8 <nrf_cloud_fota_init+0x12c>)
	if (initialized) {
   1c6de:	4d43      	ldr	r5, [pc, #268]	; (1c7ec <nrf_cloud_fota_init+0x130>)
	event_cb = cb;
   1c6e0:	6018      	str	r0, [r3, #0]
	if (initialized) {
   1c6e2:	782b      	ldrb	r3, [r5, #0]
   1c6e4:	2b00      	cmp	r3, #0
   1c6e6:	d177      	bne.n	1c7d8 <nrf_cloud_fota_init+0x11c>
	if (!fota_dl_initialized) {
   1c6e8:	4e41      	ldr	r6, [pc, #260]	; (1c7f0 <nrf_cloud_fota_init+0x134>)
   1c6ea:	7833      	ldrb	r3, [r6, #0]
   1c6ec:	b993      	cbnz	r3, 1c714 <nrf_cloud_fota_init+0x58>
		ret = fota_download_init(http_fota_handler);
   1c6ee:	4841      	ldr	r0, [pc, #260]	; (1c7f4 <nrf_cloud_fota_init+0x138>)
   1c6f0:	f001 fbb4 	bl	1de5c <fota_download_init>
		if (ret != 0) {
   1c6f4:	4604      	mov	r4, r0
   1c6f6:	b158      	cbz	r0, 1c710 <nrf_cloud_fota_init+0x54>
			LOG_ERR("fota_download_init error: %d", ret);
   1c6f8:	4622      	mov	r2, r4
   1c6fa:	4839      	ldr	r0, [pc, #228]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
   1c6fc:	4b37      	ldr	r3, [pc, #220]	; (1c7dc <nrf_cloud_fota_init+0x120>)
   1c6fe:	493e      	ldr	r1, [pc, #248]	; (1c7f8 <nrf_cloud_fota_init+0x13c>)
   1c700:	1ac0      	subs	r0, r0, r3
   1c702:	08c0      	lsrs	r0, r0, #3
   1c704:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot load settings: %d", ret);
   1c706:	f040 0001 	orr.w	r0, r0, #1
   1c70a:	f009 ff10 	bl	2652e <log_string_sync>
		return ret;
   1c70e:	e7e3      	b.n	1c6d8 <nrf_cloud_fota_init+0x1c>
		fota_dl_initialized = true;
   1c710:	2301      	movs	r3, #1
   1c712:	7033      	strb	r3, [r6, #0]
	ret = settings_load_subtree(settings_handler_fota.name);
   1c714:	4839      	ldr	r0, [pc, #228]	; (1c7fc <nrf_cloud_fota_init+0x140>)
   1c716:	f7f8 fc19 	bl	14f4c <settings_load_subtree>
	if (ret) {
   1c71a:	4604      	mov	r4, r0
   1c71c:	b138      	cbz	r0, 1c72e <nrf_cloud_fota_init+0x72>
   1c71e:	4830      	ldr	r0, [pc, #192]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
   1c720:	4b2e      	ldr	r3, [pc, #184]	; (1c7dc <nrf_cloud_fota_init+0x120>)
		LOG_ERR("Cannot load settings: %d", ret);
   1c722:	4622      	mov	r2, r4
   1c724:	1ac0      	subs	r0, r0, r3
   1c726:	08c0      	lsrs	r0, r0, #3
   1c728:	4935      	ldr	r1, [pc, #212]	; (1c800 <nrf_cloud_fota_init+0x144>)
   1c72a:	0180      	lsls	r0, r0, #6
   1c72c:	e7eb      	b.n	1c706 <nrf_cloud_fota_init+0x4a>
	if (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   1c72e:	4a35      	ldr	r2, [pc, #212]	; (1c804 <nrf_cloud_fota_init+0x148>)
   1c730:	7813      	ldrb	r3, [r2, #0]
   1c732:	4616      	mov	r6, r2
   1c734:	2b01      	cmp	r3, #1
   1c736:	d13b      	bne.n	1c7b0 <nrf_cloud_fota_init+0xf4>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   1c738:	7853      	ldrb	r3, [r2, #1]
   1c73a:	2b01      	cmp	r3, #1
   1c73c:	d107      	bne.n	1c74e <nrf_cloud_fota_init+0x92>
	int modem_dfu_res = nrf_modem_lib_get_init_ret();
   1c73e:	f7fb f9b3 	bl	17aa8 <nrf_modem_lib_get_init_ret>
	switch (modem_dfu_res) {
   1c742:	4b31      	ldr	r3, [pc, #196]	; (1c808 <nrf_cloud_fota_init+0x14c>)
   1c744:	4298      	cmp	r0, r3
   1c746:	dc04      	bgt.n	1c752 <nrf_cloud_fota_init+0x96>
   1c748:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   1c74c:	dc23      	bgt.n	1c796 <nrf_cloud_fota_init+0xda>
   1c74e:	2204      	movs	r2, #4
   1c750:	e00d      	b.n	1c76e <nrf_cloud_fota_init+0xb2>
   1c752:	4b2e      	ldr	r3, [pc, #184]	; (1c80c <nrf_cloud_fota_init+0x150>)
   1c754:	4298      	cmp	r0, r3
   1c756:	d1fa      	bne.n	1c74e <nrf_cloud_fota_init+0x92>
   1c758:	4b20      	ldr	r3, [pc, #128]	; (1c7dc <nrf_cloud_fota_init+0x120>)
   1c75a:	4821      	ldr	r0, [pc, #132]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
		LOG_INF("Modem FOTA update confirmed");
   1c75c:	492c      	ldr	r1, [pc, #176]	; (1c810 <nrf_cloud_fota_init+0x154>)
   1c75e:	1ac0      	subs	r0, r0, r3
   1c760:	08c0      	lsrs	r0, r0, #3
   1c762:	0180      	lsls	r0, r0, #6
   1c764:	f040 0003 	orr.w	r0, r0, #3
   1c768:	f009 fee1 	bl	2652e <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_PASS;
   1c76c:	2202      	movs	r2, #2
		save_validate_status(saved_job.id, saved_job.type, validate);
   1c76e:	7871      	ldrb	r1, [r6, #1]
   1c770:	4828      	ldr	r0, [pc, #160]	; (1c814 <nrf_cloud_fota_init+0x158>)
   1c772:	f7ff fd6f 	bl	1c254 <save_validate_status>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   1c776:	7874      	ldrb	r4, [r6, #1]
   1c778:	2c01      	cmp	r4, #1
   1c77a:	d129      	bne.n	1c7d0 <nrf_cloud_fota_init+0x114>
   1c77c:	4b17      	ldr	r3, [pc, #92]	; (1c7dc <nrf_cloud_fota_init+0x120>)
   1c77e:	4818      	ldr	r0, [pc, #96]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
			LOG_INF("Rebooting to complete modem FOTA");
   1c780:	4925      	ldr	r1, [pc, #148]	; (1c818 <nrf_cloud_fota_init+0x15c>)
   1c782:	1ac0      	subs	r0, r0, r3
   1c784:	08c0      	lsrs	r0, r0, #3
   1c786:	0180      	lsls	r0, r0, #6
   1c788:	f040 0003 	orr.w	r0, r0, #3
   1c78c:	f009 fecf 	bl	2652e <log_string_sync>
			sys_reboot(SYS_REBOOT_COLD);
   1c790:	4620      	mov	r0, r4
   1c792:	f7f7 ff01 	bl	14598 <sys_reboot>
   1c796:	4a11      	ldr	r2, [pc, #68]	; (1c7dc <nrf_cloud_fota_init+0x120>)
   1c798:	4b11      	ldr	r3, [pc, #68]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
		LOG_ERR("Modem FOTA error: %d", modem_dfu_res);
   1c79a:	4920      	ldr	r1, [pc, #128]	; (1c81c <nrf_cloud_fota_init+0x160>)
   1c79c:	1a9b      	subs	r3, r3, r2
   1c79e:	08db      	lsrs	r3, r3, #3
   1c7a0:	019b      	lsls	r3, r3, #6
   1c7a2:	4602      	mov	r2, r0
   1c7a4:	f043 0001 	orr.w	r0, r3, #1
   1c7a8:	f009 fec1 	bl	2652e <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   1c7ac:	2203      	movs	r2, #3
		break;
   1c7ae:	e7de      	b.n	1c76e <nrf_cloud_fota_init+0xb2>
	} else if ((saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PASS ||
   1c7b0:	3b02      	subs	r3, #2
   1c7b2:	2b02      	cmp	r3, #2
   1c7b4:	d80d      	bhi.n	1c7d2 <nrf_cloud_fota_init+0x116>
		    saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_UNKNOWN) &&
   1c7b6:	7856      	ldrb	r6, [r2, #1]
   1c7b8:	2e01      	cmp	r6, #1
   1c7ba:	d10a      	bne.n	1c7d2 <nrf_cloud_fota_init+0x116>
   1c7bc:	4808      	ldr	r0, [pc, #32]	; (1c7e0 <nrf_cloud_fota_init+0x124>)
   1c7be:	4b07      	ldr	r3, [pc, #28]	; (1c7dc <nrf_cloud_fota_init+0x120>)
		LOG_INF("FOTA updated modem");
   1c7c0:	4917      	ldr	r1, [pc, #92]	; (1c820 <nrf_cloud_fota_init+0x164>)
   1c7c2:	1ac0      	subs	r0, r0, r3
   1c7c4:	08c0      	lsrs	r0, r0, #3
   1c7c6:	0180      	lsls	r0, r0, #6
   1c7c8:	f040 0003 	orr.w	r0, r0, #3
   1c7cc:	f009 feaf 	bl	2652e <log_string_sync>
			ret = 1;
   1c7d0:	2401      	movs	r4, #1
	initialized = true;
   1c7d2:	2301      	movs	r3, #1
   1c7d4:	702b      	strb	r3, [r5, #0]
	return ret;
   1c7d6:	e77f      	b.n	1c6d8 <nrf_cloud_fota_init+0x1c>
		return 0;
   1c7d8:	2400      	movs	r4, #0
   1c7da:	e77d      	b.n	1c6d8 <nrf_cloud_fota_init+0x1c>
   1c7dc:	0002c344 	.word	0x0002c344
   1c7e0:	0002c3dc 	.word	0x0002c3dc
   1c7e4:	0002f3d9 	.word	0x0002f3d9
   1c7e8:	2000ece8 	.word	0x2000ece8
   1c7ec:	2000f175 	.word	0x2000f175
   1c7f0:	2000f174 	.word	0x2000f174
   1c7f4:	0001c4e5 	.word	0x0001c4e5
   1c7f8:	0002f3eb 	.word	0x0002f3eb
   1c7fc:	0002f408 	.word	0x0002f408
   1c800:	0002f0ae 	.word	0x0002f0ae
   1c804:	2000c882 	.word	0x2000c882
   1c808:	04400004 	.word	0x04400004
   1c80c:	05500001 	.word	0x05500001
   1c810:	0002f417 	.word	0x0002f417
   1c814:	2000c884 	.word	0x2000c884
   1c818:	0002f448 	.word	0x0002f448
   1c81c:	0002f433 	.word	0x0002f433
   1c820:	0002f469 	.word	0x0002f469

0001c824 <nrf_cloud_fota_endpoint_set>:
{
   1c824:	b570      	push	{r4, r5, r6, lr}
   1c826:	460e      	mov	r6, r1
   1c828:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   1c82a:	b328      	cbz	r0, 1c878 <nrf_cloud_fota_endpoint_set+0x54>
   1c82c:	b322      	cbz	r2, 1c878 <nrf_cloud_fota_endpoint_set+0x54>
   1c82e:	6813      	ldr	r3, [r2, #0]
   1c830:	b313      	cbz	r3, 1c878 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   1c832:	6853      	ldr	r3, [r2, #4]
   1c834:	b303      	cbz	r3, 1c878 <nrf_cloud_fota_endpoint_set+0x54>
   1c836:	b1f9      	cbz	r1, 1c878 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   1c838:	4b11      	ldr	r3, [pc, #68]	; (1c880 <nrf_cloud_fota_endpoint_set+0x5c>)
   1c83a:	6018      	str	r0, [r3, #0]
	reset_topics();
   1c83c:	f7ff fd40 	bl	1c2c0 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   1c840:	4629      	mov	r1, r5
   1c842:	4630      	mov	r0, r6
   1c844:	4b0f      	ldr	r3, [pc, #60]	; (1c884 <nrf_cloud_fota_endpoint_set+0x60>)
   1c846:	4a10      	ldr	r2, [pc, #64]	; (1c888 <nrf_cloud_fota_endpoint_set+0x64>)
   1c848:	f7ff fd4c 	bl	1c2e4 <build_topic>
	if (ret) {
   1c84c:	4604      	mov	r4, r0
   1c84e:	b978      	cbnz	r0, 1c870 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   1c850:	4629      	mov	r1, r5
   1c852:	4630      	mov	r0, r6
   1c854:	4b0d      	ldr	r3, [pc, #52]	; (1c88c <nrf_cloud_fota_endpoint_set+0x68>)
   1c856:	4a0e      	ldr	r2, [pc, #56]	; (1c890 <nrf_cloud_fota_endpoint_set+0x6c>)
   1c858:	f7ff fd44 	bl	1c2e4 <build_topic>
	if (ret) {
   1c85c:	4604      	mov	r4, r0
   1c85e:	b938      	cbnz	r0, 1c870 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   1c860:	4629      	mov	r1, r5
   1c862:	4630      	mov	r0, r6
   1c864:	4b0b      	ldr	r3, [pc, #44]	; (1c894 <nrf_cloud_fota_endpoint_set+0x70>)
   1c866:	4a0c      	ldr	r2, [pc, #48]	; (1c898 <nrf_cloud_fota_endpoint_set+0x74>)
   1c868:	f7ff fd3c 	bl	1c2e4 <build_topic>
	if (ret) {
   1c86c:	4604      	mov	r4, r0
   1c86e:	b108      	cbz	r0, 1c874 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   1c870:	f7ff fd26 	bl	1c2c0 <reset_topics>
}
   1c874:	4620      	mov	r0, r4
   1c876:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1c878:	f06f 0415 	mvn.w	r4, #21
   1c87c:	e7fa      	b.n	1c874 <nrf_cloud_fota_endpoint_set+0x50>
   1c87e:	bf00      	nop
   1c880:	2000ecbc 	.word	0x2000ecbc
   1c884:	2000c5f0 	.word	0x2000c5f0
   1c888:	0002f47c 	.word	0x0002f47c
   1c88c:	2000c608 	.word	0x2000c608
   1c890:	0002f486 	.word	0x0002f486
   1c894:	2000c5fc 	.word	0x2000c5fc
   1c898:	0002f493 	.word	0x0002f493

0001c89c <nrf_cloud_fota_endpoint_set_and_report>:
{
   1c89c:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   1c89e:	f7ff ffc1 	bl	1c824 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   1c8a2:	4604      	mov	r4, r0
   1c8a4:	b160      	cbz	r0, 1c8c0 <nrf_cloud_fota_endpoint_set_and_report+0x24>
   1c8a6:	4809      	ldr	r0, [pc, #36]	; (1c8cc <nrf_cloud_fota_endpoint_set_and_report+0x30>)
   1c8a8:	4b09      	ldr	r3, [pc, #36]	; (1c8d0 <nrf_cloud_fota_endpoint_set_and_report+0x34>)
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   1c8aa:	4622      	mov	r2, r4
   1c8ac:	1ac0      	subs	r0, r0, r3
   1c8ae:	08c0      	lsrs	r0, r0, #3
   1c8b0:	0180      	lsls	r0, r0, #6
   1c8b2:	4908      	ldr	r1, [pc, #32]	; (1c8d4 <nrf_cloud_fota_endpoint_set_and_report+0x38>)
   1c8b4:	f040 0001 	orr.w	r0, r0, #1
   1c8b8:	f009 fe39 	bl	2652e <log_string_sync>
}
   1c8bc:	4620      	mov	r0, r4
   1c8be:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   1c8c0:	f7ff fea2 	bl	1c608 <report_validated_job_status>
	if (ret > 0) {
   1c8c4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   1c8c8:	e7f8      	b.n	1c8bc <nrf_cloud_fota_endpoint_set_and_report+0x20>
   1c8ca:	bf00      	nop
   1c8cc:	0002c3dc 	.word	0x0002c3dc
   1c8d0:	0002c344 	.word	0x0002c344
   1c8d4:	0002f49d 	.word	0x0002f49d

0001c8d8 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   1c8d8:	2200      	movs	r2, #0
   1c8da:	4b02      	ldr	r3, [pc, #8]	; (1c8e4 <nrf_cloud_fota_endpoint_clear+0xc>)
   1c8dc:	601a      	str	r2, [r3, #0]
	reset_topics();
   1c8de:	f7ff bcef 	b.w	1c2c0 <reset_topics>
   1c8e2:	bf00      	nop
   1c8e4:	2000ecbc 	.word	0x2000ecbc

0001c8e8 <nrf_cloud_fota_subscribe>:
{
   1c8e8:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   1c8ea:	466b      	mov	r3, sp
   1c8ec:	4a0a      	ldr	r2, [pc, #40]	; (1c918 <nrf_cloud_fota_subscribe+0x30>)
   1c8ee:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   1c8f2:	4a0a      	ldr	r2, [pc, #40]	; (1c91c <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   1c8f4:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   1c8f8:	6851      	ldr	r1, [r2, #4]
   1c8fa:	b149      	cbz	r1, 1c910 <nrf_cloud_fota_subscribe+0x28>
   1c8fc:	6812      	ldr	r2, [r2, #0]
   1c8fe:	b13a      	cbz	r2, 1c910 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   1c900:	4619      	mov	r1, r3
   1c902:	4b07      	ldr	r3, [pc, #28]	; (1c920 <nrf_cloud_fota_subscribe+0x38>)
   1c904:	6818      	ldr	r0, [r3, #0]
   1c906:	f00b fb04 	bl	27f12 <mqtt_subscribe>
}
   1c90a:	b003      	add	sp, #12
   1c90c:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   1c910:	f06f 000d 	mvn.w	r0, #13
   1c914:	e7f9      	b.n	1c90a <nrf_cloud_fota_subscribe+0x22>
   1c916:	bf00      	nop
   1c918:	0002c468 	.word	0x0002c468
   1c91c:	2000c5f0 	.word	0x2000c5f0
   1c920:	2000ecbc 	.word	0x2000ecbc

0001c924 <nrf_cloud_fota_unsubscribe>:
{
   1c924:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   1c926:	466b      	mov	r3, sp
   1c928:	4a0a      	ldr	r2, [pc, #40]	; (1c954 <nrf_cloud_fota_unsubscribe+0x30>)
   1c92a:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   1c92e:	4a0a      	ldr	r2, [pc, #40]	; (1c958 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   1c930:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   1c934:	6851      	ldr	r1, [r2, #4]
   1c936:	b149      	cbz	r1, 1c94c <nrf_cloud_fota_unsubscribe+0x28>
   1c938:	6812      	ldr	r2, [r2, #0]
   1c93a:	b13a      	cbz	r2, 1c94c <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   1c93c:	4619      	mov	r1, r3
   1c93e:	4b07      	ldr	r3, [pc, #28]	; (1c95c <nrf_cloud_fota_unsubscribe+0x38>)
   1c940:	6818      	ldr	r0, [r3, #0]
   1c942:	f00b fb0d 	bl	27f60 <mqtt_unsubscribe>
}
   1c946:	b003      	add	sp, #12
   1c948:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   1c94c:	f06f 000d 	mvn.w	r0, #13
   1c950:	e7f9      	b.n	1c946 <nrf_cloud_fota_unsubscribe+0x22>
   1c952:	bf00      	nop
   1c954:	0002c470 	.word	0x0002c470
   1c958:	2000c5f0 	.word	0x2000c5f0
   1c95c:	2000ecbc 	.word	0x2000ecbc

0001c960 <nrf_cloud_fota_uninit>:
	return current_fota.parsed_payload != NULL;
   1c960:	4b09      	ldr	r3, [pc, #36]	; (1c988 <nrf_cloud_fota_uninit+0x28>)
{
   1c962:	b510      	push	{r4, lr}
	if (nrf_cloud_fota_is_active()) {
   1c964:	681c      	ldr	r4, [r3, #0]
   1c966:	b95c      	cbnz	r4, 1c980 <nrf_cloud_fota_uninit+0x20>
	event_cb = NULL;
   1c968:	4b08      	ldr	r3, [pc, #32]	; (1c98c <nrf_cloud_fota_uninit+0x2c>)
   1c96a:	601c      	str	r4, [r3, #0]
	initialized = false;
   1c96c:	4b08      	ldr	r3, [pc, #32]	; (1c990 <nrf_cloud_fota_uninit+0x30>)
   1c96e:	701c      	strb	r4, [r3, #0]
	(void)nrf_cloud_fota_unsubscribe();
   1c970:	f7ff ffd8 	bl	1c924 <nrf_cloud_fota_unsubscribe>
	reset_topics();
   1c974:	f7ff fca4 	bl	1c2c0 <reset_topics>
	cleanup_job(&current_fota);
   1c978:	f7ff fd0c 	bl	1c394 <cleanup_job.constprop.0>
	return 0;
   1c97c:	4620      	mov	r0, r4
}
   1c97e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1c980:	f06f 000f 	mvn.w	r0, #15
   1c984:	e7fb      	b.n	1c97e <nrf_cloud_fota_uninit+0x1e>
   1c986:	bf00      	nop
   1c988:	2000ecc0 	.word	0x2000ecc0
   1c98c:	2000ece8 	.word	0x2000ece8
   1c990:	2000f175 	.word	0x2000f175

0001c994 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   1c994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   1c996:	4b10      	ldr	r3, [pc, #64]	; (1c9d8 <nrf_cloud_fota_update_check+0x44>)
   1c998:	681b      	ldr	r3, [r3, #0]
   1c99a:	b1b3      	cbz	r3, 1c9ca <nrf_cloud_fota_update_check+0x36>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   1c99c:	4a0f      	ldr	r2, [pc, #60]	; (1c9dc <nrf_cloud_fota_update_check+0x48>)
   1c99e:	6813      	ldr	r3, [r2, #0]
   1c9a0:	b1b3      	cbz	r3, 1c9d0 <nrf_cloud_fota_update_check+0x3c>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   1c9a2:	ca07      	ldmia	r2, {r0, r1, r2}
	struct mqtt_publish_param param = {
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	f8ad 3016 	strh.w	r3, [sp, #22]
   1c9aa:	23c9      	movs	r3, #201	; 0xc9
   1c9ac:	f8ad 3014 	strh.w	r3, [sp, #20]
	param.message.topic = topic_req;
   1c9b0:	466b      	mov	r3, sp
   1c9b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   1c9b6:	4a0a      	ldr	r2, [pc, #40]	; (1c9e0 <nrf_cloud_fota_update_check+0x4c>)
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   1c9b8:	4618      	mov	r0, r3
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   1c9ba:	9203      	str	r2, [sp, #12]
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;
   1c9bc:	2204      	movs	r2, #4
   1c9be:	9204      	str	r2, [sp, #16]
	return publish(&param);
   1c9c0:	f7ff fc2a 	bl	1c218 <publish>
}
   1c9c4:	b007      	add	sp, #28
   1c9c6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   1c9ca:	f06f 0005 	mvn.w	r0, #5
   1c9ce:	e7f9      	b.n	1c9c4 <nrf_cloud_fota_update_check+0x30>
		return -EHOSTUNREACH;
   1c9d0:	f06f 0075 	mvn.w	r0, #117	; 0x75
   1c9d4:	e7f6      	b.n	1c9c4 <nrf_cloud_fota_update_check+0x30>
   1c9d6:	bf00      	nop
   1c9d8:	2000ecbc 	.word	0x2000ecbc
   1c9dc:	2000c5fc 	.word	0x2000c5fc
   1c9e0:	0002f4bd 	.word	0x0002f4bd

0001c9e4 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   1c9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   1c9e8:	4bb3      	ldr	r3, [pc, #716]	; (1ccb8 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
{
   1c9ea:	4607      	mov	r7, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   1c9ec:	6818      	ldr	r0, [r3, #0]
   1c9ee:	2800      	cmp	r0, #0
   1c9f0:	f000 81c5 	beq.w	1cd7e <nrf_cloud_fota_mqtt_evt_handler+0x39a>
   1c9f4:	685b      	ldr	r3, [r3, #4]
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	f000 81c1 	beq.w	1cd7e <nrf_cloud_fota_mqtt_evt_handler+0x39a>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   1c9fc:	f897 8000 	ldrb.w	r8, [r7]
   1ca00:	f1b8 0f09 	cmp.w	r8, #9
   1ca04:	f200 8139 	bhi.w	1cc7a <nrf_cloud_fota_mqtt_evt_handler+0x296>
   1ca08:	e8df f018 	tbh	[pc, r8, lsl #1]
   1ca0c:	01b901b9 	.word	0x01b901b9
   1ca10:	0198000a 	.word	0x0198000a
   1ca14:	01b901b9 	.word	0x01b901b9
   1ca18:	018d01b9 	.word	0x018d01b9
   1ca1c:	01b90193 	.word	0x01b90193
	struct mqtt_puback_param ack = {
   1ca20:	8b3b      	ldrh	r3, [r7, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   1ca22:	6879      	ldr	r1, [r7, #4]
	struct mqtt_puback_param ack = {
   1ca24:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   1ca28:	f00e fba3 	bl	2b172 <strstr>
   1ca2c:	2800      	cmp	r0, #0
   1ca2e:	f000 81a6 	beq.w	1cd7e <nrf_cloud_fota_mqtt_evt_handler+0x39a>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   1ca32:	2101      	movs	r1, #1
   1ca34:	6978      	ldr	r0, [r7, #20]
   1ca36:	4408      	add	r0, r1
   1ca38:	f00e f9ce 	bl	2add8 <k_calloc>
	if (!payload) {
   1ca3c:	4606      	mov	r6, r0
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d134      	bne.n	1caac <nrf_cloud_fota_mqtt_evt_handler+0xc8>
   1ca42:	4b9e      	ldr	r3, [pc, #632]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1ca44:	489e      	ldr	r0, [pc, #632]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
		LOG_ERR("Unable to allocate memory for job");
   1ca46:	499f      	ldr	r1, [pc, #636]	; (1ccc4 <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   1ca48:	1ac0      	subs	r0, r0, r3
   1ca4a:	08c0      	lsrs	r0, r0, #3
   1ca4c:	0180      	lsls	r0, r0, #6
   1ca4e:	f040 0001 	orr.w	r0, r0, #1
   1ca52:	f009 fd6c 	bl	2652e <log_string_sync>
	bool skip = false;
   1ca56:	46b1      	mov	r9, r6
		ret = -ENOMEM;
   1ca58:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   1ca5c:	7b3b      	ldrb	r3, [r7, #12]
   1ca5e:	b1a3      	cbz	r3, 1ca8a <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   1ca60:	4b99      	ldr	r3, [pc, #612]	; (1ccc8 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   1ca62:	a903      	add	r1, sp, #12
   1ca64:	6818      	ldr	r0, [r3, #0]
   1ca66:	f00b fa04 	bl	27e72 <mqtt_publish_qos1_ack>
		if (ack_res) {
   1ca6a:	4605      	mov	r5, r0
   1ca6c:	b168      	cbz	r0, 1ca8a <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   1ca6e:	4893      	ldr	r0, [pc, #588]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1ca70:	4b93      	ldr	r3, [pc, #588]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   1ca72:	462a      	mov	r2, r5
   1ca74:	1a1b      	subs	r3, r3, r0
   1ca76:	08db      	lsrs	r3, r3, #3
   1ca78:	019b      	lsls	r3, r3, #6
   1ca7a:	4994      	ldr	r1, [pc, #592]	; (1cccc <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   1ca7c:	f043 0001 	orr.w	r0, r3, #1
   1ca80:	f009 fd55 	bl	2652e <log_string_sync>
			if (!ret) {
   1ca84:	2c00      	cmp	r4, #0
   1ca86:	bf08      	it	eq
   1ca88:	462c      	moveq	r4, r5
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   1ca8a:	f1b9 0f00 	cmp.w	r9, #0
   1ca8e:	d105      	bne.n	1ca9c <nrf_cloud_fota_mqtt_evt_handler+0xb8>
   1ca90:	4b8f      	ldr	r3, [pc, #572]	; (1ccd0 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   1ca92:	7a1a      	ldrb	r2, [r3, #8]
   1ca94:	461f      	mov	r7, r3
   1ca96:	2a03      	cmp	r2, #3
   1ca98:	f040 80d2 	bne.w	1cc40 <nrf_cloud_fota_mqtt_evt_handler+0x25c>
		if (payload_array) {
   1ca9c:	b116      	cbz	r6, 1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
			cJSON_Delete(payload_array);
   1ca9e:	4630      	mov	r0, r6
   1caa0:	f002 f8e0 	bl	1ec64 <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   1caa4:	4620      	mov	r0, r4
   1caa6:	b004      	add	sp, #16
   1caa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   1caac:	4b86      	ldr	r3, [pc, #536]	; (1ccc8 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   1caae:	4601      	mov	r1, r0
   1cab0:	697a      	ldr	r2, [r7, #20]
   1cab2:	6818      	ldr	r0, [r3, #0]
   1cab4:	f00b fb08 	bl	280c8 <mqtt_readall_publish_payload>
	if (ret) {
   1cab8:	4604      	mov	r4, r0
   1caba:	b168      	cbz	r0, 1cad8 <nrf_cloud_fota_mqtt_evt_handler+0xf4>
   1cabc:	4880      	ldr	r0, [pc, #512]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   1cabe:	4b7f      	ldr	r3, [pc, #508]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
		LOG_ERR("Error reading MQTT payload: %d", ret);
   1cac0:	4622      	mov	r2, r4
   1cac2:	1ac0      	subs	r0, r0, r3
   1cac4:	08c0      	lsrs	r0, r0, #3
   1cac6:	0180      	lsls	r0, r0, #6
   1cac8:	4982      	ldr	r1, [pc, #520]	; (1ccd4 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   1caca:	f040 0001 	orr.w	r0, r0, #1
   1cace:	f009 fd2e 	bl	2652e <log_string_sync>
		cJSON_Delete(array);
   1cad2:	2500      	movs	r5, #0
	bool skip = false;
   1cad4:	46a9      	mov	r9, r5
   1cad6:	e090      	b.n	1cbfa <nrf_cloud_fota_mqtt_evt_handler+0x216>
	return current_fota.parsed_payload != NULL;
   1cad8:	4b7d      	ldr	r3, [pc, #500]	; (1ccd0 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   1cada:	681a      	ldr	r2, [r3, #0]
   1cadc:	4699      	mov	r9, r3
	if (nrf_cloud_fota_is_active() && !ble_id) {
   1cade:	b16a      	cbz	r2, 1cafc <nrf_cloud_fota_mqtt_evt_handler+0x118>
   1cae0:	4b76      	ldr	r3, [pc, #472]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cae2:	4877      	ldr	r0, [pc, #476]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
		LOG_INF("Job in progress... skipping");
   1cae4:	497c      	ldr	r1, [pc, #496]	; (1ccd8 <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
   1cae6:	1ac0      	subs	r0, r0, r3
   1cae8:	08c0      	lsrs	r0, r0, #3
   1caea:	0180      	lsls	r0, r0, #6
   1caec:	f040 0003 	orr.w	r0, r0, #3
   1caf0:	f009 fd1d 	bl	2652e <log_string_sync>
	cJSON *payload_array = NULL;
   1caf4:	4625      	mov	r5, r4
		skip = true;
   1caf6:	f04f 0901 	mov.w	r9, #1
   1cafa:	e07e      	b.n	1cbfa <nrf_cloud_fota_mqtt_evt_handler+0x216>
	cJSON *array = cJSON_Parse(payload_in);
   1cafc:	4630      	mov	r0, r6
   1cafe:	f00c fce0 	bl	294c2 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   1cb02:	4605      	mov	r5, r0
   1cb04:	b9c8      	cbnz	r0, 1cb3a <nrf_cloud_fota_mqtt_evt_handler+0x156>
   1cb06:	4b6d      	ldr	r3, [pc, #436]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cb08:	486d      	ldr	r0, [pc, #436]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
		LOG_ERR("Invalid JSON array");
   1cb0a:	4974      	ldr	r1, [pc, #464]	; (1ccdc <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   1cb0c:	1ac0      	subs	r0, r0, r3
   1cb0e:	08c0      	lsrs	r0, r0, #3
   1cb10:	0180      	lsls	r0, r0, #6
   1cb12:	f040 0001 	orr.w	r0, r0, #1
   1cb16:	f009 fd0a 	bl	2652e <log_string_sync>
		err = -EINVAL;
   1cb1a:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   1cb1e:	2214      	movs	r2, #20
   1cb20:	2100      	movs	r1, #0
   1cb22:	486f      	ldr	r0, [pc, #444]	; (1cce0 <nrf_cloud_fota_mqtt_evt_handler+0x2fc>)
   1cb24:	f00e f9b0 	bl	2ae88 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   1cb28:	2303      	movs	r3, #3
   1cb2a:	f889 3008 	strb.w	r3, [r9, #8]
	if (array) {
   1cb2e:	2d00      	cmp	r5, #0
   1cb30:	d0d0      	beq.n	1cad4 <nrf_cloud_fota_mqtt_evt_handler+0xf0>
		cJSON_Delete(array);
   1cb32:	4628      	mov	r0, r5
   1cb34:	f002 f896 	bl	1ec64 <cJSON_Delete>
   1cb38:	e7cb      	b.n	1cad2 <nrf_cloud_fota_mqtt_evt_handler+0xee>
	if (!array || !cJSON_IsArray(array)) {
   1cb3a:	f00c fd6e 	bl	2961a <cJSON_IsArray>
   1cb3e:	2800      	cmp	r0, #0
   1cb40:	d0e1      	beq.n	1cb06 <nrf_cloud_fota_mqtt_evt_handler+0x122>
	temp = cJSON_PrintUnformatted(array);
   1cb42:	4628      	mov	r0, r5
   1cb44:	f00c fcc1 	bl	294ca <cJSON_PrintUnformatted>
	if (temp) {
   1cb48:	b108      	cbz	r0, 1cb4e <nrf_cloud_fota_mqtt_evt_handler+0x16a>
		cJSON_FreeString(temp);
   1cb4a:	f00c fd71 	bl	29630 <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   1cb4e:	2100      	movs	r1, #0
   1cb50:	4628      	mov	r0, r5
   1cb52:	4a64      	ldr	r2, [pc, #400]	; (1cce4 <nrf_cloud_fota_mqtt_evt_handler+0x300>)
   1cb54:	f00c faf4 	bl	29140 <get_string_from_array>
   1cb58:	bbb8      	cbnz	r0, 1cbca <nrf_cloud_fota_mqtt_evt_handler+0x1e6>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   1cb5a:	2103      	movs	r1, #3
   1cb5c:	4628      	mov	r0, r5
   1cb5e:	4a62      	ldr	r2, [pc, #392]	; (1cce8 <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   1cb60:	f00c faee 	bl	29140 <get_string_from_array>
				  &job_info->id) ||
   1cb64:	bb88      	cbnz	r0, 1cbca <nrf_cloud_fota_mqtt_evt_handler+0x1e6>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   1cb66:	2104      	movs	r1, #4
   1cb68:	4628      	mov	r0, r5
   1cb6a:	4a60      	ldr	r2, [pc, #384]	; (1ccec <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   1cb6c:	f00c fae8 	bl	29140 <get_string_from_array>
				  &job_info->host) ||
   1cb70:	4604      	mov	r4, r0
   1cb72:	bb50      	cbnz	r0, 1cbca <nrf_cloud_fota_mqtt_evt_handler+0x1e6>
	cJSON *item = cJSON_GetArrayItem(array, index);
   1cb74:	2101      	movs	r1, #1
   1cb76:	4628      	mov	r0, r5
   1cb78:	f00c fcaa 	bl	294d0 <cJSON_GetArrayItem>
   1cb7c:	4682      	mov	sl, r0
	if (!cJSON_IsNumber(item)) {
   1cb7e:	f00c fd37 	bl	295f0 <cJSON_IsNumber>
   1cb82:	b310      	cbz	r0, 1cbca <nrf_cloud_fota_mqtt_evt_handler+0x1e6>
	*number_out = item->valueint;
   1cb84:	f8da 3014 	ldr.w	r3, [sl, #20]
	cJSON *item = cJSON_GetArrayItem(array, index);
   1cb88:	2102      	movs	r1, #2
   1cb8a:	4628      	mov	r0, r5
	*number_out = item->valueint;
   1cb8c:	f8c9 3008 	str.w	r3, [r9, #8]
	cJSON *item = cJSON_GetArrayItem(array, index);
   1cb90:	f00c fc9e 	bl	294d0 <cJSON_GetArrayItem>
   1cb94:	4682      	mov	sl, r0
	if (!cJSON_IsNumber(item)) {
   1cb96:	f00c fd2b 	bl	295f0 <cJSON_IsNumber>
   1cb9a:	b1b0      	cbz	r0, 1cbca <nrf_cloud_fota_mqtt_evt_handler+0x1e6>
	*number_out = item->valueint;
   1cb9c:	f8da 3014 	ldr.w	r3, [sl, #20]
	job_id_len = strlen(job_info->id);
   1cba0:	f8d9 000c 	ldr.w	r0, [r9, #12]
	*number_out = item->valueint;
   1cba4:	f8c9 3018 	str.w	r3, [r9, #24]
	job_id_len = strlen(job_info->id);
   1cba8:	f7f4 fa08 	bl	10fbc <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   1cbac:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   1cbae:	4602      	mov	r2, r0
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   1cbb0:	d918      	bls.n	1cbe4 <nrf_cloud_fota_mqtt_evt_handler+0x200>
   1cbb2:	4b42      	ldr	r3, [pc, #264]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cbb4:	4c42      	ldr	r4, [pc, #264]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   1cbb6:	494e      	ldr	r1, [pc, #312]	; (1ccf0 <nrf_cloud_fota_mqtt_evt_handler+0x30c>)
   1cbb8:	1ae4      	subs	r4, r4, r3
   1cbba:	08e4      	lsrs	r4, r4, #3
   1cbbc:	01a4      	lsls	r4, r4, #6
   1cbbe:	2324      	movs	r3, #36	; 0x24
   1cbc0:	f044 0001 	orr.w	r0, r4, #1
   1cbc4:	f009 fcb3 	bl	2652e <log_string_sync>
		goto cleanup;
   1cbc8:	e009      	b.n	1cbde <nrf_cloud_fota_mqtt_evt_handler+0x1fa>
   1cbca:	483d      	ldr	r0, [pc, #244]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   1cbcc:	4b3b      	ldr	r3, [pc, #236]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
		LOG_ERR("Error parsing job info");
   1cbce:	4949      	ldr	r1, [pc, #292]	; (1ccf4 <nrf_cloud_fota_mqtt_evt_handler+0x310>)
   1cbd0:	1ac0      	subs	r0, r0, r3
   1cbd2:	08c0      	lsrs	r0, r0, #3
   1cbd4:	0180      	lsls	r0, r0, #6
   1cbd6:	f040 0001 	orr.w	r0, r0, #1
   1cbda:	f009 fca8 	bl	2652e <log_string_sync>
	int err = -ENOMSG;
   1cbde:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   1cbe2:	e79c      	b.n	1cb1e <nrf_cloud_fota_mqtt_evt_handler+0x13a>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   1cbe4:	f899 2008 	ldrb.w	r2, [r9, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   1cbe8:	2a02      	cmp	r2, #2
   1cbea:	d80b      	bhi.n	1cc04 <nrf_cloud_fota_mqtt_evt_handler+0x220>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   1cbec:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1cbf0:	4841      	ldr	r0, [pc, #260]	; (1ccf8 <nrf_cloud_fota_mqtt_evt_handler+0x314>)
   1cbf2:	f7f4 f9d9 	bl	10fa8 <strcmp>
   1cbf6:	b180      	cbz	r0, 1cc1a <nrf_cloud_fota_mqtt_evt_handler+0x236>
	bool skip = false;
   1cbf8:	46a1      	mov	r9, r4
		nrf_cloud_free(payload);
   1cbfa:	4630      	mov	r0, r6
   1cbfc:	f00e f8e1 	bl	2adc2 <k_free>
   1cc00:	462e      	mov	r6, r5
   1cc02:	e72b      	b.n	1ca5c <nrf_cloud_fota_mqtt_evt_handler+0x78>
   1cc04:	4b2d      	ldr	r3, [pc, #180]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cc06:	482e      	ldr	r0, [pc, #184]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   1cc08:	493c      	ldr	r1, [pc, #240]	; (1ccfc <nrf_cloud_fota_mqtt_evt_handler+0x318>)
   1cc0a:	1ac0      	subs	r0, r0, r3
   1cc0c:	08c0      	lsrs	r0, r0, #3
   1cc0e:	0180      	lsls	r0, r0, #6
   1cc10:	f040 0001 	orr.w	r0, r0, #1
   1cc14:	f009 fc8b 	bl	2652e <log_string_sync>
   1cc18:	e7e1      	b.n	1cbde <nrf_cloud_fota_mqtt_evt_handler+0x1fa>
   1cc1a:	4b29      	ldr	r3, [pc, #164]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   1cc1c:	4a27      	ldr	r2, [pc, #156]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cc1e:	4836      	ldr	r0, [pc, #216]	; (1ccf8 <nrf_cloud_fota_mqtt_evt_handler+0x314>)
   1cc20:	eba3 0902 	sub.w	r9, r3, r2
   1cc24:	f009 fc96 	bl	26554 <z_log_strdup>
   1cc28:	ea4f 09d9 	mov.w	r9, r9, lsr #3
		LOG_INF("Job %s already completed... skipping",
   1cc2c:	ea4f 1989 	mov.w	r9, r9, lsl #6
   1cc30:	f049 0903 	orr.w	r9, r9, #3
   1cc34:	4602      	mov	r2, r0
   1cc36:	4932      	ldr	r1, [pc, #200]	; (1cd00 <nrf_cloud_fota_mqtt_evt_handler+0x31c>)
   1cc38:	4648      	mov	r0, r9
   1cc3a:	f009 fc78 	bl	2652e <log_string_sync>
   1cc3e:	e75a      	b.n	1caf6 <nrf_cloud_fota_mqtt_evt_handler+0x112>
		current_fota.parsed_payload = payload_array;
   1cc40:	4d1f      	ldr	r5, [pc, #124]	; (1ccc0 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   1cc42:	601e      	str	r6, [r3, #0]
	switch (job->info.type) {
   1cc44:	4b1d      	ldr	r3, [pc, #116]	; (1ccbc <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   1cc46:	2a01      	cmp	r2, #1
   1cc48:	eba5 0503 	sub.w	r5, r5, r3
   1cc4c:	ea4f 05d5 	mov.w	r5, r5, lsr #3
   1cc50:	ea4f 1585 	mov.w	r5, r5, lsl #6
   1cc54:	d015      	beq.n	1cc82 <nrf_cloud_fota_mqtt_evt_handler+0x29e>
   1cc56:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   1cc5a:	d010      	beq.n	1cc7e <nrf_cloud_fota_mqtt_evt_handler+0x29a>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   1cc5c:	4929      	ldr	r1, [pc, #164]	; (1cd04 <nrf_cloud_fota_mqtt_evt_handler+0x320>)
   1cc5e:	f045 0001 	orr.w	r0, r5, #1
   1cc62:	f009 fc64 	bl	2652e <log_string_sync>
		return -EFTYPE;
   1cc66:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   1cc6a:	4819      	ldr	r0, [pc, #100]	; (1ccd0 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   1cc6c:	f7ff fba2 	bl	1c3b4 <send_job_update>
		if (ret) {
   1cc70:	2c00      	cmp	r4, #0
   1cc72:	f43f af17 	beq.w	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
			cleanup_job(&current_fota);
   1cc76:	f7ff fb8d 	bl	1c394 <cleanup_job.constprop.0>
   1cc7a:	2400      	movs	r4, #0
   1cc7c:	e712      	b.n	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   1cc7e:	f04f 0801 	mov.w	r8, #1
	ret = fota_download_start_with_image_type(job->info.host,
   1cc82:	f240 63a4 	movw	r3, #1700	; 0x6a4
   1cc86:	f8cd 8004 	str.w	r8, [sp, #4]
   1cc8a:	9300      	str	r3, [sp, #0]
   1cc8c:	4a1e      	ldr	r2, [pc, #120]	; (1cd08 <nrf_cloud_fota_mqtt_evt_handler+0x324>)
   1cc8e:	2300      	movs	r3, #0
   1cc90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1cc94:	f001 f880 	bl	1dd98 <fota_download_start_with_image_type>
	if (ret) {
   1cc98:	4604      	mov	r4, r0
   1cc9a:	b3c8      	cbz	r0, 1cd10 <nrf_cloud_fota_mqtt_evt_handler+0x32c>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   1cc9c:	4602      	mov	r2, r0
   1cc9e:	491b      	ldr	r1, [pc, #108]	; (1cd0c <nrf_cloud_fota_mqtt_evt_handler+0x328>)
   1cca0:	f045 0001 	orr.w	r0, r5, #1
   1cca4:	f009 fc43 	bl	2652e <log_string_sync>
		job->status = NRF_CLOUD_FOTA_FAILED;
   1cca8:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   1ccaa:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   1ccac:	7138      	strb	r0, [r7, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   1ccae:	773b      	strb	r3, [r7, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   1ccb0:	f7ff fb4e 	bl	1c350 <send_event.constprop.0>
   1ccb4:	e7d9      	b.n	1cc6a <nrf_cloud_fota_mqtt_evt_handler+0x286>
   1ccb6:	bf00      	nop
   1ccb8:	2000c5f0 	.word	0x2000c5f0
   1ccbc:	0002c344 	.word	0x0002c344
   1ccc0:	0002c3dc 	.word	0x0002c3dc
   1ccc4:	0002f4c2 	.word	0x0002f4c2
   1ccc8:	2000ecbc 	.word	0x2000ecbc
   1cccc:	0002f5b2 	.word	0x0002f5b2
   1ccd0:	2000ecc0 	.word	0x2000ecc0
   1ccd4:	0002f4e4 	.word	0x0002f4e4
   1ccd8:	0002f503 	.word	0x0002f503
   1ccdc:	0002f51f 	.word	0x0002f51f
   1cce0:	2000ecc8 	.word	0x2000ecc8
   1cce4:	2000eccc 	.word	0x2000eccc
   1cce8:	2000ecd0 	.word	0x2000ecd0
   1ccec:	2000ecd4 	.word	0x2000ecd4
   1ccf0:	0002f549 	.word	0x0002f549
   1ccf4:	0002f532 	.word	0x0002f532
   1ccf8:	2000f176 	.word	0x2000f176
   1ccfc:	0002f577 	.word	0x0002f577
   1cd00:	0002f58d 	.word	0x0002f58d
   1cd04:	0002f5c6 	.word	0x0002f5c6
   1cd08:	01010001 	.word	0x01010001
   1cd0c:	0002f5de 	.word	0x0002f5de
		LOG_INF("Downloading update");
   1cd10:	f045 0003 	orr.w	r0, r5, #3
   1cd14:	491b      	ldr	r1, [pc, #108]	; (1cd84 <nrf_cloud_fota_mqtt_evt_handler+0x3a0>)
   1cd16:	f009 fc0a 	bl	2652e <log_string_sync>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   1cd1a:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   1cd1c:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   1cd1e:	e9c7 4408 	strd	r4, r4, [r7, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   1cd22:	713b      	strb	r3, [r7, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   1cd24:	e7c4      	b.n	1ccb0 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   1cd26:	88bb      	ldrh	r3, [r7, #4]
   1cd28:	2b67      	cmp	r3, #103	; 0x67
   1cd2a:	d128      	bne.n	1cd7e <nrf_cloud_fota_mqtt_evt_handler+0x39a>
		nrf_cloud_fota_update_check();
   1cd2c:	f7ff fe32 	bl	1c994 <nrf_cloud_fota_update_check>
		break;
   1cd30:	e7a3      	b.n	1cc7a <nrf_cloud_fota_mqtt_evt_handler+0x296>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   1cd32:	88bc      	ldrh	r4, [r7, #4]
   1cd34:	3c99      	subs	r4, #153	; 0x99
   1cd36:	bf18      	it	ne
   1cd38:	2401      	movne	r4, #1
   1cd3a:	e6b3      	b.n	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
		switch (evt->param.puback.message_id) {
   1cd3c:	88bc      	ldrh	r4, [r7, #4]
   1cd3e:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
   1cd42:	d00c      	beq.n	1cd5e <nrf_cloud_fota_mqtt_evt_handler+0x37a>
   1cd44:	d805      	bhi.n	1cd52 <nrf_cloud_fota_mqtt_evt_handler+0x36e>
	return 0;
   1cd46:	3cc9      	subs	r4, #201	; 0xc9
   1cd48:	2c01      	cmp	r4, #1
   1cd4a:	bf94      	ite	ls
   1cd4c:	2400      	movls	r4, #0
   1cd4e:	2401      	movhi	r4, #1
   1cd50:	e6a8      	b.n	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
   1cd52:	f240 102f 	movw	r0, #303	; 0x12f
   1cd56:	1a24      	subs	r4, r4, r0
   1cd58:	bf18      	it	ne
   1cd5a:	2401      	movne	r4, #1
   1cd5c:	e6a2      	b.n	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
		switch (saved_job.validate) {
   1cd5e:	4b0a      	ldr	r3, [pc, #40]	; (1cd88 <nrf_cloud_fota_mqtt_evt_handler+0x3a4>)
   1cd60:	7818      	ldrb	r0, [r3, #0]
   1cd62:	2801      	cmp	r0, #1
   1cd64:	d008      	beq.n	1cd78 <nrf_cloud_fota_mqtt_evt_handler+0x394>
   1cd66:	3802      	subs	r0, #2
   1cd68:	2802      	cmp	r0, #2
   1cd6a:	d886      	bhi.n	1cc7a <nrf_cloud_fota_mqtt_evt_handler+0x296>
			save_validate_status(saved_job.id, saved_job.type,
   1cd6c:	2205      	movs	r2, #5
   1cd6e:	7859      	ldrb	r1, [r3, #1]
   1cd70:	1c98      	adds	r0, r3, #2
   1cd72:	f7ff fa6f 	bl	1c254 <save_validate_status>
			break;
   1cd76:	e780      	b.n	1cc7a <nrf_cloud_fota_mqtt_evt_handler+0x296>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   1cd78:	f7ff faea 	bl	1c350 <send_event.constprop.0>
			break;
   1cd7c:	e77d      	b.n	1cc7a <nrf_cloud_fota_mqtt_evt_handler+0x296>
		return 1;
   1cd7e:	2401      	movs	r4, #1
   1cd80:	e690      	b.n	1caa4 <nrf_cloud_fota_mqtt_evt_handler+0xc0>
   1cd82:	bf00      	nop
   1cd84:	0002f600 	.word	0x0002f600
   1cd88:	2000c882 	.word	0x2000c882

0001cd8c <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   1cd8c:	b570      	push	{r4, r5, r6, lr}
   1cd8e:	4605      	mov	r5, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   1cd90:	4c09      	ldr	r4, [pc, #36]	; (1cdb8 <cloud_get_binding+0x2c>)
   1cd92:	4e0a      	ldr	r6, [pc, #40]	; (1cdbc <cloud_get_binding+0x30>)
   1cd94:	42b4      	cmp	r4, r6
   1cd96:	d101      	bne.n	1cd9c <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1cd98:	2400      	movs	r4, #0
   1cd9a:	e00a      	b.n	1cdb2 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   1cd9c:	6823      	ldr	r3, [r4, #0]
   1cd9e:	b90b      	cbnz	r3, 1cda4 <cloud_get_binding+0x18>
	     info++) {
   1cda0:	3408      	adds	r4, #8
   1cda2:	e7f7      	b.n	1cd94 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   1cda4:	6863      	ldr	r3, [r4, #4]
   1cda6:	4628      	mov	r0, r5
   1cda8:	6819      	ldr	r1, [r3, #0]
   1cdaa:	f7f4 f8fd 	bl	10fa8 <strcmp>
   1cdae:	2800      	cmp	r0, #0
   1cdb0:	d1f6      	bne.n	1cda0 <cloud_get_binding+0x14>
}
   1cdb2:	4620      	mov	r0, r4
   1cdb4:	bd70      	pop	{r4, r5, r6, pc}
   1cdb6:	bf00      	nop
   1cdb8:	00030aa8 	.word	0x00030aa8
   1cdbc:	00030ab0 	.word	0x00030ab0

0001cdc0 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   1cdc0:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   1cdc2:	4604      	mov	r4, r0
{
   1cdc4:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   1cdc6:	b308      	cbz	r0, 1ce0c <download_client_init+0x4c>
   1cdc8:	b301      	cbz	r1, 1ce0c <download_client_init+0x4c>
		return -EINVAL;
	}

	client->fd = -1;
   1cdca:	f04f 33ff 	mov.w	r3, #4294967295
	client->callback = callback;
   1cdce:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
	client->fd = -1;
   1cdd2:	6003      	str	r3, [r0, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cdd4:	2200      	movs	r2, #0
   1cdd6:	2300      	movs	r3, #0
   1cdd8:	2500      	movs	r5, #0
   1cdda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1cdde:	230e      	movs	r3, #14
   1cde0:	9000      	str	r0, [sp, #0]
   1cde2:	e9cd 3503 	strd	r3, r5, [sp, #12]
   1cde6:	f600 1108 	addw	r1, r0, #2312	; 0x908
   1cdea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cdee:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1cdf2:	4b08      	ldr	r3, [pc, #32]	; (1ce14 <download_client_init+0x54>)
   1cdf4:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   1cdf8:	f006 f96a 	bl	230d0 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   1cdfc:	f8c4 083c 	str.w	r0, [r4, #2108]	; 0x83c
	return z_impl_k_thread_name_set(thread, str);
   1ce00:	4905      	ldr	r1, [pc, #20]	; (1ce18 <download_client_init+0x58>)
   1ce02:	f00d fbdb 	bl	2a5bc <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   1ce06:	4628      	mov	r0, r5
}
   1ce08:	b009      	add	sp, #36	; 0x24
   1ce0a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1ce0c:	f06f 0015 	mvn.w	r0, #21
   1ce10:	e7fa      	b.n	1ce08 <download_client_init+0x48>
   1ce12:	bf00      	nop
   1ce14:	0001d351 	.word	0x0001d351
   1ce18:	0002f6ac 	.word	0x0002f6ac

0001ce1c <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   1ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce20:	4688      	mov	r8, r1
   1ce22:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   1ce24:	4604      	mov	r4, r0
{
   1ce26:	b0b1      	sub	sp, #196	; 0xc4
	if (client == NULL || host == NULL || config == NULL) {
   1ce28:	2800      	cmp	r0, #0
   1ce2a:	f000 8233 	beq.w	1d294 <download_client_connect+0x478>
   1ce2e:	2900      	cmp	r1, #0
   1ce30:	f000 8230 	beq.w	1d294 <download_client_connect+0x478>
   1ce34:	2a00      	cmp	r2, #0
   1ce36:	f000 822d 	beq.w	1d294 <download_client_connect+0x478>
		return -EINVAL;
	}

	if (client->fd != -1) {
   1ce3a:	6803      	ldr	r3, [r0, #0]
   1ce3c:	3301      	adds	r3, #1
   1ce3e:	f040 822c 	bne.w	1d29a <download_client_connect+0x47e>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   1ce42:	6893      	ldr	r3, [r2, #8]
   1ce44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1ce48:	d90f      	bls.n	1ce6a <download_client_connect+0x4e>
   1ce4a:	4bbe      	ldr	r3, [pc, #760]	; (1d144 <download_client_connect+0x328>)
   1ce4c:	48be      	ldr	r0, [pc, #760]	; (1d148 <download_client_connect+0x32c>)
		LOG_ERR("The configured fragment size is larger than buffer");
   1ce4e:	49bf      	ldr	r1, [pc, #764]	; (1d14c <download_client_connect+0x330>)
   1ce50:	1ac0      	subs	r0, r0, r3
   1ce52:	08c0      	lsrs	r0, r0, #3
   1ce54:	0180      	lsls	r0, r0, #6
   1ce56:	f040 0001 	orr.w	r0, r0, #1
   1ce5a:	f009 fb68 	bl	2652e <log_string_sync>
		return -E2BIG;
   1ce5e:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   1ce62:	4628      	mov	r0, r5
   1ce64:	b031      	add	sp, #196	; 0xc4
   1ce66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct addrinfo hints = {
   1ce6a:	2100      	movs	r1, #0
		err = host_lookup(host, AF_INET, config->pdn_id, &sa);
   1ce6c:	7917      	ldrb	r7, [r2, #4]
	struct addrinfo hints = {
   1ce6e:	a81c      	add	r0, sp, #112	; 0x70
   1ce70:	2250      	movs	r2, #80	; 0x50
   1ce72:	f00e f809 	bl	2ae88 <memset>
   1ce76:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   1ce78:	2240      	movs	r2, #64	; 0x40
   1ce7a:	4640      	mov	r0, r8
   1ce7c:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   1ce7e:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   1ce80:	f000 fbdc 	bl	1d63c <url_parse_host>
	if (err) {
   1ce84:	4605      	mov	r5, r0
   1ce86:	2800      	cmp	r0, #0
   1ce88:	d1eb      	bne.n	1ce62 <download_client_connect+0x46>
	if (pdn_id) {
   1ce8a:	b31f      	cbz	r7, 1ced4 <download_client_connect+0xb8>
		hints.ai_flags = AI_PDNSERV;
   1ce8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   1ce90:	2104      	movs	r1, #4
   1ce92:	4aaf      	ldr	r2, [pc, #700]	; (1d150 <download_client_connect+0x334>)
		hints.ai_flags = AI_PDNSERV;
   1ce94:	931d      	str	r3, [sp, #116]	; 0x74
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   1ce96:	a804      	add	r0, sp, #16
   1ce98:	463b      	mov	r3, r7
   1ce9a:	f007 fecb 	bl	24c34 <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   1ce9e:	ab05      	add	r3, sp, #20
   1cea0:	aa1c      	add	r2, sp, #112	; 0x70
   1cea2:	a904      	add	r1, sp, #16
   1cea4:	a80c      	add	r0, sp, #48	; 0x30
   1cea6:	f009 fef0 	bl	26c8a <zsock_getaddrinfo>
   1ceaa:	4605      	mov	r5, r0
	if (err) {
   1ceac:	b1b0      	cbz	r0, 1cedc <download_client_connect+0xc0>
   1ceae:	4ba5      	ldr	r3, [pc, #660]	; (1d144 <download_client_connect+0x328>)
   1ceb0:	4ca5      	ldr	r4, [pc, #660]	; (1d148 <download_client_connect+0x32c>)
   1ceb2:	a80c      	add	r0, sp, #48	; 0x30
   1ceb4:	1ae4      	subs	r4, r4, r3
   1ceb6:	f009 fb4d 	bl	26554 <z_log_strdup>
   1ceba:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("Failed to resolve hostname %s on %s",
   1cebc:	01a4      	lsls	r4, r4, #6
   1cebe:	f044 0402 	orr.w	r4, r4, #2
   1cec2:	4602      	mov	r2, r0
   1cec4:	4ba3      	ldr	r3, [pc, #652]	; (1d154 <download_client_connect+0x338>)
   1cec6:	4620      	mov	r0, r4
   1cec8:	49a3      	ldr	r1, [pc, #652]	; (1d158 <download_client_connect+0x33c>)
   1ceca:	f009 fb30 	bl	2652e <log_string_sync>
		return -EHOSTUNREACH;
   1cece:	f06f 0575 	mvn.w	r5, #117	; 0x75
   1ced2:	e7c6      	b.n	1ce62 <download_client_connect+0x46>
   1ced4:	4601      	mov	r1, r0
   1ced6:	ab05      	add	r3, sp, #20
   1ced8:	aa1c      	add	r2, sp, #112	; 0x70
   1ceda:	e7e3      	b.n	1cea4 <download_client_connect+0x88>
	*sa = *(ai->ai_addr);
   1cedc:	f8dd c014 	ldr.w	ip, [sp, #20]
   1cee0:	af06      	add	r7, sp, #24
   1cee2:	f8dc 3018 	ldr.w	r3, [ip, #24]
   1cee6:	f103 0e18 	add.w	lr, r3, #24
   1ceea:	463a      	mov	r2, r7
   1ceec:	6818      	ldr	r0, [r3, #0]
   1ceee:	6859      	ldr	r1, [r3, #4]
   1cef0:	3308      	adds	r3, #8
   1cef2:	c203      	stmia	r2!, {r0, r1}
   1cef4:	4573      	cmp	r3, lr
   1cef6:	4617      	mov	r7, r2
   1cef8:	d1f7      	bne.n	1ceea <download_client_connect+0xce>
	zsock_freeaddrinfo(ai);
   1cefa:	4660      	mov	r0, ip
	client->config = *config;
   1cefc:	f604 0718 	addw	r7, r4, #2072	; 0x818
   1cf00:	f009 fec5 	bl	26c8e <zsock_freeaddrinfo>
   1cf04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cf08:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	err = url_parse_proto(host, &dl->proto, &type);
   1cf0c:	4640      	mov	r0, r8
	client->host = host;
   1cf0e:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   1cf12:	aa05      	add	r2, sp, #20
   1cf14:	f604 0128 	addw	r1, r4, #2088	; 0x828
   1cf18:	f000 fb5a 	bl	1d5d0 <url_parse_proto>
	if (err) {
   1cf1c:	b150      	cbz	r0, 1cf34 <download_client_connect+0x118>
		type = SOCK_STREAM;
   1cf1e:	2301      	movs	r3, #1
   1cf20:	9305      	str	r3, [sp, #20]
		if (dl->config.sec_tag != -1) {
   1cf22:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   1cf26:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   1cf28:	bf14      	ite	ne
   1cf2a:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   1cf2e:	2306      	moveq	r3, #6
   1cf30:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   1cf34:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
   1cf38:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   1cf3c:	2b11      	cmp	r3, #17
   1cf3e:	f000 81a3 	beq.w	1d288 <download_client_connect+0x46c>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   1cf42:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   1cf46:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   1cf4a:	d113      	bne.n	1cf74 <download_client_connect+0x158>
		if (dl->config.sec_tag == -1) {
   1cf4c:	3301      	adds	r3, #1
   1cf4e:	d11d      	bne.n	1cf8c <download_client_connect+0x170>
   1cf50:	487d      	ldr	r0, [pc, #500]	; (1d148 <download_client_connect+0x32c>)
   1cf52:	4b7c      	ldr	r3, [pc, #496]	; (1d144 <download_client_connect+0x328>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   1cf54:	4981      	ldr	r1, [pc, #516]	; (1d15c <download_client_connect+0x340>)
   1cf56:	1ac0      	subs	r0, r0, r3
   1cf58:	08c0      	lsrs	r0, r0, #3
   1cf5a:	0180      	lsls	r0, r0, #6
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   1cf5c:	f040 0002 	orr.w	r0, r0, #2
   1cf60:	f009 fae5 	bl	2652e <log_string_sync>
		return -EINVAL;
   1cf64:	f06f 0915 	mvn.w	r9, #21
	if (client->fd < 0) {
   1cf68:	6823      	ldr	r3, [r4, #0]
		return err;
   1cf6a:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   1cf6e:	bf28      	it	cs
   1cf70:	464d      	movcs	r5, r9
   1cf72:	e776      	b.n	1ce62 <download_client_connect+0x46>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   1cf74:	3301      	adds	r3, #1
   1cf76:	d109      	bne.n	1cf8c <download_client_connect+0x170>
   1cf78:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   1cf7c:	b133      	cbz	r3, 1cf8c <download_client_connect+0x170>
   1cf7e:	4872      	ldr	r0, [pc, #456]	; (1d148 <download_client_connect+0x32c>)
   1cf80:	4b70      	ldr	r3, [pc, #448]	; (1d144 <download_client_connect+0x328>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   1cf82:	4977      	ldr	r1, [pc, #476]	; (1d160 <download_client_connect+0x344>)
   1cf84:	1ac0      	subs	r0, r0, r3
   1cf86:	08c0      	lsrs	r0, r0, #3
   1cf88:	0180      	lsls	r0, r0, #6
   1cf8a:	e7e7      	b.n	1cf5c <download_client_connect+0x140>
	err = url_parse_port(host, &port);
   1cf8c:	4640      	mov	r0, r8
   1cf8e:	a904      	add	r1, sp, #16
   1cf90:	f000 fb8c 	bl	1d6ac <url_parse_port>
	if (err) {
   1cf94:	b148      	cbz	r0, 1cfaa <download_client_connect+0x18e>
		switch (dl->proto) {
   1cf96:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   1cf9a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1cf9e:	d03a      	beq.n	1d016 <download_client_connect+0x1fa>
   1cfa0:	dc32      	bgt.n	1d008 <download_client_connect+0x1ec>
   1cfa2:	2b06      	cmp	r3, #6
   1cfa4:	d03c      	beq.n	1d020 <download_client_connect+0x204>
   1cfa6:	2b11      	cmp	r3, #17
   1cfa8:	d03c      	beq.n	1d024 <download_client_connect+0x208>
	switch (sa->sa_family) {
   1cfaa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1cfae:	2801      	cmp	r0, #1
   1cfb0:	d03b      	beq.n	1d02a <download_client_connect+0x20e>
   1cfb2:	2802      	cmp	r0, #2
   1cfb4:	f040 816b 	bne.w	1d28e <download_client_connect+0x472>
		addrlen = sizeof(struct sockaddr_in6);
   1cfb8:	f04f 0a18 	mov.w	sl, #24
		SIN6(sa)->sin6_port = htons(port);
   1cfbc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1cfc0:	0213      	lsls	r3, r2, #8
   1cfc2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1cfc6:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   1cfca:	9905      	ldr	r1, [sp, #20]
   1cfcc:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
	return z_impl_zsock_socket(family, type, proto);
   1cfd0:	f7f7 fdce 	bl	14b70 <z_impl_zsock_socket>
   1cfd4:	4e5c      	ldr	r6, [pc, #368]	; (1d148 <download_client_connect+0x32c>)
   1cfd6:	4b5b      	ldr	r3, [pc, #364]	; (1d144 <download_client_connect+0x328>)
	if (*fd < 0) {
   1cfd8:	2800      	cmp	r0, #0
   1cfda:	eba6 0603 	sub.w	r6, r6, r3
   1cfde:	4607      	mov	r7, r0
	*fd = socket(sa->sa_family, type, dl->proto);
   1cfe0:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   1cfe2:	ea4f 06d6 	mov.w	r6, r6, lsr #3
   1cfe6:	da2a      	bge.n	1d03e <download_client_connect+0x222>
		LOG_ERR("Failed to create socket, err %d", errno);
   1cfe8:	f00a f970 	bl	272cc <__errno>
   1cfec:	01b6      	lsls	r6, r6, #6
   1cfee:	f046 0601 	orr.w	r6, r6, #1
   1cff2:	6802      	ldr	r2, [r0, #0]
   1cff4:	495b      	ldr	r1, [pc, #364]	; (1d164 <download_client_connect+0x348>)
   1cff6:	4630      	mov	r0, r6
   1cff8:	f009 fa99 	bl	2652e <log_string_sync>
		return -errno;
   1cffc:	f00a f966 	bl	272cc <__errno>
   1d000:	6800      	ldr	r0, [r0, #0]
   1d002:	f1c0 0900 	rsb	r9, r0, #0
   1d006:	e7af      	b.n	1cf68 <download_client_connect+0x14c>
		switch (dl->proto) {
   1d008:	f240 1211 	movw	r2, #273	; 0x111
   1d00c:	4293      	cmp	r3, r2
   1d00e:	d1cc      	bne.n	1cfaa <download_client_connect+0x18e>
			port = 5684;
   1d010:	f241 6334 	movw	r3, #5684	; 0x1634
   1d014:	e001      	b.n	1d01a <download_client_connect+0x1fe>
			port = 443;
   1d016:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   1d01a:	f8ad 3010 	strh.w	r3, [sp, #16]
			break;
   1d01e:	e7c4      	b.n	1cfaa <download_client_connect+0x18e>
			port = 80;
   1d020:	2350      	movs	r3, #80	; 0x50
   1d022:	e7fa      	b.n	1d01a <download_client_connect+0x1fe>
			port = 5683;
   1d024:	f241 6333 	movw	r3, #5683	; 0x1633
   1d028:	e7f7      	b.n	1d01a <download_client_connect+0x1fe>
		SIN(sa)->sin_port = htons(port);
   1d02a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		addrlen = sizeof(struct sockaddr_in);
   1d02e:	f04f 0a08 	mov.w	sl, #8
		SIN(sa)->sin_port = htons(port);
   1d032:	0213      	lsls	r3, r2, #8
   1d034:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1d038:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   1d03c:	e7c5      	b.n	1cfca <download_client_connect+0x1ae>
	if (dl->config.pdn_id) {
   1d03e:	f894 b81c 	ldrb.w	fp, [r4, #2076]	; 0x81c
   1d042:	f1bb 0f00 	cmp.w	fp, #0
   1d046:	d034      	beq.n	1d0b2 <download_client_connect+0x296>
	char buf[8] = {0};
   1d048:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   1d04a:	2108      	movs	r1, #8
	char buf[8] = {0};
   1d04c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   1d050:	4a45      	ldr	r2, [pc, #276]	; (1d168 <download_client_connect+0x34c>)
   1d052:	465b      	mov	r3, fp
   1d054:	a81c      	add	r0, sp, #112	; 0x70
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   1d056:	ea4f 1986 	mov.w	r9, r6, lsl #6
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   1d05a:	f007 fdeb 	bl	24c34 <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   1d05e:	f049 0303 	orr.w	r3, r9, #3
   1d062:	a81c      	add	r0, sp, #112	; 0x70
   1d064:	9303      	str	r3, [sp, #12]
   1d066:	f009 fa75 	bl	26554 <z_log_strdup>
   1d06a:	9b03      	ldr	r3, [sp, #12]
   1d06c:	4602      	mov	r2, r0
   1d06e:	493f      	ldr	r1, [pc, #252]	; (1d16c <download_client_connect+0x350>)
   1d070:	4618      	mov	r0, r3
   1d072:	f009 fa5c 	bl	2652e <log_string_sync>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   1d076:	a81c      	add	r0, sp, #112	; 0x70
   1d078:	f7f3 ffa0 	bl	10fbc <strlen>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1d07c:	2219      	movs	r2, #25
   1d07e:	9000      	str	r0, [sp, #0]
   1d080:	2101      	movs	r1, #1
   1d082:	4638      	mov	r0, r7
   1d084:	ab1c      	add	r3, sp, #112	; 0x70
   1d086:	f009 ff0e 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (err) {
   1d08a:	b190      	cbz	r0, 1d0b2 <download_client_connect+0x296>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   1d08c:	f00a f91e 	bl	272cc <__errno>
   1d090:	f049 0901 	orr.w	r9, r9, #1
   1d094:	6803      	ldr	r3, [r0, #0]
   1d096:	465a      	mov	r2, fp
   1d098:	4648      	mov	r0, r9
   1d09a:	4935      	ldr	r1, [pc, #212]	; (1d170 <download_client_connect+0x354>)
   1d09c:	f009 fa47 	bl	2652e <log_string_sync>
		return -ENETDOWN;
   1d0a0:	f06f 0972 	mvn.w	r9, #114	; 0x72
		close(*fd);
   1d0a4:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   1d0a6:	f009 fe07 	bl	26cb8 <z_impl_zsock_close>
		*fd = -1;
   1d0aa:	f04f 33ff 	mov.w	r3, #4294967295
   1d0ae:	6023      	str	r3, [r4, #0]
   1d0b0:	e75a      	b.n	1cf68 <download_client_connect+0x14c>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   1d0b2:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   1d0b6:	01b7      	lsls	r7, r6, #6
   1d0b8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1d0bc:	d004      	beq.n	1d0c8 <download_client_connect+0x2ac>
   1d0be:	f240 1211 	movw	r2, #273	; 0x111
   1d0c2:	4293      	cmp	r3, r2
   1d0c4:	f040 8094 	bne.w	1d1f0 <download_client_connect+0x3d4>
	     && (dl->config.sec_tag != -1)) {
   1d0c8:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   1d0cc:	f1b9 3fff 	cmp.w	r9, #4294967295
   1d0d0:	f000 808e 	beq.w	1d1f0 <download_client_connect+0x3d4>
	verify = REQUIRED;
   1d0d4:	2302      	movs	r3, #2
   1d0d6:	f8d4 b000 	ldr.w	fp, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   1d0da:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
	verify = REQUIRED;
   1d0de:	930c      	str	r3, [sp, #48]	; 0x30
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1d0e0:	2304      	movs	r3, #4
   1d0e2:	2205      	movs	r2, #5
   1d0e4:	9300      	str	r3, [sp, #0]
   1d0e6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1d0ea:	4658      	mov	r0, fp
   1d0ec:	ab0c      	add	r3, sp, #48	; 0x30
   1d0ee:	f009 feda 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (err) {
   1d0f2:	01b6      	lsls	r6, r6, #6
   1d0f4:	2800      	cmp	r0, #0
   1d0f6:	d041      	beq.n	1d17c <download_client_connect+0x360>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   1d0f8:	f00a f8e8 	bl	272cc <__errno>
   1d0fc:	491d      	ldr	r1, [pc, #116]	; (1d174 <download_client_connect+0x358>)
   1d0fe:	6802      	ldr	r2, [r0, #0]
   1d100:	f046 0901 	orr.w	r9, r6, #1
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   1d104:	4648      	mov	r0, r9
   1d106:	f009 fa12 	bl	2652e <log_string_sync>
		return -errno;
   1d10a:	f00a f8df 	bl	272cc <__errno>
   1d10e:	6800      	ldr	r0, [r0, #0]
   1d110:	f1c0 0900 	rsb	r9, r0, #0
		if (err) {
   1d114:	f1b9 0f00 	cmp.w	r9, #0
   1d118:	d1c4      	bne.n	1d0a4 <download_client_connect+0x288>
		if (dl->config.set_tls_hostname) {
   1d11a:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d066      	beq.n	1d1f0 <download_client_connect+0x3d4>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   1d122:	2240      	movs	r2, #64	; 0x40
   1d124:	4640      	mov	r0, r8
   1d126:	a91c      	add	r1, sp, #112	; 0x70
   1d128:	f8d4 b000 	ldr.w	fp, [r4]
   1d12c:	f000 fa86 	bl	1d63c <url_parse_host>
	if (err) {
   1d130:	4681      	mov	r9, r0
   1d132:	2800      	cmp	r0, #0
   1d134:	d03a      	beq.n	1d1ac <download_client_connect+0x390>
		LOG_ERR("Failed to parse host, err %d", err);
   1d136:	4602      	mov	r2, r0
   1d138:	490f      	ldr	r1, [pc, #60]	; (1d178 <download_client_connect+0x35c>)
   1d13a:	f046 0001 	orr.w	r0, r6, #1
   1d13e:	f009 f9f6 	bl	2652e <log_string_sync>
			if (err) {
   1d142:	e7af      	b.n	1d0a4 <download_client_connect+0x288>
   1d144:	0002c344 	.word	0x0002c344
   1d148:	0002c374 	.word	0x0002c374
   1d14c:	0002f6bc 	.word	0x0002f6bc
   1d150:	0002efed 	.word	0x0002efed
   1d154:	0002f6ef 	.word	0x0002f6ef
   1d158:	0002f6f4 	.word	0x0002f6f4
   1d15c:	0002f718 	.word	0x0002f718
   1d160:	0002f73e 	.word	0x0002f73e
   1d164:	0002f772 	.word	0x0002f772
   1d168:	0002f792 	.word	0x0002f792
   1d16c:	0002f798 	.word	0x0002f798
   1d170:	0002f7ae 	.word	0x0002f7ae
   1d174:	0002f7d9 	.word	0x0002f7d9
   1d178:	0002f856 	.word	0x0002f856
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   1d17c:	464a      	mov	r2, r9
   1d17e:	4948      	ldr	r1, [pc, #288]	; (1d2a0 <download_client_connect+0x484>)
   1d180:	f047 0003 	orr.w	r0, r7, #3
   1d184:	f009 f9d3 	bl	2652e <log_string_sync>
   1d188:	2304      	movs	r3, #4
   1d18a:	2201      	movs	r2, #1
   1d18c:	9300      	str	r3, [sp, #0]
   1d18e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1d192:	4658      	mov	r0, fp
   1d194:	ab1c      	add	r3, sp, #112	; 0x70
   1d196:	f009 fe86 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (err) {
   1d19a:	2800      	cmp	r0, #0
   1d19c:	d0bd      	beq.n	1d11a <download_client_connect+0x2fe>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   1d19e:	f00a f895 	bl	272cc <__errno>
   1d1a2:	f047 0901 	orr.w	r9, r7, #1
   1d1a6:	6802      	ldr	r2, [r0, #0]
   1d1a8:	493e      	ldr	r1, [pc, #248]	; (1d2a4 <download_client_connect+0x488>)
   1d1aa:	e7ab      	b.n	1d104 <download_client_connect+0x2e8>
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   1d1ac:	a81c      	add	r0, sp, #112	; 0x70
   1d1ae:	f7f3 ff05 	bl	10fbc <strlen>
   1d1b2:	2202      	movs	r2, #2
   1d1b4:	9000      	str	r0, [sp, #0]
   1d1b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1d1ba:	4658      	mov	r0, fp
   1d1bc:	ab1c      	add	r3, sp, #112	; 0x70
   1d1be:	f009 fe72 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (err) {
   1d1c2:	b1a8      	cbz	r0, 1d1f0 <download_client_connect+0x3d4>
   1d1c4:	a81c      	add	r0, sp, #112	; 0x70
   1d1c6:	f009 f9c5 	bl	26554 <z_log_strdup>
   1d1ca:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   1d1cc:	f00a f87e 	bl	272cc <__errno>
   1d1d0:	f047 0601 	orr.w	r6, r7, #1
   1d1d4:	6803      	ldr	r3, [r0, #0]
   1d1d6:	9a03      	ldr	r2, [sp, #12]
   1d1d8:	4630      	mov	r0, r6
   1d1da:	4933      	ldr	r1, [pc, #204]	; (1d2a8 <download_client_connect+0x48c>)
   1d1dc:	f009 f9a7 	bl	2652e <log_string_sync>
		return -errno;
   1d1e0:	f00a f874 	bl	272cc <__errno>
   1d1e4:	6803      	ldr	r3, [r0, #0]
   1d1e6:	f1c3 0900 	rsb	r9, r3, #0
			if (err) {
   1d1ea:	2b00      	cmp	r3, #0
   1d1ec:	f47f af5a 	bne.w	1d0a4 <download_client_connect+0x288>
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   1d1f0:	9b05      	ldr	r3, [sp, #20]
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   1d1f2:	492e      	ldr	r1, [pc, #184]	; (1d2ac <download_client_connect+0x490>)
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   1d1f4:	2b01      	cmp	r3, #1
		.tv_sec = (timeout_ms / 1000),
   1d1f6:	bf14      	ite	ne
   1d1f8:	2204      	movne	r2, #4
   1d1fa:	221e      	moveq	r2, #30
	struct timeval timeo = {
   1d1fc:	2300      	movs	r3, #0
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   1d1fe:	f047 0003 	orr.w	r0, r7, #3
	err = socket_timeout_set(*fd, type);
   1d202:	6826      	ldr	r6, [r4, #0]
	struct timeval timeo = {
   1d204:	921c      	str	r2, [sp, #112]	; 0x70
   1d206:	931d      	str	r3, [sp, #116]	; 0x74
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   1d208:	f009 f991 	bl	2652e <log_string_sync>
   1d20c:	2308      	movs	r3, #8
   1d20e:	2214      	movs	r2, #20
   1d210:	9300      	str	r3, [sp, #0]
   1d212:	2101      	movs	r1, #1
   1d214:	4630      	mov	r0, r6
   1d216:	ab1c      	add	r3, sp, #112	; 0x70
   1d218:	f009 fe45 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (err) {
   1d21c:	b180      	cbz	r0, 1d240 <download_client_connect+0x424>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   1d21e:	f00a f855 	bl	272cc <__errno>
   1d222:	f047 0602 	orr.w	r6, r7, #2
   1d226:	6802      	ldr	r2, [r0, #0]
   1d228:	4921      	ldr	r1, [pc, #132]	; (1d2b0 <download_client_connect+0x494>)
   1d22a:	4630      	mov	r0, r6
   1d22c:	f009 f97f 	bl	2652e <log_string_sync>
		return -errno;
   1d230:	f00a f84c 	bl	272cc <__errno>
   1d234:	6803      	ldr	r3, [r0, #0]
   1d236:	f1c3 0900 	rsb	r9, r3, #0
	if (err) {
   1d23a:	2b00      	cmp	r3, #0
   1d23c:	f47f af32 	bne.w	1d0a4 <download_client_connect+0x288>
   1d240:	4640      	mov	r0, r8
   1d242:	f009 f987 	bl	26554 <z_log_strdup>
	LOG_INF("Connecting to %s", log_strdup(host));
   1d246:	f047 0603 	orr.w	r6, r7, #3
   1d24a:	4602      	mov	r2, r0
   1d24c:	4919      	ldr	r1, [pc, #100]	; (1d2b4 <download_client_connect+0x498>)
   1d24e:	4630      	mov	r0, r6
   1d250:	f009 f96d 	bl	2652e <log_string_sync>
	err = connect(*fd, sa, addrlen);
   1d254:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1d256:	4652      	mov	r2, sl
   1d258:	a906      	add	r1, sp, #24
   1d25a:	f009 fd51 	bl	26d00 <z_impl_zsock_connect>
	if (err) {
   1d25e:	b910      	cbnz	r0, 1d266 <download_client_connect+0x44a>
		return -EINVAL;
   1d260:	f04f 0900 	mov.w	r9, #0
   1d264:	e680      	b.n	1cf68 <download_client_connect+0x14c>
		LOG_ERR("Unable to connect, errno %d", errno);
   1d266:	f00a f831 	bl	272cc <__errno>
   1d26a:	f047 0701 	orr.w	r7, r7, #1
   1d26e:	6802      	ldr	r2, [r0, #0]
   1d270:	4911      	ldr	r1, [pc, #68]	; (1d2b8 <download_client_connect+0x49c>)
   1d272:	4638      	mov	r0, r7
   1d274:	f009 f95b 	bl	2652e <log_string_sync>
		err = -errno;
   1d278:	f00a f828 	bl	272cc <__errno>
   1d27c:	6803      	ldr	r3, [r0, #0]
   1d27e:	f1c3 0900 	rsb	r9, r3, #0
	if (err) {
   1d282:	2b00      	cmp	r3, #0
   1d284:	d0ec      	beq.n	1d260 <download_client_connect+0x444>
   1d286:	e70d      	b.n	1d0a4 <download_client_connect+0x288>
			return -EPROTONOSUPPORT;
   1d288:	f06f 097a 	mvn.w	r9, #122	; 0x7a
   1d28c:	e66c      	b.n	1cf68 <download_client_connect+0x14c>
	switch (sa->sa_family) {
   1d28e:	f06f 0969 	mvn.w	r9, #105	; 0x69
   1d292:	e669      	b.n	1cf68 <download_client_connect+0x14c>
		return -EINVAL;
   1d294:	f06f 0515 	mvn.w	r5, #21
   1d298:	e5e3      	b.n	1ce62 <download_client_connect+0x46>
		return 0;
   1d29a:	2500      	movs	r5, #0
   1d29c:	e5e1      	b.n	1ce62 <download_client_connect+0x46>
   1d29e:	bf00      	nop
   1d2a0:	0002f805 	.word	0x0002f805
   1d2a4:	0002f828 	.word	0x0002f828
   1d2a8:	0002f873 	.word	0x0002f873
   1d2ac:	0002f89f 	.word	0x0002f89f
   1d2b0:	0002f8c2 	.word	0x0002f8c2
   1d2b4:	0002f8e9 	.word	0x0002f8e9
   1d2b8:	0002f8fa 	.word	0x0002f8fa

0001d2bc <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   1d2bc:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   1d2be:	4604      	mov	r4, r0
   1d2c0:	b1e0      	cbz	r0, 1d2fc <download_client_disconnect+0x40>
   1d2c2:	6800      	ldr	r0, [r0, #0]
   1d2c4:	2800      	cmp	r0, #0
   1d2c6:	db19      	blt.n	1d2fc <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   1d2c8:	f009 fcf6 	bl	26cb8 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   1d2cc:	b190      	cbz	r0, 1d2f4 <download_client_disconnect+0x38>
   1d2ce:	4b0d      	ldr	r3, [pc, #52]	; (1d304 <download_client_disconnect+0x48>)
   1d2d0:	4c0d      	ldr	r4, [pc, #52]	; (1d308 <download_client_disconnect+0x4c>)
   1d2d2:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to close socket, errno %d", errno);
   1d2d4:	f009 fffa 	bl	272cc <__errno>
   1d2d8:	08e4      	lsrs	r4, r4, #3
   1d2da:	01a4      	lsls	r4, r4, #6
   1d2dc:	f044 0401 	orr.w	r4, r4, #1
   1d2e0:	6802      	ldr	r2, [r0, #0]
   1d2e2:	490a      	ldr	r1, [pc, #40]	; (1d30c <download_client_disconnect+0x50>)
   1d2e4:	4620      	mov	r0, r4
   1d2e6:	f009 f922 	bl	2652e <log_string_sync>
		return -errno;
   1d2ea:	f009 ffef 	bl	272cc <__errno>
   1d2ee:	6800      	ldr	r0, [r0, #0]
   1d2f0:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   1d2f2:	bd10      	pop	{r4, pc}
	client->fd = -1;
   1d2f4:	f04f 33ff 	mov.w	r3, #4294967295
   1d2f8:	6023      	str	r3, [r4, #0]
	return 0;
   1d2fa:	e7fa      	b.n	1d2f2 <download_client_disconnect+0x36>
		return -EINVAL;
   1d2fc:	f06f 0015 	mvn.w	r0, #21
   1d300:	e7f7      	b.n	1d2f2 <download_client_disconnect+0x36>
   1d302:	bf00      	nop
   1d304:	0002c344 	.word	0x0002c344
   1d308:	0002c374 	.word	0x0002c374
   1d30c:	0002f916 	.word	0x0002f916

0001d310 <reconnect>:
{
   1d310:	b510      	push	{r4, lr}
   1d312:	4604      	mov	r4, r0
   1d314:	4b0b      	ldr	r3, [pc, #44]	; (1d344 <reconnect+0x34>)
   1d316:	480c      	ldr	r0, [pc, #48]	; (1d348 <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   1d318:	490c      	ldr	r1, [pc, #48]	; (1d34c <reconnect+0x3c>)
   1d31a:	1a1b      	subs	r3, r3, r0
   1d31c:	08db      	lsrs	r3, r3, #3
   1d31e:	019b      	lsls	r3, r3, #6
   1d320:	f043 0003 	orr.w	r0, r3, #3
   1d324:	f009 f903 	bl	2652e <log_string_sync>
	err = download_client_disconnect(dl);
   1d328:	4620      	mov	r0, r4
   1d32a:	f7ff ffc7 	bl	1d2bc <download_client_disconnect>
	if (err) {
   1d32e:	b940      	cbnz	r0, 1d342 <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   1d330:	4620      	mov	r0, r4
   1d332:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   1d336:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   1d33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   1d33e:	f7ff bd6d 	b.w	1ce1c <download_client_connect>
}
   1d342:	bd10      	pop	{r4, pc}
   1d344:	0002c374 	.word	0x0002c374
   1d348:	0002c344 	.word	0x0002c344
   1d34c:	0002f937 	.word	0x0002f937

0001d350 <download_thread>:
{
   1d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d354:	4605      	mov	r5, r0
	int rc = 0;
   1d356:	2400      	movs	r4, #0
   1d358:	4e77      	ldr	r6, [pc, #476]	; (1d538 <download_thread+0x1e8>)
   1d35a:	4b78      	ldr	r3, [pc, #480]	; (1d53c <download_thread+0x1ec>)
{
   1d35c:	b087      	sub	sp, #28
   1d35e:	1af6      	subs	r6, r6, r3
   1d360:	08f6      	lsrs	r6, r6, #3
   1d362:	01b6      	lsls	r6, r6, #6
			LOG_INF("Download complete");
   1d364:	f046 0803 	orr.w	r8, r6, #3
	k_thread_suspend(dl->tid);
   1d368:	f8d5 083c 	ldr.w	r0, [r5, #2108]	; 0x83c
	z_impl_k_thread_suspend(thread);
   1d36c:	f006 fc6c 	bl	23c48 <z_impl_k_thread_suspend>
			LOG_INF("Downloaded %u bytes", dl->progress);
   1d370:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1d558 <download_thread+0x208>
   1d374:	f046 0903 	orr.w	r9, r6, #3
		if (sizeof(dl->buf) - dl->offset == 0) {
   1d378:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   1d37c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   1d380:	d10b      	bne.n	1d39a <download_thread+0x4a>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   1d382:	460a      	mov	r2, r1
   1d384:	f046 0001 	orr.w	r0, r6, #1
   1d388:	496d      	ldr	r1, [pc, #436]	; (1d540 <download_thread+0x1f0>)
   1d38a:	f009 f8d0 	bl	2652e <log_string_sync>
			error_evt_send(dl, E2BIG);
   1d38e:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   1d390:	f8d5 0d08 	ldr.w	r0, [r5, #3336]	; 0xd08
   1d394:	f00b ff7b 	bl	2928e <error_evt_send.isra.0>
				break;
   1d398:	e7e6      	b.n	1d368 <download_thread+0x18>
		len = recv(dl->fd, dl->buf + dl->offset,
   1d39a:	462f      	mov	r7, r5
   1d39c:	f857 0b04 	ldr.w	r0, [r7], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   1d3a6:	e9cd 3300 	strd	r3, r3, [sp]
   1d3aa:	4439      	add	r1, r7
   1d3ac:	f009 fd26 	bl	26dfc <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   1d3b0:	1e42      	subs	r2, r0, #1
   1d3b2:	3203      	adds	r2, #3
   1d3b4:	4683      	mov	fp, r0
   1d3b6:	d951      	bls.n	1d45c <download_thread+0x10c>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   1d3b8:	f8d5 2804 	ldr.w	r2, [r5, #2052]	; 0x804
   1d3bc:	b19a      	cbz	r2, 1d3e6 <download_thread+0x96>
   1d3be:	f895 182c 	ldrb.w	r1, [r5, #2092]	; 0x82c
   1d3c2:	2300      	movs	r3, #0
   1d3c4:	b179      	cbz	r1, 1d3e6 <download_thread+0x96>
	const struct download_client_evt evt = {
   1d3c6:	f88d 300c 	strb.w	r3, [sp, #12]
   1d3ca:	e9cd 7204 	strd	r7, r2, [sp, #16]
	return client->callback(&evt);
   1d3ce:	f8d5 3d08 	ldr.w	r3, [r5, #3336]	; 0xd08
   1d3d2:	a803      	add	r0, sp, #12
   1d3d4:	4798      	blx	r3
				if (rc) {
   1d3d6:	4604      	mov	r4, r0
   1d3d8:	b128      	cbz	r0, 1d3e6 <download_thread+0x96>
					LOG_INF("Fragment refused, download stopped.");
   1d3da:	495a      	ldr	r1, [pc, #360]	; (1d544 <download_thread+0x1f4>)
   1d3dc:	f046 0003 	orr.w	r0, r6, #3
			LOG_INF("Fragment refused, download stopped.");
   1d3e0:	f009 f8a5 	bl	2652e <log_string_sync>
   1d3e4:	e7c0      	b.n	1d368 <download_thread+0x18>
			if (len == -1) {
   1d3e6:	f1bb 3fff 	cmp.w	fp, #4294967295
   1d3ea:	d130      	bne.n	1d44e <download_thread+0xfe>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   1d3ec:	f009 ff6e 	bl	272cc <__errno>
   1d3f0:	6803      	ldr	r3, [r0, #0]
   1d3f2:	2b74      	cmp	r3, #116	; 0x74
   1d3f4:	d11f      	bne.n	1d436 <download_thread+0xe6>
					if (dl->proto == IPPROTO_UDP ||
   1d3f6:	f8d5 3828 	ldr.w	r3, [r5, #2088]	; 0x828
   1d3fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1d3fe:	2b11      	cmp	r3, #17
   1d400:	d07d      	beq.n	1d4fe <download_thread+0x1ae>
					error_cause = ETIMEDOUT;
   1d402:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   1d404:	f009 ff62 	bl	272cc <__errno>
   1d408:	f046 0701 	orr.w	r7, r6, #1
   1d40c:	6802      	ldr	r2, [r0, #0]
   1d40e:	494e      	ldr	r1, [pc, #312]	; (1d548 <download_thread+0x1f8>)
   1d410:	4638      	mov	r0, r7
   1d412:	f009 f88c 	bl	2652e <log_string_sync>
			rc = error_evt_send(dl, error_cause);
   1d416:	4621      	mov	r1, r4
   1d418:	f8d5 0d08 	ldr.w	r0, [r5, #3336]	; 0xd08
   1d41c:	f00b ff37 	bl	2928e <error_evt_send.isra.0>
			if (rc) {
   1d420:	4604      	mov	r4, r0
   1d422:	2800      	cmp	r0, #0
   1d424:	d1a0      	bne.n	1d368 <download_thread+0x18>
			rc = reconnect(dl);
   1d426:	4628      	mov	r0, r5
   1d428:	f7ff ff72 	bl	1d310 <reconnect>
			if (rc) {
   1d42c:	4604      	mov	r4, r0
   1d42e:	2800      	cmp	r0, #0
   1d430:	d065      	beq.n	1d4fe <download_thread+0x1ae>
				error_evt_send(dl, EHOSTDOWN);
   1d432:	2175      	movs	r1, #117	; 0x75
   1d434:	e7ac      	b.n	1d390 <download_thread+0x40>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   1d436:	f009 ff49 	bl	272cc <__errno>
   1d43a:	6803      	ldr	r3, [r0, #0]
   1d43c:	2b0b      	cmp	r3, #11
   1d43e:	d0da      	beq.n	1d3f6 <download_thread+0xa6>
				    (errno == EAGAIN)) {
   1d440:	f009 ff44 	bl	272cc <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   1d444:	6803      	ldr	r3, [r0, #0]
   1d446:	2b0b      	cmp	r3, #11
   1d448:	d0d5      	beq.n	1d3f6 <download_thread+0xa6>
			error_cause = ECONNRESET;
   1d44a:	2468      	movs	r4, #104	; 0x68
   1d44c:	e7da      	b.n	1d404 <download_thread+0xb4>
				LOG_WRN("Peer closed connection!");
   1d44e:	493f      	ldr	r1, [pc, #252]	; (1d54c <download_thread+0x1fc>)
   1d450:	f046 0002 	orr.w	r0, r6, #2
   1d454:	f009 f86b 	bl	2652e <log_string_sync>
			error_cause = ECONNRESET;
   1d458:	2468      	movs	r4, #104	; 0x68
   1d45a:	e7dc      	b.n	1d416 <download_thread+0xc6>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   1d45c:	f8d5 3828 	ldr.w	r3, [r5, #2088]	; 0x828
   1d460:	2b06      	cmp	r3, #6
   1d462:	d002      	beq.n	1d46a <download_thread+0x11a>
   1d464:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1d468:	d105      	bne.n	1d476 <download_thread+0x126>
			rc = http_parse(client, len);
   1d46a:	4659      	mov	r1, fp
   1d46c:	4628      	mov	r0, r5
   1d46e:	f000 f9df 	bl	1d830 <http_parse>
			if (rc > 0) {
   1d472:	1e04      	subs	r4, r0, #0
   1d474:	dc80      	bgt.n	1d378 <download_thread+0x28>
		if (rc < 0) {
   1d476:	2c00      	cmp	r4, #0
   1d478:	da01      	bge.n	1d47e <download_thread+0x12e>
			error_evt_send(dl, EBADMSG);
   1d47a:	214d      	movs	r1, #77	; 0x4d
   1d47c:	e788      	b.n	1d390 <download_thread+0x40>
		if (dl->file_size) {
   1d47e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   1d482:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   1d486:	b1c3      	cbz	r3, 1d4ba <download_thread+0x16a>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   1d488:	2164      	movs	r1, #100	; 0x64
   1d48a:	4351      	muls	r1, r2
   1d48c:	fbb1 f1f3 	udiv	r1, r1, r3
   1d490:	4648      	mov	r0, r9
   1d492:	9100      	str	r1, [sp, #0]
   1d494:	492e      	ldr	r1, [pc, #184]	; (1d550 <download_thread+0x200>)
   1d496:	f009 f84a 	bl	2652e <log_string_sync>
	const struct download_client_evt evt = {
   1d49a:	2300      	movs	r3, #0
   1d49c:	f88d 300c 	strb.w	r3, [sp, #12]
   1d4a0:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   1d4a4:	9704      	str	r7, [sp, #16]
   1d4a6:	9305      	str	r3, [sp, #20]
	return client->callback(&evt);
   1d4a8:	a803      	add	r0, sp, #12
   1d4aa:	f8d5 3d08 	ldr.w	r3, [r5, #3336]	; 0xd08
   1d4ae:	4798      	blx	r3
		if (rc) {
   1d4b0:	4604      	mov	r4, r0
   1d4b2:	b138      	cbz	r0, 1d4c4 <download_thread+0x174>
			LOG_INF("Fragment refused, download stopped.");
   1d4b4:	4640      	mov	r0, r8
   1d4b6:	4923      	ldr	r1, [pc, #140]	; (1d544 <download_thread+0x1f4>)
   1d4b8:	e792      	b.n	1d3e0 <download_thread+0x90>
			LOG_INF("Downloaded %u bytes", dl->progress);
   1d4ba:	4651      	mov	r1, sl
   1d4bc:	4648      	mov	r0, r9
   1d4be:	f009 f836 	bl	2652e <log_string_sync>
   1d4c2:	e7ea      	b.n	1d49a <download_thread+0x14a>
		if (dl->progress == dl->file_size) {
   1d4c4:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   1d4c8:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   1d4cc:	429a      	cmp	r2, r3
   1d4ce:	d10e      	bne.n	1d4ee <download_thread+0x19e>
			LOG_INF("Download complete");
   1d4d0:	4640      	mov	r0, r8
   1d4d2:	4920      	ldr	r1, [pc, #128]	; (1d554 <download_thread+0x204>)
   1d4d4:	f009 f82b 	bl	2652e <log_string_sync>
			const struct download_client_evt evt = {
   1d4d8:	2302      	movs	r3, #2
   1d4da:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1d4de:	9405      	str	r4, [sp, #20]
   1d4e0:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   1d4e4:	a803      	add	r0, sp, #12
   1d4e6:	f8d5 3d08 	ldr.w	r3, [r5, #3336]	; 0xd08
   1d4ea:	4798      	blx	r3
			break;
   1d4ec:	e73c      	b.n	1d368 <download_thread+0x18>
		if (dl->http.connection_close) {
   1d4ee:	f895 382d 	ldrb.w	r3, [r5, #2093]	; 0x82d
   1d4f2:	b123      	cbz	r3, 1d4fe <download_thread+0x1ae>
			dl->http.connection_close = false;
   1d4f4:	f885 082d 	strb.w	r0, [r5, #2093]	; 0x82d
			reconnect(dl);
   1d4f8:	4628      	mov	r0, r5
   1d4fa:	f7ff ff09 	bl	1d310 <reconnect>
		dl->offset = 0;
   1d4fe:	2700      	movs	r7, #0
			rc = request_send(dl);
   1d500:	4628      	mov	r0, r5
		dl->offset = 0;
   1d502:	f8c5 7804 	str.w	r7, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   1d506:	f885 782c 	strb.w	r7, [r5, #2092]	; 0x82c
			rc = request_send(dl);
   1d50a:	f00b feb5 	bl	29278 <request_send>
			if (rc) {
   1d50e:	4604      	mov	r4, r0
   1d510:	2800      	cmp	r0, #0
   1d512:	f43f af31 	beq.w	1d378 <download_thread+0x28>
				rc = error_evt_send(dl, ECONNRESET);
   1d516:	2168      	movs	r1, #104	; 0x68
   1d518:	f8d5 0d08 	ldr.w	r0, [r5, #3336]	; 0xd08
   1d51c:	f00b feb7 	bl	2928e <error_evt_send.isra.0>
				if (rc) {
   1d520:	4604      	mov	r4, r0
   1d522:	2800      	cmp	r0, #0
   1d524:	f47f af20 	bne.w	1d368 <download_thread+0x18>
				rc = reconnect(dl);
   1d528:	4628      	mov	r0, r5
   1d52a:	f7ff fef1 	bl	1d310 <reconnect>
				if (rc) {
   1d52e:	4604      	mov	r4, r0
   1d530:	2800      	cmp	r0, #0
   1d532:	d0e5      	beq.n	1d500 <download_thread+0x1b0>
   1d534:	e77d      	b.n	1d432 <download_thread+0xe2>
   1d536:	bf00      	nop
   1d538:	0002c374 	.word	0x0002c374
   1d53c:	0002c344 	.word	0x0002c344
   1d540:	0002f946 	.word	0x0002f946
   1d544:	0002f973 	.word	0x0002f973
   1d548:	0002f997 	.word	0x0002f997
   1d54c:	0002f9b1 	.word	0x0002f9b1
   1d550:	0002f9c9 	.word	0x0002f9c9
   1d554:	0002f35e 	.word	0x0002f35e
   1d558:	0002f9e7 	.word	0x0002f9e7

0001d55c <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   1d55c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   1d55e:	4604      	mov	r4, r0
   1d560:	b348      	cbz	r0, 1d5b6 <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   1d562:	6803      	ldr	r3, [r0, #0]
   1d564:	2b00      	cmp	r3, #0
   1d566:	db29      	blt.n	1d5bc <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   1d568:	2300      	movs	r3, #0
	client->file = file;
   1d56a:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   1d56e:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   1d572:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   1d576:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   1d57a:	f880 382c 	strb.w	r3, [r0, #2092]	; 0x82c
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   1d57e:	f00b fe7b 	bl	29278 <request_send>
	if (err) {
   1d582:	4606      	mov	r6, r0
   1d584:	b9a8      	cbnz	r0, 1d5b2 <download_client_start+0x56>
   1d586:	4b0f      	ldr	r3, [pc, #60]	; (1d5c4 <download_client_start+0x68>)
   1d588:	4d0f      	ldr	r5, [pc, #60]	; (1d5c8 <download_client_start+0x6c>)
   1d58a:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   1d58e:	1aed      	subs	r5, r5, r3
   1d590:	f008 ffe0 	bl	26554 <z_log_strdup>
   1d594:	08ed      	lsrs	r5, r5, #3
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   1d596:	01ad      	lsls	r5, r5, #6
   1d598:	f045 0503 	orr.w	r5, r5, #3
   1d59c:	4602      	mov	r2, r0
   1d59e:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   1d5a2:	4628      	mov	r0, r5
   1d5a4:	4909      	ldr	r1, [pc, #36]	; (1d5cc <download_client_start+0x70>)
   1d5a6:	f008 ffc2 	bl	2652e <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   1d5aa:	f8d4 083c 	ldr.w	r0, [r4, #2108]	; 0x83c
	z_impl_k_thread_resume(thread);
   1d5ae:	f006 fa8f 	bl	23ad0 <z_impl_k_thread_resume>

	return 0;
}
   1d5b2:	4630      	mov	r0, r6
   1d5b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d5b6:	f06f 0615 	mvn.w	r6, #21
   1d5ba:	e7fa      	b.n	1d5b2 <download_client_start+0x56>
		return -ENOTCONN;
   1d5bc:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d5c0:	e7f7      	b.n	1d5b2 <download_client_start+0x56>
   1d5c2:	bf00      	nop
   1d5c4:	0002c344 	.word	0x0002c344
   1d5c8:	0002c374 	.word	0x0002c374
   1d5cc:	0002f9fb 	.word	0x0002f9fb

0001d5d0 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   1d5d0:	b570      	push	{r4, r5, r6, lr}
   1d5d2:	460d      	mov	r5, r1
   1d5d4:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   1d5d6:	4915      	ldr	r1, [pc, #84]	; (1d62c <url_parse_proto+0x5c>)
   1d5d8:	2205      	movs	r2, #5
{
   1d5da:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   1d5dc:	f00d fd83 	bl	2b0e6 <strncmp>
   1d5e0:	b928      	cbnz	r0, 1d5ee <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   1d5e2:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   1d5e6:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   1d5e8:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   1d5ea:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   1d5ec:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   1d5ee:	2204      	movs	r2, #4
   1d5f0:	4630      	mov	r0, r6
   1d5f2:	490f      	ldr	r1, [pc, #60]	; (1d630 <url_parse_proto+0x60>)
   1d5f4:	f00d fd77 	bl	2b0e6 <strncmp>
   1d5f8:	b908      	cbnz	r0, 1d5fe <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   1d5fa:	2306      	movs	r3, #6
   1d5fc:	e7f3      	b.n	1d5e6 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   1d5fe:	2205      	movs	r2, #5
   1d600:	4630      	mov	r0, r6
   1d602:	490c      	ldr	r1, [pc, #48]	; (1d634 <url_parse_proto+0x64>)
   1d604:	f00d fd6f 	bl	2b0e6 <strncmp>
   1d608:	b920      	cbnz	r0, 1d614 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   1d60a:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   1d60e:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   1d610:	2302      	movs	r3, #2
   1d612:	e7ea      	b.n	1d5ea <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   1d614:	2204      	movs	r2, #4
   1d616:	4630      	mov	r0, r6
   1d618:	4907      	ldr	r1, [pc, #28]	; (1d638 <url_parse_proto+0x68>)
   1d61a:	f00d fd64 	bl	2b0e6 <strncmp>
   1d61e:	b908      	cbnz	r0, 1d624 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   1d620:	2311      	movs	r3, #17
   1d622:	e7f4      	b.n	1d60e <url_parse_proto+0x3e>
		return -EINVAL;
   1d624:	f06f 0015 	mvn.w	r0, #21
   1d628:	e7e0      	b.n	1d5ec <url_parse_proto+0x1c>
   1d62a:	bf00      	nop
   1d62c:	0002fa10 	.word	0x0002fa10
   1d630:	0002fa16 	.word	0x0002fa16
   1d634:	0002fa1b 	.word	0x0002fa1b
   1d638:	0002fa21 	.word	0x0002fa21

0001d63c <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   1d63c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d63e:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   1d640:	9001      	str	r0, [sp, #4]
{
   1d642:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   1d644:	a801      	add	r0, sp, #4
   1d646:	4918      	ldr	r1, [pc, #96]	; (1d6a8 <url_parse_host+0x6c>)
{
   1d648:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   1d64a:	f00b fe59 	bl	29300 <swallow>

	if (cur[0] == '[') {
   1d64e:	9801      	ldr	r0, [sp, #4]
   1d650:	7803      	ldrb	r3, [r0, #0]
   1d652:	2b5b      	cmp	r3, #91	; 0x5b
   1d654:	d111      	bne.n	1d67a <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   1d656:	215d      	movs	r1, #93	; 0x5d
   1d658:	f00d fd30 	bl	2b0bc <strchr>

		if (!end) {
   1d65c:	b1f0      	cbz	r0, 1d69c <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   1d65e:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   1d660:	9901      	ldr	r1, [sp, #4]
   1d662:	1a44      	subs	r4, r0, r1
   1d664:	1c63      	adds	r3, r4, #1
   1d666:	42b3      	cmp	r3, r6
   1d668:	d81b      	bhi.n	1d6a2 <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d66a:	4622      	mov	r2, r4
   1d66c:	4628      	mov	r0, r5
   1d66e:	f00d fbeb 	bl	2ae48 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   1d672:	2000      	movs	r0, #0
   1d674:	5528      	strb	r0, [r5, r4]

	return 0;
}
   1d676:	b002      	add	sp, #8
   1d678:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   1d67a:	213a      	movs	r1, #58	; 0x3a
   1d67c:	f00d fd1e 	bl	2b0bc <strchr>
		if (!end) {
   1d680:	2800      	cmp	r0, #0
   1d682:	d1ed      	bne.n	1d660 <url_parse_host+0x24>
			end = strchr(cur, '/');
   1d684:	212f      	movs	r1, #47	; 0x2f
   1d686:	9801      	ldr	r0, [sp, #4]
   1d688:	f00d fd18 	bl	2b0bc <strchr>
			if (!end) {
   1d68c:	2800      	cmp	r0, #0
   1d68e:	d1e7      	bne.n	1d660 <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   1d690:	4620      	mov	r0, r4
   1d692:	f7f3 fc93 	bl	10fbc <strlen>
   1d696:	1c43      	adds	r3, r0, #1
   1d698:	18e0      	adds	r0, r4, r3
   1d69a:	e7e1      	b.n	1d660 <url_parse_host+0x24>
			return -EINVAL;
   1d69c:	f06f 0015 	mvn.w	r0, #21
   1d6a0:	e7e9      	b.n	1d676 <url_parse_host+0x3a>
		return -E2BIG;
   1d6a2:	f06f 0006 	mvn.w	r0, #6
   1d6a6:	e7e6      	b.n	1d676 <url_parse_host+0x3a>
   1d6a8:	0002fa26 	.word	0x0002fa26

0001d6ac <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   1d6ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d6ae:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   1d6b0:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   1d6b2:	491b      	ldr	r1, [pc, #108]	; (1d720 <url_parse_port+0x74>)
   1d6b4:	a801      	add	r0, sp, #4
   1d6b6:	f00b fe23 	bl	29300 <swallow>

	if (cur[0] == '[') {
   1d6ba:	9b01      	ldr	r3, [sp, #4]
   1d6bc:	781b      	ldrb	r3, [r3, #0]
   1d6be:	2b5b      	cmp	r3, #91	; 0x5b
   1d6c0:	d103      	bne.n	1d6ca <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   1d6c2:	4918      	ldr	r1, [pc, #96]	; (1d724 <url_parse_port+0x78>)
   1d6c4:	a801      	add	r0, sp, #4
   1d6c6:	f00b fe1b 	bl	29300 <swallow>
	}

	err = swallow(&cur, ":");
   1d6ca:	4917      	ldr	r1, [pc, #92]	; (1d728 <url_parse_port+0x7c>)
   1d6cc:	a801      	add	r0, sp, #4
   1d6ce:	f00b fe17 	bl	29300 <swallow>
	if (err) {
   1d6d2:	4605      	mov	r5, r0
   1d6d4:	bb08      	cbnz	r0, 1d71a <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   1d6d6:	212f      	movs	r1, #47	; 0x2f
   1d6d8:	9801      	ldr	r0, [sp, #4]
   1d6da:	f00d fcef 	bl	2b0bc <strchr>
	if (!end) {
   1d6de:	4604      	mov	r4, r0
		len = strlen(cur);
   1d6e0:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   1d6e2:	b9c4      	cbnz	r4, 1d716 <url_parse_port+0x6a>
		len = strlen(cur);
   1d6e4:	f7f3 fc6a 	bl	10fbc <strlen>
   1d6e8:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   1d6ea:	2c07      	cmp	r4, #7
   1d6ec:	bf28      	it	cs
   1d6ee:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   1d6f0:	2308      	movs	r3, #8
   1d6f2:	4622      	mov	r2, r4
   1d6f4:	9901      	ldr	r1, [sp, #4]
   1d6f6:	eb0d 0003 	add.w	r0, sp, r3
   1d6fa:	f00d fbb2 	bl	2ae62 <__memcpy_chk>
	aport[len] = '\0';
   1d6fe:	ab04      	add	r3, sp, #16
   1d700:	441c      	add	r4, r3
   1d702:	2300      	movs	r3, #0

	*port = atoi(aport);
   1d704:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   1d706:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   1d70a:	f00d fb7d 	bl	2ae08 <atoi>
   1d70e:	8030      	strh	r0, [r6, #0]

	return 0;
}
   1d710:	4628      	mov	r0, r5
   1d712:	b004      	add	sp, #16
   1d714:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   1d716:	1a24      	subs	r4, r4, r0
   1d718:	e7e7      	b.n	1d6ea <url_parse_port+0x3e>
		return -EINVAL;
   1d71a:	f06f 0515 	mvn.w	r5, #21
   1d71e:	e7f7      	b.n	1d710 <url_parse_port+0x64>
   1d720:	0002fa26 	.word	0x0002fa26
   1d724:	0002f4c0 	.word	0x0002f4c0
   1d728:	000301ed 	.word	0x000301ed

0001d72c <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   1d72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d72e:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   1d730:	4915      	ldr	r1, [pc, #84]	; (1d788 <url_parse_file+0x5c>)
{
   1d732:	4614      	mov	r4, r2
	cur = url;
   1d734:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   1d736:	f00d fd1c 	bl	2b172 <strstr>
   1d73a:	b940      	cbnz	r0, 1d74e <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   1d73c:	9801      	ldr	r0, [sp, #4]
   1d73e:	f7f3 fc3d 	bl	10fbc <strlen>
   1d742:	3001      	adds	r0, #1
   1d744:	42a0      	cmp	r0, r4
   1d746:	d912      	bls.n	1d76e <url_parse_file+0x42>
		return -E2BIG;
   1d748:	f06f 0006 	mvn.w	r0, #6
   1d74c:	e006      	b.n	1d75c <url_parse_file+0x30>
		err = swallow(&cur, "://");
   1d74e:	490f      	ldr	r1, [pc, #60]	; (1d78c <url_parse_file+0x60>)
   1d750:	a801      	add	r0, sp, #4
   1d752:	f00b fdd5 	bl	29300 <swallow>
		if (err) {
   1d756:	b118      	cbz	r0, 1d760 <url_parse_file+0x34>
			return -EINVAL;
   1d758:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   1d75c:	b003      	add	sp, #12
   1d75e:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   1d760:	490b      	ldr	r1, [pc, #44]	; (1d790 <url_parse_file+0x64>)
   1d762:	a801      	add	r0, sp, #4
   1d764:	f00b fdcc 	bl	29300 <swallow>
		if (err) {
   1d768:	2800      	cmp	r0, #0
   1d76a:	d0e7      	beq.n	1d73c <url_parse_file+0x10>
   1d76c:	e7f4      	b.n	1d758 <url_parse_file+0x2c>
	len = strlen(cur);
   1d76e:	9801      	ldr	r0, [sp, #4]
   1d770:	f7f3 fc24 	bl	10fbc <strlen>
   1d774:	9901      	ldr	r1, [sp, #4]
   1d776:	4604      	mov	r4, r0
   1d778:	4602      	mov	r2, r0
   1d77a:	4628      	mov	r0, r5
   1d77c:	f00d fb64 	bl	2ae48 <memcpy>
	file[len] = '\0';
   1d780:	2300      	movs	r3, #0
	return 0;
   1d782:	4618      	mov	r0, r3
	file[len] = '\0';
   1d784:	552b      	strb	r3, [r5, r4]
	return 0;
   1d786:	e7e9      	b.n	1d75c <url_parse_file+0x30>
   1d788:	0002fa27 	.word	0x0002fa27
   1d78c:	0002fa26 	.word	0x0002fa26
   1d790:	0002fa28 	.word	0x0002fa28

0001d794 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   1d794:	b570      	push	{r4, r5, r6, lr}
   1d796:	b0c4      	sub	sp, #272	; 0x110
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
	__ASSERT_NO_MSG(client->file);

	err = url_parse_host(client->host, host, sizeof(host));
   1d798:	ae04      	add	r6, sp, #16
{
   1d79a:	4605      	mov	r5, r0
	err = url_parse_host(client->host, host, sizeof(host));
   1d79c:	2240      	movs	r2, #64	; 0x40
   1d79e:	4631      	mov	r1, r6
   1d7a0:	f8d0 0810 	ldr.w	r0, [r0, #2064]	; 0x810
   1d7a4:	f7ff ff4a 	bl	1d63c <url_parse_host>
	if (err) {
   1d7a8:	4604      	mov	r4, r0
   1d7aa:	bb98      	cbnz	r0, 1d814 <http_get_request_send+0x80>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   1d7ac:	22c0      	movs	r2, #192	; 0xc0
   1d7ae:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   1d7b2:	a914      	add	r1, sp, #80	; 0x50
   1d7b4:	f7ff ffba 	bl	1d72c <url_parse_file>
	if (err) {
   1d7b8:	4604      	mov	r4, r0
   1d7ba:	bb58      	cbnz	r0, 1d814 <http_get_request_send+0x80>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   1d7bc:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   1d7c0:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
   1d7c4:	b34b      	cbz	r3, 1d81a <http_get_request_send+0x86>
		off = client->progress + client->config.frag_size_override - 1;
   1d7c6:	440b      	add	r3, r1
   1d7c8:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   1d7ca:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
   1d7ce:	b11a      	cbz	r2, 1d7d8 <http_get_request_send+0x44>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size - 1);
   1d7d0:	3a01      	subs	r2, #1
   1d7d2:	4293      	cmp	r3, r2
   1d7d4:	bf28      	it	cs
   1d7d6:	4613      	movcs	r3, r2
	}

	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   1d7d8:	e9cd 1301 	strd	r1, r3, [sp, #4]
   1d7dc:	4a10      	ldr	r2, [pc, #64]	; (1d820 <http_get_request_send+0x8c>)
   1d7de:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1d7e2:	ab14      	add	r3, sp, #80	; 0x50
   1d7e4:	9600      	str	r6, [sp, #0]
   1d7e6:	1d28      	adds	r0, r5, #4
   1d7e8:	f007 fa24 	bl	24c34 <sniprintf>
   1d7ec:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   1d7ee:	4628      	mov	r0, r5
   1d7f0:	f00b fd5c 	bl	292ac <socket_send>
	if (err) {
   1d7f4:	4604      	mov	r4, r0
   1d7f6:	b168      	cbz	r0, 1d814 <http_get_request_send+0x80>
   1d7f8:	4b0a      	ldr	r3, [pc, #40]	; (1d824 <http_get_request_send+0x90>)
   1d7fa:	4d0b      	ldr	r5, [pc, #44]	; (1d828 <http_get_request_send+0x94>)
   1d7fc:	1aed      	subs	r5, r5, r3
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   1d7fe:	f009 fd65 	bl	272cc <__errno>
   1d802:	08ed      	lsrs	r5, r5, #3
   1d804:	01ad      	lsls	r5, r5, #6
   1d806:	f045 0501 	orr.w	r5, r5, #1
   1d80a:	6802      	ldr	r2, [r0, #0]
   1d80c:	4907      	ldr	r1, [pc, #28]	; (1d82c <http_get_request_send+0x98>)
   1d80e:	4628      	mov	r0, r5
   1d810:	f008 fe8d 	bl	2652e <log_string_sync>
		return err;
	}

	return 0;
}
   1d814:	4620      	mov	r0, r4
   1d816:	b044      	add	sp, #272	; 0x110
   1d818:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   1d81a:	f201 73ff 	addw	r3, r1, #2047	; 0x7ff
   1d81e:	e7d4      	b.n	1d7ca <http_get_request_send+0x36>
   1d820:	0002fa2a 	.word	0x0002fa2a
   1d824:	0002c344 	.word	0x0002c344
   1d828:	0002c374 	.word	0x0002c374
   1d82c:	0002fa75 	.word	0x0002fa75

0001d830 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   1d830:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   1d834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	client->offset += len;
   1d838:	440b      	add	r3, r1
   1d83a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   1d83e:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
{
   1d842:	4604      	mov	r4, r0
   1d844:	4688      	mov	r8, r1
	if (!client->http.has_header) {
   1d846:	2b00      	cmp	r3, #0
   1d848:	f040 80b3 	bne.w	1d9b2 <http_parse+0x182>
	p = strstr(client->buf, "\r\n\r\n");
   1d84c:	1d07      	adds	r7, r0, #4
   1d84e:	4638      	mov	r0, r7
   1d850:	4966      	ldr	r1, [pc, #408]	; (1d9ec <http_parse+0x1bc>)
   1d852:	f00d fc8e 	bl	2b172 <strstr>
	if (!p || p > client->buf + client->offset) {
   1d856:	4605      	mov	r5, r0
   1d858:	b918      	cbnz	r0, 1d862 <http_parse+0x32>
		rc = http_header_parse(client, &hdr_len);
		if (rc > 0) {
			/* Wait for header */
			return 1;
   1d85a:	2001      	movs	r0, #1
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   1d85c:	b003      	add	sp, #12
   1d85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!p || p > client->buf + client->offset) {
   1d862:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   1d866:	443b      	add	r3, r7
   1d868:	4298      	cmp	r0, r3
   1d86a:	d8f6      	bhi.n	1d85a <http_parse+0x2a>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   1d86c:	485f      	ldr	r0, [pc, #380]	; (1d9ec <http_parse+0x1bc>)
   1d86e:	f7f3 fba5 	bl	10fbc <strlen>
   1d872:	4405      	add	r5, r0
   1d874:	463b      	mov	r3, r7
   1d876:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   1d878:	4e5d      	ldr	r6, [pc, #372]	; (1d9f0 <http_parse+0x1c0>)
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   1d87a:	eba5 0907 	sub.w	r9, r5, r7
	for (size_t i = 0; i < *hdr_len; i++) {
   1d87e:	4298      	cmp	r0, r3
   1d880:	d110      	bne.n	1d8a4 <http_parse+0x74>
	p = strstr(client->buf, "http/1.1 ");
   1d882:	4638      	mov	r0, r7
   1d884:	495b      	ldr	r1, [pc, #364]	; (1d9f4 <http_parse+0x1c4>)
   1d886:	f00d fc74 	bl	2b172 <strstr>
	if (!p) {
   1d88a:	4606      	mov	r6, r0
   1d88c:	b9a0      	cbnz	r0, 1d8b8 <http_parse+0x88>
   1d88e:	485a      	ldr	r0, [pc, #360]	; (1d9f8 <http_parse+0x1c8>)
   1d890:	4b5a      	ldr	r3, [pc, #360]	; (1d9fc <http_parse+0x1cc>)
		LOG_ERR("Server response missing HTTP/1.1");
   1d892:	495b      	ldr	r1, [pc, #364]	; (1da00 <http_parse+0x1d0>)
   1d894:	1ac0      	subs	r0, r0, r3
   1d896:	08c0      	lsrs	r0, r0, #3
   1d898:	0180      	lsls	r0, r0, #6
				LOG_ERR("No file size in response");
   1d89a:	f040 0001 	orr.w	r0, r0, #1
   1d89e:	f008 fe46 	bl	2652e <log_string_sync>
   1d8a2:	e039      	b.n	1d918 <http_parse+0xe8>
		client->buf[i] = tolower(client->buf[i]);
   1d8a4:	781a      	ldrb	r2, [r3, #0]
   1d8a6:	5d91      	ldrb	r1, [r2, r6]
   1d8a8:	f001 0103 	and.w	r1, r1, #3
   1d8ac:	2901      	cmp	r1, #1
   1d8ae:	bf08      	it	eq
   1d8b0:	3220      	addeq	r2, #32
   1d8b2:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   1d8b6:	e7e2      	b.n	1d87e <http_parse+0x4e>
	p += strlen("http/1.1 ");
   1d8b8:	484e      	ldr	r0, [pc, #312]	; (1d9f4 <http_parse+0x1c4>)
   1d8ba:	f7f3 fb7f 	bl	10fbc <strlen>
   1d8be:	4406      	add	r6, r0
	http_status = strtoul(p, &q, 10);
   1d8c0:	220a      	movs	r2, #10
   1d8c2:	4630      	mov	r0, r6
   1d8c4:	a901      	add	r1, sp, #4
   1d8c6:	f007 fbbd 	bl	25044 <strtoul>
	if (!q) {
   1d8ca:	9b01      	ldr	r3, [sp, #4]
   1d8cc:	b933      	cbnz	r3, 1d8dc <http_parse+0xac>
   1d8ce:	484a      	ldr	r0, [pc, #296]	; (1d9f8 <http_parse+0x1c8>)
   1d8d0:	4b4a      	ldr	r3, [pc, #296]	; (1d9fc <http_parse+0x1cc>)
		LOG_ERR("Server response malformed: status code not found");
   1d8d2:	494c      	ldr	r1, [pc, #304]	; (1da04 <http_parse+0x1d4>)
   1d8d4:	1ac0      	subs	r0, r0, r3
   1d8d6:	08c0      	lsrs	r0, r0, #3
   1d8d8:	0180      	lsls	r0, r0, #6
   1d8da:	e7de      	b.n	1d89a <http_parse+0x6a>
	if (http_status != expected_status) {
   1d8dc:	28ce      	cmp	r0, #206	; 0xce
   1d8de:	d021      	beq.n	1d924 <http_parse+0xf4>
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   1d8e0:	f242 4101 	movw	r1, #9217	; 0x2401
   1d8e4:	9a01      	ldr	r2, [sp, #4]
   1d8e6:	7813      	ldrb	r3, [r2, #0]
   1d8e8:	2b0d      	cmp	r3, #13
   1d8ea:	d818      	bhi.n	1d91e <http_parse+0xee>
   1d8ec:	fa21 f303 	lsr.w	r3, r1, r3
   1d8f0:	43db      	mvns	r3, r3
   1d8f2:	f013 0301 	ands.w	r3, r3, #1
   1d8f6:	d112      	bne.n	1d91e <http_parse+0xee>
		*q = '\0';
   1d8f8:	7013      	strb	r3, [r2, #0]
   1d8fa:	4c3f      	ldr	r4, [pc, #252]	; (1d9f8 <http_parse+0x1c8>)
   1d8fc:	4b3f      	ldr	r3, [pc, #252]	; (1d9fc <http_parse+0x1cc>)
   1d8fe:	4630      	mov	r0, r6
   1d900:	1ae4      	subs	r4, r4, r3
   1d902:	f008 fe27 	bl	26554 <z_log_strdup>
   1d906:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   1d908:	01a4      	lsls	r4, r4, #6
   1d90a:	f044 0401 	orr.w	r4, r4, #1
   1d90e:	4602      	mov	r2, r0
   1d910:	493d      	ldr	r1, [pc, #244]	; (1da08 <http_parse+0x1d8>)
   1d912:	4620      	mov	r0, r4
   1d914:	f008 fe0b 	bl	2652e <log_string_sync>
			return -1;
   1d918:	f04f 30ff 	mov.w	r0, #4294967295
   1d91c:	e79e      	b.n	1d85c <http_parse+0x2c>
			q++;
   1d91e:	3201      	adds	r2, #1
   1d920:	9201      	str	r2, [sp, #4]
   1d922:	e7df      	b.n	1d8e4 <http_parse+0xb4>
	if (client->file_size == 0) {
   1d924:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   1d928:	b9f3      	cbnz	r3, 1d968 <http_parse+0x138>
			p = strstr(client->buf, "content-range");
   1d92a:	4638      	mov	r0, r7
   1d92c:	4937      	ldr	r1, [pc, #220]	; (1da0c <http_parse+0x1dc>)
   1d92e:	f00d fc20 	bl	2b172 <strstr>
			if (!p) {
   1d932:	b930      	cbnz	r0, 1d942 <http_parse+0x112>
   1d934:	4830      	ldr	r0, [pc, #192]	; (1d9f8 <http_parse+0x1c8>)
   1d936:	4b31      	ldr	r3, [pc, #196]	; (1d9fc <http_parse+0x1cc>)
				LOG_ERR("Server did not send "
   1d938:	4935      	ldr	r1, [pc, #212]	; (1da10 <http_parse+0x1e0>)
   1d93a:	1ac0      	subs	r0, r0, r3
   1d93c:	08c0      	lsrs	r0, r0, #3
   1d93e:	0180      	lsls	r0, r0, #6
   1d940:	e7ab      	b.n	1d89a <http_parse+0x6a>
			p = strstr(p, "/");
   1d942:	4934      	ldr	r1, [pc, #208]	; (1da14 <http_parse+0x1e4>)
   1d944:	f00d fc15 	bl	2b172 <strstr>
			if (!p) {
   1d948:	b930      	cbnz	r0, 1d958 <http_parse+0x128>
   1d94a:	482b      	ldr	r0, [pc, #172]	; (1d9f8 <http_parse+0x1c8>)
   1d94c:	4b2b      	ldr	r3, [pc, #172]	; (1d9fc <http_parse+0x1cc>)
				LOG_ERR("No file size in response");
   1d94e:	4932      	ldr	r1, [pc, #200]	; (1da18 <http_parse+0x1e8>)
   1d950:	1ac0      	subs	r0, r0, r3
   1d952:	08c0      	lsrs	r0, r0, #3
   1d954:	0180      	lsls	r0, r0, #6
   1d956:	e7a0      	b.n	1d89a <http_parse+0x6a>
		client->file_size += atoi(p + 1);
   1d958:	3001      	adds	r0, #1
   1d95a:	f00d fa55 	bl	2ae08 <atoi>
   1d95e:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   1d962:	4418      	add	r0, r3
   1d964:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   1d968:	4638      	mov	r0, r7
   1d96a:	492c      	ldr	r1, [pc, #176]	; (1da1c <http_parse+0x1ec>)
   1d96c:	f00d fc01 	bl	2b172 <strstr>
	if (p) {
   1d970:	b160      	cbz	r0, 1d98c <http_parse+0x15c>
   1d972:	4b22      	ldr	r3, [pc, #136]	; (1d9fc <http_parse+0x1cc>)
   1d974:	4820      	ldr	r0, [pc, #128]	; (1d9f8 <http_parse+0x1c8>)
		LOG_WRN("Peer closed connection, will re-connect");
   1d976:	492a      	ldr	r1, [pc, #168]	; (1da20 <http_parse+0x1f0>)
   1d978:	1ac0      	subs	r0, r0, r3
   1d97a:	08c0      	lsrs	r0, r0, #3
   1d97c:	0180      	lsls	r0, r0, #6
   1d97e:	f040 0002 	orr.w	r0, r0, #2
   1d982:	f008 fdd4 	bl	2652e <log_string_sync>
		client->http.connection_close = true;
   1d986:	2301      	movs	r3, #1
   1d988:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
	client->http.has_header = true;
   1d98c:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   1d98e:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   1d992:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
		if (client->offset != hdr_len) {
   1d996:	454a      	cmp	r2, r9
   1d998:	d024      	beq.n	1d9e4 <http_parse+0x1b4>
   1d99a:	4629      	mov	r1, r5
   1d99c:	4638      	mov	r0, r7
   1d99e:	eba2 0209 	sub.w	r2, r2, r9
   1d9a2:	f00d fa51 	bl	2ae48 <memcpy>
			client->offset -= hdr_len;
   1d9a6:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   1d9aa:	eba3 0309 	sub.w	r3, r3, r9
			client->offset = 0;
   1d9ae:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   1d9b2:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   1d9b6:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   1d9ba:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   1d9be:	4598      	cmp	r8, r3
   1d9c0:	bf94      	ite	ls
   1d9c2:	4441      	addls	r1, r8
   1d9c4:	18c9      	addhi	r1, r1, r3
	if (client->progress != client->file_size &&
   1d9c6:	4291      	cmp	r1, r2
	client->progress += MIN(client->offset, len);
   1d9c8:	f8c4 180c 	str.w	r1, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   1d9cc:	d00c      	beq.n	1d9e8 <http_parse+0x1b8>
	    client->offset < (client->config.frag_size_override != 0 ?
   1d9ce:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   1d9d2:	2800      	cmp	r0, #0
   1d9d4:	bf08      	it	eq
   1d9d6:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   1d9da:	4298      	cmp	r0, r3
   1d9dc:	bf94      	ite	ls
   1d9de:	2000      	movls	r0, #0
   1d9e0:	2001      	movhi	r0, #1
   1d9e2:	e73b      	b.n	1d85c <http_parse+0x2c>
			client->offset = 0;
   1d9e4:	2300      	movs	r3, #0
   1d9e6:	e7e2      	b.n	1d9ae <http_parse+0x17e>
	return 0;
   1d9e8:	2000      	movs	r0, #0
   1d9ea:	e737      	b.n	1d85c <http_parse+0x2c>
   1d9ec:	0002fa70 	.word	0x0002fa70
   1d9f0:	00030304 	.word	0x00030304
   1d9f4:	0002fa9b 	.word	0x0002fa9b
   1d9f8:	0002c374 	.word	0x0002c374
   1d9fc:	0002c344 	.word	0x0002c344
   1da00:	0002faa5 	.word	0x0002faa5
   1da04:	0002fac6 	.word	0x0002fac6
   1da08:	0002faf7 	.word	0x0002faf7
   1da0c:	0002fb14 	.word	0x0002fb14
   1da10:	0002fb22 	.word	0x0002fb22
   1da14:	0002fa28 	.word	0x0002fa28
   1da18:	0002fb52 	.word	0x0002fb52
   1da1c:	0002fb6b 	.word	0x0002fb6b
   1da20:	0002fb7d 	.word	0x0002fb7d

0001da24 <send_evt>:

static void send_evt(enum fota_download_evt_id id)
{
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
	const struct fota_download_evt evt = {
   1da24:	2300      	movs	r3, #0
{
   1da26:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   1da28:	e9cd 3300 	strd	r3, r3, [sp]
		.id = id
	};
	callback(&evt);
   1da2c:	4b04      	ldr	r3, [pc, #16]	; (1da40 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   1da2e:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   1da32:	681b      	ldr	r3, [r3, #0]
   1da34:	4668      	mov	r0, sp
   1da36:	4798      	blx	r3
}
   1da38:	b003      	add	sp, #12
   1da3a:	f85d fb04 	ldr.w	pc, [sp], #4
   1da3e:	bf00      	nop
   1da40:	2000ecec 	.word	0x2000ecec

0001da44 <send_error_evt>:

static void send_error_evt(enum fota_download_error_cause cause)
{
   1da44:	b507      	push	{r0, r1, r2, lr}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   1da46:	2300      	movs	r3, #0
   1da48:	2204      	movs	r2, #4
   1da4a:	e9cd 3300 	strd	r3, r3, [sp]
   1da4e:	f88d 2000 	strb.w	r2, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   1da52:	4a05      	ldr	r2, [pc, #20]	; (1da68 <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   1da54:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   1da58:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   1da5a:	4b04      	ldr	r3, [pc, #16]	; (1da6c <send_error_evt+0x28>)
   1da5c:	4668      	mov	r0, sp
   1da5e:	681b      	ldr	r3, [r3, #0]
   1da60:	4798      	blx	r3
}
   1da62:	b003      	add	sp, #12
   1da64:	f85d fb04 	ldr.w	pc, [sp], #4
   1da68:	2000f19b 	.word	0x2000f19b
   1da6c:	2000ecec 	.word	0x2000ecec

0001da70 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   1da70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   1da72:	a801      	add	r0, sp, #4
   1da74:	f000 fa54 	bl	1df20 <dfu_target_offset_get>
	if (err != 0) {
   1da78:	4c19      	ldr	r4, [pc, #100]	; (1dae0 <download_with_offset+0x70>)
   1da7a:	4b1a      	ldr	r3, [pc, #104]	; (1dae4 <download_with_offset+0x74>)
   1da7c:	1ae4      	subs	r4, r4, r3
   1da7e:	08e4      	lsrs	r4, r4, #3
   1da80:	4603      	mov	r3, r0
   1da82:	01a4      	lsls	r4, r4, #6
   1da84:	b150      	cbz	r0, 1da9c <download_with_offset+0x2c>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   1da86:	4a18      	ldr	r2, [pc, #96]	; (1dae8 <download_with_offset+0x78>)
   1da88:	4918      	ldr	r1, [pc, #96]	; (1daec <download_with_offset+0x7c>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   1da8a:	f044 0001 	orr.w	r0, r4, #1
   1da8e:	f008 fd4e 	bl	2652e <log_string_sync>
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   1da92:	2001      	movs	r0, #1
   1da94:	f7ff ffd6 	bl	1da44 <send_error_evt>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   1da98:	b003      	add	sp, #12
   1da9a:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   1da9c:	4d14      	ldr	r5, [pc, #80]	; (1daf0 <download_with_offset+0x80>)
   1da9e:	4628      	mov	r0, r5
   1daa0:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   1daa4:	f605 0218 	addw	r2, r5, #2072	; 0x818
   1daa8:	f7ff f9b8 	bl	1ce1c <download_client_connect>
	if (err != 0) {
   1daac:	4603      	mov	r3, r0
   1daae:	b110      	cbz	r0, 1dab6 <download_with_offset+0x46>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   1dab0:	4a0d      	ldr	r2, [pc, #52]	; (1dae8 <download_with_offset+0x78>)
   1dab2:	4910      	ldr	r1, [pc, #64]	; (1daf4 <download_with_offset+0x84>)
   1dab4:	e7e9      	b.n	1da8a <download_with_offset+0x1a>
	err = download_client_start(&dlc, dlc.file, offset);
   1dab6:	4628      	mov	r0, r5
   1dab8:	9a01      	ldr	r2, [sp, #4]
   1daba:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   1dabe:	f7ff fd4d 	bl	1d55c <download_client_start>
	if (err != 0) {
   1dac2:	4603      	mov	r3, r0
   1dac4:	b110      	cbz	r0, 1dacc <download_with_offset+0x5c>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   1dac6:	4a08      	ldr	r2, [pc, #32]	; (1dae8 <download_with_offset+0x78>)
   1dac8:	490b      	ldr	r1, [pc, #44]	; (1daf8 <download_with_offset+0x88>)
   1daca:	e7de      	b.n	1da8a <download_with_offset+0x1a>
	LOG_INF("Downloading from offset: 0x%x", offset);
   1dacc:	9a01      	ldr	r2, [sp, #4]
   1dace:	490b      	ldr	r1, [pc, #44]	; (1dafc <download_with_offset+0x8c>)
   1dad0:	f044 0003 	orr.w	r0, r4, #3
   1dad4:	f008 fd2b 	bl	2652e <log_string_sync>
	downloading = true;
   1dad8:	2201      	movs	r2, #1
   1dada:	4b09      	ldr	r3, [pc, #36]	; (1db00 <download_with_offset+0x90>)
   1dadc:	701a      	strb	r2, [r3, #0]
	return;
   1dade:	e7db      	b.n	1da98 <download_with_offset+0x28>
   1dae0:	0002c38c 	.word	0x0002c38c
   1dae4:	0002c344 	.word	0x0002c344
   1dae8:	0002fda6 	.word	0x0002fda6
   1daec:	0002fba5 	.word	0x0002fba5
   1daf0:	2000cd78 	.word	0x2000cd78
   1daf4:	0002fbcb 	.word	0x0002fbcb
   1daf8:	0002fbee 	.word	0x0002fbee
   1dafc:	0002fc19 	.word	0x0002fc19
   1db00:	2000f19b 	.word	0x2000f19b

0001db04 <download_client_callback>:
{
   1db04:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   1db06:	4605      	mov	r5, r0
{
   1db08:	b085      	sub	sp, #20
	if (event == NULL) {
   1db0a:	2800      	cmp	r0, #0
   1db0c:	f000 8115 	beq.w	1dd3a <download_client_callback+0x236>
	switch (event->id) {
   1db10:	7803      	ldrb	r3, [r0, #0]
   1db12:	2b01      	cmp	r3, #1
   1db14:	f000 80db 	beq.w	1dcce <download_client_callback+0x1ca>
   1db18:	2b02      	cmp	r3, #2
   1db1a:	f000 80b8 	beq.w	1dc8e <download_client_callback+0x18a>
   1db1e:	2b00      	cmp	r3, #0
   1db20:	f040 80eb 	bne.w	1dcfa <download_client_callback+0x1f6>
		if (first_fragment) {
   1db24:	4e86      	ldr	r6, [pc, #536]	; (1dd40 <download_client_callback+0x23c>)
   1db26:	7833      	ldrb	r3, [r6, #0]
   1db28:	2b00      	cmp	r3, #0
   1db2a:	d071      	beq.n	1dc10 <download_client_callback+0x10c>
			err = download_client_file_size_get(&dlc, &file_size);
   1db2c:	4985      	ldr	r1, [pc, #532]	; (1dd44 <download_client_callback+0x240>)
   1db2e:	4886      	ldr	r0, [pc, #536]	; (1dd48 <download_client_callback+0x244>)
   1db30:	f00b fbdc 	bl	292ec <download_client_file_size_get>
			if (err != 0) {
   1db34:	4604      	mov	r4, r0
   1db36:	b108      	cbz	r0, 1db3c <download_client_callback+0x38>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   1db38:	2001      	movs	r0, #1
   1db3a:	e089      	b.n	1dc50 <download_client_callback+0x14c>
			first_fragment = false;
   1db3c:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   1db3e:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1db42:	f000 f9ab 	bl	1de9c <dfu_target_img_type>
   1db46:	4b81      	ldr	r3, [pc, #516]	; (1dd4c <download_client_callback+0x248>)
   1db48:	b2c0      	uxtb	r0, r0
   1db4a:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   1db4c:	4b80      	ldr	r3, [pc, #512]	; (1dd50 <download_client_callback+0x24c>)
   1db4e:	781b      	ldrb	r3, [r3, #0]
   1db50:	b343      	cbz	r3, 1dba4 <download_client_callback+0xa0>
   1db52:	4298      	cmp	r0, r3
   1db54:	d026      	beq.n	1dba4 <download_client_callback+0xa0>
   1db56:	4a7f      	ldr	r2, [pc, #508]	; (1dd54 <download_client_callback+0x250>)
   1db58:	4c7f      	ldr	r4, [pc, #508]	; (1dd58 <download_client_callback+0x254>)
				LOG_ERR("FOTA image type %d does not match expected type %d",
   1db5a:	4980      	ldr	r1, [pc, #512]	; (1dd5c <download_client_callback+0x258>)
   1db5c:	1aa4      	subs	r4, r4, r2
   1db5e:	08e4      	lsrs	r4, r4, #3
   1db60:	01a4      	lsls	r4, r4, #6
   1db62:	4602      	mov	r2, r0
   1db64:	f044 0001 	orr.w	r0, r4, #1
   1db68:	f008 fce1 	bl	2652e <log_string_sync>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   1db6c:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   1db6e:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   1db72:	4875      	ldr	r0, [pc, #468]	; (1dd48 <download_client_callback+0x244>)
   1db74:	f7ff fba2 	bl	1d2bc <download_client_disconnect>
				send_error_evt(err_cause);
   1db78:	4628      	mov	r0, r5
   1db7a:	f7ff ff63 	bl	1da44 <send_error_evt>
				int res = dfu_target_reset();
   1db7e:	f000 fa09 	bl	1df94 <dfu_target_reset>
				if (res != 0) {
   1db82:	b150      	cbz	r0, 1db9a <download_client_callback+0x96>
   1db84:	4a73      	ldr	r2, [pc, #460]	; (1dd54 <download_client_callback+0x250>)
   1db86:	4b74      	ldr	r3, [pc, #464]	; (1dd58 <download_client_callback+0x254>)
					LOG_ERR("Unable to reset DFU target, err: %d",
   1db88:	4975      	ldr	r1, [pc, #468]	; (1dd60 <download_client_callback+0x25c>)
   1db8a:	1a9b      	subs	r3, r3, r2
   1db8c:	08db      	lsrs	r3, r3, #3
   1db8e:	019b      	lsls	r3, r3, #6
   1db90:	4602      	mov	r2, r0
   1db92:	f043 0001 	orr.w	r0, r3, #1
   1db96:	f008 fcca 	bl	2652e <log_string_sync>
				first_fragment = true;
   1db9a:	2301      	movs	r3, #1
   1db9c:	7033      	strb	r3, [r6, #0]
}
   1db9e:	4620      	mov	r0, r4
   1dba0:	b005      	add	sp, #20
   1dba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				err = dfu_target_init(img_type, file_size,
   1dba4:	4b67      	ldr	r3, [pc, #412]	; (1dd44 <download_client_callback+0x240>)
   1dba6:	4a6f      	ldr	r2, [pc, #444]	; (1dd64 <download_client_callback+0x260>)
   1dba8:	6819      	ldr	r1, [r3, #0]
   1dbaa:	f000 f995 	bl	1ded8 <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   1dbae:	1e04      	subs	r4, r0, #0
   1dbb0:	da0f      	bge.n	1dbd2 <download_client_callback+0xce>
   1dbb2:	f114 0f10 	cmn.w	r4, #16
   1dbb6:	d00c      	beq.n	1dbd2 <download_client_callback+0xce>
   1dbb8:	4b66      	ldr	r3, [pc, #408]	; (1dd54 <download_client_callback+0x250>)
   1dbba:	4867      	ldr	r0, [pc, #412]	; (1dd58 <download_client_callback+0x254>)
					LOG_ERR("dfu_target_init error %d", err);
   1dbbc:	4622      	mov	r2, r4
   1dbbe:	1ac0      	subs	r0, r0, r3
   1dbc0:	08c0      	lsrs	r0, r0, #3
   1dbc2:	0180      	lsls	r0, r0, #6
   1dbc4:	4968      	ldr	r1, [pc, #416]	; (1dd68 <download_client_callback+0x264>)
   1dbc6:	f040 0001 	orr.w	r0, r0, #1
   1dbca:	f008 fcb0 	bl	2652e <log_string_sync>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   1dbce:	2501      	movs	r5, #1
   1dbd0:	e7cf      	b.n	1db72 <download_client_callback+0x6e>
			err = dfu_target_offset_get(&offset);
   1dbd2:	a801      	add	r0, sp, #4
   1dbd4:	f000 f9a4 	bl	1df20 <dfu_target_offset_get>
			if (err != 0) {
   1dbd8:	b110      	cbz	r0, 1dbe0 <download_client_callback+0xdc>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   1dbda:	2001      	movs	r0, #1
   1dbdc:	f7ff ff32 	bl	1da44 <send_error_evt>
			if (offset != 0) {
   1dbe0:	9b01      	ldr	r3, [sp, #4]
   1dbe2:	b1ab      	cbz	r3, 1dc10 <download_client_callback+0x10c>
				(void)download_client_disconnect(&dlc);
   1dbe4:	4858      	ldr	r0, [pc, #352]	; (1dd48 <download_client_callback+0x244>)
   1dbe6:	f7ff fb69 	bl	1d2bc <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   1dbea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1dbee:	2300      	movs	r3, #0
   1dbf0:	485e      	ldr	r0, [pc, #376]	; (1dd6c <download_client_callback+0x268>)
   1dbf2:	f005 fdcf 	bl	23794 <k_work_schedule>
   1dbf6:	4b57      	ldr	r3, [pc, #348]	; (1dd54 <download_client_callback+0x250>)
   1dbf8:	4857      	ldr	r0, [pc, #348]	; (1dd58 <download_client_callback+0x254>)
				LOG_INF("Refuse fragment, restart with offset");
   1dbfa:	495d      	ldr	r1, [pc, #372]	; (1dd70 <download_client_callback+0x26c>)
   1dbfc:	1ac0      	subs	r0, r0, r3
   1dbfe:	08c0      	lsrs	r0, r0, #3
   1dc00:	0180      	lsls	r0, r0, #6
   1dc02:	f040 0003 	orr.w	r0, r0, #3
   1dc06:	f008 fc92 	bl	2652e <log_string_sync>
				return -1;
   1dc0a:	f04f 34ff 	mov.w	r4, #4294967295
   1dc0e:	e7c6      	b.n	1db9e <download_client_callback+0x9a>
		err = dfu_target_write(event->fragment.buf,
   1dc10:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1dc14:	f000 f98e 	bl	1df34 <dfu_target_write>
		if (err != 0) {
   1dc18:	4604      	mov	r4, r0
   1dc1a:	b1e0      	cbz	r0, 1dc56 <download_client_callback+0x152>
   1dc1c:	4b4d      	ldr	r3, [pc, #308]	; (1dd54 <download_client_callback+0x250>)
   1dc1e:	4d4e      	ldr	r5, [pc, #312]	; (1dd58 <download_client_callback+0x254>)
			LOG_ERR("dfu_target_write error %d", err);
   1dc20:	4602      	mov	r2, r0
   1dc22:	1aed      	subs	r5, r5, r3
   1dc24:	08ed      	lsrs	r5, r5, #3
   1dc26:	01ad      	lsls	r5, r5, #6
   1dc28:	f045 0501 	orr.w	r5, r5, #1
   1dc2c:	4628      	mov	r0, r5
   1dc2e:	4951      	ldr	r1, [pc, #324]	; (1dd74 <download_client_callback+0x270>)
   1dc30:	f008 fc7d 	bl	2652e <log_string_sync>
			int res = dfu_target_done(false);
   1dc34:	2000      	movs	r0, #0
   1dc36:	f000 f989 	bl	1df4c <dfu_target_done>
			if (res != 0) {
   1dc3a:	b118      	cbz	r0, 1dc44 <download_client_callback+0x140>
				LOG_ERR("Unable to free DFU target resources");
   1dc3c:	4628      	mov	r0, r5
   1dc3e:	494e      	ldr	r1, [pc, #312]	; (1dd78 <download_client_callback+0x274>)
   1dc40:	f008 fc75 	bl	2652e <log_string_sync>
			first_fragment = true;
   1dc44:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   1dc46:	4840      	ldr	r0, [pc, #256]	; (1dd48 <download_client_callback+0x244>)
			first_fragment = true;
   1dc48:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   1dc4a:	f7ff fb37 	bl	1d2bc <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   1dc4e:	2002      	movs	r0, #2
   1dc50:	f7ff fef8 	bl	1da44 <send_error_evt>
			return err;
   1dc54:	e7a3      	b.n	1db9e <download_client_callback+0x9a>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   1dc56:	7833      	ldrb	r3, [r6, #0]
   1dc58:	2b00      	cmp	r3, #0
   1dc5a:	d1a0      	bne.n	1db9e <download_client_callback+0x9a>
			err = dfu_target_offset_get(&offset);
   1dc5c:	a801      	add	r0, sp, #4
   1dc5e:	f000 f95f 	bl	1df20 <dfu_target_offset_get>
			if (err != 0) {
   1dc62:	4604      	mov	r4, r0
   1dc64:	2800      	cmp	r0, #0
   1dc66:	f47f af67 	bne.w	1db38 <download_client_callback+0x34>
			if (file_size == 0) {
   1dc6a:	4b36      	ldr	r3, [pc, #216]	; (1dd44 <download_client_callback+0x240>)
   1dc6c:	681a      	ldr	r2, [r3, #0]
   1dc6e:	2a00      	cmp	r2, #0
   1dc70:	f43f af62 	beq.w	1db38 <download_client_callback+0x34>
			send_progress((offset * 100) / file_size);
   1dc74:	2364      	movs	r3, #100	; 0x64
   1dc76:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   1dc78:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   1dc7c:	434b      	muls	r3, r1
   1dc7e:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   1dc82:	9303      	str	r3, [sp, #12]
	callback(&evt);
   1dc84:	4b3d      	ldr	r3, [pc, #244]	; (1dd7c <download_client_callback+0x278>)
   1dc86:	a802      	add	r0, sp, #8
   1dc88:	681b      	ldr	r3, [r3, #0]
   1dc8a:	4798      	blx	r3
}
   1dc8c:	e787      	b.n	1db9e <download_client_callback+0x9a>
		err = dfu_target_done(true);
   1dc8e:	2001      	movs	r0, #1
   1dc90:	f000 f95c 	bl	1df4c <dfu_target_done>
		if (err != 0) {
   1dc94:	4604      	mov	r4, r0
   1dc96:	b158      	cbz	r0, 1dcb0 <download_client_callback+0x1ac>
   1dc98:	4b2e      	ldr	r3, [pc, #184]	; (1dd54 <download_client_callback+0x250>)
   1dc9a:	482f      	ldr	r0, [pc, #188]	; (1dd58 <download_client_callback+0x254>)
			LOG_ERR("dfu_target_done error: %d", err);
   1dc9c:	4622      	mov	r2, r4
   1dc9e:	1ac0      	subs	r0, r0, r3
   1dca0:	08c0      	lsrs	r0, r0, #3
   1dca2:	0180      	lsls	r0, r0, #6
   1dca4:	4936      	ldr	r1, [pc, #216]	; (1dd80 <download_client_callback+0x27c>)
   1dca6:	f040 0001 	orr.w	r0, r0, #1
   1dcaa:	f008 fc40 	bl	2652e <log_string_sync>
   1dcae:	e743      	b.n	1db38 <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   1dcb0:	4825      	ldr	r0, [pc, #148]	; (1dd48 <download_client_callback+0x244>)
   1dcb2:	f7ff fb03 	bl	1d2bc <download_client_disconnect>
		if (err != 0) {
   1dcb6:	4604      	mov	r4, r0
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   1dcb8:	2001      	movs	r0, #1
		if (err != 0) {
   1dcba:	2c00      	cmp	r4, #0
   1dcbc:	d1c8      	bne.n	1dc50 <download_client_callback+0x14c>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   1dcbe:	f7ff feb1 	bl	1da24 <send_evt>
		first_fragment = true;
   1dcc2:	2201      	movs	r2, #1
   1dcc4:	4b1e      	ldr	r3, [pc, #120]	; (1dd40 <download_client_callback+0x23c>)
   1dcc6:	701a      	strb	r2, [r3, #0]
		downloading = false;
   1dcc8:	4b2e      	ldr	r3, [pc, #184]	; (1dd84 <download_client_callback+0x280>)
   1dcca:	701c      	strb	r4, [r3, #0]
		break;
   1dccc:	e767      	b.n	1db9e <download_client_callback+0x9a>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   1dcce:	4e2e      	ldr	r6, [pc, #184]	; (1dd88 <download_client_callback+0x284>)
   1dcd0:	4c21      	ldr	r4, [pc, #132]	; (1dd58 <download_client_callback+0x254>)
   1dcd2:	6832      	ldr	r2, [r6, #0]
   1dcd4:	4f1f      	ldr	r7, [pc, #124]	; (1dd54 <download_client_callback+0x250>)
   1dcd6:	b192      	cbz	r2, 1dcfe <download_client_callback+0x1fa>
   1dcd8:	6843      	ldr	r3, [r0, #4]
   1dcda:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1dcde:	d001      	beq.n	1dce4 <download_client_callback+0x1e0>
   1dce0:	3368      	adds	r3, #104	; 0x68
   1dce2:	d10c      	bne.n	1dcfe <download_client_callback+0x1fa>
   1dce4:	1be0      	subs	r0, r4, r7
   1dce6:	08c0      	lsrs	r0, r0, #3
			LOG_WRN("Download socket error. %d retries left...",
   1dce8:	0180      	lsls	r0, r0, #6
   1dcea:	4928      	ldr	r1, [pc, #160]	; (1dd8c <download_client_callback+0x288>)
   1dcec:	f040 0002 	orr.w	r0, r0, #2
   1dcf0:	f008 fc1d 	bl	2652e <log_string_sync>
			socket_retries_left--;
   1dcf4:	6833      	ldr	r3, [r6, #0]
   1dcf6:	3b01      	subs	r3, #1
   1dcf8:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   1dcfa:	2400      	movs	r4, #0
   1dcfc:	e74f      	b.n	1db9e <download_client_callback+0x9a>
   1dcfe:	1be4      	subs	r4, r4, r7
   1dd00:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   1dd02:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   1dd04:	4810      	ldr	r0, [pc, #64]	; (1dd48 <download_client_callback+0x244>)
			LOG_ERR("Download client error");
   1dd06:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   1dd0a:	f7ff fad7 	bl	1d2bc <download_client_disconnect>
			LOG_ERR("Download client error");
   1dd0e:	4620      	mov	r0, r4
   1dd10:	491f      	ldr	r1, [pc, #124]	; (1dd90 <download_client_callback+0x28c>)
   1dd12:	f008 fc0c 	bl	2652e <log_string_sync>
			err = dfu_target_done(false);
   1dd16:	2000      	movs	r0, #0
   1dd18:	f000 f918 	bl	1df4c <dfu_target_done>
			if (err == -EACCES) {
   1dd1c:	f110 0f0d 	cmn.w	r0, #13
   1dd20:	d004      	beq.n	1dd2c <download_client_callback+0x228>
			} else if (err != 0) {
   1dd22:	b118      	cbz	r0, 1dd2c <download_client_callback+0x228>
				LOG_ERR("Unable to deinitialze resources "
   1dd24:	4620      	mov	r0, r4
   1dd26:	491b      	ldr	r1, [pc, #108]	; (1dd94 <download_client_callback+0x290>)
   1dd28:	f008 fc01 	bl	2652e <log_string_sync>
			first_fragment = true;
   1dd2c:	2001      	movs	r0, #1
   1dd2e:	4b04      	ldr	r3, [pc, #16]	; (1dd40 <download_client_callback+0x23c>)
   1dd30:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   1dd32:	f7ff fe87 	bl	1da44 <send_error_evt>
			return event->error;
   1dd36:	686c      	ldr	r4, [r5, #4]
   1dd38:	e731      	b.n	1db9e <download_client_callback+0x9a>
		return -EINVAL;
   1dd3a:	f06f 0415 	mvn.w	r4, #21
   1dd3e:	e72e      	b.n	1db9e <download_client_callback+0x9a>
   1dd40:	2000f25c 	.word	0x2000f25c
   1dd44:	2000ecf0 	.word	0x2000ecf0
   1dd48:	2000cd78 	.word	0x2000cd78
   1dd4c:	2000f25d 	.word	0x2000f25d
   1dd50:	2000f25e 	.word	0x2000f25e
   1dd54:	0002c344 	.word	0x0002c344
   1dd58:	0002c38c 	.word	0x0002c38c
   1dd5c:	0002fc37 	.word	0x0002fc37
   1dd60:	0002fc83 	.word	0x0002fc83
   1dd64:	00029323 	.word	0x00029323
   1dd68:	0002fc6a 	.word	0x0002fc6a
   1dd6c:	2000da88 	.word	0x2000da88
   1dd70:	0002fca7 	.word	0x0002fca7
   1dd74:	0002fccc 	.word	0x0002fccc
   1dd78:	0002fce6 	.word	0x0002fce6
   1dd7c:	2000ecec 	.word	0x2000ecec
   1dd80:	0002fd0a 	.word	0x0002fd0a
   1dd84:	2000f19b 	.word	0x2000f19b
   1dd88:	2000ecf4 	.word	0x2000ecf4
   1dd8c:	0002fd24 	.word	0x0002fd24
   1dd90:	0002fd4e 	.word	0x0002fd4e
   1dd94:	0002fd64 	.word	0x0002fd64

0001dd98 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   1dd98:	b570      	push	{r4, r5, r6, lr}
   1dd9a:	460d      	mov	r5, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   1dd9c:	2100      	movs	r1, #0
{
   1dd9e:	b08a      	sub	sp, #40	; 0x28
	struct download_client_cfg config = {
   1dda0:	9101      	str	r1, [sp, #4]
   1dda2:	f88d 3004 	strb.w	r3, [sp, #4]
   1dda6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   1dda8:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   1ddaa:	9103      	str	r1, [sp, #12]
   1ddac:	9200      	str	r2, [sp, #0]
   1ddae:	9302      	str	r3, [sp, #8]
	if (host == NULL || file == NULL || callback == NULL) {
   1ddb0:	2800      	cmp	r0, #0
   1ddb2:	d041      	beq.n	1de38 <fota_download_start_with_image_type+0xa0>
   1ddb4:	2d00      	cmp	r5, #0
   1ddb6:	d03f      	beq.n	1de38 <fota_download_start_with_image_type+0xa0>
   1ddb8:	4b22      	ldr	r3, [pc, #136]	; (1de44 <fota_download_start_with_image_type+0xac>)
   1ddba:	681b      	ldr	r3, [r3, #0]
   1ddbc:	2b00      	cmp	r3, #0
   1ddbe:	d03b      	beq.n	1de38 <fota_download_start_with_image_type+0xa0>
		return -EINVAL;
	}

	if (downloading) {
   1ddc0:	4e21      	ldr	r6, [pc, #132]	; (1de48 <fota_download_start_with_image_type+0xb0>)
   1ddc2:	7831      	ldrb	r1, [r6, #0]
   1ddc4:	2900      	cmp	r1, #0
   1ddc6:	d13a      	bne.n	1de3e <fota_download_start_with_image_type+0xa6>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   1ddc8:	3201      	adds	r2, #1
   1ddca:	d012      	beq.n	1ddf2 <fota_download_start_with_image_type+0x5a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   1ddcc:	4601      	mov	r1, r0
   1ddce:	f10d 0212 	add.w	r2, sp, #18
   1ddd2:	2001      	movs	r0, #1
   1ddd4:	f009 f860 	bl	26e98 <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   1ddd8:	2801      	cmp	r0, #1
   1ddda:	d00a      	beq.n	1ddf2 <fota_download_start_with_image_type+0x5a>
   1dddc:	2002      	movs	r0, #2
   1ddde:	4621      	mov	r1, r4
   1dde0:	f10d 0212 	add.w	r2, sp, #18
   1dde4:	f009 f858 	bl	26e98 <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   1dde8:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   1ddea:	bf1c      	itt	ne
   1ddec:	2301      	movne	r3, #1
   1ddee:	f88d 300c 	strbne.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   1ddf2:	2202      	movs	r2, #2
   1ddf4:	4b15      	ldr	r3, [pc, #84]	; (1de4c <fota_download_start_with_image_type+0xb4>)

	strncpy(file_buf, file, sizeof(file_buf));
   1ddf6:	4629      	mov	r1, r5
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   1ddf8:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf));
   1ddfa:	4815      	ldr	r0, [pc, #84]	; (1de50 <fota_download_start_with_image_type+0xb8>)
   1ddfc:	22c0      	movs	r2, #192	; 0xc0
   1ddfe:	f00d f984 	bl	2b10a <strncpy>
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   1de02:	4621      	mov	r1, r4
   1de04:	466a      	mov	r2, sp
   1de06:	4813      	ldr	r0, [pc, #76]	; (1de54 <fota_download_start_with_image_type+0xbc>)
   1de08:	f7ff f808 	bl	1ce1c <download_client_connect>
	if (err != 0) {
   1de0c:	4604      	mov	r4, r0
   1de0e:	b968      	cbnz	r0, 1de2c <fota_download_start_with_image_type+0x94>
		return err;
	}

	img_type_expected = expected_type;
   1de10:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   1de14:	4b10      	ldr	r3, [pc, #64]	; (1de58 <fota_download_start_with_image_type+0xc0>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   1de16:	490e      	ldr	r1, [pc, #56]	; (1de50 <fota_download_start_with_image_type+0xb8>)
	img_type_expected = expected_type;
   1de18:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   1de1a:	4602      	mov	r2, r0
   1de1c:	480d      	ldr	r0, [pc, #52]	; (1de54 <fota_download_start_with_image_type+0xbc>)
   1de1e:	f7ff fb9d 	bl	1d55c <download_client_start>
	if (err != 0) {
   1de22:	4604      	mov	r4, r0
   1de24:	b128      	cbz	r0, 1de32 <fota_download_start_with_image_type+0x9a>
		download_client_disconnect(&dlc);
   1de26:	480b      	ldr	r0, [pc, #44]	; (1de54 <fota_download_start_with_image_type+0xbc>)
   1de28:	f7ff fa48 	bl	1d2bc <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   1de2c:	4620      	mov	r0, r4
   1de2e:	b00a      	add	sp, #40	; 0x28
   1de30:	bd70      	pop	{r4, r5, r6, pc}
	downloading = true;
   1de32:	2301      	movs	r3, #1
   1de34:	7033      	strb	r3, [r6, #0]
	return 0;
   1de36:	e7f9      	b.n	1de2c <fota_download_start_with_image_type+0x94>
		return -EINVAL;
   1de38:	f06f 0415 	mvn.w	r4, #21
   1de3c:	e7f6      	b.n	1de2c <fota_download_start_with_image_type+0x94>
		return -EALREADY;
   1de3e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1de42:	e7f3      	b.n	1de2c <fota_download_start_with_image_type+0x94>
   1de44:	2000ecec 	.word	0x2000ecec
   1de48:	2000f19b 	.word	0x2000f19b
   1de4c:	2000ecf4 	.word	0x2000ecf4
   1de50:	2000f19c 	.word	0x2000f19c
   1de54:	2000cd78 	.word	0x2000cd78
   1de58:	2000f25e 	.word	0x2000f25e

0001de5c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   1de5c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   1de5e:	b170      	cbz	r0, 1de7e <fota_download_init+0x22>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   1de60:	4b08      	ldr	r3, [pc, #32]	; (1de84 <fota_download_init+0x28>)
			__func__, err);
		return err;
	}
#endif

	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   1de62:	4909      	ldr	r1, [pc, #36]	; (1de88 <fota_download_init+0x2c>)
	callback = client_callback;
   1de64:	6018      	str	r0, [r3, #0]
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   1de66:	4809      	ldr	r0, [pc, #36]	; (1de8c <fota_download_init+0x30>)
   1de68:	f00c fccc 	bl	2a804 <k_work_init_delayable>

	err = download_client_init(&dlc, download_client_callback);
   1de6c:	4908      	ldr	r1, [pc, #32]	; (1de90 <fota_download_init+0x34>)
   1de6e:	4809      	ldr	r0, [pc, #36]	; (1de94 <fota_download_init+0x38>)
   1de70:	f7fe ffa6 	bl	1cdc0 <download_client_init>
	if (err != 0) {
   1de74:	b910      	cbnz	r0, 1de7c <fota_download_init+0x20>
		return err;
	}

	first_fragment = true;
   1de76:	2201      	movs	r2, #1
   1de78:	4b07      	ldr	r3, [pc, #28]	; (1de98 <fota_download_init+0x3c>)
   1de7a:	701a      	strb	r2, [r3, #0]
	return 0;
}
   1de7c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1de7e:	f06f 0015 	mvn.w	r0, #21
   1de82:	e7fb      	b.n	1de7c <fota_download_init+0x20>
   1de84:	2000ecec 	.word	0x2000ecec
   1de88:	0001da71 	.word	0x0001da71
   1de8c:	2000da88 	.word	0x2000da88
   1de90:	0001db05 	.word	0x0001db05
   1de94:	2000cd78 	.word	0x2000cd78
   1de98:	2000f25c 	.word	0x2000f25c

0001de9c <dfu_target_img_type>:

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   1de9c:	291f      	cmp	r1, #31
{
   1de9e:	b508      	push	{r3, lr}
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   1dea0:	d90f      	bls.n	1dec2 <dfu_target_img_type+0x26>
	if (dfu_target_mcuboot_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   1dea2:	f000 f8eb 	bl	1e07c <dfu_target_modem_delta_identify>
   1dea6:	b978      	cbnz	r0, 1dec8 <dfu_target_img_type+0x2c>
   1dea8:	4b08      	ldr	r3, [pc, #32]	; (1decc <dfu_target_img_type+0x30>)
   1deaa:	4809      	ldr	r0, [pc, #36]	; (1ded0 <dfu_target_img_type+0x34>)
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   1deac:	4909      	ldr	r1, [pc, #36]	; (1ded4 <dfu_target_img_type+0x38>)
   1deae:	1ac0      	subs	r0, r0, r3
   1deb0:	08c0      	lsrs	r0, r0, #3
   1deb2:	0180      	lsls	r0, r0, #6
   1deb4:	f040 0001 	orr.w	r0, r0, #1
   1deb8:	f008 fb39 	bl	2652e <log_string_sync>
	return -ENOTSUP;
   1debc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1dec0:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   1dec2:	f06f 000a 	mvn.w	r0, #10
   1dec6:	e7fb      	b.n	1dec0 <dfu_target_img_type+0x24>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   1dec8:	2002      	movs	r0, #2
   1deca:	e7f9      	b.n	1dec0 <dfu_target_img_type+0x24>
   1decc:	0002c344 	.word	0x0002c344
   1ded0:	0002c364 	.word	0x0002c364
   1ded4:	0002fdbb 	.word	0x0002fdbb

0001ded8 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   1ded8:	b508      	push	{r3, lr}
   1deda:	4603      	mov	r3, r0
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   1dedc:	2b02      	cmp	r3, #2
{
   1dede:	4608      	mov	r0, r1
   1dee0:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   1dee2:	d106      	bne.n	1def2 <dfu_target_init+0x1a>
	if (new_target == current_target
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		return 0;
	}

	current_target = new_target;
   1dee4:	4b09      	ldr	r3, [pc, #36]	; (1df0c <dfu_target_init+0x34>)
   1dee6:	4a0a      	ldr	r2, [pc, #40]	; (1df10 <dfu_target_init+0x38>)
   1dee8:	601a      	str	r2, [r3, #0]

	return current_target->init(file_size, cb);
}
   1deea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return current_target->init(file_size, cb);
   1deee:	f000 b8cd 	b.w	1e08c <dfu_target_modem_delta_init>
   1def2:	4b08      	ldr	r3, [pc, #32]	; (1df14 <dfu_target_init+0x3c>)
   1def4:	4808      	ldr	r0, [pc, #32]	; (1df18 <dfu_target_init+0x40>)
		LOG_ERR("Unknown image type");
   1def6:	4909      	ldr	r1, [pc, #36]	; (1df1c <dfu_target_init+0x44>)
   1def8:	1ac0      	subs	r0, r0, r3
   1defa:	08c0      	lsrs	r0, r0, #3
   1defc:	0180      	lsls	r0, r0, #6
   1defe:	f040 0001 	orr.w	r0, r0, #1
   1df02:	f008 fb14 	bl	2652e <log_string_sync>
}
   1df06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1df0a:	bd08      	pop	{r3, pc}
   1df0c:	2000ecf8 	.word	0x2000ecf8
   1df10:	0002caa4 	.word	0x0002caa4
   1df14:	0002c344 	.word	0x0002c344
   1df18:	0002c364 	.word	0x0002c364
   1df1c:	0002fdd9 	.word	0x0002fdd9

0001df20 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   1df20:	4b03      	ldr	r3, [pc, #12]	; (1df30 <dfu_target_offset_get+0x10>)
   1df22:	681b      	ldr	r3, [r3, #0]
   1df24:	b10b      	cbz	r3, 1df2a <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   1df26:	685b      	ldr	r3, [r3, #4]
   1df28:	4718      	bx	r3
}
   1df2a:	f06f 000c 	mvn.w	r0, #12
   1df2e:	4770      	bx	lr
   1df30:	2000ecf8 	.word	0x2000ecf8

0001df34 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   1df34:	4a04      	ldr	r2, [pc, #16]	; (1df48 <dfu_target_write+0x14>)
   1df36:	6812      	ldr	r2, [r2, #0]
   1df38:	b112      	cbz	r2, 1df40 <dfu_target_write+0xc>
   1df3a:	b108      	cbz	r0, 1df40 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   1df3c:	6893      	ldr	r3, [r2, #8]
   1df3e:	4718      	bx	r3
}
   1df40:	f06f 000c 	mvn.w	r0, #12
   1df44:	4770      	bx	lr
   1df46:	bf00      	nop
   1df48:	2000ecf8 	.word	0x2000ecf8

0001df4c <dfu_target_done>:

int dfu_target_done(bool successful)
{
   1df4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   1df4e:	4e0d      	ldr	r6, [pc, #52]	; (1df84 <dfu_target_done+0x38>)
{
   1df50:	4605      	mov	r5, r0
	if (current_target == NULL) {
   1df52:	6833      	ldr	r3, [r6, #0]
   1df54:	b19b      	cbz	r3, 1df7e <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   1df56:	68db      	ldr	r3, [r3, #12]
   1df58:	4798      	blx	r3
	if (err != 0) {
   1df5a:	4604      	mov	r4, r0
   1df5c:	b158      	cbz	r0, 1df76 <dfu_target_done+0x2a>
   1df5e:	480a      	ldr	r0, [pc, #40]	; (1df88 <dfu_target_done+0x3c>)
   1df60:	4b0a      	ldr	r3, [pc, #40]	; (1df8c <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   1df62:	490b      	ldr	r1, [pc, #44]	; (1df90 <dfu_target_done+0x44>)
   1df64:	1a1b      	subs	r3, r3, r0
   1df66:	08db      	lsrs	r3, r3, #3
   1df68:	019b      	lsls	r3, r3, #6
   1df6a:	f043 0001 	orr.w	r0, r3, #1
   1df6e:	f008 fade 	bl	2652e <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   1df72:	4620      	mov	r0, r4
   1df74:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   1df76:	2d00      	cmp	r5, #0
   1df78:	d0fb      	beq.n	1df72 <dfu_target_done+0x26>
		current_target = NULL;
   1df7a:	6030      	str	r0, [r6, #0]
   1df7c:	e7f9      	b.n	1df72 <dfu_target_done+0x26>
		return -EACCES;
   1df7e:	f06f 040c 	mvn.w	r4, #12
   1df82:	e7f6      	b.n	1df72 <dfu_target_done+0x26>
   1df84:	2000ecf8 	.word	0x2000ecf8
   1df88:	0002c344 	.word	0x0002c344
   1df8c:	0002c364 	.word	0x0002c364
   1df90:	0002fdec 	.word	0x0002fdec

0001df94 <dfu_target_reset>:

int dfu_target_reset(void)
{
   1df94:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   1df96:	4d0b      	ldr	r5, [pc, #44]	; (1dfc4 <dfu_target_reset+0x30>)
   1df98:	682a      	ldr	r2, [r5, #0]
   1df9a:	b182      	cbz	r2, 1dfbe <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   1df9c:	2000      	movs	r0, #0
   1df9e:	68d3      	ldr	r3, [r2, #12]
   1dfa0:	4798      	blx	r3

		if (err != 0) {
   1dfa2:	4604      	mov	r4, r0
   1dfa4:	b158      	cbz	r0, 1dfbe <dfu_target_reset+0x2a>
   1dfa6:	4808      	ldr	r0, [pc, #32]	; (1dfc8 <dfu_target_reset+0x34>)
   1dfa8:	4b08      	ldr	r3, [pc, #32]	; (1dfcc <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   1dfaa:	4909      	ldr	r1, [pc, #36]	; (1dfd0 <dfu_target_reset+0x3c>)
   1dfac:	1ac0      	subs	r0, r0, r3
   1dfae:	08c0      	lsrs	r0, r0, #3
   1dfb0:	0180      	lsls	r0, r0, #6
   1dfb2:	f040 0001 	orr.w	r0, r0, #1
   1dfb6:	f008 faba 	bl	2652e <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   1dfba:	4620      	mov	r0, r4
   1dfbc:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   1dfbe:	2400      	movs	r4, #0
   1dfc0:	602c      	str	r4, [r5, #0]
	return 0;
   1dfc2:	e7fa      	b.n	1dfba <dfu_target_reset+0x26>
   1dfc4:	2000ecf8 	.word	0x2000ecf8
   1dfc8:	0002c364 	.word	0x0002c364
   1dfcc:	0002c344 	.word	0x0002c344
   1dfd0:	0002fdec 	.word	0x0002fdec

0001dfd4 <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   1dfd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1dfd8:	4b21      	ldr	r3, [pc, #132]	; (1e060 <delete_banked_modem_delta_fw+0x8c>)
   1dfda:	4c22      	ldr	r4, [pc, #136]	; (1e064 <delete_banked_modem_delta_fw+0x90>)
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   1dfdc:	4922      	ldr	r1, [pc, #136]	; (1e068 <delete_banked_modem_delta_fw+0x94>)
   1dfde:	1ae4      	subs	r4, r4, r3
   1dfe0:	08e4      	lsrs	r4, r4, #3
   1dfe2:	01a4      	lsls	r4, r4, #6
   1dfe4:	f044 0003 	orr.w	r0, r4, #3
   1dfe8:	f008 faa1 	bl	2652e <log_string_sync>
	err = nrf_modem_delta_dfu_erase();
   1dfec:	f004 f98c 	bl	22308 <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   1dff0:	4602      	mov	r2, r0
   1dff2:	b150      	cbz	r0, 1e00a <delete_banked_modem_delta_fw+0x36>
		LOG_ERR("Failed to delete backup, error %d", err);
   1dff4:	491d      	ldr	r1, [pc, #116]	; (1e06c <delete_banked_modem_delta_fw+0x98>)
   1dff6:	f044 0001 	orr.w	r0, r4, #1
   1dffa:	f008 fa98 	bl	2652e <log_string_sync>
		return -EFAULT;
   1dffe:	f06f 050d 	mvn.w	r5, #13
			break;
		}
	}

	return 0;
}
   1e002:	4628      	mov	r0, r5
   1e004:	b002      	add	sp, #8
   1e006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   1e00a:	263c      	movs	r6, #60	; 0x3c
				callback(DFU_TARGET_EVT_TIMEOUT);
   1e00c:	4f18      	ldr	r7, [pc, #96]	; (1e070 <delete_banked_modem_delta_fw+0x9c>)
				LOG_ERR("Error during erase, error %d", err);
   1e00e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1e078 <delete_banked_modem_delta_fw+0xa4>
		err = nrf_modem_delta_dfu_offset(&offset);
   1e012:	a801      	add	r0, sp, #4
   1e014:	f004 f866 	bl	220e4 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   1e018:	4605      	mov	r5, r0
   1e01a:	b1b0      	cbz	r0, 1e04a <delete_banked_modem_delta_fw+0x76>
			if (timeout < 0) {
   1e01c:	2e00      	cmp	r6, #0
   1e01e:	da03      	bge.n	1e028 <delete_banked_modem_delta_fw+0x54>
				callback(DFU_TARGET_EVT_TIMEOUT);
   1e020:	2000      	movs	r0, #0
   1e022:	683b      	ldr	r3, [r7, #0]
   1e024:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   1e026:	263c      	movs	r6, #60	; 0x3c
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   1e028:	2d11      	cmp	r5, #17
   1e02a:	d007      	beq.n	1e03c <delete_banked_modem_delta_fw+0x68>
   1e02c:	2d05      	cmp	r5, #5
   1e02e:	d005      	beq.n	1e03c <delete_banked_modem_delta_fw+0x68>
				LOG_ERR("Error during erase, error %d", err);
   1e030:	462a      	mov	r2, r5
   1e032:	4641      	mov	r1, r8
   1e034:	f044 0001 	orr.w	r0, r4, #1
   1e038:	f008 fa79 	bl	2652e <log_string_sync>
	return z_impl_k_sleep(timeout);
   1e03c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1e040:	2100      	movs	r1, #0
   1e042:	f005 fee9 	bl	23e18 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   1e046:	3e01      	subs	r6, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   1e048:	e7e3      	b.n	1e012 <delete_banked_modem_delta_fw+0x3e>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   1e04a:	4b09      	ldr	r3, [pc, #36]	; (1e070 <delete_banked_modem_delta_fw+0x9c>)
   1e04c:	2001      	movs	r0, #1
   1e04e:	681b      	ldr	r3, [r3, #0]
   1e050:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   1e052:	4908      	ldr	r1, [pc, #32]	; (1e074 <delete_banked_modem_delta_fw+0xa0>)
   1e054:	f044 0003 	orr.w	r0, r4, #3
   1e058:	f008 fa69 	bl	2652e <log_string_sync>
	return 0;
   1e05c:	e7d1      	b.n	1e002 <delete_banked_modem_delta_fw+0x2e>
   1e05e:	bf00      	nop
   1e060:	0002c344 	.word	0x0002c344
   1e064:	0002c36c 	.word	0x0002c36c
   1e068:	0002fe0a 	.word	0x0002fe0a
   1e06c:	0002fe41 	.word	0x0002fe41
   1e070:	2000ecfc 	.word	0x2000ecfc
   1e074:	0002fe80 	.word	0x0002fe80
   1e078:	0002fe63 	.word	0x0002fe63

0001e07c <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   1e07c:	6840      	ldr	r0, [r0, #4]
}
   1e07e:	4b02      	ldr	r3, [pc, #8]	; (1e088 <dfu_target_modem_delta_identify+0xc>)
   1e080:	1ac3      	subs	r3, r0, r3
   1e082:	4258      	negs	r0, r3
   1e084:	4158      	adcs	r0, r3
   1e086:	4770      	bx	lr
   1e088:	7544656d 	.word	0x7544656d

0001e08c <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, dfu_target_callback_t cb)
{
   1e08c:	b570      	push	{r4, r5, r6, lr}
   1e08e:	b098      	sub	sp, #96	; 0x60
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   1e090:	4b24      	ldr	r3, [pc, #144]	; (1e124 <dfu_target_modem_delta_init+0x98>)

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   1e092:	ae05      	add	r6, sp, #20
{
   1e094:	4605      	mov	r5, r0
	err = nrf_modem_delta_dfu_uuid(&version);
   1e096:	4630      	mov	r0, r6
	callback = cb;
   1e098:	6019      	str	r1, [r3, #0]
	err = nrf_modem_delta_dfu_uuid(&version);
   1e09a:	f004 f86f 	bl	2217c <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   1e09e:	4c22      	ldr	r4, [pc, #136]	; (1e128 <dfu_target_modem_delta_init+0x9c>)
   1e0a0:	4b22      	ldr	r3, [pc, #136]	; (1e12c <dfu_target_modem_delta_init+0xa0>)
   1e0a2:	4602      	mov	r2, r0
   1e0a4:	1ae4      	subs	r4, r4, r3
   1e0a6:	08e4      	lsrs	r4, r4, #3
   1e0a8:	01a4      	lsls	r4, r4, #6
   1e0aa:	b140      	cbz	r0, 1e0be <dfu_target_modem_delta_init+0x32>
		LOG_ERR("Firmware version request failed, error %d", err);
   1e0ac:	4920      	ldr	r1, [pc, #128]	; (1e130 <dfu_target_modem_delta_init+0xa4>)
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
	if (err != 0) {
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   1e0ae:	f044 0001 	orr.w	r0, r4, #1
   1e0b2:	f008 fa3c 	bl	2652e <log_string_sync>
		return -EFAULT;
   1e0b6:	f06f 000d 	mvn.w	r0, #13
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   1e0ba:	b018      	add	sp, #96	; 0x60
   1e0bc:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   1e0be:	2324      	movs	r3, #36	; 0x24
   1e0c0:	2125      	movs	r1, #37	; 0x25
   1e0c2:	4a1c      	ldr	r2, [pc, #112]	; (1e134 <dfu_target_modem_delta_init+0xa8>)
   1e0c4:	9600      	str	r6, [sp, #0]
   1e0c6:	a80e      	add	r0, sp, #56	; 0x38
   1e0c8:	f006 fdb4 	bl	24c34 <sniprintf>
   1e0cc:	a80e      	add	r0, sp, #56	; 0x38
   1e0ce:	f008 fa41 	bl	26554 <z_log_strdup>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   1e0d2:	f044 0603 	orr.w	r6, r4, #3
   1e0d6:	4602      	mov	r2, r0
   1e0d8:	4917      	ldr	r1, [pc, #92]	; (1e138 <dfu_target_modem_delta_init+0xac>)
   1e0da:	4630      	mov	r0, r6
   1e0dc:	f008 fa27 	bl	2652e <log_string_sync>
	err = nrf_modem_delta_dfu_area(&scratch_space);
   1e0e0:	a804      	add	r0, sp, #16
   1e0e2:	f004 f825 	bl	22130 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   1e0e6:	4602      	mov	r2, r0
   1e0e8:	b108      	cbz	r0, 1e0ee <dfu_target_modem_delta_init+0x62>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   1e0ea:	4914      	ldr	r1, [pc, #80]	; (1e13c <dfu_target_modem_delta_init+0xb0>)
   1e0ec:	e7df      	b.n	1e0ae <dfu_target_modem_delta_init+0x22>
	if (file_size > scratch_space) {
   1e0ee:	9b04      	ldr	r3, [sp, #16]
   1e0f0:	42ab      	cmp	r3, r5
   1e0f2:	d208      	bcs.n	1e106 <dfu_target_modem_delta_init+0x7a>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   1e0f4:	f044 0001 	orr.w	r0, r4, #1
   1e0f8:	462a      	mov	r2, r5
   1e0fa:	4911      	ldr	r1, [pc, #68]	; (1e140 <dfu_target_modem_delta_init+0xb4>)
   1e0fc:	f008 fa17 	bl	2652e <log_string_sync>
		return -EFBIG;
   1e100:	f06f 001a 	mvn.w	r0, #26
   1e104:	e7d9      	b.n	1e0ba <dfu_target_modem_delta_init+0x2e>
	err = nrf_modem_delta_dfu_offset(&offset);
   1e106:	a803      	add	r0, sp, #12
   1e108:	f003 ffec 	bl	220e4 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   1e10c:	b110      	cbz	r0, 1e114 <dfu_target_modem_delta_init+0x88>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   1e10e:	4602      	mov	r2, r0
   1e110:	490c      	ldr	r1, [pc, #48]	; (1e144 <dfu_target_modem_delta_init+0xb8>)
   1e112:	e7cc      	b.n	1e0ae <dfu_target_modem_delta_init+0x22>
	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   1e114:	9b03      	ldr	r3, [sp, #12]
   1e116:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   1e11a:	d1ce      	bne.n	1e0ba <dfu_target_modem_delta_init+0x2e>
		err = delete_banked_modem_delta_fw();
   1e11c:	f7ff ff5a 	bl	1dfd4 <delete_banked_modem_delta_fw>
		return err;
   1e120:	e7cb      	b.n	1e0ba <dfu_target_modem_delta_init+0x2e>
   1e122:	bf00      	nop
   1e124:	2000ecfc 	.word	0x2000ecfc
   1e128:	0002c36c 	.word	0x0002c36c
   1e12c:	0002c344 	.word	0x0002c344
   1e130:	0002fe99 	.word	0x0002fe99
   1e134:	0002cd66 	.word	0x0002cd66
   1e138:	0002fec3 	.word	0x0002fec3
   1e13c:	0002fede 	.word	0x0002fede
   1e140:	0002ff12 	.word	0x0002ff12
   1e144:	0002ff41 	.word	0x0002ff41

0001e148 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   1e148:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   1e14a:	f003 ffcb 	bl	220e4 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   1e14e:	b160      	cbz	r0, 1e16a <dfu_target_modem_delta_offset_get+0x22>
   1e150:	4a06      	ldr	r2, [pc, #24]	; (1e16c <dfu_target_modem_delta_offset_get+0x24>)
   1e152:	4b07      	ldr	r3, [pc, #28]	; (1e170 <dfu_target_modem_delta_offset_get+0x28>)
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   1e154:	4907      	ldr	r1, [pc, #28]	; (1e174 <dfu_target_modem_delta_offset_get+0x2c>)
   1e156:	1a9b      	subs	r3, r3, r2
   1e158:	08db      	lsrs	r3, r3, #3
   1e15a:	019b      	lsls	r3, r3, #6
   1e15c:	4602      	mov	r2, r0
   1e15e:	f043 0001 	orr.w	r0, r3, #1
   1e162:	f008 f9e4 	bl	2652e <log_string_sync>
		return -EFAULT;
   1e166:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   1e16a:	bd08      	pop	{r3, pc}
   1e16c:	0002c344 	.word	0x0002c344
   1e170:	0002c36c 	.word	0x0002c36c
   1e174:	0002ff41 	.word	0x0002ff41

0001e178 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   1e178:	b570      	push	{r4, r5, r6, lr}
   1e17a:	4605      	mov	r5, r0
   1e17c:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   1e17e:	f004 f829 	bl	221d4 <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   1e182:	4602      	mov	r2, r0
   1e184:	b178      	cbz	r0, 1e1a6 <dfu_target_modem_delta_write+0x2e>
   1e186:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1e18a:	d00c      	beq.n	1e1a6 <dfu_target_modem_delta_write+0x2e>
   1e18c:	481f      	ldr	r0, [pc, #124]	; (1e20c <dfu_target_modem_delta_write+0x94>)
   1e18e:	4b20      	ldr	r3, [pc, #128]	; (1e210 <dfu_target_modem_delta_write+0x98>)
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   1e190:	4920      	ldr	r1, [pc, #128]	; (1e214 <dfu_target_modem_delta_write+0x9c>)
   1e192:	1a1b      	subs	r3, r3, r0
   1e194:	08db      	lsrs	r3, r3, #3
   1e196:	019b      	lsls	r3, r3, #6
   1e198:	f043 0001 	orr.w	r0, r3, #1
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
	if (err < 0) {
		LOG_ERR("Write failed, modem library error %d", err);
   1e19c:	f008 f9c7 	bl	2652e <log_string_sync>
		return -EFAULT;
   1e1a0:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   1e1a4:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_modem_delta_dfu_write(buf, len);
   1e1a6:	4631      	mov	r1, r6
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	f004 f841 	bl	22230 <nrf_modem_delta_dfu_write>
	if (err < 0) {
   1e1ae:	1e04      	subs	r4, r0, #0
   1e1b0:	da09      	bge.n	1e1c6 <dfu_target_modem_delta_write+0x4e>
   1e1b2:	4817      	ldr	r0, [pc, #92]	; (1e210 <dfu_target_modem_delta_write+0x98>)
   1e1b4:	4b15      	ldr	r3, [pc, #84]	; (1e20c <dfu_target_modem_delta_write+0x94>)
		LOG_ERR("Write failed, modem library error %d", err);
   1e1b6:	4622      	mov	r2, r4
   1e1b8:	1ac0      	subs	r0, r0, r3
   1e1ba:	08c0      	lsrs	r0, r0, #3
   1e1bc:	0180      	lsls	r0, r0, #6
   1e1be:	4916      	ldr	r1, [pc, #88]	; (1e218 <dfu_target_modem_delta_write+0xa0>)
   1e1c0:	f040 0001 	orr.w	r0, r0, #1
   1e1c4:	e7ea      	b.n	1e19c <dfu_target_modem_delta_write+0x24>
	} else if (err > 0) {
   1e1c6:	d01c      	beq.n	1e202 <dfu_target_modem_delta_write+0x8a>
   1e1c8:	4810      	ldr	r0, [pc, #64]	; (1e20c <dfu_target_modem_delta_write+0x94>)
   1e1ca:	4b11      	ldr	r3, [pc, #68]	; (1e210 <dfu_target_modem_delta_write+0x98>)
		LOG_ERR("Write failed, modem error %d", err);
   1e1cc:	4622      	mov	r2, r4
   1e1ce:	1a1b      	subs	r3, r3, r0
   1e1d0:	08db      	lsrs	r3, r3, #3
   1e1d2:	019b      	lsls	r3, r3, #6
   1e1d4:	4911      	ldr	r1, [pc, #68]	; (1e21c <dfu_target_modem_delta_write+0xa4>)
   1e1d6:	f043 0001 	orr.w	r0, r3, #1
   1e1da:	f008 f9a8 	bl	2652e <log_string_sync>
		switch (err) {
   1e1de:	2c0b      	cmp	r4, #11
   1e1e0:	d008      	beq.n	1e1f4 <dfu_target_modem_delta_write+0x7c>
   1e1e2:	2c0e      	cmp	r4, #14
   1e1e4:	d006      	beq.n	1e1f4 <dfu_target_modem_delta_write+0x7c>
			return -EINVAL;
   1e1e6:	2c09      	cmp	r4, #9
   1e1e8:	bf14      	ite	ne
   1e1ea:	f06f 000d 	mvnne.w	r0, #13
   1e1ee:	f06f 0015 	mvneq.w	r0, #21
   1e1f2:	e7d7      	b.n	1e1a4 <dfu_target_modem_delta_write+0x2c>
			delete_banked_modem_delta_fw();
   1e1f4:	f7ff feee 	bl	1dfd4 <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   1e1f8:	4631      	mov	r1, r6
   1e1fa:	4628      	mov	r0, r5
   1e1fc:	f7ff ffbc 	bl	1e178 <dfu_target_modem_delta_write>
			if (err != 0) {
   1e200:	b908      	cbnz	r0, 1e206 <dfu_target_modem_delta_write+0x8e>
				return 0;
   1e202:	2000      	movs	r0, #0
   1e204:	e7ce      	b.n	1e1a4 <dfu_target_modem_delta_write+0x2c>
				return -EINVAL;
   1e206:	f06f 0015 	mvn.w	r0, #21
   1e20a:	e7cb      	b.n	1e1a4 <dfu_target_modem_delta_write+0x2c>
   1e20c:	0002c344 	.word	0x0002c344
   1e210:	0002c36c 	.word	0x0002c36c
   1e214:	0002ff75 	.word	0x0002ff75
   1e218:	0002ffb2 	.word	0x0002ffb2
   1e21c:	0002ffd7 	.word	0x0002ffd7

0001e220 <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   1e220:	b570      	push	{r4, r5, r6, lr}
   1e222:	4606      	mov	r6, r0
	int err;

	err = nrf_modem_delta_dfu_write_done();
   1e224:	f004 f832 	bl	2228c <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   1e228:	4d10      	ldr	r5, [pc, #64]	; (1e26c <dfu_target_modem_delta_done+0x4c>)
   1e22a:	4b11      	ldr	r3, [pc, #68]	; (1e270 <dfu_target_modem_delta_done+0x50>)
   1e22c:	4604      	mov	r4, r0
   1e22e:	1aed      	subs	r5, r5, r3
   1e230:	08ed      	lsrs	r5, r5, #3
   1e232:	01ad      	lsls	r5, r5, #6
   1e234:	b148      	cbz	r0, 1e24a <dfu_target_modem_delta_done+0x2a>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   1e236:	4602      	mov	r2, r0
   1e238:	490e      	ldr	r1, [pc, #56]	; (1e274 <dfu_target_modem_delta_done+0x54>)
	}

	if (successful) {
		err = nrf_modem_delta_dfu_update();
		if (err != 0) {
			LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   1e23a:	f045 0001 	orr.w	r0, r5, #1
   1e23e:	f008 f976 	bl	2652e <log_string_sync>
			return -EFAULT;
   1e242:	f06f 040d 	mvn.w	r4, #13
	} else {
		LOG_INF("Modem upgrade stopped.");
	}

	return 0;
}
   1e246:	4620      	mov	r0, r4
   1e248:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   1e24a:	b166      	cbz	r6, 1e266 <dfu_target_modem_delta_done+0x46>
		err = nrf_modem_delta_dfu_update();
   1e24c:	f004 f840 	bl	222d0 <nrf_modem_delta_dfu_update>
		if (err != 0) {
   1e250:	4604      	mov	r4, r0
   1e252:	b110      	cbz	r0, 1e25a <dfu_target_modem_delta_done+0x3a>
			LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   1e254:	4602      	mov	r2, r0
   1e256:	4908      	ldr	r1, [pc, #32]	; (1e278 <dfu_target_modem_delta_done+0x58>)
   1e258:	e7ef      	b.n	1e23a <dfu_target_modem_delta_done+0x1a>
		LOG_INF("Scheduling modem firmware upgrade at next boot");
   1e25a:	4908      	ldr	r1, [pc, #32]	; (1e27c <dfu_target_modem_delta_done+0x5c>)
		LOG_INF("Modem upgrade stopped.");
   1e25c:	f045 0003 	orr.w	r0, r5, #3
   1e260:	f008 f965 	bl	2652e <log_string_sync>
   1e264:	e7ef      	b.n	1e246 <dfu_target_modem_delta_done+0x26>
   1e266:	4906      	ldr	r1, [pc, #24]	; (1e280 <dfu_target_modem_delta_done+0x60>)
   1e268:	e7f8      	b.n	1e25c <dfu_target_modem_delta_done+0x3c>
   1e26a:	bf00      	nop
   1e26c:	0002c36c 	.word	0x0002c36c
   1e270:	0002c344 	.word	0x0002c344
   1e274:	0002fff4 	.word	0x0002fff4
   1e278:	00030027 	.word	0x00030027
   1e27c:	0003005a 	.word	0x0003005a
   1e280:	00030089 	.word	0x00030089

0001e284 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   1e284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e288:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1e28a:	4c21      	ldr	r4, [pc, #132]	; (1e310 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1e28c:	4e21      	ldr	r6, [pc, #132]	; (1e314 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e28e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1e292:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1e31c <check_ext_api_requests+0x98>
{
   1e296:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e298:	45a8      	cmp	r8, r5
   1e29a:	d803      	bhi.n	1e2a4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1e29c:	2000      	movs	r0, #0
   1e29e:	b005      	add	sp, #20
   1e2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1e2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e2a6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1e2aa:	681f      	ldr	r7, [r3, #0]
   1e2ac:	ab01      	add	r3, sp, #4
   1e2ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1e2b2:	220c      	movs	r2, #12
   1e2b4:	4619      	mov	r1, r3
   1e2b6:	4638      	mov	r0, r7
   1e2b8:	f00c fdb8 	bl	2ae2c <memcmp>
   1e2bc:	b990      	cbnz	r0, 1e2e4 <check_ext_api_requests+0x60>
   1e2be:	b18f      	cbz	r7, 1e2e4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1e2c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   1e2c2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1e2c4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1e2c6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1e2c8:	4291      	cmp	r1, r2
   1e2ca:	d10b      	bne.n	1e2e4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1e2cc:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1e2ce:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1e2d0:	4291      	cmp	r1, r2
   1e2d2:	d807      	bhi.n	1e2e4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   1e2d4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1e2d6:	4291      	cmp	r1, r2
   1e2d8:	d904      	bls.n	1e2e4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1e2da:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1e2dc:	695b      	ldr	r3, [r3, #20]
   1e2de:	ea32 0303 	bics.w	r3, r2, r3
   1e2e2:	d00a      	beq.n	1e2fa <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   1e2e4:	6a27      	ldr	r7, [r4, #32]
   1e2e6:	b167      	cbz	r7, 1e302 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1e2e8:	480b      	ldr	r0, [pc, #44]	; (1e318 <check_ext_api_requests+0x94>)
   1e2ea:	f007 fe14 	bl	25f16 <printk>
			k_panic();
   1e2ee:	4040      	eors	r0, r0
   1e2f0:	f380 8811 	msr	BASEPRI, r0
   1e2f4:	f04f 0004 	mov.w	r0, #4
   1e2f8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1e2fa:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e2fc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1e2fe:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1e300:	e7ca      	b.n	1e298 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1e302:	4648      	mov	r0, r9
   1e304:	f007 fe07 	bl	25f16 <printk>
			*ext_api_req->ext_api = NULL;
   1e308:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e30a:	601f      	str	r7, [r3, #0]
   1e30c:	e7f5      	b.n	1e2fa <check_ext_api_requests+0x76>
   1e30e:	bf00      	nop
   1e310:	0001023c 	.word	0x0001023c
   1e314:	0002c478 	.word	0x0002c478
   1e318:	000300b7 	.word	0x000300b7
   1e31c:	000300e0 	.word	0x000300e0

0001e320 <parse_string>:
{
   1e320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   1e324:	680a      	ldr	r2, [r1, #0]
   1e326:	688b      	ldr	r3, [r1, #8]
{
   1e328:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   1e32a:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   1e32c:	18d0      	adds	r0, r2, r3
   1e32e:	5cd3      	ldrb	r3, [r2, r3]
{
   1e330:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   1e332:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   1e334:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   1e336:	f040 80de 	bne.w	1e4f6 <parse_string+0x1d6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   1e33a:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   1e33c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   1e33e:	684c      	ldr	r4, [r1, #4]
   1e340:	1ab9      	subs	r1, r7, r2
   1e342:	42a1      	cmp	r1, r4
   1e344:	f080 80d7 	bcs.w	1e4f6 <parse_string+0x1d6>
   1e348:	7839      	ldrb	r1, [r7, #0]
   1e34a:	2922      	cmp	r1, #34	; 0x22
   1e34c:	d10e      	bne.n	1e36c <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   1e34e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   1e352:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   1e354:	f8da 2010 	ldr.w	r2, [sl, #16]
   1e358:	4418      	add	r0, r3
   1e35a:	4790      	blx	r2
        if (output == NULL)
   1e35c:	4683      	mov	fp, r0
   1e35e:	2800      	cmp	r0, #0
   1e360:	f000 80c9 	beq.w	1e4f6 <parse_string+0x1d6>
   1e364:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   1e366:	f8df 9198 	ldr.w	r9, [pc, #408]	; 1e500 <parse_string+0x1e0>
   1e36a:	e00f      	b.n	1e38c <parse_string+0x6c>
            if (input_end[0] == '\\')
   1e36c:	295c      	cmp	r1, #92	; 0x5c
   1e36e:	d105      	bne.n	1e37c <parse_string+0x5c>
   1e370:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   1e372:	1ab9      	subs	r1, r7, r2
   1e374:	428c      	cmp	r4, r1
   1e376:	f240 80be 	bls.w	1e4f6 <parse_string+0x1d6>
                skipped_bytes++;
   1e37a:	3301      	adds	r3, #1
            input_end++;
   1e37c:	3701      	adds	r7, #1
   1e37e:	e7df      	b.n	1e340 <parse_string+0x20>
        if (*input_pointer != '\\')
   1e380:	782b      	ldrb	r3, [r5, #0]
   1e382:	2b5c      	cmp	r3, #92	; 0x5c
   1e384:	d012      	beq.n	1e3ac <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   1e386:	3501      	adds	r5, #1
   1e388:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   1e38c:	42bd      	cmp	r5, r7
   1e38e:	d3f7      	bcc.n	1e380 <parse_string+0x60>
    *output_pointer = '\0';
   1e390:	2300      	movs	r3, #0
   1e392:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   1e394:	2310      	movs	r3, #16
    return true;
   1e396:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   1e398:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   1e39c:	f8da 3000 	ldr.w	r3, [sl]
   1e3a0:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   1e3a2:	3701      	adds	r7, #1
   1e3a4:	f8ca 7008 	str.w	r7, [sl, #8]
}
   1e3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   1e3ac:	1b7a      	subs	r2, r7, r5
   1e3ae:	2a00      	cmp	r2, #0
   1e3b0:	dd0d      	ble.n	1e3ce <parse_string+0xae>
            switch (input_pointer[1])
   1e3b2:	786b      	ldrb	r3, [r5, #1]
   1e3b4:	2b75      	cmp	r3, #117	; 0x75
   1e3b6:	d80a      	bhi.n	1e3ce <parse_string+0xae>
   1e3b8:	2b6d      	cmp	r3, #109	; 0x6d
   1e3ba:	d812      	bhi.n	1e3e2 <parse_string+0xc2>
   1e3bc:	2b62      	cmp	r3, #98	; 0x62
   1e3be:	d02b      	beq.n	1e418 <parse_string+0xf8>
   1e3c0:	d826      	bhi.n	1e410 <parse_string+0xf0>
   1e3c2:	2b2f      	cmp	r3, #47	; 0x2f
   1e3c4:	d029      	beq.n	1e41a <parse_string+0xfa>
   1e3c6:	2b5c      	cmp	r3, #92	; 0x5c
   1e3c8:	d027      	beq.n	1e41a <parse_string+0xfa>
   1e3ca:	2b22      	cmp	r3, #34	; 0x22
   1e3cc:	d025      	beq.n	1e41a <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   1e3ce:	4658      	mov	r0, fp
   1e3d0:	f8da 3014 	ldr.w	r3, [sl, #20]
   1e3d4:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   1e3d6:	f8da 0000 	ldr.w	r0, [sl]
   1e3da:	1a28      	subs	r0, r5, r0
   1e3dc:	f8ca 0008 	str.w	r0, [sl, #8]
   1e3e0:	e08c      	b.n	1e4fc <parse_string+0x1dc>
   1e3e2:	3b6e      	subs	r3, #110	; 0x6e
   1e3e4:	2b07      	cmp	r3, #7
   1e3e6:	d8f2      	bhi.n	1e3ce <parse_string+0xae>
   1e3e8:	a101      	add	r1, pc, #4	; (adr r1, 1e3f0 <parse_string+0xd0>)
   1e3ea:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1e3ee:	bf00      	nop
   1e3f0:	0001e425 	.word	0x0001e425
   1e3f4:	0001e3cf 	.word	0x0001e3cf
   1e3f8:	0001e3cf 	.word	0x0001e3cf
   1e3fc:	0001e3cf 	.word	0x0001e3cf
   1e400:	0001e429 	.word	0x0001e429
   1e404:	0001e3cf 	.word	0x0001e3cf
   1e408:	0001e42d 	.word	0x0001e42d
   1e40c:	0001e431 	.word	0x0001e431
            switch (input_pointer[1])
   1e410:	2b66      	cmp	r3, #102	; 0x66
   1e412:	d1dc      	bne.n	1e3ce <parse_string+0xae>
                    *output_pointer++ = '\f';
   1e414:	230c      	movs	r3, #12
   1e416:	e000      	b.n	1e41a <parse_string+0xfa>
                    *output_pointer++ = '\b';
   1e418:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   1e41a:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   1e41e:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   1e420:	441d      	add	r5, r3
   1e422:	e7b3      	b.n	1e38c <parse_string+0x6c>
                    *output_pointer++ = '\n';
   1e424:	230a      	movs	r3, #10
   1e426:	e7f8      	b.n	1e41a <parse_string+0xfa>
                    *output_pointer++ = '\r';
   1e428:	230d      	movs	r3, #13
   1e42a:	e7f6      	b.n	1e41a <parse_string+0xfa>
                    *output_pointer++ = '\t';
   1e42c:	2309      	movs	r3, #9
   1e42e:	e7f4      	b.n	1e41a <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   1e430:	2a05      	cmp	r2, #5
   1e432:	ddcc      	ble.n	1e3ce <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   1e434:	1ca8      	adds	r0, r5, #2
   1e436:	f00a ff7f 	bl	29338 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   1e43a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   1e43e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   1e442:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   1e444:	d3c3      	bcc.n	1e3ce <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   1e446:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   1e44a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e44e:	d22d      	bcs.n	1e4ac <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   1e450:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   1e452:	1afb      	subs	r3, r7, r3
   1e454:	2b05      	cmp	r3, #5
   1e456:	ddba      	ble.n	1e3ce <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   1e458:	79ab      	ldrb	r3, [r5, #6]
   1e45a:	2b5c      	cmp	r3, #92	; 0x5c
   1e45c:	d1b7      	bne.n	1e3ce <parse_string+0xae>
   1e45e:	79eb      	ldrb	r3, [r5, #7]
   1e460:	2b75      	cmp	r3, #117	; 0x75
   1e462:	d1b4      	bne.n	1e3ce <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   1e464:	f105 0008 	add.w	r0, r5, #8
   1e468:	f00a ff66 	bl	29338 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   1e46c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   1e470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e474:	d2ab      	bcs.n	1e3ce <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   1e476:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   1e478:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   1e47c:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1e480:	4330      	orrs	r0, r6
   1e482:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   1e486:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   1e488:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   1e48a:	f101 3eff 	add.w	lr, r1, #4294967295
   1e48e:	fa5f fc8e 	uxtb.w	ip, lr
   1e492:	44a6      	add	lr, r4
   1e494:	b2f2      	uxtb	r2, r6
   1e496:	f1bc 0f00 	cmp.w	ip, #0
   1e49a:	d120      	bne.n	1e4de <parse_string+0x1be>
    if (utf8_length > 1)
   1e49c:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   1e49e:	bf14      	ite	ne
   1e4a0:	4302      	orrne	r2, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   1e4a2:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   1e4a6:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   1e4a8:	440c      	add	r4, r1
                    if (sequence_length == 0)
   1e4aa:	e7b9      	b.n	1e420 <parse_string+0x100>
    if (codepoint < 0x80)
   1e4ac:	287f      	cmp	r0, #127	; 0x7f
   1e4ae:	d90a      	bls.n	1e4c6 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   1e4b0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1e4b4:	d30b      	bcc.n	1e4ce <parse_string+0x1ae>
    else if (codepoint < 0x10000)
   1e4b6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1e4ba:	d30c      	bcc.n	1e4d6 <parse_string+0x1b6>
    else if (codepoint <= 0x10FFFF)
   1e4bc:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1e4c0:	d285      	bcs.n	1e3ce <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   1e4c2:	2306      	movs	r3, #6
   1e4c4:	e7df      	b.n	1e486 <parse_string+0x166>
   1e4c6:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   1e4c8:	2000      	movs	r0, #0
        utf8_length = 1;
   1e4ca:	2101      	movs	r1, #1
   1e4cc:	e7dd      	b.n	1e48a <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   1e4ce:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   1e4d0:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   1e4d2:	2102      	movs	r1, #2
   1e4d4:	e7d9      	b.n	1e48a <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   1e4d6:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   1e4d8:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   1e4da:	2103      	movs	r1, #3
   1e4dc:	e7d5      	b.n	1e48a <parse_string+0x16a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   1e4de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1e4e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   1e4e6:	f10c 3cff 	add.w	ip, ip, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   1e4ea:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   1e4ee:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   1e4f0:	fa5f fc8c 	uxtb.w	ip, ip
   1e4f4:	e7ce      	b.n	1e494 <parse_string+0x174>
    if (input_pointer != NULL)
   1e4f6:	2d00      	cmp	r5, #0
   1e4f8:	f47f af6d 	bne.w	1e3d6 <parse_string+0xb6>
    return false;
   1e4fc:	2000      	movs	r0, #0
   1e4fe:	e753      	b.n	1e3a8 <parse_string+0x88>
   1e500:	000ffc00 	.word	0x000ffc00

0001e504 <compare_double>:
{
   1e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   1e506:	ec41 0b10 	vmov	d0, r0, r1
{
   1e50a:	ed2d 8b04 	vpush	{d8-d9}
   1e50e:	ec41 0b18 	vmov	d8, r0, r1
   1e512:	ec43 2b19 	vmov	d9, r2, r3
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   1e516:	f005 ff55 	bl	243c4 <fabs>
   1e51a:	ec55 4b10 	vmov	r4, r5, d0
   1e51e:	eeb0 0a49 	vmov.f32	s0, s18
   1e522:	eef0 0a69 	vmov.f32	s1, s19
   1e526:	f005 ff4d 	bl	243c4 <fabs>
   1e52a:	4620      	mov	r0, r4
   1e52c:	ec53 2b10 	vmov	r2, r3, d0
   1e530:	4629      	mov	r1, r5
   1e532:	f7f2 fad1 	bl	10ad8 <__aeabi_dcmpgt>
   1e536:	b328      	cbz	r0, 1e584 <compare_double+0x80>
   1e538:	eeb0 0a48 	vmov.f32	s0, s16
   1e53c:	eef0 0a68 	vmov.f32	s1, s17
   1e540:	f005 ff40 	bl	243c4 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   1e544:	ec53 2b19 	vmov	r2, r3, d9
   1e548:	ec51 0b18 	vmov	r0, r1, d8
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   1e54c:	ec55 4b10 	vmov	r4, r5, d0
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   1e550:	f7f1 fe7a 	bl	10248 <__aeabi_dsub>
   1e554:	ec41 0b10 	vmov	d0, r0, r1
   1e558:	f005 ff34 	bl	243c4 <fabs>
   1e55c:	2200      	movs	r2, #0
   1e55e:	4b0c      	ldr	r3, [pc, #48]	; (1e590 <compare_double+0x8c>)
   1e560:	4620      	mov	r0, r4
   1e562:	4629      	mov	r1, r5
   1e564:	ec57 6b10 	vmov	r6, r7, d0
   1e568:	f7f2 f826 	bl	105b8 <__aeabi_dmul>
   1e56c:	4602      	mov	r2, r0
   1e56e:	460b      	mov	r3, r1
   1e570:	4630      	mov	r0, r6
   1e572:	4639      	mov	r1, r7
   1e574:	f7f2 fa9c 	bl	10ab0 <__aeabi_dcmple>
}
   1e578:	ecbd 8b04 	vpop	{d8-d9}
   1e57c:	3800      	subs	r0, #0
   1e57e:	bf18      	it	ne
   1e580:	2001      	movne	r0, #1
   1e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   1e584:	eeb0 0a49 	vmov.f32	s0, s18
   1e588:	eef0 0a69 	vmov.f32	s1, s19
   1e58c:	e7d8      	b.n	1e540 <compare_double+0x3c>
   1e58e:	bf00      	nop
   1e590:	3cb00000 	.word	0x3cb00000

0001e594 <get_object_item>:
{
   1e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e596:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   1e598:	b360      	cbz	r0, 1e5f4 <get_object_item+0x60>
   1e59a:	b359      	cbz	r1, 1e5f4 <get_object_item+0x60>
    current_element = object->child;
   1e59c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   1e59e:	b9fa      	cbnz	r2, 1e5e0 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   1e5a0:	4e17      	ldr	r6, [pc, #92]	; (1e600 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   1e5a2:	b33c      	cbz	r4, 1e5f4 <get_object_item+0x60>
   1e5a4:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   1e5a6:	b1c3      	cbz	r3, 1e5da <get_object_item+0x46>
    if (string1 == string2)
   1e5a8:	42ab      	cmp	r3, r5
   1e5aa:	d021      	beq.n	1e5f0 <get_object_item+0x5c>
   1e5ac:	f105 3cff 	add.w	ip, r5, #4294967295
   1e5b0:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   1e5b2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   1e5b6:	460f      	mov	r7, r1
   1e5b8:	5d8a      	ldrb	r2, [r1, r6]
   1e5ba:	f002 0203 	and.w	r2, r2, #3
   1e5be:	2a01      	cmp	r2, #1
   1e5c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e5c4:	bf08      	it	eq
   1e5c6:	f101 0720 	addeq.w	r7, r1, #32
   1e5ca:	5cb0      	ldrb	r0, [r6, r2]
   1e5cc:	f000 0003 	and.w	r0, r0, #3
   1e5d0:	2801      	cmp	r0, #1
   1e5d2:	bf08      	it	eq
   1e5d4:	3220      	addeq	r2, #32
   1e5d6:	4297      	cmp	r7, r2
   1e5d8:	d00f      	beq.n	1e5fa <get_object_item+0x66>
            current_element = current_element->next;
   1e5da:	6824      	ldr	r4, [r4, #0]
   1e5dc:	e7e1      	b.n	1e5a2 <get_object_item+0xe>
            current_element = current_element->next;
   1e5de:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   1e5e0:	b144      	cbz	r4, 1e5f4 <get_object_item+0x60>
   1e5e2:	6a21      	ldr	r1, [r4, #32]
   1e5e4:	b121      	cbz	r1, 1e5f0 <get_object_item+0x5c>
   1e5e6:	4628      	mov	r0, r5
   1e5e8:	f7f2 fcde 	bl	10fa8 <strcmp>
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	d1f6      	bne.n	1e5de <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   1e5f0:	6a23      	ldr	r3, [r4, #32]
   1e5f2:	b903      	cbnz	r3, 1e5f6 <get_object_item+0x62>
        return NULL;
   1e5f4:	2400      	movs	r4, #0
}
   1e5f6:	4620      	mov	r0, r4
   1e5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   1e5fa:	2900      	cmp	r1, #0
   1e5fc:	d1d9      	bne.n	1e5b2 <get_object_item+0x1e>
   1e5fe:	e7f7      	b.n	1e5f0 <get_object_item+0x5c>
   1e600:	00030304 	.word	0x00030304

0001e604 <print_string_ptr>:
{
   1e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   1e608:	4b52      	ldr	r3, [pc, #328]	; (1e754 <print_string_ptr+0x150>)
{
   1e60a:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   1e60c:	881a      	ldrh	r2, [r3, #0]
   1e60e:	789b      	ldrb	r3, [r3, #2]
{
   1e610:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   1e612:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   1e614:	f8ad 200c 	strh.w	r2, [sp, #12]
   1e618:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   1e61c:	b919      	cbnz	r1, 1e626 <print_string_ptr+0x22>
        return false;
   1e61e:	2000      	movs	r0, #0
}
   1e620:	b005      	add	sp, #20
   1e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   1e626:	b340      	cbz	r0, 1e67a <print_string_ptr+0x76>
   1e628:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   1e62a:	f04f 0b00 	mov.w	fp, #0
   1e62e:	2001      	movs	r0, #1
   1e630:	4c49      	ldr	r4, [pc, #292]	; (1e758 <print_string_ptr+0x154>)
   1e632:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   1e634:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e638:	bb6b      	cbnz	r3, 1e696 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   1e63a:	ebaa 0a05 	sub.w	sl, sl, r5
   1e63e:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   1e640:	4638      	mov	r0, r7
   1e642:	f10a 0103 	add.w	r1, sl, #3
   1e646:	f00a fedd 	bl	29404 <ensure>
    if (output == NULL)
   1e64a:	4606      	mov	r6, r0
   1e64c:	2800      	cmp	r0, #0
   1e64e:	d0e6      	beq.n	1e61e <print_string_ptr+0x1a>
    if (escape_characters == 0)
   1e650:	2322      	movs	r3, #34	; 0x22
   1e652:	1c44      	adds	r4, r0, #1
   1e654:	f10a 0901 	add.w	r9, sl, #1
   1e658:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   1e65c:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   1e65e:	f1bb 0f00 	cmp.w	fp, #0
   1e662:	d12e      	bne.n	1e6c2 <print_string_ptr+0xbe>
   1e664:	4652      	mov	r2, sl
   1e666:	4629      	mov	r1, r5
   1e668:	4620      	mov	r0, r4
   1e66a:	f00c fbed 	bl	2ae48 <memcpy>
        output[output_length + 1] = '\"';
   1e66e:	2322      	movs	r3, #34	; 0x22
   1e670:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   1e674:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   1e678:	e00b      	b.n	1e692 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   1e67a:	2103      	movs	r1, #3
   1e67c:	4638      	mov	r0, r7
   1e67e:	f00a fec1 	bl	29404 <ensure>
        if (output == NULL)
   1e682:	2800      	cmp	r0, #0
   1e684:	d0cb      	beq.n	1e61e <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   1e686:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1e68a:	a903      	add	r1, sp, #12
   1e68c:	1ad2      	subs	r2, r2, r3
   1e68e:	f00c fd3c 	bl	2b10a <strncpy>
    return true;
   1e692:	2001      	movs	r0, #1
   1e694:	e7c4      	b.n	1e620 <print_string_ptr+0x1c>
        switch (*input_pointer)
   1e696:	2b22      	cmp	r3, #34	; 0x22
   1e698:	d80b      	bhi.n	1e6b2 <print_string_ptr+0xae>
   1e69a:	2b07      	cmp	r3, #7
   1e69c:	d90c      	bls.n	1e6b8 <print_string_ptr+0xb4>
   1e69e:	f1a3 0208 	sub.w	r2, r3, #8
   1e6a2:	b2d2      	uxtb	r2, r2
   1e6a4:	fa00 f202 	lsl.w	r2, r0, r2
   1e6a8:	4222      	tst	r2, r4
   1e6aa:	d005      	beq.n	1e6b8 <print_string_ptr+0xb4>
                escape_characters++;
   1e6ac:	f10b 0b01 	add.w	fp, fp, #1
                break;
   1e6b0:	e7bf      	b.n	1e632 <print_string_ptr+0x2e>
        switch (*input_pointer)
   1e6b2:	2b5c      	cmp	r3, #92	; 0x5c
   1e6b4:	d1bd      	bne.n	1e632 <print_string_ptr+0x2e>
   1e6b6:	e7f9      	b.n	1e6ac <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   1e6b8:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   1e6ba:	bf98      	it	ls
   1e6bc:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   1e6c0:	e7b7      	b.n	1e632 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   1e6c2:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   1e6c6:	f04f 0b74 	mov.w	fp, #116	; 0x74
   1e6ca:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   1e6cc:	4a23      	ldr	r2, [pc, #140]	; (1e75c <print_string_ptr+0x158>)
   1e6ce:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1e6d0:	9901      	ldr	r1, [sp, #4]
   1e6d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e6d6:	9101      	str	r1, [sp, #4]
   1e6d8:	b92b      	cbnz	r3, 1e6e6 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   1e6da:	2222      	movs	r2, #34	; 0x22
   1e6dc:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   1e6e0:	f806 3008 	strb.w	r3, [r6, r8]
   1e6e4:	e7d5      	b.n	1e692 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   1e6e6:	2b1f      	cmp	r3, #31
   1e6e8:	d907      	bls.n	1e6fa <print_string_ptr+0xf6>
   1e6ea:	2b22      	cmp	r3, #34	; 0x22
   1e6ec:	d005      	beq.n	1e6fa <print_string_ptr+0xf6>
   1e6ee:	2b5c      	cmp	r3, #92	; 0x5c
   1e6f0:	d003      	beq.n	1e6fa <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   1e6f2:	4620      	mov	r0, r4
   1e6f4:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1e6f6:	1c44      	adds	r4, r0, #1
   1e6f8:	e7ea      	b.n	1e6d0 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   1e6fa:	4620      	mov	r0, r4
            switch (*input_pointer)
   1e6fc:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   1e6fe:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   1e702:	781b      	ldrb	r3, [r3, #0]
   1e704:	2b0d      	cmp	r3, #13
   1e706:	d80a      	bhi.n	1e71e <print_string_ptr+0x11a>
   1e708:	2b07      	cmp	r3, #7
   1e70a:	d919      	bls.n	1e740 <print_string_ptr+0x13c>
   1e70c:	f1a3 0108 	sub.w	r1, r3, #8
   1e710:	2905      	cmp	r1, #5
   1e712:	d815      	bhi.n	1e740 <print_string_ptr+0x13c>
   1e714:	e8df f001 	tbb	[pc, r1]
   1e718:	140d1109 	.word	0x140d1109
   1e71c:	0f0b      	.short	0x0f0b
   1e71e:	2b22      	cmp	r3, #34	; 0x22
   1e720:	d001      	beq.n	1e726 <print_string_ptr+0x122>
   1e722:	2b5c      	cmp	r3, #92	; 0x5c
   1e724:	d10c      	bne.n	1e740 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   1e726:	7063      	strb	r3, [r4, #1]
                    break;
   1e728:	e7e5      	b.n	1e6f6 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   1e72a:	2362      	movs	r3, #98	; 0x62
   1e72c:	e7fb      	b.n	1e726 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   1e72e:	2366      	movs	r3, #102	; 0x66
   1e730:	e7f9      	b.n	1e726 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   1e732:	236e      	movs	r3, #110	; 0x6e
   1e734:	e7f7      	b.n	1e726 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   1e736:	2372      	movs	r3, #114	; 0x72
   1e738:	e7f5      	b.n	1e726 <print_string_ptr+0x122>
                    *output_pointer = 't';
   1e73a:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   1e73e:	e7da      	b.n	1e6f6 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   1e740:	6839      	ldr	r1, [r7, #0]
   1e742:	687d      	ldr	r5, [r7, #4]
   1e744:	1a41      	subs	r1, r0, r1
   1e746:	1a69      	subs	r1, r5, r1
   1e748:	f006 fa74 	bl	24c34 <sniprintf>
                    output_pointer += 4;
   1e74c:	4a03      	ldr	r2, [pc, #12]	; (1e75c <print_string_ptr+0x158>)
   1e74e:	1d60      	adds	r0, r4, #5
                    break;
   1e750:	e7d1      	b.n	1e6f6 <print_string_ptr+0xf2>
   1e752:	bf00      	nop
   1e754:	00030119 	.word	0x00030119
   1e758:	04000037 	.word	0x04000037
   1e75c:	00030113 	.word	0x00030113

0001e760 <print_value>:
{
   1e760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e764:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   1e766:	4606      	mov	r6, r0
{
   1e768:	b08e      	sub	sp, #56	; 0x38
    if ((item == NULL) || (output_buffer == NULL))
   1e76a:	b908      	cbnz	r0, 1e770 <print_value+0x10>
    switch ((item->type) & 0xFF)
   1e76c:	2500      	movs	r5, #0
   1e76e:	e06f      	b.n	1e850 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   1e770:	2900      	cmp	r1, #0
   1e772:	d0fb      	beq.n	1e76c <print_value+0xc>
    switch ((item->type) & 0xFF)
   1e774:	7b05      	ldrb	r5, [r0, #12]
   1e776:	2d10      	cmp	r5, #16
   1e778:	f000 80e8 	beq.w	1e94c <print_value+0x1ec>
   1e77c:	dc18      	bgt.n	1e7b0 <print_value+0x50>
   1e77e:	1e6b      	subs	r3, r5, #1
   1e780:	2b07      	cmp	r3, #7
   1e782:	d8f3      	bhi.n	1e76c <print_value+0xc>
   1e784:	2b07      	cmp	r3, #7
   1e786:	d8f1      	bhi.n	1e76c <print_value+0xc>
   1e788:	a201      	add	r2, pc, #4	; (adr r2, 1e790 <print_value+0x30>)
   1e78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e78e:	bf00      	nop
   1e790:	0001e82d 	.word	0x0001e82d
   1e794:	0001e859 	.word	0x0001e859
   1e798:	0001e76d 	.word	0x0001e76d
   1e79c:	0001e805 	.word	0x0001e805
   1e7a0:	0001e76d 	.word	0x0001e76d
   1e7a4:	0001e76d 	.word	0x0001e76d
   1e7a8:	0001e76d 	.word	0x0001e76d
   1e7ac:	0001e85d 	.word	0x0001e85d
   1e7b0:	2d40      	cmp	r5, #64	; 0x40
   1e7b2:	f000 80f9 	beq.w	1e9a8 <print_value+0x248>
   1e7b6:	2d80      	cmp	r5, #128	; 0x80
   1e7b8:	f000 80b4 	beq.w	1e924 <print_value+0x1c4>
   1e7bc:	2d20      	cmp	r5, #32
   1e7be:	d1d5      	bne.n	1e76c <print_value+0xc>
            return print_array(item, output_buffer);
   1e7c0:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   1e7c2:	2101      	movs	r1, #1
   1e7c4:	4620      	mov	r0, r4
   1e7c6:	f00a fe1d 	bl	29404 <ensure>
    if (output_pointer == NULL)
   1e7ca:	2800      	cmp	r0, #0
   1e7cc:	d0ce      	beq.n	1e76c <print_value+0xc>
    *output_pointer = '[';
   1e7ce:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   1e7d0:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   1e7d2:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   1e7d6:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   1e7d8:	68a3      	ldr	r3, [r4, #8]
   1e7da:	3301      	adds	r3, #1
   1e7dc:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   1e7de:	68e3      	ldr	r3, [r4, #12]
   1e7e0:	3301      	adds	r3, #1
   1e7e2:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   1e7e4:	2e00      	cmp	r6, #0
   1e7e6:	f040 80b6 	bne.w	1e956 <print_value+0x1f6>
    output_pointer = ensure(output_buffer, 2);
   1e7ea:	2102      	movs	r1, #2
   1e7ec:	4620      	mov	r0, r4
   1e7ee:	f00a fe09 	bl	29404 <ensure>
    if (output_pointer == NULL)
   1e7f2:	2800      	cmp	r0, #0
   1e7f4:	d0ba      	beq.n	1e76c <print_value+0xc>
    *output_pointer++ = ']';
   1e7f6:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   1e7f8:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   1e7fa:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   1e7fc:	68e3      	ldr	r3, [r4, #12]
   1e7fe:	3b01      	subs	r3, #1
   1e800:	60e3      	str	r3, [r4, #12]
   1e802:	e011      	b.n	1e828 <print_value+0xc8>
            const char buff[] = "null";
   1e804:	4bb1      	ldr	r3, [pc, #708]	; (1eacc <print_value+0x36c>)
            const char buff[] = "true";
   1e806:	6818      	ldr	r0, [r3, #0]
   1e808:	791b      	ldrb	r3, [r3, #4]
   1e80a:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   1e80c:	2105      	movs	r1, #5
   1e80e:	4620      	mov	r0, r4
            const char buff[] = "true";
   1e810:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   1e814:	f00a fdf6 	bl	29404 <ensure>
            if (output == NULL)
   1e818:	4605      	mov	r5, r0
   1e81a:	b1c8      	cbz	r0, 1e850 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   1e81c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e820:	a907      	add	r1, sp, #28
   1e822:	1ad2      	subs	r2, r2, r3
   1e824:	f00c fc71 	bl	2b10a <strncpy>
    return true;
   1e828:	2501      	movs	r5, #1
   1e82a:	e011      	b.n	1e850 <print_value+0xf0>
            const char buff[] = "false";
   1e82c:	4ba8      	ldr	r3, [pc, #672]	; (1ead0 <print_value+0x370>)
            output = ensure(output_buffer, sizeof(buff));
   1e82e:	2106      	movs	r1, #6
            const char buff[] = "false";
   1e830:	6818      	ldr	r0, [r3, #0]
   1e832:	889b      	ldrh	r3, [r3, #4]
   1e834:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   1e836:	4620      	mov	r0, r4
            const char buff[] = "false";
   1e838:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   1e83c:	f00a fde2 	bl	29404 <ensure>
            if (output == NULL)
   1e840:	2800      	cmp	r0, #0
   1e842:	d093      	beq.n	1e76c <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   1e844:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e848:	a907      	add	r1, sp, #28
   1e84a:	1ad2      	subs	r2, r2, r3
   1e84c:	f00c fc5d 	bl	2b10a <strncpy>
}
   1e850:	4628      	mov	r0, r5
   1e852:	b00e      	add	sp, #56	; 0x38
   1e854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            const char buff[] = "true";
   1e858:	4b9e      	ldr	r3, [pc, #632]	; (1ead4 <print_value+0x374>)
   1e85a:	e7d4      	b.n	1e806 <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   1e85c:	2100      	movs	r1, #0
    double d = item->valuedouble;
   1e85e:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   1e862:	2216      	movs	r2, #22
   1e864:	a808      	add	r0, sp, #32
   1e866:	9107      	str	r1, [sp, #28]
   1e868:	f00c fb0e 	bl	2ae88 <memset>
    double test = 0.0;
   1e86c:	2200      	movs	r2, #0
   1e86e:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   1e870:	4630      	mov	r0, r6
    double test = 0.0;
   1e872:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   1e876:	4639      	mov	r1, r7
   1e878:	4632      	mov	r2, r6
   1e87a:	463b      	mov	r3, r7
   1e87c:	f7f2 f936 	bl	10aec <__aeabi_dcmpun>
   1e880:	f10d 0a1c 	add.w	sl, sp, #28
   1e884:	b988      	cbnz	r0, 1e8aa <print_value+0x14a>
   1e886:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e88a:	f04f 32ff 	mov.w	r2, #4294967295
   1e88e:	4630      	mov	r0, r6
   1e890:	4649      	mov	r1, r9
   1e892:	4b91      	ldr	r3, [pc, #580]	; (1ead8 <print_value+0x378>)
   1e894:	f7f2 f92a 	bl	10aec <__aeabi_dcmpun>
   1e898:	bb00      	cbnz	r0, 1e8dc <print_value+0x17c>
   1e89a:	f04f 32ff 	mov.w	r2, #4294967295
   1e89e:	4630      	mov	r0, r6
   1e8a0:	4649      	mov	r1, r9
   1e8a2:	4b8d      	ldr	r3, [pc, #564]	; (1ead8 <print_value+0x378>)
   1e8a4:	f7f2 f904 	bl	10ab0 <__aeabi_dcmple>
   1e8a8:	b9c0      	cbnz	r0, 1e8dc <print_value+0x17c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   1e8aa:	4650      	mov	r0, sl
   1e8ac:	4987      	ldr	r1, [pc, #540]	; (1eacc <print_value+0x36c>)
   1e8ae:	f00c fc12 	bl	2b0d6 <strcpy>
   1e8b2:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   1e8b4:	4620      	mov	r0, r4
   1e8b6:	1c69      	adds	r1, r5, #1
   1e8b8:	f00a fda4 	bl	29404 <ensure>
    if (output_pointer == NULL)
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	f43f af55 	beq.w	1e76c <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   1e8c2:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   1e8c4:	f81a 2003 	ldrb.w	r2, [sl, r3]
        output_pointer[i] = number_buffer[i];
   1e8c8:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   1e8ca:	3301      	adds	r3, #1
   1e8cc:	429d      	cmp	r5, r3
   1e8ce:	d1f9      	bne.n	1e8c4 <print_value+0x164>
    output_pointer[i] = '\0';
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   1e8d4:	68a0      	ldr	r0, [r4, #8]
   1e8d6:	4428      	add	r0, r5
   1e8d8:	60a0      	str	r0, [r4, #8]
    return true;
   1e8da:	e7a5      	b.n	1e828 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   1e8dc:	211a      	movs	r1, #26
   1e8de:	4a7f      	ldr	r2, [pc, #508]	; (1eadc <print_value+0x37c>)
   1e8e0:	4650      	mov	r0, sl
   1e8e2:	e9cd 6700 	strd	r6, r7, [sp]
   1e8e6:	f006 f9a5 	bl	24c34 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   1e8ea:	497d      	ldr	r1, [pc, #500]	; (1eae0 <print_value+0x380>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   1e8ec:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   1e8ee:	aa04      	add	r2, sp, #16
   1e8f0:	4650      	mov	r0, sl
   1e8f2:	f006 f9d3 	bl	24c9c <siscanf>
   1e8f6:	2801      	cmp	r0, #1
   1e8f8:	d00b      	beq.n	1e912 <print_value+0x1b2>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   1e8fa:	211a      	movs	r1, #26
   1e8fc:	4650      	mov	r0, sl
   1e8fe:	e9cd 6700 	strd	r6, r7, [sp]
   1e902:	4a78      	ldr	r2, [pc, #480]	; (1eae4 <print_value+0x384>)
   1e904:	f006 f996 	bl	24c34 <sniprintf>
   1e908:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   1e90a:	2d19      	cmp	r5, #25
   1e90c:	f73f af2e 	bgt.w	1e76c <print_value+0xc>
   1e910:	e7d0      	b.n	1e8b4 <print_value+0x154>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   1e912:	4632      	mov	r2, r6
   1e914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e918:	463b      	mov	r3, r7
   1e91a:	f7ff fdf3 	bl	1e504 <compare_double>
   1e91e:	2800      	cmp	r0, #0
   1e920:	d0eb      	beq.n	1e8fa <print_value+0x19a>
   1e922:	e7f2      	b.n	1e90a <print_value+0x1aa>
            if (item->valuestring == NULL)
   1e924:	6900      	ldr	r0, [r0, #16]
   1e926:	2800      	cmp	r0, #0
   1e928:	f43f af20 	beq.w	1e76c <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   1e92c:	f7f2 fb46 	bl	10fbc <strlen>
   1e930:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   1e932:	4611      	mov	r1, r2
   1e934:	4620      	mov	r0, r4
   1e936:	9203      	str	r2, [sp, #12]
   1e938:	f00a fd64 	bl	29404 <ensure>
            if (output == NULL)
   1e93c:	2800      	cmp	r0, #0
   1e93e:	f43f af15 	beq.w	1e76c <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e942:	9a03      	ldr	r2, [sp, #12]
   1e944:	6931      	ldr	r1, [r6, #16]
   1e946:	f00c fa7f 	bl	2ae48 <memcpy>
   1e94a:	e76d      	b.n	1e828 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   1e94c:	6900      	ldr	r0, [r0, #16]
   1e94e:	f7ff fe59 	bl	1e604 <print_string_ptr>
   1e952:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   1e954:	e77c      	b.n	1e850 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   1e956:	4621      	mov	r1, r4
   1e958:	4630      	mov	r0, r6
   1e95a:	f7ff ff01 	bl	1e760 <print_value>
   1e95e:	2800      	cmp	r0, #0
   1e960:	f43f af04 	beq.w	1e76c <print_value+0xc>
        update_offset(output_buffer);
   1e964:	4620      	mov	r0, r4
   1e966:	f00a fd2c 	bl	293c2 <update_offset>
        if (current_element->next)
   1e96a:	6833      	ldr	r3, [r6, #0]
   1e96c:	b1bb      	cbz	r3, 1e99e <print_value+0x23e>
            length = (size_t) (output_buffer->format ? 2 : 1);
   1e96e:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   1e970:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   1e972:	2b00      	cmp	r3, #0
   1e974:	bf14      	ite	ne
   1e976:	f04f 0902 	movne.w	r9, #2
   1e97a:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   1e97e:	f109 0101 	add.w	r1, r9, #1
   1e982:	f00a fd3f 	bl	29404 <ensure>
            if (output_pointer == NULL)
   1e986:	2800      	cmp	r0, #0
   1e988:	f43f aef0 	beq.w	1e76c <print_value+0xc>
            *output_pointer++ = ',';
   1e98c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   1e98e:	6963      	ldr	r3, [r4, #20]
   1e990:	b93b      	cbnz	r3, 1e9a2 <print_value+0x242>
            *output_pointer++ = ',';
   1e992:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   1e994:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   1e998:	68a3      	ldr	r3, [r4, #8]
   1e99a:	444b      	add	r3, r9
   1e99c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   1e99e:	6836      	ldr	r6, [r6, #0]
   1e9a0:	e720      	b.n	1e7e4 <print_value+0x84>
                *output_pointer++ = ' ';
   1e9a2:	1c83      	adds	r3, r0, #2
   1e9a4:	7045      	strb	r5, [r0, #1]
   1e9a6:	e7f5      	b.n	1e994 <print_value+0x234>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   1e9a8:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   1e9aa:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   1e9ac:	2b00      	cmp	r3, #0
   1e9ae:	bf14      	ite	ne
   1e9b0:	2702      	movne	r7, #2
   1e9b2:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   1e9b4:	4620      	mov	r0, r4
   1e9b6:	1c79      	adds	r1, r7, #1
   1e9b8:	f00a fd24 	bl	29404 <ensure>
    if (output_pointer == NULL)
   1e9bc:	2800      	cmp	r0, #0
   1e9be:	f43f aed5 	beq.w	1e76c <print_value+0xc>
    *output_pointer++ = '{';
   1e9c2:	237b      	movs	r3, #123	; 0x7b
   1e9c4:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   1e9c6:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   1e9c8:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   1e9ca:	3201      	adds	r2, #1
   1e9cc:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   1e9ce:	b10b      	cbz	r3, 1e9d4 <print_value+0x274>
        *output_pointer++ = '\n';
   1e9d0:	230a      	movs	r3, #10
   1e9d2:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   1e9d4:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   1e9d6:	2609      	movs	r6, #9
    output_buffer->offset += length;
   1e9d8:	443b      	add	r3, r7
        *output_pointer++ = ':';
   1e9da:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   1e9dc:	60a3      	str	r3, [r4, #8]
    while (current_item)
   1e9de:	6963      	ldr	r3, [r4, #20]
   1e9e0:	b995      	cbnz	r5, 1ea08 <print_value+0x2a8>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1e9e2:	2b00      	cmp	r3, #0
   1e9e4:	d06f      	beq.n	1eac6 <print_value+0x366>
   1e9e6:	68e1      	ldr	r1, [r4, #12]
   1e9e8:	3101      	adds	r1, #1
   1e9ea:	4620      	mov	r0, r4
   1e9ec:	f00a fd0a 	bl	29404 <ensure>
    if (output_pointer == NULL)
   1e9f0:	2800      	cmp	r0, #0
   1e9f2:	f43f aebb 	beq.w	1e76c <print_value+0xc>
    if (output_buffer->format)
   1e9f6:	6963      	ldr	r3, [r4, #20]
   1e9f8:	2b00      	cmp	r3, #0
   1e9fa:	d17d      	bne.n	1eaf8 <print_value+0x398>
   1e9fc:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   1e9fe:	227d      	movs	r2, #125	; 0x7d
   1ea00:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   1ea02:	2200      	movs	r2, #0
   1ea04:	705a      	strb	r2, [r3, #1]
   1ea06:	e6f9      	b.n	1e7fc <print_value+0x9c>
        if (output_buffer->format)
   1ea08:	b173      	cbz	r3, 1ea28 <print_value+0x2c8>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	68e1      	ldr	r1, [r4, #12]
   1ea0e:	f00a fcf9 	bl	29404 <ensure>
            if (output_pointer == NULL)
   1ea12:	2800      	cmp	r0, #0
   1ea14:	f43f aeaa 	beq.w	1e76c <print_value+0xc>
   1ea18:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   1ea1a:	68e1      	ldr	r1, [r4, #12]
   1ea1c:	1a13      	subs	r3, r2, r0
   1ea1e:	428b      	cmp	r3, r1
   1ea20:	d34e      	bcc.n	1eac0 <print_value+0x360>
            output_buffer->offset += output_buffer->depth;
   1ea22:	68a3      	ldr	r3, [r4, #8]
   1ea24:	440b      	add	r3, r1
   1ea26:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   1ea28:	4621      	mov	r1, r4
   1ea2a:	6a28      	ldr	r0, [r5, #32]
   1ea2c:	f7ff fdea 	bl	1e604 <print_string_ptr>
   1ea30:	2800      	cmp	r0, #0
   1ea32:	f43f ae9b 	beq.w	1e76c <print_value+0xc>
        update_offset(output_buffer);
   1ea36:	4620      	mov	r0, r4
   1ea38:	f00a fcc3 	bl	293c2 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   1ea3c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   1ea3e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   1ea40:	2b00      	cmp	r3, #0
   1ea42:	bf14      	ite	ne
   1ea44:	f04f 0802 	movne.w	r8, #2
   1ea48:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   1ea4c:	4641      	mov	r1, r8
   1ea4e:	f00a fcd9 	bl	29404 <ensure>
        if (output_pointer == NULL)
   1ea52:	2800      	cmp	r0, #0
   1ea54:	f43f ae8a 	beq.w	1e76c <print_value+0xc>
        *output_pointer++ = ':';
   1ea58:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   1ea5a:	6963      	ldr	r3, [r4, #20]
   1ea5c:	b103      	cbz	r3, 1ea60 <print_value+0x300>
            *output_pointer++ = '\t';
   1ea5e:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   1ea60:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   1ea62:	4621      	mov	r1, r4
        output_buffer->offset += length;
   1ea64:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   1ea66:	4628      	mov	r0, r5
        output_buffer->offset += length;
   1ea68:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   1ea6a:	f7ff fe79 	bl	1e760 <print_value>
   1ea6e:	2800      	cmp	r0, #0
   1ea70:	f43f ae7c 	beq.w	1e76c <print_value+0xc>
        update_offset(output_buffer);
   1ea74:	4620      	mov	r0, r4
   1ea76:	f00a fca4 	bl	293c2 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   1ea7a:	682b      	ldr	r3, [r5, #0]
   1ea7c:	6962      	ldr	r2, [r4, #20]
   1ea7e:	3b00      	subs	r3, #0
   1ea80:	bf18      	it	ne
   1ea82:	2301      	movne	r3, #1
   1ea84:	2a00      	cmp	r2, #0
   1ea86:	bf0c      	ite	eq
   1ea88:	4698      	moveq	r8, r3
   1ea8a:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   1ea8e:	4620      	mov	r0, r4
   1ea90:	f108 0101 	add.w	r1, r8, #1
   1ea94:	f00a fcb6 	bl	29404 <ensure>
        if (output_pointer == NULL)
   1ea98:	2800      	cmp	r0, #0
   1ea9a:	f43f ae67 	beq.w	1e76c <print_value+0xc>
        if (current_item->next)
   1ea9e:	682b      	ldr	r3, [r5, #0]
   1eaa0:	b113      	cbz	r3, 1eaa8 <print_value+0x348>
            *output_pointer++ = ',';
   1eaa2:	232c      	movs	r3, #44	; 0x2c
   1eaa4:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   1eaa8:	6963      	ldr	r3, [r4, #20]
   1eaaa:	b113      	cbz	r3, 1eab2 <print_value+0x352>
            *output_pointer++ = '\n';
   1eaac:	230a      	movs	r3, #10
   1eaae:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   1eab2:	2300      	movs	r3, #0
   1eab4:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   1eab6:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   1eab8:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   1eaba:	4443      	add	r3, r8
   1eabc:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   1eabe:	e78e      	b.n	1e9de <print_value+0x27e>
                *output_pointer++ = '\t';
   1eac0:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   1eac4:	e7a9      	b.n	1ea1a <print_value+0x2ba>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1eac6:	2102      	movs	r1, #2
   1eac8:	e78f      	b.n	1e9ea <print_value+0x28a>
   1eaca:	bf00      	nop
   1eacc:	0003011c 	.word	0x0003011c
   1ead0:	00030133 	.word	0x00030133
   1ead4:	00030139 	.word	0x00030139
   1ead8:	7fefffff 	.word	0x7fefffff
   1eadc:	00030121 	.word	0x00030121
   1eae0:	00030128 	.word	0x00030128
   1eae4:	0003012c 	.word	0x0003012c
            *output_pointer++ = '\t';
   1eae8:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   1eaec:	68e2      	ldr	r2, [r4, #12]
   1eaee:	1a19      	subs	r1, r3, r0
   1eaf0:	3a01      	subs	r2, #1
   1eaf2:	4291      	cmp	r1, r2
   1eaf4:	d3f8      	bcc.n	1eae8 <print_value+0x388>
   1eaf6:	e782      	b.n	1e9fe <print_value+0x29e>
   1eaf8:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   1eafa:	2509      	movs	r5, #9
   1eafc:	e7f6      	b.n	1eaec <print_value+0x38c>
   1eafe:	bf00      	nop

0001eb00 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   1eb00:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1eb02:	4d24      	ldr	r5, [pc, #144]	; (1eb94 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   1eb04:	b08b      	sub	sp, #44	; 0x2c
   1eb06:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   1eb08:	2224      	movs	r2, #36	; 0x24
   1eb0a:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   1eb0c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   1eb0e:	a801      	add	r0, sp, #4
   1eb10:	f00c f9ba 	bl	2ae88 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1eb14:	682b      	ldr	r3, [r5, #0]
   1eb16:	f44f 7080 	mov.w	r0, #256	; 0x100
   1eb1a:	4798      	blx	r3
    buffer->length = default_buffer_size;
   1eb1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1eb20:	4603      	mov	r3, r0
    buffer->format = format;
   1eb22:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   1eb24:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1eb26:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   1eb28:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   1eb2a:	462f      	mov	r7, r5
   1eb2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1eb30:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   1eb34:	b17b      	cbz	r3, 1eb56 <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   1eb36:	4620      	mov	r0, r4
   1eb38:	a901      	add	r1, sp, #4
   1eb3a:	f7ff fe11 	bl	1e760 <print_value>
   1eb3e:	b150      	cbz	r0, 1eb56 <print.constprop.0+0x56>
    update_offset(buffer);
   1eb40:	a801      	add	r0, sp, #4
   1eb42:	f00a fc3e 	bl	293c2 <update_offset>
    if (hooks->reallocate != NULL)
   1eb46:	68ae      	ldr	r6, [r5, #8]
   1eb48:	9903      	ldr	r1, [sp, #12]
   1eb4a:	b15e      	cbz	r6, 1eb64 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   1eb4c:	9801      	ldr	r0, [sp, #4]
   1eb4e:	3101      	adds	r1, #1
   1eb50:	47b0      	blx	r6
        if (printed == NULL) {
   1eb52:	4604      	mov	r4, r0
   1eb54:	b9d0      	cbnz	r0, 1eb8c <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   1eb56:	9c01      	ldr	r4, [sp, #4]
   1eb58:	b1c4      	cbz	r4, 1eb8c <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   1eb5a:	4620      	mov	r0, r4
   1eb5c:	687b      	ldr	r3, [r7, #4]
   1eb5e:	4798      	blx	r3
    return NULL;
   1eb60:	2400      	movs	r4, #0
   1eb62:	e013      	b.n	1eb8c <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   1eb64:	682b      	ldr	r3, [r5, #0]
   1eb66:	1c48      	adds	r0, r1, #1
   1eb68:	4798      	blx	r3
        if (printed == NULL)
   1eb6a:	4604      	mov	r4, r0
   1eb6c:	2800      	cmp	r0, #0
   1eb6e:	d0f2      	beq.n	1eb56 <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   1eb70:	9a03      	ldr	r2, [sp, #12]
   1eb72:	9b02      	ldr	r3, [sp, #8]
   1eb74:	3201      	adds	r2, #1
   1eb76:	429a      	cmp	r2, r3
   1eb78:	bf28      	it	cs
   1eb7a:	461a      	movcs	r2, r3
   1eb7c:	9901      	ldr	r1, [sp, #4]
   1eb7e:	f00c f963 	bl	2ae48 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   1eb82:	9b03      	ldr	r3, [sp, #12]
   1eb84:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   1eb86:	686b      	ldr	r3, [r5, #4]
   1eb88:	9801      	ldr	r0, [sp, #4]
   1eb8a:	4798      	blx	r3
}
   1eb8c:	4620      	mov	r0, r4
   1eb8e:	b00b      	add	sp, #44	; 0x2c
   1eb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb92:	bf00      	nop
   1eb94:	2000c614 	.word	0x2000c614

0001eb98 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   1eb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   1eb9a:	4605      	mov	r5, r0
   1eb9c:	b180      	cbz	r0, 1ebc0 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   1eb9e:	f7f2 fa0d 	bl	10fbc <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   1eba2:	4b08      	ldr	r3, [pc, #32]	; (1ebc4 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   1eba4:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   1eba6:	4610      	mov	r0, r2
   1eba8:	681b      	ldr	r3, [r3, #0]
   1ebaa:	9201      	str	r2, [sp, #4]
   1ebac:	4798      	blx	r3
    if (copy == NULL)
   1ebae:	4604      	mov	r4, r0
   1ebb0:	b118      	cbz	r0, 1ebba <cJSON_strdup.isra.0.constprop.0+0x22>
   1ebb2:	4629      	mov	r1, r5
   1ebb4:	9a01      	ldr	r2, [sp, #4]
   1ebb6:	f00c f947 	bl	2ae48 <memcpy>
}
   1ebba:	4620      	mov	r0, r4
   1ebbc:	b003      	add	sp, #12
   1ebbe:	bd30      	pop	{r4, r5, pc}
        return NULL;
   1ebc0:	4604      	mov	r4, r0
   1ebc2:	e7fa      	b.n	1ebba <cJSON_strdup.isra.0.constprop.0+0x22>
   1ebc4:	2000c614 	.word	0x2000c614

0001ebc8 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   1ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebca:	460d      	mov	r5, r1
   1ebcc:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   1ebce:	4607      	mov	r7, r0
   1ebd0:	b300      	cbz	r0, 1ec14 <add_item_to_object.constprop.0+0x4c>
   1ebd2:	b1f9      	cbz	r1, 1ec14 <add_item_to_object.constprop.0+0x4c>
   1ebd4:	b1f2      	cbz	r2, 1ec14 <add_item_to_object.constprop.0+0x4c>
   1ebd6:	4290      	cmp	r0, r2
   1ebd8:	d01c      	beq.n	1ec14 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   1ebda:	b193      	cbz	r3, 1ec02 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   1ebdc:	68d6      	ldr	r6, [r2, #12]
   1ebde:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1ebe2:	68e3      	ldr	r3, [r4, #12]
   1ebe4:	059b      	lsls	r3, r3, #22
   1ebe6:	d404      	bmi.n	1ebf2 <add_item_to_object.constprop.0+0x2a>
   1ebe8:	6a20      	ldr	r0, [r4, #32]
   1ebea:	b110      	cbz	r0, 1ebf2 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   1ebec:	4b0a      	ldr	r3, [pc, #40]	; (1ec18 <add_item_to_object.constprop.0+0x50>)
   1ebee:	685b      	ldr	r3, [r3, #4]
   1ebf0:	4798      	blx	r3
    return add_item_to_array(object, item);
   1ebf2:	4621      	mov	r1, r4
   1ebf4:	4638      	mov	r0, r7
    item->string = new_key;
   1ebf6:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   1ebf8:	60e6      	str	r6, [r4, #12]
}
   1ebfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   1ebfe:	f00a bbed 	b.w	293dc <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   1ec02:	4608      	mov	r0, r1
   1ec04:	f7ff ffc8 	bl	1eb98 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   1ec08:	4605      	mov	r5, r0
   1ec0a:	b118      	cbz	r0, 1ec14 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   1ec0c:	68e6      	ldr	r6, [r4, #12]
   1ec0e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   1ec12:	e7e6      	b.n	1ebe2 <add_item_to_object.constprop.0+0x1a>
}
   1ec14:	2000      	movs	r0, #0
   1ec16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec18:	2000c614 	.word	0x2000c614

0001ec1c <cJSON_InitHooks>:
{
   1ec1c:	b530      	push	{r4, r5, lr}
   1ec1e:	4b0d      	ldr	r3, [pc, #52]	; (1ec54 <cJSON_InitHooks+0x38>)
   1ec20:	4d0d      	ldr	r5, [pc, #52]	; (1ec58 <cJSON_InitHooks+0x3c>)
   1ec22:	4c0e      	ldr	r4, [pc, #56]	; (1ec5c <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   1ec24:	b920      	cbnz	r0, 1ec30 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   1ec26:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   1ec2a:	4a0d      	ldr	r2, [pc, #52]	; (1ec60 <cJSON_InitHooks+0x44>)
   1ec2c:	609a      	str	r2, [r3, #8]
   1ec2e:	e00f      	b.n	1ec50 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   1ec30:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   1ec32:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   1ec34:	2900      	cmp	r1, #0
   1ec36:	bf08      	it	eq
   1ec38:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   1ec3a:	2a00      	cmp	r2, #0
   1ec3c:	bf08      	it	eq
   1ec3e:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   1ec40:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   1ec42:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   1ec44:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   1ec46:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   1ec48:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   1ec4a:	d101      	bne.n	1ec50 <cJSON_InitHooks+0x34>
   1ec4c:	42a2      	cmp	r2, r4
   1ec4e:	d0ec      	beq.n	1ec2a <cJSON_InitHooks+0xe>
}
   1ec50:	bd30      	pop	{r4, r5, pc}
   1ec52:	bf00      	nop
   1ec54:	2000c614 	.word	0x2000c614
   1ec58:	000243d9 	.word	0x000243d9
   1ec5c:	000243e9 	.word	0x000243e9
   1ec60:	00024c05 	.word	0x00024c05

0001ec64 <cJSON_Delete>:
{
   1ec64:	b570      	push	{r4, r5, r6, lr}
   1ec66:	4604      	mov	r4, r0
   1ec68:	4d0f      	ldr	r5, [pc, #60]	; (1eca8 <cJSON_Delete+0x44>)
    while (item != NULL)
   1ec6a:	b904      	cbnz	r4, 1ec6e <cJSON_Delete+0xa>
}
   1ec6c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1ec6e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   1ec70:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1ec72:	05d9      	lsls	r1, r3, #23
   1ec74:	d403      	bmi.n	1ec7e <cJSON_Delete+0x1a>
   1ec76:	68a0      	ldr	r0, [r4, #8]
   1ec78:	b968      	cbnz	r0, 1ec96 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1ec7a:	6920      	ldr	r0, [r4, #16]
   1ec7c:	b988      	cbnz	r0, 1eca2 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1ec7e:	68e3      	ldr	r3, [r4, #12]
   1ec80:	059b      	lsls	r3, r3, #22
   1ec82:	d403      	bmi.n	1ec8c <cJSON_Delete+0x28>
   1ec84:	6a20      	ldr	r0, [r4, #32]
   1ec86:	b108      	cbz	r0, 1ec8c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   1ec88:	686b      	ldr	r3, [r5, #4]
   1ec8a:	4798      	blx	r3
        global_hooks.deallocate(item);
   1ec8c:	4620      	mov	r0, r4
   1ec8e:	686b      	ldr	r3, [r5, #4]
   1ec90:	4798      	blx	r3
        item = next;
   1ec92:	4634      	mov	r4, r6
   1ec94:	e7e9      	b.n	1ec6a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   1ec96:	f7ff ffe5 	bl	1ec64 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1ec9a:	68e3      	ldr	r3, [r4, #12]
   1ec9c:	05da      	lsls	r2, r3, #23
   1ec9e:	d5ec      	bpl.n	1ec7a <cJSON_Delete+0x16>
   1eca0:	e7ed      	b.n	1ec7e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   1eca2:	686b      	ldr	r3, [r5, #4]
   1eca4:	4798      	blx	r3
   1eca6:	e7ea      	b.n	1ec7e <cJSON_Delete+0x1a>
   1eca8:	2000c614 	.word	0x2000c614

0001ecac <cJSON_ParseWithLengthOpts>:
{
   1ecac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecb0:	4605      	mov	r5, r0
    global_error.json = NULL;
   1ecb2:	f04f 0900 	mov.w	r9, #0
{
   1ecb6:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   1ecb8:	4f30      	ldr	r7, [pc, #192]	; (1ed7c <cJSON_ParseWithLengthOpts+0xd0>)
{
   1ecba:	460c      	mov	r4, r1
   1ecbc:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   1ecbe:	2100      	movs	r1, #0
   1ecc0:	221c      	movs	r2, #28
   1ecc2:	a801      	add	r0, sp, #4
{
   1ecc4:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   1ecc6:	f00c f8df 	bl	2ae88 <memset>
    global_error.position = 0;
   1ecca:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   1ecce:	2d00      	cmp	r5, #0
   1ecd0:	d04a      	beq.n	1ed68 <cJSON_ParseWithLengthOpts+0xbc>
   1ecd2:	2c00      	cmp	r4, #0
   1ecd4:	d03d      	beq.n	1ed52 <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   1ecd6:	4b2a      	ldr	r3, [pc, #168]	; (1ed80 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   1ecd8:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   1ecdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1ece0:	ab08      	add	r3, sp, #32
   1ece2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   1ece6:	f00a fbce 	bl	29486 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   1ecea:	4604      	mov	r4, r0
   1ecec:	2800      	cmp	r0, #0
   1ecee:	d030      	beq.n	1ed52 <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   1ecf0:	9801      	ldr	r0, [sp, #4]
   1ecf2:	b128      	cbz	r0, 1ed00 <cJSON_ParseWithLengthOpts+0x54>
   1ecf4:	9b03      	ldr	r3, [sp, #12]
   1ecf6:	b9e3      	cbnz	r3, 1ed32 <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   1ecf8:	9b02      	ldr	r3, [sp, #8]
   1ecfa:	2b04      	cmp	r3, #4
   1ecfc:	d80f      	bhi.n	1ed1e <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   1ecfe:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   1ed00:	f00a fb3f 	bl	29382 <buffer_skip_whitespace>
   1ed04:	4601      	mov	r1, r0
   1ed06:	4620      	mov	r0, r4
   1ed08:	f7f2 fa6e 	bl	111e8 <parse_value>
   1ed0c:	b1f0      	cbz	r0, 1ed4c <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   1ed0e:	f1b8 0f00 	cmp.w	r8, #0
   1ed12:	d110      	bne.n	1ed36 <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   1ed14:	bb56      	cbnz	r6, 1ed6c <cJSON_ParseWithLengthOpts+0xc0>
}
   1ed16:	4620      	mov	r0, r4
   1ed18:	b009      	add	sp, #36	; 0x24
   1ed1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   1ed1e:	2203      	movs	r2, #3
   1ed20:	4918      	ldr	r1, [pc, #96]	; (1ed84 <cJSON_ParseWithLengthOpts+0xd8>)
   1ed22:	f00c f9e0 	bl	2b0e6 <strncmp>
   1ed26:	2800      	cmp	r0, #0
   1ed28:	d1e9      	bne.n	1ecfe <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   1ed2a:	9b03      	ldr	r3, [sp, #12]
   1ed2c:	3303      	adds	r3, #3
   1ed2e:	9303      	str	r3, [sp, #12]
   1ed30:	e7e5      	b.n	1ecfe <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   1ed32:	4648      	mov	r0, r9
   1ed34:	e7e4      	b.n	1ed00 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   1ed36:	a801      	add	r0, sp, #4
   1ed38:	f00a fb23 	bl	29382 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   1ed3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ed40:	4293      	cmp	r3, r2
   1ed42:	d203      	bcs.n	1ed4c <cJSON_ParseWithLengthOpts+0xa0>
   1ed44:	9a01      	ldr	r2, [sp, #4]
   1ed46:	5cd3      	ldrb	r3, [r2, r3]
   1ed48:	2b00      	cmp	r3, #0
   1ed4a:	d0e3      	beq.n	1ed14 <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   1ed4c:	4620      	mov	r0, r4
   1ed4e:	f7ff ff89 	bl	1ec64 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   1ed52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1ed56:	429a      	cmp	r2, r3
   1ed58:	d30d      	bcc.n	1ed76 <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   1ed5a:	b103      	cbz	r3, 1ed5e <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   1ed5c:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   1ed5e:	b10e      	cbz	r6, 1ed64 <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   1ed60:	18ea      	adds	r2, r5, r3
   1ed62:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   1ed64:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   1ed68:	2400      	movs	r4, #0
   1ed6a:	e7d4      	b.n	1ed16 <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   1ed6c:	9b01      	ldr	r3, [sp, #4]
   1ed6e:	9a03      	ldr	r2, [sp, #12]
   1ed70:	4413      	add	r3, r2
   1ed72:	6033      	str	r3, [r6, #0]
   1ed74:	e7cf      	b.n	1ed16 <cJSON_ParseWithLengthOpts+0x6a>
   1ed76:	4613      	mov	r3, r2
   1ed78:	e7f1      	b.n	1ed5e <cJSON_ParseWithLengthOpts+0xb2>
   1ed7a:	bf00      	nop
   1ed7c:	2000ed00 	.word	0x2000ed00
   1ed80:	2000c614 	.word	0x2000c614
   1ed84:	0003013e 	.word	0x0003013e

0001ed88 <cJSON_CreateNull>:
{
   1ed88:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1ed8a:	4b04      	ldr	r3, [pc, #16]	; (1ed9c <cJSON_CreateNull+0x14>)
   1ed8c:	6818      	ldr	r0, [r3, #0]
   1ed8e:	f00a fb7a 	bl	29486 <cJSON_New_Item.isra.0>
    if(item)
   1ed92:	b108      	cbz	r0, 1ed98 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   1ed94:	2304      	movs	r3, #4
   1ed96:	60c3      	str	r3, [r0, #12]
}
   1ed98:	bd08      	pop	{r3, pc}
   1ed9a:	bf00      	nop
   1ed9c:	2000c614 	.word	0x2000c614

0001eda0 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   1eda0:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1eda2:	4b0a      	ldr	r3, [pc, #40]	; (1edcc <cJSON_CreateString+0x2c>)
{
   1eda4:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1eda6:	6818      	ldr	r0, [r3, #0]
   1eda8:	f00a fb6d 	bl	29486 <cJSON_New_Item.isra.0>
    if(item)
   1edac:	4604      	mov	r4, r0
   1edae:	b158      	cbz	r0, 1edc8 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   1edb0:	2310      	movs	r3, #16
   1edb2:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   1edb4:	4628      	mov	r0, r5
   1edb6:	f7ff feef 	bl	1eb98 <cJSON_strdup.isra.0.constprop.0>
   1edba:	4605      	mov	r5, r0
   1edbc:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   1edbe:	b918      	cbnz	r0, 1edc8 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   1edc0:	4620      	mov	r0, r4
   1edc2:	f7ff ff4f 	bl	1ec64 <cJSON_Delete>
            return NULL;
   1edc6:	462c      	mov	r4, r5
        }
    }

    return item;
}
   1edc8:	4620      	mov	r0, r4
   1edca:	bd38      	pop	{r3, r4, r5, pc}
   1edcc:	2000c614 	.word	0x2000c614

0001edd0 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   1edd0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1edd2:	4b04      	ldr	r3, [pc, #16]	; (1ede4 <cJSON_CreateArray+0x14>)
   1edd4:	6818      	ldr	r0, [r3, #0]
   1edd6:	f00a fb56 	bl	29486 <cJSON_New_Item.isra.0>
    if(item)
   1edda:	b108      	cbz	r0, 1ede0 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   1eddc:	2320      	movs	r3, #32
   1edde:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   1ede0:	bd08      	pop	{r3, pc}
   1ede2:	bf00      	nop
   1ede4:	2000c614 	.word	0x2000c614

0001ede8 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   1ede8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1edea:	4b04      	ldr	r3, [pc, #16]	; (1edfc <cJSON_CreateObject+0x14>)
   1edec:	6818      	ldr	r0, [r3, #0]
   1edee:	f00a fb4a 	bl	29486 <cJSON_New_Item.isra.0>
    if (item)
   1edf2:	b108      	cbz	r0, 1edf8 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   1edf4:	2340      	movs	r3, #64	; 0x40
   1edf6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   1edf8:	bd08      	pop	{r3, pc}
   1edfa:	bf00      	nop
   1edfc:	2000c614 	.word	0x2000c614

0001ee00 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   1ee00:	4803      	ldr	r0, [pc, #12]	; (1ee10 <cJSON_Init+0x10>)
   1ee02:	4b04      	ldr	r3, [pc, #16]	; (1ee14 <cJSON_Init+0x14>)
   1ee04:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   1ee06:	4b04      	ldr	r3, [pc, #16]	; (1ee18 <cJSON_Init+0x18>)
   1ee08:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   1ee0a:	f7ff bf07 	b.w	1ec1c <cJSON_InitHooks>
   1ee0e:	bf00      	nop
   1ee10:	2000ed08 	.word	0x2000ed08
   1ee14:	0002962d 	.word	0x0002962d
   1ee18:	00029629 	.word	0x00029629

0001ee1c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ee1c:	4a07      	ldr	r2, [pc, #28]	; (1ee3c <SystemInit+0x20>)
   1ee1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ee22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ee26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ee2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ee2e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ee32:	4b03      	ldr	r3, [pc, #12]	; (1ee40 <SystemInit+0x24>)
   1ee34:	4a03      	ldr	r2, [pc, #12]	; (1ee44 <SystemInit+0x28>)
   1ee36:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ee38:	4770      	bx	lr
   1ee3a:	bf00      	nop
   1ee3c:	e000ed00 	.word	0xe000ed00
   1ee40:	2000c620 	.word	0x2000c620
   1ee44:	03d09000 	.word	0x03d09000

0001ee48 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ee48:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ee4a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ee4c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1ee4e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1ee52:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1ee54:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   1ee58:	d010      	beq.n	1ee7c <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ee5a:	fa05 f204 	lsl.w	r2, r5, r4
   1ee5e:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ee62:	e8d0 6fef 	ldaex	r6, [r0]
   1ee66:	429e      	cmp	r6, r3
   1ee68:	d104      	bne.n	1ee74 <nrfx_flag32_alloc+0x2c>
   1ee6a:	e8c0 2fec 	stlex	ip, r2, [r0]
   1ee6e:	f1bc 0f00 	cmp.w	ip, #0
   1ee72:	d1f6      	bne.n	1ee62 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ee74:	d1ea      	bne.n	1ee4c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1ee76:	4802      	ldr	r0, [pc, #8]	; (1ee80 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
   1ee78:	700c      	strb	r4, [r1, #0]
}
   1ee7a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1ee7c:	4801      	ldr	r0, [pc, #4]	; (1ee84 <nrfx_flag32_alloc+0x3c>)
   1ee7e:	e7fc      	b.n	1ee7a <nrfx_flag32_alloc+0x32>
   1ee80:	0bad0000 	.word	0x0bad0000
   1ee84:	0bad0002 	.word	0x0bad0002

0001ee88 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ee88:	6803      	ldr	r3, [r0, #0]
{
   1ee8a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1ee8c:	40cb      	lsrs	r3, r1
   1ee8e:	07db      	lsls	r3, r3, #31
   1ee90:	d411      	bmi.n	1eeb6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ee92:	2301      	movs	r3, #1
   1ee94:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1ee98:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1ee9a:	ea41 0203 	orr.w	r2, r1, r3
   1ee9e:	e8d0 4fef 	ldaex	r4, [r0]
   1eea2:	429c      	cmp	r4, r3
   1eea4:	d104      	bne.n	1eeb0 <nrfx_flag32_free+0x28>
   1eea6:	e8c0 2fec 	stlex	ip, r2, [r0]
   1eeaa:	f1bc 0f00 	cmp.w	ip, #0
   1eeae:	d1f6      	bne.n	1ee9e <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1eeb0:	d1f2      	bne.n	1ee98 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1eeb2:	4802      	ldr	r0, [pc, #8]	; (1eebc <nrfx_flag32_free+0x34>)
}
   1eeb4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1eeb6:	4802      	ldr	r0, [pc, #8]	; (1eec0 <nrfx_flag32_free+0x38>)
   1eeb8:	e7fc      	b.n	1eeb4 <nrfx_flag32_free+0x2c>
   1eeba:	bf00      	nop
   1eebc:	0bad0000 	.word	0x0bad0000
   1eec0:	0bad0004 	.word	0x0bad0004

0001eec4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1eec4:	4b04      	ldr	r3, [pc, #16]	; (1eed8 <nrfx_clock_init+0x14>)
   1eec6:	791a      	ldrb	r2, [r3, #4]
   1eec8:	b922      	cbnz	r2, 1eed4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1eeca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1eecc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1eece:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1eed0:	4802      	ldr	r0, [pc, #8]	; (1eedc <nrfx_clock_init+0x18>)
   1eed2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1eed4:	4802      	ldr	r0, [pc, #8]	; (1eee0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1eed6:	4770      	bx	lr
   1eed8:	2000ed10 	.word	0x2000ed10
   1eedc:	0bad0000 	.word	0x0bad0000
   1eee0:	0bad000c 	.word	0x0bad000c

0001eee4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1eee4:	b110      	cbz	r0, 1eeec <nrfx_clock_start+0x8>
   1eee6:	2801      	cmp	r0, #1
   1eee8:	d01e      	beq.n	1ef28 <nrfx_clock_start+0x44>
   1eeea:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eeec:	4b13      	ldr	r3, [pc, #76]	; (1ef3c <nrfx_clock_start+0x58>)
   1eeee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eef2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1eef6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1eefa:	4619      	mov	r1, r3
   1eefc:	d010      	beq.n	1ef20 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1eefe:	f002 0203 	and.w	r2, r2, #3
   1ef02:	2a02      	cmp	r2, #2
   1ef04:	d10c      	bne.n	1ef20 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ef06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef0a:	2200      	movs	r2, #0
   1ef0c:	4b0c      	ldr	r3, [pc, #48]	; (1ef40 <nrfx_clock_start+0x5c>)
   1ef0e:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1ef10:	2202      	movs	r2, #2
   1ef12:	681b      	ldr	r3, [r3, #0]
   1ef14:	4b09      	ldr	r3, [pc, #36]	; (1ef3c <nrfx_clock_start+0x58>)
   1ef16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef1a:	2201      	movs	r2, #1
   1ef1c:	609a      	str	r2, [r3, #8]
}
   1ef1e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ef20:	2301      	movs	r3, #1
   1ef22:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1ef26:	e7f0      	b.n	1ef0a <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef28:	2200      	movs	r2, #0
   1ef2a:	4b06      	ldr	r3, [pc, #24]	; (1ef44 <nrfx_clock_start+0x60>)
   1ef2c:	601a      	str	r2, [r3, #0]
   1ef2e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1ef30:	4b02      	ldr	r3, [pc, #8]	; (1ef3c <nrfx_clock_start+0x58>)
   1ef32:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef36:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1ef38:	4770      	bx	lr
   1ef3a:	bf00      	nop
   1ef3c:	40005000 	.word	0x40005000
   1ef40:	40005104 	.word	0x40005104
   1ef44:	40005100 	.word	0x40005100

0001ef48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ef48:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1ef4a:	b110      	cbz	r0, 1ef52 <nrfx_clock_stop+0xa>
   1ef4c:	2801      	cmp	r0, #1
   1ef4e:	d016      	beq.n	1ef7e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ef50:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1ef52:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef54:	2101      	movs	r1, #1
   1ef56:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1ef5a:	4c16      	ldr	r4, [pc, #88]	; (1efb4 <nrfx_clock_stop+0x6c>)
   1ef5c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef60:	4a15      	ldr	r2, [pc, #84]	; (1efb8 <nrfx_clock_stop+0x70>)
   1ef62:	6010      	str	r0, [r2, #0]
   1ef64:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef66:	4a15      	ldr	r2, [pc, #84]	; (1efbc <nrfx_clock_stop+0x74>)
   1ef68:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ef6a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1ef6e:	03db      	lsls	r3, r3, #15
   1ef70:	d5ee      	bpl.n	1ef50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1ef72:	2001      	movs	r0, #1
   1ef74:	f00a fb5f 	bl	29636 <nrfx_busy_wait>
   1ef78:	3d01      	subs	r5, #1
   1ef7a:	d1f6      	bne.n	1ef6a <nrfx_clock_stop+0x22>
   1ef7c:	e7e8      	b.n	1ef50 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef7e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef80:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef84:	4b0e      	ldr	r3, [pc, #56]	; (1efc0 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   1ef86:	4c0b      	ldr	r4, [pc, #44]	; (1efb4 <nrfx_clock_stop+0x6c>)
   1ef88:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef8c:	601a      	str	r2, [r3, #0]
   1ef8e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef90:	4b0c      	ldr	r3, [pc, #48]	; (1efc4 <nrfx_clock_stop+0x7c>)
   1ef92:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ef94:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ef98:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ef9c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1efa0:	03d2      	lsls	r2, r2, #15
   1efa2:	d5d5      	bpl.n	1ef50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1efa4:	2b00      	cmp	r3, #0
   1efa6:	d0d3      	beq.n	1ef50 <nrfx_clock_stop+0x8>
   1efa8:	2001      	movs	r0, #1
   1efaa:	f00a fb44 	bl	29636 <nrfx_busy_wait>
   1efae:	3d01      	subs	r5, #1
   1efb0:	d1f0      	bne.n	1ef94 <nrfx_clock_stop+0x4c>
   1efb2:	e7cd      	b.n	1ef50 <nrfx_clock_stop+0x8>
   1efb4:	40005000 	.word	0x40005000
   1efb8:	40005104 	.word	0x40005104
   1efbc:	4000500c 	.word	0x4000500c
   1efc0:	40005100 	.word	0x40005100
   1efc4:	40005004 	.word	0x40005004

0001efc8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1efc8:	4b15      	ldr	r3, [pc, #84]	; (1f020 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1efca:	b510      	push	{r4, lr}
   1efcc:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1efce:	b14a      	cbz	r2, 1efe4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efd0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   1efd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efd4:	6018      	str	r0, [r3, #0]
   1efd6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1efd8:	4b12      	ldr	r3, [pc, #72]	; (1f024 <nrfx_power_clock_irq_handler+0x5c>)
   1efda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1efde:	4b12      	ldr	r3, [pc, #72]	; (1f028 <nrfx_power_clock_irq_handler+0x60>)
   1efe0:	681b      	ldr	r3, [r3, #0]
   1efe2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1efe4:	4b11      	ldr	r3, [pc, #68]	; (1f02c <nrfx_power_clock_irq_handler+0x64>)
   1efe6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1efe8:	b182      	cbz	r2, 1f00c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efea:	2200      	movs	r2, #0
   1efec:	601a      	str	r2, [r3, #0]
   1efee:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eff0:	4b0c      	ldr	r3, [pc, #48]	; (1f024 <nrfx_power_clock_irq_handler+0x5c>)
   1eff2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eff6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1effa:	f002 0203 	and.w	r2, r2, #3
   1effe:	2a01      	cmp	r2, #1
   1f000:	f04f 0102 	mov.w	r1, #2
   1f004:	d103      	bne.n	1f00e <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f006:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f00a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f00c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1f00e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f012:	4b05      	ldr	r3, [pc, #20]	; (1f028 <nrfx_power_clock_irq_handler+0x60>)
   1f014:	2001      	movs	r0, #1
}
   1f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f01a:	681b      	ldr	r3, [r3, #0]
   1f01c:	4718      	bx	r3
   1f01e:	bf00      	nop
   1f020:	40005100 	.word	0x40005100
   1f024:	40005000 	.word	0x40005000
   1f028:	2000ed10 	.word	0x2000ed10
   1f02c:	40005104 	.word	0x40005104

0001f030 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1f030:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1f032:	4801      	ldr	r0, [pc, #4]	; (1f038 <nrfx_dppi_channel_alloc+0x8>)
   1f034:	f7ff bf08 	b.w	1ee48 <nrfx_flag32_alloc>
   1f038:	2000c624 	.word	0x2000c624

0001f03c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f03c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f03e:	4c0d      	ldr	r4, [pc, #52]	; (1f074 <call_handler+0x38>)
   1f040:	f100 0308 	add.w	r3, r0, #8
   1f044:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1f048:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f04a:	05da      	lsls	r2, r3, #23
{
   1f04c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f04e:	d507      	bpl.n	1f060 <call_handler+0x24>
   1f050:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f054:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f058:	6852      	ldr	r2, [r2, #4]
   1f05a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f05e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f060:	68a3      	ldr	r3, [r4, #8]
   1f062:	b12b      	cbz	r3, 1f070 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f064:	4631      	mov	r1, r6
   1f066:	4628      	mov	r0, r5
   1f068:	68e2      	ldr	r2, [r4, #12]
    }
}
   1f06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f06e:	4718      	bx	r3
}
   1f070:	bd70      	pop	{r4, r5, r6, pc}
   1f072:	bf00      	nop
   1f074:	2000c628 	.word	0x2000c628

0001f078 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f078:	4b13      	ldr	r3, [pc, #76]	; (1f0c8 <release_handler+0x50>)
   1f07a:	3008      	adds	r0, #8
   1f07c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
   1f080:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f082:	05d1      	lsls	r1, r2, #23
   1f084:	d51c      	bpl.n	1f0c0 <release_handler+0x48>
   1f086:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f08a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   1f08e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f092:	2000      	movs	r0, #0
   1f094:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f098:	f834 2b02 	ldrh.w	r2, [r4], #2
   1f09c:	f412 7f80 	tst.w	r2, #256	; 0x100
   1f0a0:	d003      	beq.n	1f0aa <release_handler+0x32>
   1f0a2:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1f0a6:	4291      	cmp	r1, r2
   1f0a8:	d00a      	beq.n	1f0c0 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f0aa:	3001      	adds	r0, #1
   1f0ac:	2820      	cmp	r0, #32
   1f0ae:	d1f3      	bne.n	1f098 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f0b0:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f0b2:	4806      	ldr	r0, [pc, #24]	; (1f0cc <release_handler+0x54>)
}
   1f0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
   1f0b8:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f0bc:	f7ff bee4 	b.w	1ee88 <nrfx_flag32_free>
}
   1f0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f0c4:	4770      	bx	lr
   1f0c6:	bf00      	nop
   1f0c8:	2000c628 	.word	0x2000c628
   1f0cc:	2000c67c 	.word	0x2000c67c

0001f0d0 <pin_handler_trigger_uninit>:
{
   1f0d0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f0d2:	4c0c      	ldr	r4, [pc, #48]	; (1f104 <pin_handler_trigger_uninit+0x34>)
   1f0d4:	f100 0508 	add.w	r5, r0, #8
   1f0d8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   1f0dc:	069a      	lsls	r2, r3, #26
   1f0de:	d50a      	bpl.n	1f0f6 <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f0e0:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f0e2:	0b5b      	lsrs	r3, r3, #13
   1f0e4:	009b      	lsls	r3, r3, #2
   1f0e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f0ea:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1f0ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1f0f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
   1f0f6:	f7ff ffbf 	bl	1f078 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f0fa:	2300      	movs	r3, #0
   1f0fc:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f100:	bd38      	pop	{r3, r4, r5, pc}
   1f102:	bf00      	nop
   1f104:	2000c628 	.word	0x2000c628

0001f108 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f108:	4a06      	ldr	r2, [pc, #24]	; (1f124 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   1f10a:	f000 001f 	and.w	r0, r0, #31
   1f10e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f112:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   1f116:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f11a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1f11e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1f122:	4770      	bx	lr
   1f124:	40842500 	.word	0x40842500

0001f128 <nrfx_gpiote_input_configure>:
{
   1f128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f12a:	4604      	mov	r4, r0
    if (p_input_config)
   1f12c:	b1f9      	cbz	r1, 1f16e <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f12e:	4f4c      	ldr	r7, [pc, #304]	; (1f260 <nrfx_gpiote_input_configure+0x138>)
   1f130:	f100 0c08 	add.w	ip, r0, #8
   1f134:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
   1f138:	f000 0522 	and.w	r5, r0, #34	; 0x22
   1f13c:	2d22      	cmp	r5, #34	; 0x22
   1f13e:	d102      	bne.n	1f146 <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
   1f140:	4848      	ldr	r0, [pc, #288]	; (1f264 <nrfx_gpiote_input_configure+0x13c>)
}
   1f142:	b003      	add	sp, #12
   1f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f146:	4d48      	ldr	r5, [pc, #288]	; (1f268 <nrfx_gpiote_input_configure+0x140>)
    *p_pin = pin_number & 0x1F;
   1f148:	f004 061f 	and.w	r6, r4, #31
   1f14c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f150:	f8d6 5200 	ldr.w	r5, [r6, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1f154:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   1f156:	f025 050f 	bic.w	r5, r5, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f15a:	f020 0002 	bic.w	r0, r0, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f15e:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f162:	f040 0001 	orr.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf;
   1f166:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
   1f16a:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    if (p_trigger_config)
   1f16e:	b192      	cbz	r2, 1f196 <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f170:	483b      	ldr	r0, [pc, #236]	; (1f260 <nrfx_gpiote_input_configure+0x138>)
   1f172:	f104 0608 	add.w	r6, r4, #8
   1f176:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f17a:	7815      	ldrb	r5, [r2, #0]
        if (pin_is_output(pin))
   1f17c:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f17e:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
   1f180:	d50c      	bpl.n	1f19c <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
   1f182:	2a00      	cmp	r2, #0
   1f184:	d1dc      	bne.n	1f140 <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f186:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
   1f18a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f18e:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
   1f192:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (p_handler_config)
   1f196:	bbd3      	cbnz	r3, 1f20e <nrfx_gpiote_input_configure+0xe6>
    return NRFX_SUCCESS;
   1f198:	4834      	ldr	r0, [pc, #208]	; (1f26c <nrfx_gpiote_input_configure+0x144>)
   1f19a:	e7d2      	b.n	1f142 <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f19c:	f021 0120 	bic.w	r1, r1, #32
   1f1a0:	04c9      	lsls	r1, r1, #19
   1f1a2:	0cc9      	lsrs	r1, r1, #19
   1f1a4:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
   1f1a8:	2a00      	cmp	r2, #0
   1f1aa:	d0ec      	beq.n	1f186 <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
   1f1ac:	2d03      	cmp	r5, #3
   1f1ae:	d8c7      	bhi.n	1f140 <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f1b0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f1b4:	4662      	mov	r2, ip
   1f1b6:	0092      	lsls	r2, r2, #2
   1f1b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f1bc:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1f1c0:	b925      	cbnz	r5, 1f1cc <nrfx_gpiote_input_configure+0xa4>
    p_reg->CONFIG[idx] = 0;
   1f1c2:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1f1c6:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
#endif
}
   1f1ca:	e7dc      	b.n	1f186 <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f1cc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f1d0:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f1d4:	f027 0703 	bic.w	r7, r7, #3
   1f1d8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f1dc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f1e0:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f1e4:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
   1f1e8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   1f1ec:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f1f0:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f1f4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   1f1f8:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
   1f1fc:	ea47 070e 	orr.w	r7, r7, lr
   1f200:	f041 0120 	orr.w	r1, r1, #32
   1f204:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   1f208:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
   1f20c:	e7bb      	b.n	1f186 <nrfx_gpiote_input_configure+0x5e>
    release_handler(pin);
   1f20e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f210:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
   1f214:	f7ff ff30 	bl	1f078 <release_handler>
    if (!handler)
   1f218:	2e00      	cmp	r6, #0
   1f21a:	d0bd      	beq.n	1f198 <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f21c:	4d10      	ldr	r5, [pc, #64]	; (1f260 <nrfx_gpiote_input_configure+0x138>)
   1f21e:	682b      	ldr	r3, [r5, #0]
   1f220:	429e      	cmp	r6, r3
   1f222:	d104      	bne.n	1f22e <nrfx_gpiote_input_configure+0x106>
   1f224:	686b      	ldr	r3, [r5, #4]
   1f226:	429f      	cmp	r7, r3
   1f228:	d101      	bne.n	1f22e <nrfx_gpiote_input_configure+0x106>
   1f22a:	2200      	movs	r2, #0
   1f22c:	e009      	b.n	1f242 <nrfx_gpiote_input_configure+0x11a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f22e:	4810      	ldr	r0, [pc, #64]	; (1f270 <nrfx_gpiote_input_configure+0x148>)
   1f230:	f10d 0107 	add.w	r1, sp, #7
   1f234:	f7ff fe08 	bl	1ee48 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f238:	4b0c      	ldr	r3, [pc, #48]	; (1f26c <nrfx_gpiote_input_configure+0x144>)
   1f23a:	4298      	cmp	r0, r3
   1f23c:	d181      	bne.n	1f142 <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
   1f23e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   1f242:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f246:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f248:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f24a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1f24e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f252:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f25a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1f25e:	e79b      	b.n	1f198 <nrfx_gpiote_input_configure+0x70>
   1f260:	2000c628 	.word	0x2000c628
   1f264:	0bad0004 	.word	0x0bad0004
   1f268:	40842500 	.word	0x40842500
   1f26c:	0bad0000 	.word	0x0bad0000
   1f270:	2000c67c 	.word	0x2000c67c

0001f274 <nrfx_gpiote_output_configure>:
{
   1f274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
   1f278:	2900      	cmp	r1, #0
   1f27a:	d044      	beq.n	1f306 <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f27c:	4e43      	ldr	r6, [pc, #268]	; (1f38c <nrfx_gpiote_output_configure+0x118>)
   1f27e:	f100 0c08 	add.w	ip, r0, #8
   1f282:	f836 501c 	ldrh.w	r5, [r6, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f286:	07ab      	lsls	r3, r5, #30
   1f288:	d404      	bmi.n	1f294 <nrfx_gpiote_output_configure+0x20>
   1f28a:	06af      	lsls	r7, r5, #26
   1f28c:	d502      	bpl.n	1f294 <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1f28e:	4840      	ldr	r0, [pc, #256]	; (1f390 <nrfx_gpiote_output_configure+0x11c>)
}
   1f290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f294:	f015 0f1c 	tst.w	r5, #28
   1f298:	d002      	beq.n	1f2a0 <nrfx_gpiote_output_configure+0x2c>
   1f29a:	784b      	ldrb	r3, [r1, #1]
   1f29c:	2b01      	cmp	r3, #1
   1f29e:	d0f6      	beq.n	1f28e <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f2a0:	4b3c      	ldr	r3, [pc, #240]	; (1f394 <nrfx_gpiote_output_configure+0x120>)
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1f2a2:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
   1f2a6:	f000 071f 	and.w	r7, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1f2aa:	bf14      	ite	ne
   1f2ac:	2402      	movne	r4, #2
   1f2ae:	2400      	moveq	r4, #0
   1f2b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1f2b4:	1c8b      	adds	r3, r1, #2
   1f2b6:	bf14      	ite	ne
   1f2b8:	f04f 090c 	movne.w	r9, #12
   1f2bc:	f04f 0900 	moveq.w	r9, #0
   1f2c0:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f2c4:	f8d7 8200 	ldr.w	r8, [r7, #512]	; 0x200
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1f2c8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   1f2cc:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
   1f2d0:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1f2d4:	f1be 0f00 	cmp.w	lr, #0
   1f2d8:	d003      	beq.n	1f2e2 <nrfx_gpiote_output_configure+0x6e>
   1f2da:	f891 e001 	ldrb.w	lr, [r1, #1]
   1f2de:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1f2e2:	b10b      	cbz	r3, 1f2e8 <nrfx_gpiote_output_configure+0x74>
   1f2e4:	788c      	ldrb	r4, [r1, #2]
   1f2e6:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1f2e8:	7809      	ldrb	r1, [r1, #0]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f2ea:	f045 0503 	orr.w	r5, r5, #3
   1f2ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1f2f2:	ea43 0308 	orr.w	r3, r3, r8
   1f2f6:	ea43 030e 	orr.w	r3, r3, lr
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f2fa:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1f2fe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
   1f302:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
    if (p_task_config)
   1f306:	b90a      	cbnz	r2, 1f30c <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
   1f308:	4823      	ldr	r0, [pc, #140]	; (1f398 <nrfx_gpiote_output_configure+0x124>)
   1f30a:	e7c1      	b.n	1f290 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f30c:	4d1f      	ldr	r5, [pc, #124]	; (1f38c <nrfx_gpiote_output_configure+0x118>)
   1f30e:	f100 0608 	add.w	r6, r0, #8
   1f312:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
   1f316:	07a3      	lsls	r3, r4, #30
   1f318:	d5b9      	bpl.n	1f28e <nrfx_gpiote_output_configure+0x1a>
    p_reg->CONFIG[idx] = 0;
   1f31a:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
   1f31c:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f31e:	f024 0420 	bic.w	r4, r4, #32
   1f322:	00b9      	lsls	r1, r7, #2
   1f324:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f328:	04e4      	lsls	r4, r4, #19
   1f32a:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1f32e:	0ce4      	lsrs	r4, r4, #19
   1f330:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f334:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f338:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f33c:	f892 c001 	ldrb.w	ip, [r2, #1]
   1f340:	f1bc 0f00 	cmp.w	ip, #0
   1f344:	d0e0      	beq.n	1f308 <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f346:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1f34a:	7892      	ldrb	r2, [r2, #2]
   1f34c:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1f350:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f354:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f358:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f35c:	0203      	lsls	r3, r0, #8
   1f35e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f362:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f366:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f36a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f36e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f370:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f372:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f376:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f37a:	4313      	orrs	r3, r2
   1f37c:	f044 0420 	orr.w	r4, r4, #32
   1f380:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f384:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
   1f388:	e7be      	b.n	1f308 <nrfx_gpiote_output_configure+0x94>
   1f38a:	bf00      	nop
   1f38c:	2000c628 	.word	0x2000c628
   1f390:	0bad0004 	.word	0x0bad0004
   1f394:	40842500 	.word	0x40842500
   1f398:	0bad0000 	.word	0x0bad0000

0001f39c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f39c:	4b01      	ldr	r3, [pc, #4]	; (1f3a4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f39e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f3a2:	4770      	bx	lr
   1f3a4:	2000c628 	.word	0x2000c628

0001f3a8 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f3a8:	4b05      	ldr	r3, [pc, #20]	; (1f3c0 <nrfx_gpiote_channel_get+0x18>)
   1f3aa:	3008      	adds	r0, #8
   1f3ac:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   1f3b0:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f3b2:	bf43      	ittte	mi
   1f3b4:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   1f3b6:	4803      	ldrmi	r0, [pc, #12]	; (1f3c4 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f3b8:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   1f3ba:	4803      	ldrpl	r0, [pc, #12]	; (1f3c8 <nrfx_gpiote_channel_get+0x20>)
}
   1f3bc:	4770      	bx	lr
   1f3be:	bf00      	nop
   1f3c0:	2000c628 	.word	0x2000c628
   1f3c4:	0bad0000 	.word	0x0bad0000
   1f3c8:	0bad0004 	.word	0x0bad0004

0001f3cc <nrfx_gpiote_init>:
{
   1f3cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f3ce:	4c0e      	ldr	r4, [pc, #56]	; (1f408 <nrfx_gpiote_init+0x3c>)
   1f3d0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1f3d4:	b9b5      	cbnz	r5, 1f404 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f3d6:	2240      	movs	r2, #64	; 0x40
   1f3d8:	4629      	mov	r1, r5
   1f3da:	f104 0010 	add.w	r0, r4, #16
   1f3de:	f00b fd53 	bl	2ae88 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f3e2:	2031      	movs	r0, #49	; 0x31
   1f3e4:	f7f6 fb5c 	bl	15aa0 <arch_irq_enable>
    p_reg->INTENSET = mask;
   1f3e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f3ec:	4b07      	ldr	r3, [pc, #28]	; (1f40c <nrfx_gpiote_init+0x40>)
    return err_code;
   1f3ee:	4808      	ldr	r0, [pc, #32]	; (1f410 <nrfx_gpiote_init+0x44>)
   1f3f0:	601d      	str	r5, [r3, #0]
   1f3f2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f3f4:	4b07      	ldr	r3, [pc, #28]	; (1f414 <nrfx_gpiote_init+0x48>)
   1f3f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f3fa:	2301      	movs	r3, #1
   1f3fc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f400:	6563      	str	r3, [r4, #84]	; 0x54
}
   1f402:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f404:	4804      	ldr	r0, [pc, #16]	; (1f418 <nrfx_gpiote_init+0x4c>)
   1f406:	e7fc      	b.n	1f402 <nrfx_gpiote_init+0x36>
   1f408:	2000c628 	.word	0x2000c628
   1f40c:	4003117c 	.word	0x4003117c
   1f410:	0bad0000 	.word	0x0bad0000
   1f414:	40031000 	.word	0x40031000
   1f418:	0bad0005 	.word	0x0bad0005

0001f41c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f41c:	4b03      	ldr	r3, [pc, #12]	; (1f42c <nrfx_gpiote_is_init+0x10>)
   1f41e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1f422:	3800      	subs	r0, #0
   1f424:	bf18      	it	ne
   1f426:	2001      	movne	r0, #1
   1f428:	4770      	bx	lr
   1f42a:	bf00      	nop
   1f42c:	2000c628 	.word	0x2000c628

0001f430 <nrfx_gpiote_channel_free>:
{
   1f430:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f432:	4801      	ldr	r0, [pc, #4]	; (1f438 <nrfx_gpiote_channel_free+0x8>)
   1f434:	f7ff bd28 	b.w	1ee88 <nrfx_flag32_free>
   1f438:	2000c678 	.word	0x2000c678

0001f43c <nrfx_gpiote_channel_alloc>:
{
   1f43c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f43e:	4801      	ldr	r0, [pc, #4]	; (1f444 <nrfx_gpiote_channel_alloc+0x8>)
   1f440:	f7ff bd02 	b.w	1ee48 <nrfx_flag32_alloc>
   1f444:	2000c678 	.word	0x2000c678

0001f448 <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f448:	4b1c      	ldr	r3, [pc, #112]	; (1f4bc <nrfx_gpiote_trigger_enable+0x74>)
   1f44a:	f100 0208 	add.w	r2, r0, #8
   1f44e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1f452:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f454:	069a      	lsls	r2, r3, #26
   1f456:	d51b      	bpl.n	1f490 <nrfx_gpiote_trigger_enable+0x48>
   1f458:	f013 0402 	ands.w	r4, r3, #2
   1f45c:	d118      	bne.n	1f490 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   1f45e:	4818      	ldr	r0, [pc, #96]	; (1f4c0 <nrfx_gpiote_trigger_enable+0x78>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f460:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f462:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f464:	5084      	str	r4, [r0, r2]
   1f466:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f468:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f46c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1f470:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f474:	f040 0001 	orr.w	r0, r0, #1
   1f478:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1f47c:	b129      	cbz	r1, 1f48a <nrfx_gpiote_trigger_enable+0x42>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f47e:	2201      	movs	r2, #1
   1f480:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1f484:	4a0f      	ldr	r2, [pc, #60]	; (1f4c4 <nrfx_gpiote_trigger_enable+0x7c>)
   1f486:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f48a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f48e:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f490:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f494:	2b04      	cmp	r3, #4
   1f496:	d00d      	beq.n	1f4b4 <nrfx_gpiote_trigger_enable+0x6c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f498:	2b05      	cmp	r3, #5
   1f49a:	d00d      	beq.n	1f4b8 <nrfx_gpiote_trigger_enable+0x70>
    return p_reg->IN;
   1f49c:	4b0a      	ldr	r3, [pc, #40]	; (1f4c8 <nrfx_gpiote_trigger_enable+0x80>)
   1f49e:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   1f4a0:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f4a4:	40d9      	lsrs	r1, r3
   1f4a6:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f4aa:	3102      	adds	r1, #2
}
   1f4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f4b0:	f7ff be2a 	b.w	1f108 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f4b4:	2103      	movs	r1, #3
   1f4b6:	e7f9      	b.n	1f4ac <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f4b8:	2102      	movs	r1, #2
   1f4ba:	e7f7      	b.n	1f4ac <nrfx_gpiote_trigger_enable+0x64>
   1f4bc:	2000c628 	.word	0x2000c628
   1f4c0:	40031100 	.word	0x40031100
   1f4c4:	40031000 	.word	0x40031000
   1f4c8:	40842500 	.word	0x40842500

0001f4cc <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f4cc:	4b0e      	ldr	r3, [pc, #56]	; (1f508 <nrfx_gpiote_trigger_disable+0x3c>)
   1f4ce:	f100 0208 	add.w	r2, r0, #8
   1f4d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f4d6:	0699      	lsls	r1, r3, #26
   1f4d8:	d513      	bpl.n	1f502 <nrfx_gpiote_trigger_disable+0x36>
   1f4da:	079a      	lsls	r2, r3, #30
   1f4dc:	d411      	bmi.n	1f502 <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f4de:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f4e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f4e2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1f4e4:	4909      	ldr	r1, [pc, #36]	; (1f50c <nrfx_gpiote_trigger_disable+0x40>)
   1f4e6:	009b      	lsls	r3, r3, #2
   1f4e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f4ec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f4f0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1f4f4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f4f8:	f022 0203 	bic.w	r2, r2, #3
   1f4fc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f500:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f502:	2100      	movs	r1, #0
   1f504:	f7ff be00 	b.w	1f108 <nrf_gpio_cfg_sense_set>
   1f508:	2000c628 	.word	0x2000c628
   1f50c:	40031000 	.word	0x40031000

0001f510 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f510:	4b0c      	ldr	r3, [pc, #48]	; (1f544 <nrfx_gpiote_pin_uninit+0x34>)
   1f512:	f100 0208 	add.w	r2, r0, #8
   1f516:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
   1f51a:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
   1f51c:	07db      	lsls	r3, r3, #31
{
   1f51e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f520:	d50d      	bpl.n	1f53e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   1f522:	f7ff ffd3 	bl	1f4cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f526:	4620      	mov	r0, r4
   1f528:	f7ff fdd2 	bl	1f0d0 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   1f52c:	2202      	movs	r2, #2
   1f52e:	4b06      	ldr	r3, [pc, #24]	; (1f548 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   1f530:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   1f534:	3480      	adds	r4, #128	; 0x80
   1f536:	4805      	ldr	r0, [pc, #20]	; (1f54c <nrfx_gpiote_pin_uninit+0x3c>)
   1f538:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   1f53c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f53e:	4804      	ldr	r0, [pc, #16]	; (1f550 <nrfx_gpiote_pin_uninit+0x40>)
   1f540:	e7fc      	b.n	1f53c <nrfx_gpiote_pin_uninit+0x2c>
   1f542:	bf00      	nop
   1f544:	2000c628 	.word	0x2000c628
   1f548:	40842500 	.word	0x40842500
   1f54c:	0bad0000 	.word	0x0bad0000
   1f550:	0bad0004 	.word	0x0bad0004

0001f554 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1f558:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f55a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f55c:	4634      	mov	r4, r6
{
   1f55e:	4b4b      	ldr	r3, [pc, #300]	; (1f68c <nrfx_gpiote_irq_handler+0x138>)
    return p_reg->INTENSET & mask;
   1f560:	484b      	ldr	r0, [pc, #300]	; (1f690 <nrfx_gpiote_irq_handler+0x13c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f562:	494c      	ldr	r1, [pc, #304]	; (1f694 <nrfx_gpiote_irq_handler+0x140>)
{
   1f564:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f566:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f568:	b135      	cbz	r5, 1f578 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f56a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f56e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f570:	bf1e      	ittt	ne
   1f572:	601c      	strne	r4, [r3, #0]
   1f574:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f576:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   1f578:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f57a:	428b      	cmp	r3, r1
        mask <<= 1;
   1f57c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f580:	d1f1      	bne.n	1f566 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f582:	4f45      	ldr	r7, [pc, #276]	; (1f698 <nrfx_gpiote_irq_handler+0x144>)
   1f584:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f586:	b183      	cbz	r3, 1f5aa <nrfx_gpiote_irq_handler+0x56>
        *p_masks = gpio_regs[i]->LATCH;
   1f588:	4d44      	ldr	r5, [pc, #272]	; (1f69c <nrfx_gpiote_irq_handler+0x148>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f58a:	f10d 080c 	add.w	r8, sp, #12
   1f58e:	6a2b      	ldr	r3, [r5, #32]
   1f590:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1f592:	622b      	str	r3, [r5, #32]
   1f594:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   1f598:	9803      	ldr	r0, [sp, #12]
   1f59a:	b940      	cbnz	r0, 1f5ae <nrfx_gpiote_irq_handler+0x5a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f59c:	6038      	str	r0, [r7, #0]
   1f59e:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
   1f5a0:	6a2b      	ldr	r3, [r5, #32]
   1f5a2:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   1f5a4:	622b      	str	r3, [r5, #32]
        if (latch[port_idx])
   1f5a6:	2b00      	cmp	r3, #0
   1f5a8:	d1f4      	bne.n	1f594 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   1f5aa:	2401      	movs	r4, #1
   1f5ac:	e069      	b.n	1f682 <nrfx_gpiote_irq_handler+0x12e>
                uint32_t pin = NRF_CTZ(latch[i]);
   1f5ae:	fa90 faa0 	rbit	sl, r0
   1f5b2:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5b6:	4a3a      	ldr	r2, [pc, #232]	; (1f6a0 <nrfx_gpiote_irq_handler+0x14c>)
   1f5b8:	f10a 0308 	add.w	r3, sl, #8
   1f5bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f5c0:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
   1f5c4:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f5c8:	fa09 f403 	lsl.w	r4, r9, r3
   1f5cc:	f818 300c 	ldrb.w	r3, [r8, ip]
   1f5d0:	f3c1 0282 	ubfx	r2, r1, #2, #3
   1f5d4:	ea23 0304 	bic.w	r3, r3, r4
   1f5d8:	f808 300c 	strb.w	r3, [r8, ip]
   1f5dc:	eb05 038a 	add.w	r3, r5, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f5e0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
   1f5e4:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5e6:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f5e8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   1f5ec:	d518      	bpl.n	1f620 <nrfx_gpiote_irq_handler+0xcc>
        call_handler(pin, trigger);
   1f5ee:	4611      	mov	r1, r2
   1f5f0:	4650      	mov	r0, sl
   1f5f2:	9301      	str	r3, [sp, #4]
   1f5f4:	f7ff fd22 	bl	1f03c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f5f8:	9b01      	ldr	r3, [sp, #4]
   1f5fa:	b2e4      	uxtb	r4, r4
   1f5fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f600:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f604:	429c      	cmp	r4, r3
   1f606:	d107      	bne.n	1f618 <nrfx_gpiote_irq_handler+0xc4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f608:	2100      	movs	r1, #0
   1f60a:	4650      	mov	r0, sl
   1f60c:	f7ff fd7c 	bl	1f108 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f610:	4621      	mov	r1, r4
   1f612:	4650      	mov	r0, sl
   1f614:	f7ff fd78 	bl	1f108 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   1f618:	fa09 f00a 	lsl.w	r0, r9, sl
   1f61c:	6228      	str	r0, [r5, #32]
}
   1f61e:	e7bb      	b.n	1f598 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f620:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f622:	bf0c      	ite	eq
   1f624:	2103      	moveq	r1, #3
   1f626:	2102      	movne	r1, #2
   1f628:	4650      	mov	r0, sl
   1f62a:	9201      	str	r2, [sp, #4]
   1f62c:	f7ff fd6c 	bl	1f108 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f630:	9a01      	ldr	r2, [sp, #4]
   1f632:	2a03      	cmp	r2, #3
   1f634:	d004      	beq.n	1f640 <nrfx_gpiote_irq_handler+0xec>
   1f636:	2c02      	cmp	r4, #2
   1f638:	d107      	bne.n	1f64a <nrfx_gpiote_irq_handler+0xf6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f63a:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f63e:	d1eb      	bne.n	1f618 <nrfx_gpiote_irq_handler+0xc4>
            call_handler(pin, trigger);
   1f640:	4659      	mov	r1, fp
   1f642:	4650      	mov	r0, sl
   1f644:	f7ff fcfa 	bl	1f03c <call_handler>
   1f648:	e7e6      	b.n	1f618 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f64a:	2c03      	cmp	r4, #3
   1f64c:	d1e4      	bne.n	1f618 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f64e:	f1bb 0f02 	cmp.w	fp, #2
   1f652:	e7f4      	b.n	1f63e <nrfx_gpiote_irq_handler+0xea>
        uint32_t ch = NRF_CTZ(mask);
   1f654:	fa96 f3a6 	rbit	r3, r6
   1f658:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f65c:	fa04 f203 	lsl.w	r2, r4, r3
   1f660:	009b      	lsls	r3, r3, #2
   1f662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f666:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f66a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f66e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f672:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1f676:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1f67a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f67e:	f7ff fcdd 	bl	1f03c <call_handler>
    while (mask)
   1f682:	2e00      	cmp	r6, #0
   1f684:	d1e6      	bne.n	1f654 <nrfx_gpiote_irq_handler+0x100>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f686:	b005      	add	sp, #20
   1f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f68c:	40031100 	.word	0x40031100
   1f690:	40031000 	.word	0x40031000
   1f694:	40031120 	.word	0x40031120
   1f698:	4003117c 	.word	0x4003117c
   1f69c:	40842500 	.word	0x40842500
   1f6a0:	2000c628 	.word	0x2000c628

0001f6a4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1f6a4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f6a6:	4c08      	ldr	r4, [pc, #32]	; (1f6c8 <nrfx_ipc_init+0x24>)
{
   1f6a8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f6aa:	7923      	ldrb	r3, [r4, #4]
{
   1f6ac:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f6ae:	b943      	cbnz	r3, 1f6c2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1f6b0:	202a      	movs	r0, #42	; 0x2a
   1f6b2:	f7f6 f9f5 	bl	15aa0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f6b6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1f6b8:	4804      	ldr	r0, [pc, #16]	; (1f6cc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f6ba:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1f6bc:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1f6be:	60a5      	str	r5, [r4, #8]
}
   1f6c0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f6c2:	4803      	ldr	r0, [pc, #12]	; (1f6d0 <nrfx_ipc_init+0x2c>)
   1f6c4:	e7fc      	b.n	1f6c0 <nrfx_ipc_init+0x1c>
   1f6c6:	bf00      	nop
   1f6c8:	2000ed18 	.word	0x2000ed18
   1f6cc:	0bad0000 	.word	0x0bad0000
   1f6d0:	0bad000c 	.word	0x0bad000c

0001f6d4 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f6d4:	2300      	movs	r3, #0
{
   1f6d6:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   1f6d8:	4a0d      	ldr	r2, [pc, #52]	; (1f710 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1f6da:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f6de:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f6e2:	3301      	adds	r3, #1
   1f6e4:	2b08      	cmp	r3, #8
   1f6e6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1f6ea:	d1f6      	bne.n	1f6da <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f6ec:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f6ee:	4a08      	ldr	r2, [pc, #32]	; (1f710 <nrfx_ipc_config_load+0x3c>)
   1f6f0:	f100 0120 	add.w	r1, r0, #32
   1f6f4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1f6f8:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f6fc:	3301      	adds	r3, #1
   1f6fe:	2b08      	cmp	r3, #8
   1f700:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1f704:	d1f6      	bne.n	1f6f4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1f706:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   1f708:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f70c:	bd30      	pop	{r4, r5, pc}
   1f70e:	bf00      	nop
   1f710:	4002a000 	.word	0x4002a000

0001f714 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   1f714:	2300      	movs	r3, #0
   1f716:	4a14      	ldr	r2, [pc, #80]	; (1f768 <nrfx_ipc_uninit+0x54>)
   1f718:	4914      	ldr	r1, [pc, #80]	; (1f76c <nrfx_ipc_uninit+0x58>)
   1f71a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f71e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1f722:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   1f726:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1f72a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   1f72e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   1f732:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   1f736:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f73a:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   1f73e:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   1f742:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   1f746:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   1f74a:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   1f74e:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   1f752:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   1f756:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   1f75a:	f04f 32ff 	mov.w	r2, #4294967295
   1f75e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1f762:	4a03      	ldr	r2, [pc, #12]	; (1f770 <nrfx_ipc_uninit+0x5c>)
   1f764:	7113      	strb	r3, [r2, #4]
}
   1f766:	4770      	bx	lr
   1f768:	4002a004 	.word	0x4002a004
   1f76c:	4002a000 	.word	0x4002a000
   1f770:	2000ed18 	.word	0x2000ed18

0001f774 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1f774:	2301      	movs	r3, #1
   1f776:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1f77a:	4b02      	ldr	r3, [pc, #8]	; (1f784 <nrfx_ipc_receive_event_enable+0x10>)
   1f77c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
}
   1f780:	4770      	bx	lr
   1f782:	bf00      	nop
   1f784:	4002a000 	.word	0x4002a000

0001f788 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f788:	2301      	movs	r3, #1
   1f78a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENCLR = mask;
   1f78e:	4b02      	ldr	r3, [pc, #8]	; (1f798 <nrfx_ipc_receive_event_disable+0x10>)
   1f790:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   1f794:	4770      	bx	lr
   1f796:	bf00      	nop
   1f798:	4002a000 	.word	0x4002a000

0001f79c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   1f79c:	4b0c      	ldr	r3, [pc, #48]	; (1f7d0 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f79e:	b430      	push	{r4, r5}
   1f7a0:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f7a4:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   1f7a6:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f7a8:	2500      	movs	r5, #0
    while (bitmask)
   1f7aa:	b923      	cbnz	r3, 1f7b6 <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   1f7ac:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1f7ae:	4b09      	ldr	r3, [pc, #36]	; (1f7d4 <nrfx_ipc_irq_handler+0x38>)
   1f7b0:	681a      	ldr	r2, [r3, #0]
   1f7b2:	6899      	ldr	r1, [r3, #8]
   1f7b4:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f7b6:	fa93 f2a3 	rbit	r2, r3
   1f7ba:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
   1f7be:	fa04 f102 	lsl.w	r1, r4, r2
   1f7c2:	ea23 0301 	bic.w	r3, r3, r1
   1f7c6:	4904      	ldr	r1, [pc, #16]	; (1f7d8 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1f7c8:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f7ca:	508d      	str	r5, [r1, r2]
}
   1f7cc:	e7ed      	b.n	1f7aa <nrfx_ipc_irq_handler+0xe>
   1f7ce:	bf00      	nop
   1f7d0:	4002a000 	.word	0x4002a000
   1f7d4:	2000ed18 	.word	0x2000ed18
   1f7d8:	4002a100 	.word	0x4002a100

0001f7dc <nrfx_nvmc_page_erase>:
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1f7dc:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f7e0:	b97b      	cbnz	r3, 1f802 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1f7e2:	2202      	movs	r2, #2
   1f7e4:	4b08      	ldr	r3, [pc, #32]	; (1f808 <nrfx_nvmc_page_erase+0x2c>)
   1f7e6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1f7ea:	f04f 32ff 	mov.w	r2, #4294967295
   1f7ee:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f7f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f7f4:	07d2      	lsls	r2, r2, #31
   1f7f6:	d5fb      	bpl.n	1f7f0 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   1f7f8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f7fa:	4804      	ldr	r0, [pc, #16]	; (1f80c <nrfx_nvmc_page_erase+0x30>)
   1f7fc:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   1f800:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1f802:	4803      	ldr	r0, [pc, #12]	; (1f810 <nrfx_nvmc_page_erase+0x34>)
}
   1f804:	4770      	bx	lr
   1f806:	bf00      	nop
   1f808:	40039000 	.word	0x40039000
   1f80c:	0bad0000 	.word	0x0bad0000
   1f810:	0bad000a 	.word	0x0bad000a

0001f814 <nrfx_nvmc_word_write>:
   1f814:	2201      	movs	r2, #1
   1f816:	4b07      	ldr	r3, [pc, #28]	; (1f834 <nrfx_nvmc_word_write+0x20>)
   1f818:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   1f81c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   1f820:	07d2      	lsls	r2, r2, #31
   1f822:	d5fb      	bpl.n	1f81c <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1f824:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f826:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   1f82a:	2200      	movs	r2, #0
   1f82c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1f830:	4770      	bx	lr
   1f832:	bf00      	nop
   1f834:	40039000 	.word	0x40039000

0001f838 <rpc_handle_data_message>:
   1f838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f83c:	4680      	mov	r8, r0
   1f83e:	4604      	mov	r4, r0
   1f840:	2700      	movs	r7, #0
   1f842:	f858 6b08 	ldr.w	r6, [r8], #8
   1f846:	4d0c      	ldr	r5, [pc, #48]	; (1f878 <rpc_handle_data_message+0x40>)
   1f848:	b2f6      	uxtb	r6, r6
   1f84a:	782b      	ldrb	r3, [r5, #0]
   1f84c:	42b3      	cmp	r3, r6
   1f84e:	d00a      	beq.n	1f866 <rpc_handle_data_message+0x2e>
   1f850:	3701      	adds	r7, #1
   1f852:	2f04      	cmp	r7, #4
   1f854:	f105 050c 	add.w	r5, r5, #12
   1f858:	d1f7      	bne.n	1f84a <rpc_handle_data_message+0x12>
   1f85a:	68a0      	ldr	r0, [r4, #8]
   1f85c:	b150      	cbz	r0, 1f874 <rpc_handle_data_message+0x3c>
   1f85e:	f009 ff44 	bl	296ea <rpc_transport_peer_data_free>
   1f862:	2000      	movs	r0, #0
   1f864:	e006      	b.n	1f874 <rpc_handle_data_message+0x3c>
   1f866:	6821      	ldr	r1, [r4, #0]
   1f868:	4640      	mov	r0, r8
   1f86a:	686b      	ldr	r3, [r5, #4]
   1f86c:	0c09      	lsrs	r1, r1, #16
   1f86e:	4798      	blx	r3
   1f870:	2802      	cmp	r0, #2
   1f872:	d0ed      	beq.n	1f850 <rpc_handle_data_message+0x18>
   1f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f878:	0002cab4 	.word	0x0002cab4

0001f87c <trace_write>:
   1f87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f880:	4f53      	ldr	r7, [pc, #332]	; (1f9d0 <trace_write+0x154>)
   1f882:	4605      	mov	r5, r0
   1f884:	2100      	movs	r1, #0
   1f886:	6838      	ldr	r0, [r7, #0]
   1f888:	f008 fff1 	bl	2886e <nrf_modem_os_sem_take>
   1f88c:	4604      	mov	r4, r0
   1f88e:	2800      	cmp	r0, #0
   1f890:	d14c      	bne.n	1f92c <trace_write+0xb0>
   1f892:	782b      	ldrb	r3, [r5, #0]
   1f894:	f8d5 8008 	ldr.w	r8, [r5, #8]
   1f898:	2b62      	cmp	r3, #98	; 0x62
   1f89a:	d043      	beq.n	1f924 <trace_write+0xa8>
   1f89c:	2b63      	cmp	r3, #99	; 0x63
   1f89e:	d043      	beq.n	1f928 <trace_write+0xac>
   1f8a0:	2b61      	cmp	r3, #97	; 0x61
   1f8a2:	d102      	bne.n	1f8aa <trace_write+0x2e>
   1f8a4:	4b4b      	ldr	r3, [pc, #300]	; (1f9d4 <trace_write+0x158>)
   1f8a6:	881c      	ldrh	r4, [r3, #0]
   1f8a8:	b2a4      	uxth	r4, r4
   1f8aa:	6838      	ldr	r0, [r7, #0]
   1f8ac:	f008 ffdd 	bl	2886a <nrf_modem_os_sem_give>
   1f8b0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   1f8b4:	6929      	ldr	r1, [r5, #16]
   1f8b6:	eba8 080a 	sub.w	r8, r8, sl
   1f8ba:	eba1 030a 	sub.w	r3, r1, sl
   1f8be:	b29b      	uxth	r3, r3
   1f8c0:	fa14 f488 	uxtah	r4, r4, r8
   1f8c4:	fbb4 f2f3 	udiv	r2, r4, r3
   1f8c8:	fb03 4412 	mls	r4, r3, r2, r4
   1f8cc:	686a      	ldr	r2, [r5, #4]
   1f8ce:	eba2 020a 	sub.w	r2, r2, sl
   1f8d2:	fa13 f282 	uxtah	r2, r3, r2
   1f8d6:	1b12      	subs	r2, r2, r4
   1f8d8:	fb92 f0f3 	sdiv	r0, r2, r3
   1f8dc:	fb03 2210 	mls	r2, r3, r0, r2
   1f8e0:	fa1f f982 	uxth.w	r9, r2
   1f8e4:	fa14 f282 	uxtah	r2, r4, r2
   1f8e8:	4293      	cmp	r3, r2
   1f8ea:	44a2      	add	sl, r4
   1f8ec:	da22      	bge.n	1f934 <trace_write+0xb8>
   1f8ee:	eba1 030a 	sub.w	r3, r1, sl
   1f8f2:	b29b      	uxth	r3, r3
   1f8f4:	eba9 0403 	sub.w	r4, r9, r3
   1f8f8:	4699      	mov	r9, r3
   1f8fa:	b2a4      	uxth	r4, r4
   1f8fc:	f1b9 0f00 	cmp.w	r9, #0
   1f900:	d064      	beq.n	1f9cc <trace_write+0x150>
   1f902:	2005      	movs	r0, #5
   1f904:	f7f8 fa12 	bl	17d2c <nrf_modem_os_alloc>
   1f908:	4680      	mov	r8, r0
   1f90a:	2800      	cmp	r0, #0
   1f90c:	d05e      	beq.n	1f9cc <trace_write+0x150>
   1f90e:	b19c      	cbz	r4, 1f938 <trace_write+0xbc>
   1f910:	2005      	movs	r0, #5
   1f912:	f7f8 fa0b 	bl	17d2c <nrf_modem_os_alloc>
   1f916:	4606      	mov	r6, r0
   1f918:	b970      	cbnz	r0, 1f938 <trace_write+0xbc>
   1f91a:	4640      	mov	r0, r8
   1f91c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f920:	f7f8 ba0c 	b.w	17d3c <nrf_modem_os_free>
   1f924:	4b2c      	ldr	r3, [pc, #176]	; (1f9d8 <trace_write+0x15c>)
   1f926:	e7be      	b.n	1f8a6 <trace_write+0x2a>
   1f928:	4b2c      	ldr	r3, [pc, #176]	; (1f9dc <trace_write+0x160>)
   1f92a:	e7bc      	b.n	1f8a6 <trace_write+0x2a>
   1f92c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f930:	f7f8 b9ec 	b.w	17d0c <nrf_modem_os_trace_irq_set>
   1f934:	2400      	movs	r4, #0
   1f936:	e7e1      	b.n	1f8fc <trace_write+0x80>
   1f938:	2100      	movs	r1, #0
   1f93a:	6838      	ldr	r0, [r7, #0]
   1f93c:	f008 ff97 	bl	2886e <nrf_modem_os_sem_take>
   1f940:	b140      	cbz	r0, 1f954 <trace_write+0xd8>
   1f942:	f7f8 f9e3 	bl	17d0c <nrf_modem_os_trace_irq_set>
   1f946:	4640      	mov	r0, r8
   1f948:	f7f8 f9f8 	bl	17d3c <nrf_modem_os_free>
   1f94c:	2c00      	cmp	r4, #0
   1f94e:	d03d      	beq.n	1f9cc <trace_write+0x150>
   1f950:	4630      	mov	r0, r6
   1f952:	e7e3      	b.n	1f91c <trace_write+0xa0>
   1f954:	782b      	ldrb	r3, [r5, #0]
   1f956:	2b62      	cmp	r3, #98	; 0x62
   1f958:	d034      	beq.n	1f9c4 <trace_write+0x148>
   1f95a:	2b63      	cmp	r3, #99	; 0x63
   1f95c:	d034      	beq.n	1f9c8 <trace_write+0x14c>
   1f95e:	2b61      	cmp	r3, #97	; 0x61
   1f960:	d107      	bne.n	1f972 <trace_write+0xf6>
   1f962:	4a1c      	ldr	r2, [pc, #112]	; (1f9d4 <trace_write+0x158>)
   1f964:	8813      	ldrh	r3, [r2, #0]
   1f966:	eb04 0109 	add.w	r1, r4, r9
   1f96a:	fa11 f383 	uxtah	r3, r1, r3
   1f96e:	b29b      	uxth	r3, r3
   1f970:	8013      	strh	r3, [r2, #0]
   1f972:	6838      	ldr	r0, [r7, #0]
   1f974:	f06f 0b10 	mvn.w	fp, #16
   1f978:	f06f 0741 	mvn.w	r7, #65	; 0x41
   1f97c:	f008 ff75 	bl	2886a <nrf_modem_os_sem_give>
   1f980:	f888 b000 	strb.w	fp, [r8]
   1f984:	f888 7001 	strb.w	r7, [r8, #1]
   1f988:	782b      	ldrb	r3, [r5, #0]
   1f98a:	2105      	movs	r1, #5
   1f98c:	4640      	mov	r0, r8
   1f98e:	f888 3004 	strb.w	r3, [r8, #4]
   1f992:	f8a8 9002 	strh.w	r9, [r8, #2]
   1f996:	f008 ff98 	bl	288ca <nrf_modem_os_trace_put>
   1f99a:	4649      	mov	r1, r9
   1f99c:	4650      	mov	r0, sl
   1f99e:	f008 ff94 	bl	288ca <nrf_modem_os_trace_put>
   1f9a2:	b19c      	cbz	r4, 1f9cc <trace_write+0x150>
   1f9a4:	f886 b000 	strb.w	fp, [r6]
   1f9a8:	7077      	strb	r7, [r6, #1]
   1f9aa:	782b      	ldrb	r3, [r5, #0]
   1f9ac:	2105      	movs	r1, #5
   1f9ae:	4630      	mov	r0, r6
   1f9b0:	7133      	strb	r3, [r6, #4]
   1f9b2:	8074      	strh	r4, [r6, #2]
   1f9b4:	f008 ff89 	bl	288ca <nrf_modem_os_trace_put>
   1f9b8:	4621      	mov	r1, r4
   1f9ba:	68e8      	ldr	r0, [r5, #12]
   1f9bc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9c0:	f008 bf83 	b.w	288ca <nrf_modem_os_trace_put>
   1f9c4:	4a04      	ldr	r2, [pc, #16]	; (1f9d8 <trace_write+0x15c>)
   1f9c6:	e7cd      	b.n	1f964 <trace_write+0xe8>
   1f9c8:	4a04      	ldr	r2, [pc, #16]	; (1f9dc <trace_write+0x160>)
   1f9ca:	e7cb      	b.n	1f964 <trace_write+0xe8>
   1f9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9d0:	2000ed34 	.word	0x2000ed34
   1f9d4:	2000efc0 	.word	0x2000efc0
   1f9d8:	2000efbc 	.word	0x2000efbc
   1f9dc:	2000efbe 	.word	0x2000efbe

0001f9e0 <ipc_trace_init>:
   1f9e0:	2300      	movs	r3, #0
   1f9e2:	4a08      	ldr	r2, [pc, #32]	; (1fa04 <ipc_trace_init+0x24>)
   1f9e4:	b510      	push	{r4, lr}
   1f9e6:	8013      	strh	r3, [r2, #0]
   1f9e8:	4a07      	ldr	r2, [pc, #28]	; (1fa08 <ipc_trace_init+0x28>)
   1f9ea:	4604      	mov	r4, r0
   1f9ec:	8013      	strh	r3, [r2, #0]
   1f9ee:	4a07      	ldr	r2, [pc, #28]	; (1fa0c <ipc_trace_init+0x2c>)
   1f9f0:	4807      	ldr	r0, [pc, #28]	; (1fa10 <ipc_trace_init+0x30>)
   1f9f2:	8013      	strh	r3, [r2, #0]
   1f9f4:	2201      	movs	r2, #1
   1f9f6:	4611      	mov	r1, r2
   1f9f8:	f7f8 f95c 	bl	17cb4 <nrf_modem_os_sem_init>
   1f9fc:	4b05      	ldr	r3, [pc, #20]	; (1fa14 <ipc_trace_init+0x34>)
   1f9fe:	601c      	str	r4, [r3, #0]
   1fa00:	bd10      	pop	{r4, pc}
   1fa02:	bf00      	nop
   1fa04:	2000efc0 	.word	0x2000efc0
   1fa08:	2000efbc 	.word	0x2000efbc
   1fa0c:	2000efbe 	.word	0x2000efbe
   1fa10:	2000ed34 	.word	0x2000ed34
   1fa14:	2000ed30 	.word	0x2000ed30

0001fa18 <nrf_modem_trace_irq_handler>:
   1fa18:	b508      	push	{r3, lr}
   1fa1a:	4b10      	ldr	r3, [pc, #64]	; (1fa5c <nrf_modem_trace_irq_handler+0x44>)
   1fa1c:	781b      	ldrb	r3, [r3, #0]
   1fa1e:	b90b      	cbnz	r3, 1fa24 <nrf_modem_trace_irq_handler+0xc>
   1fa20:	f7f8 f97c 	bl	17d1c <nrf_modem_os_trace_irq_clear>
   1fa24:	4b0e      	ldr	r3, [pc, #56]	; (1fa60 <nrf_modem_trace_irq_handler+0x48>)
   1fa26:	6818      	ldr	r0, [r3, #0]
   1fa28:	6842      	ldr	r2, [r0, #4]
   1fa2a:	6883      	ldr	r3, [r0, #8]
   1fa2c:	429a      	cmp	r2, r3
   1fa2e:	d001      	beq.n	1fa34 <nrf_modem_trace_irq_handler+0x1c>
   1fa30:	f7ff ff24 	bl	1f87c <trace_write>
   1fa34:	4b0b      	ldr	r3, [pc, #44]	; (1fa64 <nrf_modem_trace_irq_handler+0x4c>)
   1fa36:	6818      	ldr	r0, [r3, #0]
   1fa38:	6882      	ldr	r2, [r0, #8]
   1fa3a:	6843      	ldr	r3, [r0, #4]
   1fa3c:	429a      	cmp	r2, r3
   1fa3e:	d001      	beq.n	1fa44 <nrf_modem_trace_irq_handler+0x2c>
   1fa40:	f7ff ff1c 	bl	1f87c <trace_write>
   1fa44:	4b08      	ldr	r3, [pc, #32]	; (1fa68 <nrf_modem_trace_irq_handler+0x50>)
   1fa46:	6818      	ldr	r0, [r3, #0]
   1fa48:	6882      	ldr	r2, [r0, #8]
   1fa4a:	6843      	ldr	r3, [r0, #4]
   1fa4c:	429a      	cmp	r2, r3
   1fa4e:	d003      	beq.n	1fa58 <nrf_modem_trace_irq_handler+0x40>
   1fa50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fa54:	f7ff bf12 	b.w	1f87c <trace_write>
   1fa58:	bd08      	pop	{r3, pc}
   1fa5a:	bf00      	nop
   1fa5c:	2000f25f 	.word	0x2000f25f
   1fa60:	2000ed2c 	.word	0x2000ed2c
   1fa64:	2000ed24 	.word	0x2000ed24
   1fa68:	2000ed28 	.word	0x2000ed28

0001fa6c <ipc_trace_handle>:
   1fa6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa70:	4b43      	ldr	r3, [pc, #268]	; (1fb80 <ipc_trace_handle+0x114>)
   1fa72:	681b      	ldr	r3, [r3, #0]
   1fa74:	6919      	ldr	r1, [r3, #16]
   1fa76:	f8d3 a014 	ldr.w	sl, [r3, #20]
   1fa7a:	7c1a      	ldrb	r2, [r3, #16]
   1fa7c:	2200      	movs	r2, #0
   1fa7e:	741a      	strb	r2, [r3, #16]
   1fa80:	7c58      	ldrb	r0, [r3, #17]
   1fa82:	745a      	strb	r2, [r3, #17]
   1fa84:	7c98      	ldrb	r0, [r3, #18]
   1fa86:	749a      	strb	r2, [r3, #18]
   1fa88:	7cd8      	ldrb	r0, [r3, #19]
   1fa8a:	74da      	strb	r2, [r3, #19]
   1fa8c:	7d18      	ldrb	r0, [r3, #20]
   1fa8e:	751a      	strb	r2, [r3, #20]
   1fa90:	7d58      	ldrb	r0, [r3, #21]
   1fa92:	755a      	strb	r2, [r3, #21]
   1fa94:	7d98      	ldrb	r0, [r3, #22]
   1fa96:	759a      	strb	r2, [r3, #22]
   1fa98:	7dd8      	ldrb	r0, [r3, #23]
   1fa9a:	75da      	strb	r2, [r3, #23]
   1fa9c:	2900      	cmp	r1, #0
   1fa9e:	d033      	beq.n	1fb08 <ipc_trace_handle+0x9c>
   1faa0:	3901      	subs	r1, #1
   1faa2:	2903      	cmp	r1, #3
   1faa4:	d830      	bhi.n	1fb08 <ipc_trace_handle+0x9c>
   1faa6:	e8df f001 	tbb	[pc, r1]
   1faaa:	6502      	.short	0x6502
   1faac:	534c      	.short	0x534c
   1faae:	4a35      	ldr	r2, [pc, #212]	; (1fb84 <ipc_trace_handle+0x118>)
   1fab0:	7811      	ldrb	r1, [r2, #0]
   1fab2:	b109      	cbz	r1, 1fab8 <ipc_trace_handle+0x4c>
   1fab4:	2100      	movs	r1, #0
   1fab6:	7011      	strb	r1, [r2, #0]
   1fab8:	2200      	movs	r2, #0
   1faba:	4691      	mov	r9, r2
   1fabc:	4617      	mov	r7, r2
   1fabe:	4614      	mov	r4, r2
   1fac0:	4d31      	ldr	r5, [pc, #196]	; (1fb88 <ipc_trace_handle+0x11c>)
   1fac2:	4932      	ldr	r1, [pc, #200]	; (1fb8c <ipc_trace_handle+0x120>)
   1fac4:	4832      	ldr	r0, [pc, #200]	; (1fb90 <ipc_trace_handle+0x124>)
   1fac6:	f8d5 e000 	ldr.w	lr, [r5]
   1faca:	f8d1 8000 	ldr.w	r8, [r1]
   1face:	6806      	ldr	r6, [r0, #0]
   1fad0:	f8da b008 	ldr.w	fp, [sl, #8]
   1fad4:	9501      	str	r5, [sp, #4]
   1fad6:	45a3      	cmp	fp, r4
   1fad8:	d119      	bne.n	1fb0e <ipc_trace_handle+0xa2>
   1fada:	b107      	cbz	r7, 1fade <ipc_trace_handle+0x72>
   1fadc:	6006      	str	r6, [r0, #0]
   1fade:	f1b9 0f00 	cmp.w	r9, #0
   1fae2:	d001      	beq.n	1fae8 <ipc_trace_handle+0x7c>
   1fae4:	f8c1 8000 	str.w	r8, [r1]
   1fae8:	b112      	cbz	r2, 1faf0 <ipc_trace_handle+0x84>
   1faea:	9a01      	ldr	r2, [sp, #4]
   1faec:	f8c2 e000 	str.w	lr, [r2]
   1faf0:	7a1a      	ldrb	r2, [r3, #8]
   1faf2:	2101      	movs	r1, #1
   1faf4:	2200      	movs	r2, #0
   1faf6:	7219      	strb	r1, [r3, #8]
   1faf8:	7a59      	ldrb	r1, [r3, #9]
   1fafa:	725a      	strb	r2, [r3, #9]
   1fafc:	7a99      	ldrb	r1, [r3, #10]
   1fafe:	729a      	strb	r2, [r3, #10]
   1fb00:	7ada      	ldrb	r2, [r3, #11]
   1fb02:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1fb06:	72da      	strb	r2, [r3, #11]
   1fb08:	b003      	add	sp, #12
   1fb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb0e:	1ca5      	adds	r5, r4, #2
   1fb10:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   1fb14:	686d      	ldr	r5, [r5, #4]
   1fb16:	f895 c000 	ldrb.w	ip, [r5]
   1fb1a:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   1fb1e:	d009      	beq.n	1fb34 <ipc_trace_handle+0xc8>
   1fb20:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   1fb24:	d00a      	beq.n	1fb3c <ipc_trace_handle+0xd0>
   1fb26:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   1fb2a:	bf04      	itt	eq
   1fb2c:	462e      	moveq	r6, r5
   1fb2e:	2701      	moveq	r7, #1
   1fb30:	3401      	adds	r4, #1
   1fb32:	e7d0      	b.n	1fad6 <ipc_trace_handle+0x6a>
   1fb34:	46a8      	mov	r8, r5
   1fb36:	f04f 0901 	mov.w	r9, #1
   1fb3a:	e7f9      	b.n	1fb30 <ipc_trace_handle+0xc4>
   1fb3c:	46ae      	mov	lr, r5
   1fb3e:	2201      	movs	r2, #1
   1fb40:	e7f6      	b.n	1fb30 <ipc_trace_handle+0xc4>
   1fb42:	2101      	movs	r1, #1
   1fb44:	4a0f      	ldr	r2, [pc, #60]	; (1fb84 <ipc_trace_handle+0x118>)
   1fb46:	7011      	strb	r1, [r2, #0]
   1fb48:	7a1a      	ldrb	r2, [r3, #8]
   1fb4a:	2103      	movs	r1, #3
   1fb4c:	2200      	movs	r2, #0
   1fb4e:	e7d2      	b.n	1faf6 <ipc_trace_handle+0x8a>
   1fb50:	7a19      	ldrb	r1, [r3, #8]
   1fb52:	2104      	movs	r1, #4
   1fb54:	7219      	strb	r1, [r3, #8]
   1fb56:	7a59      	ldrb	r1, [r3, #9]
   1fb58:	725a      	strb	r2, [r3, #9]
   1fb5a:	7a99      	ldrb	r1, [r3, #10]
   1fb5c:	729a      	strb	r2, [r3, #10]
   1fb5e:	7ad9      	ldrb	r1, [r3, #11]
   1fb60:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1fb64:	72d9      	strb	r1, [r3, #11]
   1fb66:	4b07      	ldr	r3, [pc, #28]	; (1fb84 <ipc_trace_handle+0x118>)
   1fb68:	701a      	strb	r2, [r3, #0]
   1fb6a:	b003      	add	sp, #12
   1fb6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb70:	f7ff bf52 	b.w	1fa18 <nrf_modem_trace_irq_handler>
   1fb74:	b003      	add	sp, #12
   1fb76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb7a:	f7f8 b8c7 	b.w	17d0c <nrf_modem_os_trace_irq_set>
   1fb7e:	bf00      	nop
   1fb80:	2000ed30 	.word	0x2000ed30
   1fb84:	2000f25f 	.word	0x2000f25f
   1fb88:	2000ed28 	.word	0x2000ed28
   1fb8c:	2000ed24 	.word	0x2000ed24
   1fb90:	2000ed2c 	.word	0x2000ed2c

0001fb94 <rpc_trace_coredump_in_progress>:
   1fb94:	4b01      	ldr	r3, [pc, #4]	; (1fb9c <rpc_trace_coredump_in_progress+0x8>)
   1fb96:	7818      	ldrb	r0, [r3, #0]
   1fb98:	4770      	bx	lr
   1fb9a:	bf00      	nop
   1fb9c:	2000f25f 	.word	0x2000f25f

0001fba0 <handle_modem_rpc_msg>:
   1fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fba4:	4606      	mov	r6, r0
   1fba6:	460f      	mov	r7, r1
   1fba8:	2500      	movs	r5, #0
   1fbaa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1fc20 <handle_modem_rpc_msg+0x80>
   1fbae:	6833      	ldr	r3, [r6, #0]
   1fbb0:	42ab      	cmp	r3, r5
   1fbb2:	d801      	bhi.n	1fbb8 <handle_modem_rpc_msg+0x18>
   1fbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fbb8:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   1fbbc:	68a3      	ldr	r3, [r4, #8]
   1fbbe:	b1fb      	cbz	r3, 1fc00 <handle_modem_rpc_msg+0x60>
   1fbc0:	6863      	ldr	r3, [r4, #4]
   1fbc2:	b2db      	uxtb	r3, r3
   1fbc4:	2b01      	cmp	r3, #1
   1fbc6:	d11b      	bne.n	1fc00 <handle_modem_rpc_msg+0x60>
   1fbc8:	6862      	ldr	r2, [r4, #4]
   1fbca:	f8b8 3000 	ldrh.w	r3, [r8]
   1fbce:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1fbd2:	d115      	bne.n	1fc00 <handle_modem_rpc_msg+0x60>
   1fbd4:	2f02      	cmp	r7, #2
   1fbd6:	68a0      	ldr	r0, [r4, #8]
   1fbd8:	d114      	bne.n	1fc04 <handle_modem_rpc_msg+0x64>
   1fbda:	f7ff fe2d 	bl	1f838 <rpc_handle_data_message>
   1fbde:	2802      	cmp	r0, #2
   1fbe0:	d00e      	beq.n	1fc00 <handle_modem_rpc_msg+0x60>
   1fbe2:	2801      	cmp	r0, #1
   1fbe4:	d113      	bne.n	1fc0e <handle_modem_rpc_msg+0x6e>
   1fbe6:	6863      	ldr	r3, [r4, #4]
   1fbe8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1fbec:	f043 0302 	orr.w	r3, r3, #2
   1fbf0:	6063      	str	r3, [r4, #4]
   1fbf2:	f8b8 3000 	ldrh.w	r3, [r8]
   1fbf6:	3301      	adds	r3, #1
   1fbf8:	f8a8 3000 	strh.w	r3, [r8]
   1fbfc:	f7f8 f876 	bl	17cec <nrf_modem_os_application_irq_set>
   1fc00:	3501      	adds	r5, #1
   1fc02:	e7d4      	b.n	1fbae <handle_modem_rpc_msg+0xe>
   1fc04:	6801      	ldr	r1, [r0, #0]
   1fc06:	0c09      	lsrs	r1, r1, #16
   1fc08:	f009 fd2b 	bl	29662 <rpc_handle_ctrl_message>
   1fc0c:	e7e7      	b.n	1fbde <handle_modem_rpc_msg+0x3e>
   1fc0e:	2800      	cmp	r0, #0
   1fc10:	d1ef      	bne.n	1fbf2 <handle_modem_rpc_msg+0x52>
   1fc12:	6863      	ldr	r3, [r4, #4]
   1fc14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1fc18:	f043 0303 	orr.w	r3, r3, #3
   1fc1c:	e7e8      	b.n	1fbf0 <handle_modem_rpc_msg+0x50>
   1fc1e:	bf00      	nop
   1fc20:	2000efc2 	.word	0x2000efc2

0001fc24 <rpc_transport_ipc_msg_alloc>:
   1fc24:	b570      	push	{r4, r5, r6, lr}
   1fc26:	4616      	mov	r6, r2
   1fc28:	2400      	movs	r4, #0
   1fc2a:	6803      	ldr	r3, [r0, #0]
   1fc2c:	42a3      	cmp	r3, r4
   1fc2e:	d101      	bne.n	1fc34 <rpc_transport_ipc_msg_alloc+0x10>
   1fc30:	2300      	movs	r3, #0
   1fc32:	e01c      	b.n	1fc6e <rpc_transport_ipc_msg_alloc+0x4a>
   1fc34:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   1fc38:	6855      	ldr	r5, [r2, #4]
   1fc3a:	b2ed      	uxtb	r5, r5
   1fc3c:	2d03      	cmp	r5, #3
   1fc3e:	d118      	bne.n	1fc72 <rpc_transport_ipc_msg_alloc+0x4e>
   1fc40:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   1fc44:	6093      	str	r3, [r2, #8]
   1fc46:	6851      	ldr	r1, [r2, #4]
   1fc48:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1fc4c:	6051      	str	r1, [r2, #4]
   1fc4e:	490c      	ldr	r1, [pc, #48]	; (1fc80 <rpc_transport_ipc_msg_alloc+0x5c>)
   1fc50:	8808      	ldrh	r0, [r1, #0]
   1fc52:	1c44      	adds	r4, r0, #1
   1fc54:	800c      	strh	r4, [r1, #0]
   1fc56:	6851      	ldr	r1, [r2, #4]
   1fc58:	b289      	uxth	r1, r1
   1fc5a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1fc5e:	6051      	str	r1, [r2, #4]
   1fc60:	4618      	mov	r0, r3
   1fc62:	2240      	movs	r2, #64	; 0x40
   1fc64:	2100      	movs	r1, #0
   1fc66:	f00b f90f 	bl	2ae88 <memset>
   1fc6a:	4603      	mov	r3, r0
   1fc6c:	6046      	str	r6, [r0, #4]
   1fc6e:	4618      	mov	r0, r3
   1fc70:	bd70      	pop	{r4, r5, r6, pc}
   1fc72:	b915      	cbnz	r5, 1fc7a <rpc_transport_ipc_msg_alloc+0x56>
   1fc74:	6895      	ldr	r5, [r2, #8]
   1fc76:	2d00      	cmp	r5, #0
   1fc78:	d0e2      	beq.n	1fc40 <rpc_transport_ipc_msg_alloc+0x1c>
   1fc7a:	3401      	adds	r4, #1
   1fc7c:	e7d6      	b.n	1fc2c <rpc_transport_ipc_msg_alloc+0x8>
   1fc7e:	bf00      	nop
   1fc80:	2000efc4 	.word	0x2000efc4

0001fc84 <rpc_transport_ipc_data_msg_send>:
   1fc84:	b508      	push	{r3, lr}
   1fc86:	4b0b      	ldr	r3, [pc, #44]	; (1fcb4 <rpc_transport_ipc_data_msg_send+0x30>)
   1fc88:	681b      	ldr	r3, [r3, #0]
   1fc8a:	1ac0      	subs	r0, r0, r3
   1fc8c:	4b0a      	ldr	r3, [pc, #40]	; (1fcb8 <rpc_transport_ipc_data_msg_send+0x34>)
   1fc8e:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1fc92:	681b      	ldr	r3, [r3, #0]
   1fc94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fc98:	6843      	ldr	r3, [r0, #4]
   1fc9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1fc9e:	f043 0301 	orr.w	r3, r3, #1
   1fca2:	6043      	str	r3, [r0, #4]
   1fca4:	2003      	movs	r0, #3
   1fca6:	f008 fdd6 	bl	28856 <nrf_modem_os_busywait>
   1fcaa:	2201      	movs	r2, #1
   1fcac:	4b03      	ldr	r3, [pc, #12]	; (1fcbc <rpc_transport_ipc_data_msg_send+0x38>)
   1fcae:	601a      	str	r2, [r3, #0]
   1fcb0:	bd08      	pop	{r3, pc}
   1fcb2:	bf00      	nop
   1fcb4:	2000ed50 	.word	0x2000ed50
   1fcb8:	2000ed54 	.word	0x2000ed54
   1fcbc:	4002a00c 	.word	0x4002a00c

0001fcc0 <rpc_transport_ipc_ctrl_msg_send>:
   1fcc0:	b508      	push	{r3, lr}
   1fcc2:	4b0b      	ldr	r3, [pc, #44]	; (1fcf0 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   1fcc4:	681b      	ldr	r3, [r3, #0]
   1fcc6:	1ac0      	subs	r0, r0, r3
   1fcc8:	4b0a      	ldr	r3, [pc, #40]	; (1fcf4 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   1fcca:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1fcce:	681b      	ldr	r3, [r3, #0]
   1fcd0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fcd4:	6843      	ldr	r3, [r0, #4]
   1fcd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1fcda:	f043 0301 	orr.w	r3, r3, #1
   1fcde:	6043      	str	r3, [r0, #4]
   1fce0:	2003      	movs	r0, #3
   1fce2:	f008 fdb8 	bl	28856 <nrf_modem_os_busywait>
   1fce6:	2201      	movs	r2, #1
   1fce8:	4b03      	ldr	r3, [pc, #12]	; (1fcf8 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   1fcea:	601a      	str	r2, [r3, #0]
   1fcec:	bd08      	pop	{r3, pc}
   1fcee:	bf00      	nop
   1fcf0:	2000ed48 	.word	0x2000ed48
   1fcf4:	2000ed4c 	.word	0x2000ed4c
   1fcf8:	4002a004 	.word	0x4002a004

0001fcfc <rpc_transport_ipc_data_msg_alloc>:
   1fcfc:	4b05      	ldr	r3, [pc, #20]	; (1fd14 <rpc_transport_ipc_data_msg_alloc+0x18>)
   1fcfe:	781b      	ldrb	r3, [r3, #0]
   1fd00:	b933      	cbnz	r3, 1fd10 <rpc_transport_ipc_data_msg_alloc+0x14>
   1fd02:	4b05      	ldr	r3, [pc, #20]	; (1fd18 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   1fd04:	2202      	movs	r2, #2
   1fd06:	6819      	ldr	r1, [r3, #0]
   1fd08:	4b04      	ldr	r3, [pc, #16]	; (1fd1c <rpc_transport_ipc_data_msg_alloc+0x20>)
   1fd0a:	6818      	ldr	r0, [r3, #0]
   1fd0c:	f7ff bf8a 	b.w	1fc24 <rpc_transport_ipc_msg_alloc>
   1fd10:	2000      	movs	r0, #0
   1fd12:	4770      	bx	lr
   1fd14:	2000f261 	.word	0x2000f261
   1fd18:	2000ed50 	.word	0x2000ed50
   1fd1c:	2000ed54 	.word	0x2000ed54

0001fd20 <rpc_transport_ipc_ctrl_msg_alloc>:
   1fd20:	230a      	movs	r3, #10
   1fd22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fd24:	4c0c      	ldr	r4, [pc, #48]	; (1fd58 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1fd26:	4d0d      	ldr	r5, [pc, #52]	; (1fd5c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   1fd28:	9301      	str	r3, [sp, #4]
   1fd2a:	2201      	movs	r2, #1
   1fd2c:	6821      	ldr	r1, [r4, #0]
   1fd2e:	6828      	ldr	r0, [r5, #0]
   1fd30:	f7ff ff78 	bl	1fc24 <rpc_transport_ipc_msg_alloc>
   1fd34:	b968      	cbnz	r0, 1fd52 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   1fd36:	f008 fd96 	bl	28866 <nrf_modem_os_is_in_isr>
   1fd3a:	b918      	cbnz	r0, 1fd44 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   1fd3c:	a901      	add	r1, sp, #4
   1fd3e:	f7f7 ff01 	bl	17b44 <nrf_modem_os_timedwait>
   1fd42:	e7f2      	b.n	1fd2a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1fd44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1fd48:	9b01      	ldr	r3, [sp, #4]
   1fd4a:	4358      	muls	r0, r3
   1fd4c:	f008 fd83 	bl	28856 <nrf_modem_os_busywait>
   1fd50:	e7eb      	b.n	1fd2a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1fd52:	b003      	add	sp, #12
   1fd54:	bd30      	pop	{r4, r5, pc}
   1fd56:	bf00      	nop
   1fd58:	2000ed48 	.word	0x2000ed48
   1fd5c:	2000ed4c 	.word	0x2000ed4c

0001fd60 <rpc_transport_ipc_data_alloc>:
   1fd60:	4b03      	ldr	r3, [pc, #12]	; (1fd70 <rpc_transport_ipc_data_alloc+0x10>)
   1fd62:	781b      	ldrb	r3, [r3, #0]
   1fd64:	b90b      	cbnz	r3, 1fd6a <rpc_transport_ipc_data_alloc+0xa>
   1fd66:	f7f7 bfef 	b.w	17d48 <nrf_modem_os_shm_tx_alloc>
   1fd6a:	2000      	movs	r0, #0
   1fd6c:	4770      	bx	lr
   1fd6e:	bf00      	nop
   1fd70:	2000f261 	.word	0x2000f261

0001fd74 <nrf_modem_application_irq_handler>:
   1fd74:	b510      	push	{r4, lr}
   1fd76:	4c06      	ldr	r4, [pc, #24]	; (1fd90 <nrf_modem_application_irq_handler+0x1c>)
   1fd78:	f7f7 ffc0 	bl	17cfc <nrf_modem_os_application_irq_clear>
   1fd7c:	6820      	ldr	r0, [r4, #0]
   1fd7e:	2101      	movs	r1, #1
   1fd80:	f7ff ff0e 	bl	1fba0 <handle_modem_rpc_msg>
   1fd84:	6860      	ldr	r0, [r4, #4]
   1fd86:	2102      	movs	r1, #2
   1fd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fd8c:	f7ff bf08 	b.w	1fba0 <handle_modem_rpc_msg>
   1fd90:	2000ed3c 	.word	0x2000ed3c

0001fd94 <rpc_transport_ipc_msg_free>:
   1fd94:	2300      	movs	r3, #0
   1fd96:	4911      	ldr	r1, [pc, #68]	; (1fddc <rpc_transport_ipc_msg_free+0x48>)
   1fd98:	b530      	push	{r4, r5, lr}
   1fd9a:	680a      	ldr	r2, [r1, #0]
   1fd9c:	6814      	ldr	r4, [r2, #0]
   1fd9e:	42a3      	cmp	r3, r4
   1fda0:	d10b      	bne.n	1fdba <rpc_transport_ipc_msg_free+0x26>
   1fda2:	2300      	movs	r3, #0
   1fda4:	684a      	ldr	r2, [r1, #4]
   1fda6:	6811      	ldr	r1, [r2, #0]
   1fda8:	428b      	cmp	r3, r1
   1fdaa:	d015      	beq.n	1fdd8 <rpc_transport_ipc_msg_free+0x44>
   1fdac:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1fdb0:	68a4      	ldr	r4, [r4, #8]
   1fdb2:	42a0      	cmp	r0, r4
   1fdb4:	d008      	beq.n	1fdc8 <rpc_transport_ipc_msg_free+0x34>
   1fdb6:	3301      	adds	r3, #1
   1fdb8:	e7f6      	b.n	1fda8 <rpc_transport_ipc_msg_free+0x14>
   1fdba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1fdbe:	68ad      	ldr	r5, [r5, #8]
   1fdc0:	42a8      	cmp	r0, r5
   1fdc2:	d001      	beq.n	1fdc8 <rpc_transport_ipc_msg_free+0x34>
   1fdc4:	3301      	adds	r3, #1
   1fdc6:	e7ea      	b.n	1fd9e <rpc_transport_ipc_msg_free+0xa>
   1fdc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1fdcc:	685a      	ldr	r2, [r3, #4]
   1fdce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1fdd2:	f042 0203 	orr.w	r2, r2, #3
   1fdd6:	605a      	str	r2, [r3, #4]
   1fdd8:	bd30      	pop	{r4, r5, pc}
   1fdda:	bf00      	nop
   1fddc:	2000ed3c 	.word	0x2000ed3c

0001fde0 <rpc_transport_ipc_init>:
   1fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fde4:	2200      	movs	r2, #0
   1fde6:	b095      	sub	sp, #84	; 0x54
   1fde8:	4605      	mov	r5, r0
   1fdea:	494d      	ldr	r1, [pc, #308]	; (1ff20 <rpc_transport_ipc_init+0x140>)
   1fdec:	7900      	ldrb	r0, [r0, #4]
   1fdee:	f7ff fc59 	bl	1f6a4 <nrfx_ipc_init>
   1fdf2:	2238      	movs	r2, #56	; 0x38
   1fdf4:	2100      	movs	r1, #0
   1fdf6:	a803      	add	r0, sp, #12
   1fdf8:	f00b f846 	bl	2ae88 <memset>
   1fdfc:	2302      	movs	r3, #2
   1fdfe:	9304      	str	r3, [sp, #16]
   1fe00:	2308      	movs	r3, #8
   1fe02:	9306      	str	r3, [sp, #24]
   1fe04:	2320      	movs	r3, #32
   1fe06:	9308      	str	r3, [sp, #32]
   1fe08:	2301      	movs	r3, #1
   1fe0a:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe0c:	2304      	movs	r3, #4
   1fe0e:	930d      	str	r3, [sp, #52]	; 0x34
   1fe10:	2310      	movs	r3, #16
   1fe12:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1fe16:	930f      	str	r3, [sp, #60]	; 0x3c
   1fe18:	2380      	movs	r3, #128	; 0x80
   1fe1a:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   1fe1e:	23d5      	movs	r3, #213	; 0xd5
   1fe20:	a803      	add	r0, sp, #12
   1fe22:	9313      	str	r3, [sp, #76]	; 0x4c
   1fe24:	f7ff fc56 	bl	1f6d4 <nrfx_ipc_config_load>
   1fe28:	682b      	ldr	r3, [r5, #0]
   1fe2a:	2100      	movs	r1, #0
   1fe2c:	685a      	ldr	r2, [r3, #4]
   1fe2e:	6818      	ldr	r0, [r3, #0]
   1fe30:	f00b f82a 	bl	2ae88 <memset>
   1fe34:	682a      	ldr	r2, [r5, #0]
   1fe36:	6814      	ldr	r4, [r2, #0]
   1fe38:	69d3      	ldr	r3, [r2, #28]
   1fe3a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   1fe3e:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1fe42:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1fe46:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   1fe4a:	f104 0920 	add.w	r9, r4, #32
   1fe4e:	2b00      	cmp	r3, #0
   1fe50:	d060      	beq.n	1ff14 <rpc_transport_ipc_init+0x134>
   1fe52:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1fe56:	4933      	ldr	r1, [pc, #204]	; (1ff24 <rpc_transport_ipc_init+0x144>)
   1fe58:	f8c1 9000 	str.w	r9, [r1]
   1fe5c:	b13b      	cbz	r3, 1fe6e <rpc_transport_ipc_init+0x8e>
   1fe5e:	6992      	ldr	r2, [r2, #24]
   1fe60:	4640      	mov	r0, r8
   1fe62:	f8c8 2004 	str.w	r2, [r8, #4]
   1fe66:	f8c8 3000 	str.w	r3, [r8]
   1fe6a:	f7ff fdb9 	bl	1f9e0 <ipc_trace_init>
   1fe6e:	6828      	ldr	r0, [r5, #0]
   1fe70:	2300      	movs	r3, #0
   1fe72:	6902      	ldr	r2, [r0, #16]
   1fe74:	2101      	movs	r1, #1
   1fe76:	6062      	str	r2, [r4, #4]
   1fe78:	6942      	ldr	r2, [r0, #20]
   1fe7a:	70a1      	strb	r1, [r4, #2]
   1fe7c:	60a2      	str	r2, [r4, #8]
   1fe7e:	4a2a      	ldr	r2, [pc, #168]	; (1ff28 <rpc_transport_ipc_init+0x148>)
   1fe80:	7023      	strb	r3, [r4, #0]
   1fe82:	6017      	str	r7, [r2, #0]
   1fe84:	4a29      	ldr	r2, [pc, #164]	; (1ff2c <rpc_transport_ipc_init+0x14c>)
   1fe86:	7063      	strb	r3, [r4, #1]
   1fe88:	6016      	str	r6, [r2, #0]
   1fe8a:	2208      	movs	r2, #8
   1fe8c:	70e3      	strb	r3, [r4, #3]
   1fe8e:	60e6      	str	r6, [r4, #12]
   1fe90:	6127      	str	r7, [r4, #16]
   1fe92:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   1fe96:	f8c4 9014 	str.w	r9, [r4, #20]
   1fe9a:	f8c4 8018 	str.w	r8, [r4, #24]
   1fe9e:	707b      	strb	r3, [r7, #1]
   1fea0:	70bb      	strb	r3, [r7, #2]
   1fea2:	70fb      	strb	r3, [r7, #3]
   1fea4:	2714      	movs	r7, #20
   1fea6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   1feaa:	4a21      	ldr	r2, [pc, #132]	; (1ff30 <rpc_transport_ipc_init+0x150>)
   1feac:	4d21      	ldr	r5, [pc, #132]	; (1ff34 <rpc_transport_ipc_init+0x154>)
   1feae:	f8c2 b000 	str.w	fp, [r2]
   1feb2:	4a21      	ldr	r2, [pc, #132]	; (1ff38 <rpc_transport_ipc_init+0x158>)
   1feb4:	7073      	strb	r3, [r6, #1]
   1feb6:	f8c2 a000 	str.w	sl, [r2]
   1feba:	4a20      	ldr	r2, [pc, #128]	; (1ff3c <rpc_transport_ipc_init+0x15c>)
   1febc:	70b3      	strb	r3, [r6, #2]
   1febe:	70f3      	strb	r3, [r6, #3]
   1fec0:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   1fec4:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   1fec8:	4c1d      	ldr	r4, [pc, #116]	; (1ff40 <rpc_transport_ipc_init+0x160>)
   1feca:	7029      	strb	r1, [r5, #0]
   1fecc:	491d      	ldr	r1, [pc, #116]	; (1ff44 <rpc_transport_ipc_init+0x164>)
   1fece:	6023      	str	r3, [r4, #0]
   1fed0:	9302      	str	r3, [sp, #8]
   1fed2:	600b      	str	r3, [r1, #0]
   1fed4:	680b      	ldr	r3, [r1, #0]
   1fed6:	4e1c      	ldr	r6, [pc, #112]	; (1ff48 <rpc_transport_ipc_init+0x168>)
   1fed8:	9302      	str	r3, [sp, #8]
   1feda:	9b02      	ldr	r3, [sp, #8]
   1fedc:	2000      	movs	r0, #0
   1fede:	a901      	add	r1, sp, #4
   1fee0:	9701      	str	r7, [sp, #4]
   1fee2:	f7f7 fe2f 	bl	17b44 <nrf_modem_os_timedwait>
   1fee6:	9b01      	ldr	r3, [sp, #4]
   1fee8:	3b14      	subs	r3, #20
   1feea:	441e      	add	r6, r3
   1feec:	782b      	ldrb	r3, [r5, #0]
   1feee:	2b01      	cmp	r3, #1
   1fef0:	d104      	bne.n	1fefc <rpc_transport_ipc_init+0x11c>
   1fef2:	2e00      	cmp	r6, #0
   1fef4:	d1f2      	bne.n	1fedc <rpc_transport_ipc_init+0xfc>
   1fef6:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1fefa:	6023      	str	r3, [r4, #0]
   1fefc:	6824      	ldr	r4, [r4, #0]
   1fefe:	b95c      	cbnz	r4, 1ff18 <rpc_transport_ipc_init+0x138>
   1ff00:	4b12      	ldr	r3, [pc, #72]	; (1ff4c <rpc_transport_ipc_init+0x16c>)
   1ff02:	701c      	strb	r4, [r3, #0]
   1ff04:	4b12      	ldr	r3, [pc, #72]	; (1ff50 <rpc_transport_ipc_init+0x170>)
   1ff06:	801c      	strh	r4, [r3, #0]
   1ff08:	4b12      	ldr	r3, [pc, #72]	; (1ff54 <rpc_transport_ipc_init+0x174>)
   1ff0a:	801c      	strh	r4, [r3, #0]
   1ff0c:	4620      	mov	r0, r4
   1ff0e:	b015      	add	sp, #84	; 0x54
   1ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff14:	4698      	mov	r8, r3
   1ff16:	e79e      	b.n	1fe56 <rpc_transport_ipc_init+0x76>
   1ff18:	f7ff fbfc 	bl	1f714 <nrfx_ipc_uninit>
   1ff1c:	e7f6      	b.n	1ff0c <rpc_transport_ipc_init+0x12c>
   1ff1e:	bf00      	nop
   1ff20:	0001ff59 	.word	0x0001ff59
   1ff24:	2000ed44 	.word	0x2000ed44
   1ff28:	2000ed54 	.word	0x2000ed54
   1ff2c:	2000ed4c 	.word	0x2000ed4c
   1ff30:	2000ed50 	.word	0x2000ed50
   1ff34:	2000f260 	.word	0x2000f260
   1ff38:	2000ed48 	.word	0x2000ed48
   1ff3c:	4002a000 	.word	0x4002a000
   1ff40:	2000ed38 	.word	0x2000ed38
   1ff44:	40005610 	.word	0x40005610
   1ff48:	000249f0 	.word	0x000249f0
   1ff4c:	2000f261 	.word	0x2000f261
   1ff50:	2000efc4 	.word	0x2000efc4
   1ff54:	2000efc2 	.word	0x2000efc2

0001ff58 <ipc_irq_handler>:
   1ff58:	b570      	push	{r4, r5, r6, lr}
   1ff5a:	4604      	mov	r4, r0
   1ff5c:	0620      	lsls	r0, r4, #24
   1ff5e:	d50c      	bpl.n	1ff7a <ipc_irq_handler+0x22>
   1ff60:	f7ff fd84 	bl	1fa6c <ipc_trace_handle>
   1ff64:	f7ff fe16 	bl	1fb94 <rpc_trace_coredump_in_progress>
   1ff68:	b138      	cbz	r0, 1ff7a <ipc_irq_handler+0x22>
   1ff6a:	22e0      	movs	r2, #224	; 0xe0
   1ff6c:	4b3e      	ldr	r3, [pc, #248]	; (20068 <ipc_irq_handler+0x110>)
   1ff6e:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1ff72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ff76:	605a      	str	r2, [r3, #4]
   1ff78:	bd70      	pop	{r4, r5, r6, pc}
   1ff7a:	07e1      	lsls	r1, r4, #31
   1ff7c:	d548      	bpl.n	20010 <ipc_irq_handler+0xb8>
   1ff7e:	f248 0202 	movw	r2, #32770	; 0x8002
   1ff82:	4b3a      	ldr	r3, [pc, #232]	; (2006c <ipc_irq_handler+0x114>)
   1ff84:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1ff88:	4293      	cmp	r3, r2
   1ff8a:	d035      	beq.n	1fff8 <ipc_irq_handler+0xa0>
   1ff8c:	d81b      	bhi.n	1ffc6 <ipc_irq_handler+0x6e>
   1ff8e:	f243 0232 	movw	r2, #12338	; 0x3032
   1ff92:	4293      	cmp	r3, r2
   1ff94:	d036      	beq.n	20004 <ipc_irq_handler+0xac>
   1ff96:	d80b      	bhi.n	1ffb0 <ipc_irq_handler+0x58>
   1ff98:	3b01      	subs	r3, #1
   1ff9a:	2b01      	cmp	r3, #1
   1ff9c:	d8ec      	bhi.n	1ff78 <ipc_irq_handler+0x20>
   1ff9e:	2203      	movs	r2, #3
   1ffa0:	200e      	movs	r0, #14
   1ffa2:	4b33      	ldr	r3, [pc, #204]	; (20070 <ipc_irq_handler+0x118>)
   1ffa4:	701a      	strb	r2, [r3, #0]
   1ffa6:	4b33      	ldr	r3, [pc, #204]	; (20074 <ipc_irq_handler+0x11c>)
   1ffa8:	6018      	str	r0, [r3, #0]
   1ffaa:	f00a f8e8 	bl	2a17e <rpc_transport_ipc_fault_handler>
   1ffae:	e7e3      	b.n	1ff78 <ipc_irq_handler+0x20>
   1ffb0:	f248 0201 	movw	r2, #32769	; 0x8001
   1ffb4:	4293      	cmp	r3, r2
   1ffb6:	d1df      	bne.n	1ff78 <ipc_irq_handler+0x20>
   1ffb8:	2203      	movs	r2, #3
   1ffba:	4b2d      	ldr	r3, [pc, #180]	; (20070 <ipc_irq_handler+0x118>)
   1ffbc:	701a      	strb	r2, [r3, #0]
   1ffbe:	2216      	movs	r2, #22
   1ffc0:	4b2c      	ldr	r3, [pc, #176]	; (20074 <ipc_irq_handler+0x11c>)
   1ffc2:	601a      	str	r2, [r3, #0]
   1ffc4:	e7d8      	b.n	1ff78 <ipc_irq_handler+0x20>
   1ffc6:	4a2c      	ldr	r2, [pc, #176]	; (20078 <ipc_irq_handler+0x120>)
   1ffc8:	4293      	cmp	r3, r2
   1ffca:	d80c      	bhi.n	1ffe6 <ipc_irq_handler+0x8e>
   1ffcc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1ffd0:	d80c      	bhi.n	1ffec <ipc_irq_handler+0x94>
   1ffd2:	f248 0203 	movw	r2, #32771	; 0x8003
   1ffd6:	4293      	cmp	r3, r2
   1ffd8:	d1ce      	bne.n	1ff78 <ipc_irq_handler+0x20>
   1ffda:	2203      	movs	r2, #3
   1ffdc:	4b24      	ldr	r3, [pc, #144]	; (20070 <ipc_irq_handler+0x118>)
   1ffde:	701a      	strb	r2, [r3, #0]
   1ffe0:	220c      	movs	r2, #12
   1ffe2:	4b24      	ldr	r3, [pc, #144]	; (20074 <ipc_irq_handler+0x11c>)
   1ffe4:	e7ed      	b.n	1ffc2 <ipc_irq_handler+0x6a>
   1ffe6:	4a25      	ldr	r2, [pc, #148]	; (2007c <ipc_irq_handler+0x124>)
   1ffe8:	4293      	cmp	r3, r2
   1ffea:	d1c5      	bne.n	1ff78 <ipc_irq_handler+0x20>
   1ffec:	2103      	movs	r1, #3
   1ffee:	4a20      	ldr	r2, [pc, #128]	; (20070 <ipc_irq_handler+0x118>)
   1fff0:	7011      	strb	r1, [r2, #0]
   1fff2:	4a20      	ldr	r2, [pc, #128]	; (20074 <ipc_irq_handler+0x11c>)
   1fff4:	6013      	str	r3, [r2, #0]
   1fff6:	e7bf      	b.n	1ff78 <ipc_irq_handler+0x20>
   1fff8:	2203      	movs	r2, #3
   1fffa:	4b1d      	ldr	r3, [pc, #116]	; (20070 <ipc_irq_handler+0x118>)
   1fffc:	701a      	strb	r2, [r3, #0]
   1fffe:	225f      	movs	r2, #95	; 0x5f
   20000:	4b1c      	ldr	r3, [pc, #112]	; (20074 <ipc_irq_handler+0x11c>)
   20002:	e7de      	b.n	1ffc2 <ipc_irq_handler+0x6a>
   20004:	2203      	movs	r2, #3
   20006:	4b1a      	ldr	r3, [pc, #104]	; (20070 <ipc_irq_handler+0x118>)
   20008:	701a      	strb	r2, [r3, #0]
   2000a:	2205      	movs	r2, #5
   2000c:	4b19      	ldr	r3, [pc, #100]	; (20074 <ipc_irq_handler+0x11c>)
   2000e:	e7d8      	b.n	1ffc2 <ipc_irq_handler+0x6a>
   20010:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   20014:	d003      	beq.n	2001e <ipc_irq_handler+0xc6>
   20016:	2202      	movs	r2, #2
   20018:	4b15      	ldr	r3, [pc, #84]	; (20070 <ipc_irq_handler+0x118>)
   2001a:	701a      	strb	r2, [r3, #0]
   2001c:	e7ac      	b.n	1ff78 <ipc_irq_handler+0x20>
   2001e:	0762      	lsls	r2, r4, #29
   20020:	d505      	bpl.n	2002e <ipc_irq_handler+0xd6>
   20022:	4b13      	ldr	r3, [pc, #76]	; (20070 <ipc_irq_handler+0x118>)
   20024:	781a      	ldrb	r2, [r3, #0]
   20026:	461e      	mov	r6, r3
   20028:	b93a      	cbnz	r2, 2003a <ipc_irq_handler+0xe2>
   2002a:	f7f7 fe5f 	bl	17cec <nrf_modem_os_application_irq_set>
   2002e:	06e3      	lsls	r3, r4, #27
   20030:	d5a2      	bpl.n	1ff78 <ipc_irq_handler+0x20>
   20032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20036:	f7f7 be59 	b.w	17cec <nrf_modem_os_application_irq_set>
   2003a:	2a01      	cmp	r2, #1
   2003c:	d1f7      	bne.n	2002e <ipc_irq_handler+0xd6>
   2003e:	4a10      	ldr	r2, [pc, #64]	; (20080 <ipc_irq_handler+0x128>)
   20040:	4810      	ldr	r0, [pc, #64]	; (20084 <ipc_irq_handler+0x12c>)
   20042:	6812      	ldr	r2, [r2, #0]
   20044:	6891      	ldr	r1, [r2, #8]
   20046:	6041      	str	r1, [r0, #4]
   20048:	6852      	ldr	r2, [r2, #4]
   2004a:	6002      	str	r2, [r0, #0]
   2004c:	b121      	cbz	r1, 20058 <ipc_irq_handler+0x100>
   2004e:	b11a      	cbz	r2, 20058 <ipc_irq_handler+0x100>
   20050:	6809      	ldr	r1, [r1, #0]
   20052:	b109      	cbz	r1, 20058 <ipc_irq_handler+0x100>
   20054:	6812      	ldr	r2, [r2, #0]
   20056:	b92a      	cbnz	r2, 20064 <ipc_irq_handler+0x10c>
   20058:	2303      	movs	r3, #3
   2005a:	2205      	movs	r2, #5
   2005c:	7033      	strb	r3, [r6, #0]
   2005e:	4b05      	ldr	r3, [pc, #20]	; (20074 <ipc_irq_handler+0x11c>)
   20060:	601a      	str	r2, [r3, #0]
   20062:	e7e4      	b.n	2002e <ipc_irq_handler+0xd6>
   20064:	701d      	strb	r5, [r3, #0]
   20066:	e7e2      	b.n	2002e <ipc_irq_handler+0xd6>
   20068:	e000e100 	.word	0xe000e100
   2006c:	4002a000 	.word	0x4002a000
   20070:	2000f260 	.word	0x2000f260
   20074:	2000ed38 	.word	0x2000ed38
   20078:	04400004 	.word	0x04400004
   2007c:	05500001 	.word	0x05500001
   20080:	2000ed44 	.word	0x2000ed44
   20084:	2000ed3c 	.word	0x2000ed3c

00020088 <interface_init>:
   20088:	b508      	push	{r3, lr}
   2008a:	f44f 72b0 	mov.w	r2, #352	; 0x160
   2008e:	2100      	movs	r1, #0
   20090:	4802      	ldr	r0, [pc, #8]	; (2009c <interface_init+0x14>)
   20092:	f00a fef9 	bl	2ae88 <memset>
   20096:	2000      	movs	r0, #0
   20098:	bd08      	pop	{r3, pc}
   2009a:	bf00      	nop
   2009c:	2000ed58 	.word	0x2000ed58

000200a0 <interface_socket_allocate>:
   200a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200a2:	4606      	mov	r6, r0
   200a4:	2400      	movs	r4, #0
   200a6:	272c      	movs	r7, #44	; 0x2c
   200a8:	4b0f      	ldr	r3, [pc, #60]	; (200e8 <interface_socket_allocate+0x48>)
   200aa:	fb07 f004 	mul.w	r0, r7, r4
   200ae:	181d      	adds	r5, r3, r0
   200b0:	5818      	ldr	r0, [r3, r0]
   200b2:	b988      	cbnz	r0, 200d8 <interface_socket_allocate+0x38>
   200b4:	f04f 37ff 	mov.w	r7, #4294967295
   200b8:	2301      	movs	r3, #1
   200ba:	4628      	mov	r0, r5
   200bc:	61af      	str	r7, [r5, #24]
   200be:	602b      	str	r3, [r5, #0]
   200c0:	f009 fb4c 	bl	2975c <packet_handler_alloc_and_init>
   200c4:	b168      	cbz	r0, 200e2 <interface_socket_allocate+0x42>
   200c6:	4628      	mov	r0, r5
   200c8:	f009 fb5f 	bl	2978a <socket_free>
   200cc:	200c      	movs	r0, #12
   200ce:	f008 fbc4 	bl	2885a <nrf_modem_os_errno_set>
   200d2:	f04f 34ff 	mov.w	r4, #4294967295
   200d6:	e005      	b.n	200e4 <interface_socket_allocate+0x44>
   200d8:	3401      	adds	r4, #1
   200da:	2c08      	cmp	r4, #8
   200dc:	d1e5      	bne.n	200aa <interface_socket_allocate+0xa>
   200de:	2069      	movs	r0, #105	; 0x69
   200e0:	e7f5      	b.n	200ce <interface_socket_allocate+0x2e>
   200e2:	6035      	str	r5, [r6, #0]
   200e4:	4620      	mov	r0, r4
   200e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200e8:	2000ed58 	.word	0x2000ed58

000200ec <interface_socket_free>:
   200ec:	2807      	cmp	r0, #7
   200ee:	d805      	bhi.n	200fc <interface_socket_free+0x10>
   200f0:	222c      	movs	r2, #44	; 0x2c
   200f2:	4b03      	ldr	r3, [pc, #12]	; (20100 <interface_socket_free+0x14>)
   200f4:	fb02 3000 	mla	r0, r2, r0, r3
   200f8:	f009 bb47 	b.w	2978a <socket_free>
   200fc:	4770      	bx	lr
   200fe:	bf00      	nop
   20100:	2000ed58 	.word	0x2000ed58

00020104 <interface_socket_packet_handler_update>:
   20104:	2807      	cmp	r0, #7
   20106:	b570      	push	{r4, r5, r6, lr}
   20108:	d812      	bhi.n	20130 <interface_socket_packet_handler_update+0x2c>
   2010a:	232c      	movs	r3, #44	; 0x2c
   2010c:	4358      	muls	r0, r3
   2010e:	4c09      	ldr	r4, [pc, #36]	; (20134 <interface_socket_packet_handler_update+0x30>)
   20110:	5823      	ldr	r3, [r4, r0]
   20112:	1825      	adds	r5, r4, r0
   20114:	b163      	cbz	r3, 20130 <interface_socket_packet_handler_update+0x2c>
   20116:	4628      	mov	r0, r5
   20118:	69ee      	ldr	r6, [r5, #28]
   2011a:	f009 fb1f 	bl	2975c <packet_handler_alloc_and_init>
   2011e:	4604      	mov	r4, r0
   20120:	b920      	cbnz	r0, 2012c <interface_socket_packet_handler_update+0x28>
   20122:	4630      	mov	r0, r6
   20124:	f00a f80e 	bl	2a144 <packet_handler_delete>
   20128:	4620      	mov	r0, r4
   2012a:	bd70      	pop	{r4, r5, r6, pc}
   2012c:	61ee      	str	r6, [r5, #28]
   2012e:	e7fb      	b.n	20128 <interface_socket_packet_handler_update+0x24>
   20130:	2402      	movs	r4, #2
   20132:	e7f9      	b.n	20128 <interface_socket_packet_handler_update+0x24>
   20134:	2000ed58 	.word	0x2000ed58

00020138 <interface_socket_wait>:
   20138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2013c:	4615      	mov	r5, r2
   2013e:	222c      	movs	r2, #44	; 0x2c
   20140:	4350      	muls	r0, r2
   20142:	461e      	mov	r6, r3
   20144:	4b0e      	ldr	r3, [pc, #56]	; (20180 <interface_socket_wait+0x48>)
   20146:	460c      	mov	r4, r1
   20148:	181f      	adds	r7, r3, r0
   2014a:	581b      	ldr	r3, [r3, r0]
   2014c:	402b      	ands	r3, r5
   2014e:	428b      	cmp	r3, r1
   20150:	d102      	bne.n	20158 <interface_socket_wait+0x20>
   20152:	2000      	movs	r0, #0
   20154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20158:	687b      	ldr	r3, [r7, #4]
   2015a:	2b00      	cmp	r3, #0
   2015c:	d1f9      	bne.n	20152 <interface_socket_wait+0x1a>
   2015e:	46b8      	mov	r8, r7
   20160:	f8d8 3000 	ldr.w	r3, [r8]
   20164:	402b      	ands	r3, r5
   20166:	42a3      	cmp	r3, r4
   20168:	d0f3      	beq.n	20152 <interface_socket_wait+0x1a>
   2016a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2016e:	2b00      	cmp	r3, #0
   20170:	d1ef      	bne.n	20152 <interface_socket_wait+0x1a>
   20172:	4631      	mov	r1, r6
   20174:	4638      	mov	r0, r7
   20176:	f7f7 fce5 	bl	17b44 <nrf_modem_os_timedwait>
   2017a:	2800      	cmp	r0, #0
   2017c:	d0f0      	beq.n	20160 <interface_socket_wait+0x28>
   2017e:	e7e9      	b.n	20154 <interface_socket_wait+0x1c>
   20180:	2000ed58 	.word	0x2000ed58

00020184 <interface_sockets_aux_state_set>:
   20184:	4a0d      	ldr	r2, [pc, #52]	; (201bc <interface_sockets_aux_state_set+0x38>)
   20186:	b570      	push	{r4, r5, r6, lr}
   20188:	2300      	movs	r3, #0
   2018a:	4611      	mov	r1, r2
   2018c:	252c      	movs	r5, #44	; 0x2c
   2018e:	fb05 f403 	mul.w	r4, r5, r3
   20192:	590c      	ldr	r4, [r1, r4]
   20194:	b15c      	cbz	r4, 201ae <interface_sockets_aux_state_set+0x2a>
   20196:	68d4      	ldr	r4, [r2, #12]
   20198:	f024 0608 	bic.w	r6, r4, #8
   2019c:	2e02      	cmp	r6, #2
   2019e:	d001      	beq.n	201a4 <interface_sockets_aux_state_set+0x20>
   201a0:	2c05      	cmp	r4, #5
   201a2:	d104      	bne.n	201ae <interface_sockets_aux_state_set+0x2a>
   201a4:	fb05 f603 	mul.w	r6, r5, r3
   201a8:	598c      	ldr	r4, [r1, r6]
   201aa:	4304      	orrs	r4, r0
   201ac:	518c      	str	r4, [r1, r6]
   201ae:	3301      	adds	r3, #1
   201b0:	2b08      	cmp	r3, #8
   201b2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   201b6:	d1ea      	bne.n	2018e <interface_sockets_aux_state_set+0xa>
   201b8:	bd70      	pop	{r4, r5, r6, pc}
   201ba:	bf00      	nop
   201bc:	2000ed58 	.word	0x2000ed58

000201c0 <interface_sockets_aux_state_clear>:
   201c0:	4a0d      	ldr	r2, [pc, #52]	; (201f8 <interface_sockets_aux_state_clear+0x38>)
   201c2:	b570      	push	{r4, r5, r6, lr}
   201c4:	2300      	movs	r3, #0
   201c6:	4611      	mov	r1, r2
   201c8:	252c      	movs	r5, #44	; 0x2c
   201ca:	43c0      	mvns	r0, r0
   201cc:	fb05 f403 	mul.w	r4, r5, r3
   201d0:	590c      	ldr	r4, [r1, r4]
   201d2:	b15c      	cbz	r4, 201ec <interface_sockets_aux_state_clear+0x2c>
   201d4:	68d4      	ldr	r4, [r2, #12]
   201d6:	f024 0608 	bic.w	r6, r4, #8
   201da:	2e02      	cmp	r6, #2
   201dc:	d001      	beq.n	201e2 <interface_sockets_aux_state_clear+0x22>
   201de:	2c05      	cmp	r4, #5
   201e0:	d104      	bne.n	201ec <interface_sockets_aux_state_clear+0x2c>
   201e2:	fb05 f603 	mul.w	r6, r5, r3
   201e6:	598c      	ldr	r4, [r1, r6]
   201e8:	4004      	ands	r4, r0
   201ea:	518c      	str	r4, [r1, r6]
   201ec:	3301      	adds	r3, #1
   201ee:	2b08      	cmp	r3, #8
   201f0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   201f4:	d1ea      	bne.n	201cc <interface_sockets_aux_state_clear+0xc>
   201f6:	bd70      	pop	{r4, r5, r6, pc}
   201f8:	2000ed58 	.word	0x2000ed58

000201fc <interface_from_internal_id_search>:
   201fc:	4b0a      	ldr	r3, [pc, #40]	; (20228 <interface_from_internal_id_search+0x2c>)
   201fe:	4602      	mov	r2, r0
   20200:	b530      	push	{r4, r5, lr}
   20202:	2000      	movs	r0, #0
   20204:	461c      	mov	r4, r3
   20206:	212c      	movs	r1, #44	; 0x2c
   20208:	fb01 f500 	mul.w	r5, r1, r0
   2020c:	5965      	ldr	r5, [r4, r5]
   2020e:	b115      	cbz	r5, 20216 <interface_from_internal_id_search+0x1a>
   20210:	699d      	ldr	r5, [r3, #24]
   20212:	4295      	cmp	r5, r2
   20214:	d006      	beq.n	20224 <interface_from_internal_id_search+0x28>
   20216:	3001      	adds	r0, #1
   20218:	2808      	cmp	r0, #8
   2021a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   2021e:	d1f3      	bne.n	20208 <interface_from_internal_id_search+0xc>
   20220:	f04f 30ff 	mov.w	r0, #4294967295
   20224:	bd30      	pop	{r4, r5, pc}
   20226:	bf00      	nop
   20228:	2000ed58 	.word	0x2000ed58

0002022c <interface_socket_from_handle_get>:
   2022c:	2807      	cmp	r0, #7
   2022e:	d809      	bhi.n	20244 <interface_socket_from_handle_get+0x18>
   20230:	232c      	movs	r3, #44	; 0x2c
   20232:	4358      	muls	r0, r3
   20234:	4a04      	ldr	r2, [pc, #16]	; (20248 <interface_socket_from_handle_get+0x1c>)
   20236:	1813      	adds	r3, r2, r0
   20238:	5812      	ldr	r2, [r2, r0]
   2023a:	2a00      	cmp	r2, #0
   2023c:	bf14      	ite	ne
   2023e:	4618      	movne	r0, r3
   20240:	2000      	moveq	r0, #0
   20242:	4770      	bx	lr
   20244:	2000      	movs	r0, #0
   20246:	4770      	bx	lr
   20248:	2000ed58 	.word	0x2000ed58

0002024c <interface_socket_setopt>:
   2024c:	2807      	cmp	r0, #7
   2024e:	b538      	push	{r3, r4, r5, lr}
   20250:	d82c      	bhi.n	202ac <interface_socket_setopt+0x60>
   20252:	242c      	movs	r4, #44	; 0x2c
   20254:	4360      	muls	r0, r4
   20256:	4d16      	ldr	r5, [pc, #88]	; (202b0 <interface_socket_setopt+0x64>)
   20258:	182c      	adds	r4, r5, r0
   2025a:	5828      	ldr	r0, [r5, r0]
   2025c:	b330      	cbz	r0, 202ac <interface_socket_setopt+0x60>
   2025e:	2901      	cmp	r1, #1
   20260:	d005      	beq.n	2026e <interface_socket_setopt+0x22>
   20262:	206d      	movs	r0, #109	; 0x6d
   20264:	f008 faf9 	bl	2885a <nrf_modem_os_errno_set>
   20268:	f04f 30ff 	mov.w	r0, #4294967295
   2026c:	e01b      	b.n	202a6 <interface_socket_setopt+0x5a>
   2026e:	f1a2 0114 	sub.w	r1, r2, #20
   20272:	2901      	cmp	r1, #1
   20274:	d8f5      	bhi.n	20262 <interface_socket_setopt+0x16>
   20276:	9904      	ldr	r1, [sp, #16]
   20278:	2908      	cmp	r1, #8
   2027a:	d115      	bne.n	202a8 <interface_socket_setopt+0x5c>
   2027c:	b1a3      	cbz	r3, 202a8 <interface_socket_setopt+0x5c>
   2027e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   20282:	6858      	ldr	r0, [r3, #4]
   20284:	2100      	movs	r1, #0
   20286:	fbb0 f0f5 	udiv	r0, r0, r5
   2028a:	681b      	ldr	r3, [r3, #0]
   2028c:	fbe5 0103 	umlal	r0, r1, r5, r3
   20290:	2901      	cmp	r1, #1
   20292:	bf08      	it	eq
   20294:	2800      	cmpeq	r0, #0
   20296:	d301      	bcc.n	2029c <interface_socket_setopt+0x50>
   20298:	2021      	movs	r0, #33	; 0x21
   2029a:	e7e3      	b.n	20264 <interface_socket_setopt+0x18>
   2029c:	2a14      	cmp	r2, #20
   2029e:	bf0c      	ite	eq
   202a0:	6220      	streq	r0, [r4, #32]
   202a2:	6260      	strne	r0, [r4, #36]	; 0x24
   202a4:	2000      	movs	r0, #0
   202a6:	bd38      	pop	{r3, r4, r5, pc}
   202a8:	2016      	movs	r0, #22
   202aa:	e7db      	b.n	20264 <interface_socket_setopt+0x18>
   202ac:	2009      	movs	r0, #9
   202ae:	e7d9      	b.n	20264 <interface_socket_setopt+0x18>
   202b0:	2000ed58 	.word	0x2000ed58

000202b4 <interface_socket_getopt>:
   202b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   202b6:	4604      	mov	r4, r0
   202b8:	2c07      	cmp	r4, #7
   202ba:	4616      	mov	r6, r2
   202bc:	4618      	mov	r0, r3
   202be:	9f08      	ldr	r7, [sp, #32]
   202c0:	d841      	bhi.n	20346 <interface_socket_getopt+0x92>
   202c2:	252c      	movs	r5, #44	; 0x2c
   202c4:	436c      	muls	r4, r5
   202c6:	4b21      	ldr	r3, [pc, #132]	; (2034c <interface_socket_getopt+0x98>)
   202c8:	591a      	ldr	r2, [r3, r4]
   202ca:	191d      	adds	r5, r3, r4
   202cc:	2a00      	cmp	r2, #0
   202ce:	d03a      	beq.n	20346 <interface_socket_getopt+0x92>
   202d0:	2901      	cmp	r1, #1
   202d2:	d005      	beq.n	202e0 <interface_socket_getopt+0x2c>
   202d4:	206d      	movs	r0, #109	; 0x6d
   202d6:	f008 fac0 	bl	2885a <nrf_modem_os_errno_set>
   202da:	f04f 30ff 	mov.w	r0, #4294967295
   202de:	e012      	b.n	20306 <interface_socket_getopt+0x52>
   202e0:	b100      	cbz	r0, 202e4 <interface_socket_getopt+0x30>
   202e2:	b90f      	cbnz	r7, 202e8 <interface_socket_getopt+0x34>
   202e4:	2016      	movs	r0, #22
   202e6:	e7f6      	b.n	202d6 <interface_socket_getopt+0x22>
   202e8:	2e04      	cmp	r6, #4
   202ea:	d10e      	bne.n	2030a <interface_socket_getopt+0x56>
   202ec:	683a      	ldr	r2, [r7, #0]
   202ee:	2a00      	cmp	r2, #0
   202f0:	d0f8      	beq.n	202e4 <interface_socket_getopt+0x30>
   202f2:	2a04      	cmp	r2, #4
   202f4:	bf28      	it	cs
   202f6:	2204      	movcs	r2, #4
   202f8:	3404      	adds	r4, #4
   202fa:	603a      	str	r2, [r7, #0]
   202fc:	1919      	adds	r1, r3, r4
   202fe:	f00a fda3 	bl	2ae48 <memcpy>
   20302:	2000      	movs	r0, #0
   20304:	6068      	str	r0, [r5, #4]
   20306:	b003      	add	sp, #12
   20308:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2030a:	f1a6 0314 	sub.w	r3, r6, #20
   2030e:	2b01      	cmp	r3, #1
   20310:	d8e0      	bhi.n	202d4 <interface_socket_getopt+0x20>
   20312:	683a      	ldr	r2, [r7, #0]
   20314:	2a00      	cmp	r2, #0
   20316:	d0e5      	beq.n	202e4 <interface_socket_getopt+0x30>
   20318:	2a08      	cmp	r2, #8
   2031a:	bf28      	it	cs
   2031c:	2208      	movcs	r2, #8
   2031e:	603a      	str	r2, [r7, #0]
   20320:	e9d5 4308 	ldrd	r4, r3, [r5, #32]
   20324:	2e14      	cmp	r6, #20
   20326:	bf18      	it	ne
   20328:	461c      	movne	r4, r3
   2032a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2032e:	fbb4 f1f3 	udiv	r1, r4, r3
   20332:	9100      	str	r1, [sp, #0]
   20334:	fb03 4111 	mls	r1, r3, r1, r4
   20338:	434b      	muls	r3, r1
   2033a:	4669      	mov	r1, sp
   2033c:	9301      	str	r3, [sp, #4]
   2033e:	f00a fd83 	bl	2ae48 <memcpy>
   20342:	2000      	movs	r0, #0
   20344:	e7df      	b.n	20306 <interface_socket_getopt+0x52>
   20346:	2009      	movs	r0, #9
   20348:	e7c5      	b.n	202d6 <interface_socket_getopt+0x22>
   2034a:	bf00      	nop
   2034c:	2000ed58 	.word	0x2000ed58

00020350 <interface_socket_fcntl>:
   20350:	2807      	cmp	r0, #7
   20352:	b510      	push	{r4, lr}
   20354:	d82c      	bhi.n	203b0 <interface_socket_fcntl+0x60>
   20356:	232c      	movs	r3, #44	; 0x2c
   20358:	4343      	muls	r3, r0
   2035a:	4c16      	ldr	r4, [pc, #88]	; (203b4 <interface_socket_fcntl+0x64>)
   2035c:	58e0      	ldr	r0, [r4, r3]
   2035e:	b338      	cbz	r0, 203b0 <interface_socket_fcntl+0x60>
   20360:	2901      	cmp	r1, #1
   20362:	d11d      	bne.n	203a0 <interface_socket_fcntl+0x50>
   20364:	f012 0001 	ands.w	r0, r2, #1
   20368:	58e2      	ldr	r2, [r4, r3]
   2036a:	d004      	beq.n	20376 <interface_socket_fcntl+0x26>
   2036c:	2000      	movs	r0, #0
   2036e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   20372:	50e2      	str	r2, [r4, r3]
   20374:	bd10      	pop	{r4, pc}
   20376:	0092      	lsls	r2, r2, #2
   20378:	d407      	bmi.n	2038a <interface_socket_fcntl+0x3a>
   2037a:	58e2      	ldr	r2, [r4, r3]
   2037c:	b292      	uxth	r2, r2
   2037e:	2a0a      	cmp	r2, #10
   20380:	d003      	beq.n	2038a <interface_socket_fcntl+0x3a>
   20382:	58e2      	ldr	r2, [r4, r3]
   20384:	b292      	uxth	r2, r2
   20386:	2a0b      	cmp	r2, #11
   20388:	d105      	bne.n	20396 <interface_socket_fcntl+0x46>
   2038a:	200b      	movs	r0, #11
   2038c:	f008 fa65 	bl	2885a <nrf_modem_os_errno_set>
   20390:	f04f 30ff 	mov.w	r0, #4294967295
   20394:	e7ee      	b.n	20374 <interface_socket_fcntl+0x24>
   20396:	58e2      	ldr	r2, [r4, r3]
   20398:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   2039c:	50e2      	str	r2, [r4, r3]
   2039e:	e7e9      	b.n	20374 <interface_socket_fcntl+0x24>
   203a0:	2902      	cmp	r1, #2
   203a2:	d103      	bne.n	203ac <interface_socket_fcntl+0x5c>
   203a4:	58e0      	ldr	r0, [r4, r3]
   203a6:	f3c0 7000 	ubfx	r0, r0, #28, #1
   203aa:	e7e3      	b.n	20374 <interface_socket_fcntl+0x24>
   203ac:	2016      	movs	r0, #22
   203ae:	e7ed      	b.n	2038c <interface_socket_fcntl+0x3c>
   203b0:	2009      	movs	r0, #9
   203b2:	e7eb      	b.n	2038c <interface_socket_fcntl+0x3c>
   203b4:	2000ed58 	.word	0x2000ed58

000203b8 <rpc_error_to_nrf_errno>:
   203b8:	286a      	cmp	r0, #106	; 0x6a
   203ba:	bf9a      	itte	ls
   203bc:	4b01      	ldrls	r3, [pc, #4]	; (203c4 <rpc_error_to_nrf_errno+0xc>)
   203be:	5c18      	ldrbls	r0, [r3, r0]
   203c0:	205f      	movhi	r0, #95	; 0x5f
   203c2:	4770      	bx	lr
   203c4:	00030154 	.word	0x00030154

000203c8 <rpc_error_to_nrf_gai_errno>:
   203c8:	2805      	cmp	r0, #5
   203ca:	d013      	beq.n	203f4 <rpc_error_to_nrf_gai_errno+0x2c>
   203cc:	d807      	bhi.n	203de <rpc_error_to_nrf_gai_errno+0x16>
   203ce:	b170      	cbz	r0, 203ee <rpc_error_to_nrf_gai_errno+0x26>
   203d0:	4b0b      	ldr	r3, [pc, #44]	; (20400 <rpc_error_to_nrf_gai_errno+0x38>)
   203d2:	5c1b      	ldrb	r3, [r3, r0]
   203d4:	4a0b      	ldr	r2, [pc, #44]	; (20404 <rpc_error_to_nrf_gai_errno+0x3c>)
   203d6:	f240 1015 	movw	r0, #277	; 0x115
   203da:	6013      	str	r3, [r2, #0]
   203dc:	4770      	bx	lr
   203de:	2806      	cmp	r0, #6
   203e0:	d00b      	beq.n	203fa <rpc_error_to_nrf_gai_errno+0x32>
   203e2:	280d      	cmp	r0, #13
   203e4:	d009      	beq.n	203fa <rpc_error_to_nrf_gai_errno+0x32>
   203e6:	286a      	cmp	r0, #106	; 0x6a
   203e8:	d9f2      	bls.n	203d0 <rpc_error_to_nrf_gai_errno+0x8>
   203ea:	235f      	movs	r3, #95	; 0x5f
   203ec:	e7f2      	b.n	203d4 <rpc_error_to_nrf_gai_errno+0xc>
   203ee:	4b05      	ldr	r3, [pc, #20]	; (20404 <rpc_error_to_nrf_gai_errno+0x3c>)
   203f0:	6018      	str	r0, [r3, #0]
   203f2:	4770      	bx	lr
   203f4:	f44f 708a 	mov.w	r0, #276	; 0x114
   203f8:	4770      	bx	lr
   203fa:	f240 1011 	movw	r0, #273	; 0x111
   203fe:	4770      	bx	lr
   20400:	00030154 	.word	0x00030154
   20404:	2000eec0 	.word	0x2000eec0

00020408 <ip_interface_init>:
   20408:	b510      	push	{r4, lr}
   2040a:	2400      	movs	r4, #0
   2040c:	4b06      	ldr	r3, [pc, #24]	; (20428 <ip_interface_init+0x20>)
   2040e:	2220      	movs	r2, #32
   20410:	601c      	str	r4, [r3, #0]
   20412:	4b06      	ldr	r3, [pc, #24]	; (2042c <ip_interface_init+0x24>)
   20414:	4621      	mov	r1, r4
   20416:	4806      	ldr	r0, [pc, #24]	; (20430 <ip_interface_init+0x28>)
   20418:	601c      	str	r4, [r3, #0]
   2041a:	f00a fd35 	bl	2ae88 <memset>
   2041e:	2201      	movs	r2, #1
   20420:	4b04      	ldr	r3, [pc, #16]	; (20434 <ip_interface_init+0x2c>)
   20422:	4620      	mov	r0, r4
   20424:	701a      	strb	r2, [r3, #0]
   20426:	bd10      	pop	{r4, pc}
   20428:	2000eecc 	.word	0x2000eecc
   2042c:	2000eec8 	.word	0x2000eec8
   20430:	2000eed0 	.word	0x2000eed0
   20434:	2000f263 	.word	0x2000f263

00020438 <ip_interface_open>:
   20438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2043a:	2302      	movs	r3, #2
   2043c:	460d      	mov	r5, r1
   2043e:	4611      	mov	r1, r2
   20440:	2200      	movs	r2, #0
   20442:	f04f 34ff 	mov.w	r4, #4294967295
   20446:	b085      	sub	sp, #20
   20448:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2044c:	4b35      	ldr	r3, [pc, #212]	; (20524 <ip_interface_open+0xec>)
   2044e:	4606      	mov	r6, r0
   20450:	781b      	ldrb	r3, [r3, #0]
   20452:	9403      	str	r4, [sp, #12]
   20454:	b92b      	cbnz	r3, 20462 <ip_interface_open+0x2a>
   20456:	2075      	movs	r0, #117	; 0x75
   20458:	f008 f9ff 	bl	2885a <nrf_modem_os_errno_set>
   2045c:	4620      	mov	r0, r4
   2045e:	b005      	add	sp, #20
   20460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20462:	f020 0308 	bic.w	r3, r0, #8
   20466:	2b02      	cmp	r3, #2
   20468:	d003      	beq.n	20472 <ip_interface_open+0x3a>
   2046a:	2805      	cmp	r0, #5
   2046c:	d001      	beq.n	20472 <ip_interface_open+0x3a>
   2046e:	206a      	movs	r0, #106	; 0x6a
   20470:	e7f2      	b.n	20458 <ip_interface_open+0x20>
   20472:	1e6b      	subs	r3, r5, #1
   20474:	2b02      	cmp	r3, #2
   20476:	d814      	bhi.n	204a2 <ip_interface_open+0x6a>
   20478:	4628      	mov	r0, r5
   2047a:	aa02      	add	r2, sp, #8
   2047c:	f009 f9b6 	bl	297ec <protocol_verify>
   20480:	4607      	mov	r7, r0
   20482:	2800      	cmp	r0, #0
   20484:	d14b      	bne.n	2051e <ip_interface_open+0xe6>
   20486:	4629      	mov	r1, r5
   20488:	4a27      	ldr	r2, [pc, #156]	; (20528 <ip_interface_open+0xf0>)
   2048a:	a801      	add	r0, sp, #4
   2048c:	f7ff fe08 	bl	200a0 <interface_socket_allocate>
   20490:	9b01      	ldr	r3, [sp, #4]
   20492:	4604      	mov	r4, r0
   20494:	b95b      	cbnz	r3, 204ae <ip_interface_open+0x76>
   20496:	2669      	movs	r6, #105	; 0x69
   20498:	4620      	mov	r0, r4
   2049a:	f7ff fe27 	bl	200ec <interface_socket_free>
   2049e:	4630      	mov	r0, r6
   204a0:	e000      	b.n	204a4 <ip_interface_open+0x6c>
   204a2:	2016      	movs	r0, #22
   204a4:	f008 f9d9 	bl	2885a <nrf_modem_os_errno_set>
   204a8:	f04f 34ff 	mov.w	r4, #4294967295
   204ac:	e7d6      	b.n	2045c <ip_interface_open+0x24>
   204ae:	9a02      	ldr	r2, [sp, #8]
   204b0:	e9c3 6503 	strd	r6, r5, [r3, #12]
   204b4:	615a      	str	r2, [r3, #20]
   204b6:	f04f 31ff 	mov.w	r1, #4294967295
   204ba:	f247 0201 	movw	r2, #28673	; 0x7001
   204be:	463b      	mov	r3, r7
   204c0:	f009 f9dc 	bl	2987c <ip_interface_request_create>
   204c4:	4602      	mov	r2, r0
   204c6:	2800      	cmp	r0, #0
   204c8:	d0e5      	beq.n	20496 <ip_interface_open+0x5e>
   204ca:	6883      	ldr	r3, [r0, #8]
   204cc:	3e02      	subs	r6, #2
   204ce:	2e08      	cmp	r6, #8
   204d0:	f103 030c 	add.w	r3, r3, #12
   204d4:	6083      	str	r3, [r0, #8]
   204d6:	bf98      	it	ls
   204d8:	4b14      	ldrls	r3, [pc, #80]	; (2052c <ip_interface_open+0xf4>)
   204da:	f247 0101 	movw	r1, #28673	; 0x7001
   204de:	bf98      	it	ls
   204e0:	579f      	ldrsbls	r7, [r3, r6]
   204e2:	9b02      	ldr	r3, [sp, #8]
   204e4:	6147      	str	r7, [r0, #20]
   204e6:	61c3      	str	r3, [r0, #28]
   204e8:	6185      	str	r5, [r0, #24]
   204ea:	2004      	movs	r0, #4
   204ec:	f009 f92a 	bl	29744 <rpc_client_request_send>
   204f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   204f4:	2102      	movs	r1, #2
   204f6:	4620      	mov	r0, r4
   204f8:	ab03      	add	r3, sp, #12
   204fa:	f009 f9d2 	bl	298a2 <ip_interface_wait>
   204fe:	4606      	mov	r6, r0
   20500:	2800      	cmp	r0, #0
   20502:	d1c9      	bne.n	20498 <ip_interface_open+0x60>
   20504:	3d02      	subs	r5, #2
   20506:	2d01      	cmp	r5, #1
   20508:	d8a8      	bhi.n	2045c <ip_interface_open+0x24>
   2050a:	9b01      	ldr	r3, [sp, #4]
   2050c:	681a      	ldr	r2, [r3, #0]
   2050e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   20512:	601a      	str	r2, [r3, #0]
   20514:	681a      	ldr	r2, [r3, #0]
   20516:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2051a:	601a      	str	r2, [r3, #0]
   2051c:	e79e      	b.n	2045c <ip_interface_open+0x24>
   2051e:	4604      	mov	r4, r0
   20520:	e79c      	b.n	2045c <ip_interface_open+0x24>
   20522:	bf00      	nop
   20524:	2000f263 	.word	0x2000f263
   20528:	000297d5 	.word	0x000297d5
   2052c:	00030146 	.word	0x00030146

00020530 <ip_interface_close>:
   20530:	f04f 33ff 	mov.w	r3, #4294967295
   20534:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20536:	4605      	mov	r5, r0
   20538:	9301      	str	r3, [sp, #4]
   2053a:	f7ff fe77 	bl	2022c <interface_socket_from_handle_get>
   2053e:	4604      	mov	r4, r0
   20540:	b388      	cbz	r0, 205a6 <ip_interface_close+0x76>
   20542:	f247 0209 	movw	r2, #28681	; 0x7009
   20546:	6981      	ldr	r1, [r0, #24]
   20548:	2300      	movs	r3, #0
   2054a:	4628      	mov	r0, r5
   2054c:	f009 f996 	bl	2987c <ip_interface_request_create>
   20550:	4602      	mov	r2, r0
   20552:	b370      	cbz	r0, 205b2 <ip_interface_close+0x82>
   20554:	6823      	ldr	r3, [r4, #0]
   20556:	f247 0109 	movw	r1, #28681	; 0x7009
   2055a:	0c1b      	lsrs	r3, r3, #16
   2055c:	041b      	lsls	r3, r3, #16
   2055e:	f043 030d 	orr.w	r3, r3, #13
   20562:	6023      	str	r3, [r4, #0]
   20564:	6823      	ldr	r3, [r4, #0]
   20566:	2004      	movs	r0, #4
   20568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2056c:	6023      	str	r3, [r4, #0]
   2056e:	6823      	ldr	r3, [r4, #0]
   20570:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20574:	6023      	str	r3, [r4, #0]
   20576:	4c10      	ldr	r4, [pc, #64]	; (205b8 <ip_interface_close+0x88>)
   20578:	f009 f8e4 	bl	29744 <rpc_client_request_send>
   2057c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20580:	210e      	movs	r1, #14
   20582:	4628      	mov	r0, r5
   20584:	ab01      	add	r3, sp, #4
   20586:	f009 f98c 	bl	298a2 <ip_interface_wait>
   2058a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   2058e:	b120      	cbz	r0, 2059a <ip_interface_close+0x6a>
   20590:	f009 f8df 	bl	29752 <rpc_client_message_free>
   20594:	2300      	movs	r3, #0
   20596:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   2059a:	4628      	mov	r0, r5
   2059c:	f7ff fda6 	bl	200ec <interface_socket_free>
   205a0:	2000      	movs	r0, #0
   205a2:	b003      	add	sp, #12
   205a4:	bd30      	pop	{r4, r5, pc}
   205a6:	2009      	movs	r0, #9
   205a8:	f008 f957 	bl	2885a <nrf_modem_os_errno_set>
   205ac:	f04f 30ff 	mov.w	r0, #4294967295
   205b0:	e7f7      	b.n	205a2 <ip_interface_close+0x72>
   205b2:	200c      	movs	r0, #12
   205b4:	e7f8      	b.n	205a8 <ip_interface_close+0x78>
   205b6:	bf00      	nop
   205b8:	2000eed0 	.word	0x2000eed0

000205bc <ip_interface_sendto>:
   205bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205c0:	2700      	movs	r7, #0
   205c2:	469a      	mov	sl, r3
   205c4:	f04f 36ff 	mov.w	r6, #4294967295
   205c8:	2364      	movs	r3, #100	; 0x64
   205ca:	b089      	sub	sp, #36	; 0x24
   205cc:	4681      	mov	r9, r0
   205ce:	4615      	mov	r5, r2
   205d0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   205d4:	9102      	str	r1, [sp, #8]
   205d6:	f8ad 7010 	strh.w	r7, [sp, #16]
   205da:	f8ad 7012 	strh.w	r7, [sp, #18]
   205de:	9605      	str	r6, [sp, #20]
   205e0:	9307      	str	r3, [sp, #28]
   205e2:	f7ff fe23 	bl	2022c <interface_socket_from_handle_get>
   205e6:	4604      	mov	r4, r0
   205e8:	b930      	cbnz	r0, 205f8 <ip_interface_sendto+0x3c>
   205ea:	2009      	movs	r0, #9
   205ec:	f008 f935 	bl	2885a <nrf_modem_os_errno_set>
   205f0:	4630      	mov	r0, r6
   205f2:	b009      	add	sp, #36	; 0x24
   205f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205f8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   205fc:	dd01      	ble.n	20602 <ip_interface_sendto+0x46>
   205fe:	207a      	movs	r0, #122	; 0x7a
   20600:	e7f4      	b.n	205ec <ip_interface_sendto+0x30>
   20602:	f1ba 0f00 	cmp.w	sl, #0
   20606:	d004      	beq.n	20612 <ip_interface_sendto+0x56>
   20608:	f1ba 0f02 	cmp.w	sl, #2
   2060c:	d006      	beq.n	2061c <ip_interface_sendto+0x60>
   2060e:	205f      	movs	r0, #95	; 0x5f
   20610:	e7ec      	b.n	205ec <ip_interface_sendto+0x30>
   20612:	6807      	ldr	r7, [r0, #0]
   20614:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   20618:	f3c7 7700 	ubfx	r7, r7, #28, #1
   2061c:	2d00      	cmp	r5, #0
   2061e:	dd07      	ble.n	20630 <ip_interface_sendto+0x74>
   20620:	9b02      	ldr	r3, [sp, #8]
   20622:	b92b      	cbnz	r3, 20630 <ip_interface_sendto+0x74>
   20624:	200e      	movs	r0, #14
   20626:	f008 f918 	bl	2885a <nrf_modem_os_errno_set>
   2062a:	f04f 36ff 	mov.w	r6, #4294967295
   2062e:	e7df      	b.n	205f0 <ip_interface_sendto+0x34>
   20630:	6923      	ldr	r3, [r4, #16]
   20632:	f1bb 0f00 	cmp.w	fp, #0
   20636:	d012      	beq.n	2065e <ip_interface_sendto+0xa2>
   20638:	2b01      	cmp	r3, #1
   2063a:	d101      	bne.n	20640 <ip_interface_sendto+0x84>
   2063c:	207f      	movs	r0, #127	; 0x7f
   2063e:	e7f2      	b.n	20626 <ip_interface_sendto+0x6a>
   20640:	68e2      	ldr	r2, [r4, #12]
   20642:	f8db 3004 	ldr.w	r3, [fp, #4]
   20646:	429a      	cmp	r2, r3
   20648:	d001      	beq.n	2064e <ip_interface_sendto+0x92>
   2064a:	206a      	movs	r0, #106	; 0x6a
   2064c:	e7eb      	b.n	20626 <ip_interface_sendto+0x6a>
   2064e:	f89b 3000 	ldrb.w	r3, [fp]
   20652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20654:	4293      	cmp	r3, r2
   20656:	f000 80c5 	beq.w	207e4 <ip_interface_sendto+0x228>
   2065a:	2016      	movs	r0, #22
   2065c:	e7e3      	b.n	20626 <ip_interface_sendto+0x6a>
   2065e:	2b02      	cmp	r3, #2
   20660:	d10f      	bne.n	20682 <ip_interface_sendto+0xc6>
   20662:	6963      	ldr	r3, [r4, #20]
   20664:	2b02      	cmp	r3, #2
   20666:	d103      	bne.n	20670 <ip_interface_sendto+0xb4>
   20668:	6823      	ldr	r3, [r4, #0]
   2066a:	b29b      	uxth	r3, r3
   2066c:	2b05      	cmp	r3, #5
   2066e:	e005      	b.n	2067c <ip_interface_sendto+0xc0>
   20670:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   20674:	d10d      	bne.n	20692 <ip_interface_sendto+0xd6>
   20676:	6823      	ldr	r3, [r4, #0]
   20678:	b29b      	uxth	r3, r3
   2067a:	2b0c      	cmp	r3, #12
   2067c:	d009      	beq.n	20692 <ip_interface_sendto+0xd6>
   2067e:	2080      	movs	r0, #128	; 0x80
   20680:	e7d1      	b.n	20626 <ip_interface_sendto+0x6a>
   20682:	2b01      	cmp	r3, #1
   20684:	d105      	bne.n	20692 <ip_interface_sendto+0xd6>
   20686:	6963      	ldr	r3, [r4, #20]
   20688:	2b01      	cmp	r3, #1
   2068a:	d0ed      	beq.n	20668 <ip_interface_sendto+0xac>
   2068c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   20690:	e7f0      	b.n	20674 <ip_interface_sendto+0xb8>
   20692:	f247 0806 	movw	r8, #28678	; 0x7006
   20696:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20698:	2b00      	cmp	r3, #0
   2069a:	bf08      	it	eq
   2069c:	f04f 33ff 	moveq.w	r3, #4294967295
   206a0:	9306      	str	r3, [sp, #24]
   206a2:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   206a6:	9303      	str	r3, [sp, #12]
   206a8:	6823      	ldr	r3, [r4, #0]
   206aa:	0319      	lsls	r1, r3, #12
   206ac:	d501      	bpl.n	206b2 <ip_interface_sendto+0xf6>
   206ae:	68a0      	ldr	r0, [r4, #8]
   206b0:	e7b9      	b.n	20626 <ip_interface_sendto+0x6a>
   206b2:	6820      	ldr	r0, [r4, #0]
   206b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   206b8:	d107      	bne.n	206ca <ip_interface_sendto+0x10e>
   206ba:	b90f      	cbnz	r7, 206c0 <ip_interface_sendto+0x104>
   206bc:	200b      	movs	r0, #11
   206be:	e7b2      	b.n	20626 <ip_interface_sendto+0x6a>
   206c0:	a906      	add	r1, sp, #24
   206c2:	f7f7 fa3f 	bl	17b44 <nrf_modem_os_timedwait>
   206c6:	2874      	cmp	r0, #116	; 0x74
   206c8:	d0f8      	beq.n	206bc <ip_interface_sendto+0x100>
   206ca:	6823      	ldr	r3, [r4, #0]
   206cc:	039a      	lsls	r2, r3, #14
   206ce:	d5eb      	bpl.n	206a8 <ip_interface_sendto+0xec>
   206d0:	4628      	mov	r0, r5
   206d2:	f009 f831 	bl	29738 <rpc_client_request_alloc>
   206d6:	4606      	mov	r6, r0
   206d8:	2800      	cmp	r0, #0
   206da:	d133      	bne.n	20744 <ip_interface_sendto+0x188>
   206dc:	b927      	cbnz	r7, 206e8 <ip_interface_sendto+0x12c>
   206de:	a907      	add	r1, sp, #28
   206e0:	2000      	movs	r0, #0
   206e2:	f7f7 fa2f 	bl	17b44 <nrf_modem_os_timedwait>
   206e6:	e7e9      	b.n	206bc <ip_interface_sendto+0x100>
   206e8:	a906      	add	r1, sp, #24
   206ea:	f7f7 fa2b 	bl	17b44 <nrf_modem_os_timedwait>
   206ee:	2800      	cmp	r0, #0
   206f0:	d0ee      	beq.n	206d0 <ip_interface_sendto+0x114>
   206f2:	e7e3      	b.n	206bc <ip_interface_sendto+0x100>
   206f4:	a905      	add	r1, sp, #20
   206f6:	f7f7 fa25 	bl	17b44 <nrf_modem_os_timedwait>
   206fa:	e05b      	b.n	207b4 <ip_interface_sendto+0x1f8>
   206fc:	f009 f829 	bl	29752 <rpc_client_message_free>
   20700:	2300      	movs	r3, #0
   20702:	4a3a      	ldr	r2, [pc, #232]	; (207ec <ip_interface_sendto+0x230>)
   20704:	2e01      	cmp	r6, #1
   20706:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   2070a:	d001      	beq.n	20710 <ip_interface_sendto+0x154>
   2070c:	2e12      	cmp	r6, #18
   2070e:	d10e      	bne.n	2072e <ip_interface_sendto+0x172>
   20710:	4b37      	ldr	r3, [pc, #220]	; (207f0 <ip_interface_sendto+0x234>)
   20712:	781b      	ldrb	r3, [r3, #0]
   20714:	b147      	cbz	r7, 20728 <ip_interface_sendto+0x16c>
   20716:	2b00      	cmp	r3, #0
   20718:	d1c6      	bne.n	206a8 <ip_interface_sendto+0xec>
   2071a:	2000      	movs	r0, #0
   2071c:	a906      	add	r1, sp, #24
   2071e:	f7f7 fa11 	bl	17b44 <nrf_modem_os_timedwait>
   20722:	2800      	cmp	r0, #0
   20724:	d0c0      	beq.n	206a8 <ip_interface_sendto+0xec>
   20726:	e7c9      	b.n	206bc <ip_interface_sendto+0x100>
   20728:	2b00      	cmp	r3, #0
   2072a:	d1c7      	bne.n	206bc <ip_interface_sendto+0x100>
   2072c:	e7d7      	b.n	206de <ip_interface_sendto+0x122>
   2072e:	2e03      	cmp	r6, #3
   20730:	d102      	bne.n	20738 <ip_interface_sendto+0x17c>
   20732:	2f00      	cmp	r7, #0
   20734:	d1f1      	bne.n	2071a <ip_interface_sendto+0x15e>
   20736:	e7d2      	b.n	206de <ip_interface_sendto+0x122>
   20738:	2e6a      	cmp	r6, #106	; 0x6a
   2073a:	bf96      	itet	ls
   2073c:	4b2d      	ldrls	r3, [pc, #180]	; (207f4 <ip_interface_sendto+0x238>)
   2073e:	205f      	movhi	r0, #95	; 0x5f
   20740:	5d98      	ldrbls	r0, [r3, r6]
   20742:	e770      	b.n	20626 <ip_interface_sendto+0x6a>
   20744:	230c      	movs	r3, #12
   20746:	2200      	movs	r2, #0
   20748:	7203      	strb	r3, [r0, #8]
   2074a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2074c:	7242      	strb	r2, [r0, #9]
   2074e:	7282      	strb	r2, [r0, #10]
   20750:	72c2      	strb	r2, [r0, #11]
   20752:	f8c0 a014 	str.w	sl, [r0, #20]
   20756:	b11b      	cbz	r3, 20760 <ip_interface_sendto+0x1a4>
   20758:	ea4a 0303 	orr.w	r3, sl, r3
   2075c:	6173      	str	r3, [r6, #20]
   2075e:	62a2      	str	r2, [r4, #40]	; 0x28
   20760:	f1bb 0f00 	cmp.w	fp, #0
   20764:	d015      	beq.n	20792 <ip_interface_sendto+0x1d6>
   20766:	f106 031c 	add.w	r3, r6, #28
   2076a:	9301      	str	r3, [sp, #4]
   2076c:	f10d 0312 	add.w	r3, sp, #18
   20770:	9300      	str	r3, [sp, #0]
   20772:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20774:	ab04      	add	r3, sp, #16
   20776:	4659      	mov	r1, fp
   20778:	68e0      	ldr	r0, [r4, #12]
   2077a:	f009 f855 	bl	29828 <ip_addr_parse>
   2077e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   20782:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   20786:	8332      	strh	r2, [r6, #24]
   20788:	68b2      	ldr	r2, [r6, #8]
   2078a:	8373      	strh	r3, [r6, #26]
   2078c:	3304      	adds	r3, #4
   2078e:	4413      	add	r3, r2
   20790:	60b3      	str	r3, [r6, #8]
   20792:	69a3      	ldr	r3, [r4, #24]
   20794:	6075      	str	r5, [r6, #4]
   20796:	6133      	str	r3, [r6, #16]
   20798:	9b03      	ldr	r3, [sp, #12]
   2079a:	60f3      	str	r3, [r6, #12]
   2079c:	9b02      	ldr	r3, [sp, #8]
   2079e:	b123      	cbz	r3, 207aa <ip_interface_sendto+0x1ee>
   207a0:	462a      	mov	r2, r5
   207a2:	4619      	mov	r1, r3
   207a4:	6830      	ldr	r0, [r6, #0]
   207a6:	f00a fb4f 	bl	2ae48 <memcpy>
   207aa:	4632      	mov	r2, r6
   207ac:	4641      	mov	r1, r8
   207ae:	2004      	movs	r0, #4
   207b0:	f008 ffc8 	bl	29744 <rpc_client_request_send>
   207b4:	4b0d      	ldr	r3, [pc, #52]	; (207ec <ip_interface_sendto+0x230>)
   207b6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   207ba:	2800      	cmp	r0, #0
   207bc:	d09a      	beq.n	206f4 <ip_interface_sendto+0x138>
   207be:	6946      	ldr	r6, [r0, #20]
   207c0:	2e00      	cmp	r6, #0
   207c2:	d19b      	bne.n	206fc <ip_interface_sendto+0x140>
   207c4:	6823      	ldr	r3, [r4, #0]
   207c6:	011b      	lsls	r3, r3, #4
   207c8:	bf49      	itett	mi
   207ca:	6823      	ldrmi	r3, [r4, #0]
   207cc:	6985      	ldrpl	r5, [r0, #24]
   207ce:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   207d2:	6023      	strmi	r3, [r4, #0]
   207d4:	f008 ffbd 	bl	29752 <rpc_client_message_free>
   207d8:	2300      	movs	r3, #0
   207da:	4a04      	ldr	r2, [pc, #16]	; (207ec <ip_interface_sendto+0x230>)
   207dc:	462e      	mov	r6, r5
   207de:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   207e2:	e705      	b.n	205f0 <ip_interface_sendto+0x34>
   207e4:	f247 0807 	movw	r8, #28679	; 0x7007
   207e8:	e755      	b.n	20696 <ip_interface_sendto+0xda>
   207ea:	bf00      	nop
   207ec:	2000eed0 	.word	0x2000eed0
   207f0:	2000f262 	.word	0x2000f262
   207f4:	00030154 	.word	0x00030154

000207f8 <ip_interface_socketoption_get>:
   207f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207fc:	461f      	mov	r7, r3
   207fe:	f04f 33ff 	mov.w	r3, #4294967295
   20802:	b085      	sub	sp, #20
   20804:	9303      	str	r3, [sp, #12]
   20806:	680b      	ldr	r3, [r1, #0]
   20808:	4606      	mov	r6, r0
   2080a:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   2080e:	025d      	lsls	r5, r3, #9
   20810:	460c      	mov	r4, r1
   20812:	4691      	mov	r9, r2
   20814:	d461      	bmi.n	208da <ip_interface_socketoption_get+0xe2>
   20816:	680b      	ldr	r3, [r1, #0]
   20818:	0219      	lsls	r1, r3, #8
   2081a:	d45e      	bmi.n	208da <ip_interface_socketoption_get+0xe2>
   2081c:	6823      	ldr	r3, [r4, #0]
   2081e:	01da      	lsls	r2, r3, #7
   20820:	d45b      	bmi.n	208da <ip_interface_socketoption_get+0xe2>
   20822:	6823      	ldr	r3, [r4, #0]
   20824:	019b      	lsls	r3, r3, #6
   20826:	d458      	bmi.n	208da <ip_interface_socketoption_get+0xe2>
   20828:	6823      	ldr	r3, [r4, #0]
   2082a:	f247 0204 	movw	r2, #28676	; 0x7004
   2082e:	9301      	str	r3, [sp, #4]
   20830:	6823      	ldr	r3, [r4, #0]
   20832:	69a1      	ldr	r1, [r4, #24]
   20834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   20838:	6023      	str	r3, [r4, #0]
   2083a:	f8d8 3000 	ldr.w	r3, [r8]
   2083e:	f009 f81d 	bl	2987c <ip_interface_request_create>
   20842:	4605      	mov	r5, r0
   20844:	2800      	cmp	r0, #0
   20846:	d045      	beq.n	208d4 <ip_interface_socketoption_get+0xdc>
   20848:	6883      	ldr	r3, [r0, #8]
   2084a:	4602      	mov	r2, r0
   2084c:	3308      	adds	r3, #8
   2084e:	6083      	str	r3, [r0, #8]
   20850:	f8c0 9014 	str.w	r9, [r0, #20]
   20854:	f247 0104 	movw	r1, #28676	; 0x7004
   20858:	f8d0 9000 	ldr.w	r9, [r0]
   2085c:	6187      	str	r7, [r0, #24]
   2085e:	2004      	movs	r0, #4
   20860:	f008 ff70 	bl	29744 <rpc_client_request_send>
   20864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   20868:	4630      	mov	r0, r6
   2086a:	4611      	mov	r1, r2
   2086c:	ab03      	add	r3, sp, #12
   2086e:	f009 f818 	bl	298a2 <ip_interface_wait>
   20872:	4683      	mov	fp, r0
   20874:	b9b8      	cbnz	r0, 208a6 <ip_interface_socketoption_get+0xae>
   20876:	4f1a      	ldr	r7, [pc, #104]	; (208e0 <ip_interface_socketoption_get+0xe8>)
   20878:	f8d8 0000 	ldr.w	r0, [r8]
   2087c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   20880:	b1e9      	cbz	r1, 208be <ip_interface_socketoption_get+0xc6>
   20882:	684a      	ldr	r2, [r1, #4]
   20884:	4282      	cmp	r2, r0
   20886:	bf28      	it	cs
   20888:	4602      	movcs	r2, r0
   2088a:	f8c8 2000 	str.w	r2, [r8]
   2088e:	6809      	ldr	r1, [r1, #0]
   20890:	b191      	cbz	r1, 208b8 <ip_interface_socketoption_get+0xc0>
   20892:	4650      	mov	r0, sl
   20894:	f00a fad8 	bl	2ae48 <memcpy>
   20898:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   2089c:	f008 ff59 	bl	29752 <rpc_client_message_free>
   208a0:	2200      	movs	r2, #0
   208a2:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   208a6:	4648      	mov	r0, r9
   208a8:	f008 ff56 	bl	29758 <rpc_client_data_free>
   208ac:	9b01      	ldr	r3, [sp, #4]
   208ae:	6023      	str	r3, [r4, #0]
   208b0:	4658      	mov	r0, fp
   208b2:	b005      	add	sp, #20
   208b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208b8:	f04f 0b16 	mov.w	fp, #22
   208bc:	e7ec      	b.n	20898 <ip_interface_socketoption_get+0xa0>
   208be:	686a      	ldr	r2, [r5, #4]
   208c0:	4649      	mov	r1, r9
   208c2:	4282      	cmp	r2, r0
   208c4:	bf28      	it	cs
   208c6:	4602      	movcs	r2, r0
   208c8:	4650      	mov	r0, sl
   208ca:	f8c8 2000 	str.w	r2, [r8]
   208ce:	f00a fabb 	bl	2ae48 <memcpy>
   208d2:	e7e8      	b.n	208a6 <ip_interface_socketoption_get+0xae>
   208d4:	f04f 0b0c 	mov.w	fp, #12
   208d8:	e7e8      	b.n	208ac <ip_interface_socketoption_get+0xb4>
   208da:	f04f 0b0b 	mov.w	fp, #11
   208de:	e7e7      	b.n	208b0 <ip_interface_socketoption_get+0xb8>
   208e0:	2000eed0 	.word	0x2000eed0

000208e4 <ip_interface_bind>:
   208e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   208e8:	f04f 33ff 	mov.w	r3, #4294967295
   208ec:	4607      	mov	r7, r0
   208ee:	4690      	mov	r8, r2
   208f0:	460e      	mov	r6, r1
   208f2:	9303      	str	r3, [sp, #12]
   208f4:	2900      	cmp	r1, #0
   208f6:	d04d      	beq.n	20994 <ip_interface_bind+0xb0>
   208f8:	2a00      	cmp	r2, #0
   208fa:	d04b      	beq.n	20994 <ip_interface_bind+0xb0>
   208fc:	f7ff fc96 	bl	2022c <interface_socket_from_handle_get>
   20900:	4605      	mov	r5, r0
   20902:	2800      	cmp	r0, #0
   20904:	d048      	beq.n	20998 <ip_interface_bind+0xb4>
   20906:	6803      	ldr	r3, [r0, #0]
   20908:	b29b      	uxth	r3, r3
   2090a:	2b02      	cmp	r3, #2
   2090c:	d144      	bne.n	20998 <ip_interface_bind+0xb4>
   2090e:	6981      	ldr	r1, [r0, #24]
   20910:	2300      	movs	r3, #0
   20912:	f247 0205 	movw	r2, #28677	; 0x7005
   20916:	4638      	mov	r0, r7
   20918:	f008 ffb0 	bl	2987c <ip_interface_request_create>
   2091c:	4604      	mov	r4, r0
   2091e:	2800      	cmp	r0, #0
   20920:	d03c      	beq.n	2099c <ip_interface_bind+0xb8>
   20922:	6883      	ldr	r3, [r0, #8]
   20924:	4642      	mov	r2, r8
   20926:	3304      	adds	r3, #4
   20928:	6083      	str	r3, [r0, #8]
   2092a:	f100 0318 	add.w	r3, r0, #24
   2092e:	9301      	str	r3, [sp, #4]
   20930:	f10d 030a 	add.w	r3, sp, #10
   20934:	9300      	str	r3, [sp, #0]
   20936:	4631      	mov	r1, r6
   20938:	68e8      	ldr	r0, [r5, #12]
   2093a:	ab02      	add	r3, sp, #8
   2093c:	f008 ff74 	bl	29828 <ip_addr_parse>
   20940:	bb08      	cbnz	r0, 20986 <ip_interface_bind+0xa2>
   20942:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20946:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2094a:	82a3      	strh	r3, [r4, #20]
   2094c:	68a3      	ldr	r3, [r4, #8]
   2094e:	4e14      	ldr	r6, [pc, #80]	; (209a0 <ip_interface_bind+0xbc>)
   20950:	4413      	add	r3, r2
   20952:	60a3      	str	r3, [r4, #8]
   20954:	682b      	ldr	r3, [r5, #0]
   20956:	82e2      	strh	r2, [r4, #22]
   20958:	4033      	ands	r3, r6
   2095a:	f043 0303 	orr.w	r3, r3, #3
   2095e:	4622      	mov	r2, r4
   20960:	f247 0105 	movw	r1, #28677	; 0x7005
   20964:	2004      	movs	r0, #4
   20966:	602b      	str	r3, [r5, #0]
   20968:	f008 feec 	bl	29744 <rpc_client_request_send>
   2096c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20970:	2104      	movs	r1, #4
   20972:	4638      	mov	r0, r7
   20974:	ab03      	add	r3, sp, #12
   20976:	f008 ff94 	bl	298a2 <ip_interface_wait>
   2097a:	b140      	cbz	r0, 2098e <ip_interface_bind+0xaa>
   2097c:	682b      	ldr	r3, [r5, #0]
   2097e:	4033      	ands	r3, r6
   20980:	f043 0302 	orr.w	r3, r3, #2
   20984:	602b      	str	r3, [r5, #0]
   20986:	f007 ff68 	bl	2885a <nrf_modem_os_errno_set>
   2098a:	f04f 30ff 	mov.w	r0, #4294967295
   2098e:	b004      	add	sp, #16
   20990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20994:	2016      	movs	r0, #22
   20996:	e7f6      	b.n	20986 <ip_interface_bind+0xa2>
   20998:	2009      	movs	r0, #9
   2099a:	e7f4      	b.n	20986 <ip_interface_bind+0xa2>
   2099c:	200c      	movs	r0, #12
   2099e:	e7f2      	b.n	20986 <ip_interface_bind+0xa2>
   209a0:	ffff0000 	.word	0xffff0000

000209a4 <ip_interface_listen>:
   209a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   209a6:	4605      	mov	r5, r0
   209a8:	f7ff fc40 	bl	2022c <interface_socket_from_handle_get>
   209ac:	4604      	mov	r4, r0
   209ae:	2800      	cmp	r0, #0
   209b0:	d03a      	beq.n	20a28 <ip_interface_listen+0x84>
   209b2:	6803      	ldr	r3, [r0, #0]
   209b4:	b29b      	uxth	r3, r3
   209b6:	2b04      	cmp	r3, #4
   209b8:	d003      	beq.n	209c2 <ip_interface_listen+0x1e>
   209ba:	6803      	ldr	r3, [r0, #0]
   209bc:	b29b      	uxth	r3, r3
   209be:	2b0b      	cmp	r3, #11
   209c0:	d134      	bne.n	20a2c <ip_interface_listen+0x88>
   209c2:	2100      	movs	r1, #0
   209c4:	4628      	mov	r0, r5
   209c6:	4a1c      	ldr	r2, [pc, #112]	; (20a38 <ip_interface_listen+0x94>)
   209c8:	f7ff fb9c 	bl	20104 <interface_socket_packet_handler_update>
   209cc:	4603      	mov	r3, r0
   209ce:	bb78      	cbnz	r0, 20a30 <ip_interface_listen+0x8c>
   209d0:	f247 0208 	movw	r2, #28680	; 0x7008
   209d4:	4628      	mov	r0, r5
   209d6:	69a1      	ldr	r1, [r4, #24]
   209d8:	f008 ff50 	bl	2987c <ip_interface_request_create>
   209dc:	4602      	mov	r2, r0
   209de:	b348      	cbz	r0, 20a34 <ip_interface_listen+0x90>
   209e0:	6883      	ldr	r3, [r0, #8]
   209e2:	4e16      	ldr	r6, [pc, #88]	; (20a3c <ip_interface_listen+0x98>)
   209e4:	3304      	adds	r3, #4
   209e6:	6083      	str	r3, [r0, #8]
   209e8:	6823      	ldr	r3, [r4, #0]
   209ea:	f247 0108 	movw	r1, #28680	; 0x7008
   209ee:	4033      	ands	r3, r6
   209f0:	f043 0306 	orr.w	r3, r3, #6
   209f4:	2004      	movs	r0, #4
   209f6:	6023      	str	r3, [r4, #0]
   209f8:	f008 fea4 	bl	29744 <rpc_client_request_send>
   209fc:	f04f 33ff 	mov.w	r3, #4294967295
   20a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20a04:	9301      	str	r3, [sp, #4]
   20a06:	2107      	movs	r1, #7
   20a08:	4628      	mov	r0, r5
   20a0a:	ab01      	add	r3, sp, #4
   20a0c:	f008 ff49 	bl	298a2 <ip_interface_wait>
   20a10:	b140      	cbz	r0, 20a24 <ip_interface_listen+0x80>
   20a12:	6823      	ldr	r3, [r4, #0]
   20a14:	4033      	ands	r3, r6
   20a16:	f043 0304 	orr.w	r3, r3, #4
   20a1a:	6023      	str	r3, [r4, #0]
   20a1c:	f007 ff1d 	bl	2885a <nrf_modem_os_errno_set>
   20a20:	f04f 30ff 	mov.w	r0, #4294967295
   20a24:	b002      	add	sp, #8
   20a26:	bd70      	pop	{r4, r5, r6, pc}
   20a28:	2009      	movs	r0, #9
   20a2a:	e7f7      	b.n	20a1c <ip_interface_listen+0x78>
   20a2c:	2016      	movs	r0, #22
   20a2e:	e7f5      	b.n	20a1c <ip_interface_listen+0x78>
   20a30:	200b      	movs	r0, #11
   20a32:	e7f3      	b.n	20a1c <ip_interface_listen+0x78>
   20a34:	200c      	movs	r0, #12
   20a36:	e7f1      	b.n	20a1c <ip_interface_listen+0x78>
   20a38:	000297d5 	.word	0x000297d5
   20a3c:	ffff0000 	.word	0xffff0000

00020a40 <ip_interface_accept>:
   20a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a44:	2500      	movs	r5, #0
   20a46:	4680      	mov	r8, r0
   20a48:	460f      	mov	r7, r1
   20a4a:	4691      	mov	r9, r2
   20a4c:	9500      	str	r5, [sp, #0]
   20a4e:	f7ff fbed 	bl	2022c <interface_socket_from_handle_get>
   20a52:	4604      	mov	r4, r0
   20a54:	2800      	cmp	r0, #0
   20a56:	f000 80c7 	beq.w	20be8 <_flash_used+0x138>
   20a5a:	6903      	ldr	r3, [r0, #16]
   20a5c:	2b01      	cmp	r3, #1
   20a5e:	f040 80c6 	bne.w	20bee <_flash_used+0x13e>
   20a62:	6803      	ldr	r3, [r0, #0]
   20a64:	b29b      	uxth	r3, r3
   20a66:	2b07      	cmp	r3, #7
   20a68:	f040 80c3 	bne.w	20bf2 <_flash_used+0x142>
   20a6c:	f04f 33ff 	mov.w	r3, #4294967295
   20a70:	9301      	str	r3, [sp, #4]
   20a72:	6803      	ldr	r3, [r0, #0]
   20a74:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   20a78:	d15c      	bne.n	20b34 <_flash_used+0x84>
   20a7a:	6803      	ldr	r3, [r0, #0]
   20a7c:	03db      	lsls	r3, r3, #15
   20a7e:	d45d      	bmi.n	20b3c <_flash_used+0x8c>
   20a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20a84:	4640      	mov	r0, r8
   20a86:	4611      	mov	r1, r2
   20a88:	ab01      	add	r3, sp, #4
   20a8a:	f008 ff0a 	bl	298a2 <ip_interface_wait>
   20a8e:	4606      	mov	r6, r0
   20a90:	6825      	ldr	r5, [r4, #0]
   20a92:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   20a96:	d053      	beq.n	20b40 <_flash_used+0x90>
   20a98:	4668      	mov	r0, sp
   20a9a:	4a58      	ldr	r2, [pc, #352]	; (20bfc <_flash_used+0x14c>)
   20a9c:	6921      	ldr	r1, [r4, #16]
   20a9e:	f7ff faff 	bl	200a0 <interface_socket_allocate>
   20aa2:	9b00      	ldr	r3, [sp, #0]
   20aa4:	4605      	mov	r5, r0
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	f000 80a5 	beq.w	20bf6 <_flash_used+0x146>
   20aac:	6962      	ldr	r2, [r4, #20]
   20aae:	4640      	mov	r0, r8
   20ab0:	615a      	str	r2, [r3, #20]
   20ab2:	68e2      	ldr	r2, [r4, #12]
   20ab4:	69a1      	ldr	r1, [r4, #24]
   20ab6:	60da      	str	r2, [r3, #12]
   20ab8:	6922      	ldr	r2, [r4, #16]
   20aba:	611a      	str	r2, [r3, #16]
   20abc:	f247 020c 	movw	r2, #28684	; 0x700c
   20ac0:	2300      	movs	r3, #0
   20ac2:	f008 fedb 	bl	2987c <ip_interface_request_create>
   20ac6:	4602      	mov	r2, r0
   20ac8:	2800      	cmp	r0, #0
   20aca:	f000 8094 	beq.w	20bf6 <_flash_used+0x146>
   20ace:	6823      	ldr	r3, [r4, #0]
   20ad0:	f8df b130 	ldr.w	fp, [pc, #304]	; 20c04 <_flash_used+0x154>
   20ad4:	f247 010c 	movw	r1, #28684	; 0x700c
   20ad8:	ea03 030b 	and.w	r3, r3, fp
   20adc:	f043 0308 	orr.w	r3, r3, #8
   20ae0:	2004      	movs	r0, #4
   20ae2:	6023      	str	r3, [r4, #0]
   20ae4:	f008 fe2e 	bl	29744 <rpc_client_request_send>
   20ae8:	6823      	ldr	r3, [r4, #0]
   20aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20aee:	ea23 030a 	bic.w	r3, r3, sl
   20af2:	6023      	str	r3, [r4, #0]
   20af4:	2109      	movs	r1, #9
   20af6:	ab01      	add	r3, sp, #4
   20af8:	4640      	mov	r0, r8
   20afa:	f008 fed2 	bl	298a2 <ip_interface_wait>
   20afe:	6823      	ldr	r3, [r4, #0]
   20b00:	4606      	mov	r6, r0
   20b02:	ea43 030a 	orr.w	r3, r3, sl
   20b06:	6023      	str	r3, [r4, #0]
   20b08:	b1e0      	cbz	r0, 20b44 <_flash_used+0x94>
   20b0a:	6823      	ldr	r3, [r4, #0]
   20b0c:	ea03 030b 	and.w	r3, r3, fp
   20b10:	f043 0307 	orr.w	r3, r3, #7
   20b14:	6023      	str	r3, [r4, #0]
   20b16:	6823      	ldr	r3, [r4, #0]
   20b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   20b1c:	6023      	str	r3, [r4, #0]
   20b1e:	9b00      	ldr	r3, [sp, #0]
   20b20:	b113      	cbz	r3, 20b28 <_flash_used+0x78>
   20b22:	4628      	mov	r0, r5
   20b24:	f7ff fae2 	bl	200ec <interface_socket_free>
   20b28:	4630      	mov	r0, r6
   20b2a:	f007 fe96 	bl	2885a <nrf_modem_os_errno_set>
   20b2e:	f04f 30ff 	mov.w	r0, #4294967295
   20b32:	e046      	b.n	20bc2 <_flash_used+0x112>
   20b34:	260b      	movs	r6, #11
   20b36:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   20b3a:	e7a9      	b.n	20a90 <ip_interface_accept+0x50>
   20b3c:	2616      	movs	r6, #22
   20b3e:	e7a7      	b.n	20a90 <ip_interface_accept+0x50>
   20b40:	2e00      	cmp	r6, #0
   20b42:	d1ec      	bne.n	20b1e <_flash_used+0x6e>
   20b44:	4e2e      	ldr	r6, [pc, #184]	; (20c00 <_flash_used+0x150>)
   20b46:	9800      	ldr	r0, [sp, #0]
   20b48:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   20b4c:	699a      	ldr	r2, [r3, #24]
   20b4e:	6182      	str	r2, [r0, #24]
   20b50:	b1c7      	cbz	r7, 20b84 <_flash_used+0xd4>
   20b52:	68c2      	ldr	r2, [r0, #12]
   20b54:	2a0a      	cmp	r2, #10
   20b56:	d137      	bne.n	20bc8 <_flash_used+0x118>
   20b58:	f8d9 1000 	ldr.w	r1, [r9]
   20b5c:	2924      	cmp	r1, #36	; 0x24
   20b5e:	d111      	bne.n	20b84 <_flash_used+0xd4>
   20b60:	7039      	strb	r1, [r7, #0]
   20b62:	607a      	str	r2, [r7, #4]
   20b64:	7f1a      	ldrb	r2, [r3, #28]
   20b66:	7f59      	ldrb	r1, [r3, #29]
   20b68:	3710      	adds	r7, #16
   20b6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20b6e:	f827 2c08 	strh.w	r2, [r7, #-8]
   20b72:	f103 0220 	add.w	r2, r3, #32
   20b76:	3330      	adds	r3, #48	; 0x30
   20b78:	f852 1b04 	ldr.w	r1, [r2], #4
   20b7c:	429a      	cmp	r2, r3
   20b7e:	f847 1b04 	str.w	r1, [r7], #4
   20b82:	d1f9      	bne.n	20b78 <_flash_used+0xc8>
   20b84:	6802      	ldr	r2, [r0, #0]
   20b86:	491f      	ldr	r1, [pc, #124]	; (20c04 <_flash_used+0x154>)
   20b88:	400a      	ands	r2, r1
   20b8a:	f042 0205 	orr.w	r2, r2, #5
   20b8e:	6002      	str	r2, [r0, #0]
   20b90:	6802      	ldr	r2, [r0, #0]
   20b92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   20b96:	6002      	str	r2, [r0, #0]
   20b98:	6802      	ldr	r2, [r0, #0]
   20b9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   20b9e:	6002      	str	r2, [r0, #0]
   20ba0:	6823      	ldr	r3, [r4, #0]
   20ba2:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   20ba6:	400b      	ands	r3, r1
   20ba8:	f043 0307 	orr.w	r3, r3, #7
   20bac:	6023      	str	r3, [r4, #0]
   20bae:	6823      	ldr	r3, [r4, #0]
   20bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   20bb4:	6023      	str	r3, [r4, #0]
   20bb6:	f008 fdcc 	bl	29752 <rpc_client_message_free>
   20bba:	2300      	movs	r3, #0
   20bbc:	4628      	mov	r0, r5
   20bbe:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   20bc2:	b003      	add	sp, #12
   20bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bc8:	2a02      	cmp	r2, #2
   20bca:	d1db      	bne.n	20b84 <_flash_used+0xd4>
   20bcc:	f8d9 1000 	ldr.w	r1, [r9]
   20bd0:	2910      	cmp	r1, #16
   20bd2:	d1d7      	bne.n	20b84 <_flash_used+0xd4>
   20bd4:	7039      	strb	r1, [r7, #0]
   20bd6:	607a      	str	r2, [r7, #4]
   20bd8:	7f1a      	ldrb	r2, [r3, #28]
   20bda:	7f59      	ldrb	r1, [r3, #29]
   20bdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20be0:	813a      	strh	r2, [r7, #8]
   20be2:	6a1b      	ldr	r3, [r3, #32]
   20be4:	60fb      	str	r3, [r7, #12]
   20be6:	e7cd      	b.n	20b84 <_flash_used+0xd4>
   20be8:	2609      	movs	r6, #9
   20bea:	4605      	mov	r5, r0
   20bec:	e797      	b.n	20b1e <_flash_used+0x6e>
   20bee:	265f      	movs	r6, #95	; 0x5f
   20bf0:	e795      	b.n	20b1e <_flash_used+0x6e>
   20bf2:	2616      	movs	r6, #22
   20bf4:	e793      	b.n	20b1e <_flash_used+0x6e>
   20bf6:	260c      	movs	r6, #12
   20bf8:	e791      	b.n	20b1e <_flash_used+0x6e>
   20bfa:	bf00      	nop
   20bfc:	000297d5 	.word	0x000297d5
   20c00:	2000eed0 	.word	0x2000eed0
   20c04:	ffff0000 	.word	0xffff0000

00020c08 <ip_interface_setopt>:
   20c08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20c0c:	2901      	cmp	r1, #1
   20c0e:	4606      	mov	r6, r0
   20c10:	4690      	mov	r8, r2
   20c12:	461d      	mov	r5, r3
   20c14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20c16:	d008      	beq.n	20c2a <ip_interface_setopt+0x22>
   20c18:	206d      	movs	r0, #109	; 0x6d
   20c1a:	f007 fe1e 	bl	2885a <nrf_modem_os_errno_set>
   20c1e:	f04f 34ff 	mov.w	r4, #4294967295
   20c22:	4620      	mov	r0, r4
   20c24:	b004      	add	sp, #16
   20c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c2a:	f7ff faff 	bl	2022c <interface_socket_from_handle_get>
   20c2e:	4604      	mov	r4, r0
   20c30:	b908      	cbnz	r0, 20c36 <ip_interface_setopt+0x2e>
   20c32:	2009      	movs	r0, #9
   20c34:	e7f1      	b.n	20c1a <ip_interface_setopt+0x12>
   20c36:	f1a8 0319 	sub.w	r3, r8, #25
   20c3a:	2b1e      	cmp	r3, #30
   20c3c:	f200 8086 	bhi.w	20d4c <ip_interface_setopt+0x144>
   20c40:	e8df f003 	tbb	[pc, r3]
   20c44:	84848410 	.word	0x84848410
   20c48:	51493d84 	.word	0x51493d84
   20c4c:	84848484 	.word	0x84848484
   20c50:	59848484 	.word	0x59848484
   20c54:	84848484 	.word	0x84848484
   20c58:	84848484 	.word	0x84848484
   20c5c:	73666184 	.word	0x73666184
   20c60:	7976      	.short	0x7976
   20c62:	7c          	.byte	0x7c
   20c63:	00          	.byte	0x00
   20c64:	b90d      	cbnz	r5, 20c6a <ip_interface_setopt+0x62>
   20c66:	200e      	movs	r0, #14
   20c68:	e7d7      	b.n	20c1a <ip_interface_setopt+0x12>
   20c6a:	4628      	mov	r0, r5
   20c6c:	f7f0 f9a6 	bl	10fbc <strlen>
   20c70:	42b8      	cmp	r0, r7
   20c72:	d1f8      	bne.n	20c66 <ip_interface_setopt+0x5e>
   20c74:	6823      	ldr	r3, [r4, #0]
   20c76:	b29b      	uxth	r3, r3
   20c78:	2b02      	cmp	r3, #2
   20c7a:	d1da      	bne.n	20c32 <ip_interface_setopt+0x2a>
   20c7c:	4628      	mov	r0, r5
   20c7e:	4937      	ldr	r1, [pc, #220]	; (20d5c <ip_interface_setopt+0x154>)
   20c80:	f00a fa77 	bl	2b172 <strstr>
   20c84:	b108      	cbz	r0, 20c8a <ip_interface_setopt+0x82>
   20c86:	4285      	cmp	r5, r0
   20c88:	d001      	beq.n	20c8e <ip_interface_setopt+0x86>
   20c8a:	2016      	movs	r0, #22
   20c8c:	e7c5      	b.n	20c1a <ip_interface_setopt+0x12>
   20c8e:	4833      	ldr	r0, [pc, #204]	; (20d5c <ip_interface_setopt+0x154>)
   20c90:	f7f0 f994 	bl	10fbc <strlen>
   20c94:	220a      	movs	r2, #10
   20c96:	2100      	movs	r1, #0
   20c98:	4428      	add	r0, r5
   20c9a:	f004 f9d3 	bl	25044 <strtoul>
   20c9e:	2304      	movs	r3, #4
   20ca0:	9301      	str	r3, [sp, #4]
   20ca2:	ab03      	add	r3, sp, #12
   20ca4:	4621      	mov	r1, r4
   20ca6:	9003      	str	r0, [sp, #12]
   20ca8:	9300      	str	r3, [sp, #0]
   20caa:	2208      	movs	r2, #8
   20cac:	f243 0310 	movw	r3, #12304	; 0x3010
   20cb0:	4630      	mov	r0, r6
   20cb2:	f008 ff9e 	bl	29bf2 <ip_interface_socketoption_send>
   20cb6:	4604      	mov	r4, r0
   20cb8:	2800      	cmp	r0, #0
   20cba:	d0b2      	beq.n	20c22 <ip_interface_setopt+0x1a>
   20cbc:	e7ad      	b.n	20c1a <ip_interface_setopt+0x12>
   20cbe:	4602      	mov	r2, r0
   20cc0:	4633      	mov	r3, r6
   20cc2:	f248 0101 	movw	r1, #32769	; 0x8001
   20cc6:	f44f 7000 	mov.w	r0, #512	; 0x200
   20cca:	e9cd 5700 	strd	r5, r7, [sp]
   20cce:	f008 ffdb 	bl	29c88 <setopt_check_and_send_int>
   20cd2:	4604      	mov	r4, r0
   20cd4:	e7a5      	b.n	20c22 <ip_interface_setopt+0x1a>
   20cd6:	4602      	mov	r2, r0
   20cd8:	4633      	mov	r3, r6
   20cda:	f244 0110 	movw	r1, #16400	; 0x4010
   20cde:	2004      	movs	r0, #4
   20ce0:	e9cd 5700 	strd	r5, r7, [sp]
   20ce4:	e7f3      	b.n	20cce <ip_interface_setopt+0xc6>
   20ce6:	4602      	mov	r2, r0
   20ce8:	4633      	mov	r3, r6
   20cea:	f246 0110 	movw	r1, #24592	; 0x6010
   20cee:	2006      	movs	r0, #6
   20cf0:	e9cd 5700 	strd	r5, r7, [sp]
   20cf4:	e7eb      	b.n	20cce <ip_interface_setopt+0xc6>
   20cf6:	4602      	mov	r2, r0
   20cf8:	4633      	mov	r3, r6
   20cfa:	f241 0104 	movw	r1, #4100	; 0x1004
   20cfe:	2008      	movs	r0, #8
   20d00:	e9cd 5700 	strd	r5, r7, [sp]
   20d04:	e7e3      	b.n	20cce <ip_interface_setopt+0xc6>
   20d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   20d0a:	62a3      	str	r3, [r4, #40]	; 0x28
   20d0c:	2400      	movs	r4, #0
   20d0e:	e788      	b.n	20c22 <ip_interface_setopt+0x1a>
   20d10:	2400      	movs	r4, #0
   20d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   20d16:	4622      	mov	r2, r4
   20d18:	6283      	str	r3, [r0, #40]	; 0x28
   20d1a:	4621      	mov	r1, r4
   20d1c:	4623      	mov	r3, r4
   20d1e:	4630      	mov	r0, r6
   20d20:	e9cd 4400 	strd	r4, r4, [sp]
   20d24:	f7ff fc4a 	bl	205bc <ip_interface_sendto>
   20d28:	e77b      	b.n	20c22 <ip_interface_setopt+0x1a>
   20d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20d2e:	e7ec      	b.n	20d0a <ip_interface_setopt+0x102>
   20d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   20d34:	e7e9      	b.n	20d0a <ip_interface_setopt+0x102>
   20d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d3a:	e7e6      	b.n	20d0a <ip_interface_setopt+0x102>
   20d3c:	4602      	mov	r2, r0
   20d3e:	4633      	mov	r3, r6
   20d40:	f245 0106 	movw	r1, #20486	; 0x5006
   20d44:	2001      	movs	r0, #1
   20d46:	e9cd 5700 	strd	r5, r7, [sp]
   20d4a:	e7c0      	b.n	20cce <ip_interface_setopt+0xc6>
   20d4c:	462b      	mov	r3, r5
   20d4e:	4642      	mov	r2, r8
   20d50:	2101      	movs	r1, #1
   20d52:	4630      	mov	r0, r6
   20d54:	9700      	str	r7, [sp, #0]
   20d56:	f7ff fa79 	bl	2024c <interface_socket_setopt>
   20d5a:	e7ba      	b.n	20cd2 <ip_interface_setopt+0xca>
   20d5c:	00030142 	.word	0x00030142

00020d60 <ip_interface_getaddrinfo>:
   20d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d64:	b087      	sub	sp, #28
   20d66:	9301      	str	r3, [sp, #4]
   20d68:	4b72      	ldr	r3, [pc, #456]	; (20f34 <ip_interface_getaddrinfo+0x1d4>)
   20d6a:	4680      	mov	r8, r0
   20d6c:	781b      	ldrb	r3, [r3, #0]
   20d6e:	460f      	mov	r7, r1
   20d70:	4614      	mov	r4, r2
   20d72:	b93b      	cbnz	r3, 20d84 <ip_interface_getaddrinfo+0x24>
   20d74:	2075      	movs	r0, #117	; 0x75
   20d76:	f007 fd70 	bl	2885a <nrf_modem_os_errno_set>
   20d7a:	f240 1015 	movw	r0, #277	; 0x115
   20d7e:	b007      	add	sp, #28
   20d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d84:	4d6c      	ldr	r5, [pc, #432]	; (20f38 <ip_interface_getaddrinfo+0x1d8>)
   20d86:	682e      	ldr	r6, [r5, #0]
   20d88:	2e00      	cmp	r6, #0
   20d8a:	f040 80cf 	bne.w	20f2c <ip_interface_getaddrinfo+0x1cc>
   20d8e:	2301      	movs	r3, #1
   20d90:	486a      	ldr	r0, [pc, #424]	; (20f3c <ip_interface_getaddrinfo+0x1dc>)
   20d92:	496b      	ldr	r1, [pc, #428]	; (20f40 <ip_interface_getaddrinfo+0x1e0>)
   20d94:	4a6b      	ldr	r2, [pc, #428]	; (20f44 <ip_interface_getaddrinfo+0x1e4>)
   20d96:	602b      	str	r3, [r5, #0]
   20d98:	6003      	str	r3, [r0, #0]
   20d9a:	4b6b      	ldr	r3, [pc, #428]	; (20f48 <ip_interface_getaddrinfo+0x1e8>)
   20d9c:	468a      	mov	sl, r1
   20d9e:	4691      	mov	r9, r2
   20da0:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 20f58 <ip_interface_getaddrinfo+0x1f8>
   20da4:	600e      	str	r6, [r1, #0]
   20da6:	6016      	str	r6, [r2, #0]
   20da8:	801e      	strh	r6, [r3, #0]
   20daa:	9002      	str	r0, [sp, #8]
   20dac:	b194      	cbz	r4, 20dd4 <ip_interface_getaddrinfo+0x74>
   20dae:	68e2      	ldr	r2, [r4, #12]
   20db0:	b182      	cbz	r2, 20dd4 <ip_interface_getaddrinfo+0x74>
   20db2:	f8cb 2000 	str.w	r2, [fp]
   20db6:	b93f      	cbnz	r7, 20dc8 <ip_interface_getaddrinfo+0x68>
   20db8:	68a0      	ldr	r0, [r4, #8]
   20dba:	2803      	cmp	r0, #3
   20dbc:	d145      	bne.n	20e4a <ip_interface_getaddrinfo+0xea>
   20dbe:	2300      	movs	r3, #0
   20dc0:	f44f 7089 	mov.w	r0, #274	; 0x112
   20dc4:	602b      	str	r3, [r5, #0]
   20dc6:	e7da      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20dc8:	6822      	ldr	r2, [r4, #0]
   20dca:	04d1      	lsls	r1, r2, #19
   20dcc:	d508      	bpl.n	20de0 <ip_interface_getaddrinfo+0x80>
   20dce:	0552      	lsls	r2, r2, #21
   20dd0:	d406      	bmi.n	20de0 <ip_interface_getaddrinfo+0x80>
   20dd2:	e7f1      	b.n	20db8 <ip_interface_getaddrinfo+0x58>
   20dd4:	2201      	movs	r2, #1
   20dd6:	f8cb 2000 	str.w	r2, [fp]
   20dda:	b187      	cbz	r7, 20dfe <ip_interface_getaddrinfo+0x9e>
   20ddc:	2c00      	cmp	r4, #0
   20dde:	d1f3      	bne.n	20dc8 <ip_interface_getaddrinfo+0x68>
   20de0:	220a      	movs	r2, #10
   20de2:	2100      	movs	r1, #0
   20de4:	4638      	mov	r0, r7
   20de6:	f004 f809 	bl	24dfc <strtol>
   20dea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   20dee:	1e41      	subs	r1, r0, #1
   20df0:	4291      	cmp	r1, r2
   20df2:	4b55      	ldr	r3, [pc, #340]	; (20f48 <ip_interface_getaddrinfo+0x1e8>)
   20df4:	d8e3      	bhi.n	20dbe <ip_interface_getaddrinfo+0x5e>
   20df6:	0202      	lsls	r2, r0, #8
   20df8:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   20dfc:	8018      	strh	r0, [r3, #0]
   20dfe:	2c00      	cmp	r4, #0
   20e00:	d1da      	bne.n	20db8 <ip_interface_getaddrinfo+0x58>
   20e02:	f1b8 0f00 	cmp.w	r8, #0
   20e06:	d003      	beq.n	20e10 <ip_interface_getaddrinfo+0xb0>
   20e08:	4640      	mov	r0, r8
   20e0a:	f7f0 f8d7 	bl	10fbc <strlen>
   20e0e:	4606      	mov	r6, r0
   20e10:	2f00      	cmp	r7, #0
   20e12:	d03b      	beq.n	20e8c <ip_interface_getaddrinfo+0x12c>
   20e14:	2c00      	cmp	r4, #0
   20e16:	d039      	beq.n	20e8c <ip_interface_getaddrinfo+0x12c>
   20e18:	6823      	ldr	r3, [r4, #0]
   20e1a:	04db      	lsls	r3, r3, #19
   20e1c:	d536      	bpl.n	20e8c <ip_interface_getaddrinfo+0x12c>
   20e1e:	213a      	movs	r1, #58	; 0x3a
   20e20:	4638      	mov	r0, r7
   20e22:	f00a f94b 	bl	2b0bc <strchr>
   20e26:	bb40      	cbnz	r0, 20e7a <ip_interface_getaddrinfo+0x11a>
   20e28:	4601      	mov	r1, r0
   20e2a:	220a      	movs	r2, #10
   20e2c:	4638      	mov	r0, r7
   20e2e:	f004 f909 	bl	25044 <strtoul>
   20e32:	4633      	mov	r3, r6
   20e34:	f247 020d 	movw	r2, #28685	; 0x700d
   20e38:	4601      	mov	r1, r0
   20e3a:	f008 fd1f 	bl	2987c <ip_interface_request_create>
   20e3e:	4607      	mov	r7, r0
   20e40:	bb38      	cbnz	r0, 20e92 <ip_interface_getaddrinfo+0x132>
   20e42:	6028      	str	r0, [r5, #0]
   20e44:	f240 100f 	movw	r0, #271	; 0x10f
   20e48:	e799      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20e4a:	6863      	ldr	r3, [r4, #4]
   20e4c:	2b0a      	cmp	r3, #10
   20e4e:	d007      	beq.n	20e60 <ip_interface_getaddrinfo+0x100>
   20e50:	f033 0302 	bics.w	r3, r3, #2
   20e54:	d004      	beq.n	20e60 <ip_interface_getaddrinfo+0x100>
   20e56:	2300      	movs	r3, #0
   20e58:	f44f 7087 	mov.w	r0, #270	; 0x10e
   20e5c:	602b      	str	r3, [r5, #0]
   20e5e:	e78e      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20e60:	2301      	movs	r3, #1
   20e62:	68e1      	ldr	r1, [r4, #12]
   20e64:	aa05      	add	r2, sp, #20
   20e66:	9305      	str	r3, [sp, #20]
   20e68:	f008 fcc0 	bl	297ec <protocol_verify>
   20e6c:	2800      	cmp	r0, #0
   20e6e:	d0c8      	beq.n	20e02 <ip_interface_getaddrinfo+0xa2>
   20e70:	2300      	movs	r3, #0
   20e72:	f240 1013 	movw	r0, #275	; 0x113
   20e76:	602b      	str	r3, [r5, #0]
   20e78:	e781      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20e7a:	9003      	str	r0, [sp, #12]
   20e7c:	4833      	ldr	r0, [pc, #204]	; (20f4c <ip_interface_getaddrinfo+0x1ec>)
   20e7e:	f7f0 f89d 	bl	10fbc <strlen>
   20e82:	9b03      	ldr	r3, [sp, #12]
   20e84:	220a      	movs	r2, #10
   20e86:	2100      	movs	r1, #0
   20e88:	4418      	add	r0, r3
   20e8a:	e7d0      	b.n	20e2e <ip_interface_getaddrinfo+0xce>
   20e8c:	f04f 30ff 	mov.w	r0, #4294967295
   20e90:	e7cf      	b.n	20e32 <ip_interface_getaddrinfo+0xd2>
   20e92:	2c00      	cmp	r4, #0
   20e94:	d03a      	beq.n	20f0c <ip_interface_getaddrinfo+0x1ac>
   20e96:	68a3      	ldr	r3, [r4, #8]
   20e98:	9a02      	ldr	r2, [sp, #8]
   20e9a:	2b02      	cmp	r3, #2
   20e9c:	6013      	str	r3, [r2, #0]
   20e9e:	6862      	ldr	r2, [r4, #4]
   20ea0:	bf08      	it	eq
   20ea2:	f8cb 3000 	streq.w	r3, [fp]
   20ea6:	3a02      	subs	r2, #2
   20ea8:	2a08      	cmp	r2, #8
   20eaa:	bf8e      	itee	hi
   20eac:	2200      	movhi	r2, #0
   20eae:	4928      	ldrls	r1, [pc, #160]	; (20f50 <ip_interface_getaddrinfo+0x1f0>)
   20eb0:	568a      	ldrsbls	r2, [r1, r2]
   20eb2:	6182      	str	r2, [r0, #24]
   20eb4:	68e2      	ldr	r2, [r4, #12]
   20eb6:	61c3      	str	r3, [r0, #28]
   20eb8:	2300      	movs	r3, #0
   20eba:	6202      	str	r2, [r0, #32]
   20ebc:	7503      	strb	r3, [r0, #20]
   20ebe:	7543      	strb	r3, [r0, #21]
   20ec0:	7583      	strb	r3, [r0, #22]
   20ec2:	75c3      	strb	r3, [r0, #23]
   20ec4:	68bb      	ldr	r3, [r7, #8]
   20ec6:	3310      	adds	r3, #16
   20ec8:	60bb      	str	r3, [r7, #8]
   20eca:	f1b8 0f00 	cmp.w	r8, #0
   20ece:	d005      	beq.n	20edc <ip_interface_getaddrinfo+0x17c>
   20ed0:	6838      	ldr	r0, [r7, #0]
   20ed2:	b118      	cbz	r0, 20edc <ip_interface_getaddrinfo+0x17c>
   20ed4:	4632      	mov	r2, r6
   20ed6:	4641      	mov	r1, r8
   20ed8:	f009 ffb6 	bl	2ae48 <memcpy>
   20edc:	463a      	mov	r2, r7
   20ede:	f247 010d 	movw	r1, #28685	; 0x700d
   20ee2:	2004      	movs	r0, #4
   20ee4:	f008 fc2e 	bl	29744 <rpc_client_request_send>
   20ee8:	f04f 33ff 	mov.w	r3, #4294967295
   20eec:	9305      	str	r3, [sp, #20]
   20eee:	4638      	mov	r0, r7
   20ef0:	a905      	add	r1, sp, #20
   20ef2:	f7f6 fe27 	bl	17b44 <nrf_modem_os_timedwait>
   20ef6:	682b      	ldr	r3, [r5, #0]
   20ef8:	2b01      	cmp	r3, #1
   20efa:	d0f8      	beq.n	20eee <ip_interface_getaddrinfo+0x18e>
   20efc:	f8d9 0000 	ldr.w	r0, [r9]
   20f00:	b950      	cbnz	r0, 20f18 <ip_interface_getaddrinfo+0x1b8>
   20f02:	f8da 3000 	ldr.w	r3, [sl]
   20f06:	9a01      	ldr	r2, [sp, #4]
   20f08:	6013      	str	r3, [r2, #0]
   20f0a:	e738      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20f0c:	2210      	movs	r2, #16
   20f0e:	4621      	mov	r1, r4
   20f10:	3014      	adds	r0, #20
   20f12:	f009 ffb9 	bl	2ae88 <memset>
   20f16:	e7d5      	b.n	20ec4 <ip_interface_getaddrinfo+0x164>
   20f18:	2300      	movs	r3, #0
   20f1a:	602b      	str	r3, [r5, #0]
   20f1c:	4b0d      	ldr	r3, [pc, #52]	; (20f54 <ip_interface_getaddrinfo+0x1f4>)
   20f1e:	6818      	ldr	r0, [r3, #0]
   20f20:	b108      	cbz	r0, 20f26 <ip_interface_getaddrinfo+0x1c6>
   20f22:	f007 fc9a 	bl	2885a <nrf_modem_os_errno_set>
   20f26:	f8d9 0000 	ldr.w	r0, [r9]
   20f2a:	e728      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20f2c:	f44f 708a 	mov.w	r0, #276	; 0x114
   20f30:	e725      	b.n	20d7e <ip_interface_getaddrinfo+0x1e>
   20f32:	bf00      	nop
   20f34:	2000f263 	.word	0x2000f263
   20f38:	2000eec8 	.word	0x2000eec8
   20f3c:	2000eebc 	.word	0x2000eebc
   20f40:	2000eecc 	.word	0x2000eecc
   20f44:	2000eec4 	.word	0x2000eec4
   20f48:	2000efc6 	.word	0x2000efc6
   20f4c:	000301ed 	.word	0x000301ed
   20f50:	00030146 	.word	0x00030146
   20f54:	2000eec0 	.word	0x2000eec0
   20f58:	2000eeb8 	.word	0x2000eeb8

00020f5c <ip_interface_freeaddrinfo>:
   20f5c:	b538      	push	{r3, r4, r5, lr}
   20f5e:	4d0a      	ldr	r5, [pc, #40]	; (20f88 <ip_interface_freeaddrinfo+0x2c>)
   20f60:	4604      	mov	r4, r0
   20f62:	682a      	ldr	r2, [r5, #0]
   20f64:	2a02      	cmp	r2, #2
   20f66:	d10e      	bne.n	20f86 <ip_interface_freeaddrinfo+0x2a>
   20f68:	b148      	cbz	r0, 20f7e <ip_interface_freeaddrinfo+0x22>
   20f6a:	6940      	ldr	r0, [r0, #20]
   20f6c:	f7f6 fee6 	bl	17d3c <nrf_modem_os_free>
   20f70:	69a0      	ldr	r0, [r4, #24]
   20f72:	b108      	cbz	r0, 20f78 <ip_interface_freeaddrinfo+0x1c>
   20f74:	f7f6 fee2 	bl	17d3c <nrf_modem_os_free>
   20f78:	4620      	mov	r0, r4
   20f7a:	f7f6 fedf 	bl	17d3c <nrf_modem_os_free>
   20f7e:	2300      	movs	r3, #0
   20f80:	4a02      	ldr	r2, [pc, #8]	; (20f8c <ip_interface_freeaddrinfo+0x30>)
   20f82:	602b      	str	r3, [r5, #0]
   20f84:	6013      	str	r3, [r2, #0]
   20f86:	bd38      	pop	{r3, r4, r5, pc}
   20f88:	2000eec8 	.word	0x2000eec8
   20f8c:	2000eec4 	.word	0x2000eec4

00020f90 <rpc_ip_event_handler>:
   20f90:	f248 030f 	movw	r3, #32783	; 0x800f
   20f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f98:	4299      	cmp	r1, r3
   20f9a:	4604      	mov	r4, r0
   20f9c:	460e      	mov	r6, r1
   20f9e:	b089      	sub	sp, #36	; 0x24
   20fa0:	f000 80a4 	beq.w	210ec <rpc_ip_event_handler+0x15c>
   20fa4:	f249 0304 	movw	r3, #36868	; 0x9004
   20fa8:	4299      	cmp	r1, r3
   20faa:	f000 80ab 	beq.w	21104 <rpc_ip_event_handler+0x174>
   20fae:	f248 030d 	movw	r3, #32781	; 0x800d
   20fb2:	4299      	cmp	r1, r3
   20fb4:	f040 80b8 	bne.w	21128 <rpc_ip_event_handler+0x198>
   20fb8:	4bbc      	ldr	r3, [pc, #752]	; (212ac <rpc_ip_event_handler+0x31c>)
   20fba:	681a      	ldr	r2, [r3, #0]
   20fbc:	9303      	str	r3, [sp, #12]
   20fbe:	2a01      	cmp	r2, #1
   20fc0:	d12d      	bne.n	2101e <rpc_ip_event_handler+0x8e>
   20fc2:	6940      	ldr	r0, [r0, #20]
   20fc4:	2800      	cmp	r0, #0
   20fc6:	f040 808c 	bne.w	210e2 <rpc_ip_event_handler+0x152>
   20fca:	f8d4 a018 	ldr.w	sl, [r4, #24]
   20fce:	f8d4 8000 	ldr.w	r8, [r4]
   20fd2:	ea4f 134a 	mov.w	r3, sl, lsl #5
   20fd6:	4618      	mov	r0, r3
   20fd8:	9301      	str	r3, [sp, #4]
   20fda:	f7f6 fea7 	bl	17d2c <nrf_modem_os_alloc>
   20fde:	4607      	mov	r7, r0
   20fe0:	b310      	cbz	r0, 21028 <rpc_ip_event_handler+0x98>
   20fe2:	2024      	movs	r0, #36	; 0x24
   20fe4:	fb00 f00a 	mul.w	r0, r0, sl
   20fe8:	f7f6 fea0 	bl	17d2c <nrf_modem_os_alloc>
   20fec:	b1f0      	cbz	r0, 2102c <rpc_ip_event_handler+0x9c>
   20fee:	4605      	mov	r5, r0
   20ff0:	2604      	movs	r6, #4
   20ff2:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   20ff6:	f107 0920 	add.w	r9, r7, #32
   20ffa:	9302      	str	r3, [sp, #8]
   20ffc:	9b02      	ldr	r3, [sp, #8]
   20ffe:	42ab      	cmp	r3, r5
   21000:	d118      	bne.n	21034 <rpc_ip_event_handler+0xa4>
   21002:	f1ba 0f00 	cmp.w	sl, #0
   21006:	d005      	beq.n	21014 <rpc_ip_event_handler+0x84>
   21008:	9b01      	ldr	r3, [sp, #4]
   2100a:	443b      	add	r3, r7
   2100c:	4699      	mov	r9, r3
   2100e:	2300      	movs	r3, #0
   21010:	f849 3c04 	str.w	r3, [r9, #-4]
   21014:	4ba6      	ldr	r3, [pc, #664]	; (212b0 <rpc_ip_event_handler+0x320>)
   21016:	601f      	str	r7, [r3, #0]
   21018:	2302      	movs	r3, #2
   2101a:	9a03      	ldr	r2, [sp, #12]
   2101c:	6013      	str	r3, [r2, #0]
   2101e:	6820      	ldr	r0, [r4, #0]
   21020:	2800      	cmp	r0, #0
   21022:	f040 81cd 	bne.w	213c0 <rpc_ip_event_handler+0x430>
   21026:	e1cd      	b.n	213c4 <rpc_ip_event_handler+0x434>
   21028:	f7f6 fe88 	bl	17d3c <nrf_modem_os_free>
   2102c:	220c      	movs	r2, #12
   2102e:	4ba1      	ldr	r3, [pc, #644]	; (212b4 <rpc_ip_event_handler+0x324>)
   21030:	601a      	str	r2, [r3, #0]
   21032:	e7ef      	b.n	21014 <rpc_ip_event_handler+0x84>
   21034:	f858 2006 	ldr.w	r2, [r8, r6]
   21038:	eb08 0106 	add.w	r1, r8, r6
   2103c:	f849 2c20 	str.w	r2, [r9, #-32]
   21040:	eb08 0206 	add.w	r2, r8, r6
   21044:	6852      	ldr	r2, [r2, #4]
   21046:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   2104a:	3a01      	subs	r2, #1
   2104c:	2a04      	cmp	r2, #4
   2104e:	bf8c      	ite	hi
   21050:	2200      	movhi	r2, #0
   21052:	4b99      	ldrls	r3, [pc, #612]	; (212b8 <rpc_ip_event_handler+0x328>)
   21054:	f106 0614 	add.w	r6, r6, #20
   21058:	bf98      	it	ls
   2105a:	569a      	ldrsbls	r2, [r3, r2]
   2105c:	4b97      	ldr	r3, [pc, #604]	; (212bc <rpc_ip_event_handler+0x32c>)
   2105e:	f849 2c1c 	str.w	r2, [r9, #-28]
   21062:	681a      	ldr	r2, [r3, #0]
   21064:	4b96      	ldr	r3, [pc, #600]	; (212c0 <rpc_ip_event_handler+0x330>)
   21066:	f849 2c18 	str.w	r2, [r9, #-24]
   2106a:	681a      	ldr	r2, [r3, #0]
   2106c:	f849 2c14 	str.w	r2, [r9, #-20]
   21070:	8a0a      	ldrh	r2, [r1, #16]
   21072:	4994      	ldr	r1, [pc, #592]	; (212c4 <rpc_ip_event_handler+0x334>)
   21074:	2a04      	cmp	r2, #4
   21076:	8808      	ldrh	r0, [r1, #0]
   21078:	f849 2c10 	str.w	r2, [r9, #-16]
   2107c:	f849 5c0c 	str.w	r5, [r9, #-12]
   21080:	eb08 0106 	add.w	r1, r8, r6
   21084:	d121      	bne.n	210ca <rpc_ip_event_handler+0x13a>
   21086:	2202      	movs	r2, #2
   21088:	606a      	str	r2, [r5, #4]
   2108a:	2210      	movs	r2, #16
   2108c:	8128      	strh	r0, [r5, #8]
   2108e:	702a      	strb	r2, [r5, #0]
   21090:	680a      	ldr	r2, [r1, #0]
   21092:	60ea      	str	r2, [r5, #12]
   21094:	f859 2c10 	ldr.w	r2, [r9, #-16]
   21098:	f10b 0001 	add.w	r0, fp, #1
   2109c:	4416      	add	r6, r2
   2109e:	f7f6 fe45 	bl	17d2c <nrf_modem_os_alloc>
   210a2:	f849 0c08 	str.w	r0, [r9, #-8]
   210a6:	b148      	cbz	r0, 210bc <rpc_ip_event_handler+0x12c>
   210a8:	465a      	mov	r2, fp
   210aa:	eb08 0106 	add.w	r1, r8, r6
   210ae:	f009 fecb 	bl	2ae48 <memcpy>
   210b2:	2100      	movs	r1, #0
   210b4:	f859 2c08 	ldr.w	r2, [r9, #-8]
   210b8:	f802 100b 	strb.w	r1, [r2, fp]
   210bc:	f849 9c04 	str.w	r9, [r9, #-4]
   210c0:	445e      	add	r6, fp
   210c2:	f109 0920 	add.w	r9, r9, #32
   210c6:	3508      	adds	r5, #8
   210c8:	e798      	b.n	20ffc <rpc_ip_event_handler+0x6c>
   210ca:	230a      	movs	r3, #10
   210cc:	f04f 0c24 	mov.w	ip, #36	; 0x24
   210d0:	8128      	strh	r0, [r5, #8]
   210d2:	606b      	str	r3, [r5, #4]
   210d4:	f885 c000 	strb.w	ip, [r5]
   210d8:	f105 0010 	add.w	r0, r5, #16
   210dc:	f009 feb4 	bl	2ae48 <memcpy>
   210e0:	e7d8      	b.n	21094 <rpc_ip_event_handler+0x104>
   210e2:	f7ff f971 	bl	203c8 <rpc_error_to_nrf_gai_errno>
   210e6:	4b73      	ldr	r3, [pc, #460]	; (212b4 <rpc_ip_event_handler+0x324>)
   210e8:	6018      	str	r0, [r3, #0]
   210ea:	e795      	b.n	21018 <rpc_ip_event_handler+0x88>
   210ec:	6943      	ldr	r3, [r0, #20]
   210ee:	2b6a      	cmp	r3, #106	; 0x6a
   210f0:	bf8e      	itee	hi
   210f2:	235f      	movhi	r3, #95	; 0x5f
   210f4:	4a74      	ldrls	r2, [pc, #464]	; (212c8 <rpc_ip_event_handler+0x338>)
   210f6:	5cd3      	ldrbls	r3, [r2, r3]
   210f8:	4a74      	ldr	r2, [pc, #464]	; (212cc <rpc_ip_event_handler+0x33c>)
   210fa:	6013      	str	r3, [r2, #0]
   210fc:	4b74      	ldr	r3, [pc, #464]	; (212d0 <rpc_ip_event_handler+0x340>)
   210fe:	2201      	movs	r2, #1
   21100:	701a      	strb	r2, [r3, #0]
   21102:	e15f      	b.n	213c4 <rpc_ip_event_handler+0x434>
   21104:	6903      	ldr	r3, [r0, #16]
   21106:	2b03      	cmp	r3, #3
   21108:	d807      	bhi.n	2111a <rpc_ip_event_handler+0x18a>
   2110a:	e8df f003 	tbb	[pc, r3]
   2110e:	0802      	.short	0x0802
   21110:	0802      	.short	0x0802
   21112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   21116:	f7ff f835 	bl	20184 <interface_sockets_aux_state_set>
   2111a:	4b6e      	ldr	r3, [pc, #440]	; (212d4 <rpc_ip_event_handler+0x344>)
   2111c:	e7ef      	b.n	210fe <rpc_ip_event_handler+0x16e>
   2111e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   21122:	f7ff f84d 	bl	201c0 <interface_sockets_aux_state_clear>
   21126:	e7f8      	b.n	2111a <rpc_ip_event_handler+0x18a>
   21128:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2112c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   21130:	68c0      	ldr	r0, [r0, #12]
   21132:	d13b      	bne.n	211ac <rpc_ip_event_handler+0x21c>
   21134:	f7ff f862 	bl	201fc <interface_from_internal_id_search>
   21138:	4607      	mov	r7, r0
   2113a:	4638      	mov	r0, r7
   2113c:	f7ff f876 	bl	2022c <interface_socket_from_handle_get>
   21140:	4605      	mov	r5, r0
   21142:	2800      	cmp	r0, #0
   21144:	f43f af6b 	beq.w	2101e <rpc_ip_event_handler+0x8e>
   21148:	4601      	mov	r1, r0
   2114a:	4633      	mov	r3, r6
   2114c:	4622      	mov	r2, r4
   2114e:	4638      	mov	r0, r7
   21150:	f000 fd6a 	bl	21c28 <tls_rpc_ip_event_handler>
   21154:	2800      	cmp	r0, #0
   21156:	f000 8135 	beq.w	213c4 <rpc_ip_event_handler+0x434>
   2115a:	f248 030c 	movw	r3, #32780	; 0x800c
   2115e:	429e      	cmp	r6, r3
   21160:	d826      	bhi.n	211b0 <rpc_ip_event_handler+0x220>
   21162:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21166:	f67f af5a 	bls.w	2101e <rpc_ip_event_handler+0x8e>
   2116a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   2116e:	3e01      	subs	r6, #1
   21170:	2e0b      	cmp	r6, #11
   21172:	f63f af54 	bhi.w	2101e <rpc_ip_event_handler+0x8e>
   21176:	a301      	add	r3, pc, #4	; (adr r3, 2117c <rpc_ip_event_handler+0x1ec>)
   21178:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2117c:	00021241 	.word	0x00021241
   21180:	00021301 	.word	0x00021301
   21184:	0002141d 	.word	0x0002141d
   21188:	00021439 	.word	0x00021439
   2118c:	000212e5 	.word	0x000212e5
   21190:	000213cd 	.word	0x000213cd
   21194:	000213cd 	.word	0x000213cd
   21198:	00021345 	.word	0x00021345
   2119c:	00021265 	.word	0x00021265
   211a0:	0002101f 	.word	0x0002101f
   211a4:	0002101f 	.word	0x0002101f
   211a8:	0002136f 	.word	0x0002136f
   211ac:	0c07      	lsrs	r7, r0, #16
   211ae:	e7c4      	b.n	2113a <rpc_ip_event_handler+0x1aa>
   211b0:	f249 0302 	movw	r3, #36866	; 0x9002
   211b4:	429e      	cmp	r6, r3
   211b6:	f000 80d2 	beq.w	2135e <rpc_ip_event_handler+0x3ce>
   211ba:	f249 0303 	movw	r3, #36867	; 0x9003
   211be:	429e      	cmp	r6, r3
   211c0:	d060      	beq.n	21284 <rpc_ip_event_handler+0x2f4>
   211c2:	f249 0301 	movw	r3, #36865	; 0x9001
   211c6:	429e      	cmp	r6, r3
   211c8:	f47f af29 	bne.w	2101e <rpc_ip_event_handler+0x8e>
   211cc:	682e      	ldr	r6, [r5, #0]
   211ce:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   211d2:	f000 80f4 	beq.w	213be <rpc_ip_event_handler+0x42e>
   211d6:	68a3      	ldr	r3, [r4, #8]
   211d8:	2b04      	cmp	r3, #4
   211da:	f240 80ed 	bls.w	213b8 <rpc_ip_event_handler+0x428>
   211de:	8a63      	ldrh	r3, [r4, #18]
   211e0:	2b00      	cmp	r3, #0
   211e2:	f000 80ea 	beq.w	213ba <rpc_ip_event_handler+0x42a>
   211e6:	2b10      	cmp	r3, #16
   211e8:	f040 80d2 	bne.w	21390 <rpc_ip_event_handler+0x400>
   211ec:	2024      	movs	r0, #36	; 0x24
   211ee:	f7f6 fd9d 	bl	17d2c <nrf_modem_os_alloc>
   211f2:	b318      	cbz	r0, 2123c <rpc_ip_event_handler+0x2ac>
   211f4:	230a      	movs	r3, #10
   211f6:	6043      	str	r3, [r0, #4]
   211f8:	2324      	movs	r3, #36	; 0x24
   211fa:	7003      	strb	r3, [r0, #0]
   211fc:	7c62      	ldrb	r2, [r4, #17]
   211fe:	7c23      	ldrb	r3, [r4, #16]
   21200:	f104 0124 	add.w	r1, r4, #36	; 0x24
   21204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21208:	8103      	strh	r3, [r0, #8]
   2120a:	f100 0210 	add.w	r2, r0, #16
   2120e:	f104 0314 	add.w	r3, r4, #20
   21212:	f853 6b04 	ldr.w	r6, [r3], #4
   21216:	428b      	cmp	r3, r1
   21218:	f842 6b04 	str.w	r6, [r2], #4
   2121c:	d1f9      	bne.n	21212 <rpc_ip_event_handler+0x282>
   2121e:	2324      	movs	r3, #36	; 0x24
   21220:	6822      	ldr	r2, [r4, #0]
   21222:	9307      	str	r3, [sp, #28]
   21224:	9204      	str	r2, [sp, #16]
   21226:	6862      	ldr	r2, [r4, #4]
   21228:	a904      	add	r1, sp, #16
   2122a:	e9cd 2005 	strd	r2, r0, [sp, #20]
   2122e:	69e8      	ldr	r0, [r5, #28]
   21230:	6803      	ldr	r3, [r0, #0]
   21232:	685b      	ldr	r3, [r3, #4]
   21234:	4798      	blx	r3
   21236:	3001      	adds	r0, #1
   21238:	f040 8095 	bne.w	21366 <rpc_ip_event_handler+0x3d6>
   2123c:	2002      	movs	r0, #2
   2123e:	e0c2      	b.n	213c6 <rpc_ip_event_handler+0x436>
   21240:	682b      	ldr	r3, [r5, #0]
   21242:	2b01      	cmp	r3, #1
   21244:	f040 80be 	bne.w	213c4 <rpc_ip_event_handler+0x434>
   21248:	6960      	ldr	r0, [r4, #20]
   2124a:	b920      	cbnz	r0, 21256 <rpc_ip_event_handler+0x2c6>
   2124c:	2302      	movs	r3, #2
   2124e:	602b      	str	r3, [r5, #0]
   21250:	69a3      	ldr	r3, [r4, #24]
   21252:	61ab      	str	r3, [r5, #24]
   21254:	e0b7      	b.n	213c6 <rpc_ip_event_handler+0x436>
   21256:	286a      	cmp	r0, #106	; 0x6a
   21258:	f200 8103 	bhi.w	21462 <rpc_ip_event_handler+0x4d2>
   2125c:	4b1a      	ldr	r3, [pc, #104]	; (212c8 <rpc_ip_event_handler+0x338>)
   2125e:	5c1b      	ldrb	r3, [r3, r0]
   21260:	606b      	str	r3, [r5, #4]
   21262:	e0af      	b.n	213c4 <rpc_ip_event_handler+0x434>
   21264:	682b      	ldr	r3, [r5, #0]
   21266:	b29b      	uxth	r3, r3
   21268:	2b0d      	cmp	r3, #13
   2126a:	f040 80ab 	bne.w	213c4 <rpc_ip_event_handler+0x434>
   2126e:	6960      	ldr	r0, [r4, #20]
   21270:	2800      	cmp	r0, #0
   21272:	f040 80dc 	bne.w	2142e <rpc_ip_event_handler+0x49e>
   21276:	682a      	ldr	r2, [r5, #0]
   21278:	0c12      	lsrs	r2, r2, #16
   2127a:	0412      	lsls	r2, r2, #16
   2127c:	f042 020e 	orr.w	r2, r2, #14
   21280:	602a      	str	r2, [r5, #0]
   21282:	e0a0      	b.n	213c6 <rpc_ip_event_handler+0x436>
   21284:	682b      	ldr	r3, [r5, #0]
   21286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2128a:	602b      	str	r3, [r5, #0]
   2128c:	682b      	ldr	r3, [r5, #0]
   2128e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21292:	602b      	str	r3, [r5, #0]
   21294:	6923      	ldr	r3, [r4, #16]
   21296:	2b6c      	cmp	r3, #108	; 0x6c
   21298:	d11e      	bne.n	212d8 <rpc_ip_event_handler+0x348>
   2129a:	682b      	ldr	r3, [r5, #0]
   2129c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   212a0:	602b      	str	r3, [r5, #0]
   212a2:	2380      	movs	r3, #128	; 0x80
   212a4:	606b      	str	r3, [r5, #4]
   212a6:	60ab      	str	r3, [r5, #8]
   212a8:	e08c      	b.n	213c4 <rpc_ip_event_handler+0x434>
   212aa:	bf00      	nop
   212ac:	2000eec8 	.word	0x2000eec8
   212b0:	2000eecc 	.word	0x2000eecc
   212b4:	2000eec4 	.word	0x2000eec4
   212b8:	0003014f 	.word	0x0003014f
   212bc:	2000eebc 	.word	0x2000eebc
   212c0:	2000eeb8 	.word	0x2000eeb8
   212c4:	2000efc6 	.word	0x2000efc6
   212c8:	00030154 	.word	0x00030154
   212cc:	2000eef0 	.word	0x2000eef0
   212d0:	2000f264 	.word	0x2000f264
   212d4:	2000f262 	.word	0x2000f262
   212d8:	2b6a      	cmp	r3, #106	; 0x6a
   212da:	bf96      	itet	ls
   212dc:	4a62      	ldrls	r2, [pc, #392]	; (21468 <rpc_ip_event_handler+0x4d8>)
   212de:	235f      	movhi	r3, #95	; 0x5f
   212e0:	5cd3      	ldrbls	r3, [r2, r3]
   212e2:	e7df      	b.n	212a4 <rpc_ip_event_handler+0x314>
   212e4:	682b      	ldr	r3, [r5, #0]
   212e6:	b29b      	uxth	r3, r3
   212e8:	2b03      	cmp	r3, #3
   212ea:	d16b      	bne.n	213c4 <rpc_ip_event_handler+0x434>
   212ec:	6960      	ldr	r0, [r4, #20]
   212ee:	2800      	cmp	r0, #0
   212f0:	f040 809d 	bne.w	2142e <rpc_ip_event_handler+0x49e>
   212f4:	682a      	ldr	r2, [r5, #0]
   212f6:	0c12      	lsrs	r2, r2, #16
   212f8:	0412      	lsls	r2, r2, #16
   212fa:	f042 0204 	orr.w	r2, r2, #4
   212fe:	e7bf      	b.n	21280 <rpc_ip_event_handler+0x2f0>
   21300:	682b      	ldr	r3, [r5, #0]
   21302:	0099      	lsls	r1, r3, #2
   21304:	d55e      	bpl.n	213c4 <rpc_ip_event_handler+0x434>
   21306:	682b      	ldr	r3, [r5, #0]
   21308:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2130c:	602b      	str	r3, [r5, #0]
   2130e:	6960      	ldr	r0, [r4, #20]
   21310:	b968      	cbnz	r0, 2132e <rpc_ip_event_handler+0x39e>
   21312:	682a      	ldr	r2, [r5, #0]
   21314:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   21318:	602a      	str	r2, [r5, #0]
   2131a:	682a      	ldr	r2, [r5, #0]
   2131c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   21320:	602a      	str	r2, [r5, #0]
   21322:	682a      	ldr	r2, [r5, #0]
   21324:	0c12      	lsrs	r2, r2, #16
   21326:	0412      	lsls	r2, r2, #16
   21328:	f042 0205 	orr.w	r2, r2, #5
   2132c:	e7a8      	b.n	21280 <rpc_ip_event_handler+0x2f0>
   2132e:	286a      	cmp	r0, #106	; 0x6a
   21330:	bf8e      	itee	hi
   21332:	235f      	movhi	r3, #95	; 0x5f
   21334:	4a4c      	ldrls	r2, [pc, #304]	; (21468 <rpc_ip_event_handler+0x4d8>)
   21336:	5c13      	ldrbls	r3, [r2, r0]
   21338:	606b      	str	r3, [r5, #4]
   2133a:	682b      	ldr	r3, [r5, #0]
   2133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   21340:	602b      	str	r3, [r5, #0]
   21342:	e03f      	b.n	213c4 <rpc_ip_event_handler+0x434>
   21344:	682b      	ldr	r3, [r5, #0]
   21346:	b29b      	uxth	r3, r3
   21348:	2b06      	cmp	r3, #6
   2134a:	d13b      	bne.n	213c4 <rpc_ip_event_handler+0x434>
   2134c:	6960      	ldr	r0, [r4, #20]
   2134e:	2800      	cmp	r0, #0
   21350:	d16d      	bne.n	2142e <rpc_ip_event_handler+0x49e>
   21352:	682a      	ldr	r2, [r5, #0]
   21354:	0c12      	lsrs	r2, r2, #16
   21356:	0412      	lsls	r2, r2, #16
   21358:	f042 0207 	orr.w	r2, r2, #7
   2135c:	e790      	b.n	21280 <rpc_ip_event_handler+0x2f0>
   2135e:	682b      	ldr	r3, [r5, #0]
   21360:	b29b      	uxth	r3, r3
   21362:	2b07      	cmp	r3, #7
   21364:	d12e      	bne.n	213c4 <rpc_ip_event_handler+0x434>
   21366:	682b      	ldr	r3, [r5, #0]
   21368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2136c:	e7e8      	b.n	21340 <rpc_ip_event_handler+0x3b0>
   2136e:	682b      	ldr	r3, [r5, #0]
   21370:	b29b      	uxth	r3, r3
   21372:	2b08      	cmp	r3, #8
   21374:	d126      	bne.n	213c4 <rpc_ip_event_handler+0x434>
   21376:	6963      	ldr	r3, [r4, #20]
   21378:	2b00      	cmp	r3, #0
   2137a:	d16d      	bne.n	21458 <rpc_ip_event_handler+0x4c8>
   2137c:	4b3b      	ldr	r3, [pc, #236]	; (2146c <rpc_ip_event_handler+0x4dc>)
   2137e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   21382:	682b      	ldr	r3, [r5, #0]
   21384:	0c1b      	lsrs	r3, r3, #16
   21386:	041b      	lsls	r3, r3, #16
   21388:	f043 0309 	orr.w	r3, r3, #9
   2138c:	602b      	str	r3, [r5, #0]
   2138e:	e032      	b.n	213f6 <rpc_ip_event_handler+0x466>
   21390:	2b04      	cmp	r3, #4
   21392:	d114      	bne.n	213be <rpc_ip_event_handler+0x42e>
   21394:	2010      	movs	r0, #16
   21396:	f7f6 fcc9 	bl	17d2c <nrf_modem_os_alloc>
   2139a:	2800      	cmp	r0, #0
   2139c:	f43f af4e 	beq.w	2123c <rpc_ip_event_handler+0x2ac>
   213a0:	2302      	movs	r3, #2
   213a2:	6043      	str	r3, [r0, #4]
   213a4:	2310      	movs	r3, #16
   213a6:	7003      	strb	r3, [r0, #0]
   213a8:	7c22      	ldrb	r2, [r4, #16]
   213aa:	7c61      	ldrb	r1, [r4, #17]
   213ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   213b0:	8102      	strh	r2, [r0, #8]
   213b2:	6962      	ldr	r2, [r4, #20]
   213b4:	60c2      	str	r2, [r0, #12]
   213b6:	e733      	b.n	21220 <rpc_ip_event_handler+0x290>
   213b8:	2300      	movs	r3, #0
   213ba:	4618      	mov	r0, r3
   213bc:	e730      	b.n	21220 <rpc_ip_event_handler+0x290>
   213be:	6820      	ldr	r0, [r4, #0]
   213c0:	f008 f9ca 	bl	29758 <rpc_client_data_free>
   213c4:	2000      	movs	r0, #0
   213c6:	b009      	add	sp, #36	; 0x24
   213c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213cc:	4b27      	ldr	r3, [pc, #156]	; (2146c <rpc_ip_event_handler+0x4dc>)
   213ce:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   213d2:	6963      	ldr	r3, [r4, #20]
   213d4:	b17b      	cbz	r3, 213f6 <rpc_ip_event_handler+0x466>
   213d6:	2b6b      	cmp	r3, #107	; 0x6b
   213d8:	d10f      	bne.n	213fa <rpc_ip_event_handler+0x46a>
   213da:	6928      	ldr	r0, [r5, #16]
   213dc:	220c      	movs	r2, #12
   213de:	2801      	cmp	r0, #1
   213e0:	682b      	ldr	r3, [r5, #0]
   213e2:	d104      	bne.n	213ee <rpc_ip_event_handler+0x45e>
   213e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   213e8:	602b      	str	r3, [r5, #0]
   213ea:	606a      	str	r2, [r5, #4]
   213ec:	e7eb      	b.n	213c6 <rpc_ip_event_handler+0x436>
   213ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   213f2:	602b      	str	r3, [r5, #0]
   213f4:	606a      	str	r2, [r5, #4]
   213f6:	2001      	movs	r0, #1
   213f8:	e7e5      	b.n	213c6 <rpc_ip_event_handler+0x436>
   213fa:	f023 0002 	bic.w	r0, r3, #2
   213fe:	2801      	cmp	r0, #1
   21400:	d102      	bne.n	21408 <rpc_ip_event_handler+0x478>
   21402:	230c      	movs	r3, #12
   21404:	606b      	str	r3, [r5, #4]
   21406:	e7de      	b.n	213c6 <rpc_ip_event_handler+0x436>
   21408:	2b6a      	cmp	r3, #106	; 0x6a
   2140a:	bf8e      	itee	hi
   2140c:	235f      	movhi	r3, #95	; 0x5f
   2140e:	4a16      	ldrls	r2, [pc, #88]	; (21468 <rpc_ip_event_handler+0x4d8>)
   21410:	5cd3      	ldrbls	r3, [r2, r3]
   21412:	606b      	str	r3, [r5, #4]
   21414:	682b      	ldr	r3, [r5, #0]
   21416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2141a:	e7b7      	b.n	2138c <rpc_ip_event_handler+0x3fc>
   2141c:	682b      	ldr	r3, [r5, #0]
   2141e:	025a      	lsls	r2, r3, #9
   21420:	d5d0      	bpl.n	213c4 <rpc_ip_event_handler+0x434>
   21422:	6960      	ldr	r0, [r4, #20]
   21424:	b918      	cbnz	r0, 2142e <rpc_ip_event_handler+0x49e>
   21426:	682a      	ldr	r2, [r5, #0]
   21428:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   2142c:	e728      	b.n	21280 <rpc_ip_event_handler+0x2f0>
   2142e:	286a      	cmp	r0, #106	; 0x6a
   21430:	d817      	bhi.n	21462 <rpc_ip_event_handler+0x4d2>
   21432:	4a0d      	ldr	r2, [pc, #52]	; (21468 <rpc_ip_event_handler+0x4d8>)
   21434:	5c13      	ldrb	r3, [r2, r0]
   21436:	e713      	b.n	21260 <rpc_ip_event_handler+0x2d0>
   21438:	682b      	ldr	r3, [r5, #0]
   2143a:	01db      	lsls	r3, r3, #7
   2143c:	d5c2      	bpl.n	213c4 <rpc_ip_event_handler+0x434>
   2143e:	6963      	ldr	r3, [r4, #20]
   21440:	b953      	cbnz	r3, 21458 <rpc_ip_event_handler+0x4c8>
   21442:	6820      	ldr	r0, [r4, #0]
   21444:	b118      	cbz	r0, 2144e <rpc_ip_event_handler+0x4be>
   21446:	2001      	movs	r0, #1
   21448:	4b08      	ldr	r3, [pc, #32]	; (2146c <rpc_ip_event_handler+0x4dc>)
   2144a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   2144e:	682b      	ldr	r3, [r5, #0]
   21450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   21454:	602b      	str	r3, [r5, #0]
   21456:	e7b6      	b.n	213c6 <rpc_ip_event_handler+0x436>
   21458:	2b6a      	cmp	r3, #106	; 0x6a
   2145a:	d802      	bhi.n	21462 <rpc_ip_event_handler+0x4d2>
   2145c:	4a02      	ldr	r2, [pc, #8]	; (21468 <rpc_ip_event_handler+0x4d8>)
   2145e:	5cd3      	ldrb	r3, [r2, r3]
   21460:	e6fe      	b.n	21260 <rpc_ip_event_handler+0x2d0>
   21462:	235f      	movs	r3, #95	; 0x5f
   21464:	e6fc      	b.n	21260 <rpc_ip_event_handler+0x2d0>
   21466:	bf00      	nop
   21468:	00030154 	.word	0x00030154
   2146c:	2000eed0 	.word	0x2000eed0

00021470 <secure_socket_dtls_timeout_check>:
   21470:	281f      	cmp	r0, #31
   21472:	dc0b      	bgt.n	2148c <secure_socket_dtls_timeout_check+0x1c>
   21474:	2800      	cmp	r0, #0
   21476:	dd10      	ble.n	2149a <secure_socket_dtls_timeout_check+0x2a>
   21478:	2301      	movs	r3, #1
   2147a:	fa03 f000 	lsl.w	r0, r3, r0
   2147e:	4b09      	ldr	r3, [pc, #36]	; (214a4 <secure_socket_dtls_timeout_check+0x34>)
   21480:	4003      	ands	r3, r0
   21482:	2b00      	cmp	r3, #0
   21484:	bf0c      	ite	eq
   21486:	2016      	moveq	r0, #22
   21488:	2000      	movne	r0, #0
   2148a:	4770      	bx	lr
   2148c:	283f      	cmp	r0, #63	; 0x3f
   2148e:	d006      	beq.n	2149e <secure_socket_dtls_timeout_check+0x2e>
   21490:	287b      	cmp	r0, #123	; 0x7b
   21492:	bf14      	ite	ne
   21494:	2016      	movne	r0, #22
   21496:	2000      	moveq	r0, #0
   21498:	4770      	bx	lr
   2149a:	2016      	movs	r0, #22
   2149c:	4770      	bx	lr
   2149e:	2000      	movs	r0, #0
   214a0:	4770      	bx	lr
   214a2:	bf00      	nop
   214a4:	8000808a 	.word	0x8000808a

000214a8 <hostname_free>:
   214a8:	b538      	push	{r3, r4, r5, lr}
   214aa:	4c07      	ldr	r4, [pc, #28]	; (214c8 <hostname_free+0x20>)
   214ac:	4605      	mov	r5, r0
   214ae:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   214b2:	b138      	cbz	r0, 214c4 <hostname_free+0x1c>
   214b4:	f7f6 fc42 	bl	17d3c <nrf_modem_os_free>
   214b8:	2300      	movs	r3, #0
   214ba:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   214be:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   214c2:	6063      	str	r3, [r4, #4]
   214c4:	bd38      	pop	{r3, r4, r5, pc}
   214c6:	bf00      	nop
   214c8:	2000eef4 	.word	0x2000eef4

000214cc <secure_socket_attach_initiate>:
   214cc:	f04f 33ff 	mov.w	r3, #4294967295
   214d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   214d4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2156c <secure_socket_attach_initiate+0xa0>
   214d8:	9301      	str	r3, [sp, #4]
   214da:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   214de:	460d      	mov	r5, r1
   214e0:	4616      	mov	r6, r2
   214e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   214e6:	f247 0281 	movw	r2, #28801	; 0x7081
   214ea:	6989      	ldr	r1, [r1, #24]
   214ec:	4607      	mov	r7, r0
   214ee:	f008 f9c5 	bl	2987c <ip_interface_request_create>
   214f2:	4604      	mov	r4, r0
   214f4:	b398      	cbz	r0, 2155e <secure_socket_attach_initiate+0x92>
   214f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   214fa:	b122      	cbz	r2, 21506 <secure_socket_attach_initiate+0x3a>
   214fc:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   21500:	6800      	ldr	r0, [r0, #0]
   21502:	f009 fca1 	bl	2ae48 <memcpy>
   21506:	2324      	movs	r3, #36	; 0x24
   21508:	4a17      	ldr	r2, [pc, #92]	; (21568 <secure_socket_attach_initiate+0x9c>)
   2150a:	fb03 2307 	mla	r3, r3, r7, r2
   2150e:	f104 0214 	add.w	r2, r4, #20
   21512:	f103 0124 	add.w	r1, r3, #36	; 0x24
   21516:	f853 0b04 	ldr.w	r0, [r3], #4
   2151a:	428b      	cmp	r3, r1
   2151c:	f842 0b04 	str.w	r0, [r2], #4
   21520:	d1f9      	bne.n	21516 <secure_socket_attach_initiate+0x4a>
   21522:	68a3      	ldr	r3, [r4, #8]
   21524:	4622      	mov	r2, r4
   21526:	3324      	adds	r3, #36	; 0x24
   21528:	60a3      	str	r3, [r4, #8]
   2152a:	682b      	ldr	r3, [r5, #0]
   2152c:	f247 0181 	movw	r1, #28801	; 0x7081
   21530:	0c1b      	lsrs	r3, r3, #16
   21532:	041b      	lsls	r3, r3, #16
   21534:	f043 030a 	orr.w	r3, r3, #10
   21538:	602b      	str	r3, [r5, #0]
   2153a:	2004      	movs	r0, #4
   2153c:	f008 f902 	bl	29744 <rpc_client_request_send>
   21540:	682b      	ldr	r3, [r5, #0]
   21542:	00db      	lsls	r3, r3, #3
   21544:	d40d      	bmi.n	21562 <secure_socket_attach_initiate+0x96>
   21546:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2154a:	210b      	movs	r1, #11
   2154c:	4638      	mov	r0, r7
   2154e:	ab01      	add	r3, sp, #4
   21550:	f008 f9a7 	bl	298a2 <ip_interface_wait>
   21554:	b100      	cbz	r0, 21558 <secure_socket_attach_initiate+0x8c>
   21556:	602e      	str	r6, [r5, #0]
   21558:	b003      	add	sp, #12
   2155a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2155e:	200c      	movs	r0, #12
   21560:	e7fa      	b.n	21558 <secure_socket_attach_initiate+0x8c>
   21562:	2077      	movs	r0, #119	; 0x77
   21564:	e7f8      	b.n	21558 <secure_socket_attach_initiate+0x8c>
   21566:	bf00      	nop
   21568:	2000f266 	.word	0x2000f266
   2156c:	2000eef4 	.word	0x2000eef4

00021570 <tls_interface_init>:
   21570:	2201      	movs	r2, #1
   21572:	4b02      	ldr	r3, [pc, #8]	; (2157c <tls_interface_init+0xc>)
   21574:	2000      	movs	r0, #0
   21576:	701a      	strb	r2, [r3, #0]
   21578:	4770      	bx	lr
   2157a:	bf00      	nop
   2157c:	2000f265 	.word	0x2000f265

00021580 <tls_interface_open>:
   21580:	b538      	push	{r3, r4, r5, lr}
   21582:	4b21      	ldr	r3, [pc, #132]	; (21608 <tls_interface_open+0x88>)
   21584:	4615      	mov	r5, r2
   21586:	781b      	ldrb	r3, [r3, #0]
   21588:	b92b      	cbnz	r3, 21596 <tls_interface_open+0x16>
   2158a:	2075      	movs	r0, #117	; 0x75
   2158c:	f007 f965 	bl	2885a <nrf_modem_os_errno_set>
   21590:	f04f 34ff 	mov.w	r4, #4294967295
   21594:	e031      	b.n	215fa <tls_interface_open+0x7a>
   21596:	1e4b      	subs	r3, r1, #1
   21598:	2b01      	cmp	r3, #1
   2159a:	d809      	bhi.n	215b0 <tls_interface_open+0x30>
   2159c:	b952      	cbnz	r2, 215b4 <tls_interface_open+0x34>
   2159e:	2901      	cmp	r1, #1
   215a0:	bf0b      	itete	eq
   215a2:	2201      	moveq	r2, #1
   215a4:	2202      	movne	r2, #2
   215a6:	f44f 7582 	moveq.w	r5, #260	; 0x104
   215aa:	f44f 7587 	movne.w	r5, #270	; 0x10e
   215ae:	e007      	b.n	215c0 <tls_interface_open+0x40>
   215b0:	206b      	movs	r0, #107	; 0x6b
   215b2:	e7eb      	b.n	2158c <tls_interface_open+0xc>
   215b4:	2901      	cmp	r1, #1
   215b6:	d122      	bne.n	215fe <tls_interface_open+0x7e>
   215b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   215bc:	d1f8      	bne.n	215b0 <tls_interface_open+0x30>
   215be:	460a      	mov	r2, r1
   215c0:	f7fe ff3a 	bl	20438 <ip_interface_open>
   215c4:	1e04      	subs	r4, r0, #0
   215c6:	dbe3      	blt.n	21590 <tls_interface_open+0x10>
   215c8:	2224      	movs	r2, #36	; 0x24
   215ca:	4910      	ldr	r1, [pc, #64]	; (2160c <tls_interface_open+0x8c>)
   215cc:	4b10      	ldr	r3, [pc, #64]	; (21610 <tls_interface_open+0x90>)
   215ce:	fb02 1204 	mla	r2, r2, r4, r1
   215d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
   215d6:	f853 0b04 	ldr.w	r0, [r3], #4
   215da:	428b      	cmp	r3, r1
   215dc:	f842 0b04 	str.w	r0, [r2], #4
   215e0:	d1f9      	bne.n	215d6 <tls_interface_open+0x56>
   215e2:	4620      	mov	r0, r4
   215e4:	f7fe fe22 	bl	2022c <interface_socket_from_handle_get>
   215e8:	6803      	ldr	r3, [r0, #0]
   215ea:	6145      	str	r5, [r0, #20]
   215ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   215f0:	6003      	str	r3, [r0, #0]
   215f2:	6803      	ldr	r3, [r0, #0]
   215f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   215f8:	6003      	str	r3, [r0, #0]
   215fa:	4620      	mov	r0, r4
   215fc:	bd38      	pop	{r3, r4, r5, pc}
   215fe:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   21602:	d1d5      	bne.n	215b0 <tls_interface_open+0x30>
   21604:	2202      	movs	r2, #2
   21606:	e7db      	b.n	215c0 <tls_interface_open+0x40>
   21608:	2000f265 	.word	0x2000f265
   2160c:	2000f266 	.word	0x2000f266
   21610:	000301bf 	.word	0x000301bf

00021614 <tls_interface_sendto>:
   21614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21618:	b085      	sub	sp, #20
   2161a:	4606      	mov	r6, r0
   2161c:	4691      	mov	r9, r2
   2161e:	461f      	mov	r7, r3
   21620:	9103      	str	r1, [sp, #12]
   21622:	f7fe fe03 	bl	2022c <interface_socket_from_handle_get>
   21626:	4605      	mov	r5, r0
   21628:	2800      	cmp	r0, #0
   2162a:	d06c      	beq.n	21706 <tls_interface_sendto+0xf2>
   2162c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   21630:	07bb      	lsls	r3, r7, #30
   21632:	bf48      	it	mi
   21634:	2300      	movmi	r3, #0
   21636:	f04f 0400 	mov.w	r4, #0
   2163a:	f04f 3bff 	mov.w	fp, #4294967295
   2163e:	bf58      	it	pl
   21640:	6803      	ldrpl	r3, [r0, #0]
   21642:	fb0a fa06 	mul.w	sl, sl, r6
   21646:	bf5c      	itt	pl
   21648:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   2164c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   21650:	9302      	str	r3, [sp, #8]
   21652:	6829      	ldr	r1, [r5, #0]
   21654:	eba9 0804 	sub.w	r8, r9, r4
   21658:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   2165c:	b289      	uxth	r1, r1
   2165e:	bfa8      	it	ge
   21660:	f44f 6800 	movge.w	r8, #2048	; 0x800
   21664:	290c      	cmp	r1, #12
   21666:	d110      	bne.n	2168a <tls_interface_sendto+0x76>
   21668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2166a:	9903      	ldr	r1, [sp, #12]
   2166c:	9301      	str	r3, [sp, #4]
   2166e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21670:	4642      	mov	r2, r8
   21672:	9300      	str	r3, [sp, #0]
   21674:	4630      	mov	r0, r6
   21676:	463b      	mov	r3, r7
   21678:	4421      	add	r1, r4
   2167a:	f7fe ff9f 	bl	205bc <ip_interface_sendto>
   2167e:	f1b0 0b00 	subs.w	fp, r0, #0
   21682:	da32      	bge.n	216ea <tls_interface_sendto+0xd6>
   21684:	f04f 34ff 	mov.w	r4, #4294967295
   21688:	e034      	b.n	216f4 <tls_interface_sendto+0xe0>
   2168a:	6828      	ldr	r0, [r5, #0]
   2168c:	b280      	uxth	r0, r0
   2168e:	280b      	cmp	r0, #11
   21690:	d109      	bne.n	216a6 <tls_interface_sendto+0x92>
   21692:	4b21      	ldr	r3, [pc, #132]	; (21718 <tls_interface_sendto+0x104>)
   21694:	f813 200a 	ldrb.w	r2, [r3, sl]
   21698:	2a02      	cmp	r2, #2
   2169a:	d031      	beq.n	21700 <tls_interface_sendto+0xec>
   2169c:	692a      	ldr	r2, [r5, #16]
   2169e:	2a01      	cmp	r2, #1
   216a0:	d133      	bne.n	2170a <tls_interface_sendto+0xf6>
   216a2:	206d      	movs	r0, #109	; 0x6d
   216a4:	e02c      	b.n	21700 <tls_interface_sendto+0xec>
   216a6:	4628      	mov	r0, r5
   216a8:	f008 fb64 	bl	29d74 <attach_trigger_condition_verify>
   216ac:	b388      	cbz	r0, 21712 <tls_interface_sendto+0xfe>
   216ae:	4b1a      	ldr	r3, [pc, #104]	; (21718 <tls_interface_sendto+0x104>)
   216b0:	f813 100a 	ldrb.w	r1, [r3, sl]
   216b4:	2902      	cmp	r1, #2
   216b6:	d110      	bne.n	216da <tls_interface_sendto+0xc6>
   216b8:	4629      	mov	r1, r5
   216ba:	4630      	mov	r0, r6
   216bc:	f008 fb71 	bl	29da2 <secure_client_socket>
   216c0:	b970      	cbnz	r0, 216e0 <tls_interface_sendto+0xcc>
   216c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   216c4:	9903      	ldr	r1, [sp, #12]
   216c6:	9301      	str	r3, [sp, #4]
   216c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   216ca:	4642      	mov	r2, r8
   216cc:	9300      	str	r3, [sp, #0]
   216ce:	4630      	mov	r0, r6
   216d0:	463b      	mov	r3, r7
   216d2:	4421      	add	r1, r4
   216d4:	f7fe ff72 	bl	205bc <ip_interface_sendto>
   216d8:	4683      	mov	fp, r0
   216da:	f1bb 0f00 	cmp.w	fp, #0
   216de:	e7d0      	b.n	21682 <tls_interface_sendto+0x6e>
   216e0:	f1bb 3fff 	cmp.w	fp, #4294967295
   216e4:	d00a      	beq.n	216fc <tls_interface_sendto+0xe8>
   216e6:	2800      	cmp	r0, #0
   216e8:	dc0a      	bgt.n	21700 <tls_interface_sendto+0xec>
   216ea:	9b02      	ldr	r3, [sp, #8]
   216ec:	445c      	add	r4, fp
   216ee:	b10b      	cbz	r3, 216f4 <tls_interface_sendto+0xe0>
   216f0:	45a1      	cmp	r9, r4
   216f2:	dcae      	bgt.n	21652 <tls_interface_sendto+0x3e>
   216f4:	4620      	mov	r0, r4
   216f6:	b005      	add	sp, #20
   216f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216fc:	2800      	cmp	r0, #0
   216fe:	ddc1      	ble.n	21684 <tls_interface_sendto+0x70>
   21700:	f007 f8ab 	bl	2885a <nrf_modem_os_errno_set>
   21704:	e7be      	b.n	21684 <tls_interface_sendto+0x70>
   21706:	2009      	movs	r0, #9
   21708:	e7fa      	b.n	21700 <tls_interface_sendto+0xec>
   2170a:	f1bb 3fff 	cmp.w	fp, #4294967295
   2170e:	d1ec      	bne.n	216ea <tls_interface_sendto+0xd6>
   21710:	e7b8      	b.n	21684 <tls_interface_sendto+0x70>
   21712:	2080      	movs	r0, #128	; 0x80
   21714:	e7f4      	b.n	21700 <tls_interface_sendto+0xec>
   21716:	bf00      	nop
   21718:	2000f266 	.word	0x2000f266

0002171c <tls_interface_recvfrom>:
   2171c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2171e:	460d      	mov	r5, r1
   21720:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   21724:	4604      	mov	r4, r0
   21726:	e9cd 3200 	strd	r3, r2, [sp]
   2172a:	f7fe fd7f 	bl	2022c <interface_socket_from_handle_get>
   2172e:	4601      	mov	r1, r0
   21730:	b388      	cbz	r0, 21796 <tls_interface_recvfrom+0x7a>
   21732:	e9dd 3200 	ldrd	r3, r2, [sp]
   21736:	f8d0 c000 	ldr.w	ip, [r0]
   2173a:	fa1f fc8c 	uxth.w	ip, ip
   2173e:	f1bc 0f0c 	cmp.w	ip, #12
   21742:	d006      	beq.n	21752 <tls_interface_recvfrom+0x36>
   21744:	f8d0 c000 	ldr.w	ip, [r0]
   21748:	fa1f fc8c 	uxth.w	ip, ip
   2174c:	f1bc 0f0d 	cmp.w	ip, #13
   21750:	d108      	bne.n	21764 <tls_interface_recvfrom+0x48>
   21752:	4629      	mov	r1, r5
   21754:	4620      	mov	r0, r4
   21756:	e9cd 6708 	strd	r6, r7, [sp, #32]
   2175a:	b003      	add	sp, #12
   2175c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21760:	f008 b8af 	b.w	298c2 <ip_interface_recvfrom>
   21764:	e9cd 2300 	strd	r2, r3, [sp]
   21768:	f008 fb04 	bl	29d74 <attach_trigger_condition_verify>
   2176c:	b1b8      	cbz	r0, 2179e <tls_interface_recvfrom+0x82>
   2176e:	2024      	movs	r0, #36	; 0x24
   21770:	4360      	muls	r0, r4
   21772:	f8df c030 	ldr.w	ip, [pc, #48]	; 217a4 <tls_interface_recvfrom+0x88>
   21776:	f81c 0000 	ldrb.w	r0, [ip, r0]
   2177a:	2802      	cmp	r0, #2
   2177c:	d10f      	bne.n	2179e <tls_interface_recvfrom+0x82>
   2177e:	4620      	mov	r0, r4
   21780:	f008 fb0f 	bl	29da2 <secure_client_socket>
   21784:	e9dd 2300 	ldrd	r2, r3, [sp]
   21788:	2800      	cmp	r0, #0
   2178a:	d0e2      	beq.n	21752 <tls_interface_recvfrom+0x36>
   2178c:	dc04      	bgt.n	21798 <tls_interface_recvfrom+0x7c>
   2178e:	f04f 30ff 	mov.w	r0, #4294967295
   21792:	b003      	add	sp, #12
   21794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21796:	2009      	movs	r0, #9
   21798:	f007 f85f 	bl	2885a <nrf_modem_os_errno_set>
   2179c:	e7f7      	b.n	2178e <tls_interface_recvfrom+0x72>
   2179e:	200b      	movs	r0, #11
   217a0:	e7fa      	b.n	21798 <tls_interface_recvfrom+0x7c>
   217a2:	bf00      	nop
   217a4:	2000f266 	.word	0x2000f266

000217a8 <tls_interface_bind>:
   217a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   217aa:	4604      	mov	r4, r0
   217ac:	e9cd 2100 	strd	r2, r1, [sp]
   217b0:	f7fe fd3c 	bl	2022c <interface_socket_from_handle_get>
   217b4:	4605      	mov	r5, r0
   217b6:	b1e0      	cbz	r0, 217f2 <tls_interface_bind+0x4a>
   217b8:	6803      	ldr	r3, [r0, #0]
   217ba:	b29b      	uxth	r3, r3
   217bc:	2b02      	cmp	r3, #2
   217be:	d11a      	bne.n	217f6 <tls_interface_bind+0x4e>
   217c0:	e9dd 2100 	ldrd	r2, r1, [sp]
   217c4:	4620      	mov	r0, r4
   217c6:	f7ff f88d 	bl	208e4 <ip_interface_bind>
   217ca:	b950      	cbnz	r0, 217e2 <tls_interface_bind+0x3a>
   217cc:	2324      	movs	r3, #36	; 0x24
   217ce:	4363      	muls	r3, r4
   217d0:	4a0a      	ldr	r2, [pc, #40]	; (217fc <tls_interface_bind+0x54>)
   217d2:	5cd3      	ldrb	r3, [r2, r3]
   217d4:	2b01      	cmp	r3, #1
   217d6:	d10a      	bne.n	217ee <tls_interface_bind+0x46>
   217d8:	2204      	movs	r2, #4
   217da:	4629      	mov	r1, r5
   217dc:	4620      	mov	r0, r4
   217de:	f7ff fe75 	bl	214cc <secure_socket_attach_initiate>
   217e2:	2800      	cmp	r0, #0
   217e4:	dd03      	ble.n	217ee <tls_interface_bind+0x46>
   217e6:	f007 f838 	bl	2885a <nrf_modem_os_errno_set>
   217ea:	f04f 30ff 	mov.w	r0, #4294967295
   217ee:	b003      	add	sp, #12
   217f0:	bd30      	pop	{r4, r5, pc}
   217f2:	2009      	movs	r0, #9
   217f4:	e7f7      	b.n	217e6 <tls_interface_bind+0x3e>
   217f6:	205f      	movs	r0, #95	; 0x5f
   217f8:	e7f5      	b.n	217e6 <tls_interface_bind+0x3e>
   217fa:	bf00      	nop
   217fc:	2000f266 	.word	0x2000f266

00021800 <tls_interface_connect>:
   21800:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21802:	4605      	mov	r5, r0
   21804:	e9cd 2100 	strd	r2, r1, [sp]
   21808:	f7fe fd10 	bl	2022c <interface_socket_from_handle_get>
   2180c:	4604      	mov	r4, r0
   2180e:	b1f8      	cbz	r0, 21850 <tls_interface_connect+0x50>
   21810:	2324      	movs	r3, #36	; 0x24
   21812:	436b      	muls	r3, r5
   21814:	4810      	ldr	r0, [pc, #64]	; (21858 <tls_interface_connect+0x58>)
   21816:	5cc3      	ldrb	r3, [r0, r3]
   21818:	2b02      	cmp	r3, #2
   2181a:	d11b      	bne.n	21854 <tls_interface_connect+0x54>
   2181c:	e9dd 2100 	ldrd	r2, r1, [sp]
   21820:	6823      	ldr	r3, [r4, #0]
   21822:	b29b      	uxth	r3, r3
   21824:	2b02      	cmp	r3, #2
   21826:	d003      	beq.n	21830 <tls_interface_connect+0x30>
   21828:	6823      	ldr	r3, [r4, #0]
   2182a:	b29b      	uxth	r3, r3
   2182c:	2b04      	cmp	r3, #4
   2182e:	d111      	bne.n	21854 <tls_interface_connect+0x54>
   21830:	4628      	mov	r0, r5
   21832:	f008 f948 	bl	29ac6 <ip_interface_connect>
   21836:	b918      	cbnz	r0, 21840 <tls_interface_connect+0x40>
   21838:	4621      	mov	r1, r4
   2183a:	4628      	mov	r0, r5
   2183c:	f008 fab1 	bl	29da2 <secure_client_socket>
   21840:	2800      	cmp	r0, #0
   21842:	dd03      	ble.n	2184c <tls_interface_connect+0x4c>
   21844:	f007 f809 	bl	2885a <nrf_modem_os_errno_set>
   21848:	f04f 30ff 	mov.w	r0, #4294967295
   2184c:	b003      	add	sp, #12
   2184e:	bd30      	pop	{r4, r5, pc}
   21850:	2009      	movs	r0, #9
   21852:	e7f7      	b.n	21844 <tls_interface_connect+0x44>
   21854:	205f      	movs	r0, #95	; 0x5f
   21856:	e7f5      	b.n	21844 <tls_interface_connect+0x44>
   21858:	2000f266 	.word	0x2000f266

0002185c <tls_interface_listen>:
   2185c:	b538      	push	{r3, r4, r5, lr}
   2185e:	4604      	mov	r4, r0
   21860:	460d      	mov	r5, r1
   21862:	f7fe fce3 	bl	2022c <interface_socket_from_handle_get>
   21866:	2800      	cmp	r0, #0
   21868:	d034      	beq.n	218d4 <tls_interface_listen+0x78>
   2186a:	6803      	ldr	r3, [r0, #0]
   2186c:	00db      	lsls	r3, r3, #3
   2186e:	d433      	bmi.n	218d8 <tls_interface_listen+0x7c>
   21870:	6903      	ldr	r3, [r0, #16]
   21872:	2b01      	cmp	r3, #1
   21874:	d130      	bne.n	218d8 <tls_interface_listen+0x7c>
   21876:	6803      	ldr	r3, [r0, #0]
   21878:	b29b      	uxth	r3, r3
   2187a:	2b04      	cmp	r3, #4
   2187c:	d105      	bne.n	2188a <tls_interface_listen+0x2e>
   2187e:	2324      	movs	r3, #36	; 0x24
   21880:	4363      	muls	r3, r4
   21882:	4a16      	ldr	r2, [pc, #88]	; (218dc <tls_interface_listen+0x80>)
   21884:	5cd3      	ldrb	r3, [r2, r3]
   21886:	2b02      	cmp	r3, #2
   21888:	d009      	beq.n	2189e <tls_interface_listen+0x42>
   2188a:	6803      	ldr	r3, [r0, #0]
   2188c:	b29b      	uxth	r3, r3
   2188e:	2b0b      	cmp	r3, #11
   21890:	d122      	bne.n	218d8 <tls_interface_listen+0x7c>
   21892:	2324      	movs	r3, #36	; 0x24
   21894:	4363      	muls	r3, r4
   21896:	4a11      	ldr	r2, [pc, #68]	; (218dc <tls_interface_listen+0x80>)
   21898:	5cd3      	ldrb	r3, [r2, r3]
   2189a:	2b01      	cmp	r3, #1
   2189c:	d11c      	bne.n	218d8 <tls_interface_listen+0x7c>
   2189e:	2324      	movs	r3, #36	; 0x24
   218a0:	2101      	movs	r1, #1
   218a2:	4363      	muls	r3, r4
   218a4:	4a0d      	ldr	r2, [pc, #52]	; (218dc <tls_interface_listen+0x80>)
   218a6:	54d1      	strb	r1, [r2, r3]
   218a8:	6803      	ldr	r3, [r0, #0]
   218aa:	2b0b      	cmp	r3, #11
   218ac:	d10a      	bne.n	218c4 <tls_interface_listen+0x68>
   218ae:	4629      	mov	r1, r5
   218b0:	4620      	mov	r0, r4
   218b2:	f7ff f877 	bl	209a4 <ip_interface_listen>
   218b6:	2800      	cmp	r0, #0
   218b8:	dd03      	ble.n	218c2 <tls_interface_listen+0x66>
   218ba:	f006 ffce 	bl	2885a <nrf_modem_os_errno_set>
   218be:	f04f 30ff 	mov.w	r0, #4294967295
   218c2:	bd38      	pop	{r3, r4, r5, pc}
   218c4:	4601      	mov	r1, r0
   218c6:	6802      	ldr	r2, [r0, #0]
   218c8:	4620      	mov	r0, r4
   218ca:	f7ff fdff 	bl	214cc <secure_socket_attach_initiate>
   218ce:	2800      	cmp	r0, #0
   218d0:	d0ed      	beq.n	218ae <tls_interface_listen+0x52>
   218d2:	e7f0      	b.n	218b6 <tls_interface_listen+0x5a>
   218d4:	2009      	movs	r0, #9
   218d6:	e7f0      	b.n	218ba <tls_interface_listen+0x5e>
   218d8:	205f      	movs	r0, #95	; 0x5f
   218da:	e7ee      	b.n	218ba <tls_interface_listen+0x5e>
   218dc:	2000f266 	.word	0x2000f266

000218e0 <tls_interface_accept>:
   218e0:	b570      	push	{r4, r5, r6, lr}
   218e2:	b086      	sub	sp, #24
   218e4:	4605      	mov	r5, r0
   218e6:	f04f 34ff 	mov.w	r4, #4294967295
   218ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
   218ee:	9301      	str	r3, [sp, #4]
   218f0:	f7fe fc9c 	bl	2022c <interface_socket_from_handle_get>
   218f4:	9405      	str	r4, [sp, #20]
   218f6:	2800      	cmp	r0, #0
   218f8:	d04b      	beq.n	21992 <tls_interface_accept+0xb2>
   218fa:	6806      	ldr	r6, [r0, #0]
   218fc:	b2b6      	uxth	r6, r6
   218fe:	2e07      	cmp	r6, #7
   21900:	d147      	bne.n	21992 <tls_interface_accept+0xb2>
   21902:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   21906:	6800      	ldr	r0, [r0, #0]
   21908:	9903      	ldr	r1, [sp, #12]
   2190a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   2190e:	d005      	beq.n	2191c <tls_interface_accept+0x3c>
   21910:	205f      	movs	r0, #95	; 0x5f
   21912:	f006 ffa2 	bl	2885a <nrf_modem_os_errno_set>
   21916:	4620      	mov	r0, r4
   21918:	b006      	add	sp, #24
   2191a:	bd70      	pop	{r4, r5, r6, pc}
   2191c:	4628      	mov	r0, r5
   2191e:	f7ff f88f 	bl	20a40 <ip_interface_accept>
   21922:	1e04      	subs	r4, r0, #0
   21924:	db2f      	blt.n	21986 <tls_interface_accept+0xa6>
   21926:	f7fe fc81 	bl	2022c <interface_socket_from_handle_get>
   2192a:	2124      	movs	r1, #36	; 0x24
   2192c:	6803      	ldr	r3, [r0, #0]
   2192e:	4a1a      	ldr	r2, [pc, #104]	; (21998 <tls_interface_accept+0xb8>)
   21930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21934:	6003      	str	r3, [r0, #0]
   21936:	6803      	ldr	r3, [r0, #0]
   21938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2193c:	6003      	str	r3, [r0, #0]
   2193e:	fb01 2305 	mla	r3, r1, r5, r2
   21942:	fb01 2104 	mla	r1, r1, r4, r2
   21946:	f103 0524 	add.w	r5, r3, #36	; 0x24
   2194a:	f853 6b04 	ldr.w	r6, [r3], #4
   2194e:	42ab      	cmp	r3, r5
   21950:	f841 6b04 	str.w	r6, [r1], #4
   21954:	d1f9      	bne.n	2194a <tls_interface_accept+0x6a>
   21956:	2324      	movs	r3, #36	; 0x24
   21958:	2102      	movs	r1, #2
   2195a:	4363      	muls	r3, r4
   2195c:	54d1      	strb	r1, [r2, r3]
   2195e:	6803      	ldr	r3, [r0, #0]
   21960:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21964:	0c1b      	lsrs	r3, r3, #16
   21966:	041b      	lsls	r3, r3, #16
   21968:	f043 030b 	orr.w	r3, r3, #11
   2196c:	6003      	str	r3, [r0, #0]
   2196e:	210c      	movs	r1, #12
   21970:	4620      	mov	r0, r4
   21972:	ab05      	add	r3, sp, #20
   21974:	f007 ff95 	bl	298a2 <ip_interface_wait>
   21978:	4605      	mov	r5, r0
   2197a:	2800      	cmp	r0, #0
   2197c:	d0cb      	beq.n	21916 <tls_interface_accept+0x36>
   2197e:	4620      	mov	r0, r4
   21980:	f7fe fdd6 	bl	20530 <ip_interface_close>
   21984:	462c      	mov	r4, r5
   21986:	4620      	mov	r0, r4
   21988:	f006 ff67 	bl	2885a <nrf_modem_os_errno_set>
   2198c:	f04f 34ff 	mov.w	r4, #4294967295
   21990:	e7c1      	b.n	21916 <tls_interface_accept+0x36>
   21992:	2409      	movs	r4, #9
   21994:	e7f7      	b.n	21986 <tls_interface_accept+0xa6>
   21996:	bf00      	nop
   21998:	2000f266 	.word	0x2000f266

0002199c <tls_interface_setopt>:
   2199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2199e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   219a2:	4606      	mov	r6, r0
   219a4:	4615      	mov	r5, r2
   219a6:	461f      	mov	r7, r3
   219a8:	9c08      	ldr	r4, [sp, #32]
   219aa:	d004      	beq.n	219b6 <tls_interface_setopt+0x1a>
   219ac:	b003      	add	sp, #12
   219ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   219b2:	f7ff b929 	b.w	20c08 <ip_interface_setopt>
   219b6:	b923      	cbnz	r3, 219c2 <tls_interface_setopt+0x26>
   219b8:	2a05      	cmp	r2, #5
   219ba:	d100      	bne.n	219be <tls_interface_setopt+0x22>
   219bc:	b10c      	cbz	r4, 219c2 <tls_interface_setopt+0x26>
   219be:	200e      	movs	r0, #14
   219c0:	e077      	b.n	21ab2 <tls_interface_setopt+0x116>
   219c2:	4630      	mov	r0, r6
   219c4:	f7fe fc32 	bl	2022c <interface_socket_from_handle_get>
   219c8:	4601      	mov	r1, r0
   219ca:	2800      	cmp	r0, #0
   219cc:	f000 8087 	beq.w	21ade <tls_interface_setopt+0x142>
   219d0:	6803      	ldr	r3, [r0, #0]
   219d2:	b29b      	uxth	r3, r3
   219d4:	2b02      	cmp	r3, #2
   219d6:	d007      	beq.n	219e8 <tls_interface_setopt+0x4c>
   219d8:	6803      	ldr	r3, [r0, #0]
   219da:	b29b      	uxth	r3, r3
   219dc:	2b04      	cmp	r3, #4
   219de:	d003      	beq.n	219e8 <tls_interface_setopt+0x4c>
   219e0:	6803      	ldr	r3, [r0, #0]
   219e2:	b29b      	uxth	r3, r3
   219e4:	2b05      	cmp	r3, #5
   219e6:	d17a      	bne.n	21ade <tls_interface_setopt+0x142>
   219e8:	3d01      	subs	r5, #1
   219ea:	2d08      	cmp	r5, #8
   219ec:	d879      	bhi.n	21ae2 <tls_interface_setopt+0x146>
   219ee:	e8df f005 	tbb	[pc, r5]
   219f2:	2605      	.short	0x2605
   219f4:	55433818 	.word	0x55433818
   219f8:	6578      	.short	0x6578
   219fa:	71          	.byte	0x71
   219fb:	00          	.byte	0x00
   219fc:	2c04      	cmp	r4, #4
   219fe:	d174      	bne.n	21aea <tls_interface_setopt+0x14e>
   21a00:	6838      	ldr	r0, [r7, #0]
   21a02:	b930      	cbnz	r0, 21a12 <tls_interface_setopt+0x76>
   21a04:	2324      	movs	r3, #36	; 0x24
   21a06:	2202      	movs	r2, #2
   21a08:	435e      	muls	r6, r3
   21a0a:	4b39      	ldr	r3, [pc, #228]	; (21af0 <tls_interface_setopt+0x154>)
   21a0c:	559a      	strb	r2, [r3, r6]
   21a0e:	b003      	add	sp, #12
   21a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a12:	2801      	cmp	r0, #1
   21a14:	d169      	bne.n	21aea <tls_interface_setopt+0x14e>
   21a16:	2324      	movs	r3, #36	; 0x24
   21a18:	435e      	muls	r6, r3
   21a1a:	4b35      	ldr	r3, [pc, #212]	; (21af0 <tls_interface_setopt+0x154>)
   21a1c:	5598      	strb	r0, [r3, r6]
   21a1e:	2000      	movs	r0, #0
   21a20:	e7f5      	b.n	21a0e <tls_interface_setopt+0x72>
   21a22:	2c01      	cmp	r4, #1
   21a24:	d161      	bne.n	21aea <tls_interface_setopt+0x14e>
   21a26:	2f00      	cmp	r7, #0
   21a28:	d0c9      	beq.n	219be <tls_interface_setopt+0x22>
   21a2a:	2024      	movs	r0, #36	; 0x24
   21a2c:	783b      	ldrb	r3, [r7, #0]
   21a2e:	4a30      	ldr	r2, [pc, #192]	; (21af0 <tls_interface_setopt+0x154>)
   21a30:	3b00      	subs	r3, #0
   21a32:	bf18      	it	ne
   21a34:	2301      	movne	r3, #1
   21a36:	fb00 2606 	mla	r6, r0, r6, r2
   21a3a:	7073      	strb	r3, [r6, #1]
   21a3c:	e7ef      	b.n	21a1e <tls_interface_setopt+0x82>
   21a3e:	2c03      	cmp	r4, #3
   21a40:	d953      	bls.n	21aea <tls_interface_setopt+0x14e>
   21a42:	f014 0503 	ands.w	r5, r4, #3
   21a46:	d150      	bne.n	21aea <tls_interface_setopt+0x14e>
   21a48:	2324      	movs	r3, #36	; 0x24
   21a4a:	435e      	muls	r6, r3
   21a4c:	4828      	ldr	r0, [pc, #160]	; (21af0 <tls_interface_setopt+0x154>)
   21a4e:	08a2      	lsrs	r2, r4, #2
   21a50:	1983      	adds	r3, r0, r6
   21a52:	70da      	strb	r2, [r3, #3]
   21a54:	4639      	mov	r1, r7
   21a56:	4622      	mov	r2, r4
   21a58:	3604      	adds	r6, #4
   21a5a:	4430      	add	r0, r6
   21a5c:	f009 f9f4 	bl	2ae48 <memcpy>
   21a60:	e7dd      	b.n	21a1e <tls_interface_setopt+0x82>
   21a62:	2c04      	cmp	r4, #4
   21a64:	d141      	bne.n	21aea <tls_interface_setopt+0x14e>
   21a66:	683b      	ldr	r3, [r7, #0]
   21a68:	2b02      	cmp	r3, #2
   21a6a:	d83e      	bhi.n	21aea <tls_interface_setopt+0x14e>
   21a6c:	2024      	movs	r0, #36	; 0x24
   21a6e:	4a20      	ldr	r2, [pc, #128]	; (21af0 <tls_interface_setopt+0x154>)
   21a70:	fb00 2606 	mla	r6, r0, r6, r2
   21a74:	70b3      	strb	r3, [r6, #2]
   21a76:	e7d2      	b.n	21a1e <tls_interface_setopt+0x82>
   21a78:	4630      	mov	r0, r6
   21a7a:	f7ff fd15 	bl	214a8 <hostname_free>
   21a7e:	2c00      	cmp	r4, #0
   21a80:	d0cd      	beq.n	21a1e <tls_interface_setopt+0x82>
   21a82:	4620      	mov	r0, r4
   21a84:	f7f6 f952 	bl	17d2c <nrf_modem_os_alloc>
   21a88:	4b1a      	ldr	r3, [pc, #104]	; (21af4 <tls_interface_setopt+0x158>)
   21a8a:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   21a8e:	b350      	cbz	r0, 21ae6 <tls_interface_setopt+0x14a>
   21a90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   21a94:	4622      	mov	r2, r4
   21a96:	4639      	mov	r1, r7
   21a98:	6074      	str	r4, [r6, #4]
   21a9a:	e7df      	b.n	21a5c <tls_interface_setopt+0xc0>
   21a9c:	f247 0301 	movw	r3, #28673	; 0x7001
   21aa0:	e9cd 7400 	strd	r7, r4, [sp]
   21aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
   21aa8:	4630      	mov	r0, r6
   21aaa:	f008 f8a2 	bl	29bf2 <ip_interface_socketoption_send>
   21aae:	2800      	cmp	r0, #0
   21ab0:	d0b5      	beq.n	21a1e <tls_interface_setopt+0x82>
   21ab2:	f006 fed2 	bl	2885a <nrf_modem_os_errno_set>
   21ab6:	f04f 30ff 	mov.w	r0, #4294967295
   21aba:	e7a8      	b.n	21a0e <tls_interface_setopt+0x72>
   21abc:	2c04      	cmp	r4, #4
   21abe:	d114      	bne.n	21aea <tls_interface_setopt+0x14e>
   21ac0:	6838      	ldr	r0, [r7, #0]
   21ac2:	f7ff fcd5 	bl	21470 <secure_socket_dtls_timeout_check>
   21ac6:	2800      	cmp	r0, #0
   21ac8:	d1f3      	bne.n	21ab2 <tls_interface_setopt+0x116>
   21aca:	f247 0302 	movw	r3, #28674	; 0x7002
   21ace:	e9cd 7400 	strd	r7, r4, [sp]
   21ad2:	e7e7      	b.n	21aa4 <tls_interface_setopt+0x108>
   21ad4:	f247 0303 	movw	r3, #28675	; 0x7003
   21ad8:	e9cd 7400 	strd	r7, r4, [sp]
   21adc:	e7e2      	b.n	21aa4 <tls_interface_setopt+0x108>
   21ade:	2009      	movs	r0, #9
   21ae0:	e7e7      	b.n	21ab2 <tls_interface_setopt+0x116>
   21ae2:	206d      	movs	r0, #109	; 0x6d
   21ae4:	e7e5      	b.n	21ab2 <tls_interface_setopt+0x116>
   21ae6:	200c      	movs	r0, #12
   21ae8:	e7e3      	b.n	21ab2 <tls_interface_setopt+0x116>
   21aea:	2016      	movs	r0, #22
   21aec:	e7e1      	b.n	21ab2 <tls_interface_setopt+0x116>
   21aee:	bf00      	nop
   21af0:	2000f266 	.word	0x2000f266
   21af4:	2000eef4 	.word	0x2000eef4

00021af8 <tls_interface_getopt>:
   21af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21afa:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   21afe:	b085      	sub	sp, #20
   21b00:	4606      	mov	r6, r0
   21b02:	4617      	mov	r7, r2
   21b04:	461d      	mov	r5, r3
   21b06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21b08:	d004      	beq.n	21b14 <tls_interface_getopt+0x1c>
   21b0a:	b005      	add	sp, #20
   21b0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21b10:	f008 b8d5 	b.w	29cbe <ip_interface_getopt>
   21b14:	b103      	cbz	r3, 21b18 <tls_interface_getopt+0x20>
   21b16:	b92c      	cbnz	r4, 21b24 <tls_interface_getopt+0x2c>
   21b18:	200e      	movs	r0, #14
   21b1a:	f006 fe9e 	bl	2885a <nrf_modem_os_errno_set>
   21b1e:	f04f 30ff 	mov.w	r0, #4294967295
   21b22:	e051      	b.n	21bc8 <tls_interface_getopt+0xd0>
   21b24:	6823      	ldr	r3, [r4, #0]
   21b26:	b90b      	cbnz	r3, 21b2c <tls_interface_getopt+0x34>
   21b28:	2016      	movs	r0, #22
   21b2a:	e7f6      	b.n	21b1a <tls_interface_getopt+0x22>
   21b2c:	f7fe fb7e 	bl	2022c <interface_socket_from_handle_get>
   21b30:	4601      	mov	r1, r0
   21b32:	2800      	cmp	r0, #0
   21b34:	d068      	beq.n	21c08 <tls_interface_getopt+0x110>
   21b36:	1e7a      	subs	r2, r7, #1
   21b38:	2a07      	cmp	r2, #7
   21b3a:	d871      	bhi.n	21c20 <tls_interface_getopt+0x128>
   21b3c:	e8df f002 	tbb	[pc, r2]
   21b40:	461a2904 	.word	0x461a2904
   21b44:	5f705370 	.word	0x5f705370
   21b48:	6823      	ldr	r3, [r4, #0]
   21b4a:	2124      	movs	r1, #36	; 0x24
   21b4c:	2b04      	cmp	r3, #4
   21b4e:	bf88      	it	hi
   21b50:	2304      	movhi	r3, #4
   21b52:	fb01 f606 	mul.w	r6, r1, r6
   21b56:	bf88      	it	hi
   21b58:	6023      	strhi	r3, [r4, #0]
   21b5a:	4b32      	ldr	r3, [pc, #200]	; (21c24 <tls_interface_getopt+0x12c>)
   21b5c:	a903      	add	r1, sp, #12
   21b5e:	5d9b      	ldrb	r3, [r3, r6]
   21b60:	1e5a      	subs	r2, r3, #1
   21b62:	4253      	negs	r3, r2
   21b64:	4153      	adcs	r3, r2
   21b66:	6822      	ldr	r2, [r4, #0]
   21b68:	9303      	str	r3, [sp, #12]
   21b6a:	4628      	mov	r0, r5
   21b6c:	f009 f96c 	bl	2ae48 <memcpy>
   21b70:	2000      	movs	r0, #0
   21b72:	e029      	b.n	21bc8 <tls_interface_getopt+0xd0>
   21b74:	6823      	ldr	r3, [r4, #0]
   21b76:	2b00      	cmp	r3, #0
   21b78:	d0d6      	beq.n	21b28 <tls_interface_getopt+0x30>
   21b7a:	2124      	movs	r1, #36	; 0x24
   21b7c:	2b01      	cmp	r3, #1
   21b7e:	bf88      	it	hi
   21b80:	2301      	movhi	r3, #1
   21b82:	4828      	ldr	r0, [pc, #160]	; (21c24 <tls_interface_getopt+0x12c>)
   21b84:	bf88      	it	hi
   21b86:	6023      	strhi	r3, [r4, #0]
   21b88:	fb01 0106 	mla	r1, r1, r6, r0
   21b8c:	6822      	ldr	r2, [r4, #0]
   21b8e:	3101      	adds	r1, #1
   21b90:	e7eb      	b.n	21b6a <tls_interface_getopt+0x72>
   21b92:	2324      	movs	r3, #36	; 0x24
   21b94:	4923      	ldr	r1, [pc, #140]	; (21c24 <tls_interface_getopt+0x12c>)
   21b96:	6822      	ldr	r2, [r4, #0]
   21b98:	fb03 1306 	mla	r3, r3, r6, r1
   21b9c:	78d8      	ldrb	r0, [r3, #3]
   21b9e:	0793      	lsls	r3, r2, #30
   21ba0:	bf14      	ite	ne
   21ba2:	2300      	movne	r3, #0
   21ba4:	0893      	lsreq	r3, r2, #2
   21ba6:	4283      	cmp	r3, r0
   21ba8:	bf28      	it	cs
   21baa:	4603      	movcs	r3, r0
   21bac:	009f      	lsls	r7, r3, #2
   21bae:	b143      	cbz	r3, 21bc2 <tls_interface_getopt+0xca>
   21bb0:	2024      	movs	r0, #36	; 0x24
   21bb2:	fb00 1106 	mla	r1, r0, r6, r1
   21bb6:	42ba      	cmp	r2, r7
   21bb8:	bf88      	it	hi
   21bba:	6027      	strhi	r7, [r4, #0]
   21bbc:	6822      	ldr	r2, [r4, #0]
   21bbe:	3104      	adds	r1, #4
   21bc0:	e7d3      	b.n	21b6a <tls_interface_getopt+0x72>
   21bc2:	2800      	cmp	r0, #0
   21bc4:	d1b0      	bne.n	21b28 <tls_interface_getopt+0x30>
   21bc6:	6020      	str	r0, [r4, #0]
   21bc8:	b005      	add	sp, #20
   21bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21bcc:	6823      	ldr	r3, [r4, #0]
   21bce:	2124      	movs	r1, #36	; 0x24
   21bd0:	2b04      	cmp	r3, #4
   21bd2:	bf88      	it	hi
   21bd4:	2304      	movhi	r3, #4
   21bd6:	4813      	ldr	r0, [pc, #76]	; (21c24 <tls_interface_getopt+0x12c>)
   21bd8:	bf88      	it	hi
   21bda:	6023      	strhi	r3, [r4, #0]
   21bdc:	fb01 0106 	mla	r1, r1, r6, r0
   21be0:	6822      	ldr	r2, [r4, #0]
   21be2:	3102      	adds	r1, #2
   21be4:	e7c1      	b.n	21b6a <tls_interface_getopt+0x72>
   21be6:	f247 0301 	movw	r3, #28673	; 0x7001
   21bea:	e9cd 5400 	strd	r5, r4, [sp]
   21bee:	f44f 7280 	mov.w	r2, #256	; 0x100
   21bf2:	4630      	mov	r0, r6
   21bf4:	f7fe fe00 	bl	207f8 <ip_interface_socketoption_get>
   21bf8:	2800      	cmp	r0, #0
   21bfa:	d0e5      	beq.n	21bc8 <tls_interface_getopt+0xd0>
   21bfc:	e78d      	b.n	21b1a <tls_interface_getopt+0x22>
   21bfe:	6823      	ldr	r3, [r4, #0]
   21c00:	2b04      	cmp	r3, #4
   21c02:	d903      	bls.n	21c0c <tls_interface_getopt+0x114>
   21c04:	2304      	movs	r3, #4
   21c06:	6023      	str	r3, [r4, #0]
   21c08:	2009      	movs	r0, #9
   21c0a:	e786      	b.n	21b1a <tls_interface_getopt+0x22>
   21c0c:	6828      	ldr	r0, [r5, #0]
   21c0e:	f7ff fc2f 	bl	21470 <secure_socket_dtls_timeout_check>
   21c12:	2800      	cmp	r0, #0
   21c14:	d181      	bne.n	21b1a <tls_interface_getopt+0x22>
   21c16:	f247 0302 	movw	r3, #28674	; 0x7002
   21c1a:	e9cd 5400 	strd	r5, r4, [sp]
   21c1e:	e7e6      	b.n	21bee <tls_interface_getopt+0xf6>
   21c20:	206d      	movs	r0, #109	; 0x6d
   21c22:	e77a      	b.n	21b1a <tls_interface_getopt+0x22>
   21c24:	2000f266 	.word	0x2000f266

00021c28 <tls_rpc_ip_event_handler>:
   21c28:	b570      	push	{r4, r5, r6, lr}
   21c2a:	460c      	mov	r4, r1
   21c2c:	f248 0181 	movw	r1, #32897	; 0x8081
   21c30:	428b      	cmp	r3, r1
   21c32:	4606      	mov	r6, r0
   21c34:	d035      	beq.n	21ca2 <tls_rpc_ip_event_handler+0x7a>
   21c36:	f249 0182 	movw	r1, #36994	; 0x9082
   21c3a:	428b      	cmp	r3, r1
   21c3c:	d040      	beq.n	21cc0 <tls_rpc_ip_event_handler+0x98>
   21c3e:	f248 0102 	movw	r1, #32770	; 0x8002
   21c42:	428b      	cmp	r3, r1
   21c44:	d161      	bne.n	21d0a <tls_rpc_ip_event_handler+0xe2>
   21c46:	2c00      	cmp	r4, #0
   21c48:	d05f      	beq.n	21d0a <tls_rpc_ip_event_handler+0xe2>
   21c4a:	6963      	ldr	r3, [r4, #20]
   21c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   21c50:	d002      	beq.n	21c58 <tls_rpc_ip_event_handler+0x30>
   21c52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   21c56:	d158      	bne.n	21d0a <tls_rpc_ip_event_handler+0xe2>
   21c58:	6823      	ldr	r3, [r4, #0]
   21c5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   21c5e:	6023      	str	r3, [r4, #0]
   21c60:	6955      	ldr	r5, [r2, #20]
   21c62:	2d00      	cmp	r5, #0
   21c64:	d14d      	bne.n	21d02 <tls_rpc_ip_event_handler+0xda>
   21c66:	6823      	ldr	r3, [r4, #0]
   21c68:	0c1b      	lsrs	r3, r3, #16
   21c6a:	041b      	lsls	r3, r3, #16
   21c6c:	f043 0305 	orr.w	r3, r3, #5
   21c70:	6023      	str	r3, [r4, #0]
   21c72:	6823      	ldr	r3, [r4, #0]
   21c74:	00db      	lsls	r3, r3, #3
   21c76:	d401      	bmi.n	21c7c <tls_rpc_ip_event_handler+0x54>
   21c78:	2000      	movs	r0, #0
   21c7a:	e020      	b.n	21cbe <tls_rpc_ip_event_handler+0x96>
   21c7c:	2324      	movs	r3, #36	; 0x24
   21c7e:	4373      	muls	r3, r6
   21c80:	4a23      	ldr	r2, [pc, #140]	; (21d10 <tls_rpc_ip_event_handler+0xe8>)
   21c82:	5cd3      	ldrb	r3, [r2, r3]
   21c84:	2b02      	cmp	r3, #2
   21c86:	d1f7      	bne.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21c88:	4621      	mov	r1, r4
   21c8a:	4630      	mov	r0, r6
   21c8c:	f008 f889 	bl	29da2 <secure_client_socket>
   21c90:	2800      	cmp	r0, #0
   21c92:	d0f1      	beq.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21c94:	2877      	cmp	r0, #119	; 0x77
   21c96:	d0ef      	beq.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21c98:	6060      	str	r0, [r4, #4]
   21c9a:	6823      	ldr	r3, [r4, #0]
   21c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   21ca0:	e02d      	b.n	21cfe <tls_rpc_ip_event_handler+0xd6>
   21ca2:	2c00      	cmp	r4, #0
   21ca4:	d0e8      	beq.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21ca6:	6823      	ldr	r3, [r4, #0]
   21ca8:	b29b      	uxth	r3, r3
   21caa:	2b0a      	cmp	r3, #10
   21cac:	d1e4      	bne.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21cae:	6950      	ldr	r0, [r2, #20]
   21cb0:	bb40      	cbnz	r0, 21d04 <tls_rpc_ip_event_handler+0xdc>
   21cb2:	6823      	ldr	r3, [r4, #0]
   21cb4:	0c1b      	lsrs	r3, r3, #16
   21cb6:	041b      	lsls	r3, r3, #16
   21cb8:	f043 030b 	orr.w	r3, r3, #11
   21cbc:	6023      	str	r3, [r4, #0]
   21cbe:	bd70      	pop	{r4, r5, r6, pc}
   21cc0:	2c00      	cmp	r4, #0
   21cc2:	d0d9      	beq.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21cc4:	6823      	ldr	r3, [r4, #0]
   21cc6:	b29b      	uxth	r3, r3
   21cc8:	2b0b      	cmp	r3, #11
   21cca:	d1d5      	bne.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21ccc:	6915      	ldr	r5, [r2, #16]
   21cce:	b9c5      	cbnz	r5, 21d02 <tls_rpc_ip_event_handler+0xda>
   21cd0:	6823      	ldr	r3, [r4, #0]
   21cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   21cd6:	6023      	str	r3, [r4, #0]
   21cd8:	f7ff fbe6 	bl	214a8 <hostname_free>
   21cdc:	6823      	ldr	r3, [r4, #0]
   21cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   21ce2:	6023      	str	r3, [r4, #0]
   21ce4:	6823      	ldr	r3, [r4, #0]
   21ce6:	0c1b      	lsrs	r3, r3, #16
   21ce8:	041b      	lsls	r3, r3, #16
   21cea:	f043 030c 	orr.w	r3, r3, #12
   21cee:	6023      	str	r3, [r4, #0]
   21cf0:	6823      	ldr	r3, [r4, #0]
   21cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21cf6:	6023      	str	r3, [r4, #0]
   21cf8:	6823      	ldr	r3, [r4, #0]
   21cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21cfe:	6023      	str	r3, [r4, #0]
   21d00:	e7ba      	b.n	21c78 <tls_rpc_ip_event_handler+0x50>
   21d02:	4628      	mov	r0, r5
   21d04:	f7fe fb58 	bl	203b8 <rpc_error_to_nrf_errno>
   21d08:	e7c6      	b.n	21c98 <tls_rpc_ip_event_handler+0x70>
   21d0a:	2001      	movs	r0, #1
   21d0c:	e7d7      	b.n	21cbe <tls_rpc_ip_event_handler+0x96>
   21d0e:	bf00      	nop
   21d10:	2000f266 	.word	0x2000f266

00021d14 <at_cmd_send>:
   21d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21d16:	4615      	mov	r5, r2
   21d18:	f06f 0258 	mvn.w	r2, #88	; 0x58
   21d1c:	2300      	movs	r3, #0
   21d1e:	7302      	strb	r2, [r0, #12]
   21d20:	2204      	movs	r2, #4
   21d22:	4c0d      	ldr	r4, [pc, #52]	; (21d58 <at_cmd_send+0x44>)
   21d24:	7343      	strb	r3, [r0, #13]
   21d26:	7383      	strb	r3, [r0, #14]
   21d28:	73c3      	strb	r3, [r0, #15]
   21d2a:	7202      	strb	r2, [r0, #8]
   21d2c:	7243      	strb	r3, [r0, #9]
   21d2e:	7283      	strb	r3, [r0, #10]
   21d30:	72c3      	strb	r3, [r0, #11]
   21d32:	4602      	mov	r2, r0
   21d34:	b289      	uxth	r1, r1
   21d36:	2003      	movs	r0, #3
   21d38:	7023      	strb	r3, [r4, #0]
   21d3a:	f007 fd03 	bl	29744 <rpc_client_request_send>
   21d3e:	f04f 33ff 	mov.w	r3, #4294967295
   21d42:	9301      	str	r3, [sp, #4]
   21d44:	7823      	ldrb	r3, [r4, #0]
   21d46:	42ab      	cmp	r3, r5
   21d48:	d101      	bne.n	21d4e <at_cmd_send+0x3a>
   21d4a:	b003      	add	sp, #12
   21d4c:	bd30      	pop	{r4, r5, pc}
   21d4e:	a901      	add	r1, sp, #4
   21d50:	2000      	movs	r0, #0
   21d52:	f7f5 fef7 	bl	17b44 <nrf_modem_os_timedwait>
   21d56:	e7f5      	b.n	21d44 <at_cmd_send+0x30>
   21d58:	2000f386 	.word	0x2000f386

00021d5c <at_response_match>:
   21d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d5e:	4605      	mov	r5, r0
   21d60:	2400      	movs	r4, #0
   21d62:	4f10      	ldr	r7, [pc, #64]	; (21da4 <at_response_match+0x48>)
   21d64:	f857 6b04 	ldr.w	r6, [r7], #4
   21d68:	4628      	mov	r0, r5
   21d6a:	4631      	mov	r1, r6
   21d6c:	f009 fa01 	bl	2b172 <strstr>
   21d70:	b928      	cbnz	r0, 21d7e <at_response_match+0x22>
   21d72:	3401      	adds	r4, #1
   21d74:	2c04      	cmp	r4, #4
   21d76:	d1f5      	bne.n	21d64 <at_response_match+0x8>
   21d78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   21d7c:	e00e      	b.n	21d9c <at_response_match+0x40>
   21d7e:	2c01      	cmp	r4, #1
   21d80:	d0fa      	beq.n	21d78 <at_response_match+0x1c>
   21d82:	1ea3      	subs	r3, r4, #2
   21d84:	2b01      	cmp	r3, #1
   21d86:	d80a      	bhi.n	21d9e <at_response_match+0x42>
   21d88:	4630      	mov	r0, r6
   21d8a:	f7ef f917 	bl	10fbc <strlen>
   21d8e:	220a      	movs	r2, #10
   21d90:	2100      	movs	r1, #0
   21d92:	4428      	add	r0, r5
   21d94:	f003 f832 	bl	24dfc <strtol>
   21d98:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   21d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d9e:	2000      	movs	r0, #0
   21da0:	e7fc      	b.n	21d9c <at_response_match+0x40>
   21da2:	bf00      	nop
   21da4:	0002cae4 	.word	0x0002cae4

00021da8 <at_vprintf>:
   21da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21dac:	4607      	mov	r7, r0
   21dae:	460e      	mov	r6, r1
   21db0:	481d      	ldr	r0, [pc, #116]	; (21e28 <at_vprintf+0x80>)
   21db2:	2100      	movs	r1, #0
   21db4:	4690      	mov	r8, r2
   21db6:	461d      	mov	r5, r3
   21db8:	9301      	str	r3, [sp, #4]
   21dba:	f003 f94d 	bl	25058 <vsniprintf>
   21dbe:	3001      	adds	r0, #1
   21dc0:	f007 fcba 	bl	29738 <rpc_client_request_alloc>
   21dc4:	4604      	mov	r4, r0
   21dc6:	b360      	cbz	r0, 21e22 <at_vprintf+0x7a>
   21dc8:	9501      	str	r5, [sp, #4]
   21dca:	462b      	mov	r3, r5
   21dcc:	6841      	ldr	r1, [r0, #4]
   21dce:	4642      	mov	r2, r8
   21dd0:	6800      	ldr	r0, [r0, #0]
   21dd2:	f003 f941 	bl	25058 <vsniprintf>
   21dd6:	2202      	movs	r2, #2
   21dd8:	2101      	movs	r1, #1
   21dda:	4620      	mov	r0, r4
   21ddc:	f7ff ff9a 	bl	21d14 <at_cmd_send>
   21de0:	4d12      	ldr	r5, [pc, #72]	; (21e2c <at_vprintf+0x84>)
   21de2:	b97f      	cbnz	r7, 21e04 <at_vprintf+0x5c>
   21de4:	682b      	ldr	r3, [r5, #0]
   21de6:	6818      	ldr	r0, [r3, #0]
   21de8:	f7ff ffb8 	bl	21d5c <at_response_match>
   21dec:	4604      	mov	r4, r0
   21dee:	682b      	ldr	r3, [r5, #0]
   21df0:	6818      	ldr	r0, [r3, #0]
   21df2:	f007 fcb1 	bl	29758 <rpc_client_data_free>
   21df6:	6828      	ldr	r0, [r5, #0]
   21df8:	f007 fcab 	bl	29752 <rpc_client_message_free>
   21dfc:	4620      	mov	r0, r4
   21dfe:	b002      	add	sp, #8
   21e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e04:	682c      	ldr	r4, [r5, #0]
   21e06:	4638      	mov	r0, r7
   21e08:	6862      	ldr	r2, [r4, #4]
   21e0a:	6821      	ldr	r1, [r4, #0]
   21e0c:	42b2      	cmp	r2, r6
   21e0e:	bf28      	it	cs
   21e10:	4632      	movcs	r2, r6
   21e12:	f009 f819 	bl	2ae48 <memcpy>
   21e16:	6863      	ldr	r3, [r4, #4]
   21e18:	42b3      	cmp	r3, r6
   21e1a:	d9e3      	bls.n	21de4 <at_vprintf+0x3c>
   21e1c:	f06f 0406 	mvn.w	r4, #6
   21e20:	e7e5      	b.n	21dee <at_vprintf+0x46>
   21e22:	f06f 040b 	mvn.w	r4, #11
   21e26:	e7e9      	b.n	21dfc <at_vprintf+0x54>
   21e28:	0002c49c 	.word	0x0002c49c
   21e2c:	2000ef44 	.word	0x2000ef44

00021e30 <nrf_modem_at_init>:
   21e30:	2201      	movs	r2, #1
   21e32:	b508      	push	{r3, lr}
   21e34:	4611      	mov	r1, r2
   21e36:	4808      	ldr	r0, [pc, #32]	; (21e58 <nrf_modem_at_init+0x28>)
   21e38:	f7f5 ff3c 	bl	17cb4 <nrf_modem_os_sem_init>
   21e3c:	2000      	movs	r0, #0
   21e3e:	f007 fc7b 	bl	29738 <rpc_client_request_alloc>
   21e42:	b128      	cbz	r0, 21e50 <nrf_modem_at_init+0x20>
   21e44:	2201      	movs	r2, #1
   21e46:	2105      	movs	r1, #5
   21e48:	f7ff ff64 	bl	21d14 <at_cmd_send>
   21e4c:	2000      	movs	r0, #0
   21e4e:	bd08      	pop	{r3, pc}
   21e50:	f06f 000b 	mvn.w	r0, #11
   21e54:	e7fb      	b.n	21e4e <nrf_modem_at_init+0x1e>
   21e56:	bf00      	nop
   21e58:	2000ef34 	.word	0x2000ef34

00021e5c <nrf_modem_at_notif_handler_set>:
   21e5c:	4b01      	ldr	r3, [pc, #4]	; (21e64 <nrf_modem_at_notif_handler_set+0x8>)
   21e5e:	6018      	str	r0, [r3, #0]
   21e60:	2000      	movs	r0, #0
   21e62:	4770      	bx	lr
   21e64:	2000ef40 	.word	0x2000ef40

00021e68 <nrf_modem_at_printf>:
   21e68:	b40f      	push	{r0, r1, r2, r3}
   21e6a:	4b11      	ldr	r3, [pc, #68]	; (21eb0 <nrf_modem_at_printf+0x48>)
   21e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21e6e:	781b      	ldrb	r3, [r3, #0]
   21e70:	9c06      	ldr	r4, [sp, #24]
   21e72:	b1bb      	cbz	r3, 21ea4 <nrf_modem_at_printf+0x3c>
   21e74:	b1cc      	cbz	r4, 21eaa <nrf_modem_at_printf+0x42>
   21e76:	4d0f      	ldr	r5, [pc, #60]	; (21eb4 <nrf_modem_at_printf+0x4c>)
   21e78:	f04f 31ff 	mov.w	r1, #4294967295
   21e7c:	6828      	ldr	r0, [r5, #0]
   21e7e:	f006 fcf6 	bl	2886e <nrf_modem_os_sem_take>
   21e82:	2100      	movs	r1, #0
   21e84:	4622      	mov	r2, r4
   21e86:	ab07      	add	r3, sp, #28
   21e88:	4608      	mov	r0, r1
   21e8a:	9301      	str	r3, [sp, #4]
   21e8c:	f7ff ff8c 	bl	21da8 <at_vprintf>
   21e90:	4604      	mov	r4, r0
   21e92:	6828      	ldr	r0, [r5, #0]
   21e94:	f006 fce9 	bl	2886a <nrf_modem_os_sem_give>
   21e98:	4620      	mov	r0, r4
   21e9a:	b003      	add	sp, #12
   21e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21ea0:	b004      	add	sp, #16
   21ea2:	4770      	bx	lr
   21ea4:	f04f 34ff 	mov.w	r4, #4294967295
   21ea8:	e7f6      	b.n	21e98 <nrf_modem_at_printf+0x30>
   21eaa:	f06f 040d 	mvn.w	r4, #13
   21eae:	e7f3      	b.n	21e98 <nrf_modem_at_printf+0x30>
   21eb0:	2000f38f 	.word	0x2000f38f
   21eb4:	2000ef34 	.word	0x2000ef34

00021eb8 <nrf_modem_at_cmd>:
   21eb8:	b40c      	push	{r2, r3}
   21eba:	4b2e      	ldr	r3, [pc, #184]	; (21f74 <nrf_modem_at_cmd+0xbc>)
   21ebc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21ec0:	781b      	ldrb	r3, [r3, #0]
   21ec2:	4605      	mov	r5, r0
   21ec4:	460f      	mov	r7, r1
   21ec6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d049      	beq.n	21f62 <nrf_modem_at_cmd+0xaa>
   21ece:	2800      	cmp	r0, #0
   21ed0:	d04a      	beq.n	21f68 <nrf_modem_at_cmd+0xb0>
   21ed2:	f1b8 0f00 	cmp.w	r8, #0
   21ed6:	d047      	beq.n	21f68 <nrf_modem_at_cmd+0xb0>
   21ed8:	2900      	cmp	r1, #0
   21eda:	d048      	beq.n	21f6e <nrf_modem_at_cmd+0xb6>
   21edc:	4b26      	ldr	r3, [pc, #152]	; (21f78 <nrf_modem_at_cmd+0xc0>)
   21ede:	681a      	ldr	r2, [r3, #0]
   21ee0:	4699      	mov	r9, r3
   21ee2:	b1d2      	cbz	r2, 21f1a <nrf_modem_at_cmd+0x62>
   21ee4:	4e25      	ldr	r6, [pc, #148]	; (21f7c <nrf_modem_at_cmd+0xc4>)
   21ee6:	6833      	ldr	r3, [r6, #0]
   21ee8:	b1bb      	cbz	r3, 21f1a <nrf_modem_at_cmd+0x62>
   21eea:	2400      	movs	r4, #0
   21eec:	f8d9 3000 	ldr.w	r3, [r9]
   21ef0:	429c      	cmp	r4, r3
   21ef2:	d212      	bcs.n	21f1a <nrf_modem_at_cmd+0x62>
   21ef4:	6833      	ldr	r3, [r6, #0]
   21ef6:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   21efa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   21efe:	f7ef f85d 	bl	10fbc <strlen>
   21f02:	6833      	ldr	r3, [r6, #0]
   21f04:	4602      	mov	r2, r0
   21f06:	4641      	mov	r1, r8
   21f08:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   21f0c:	f009 f8eb 	bl	2b0e6 <strncmp>
   21f10:	b9a8      	cbnz	r0, 21f3e <nrf_modem_at_cmd+0x86>
   21f12:	6833      	ldr	r3, [r6, #0]
   21f14:	4453      	add	r3, sl
   21f16:	685b      	ldr	r3, [r3, #4]
   21f18:	b99b      	cbnz	r3, 21f42 <nrf_modem_at_cmd+0x8a>
   21f1a:	4e19      	ldr	r6, [pc, #100]	; (21f80 <nrf_modem_at_cmd+0xc8>)
   21f1c:	f04f 31ff 	mov.w	r1, #4294967295
   21f20:	6830      	ldr	r0, [r6, #0]
   21f22:	f006 fca4 	bl	2886e <nrf_modem_os_sem_take>
   21f26:	ab0b      	add	r3, sp, #44	; 0x2c
   21f28:	4642      	mov	r2, r8
   21f2a:	4639      	mov	r1, r7
   21f2c:	4628      	mov	r0, r5
   21f2e:	9301      	str	r3, [sp, #4]
   21f30:	f7ff ff3a 	bl	21da8 <at_vprintf>
   21f34:	4604      	mov	r4, r0
   21f36:	6830      	ldr	r0, [r6, #0]
   21f38:	f006 fc97 	bl	2886a <nrf_modem_os_sem_give>
   21f3c:	e00b      	b.n	21f56 <nrf_modem_at_cmd+0x9e>
   21f3e:	3401      	adds	r4, #1
   21f40:	e7d4      	b.n	21eec <nrf_modem_at_cmd+0x34>
   21f42:	4642      	mov	r2, r8
   21f44:	4639      	mov	r1, r7
   21f46:	4628      	mov	r0, r5
   21f48:	4798      	blx	r3
   21f4a:	1e04      	subs	r4, r0, #0
   21f4c:	db03      	blt.n	21f56 <nrf_modem_at_cmd+0x9e>
   21f4e:	4628      	mov	r0, r5
   21f50:	f7ff ff04 	bl	21d5c <at_response_match>
   21f54:	4604      	mov	r4, r0
   21f56:	4620      	mov	r0, r4
   21f58:	b002      	add	sp, #8
   21f5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21f5e:	b002      	add	sp, #8
   21f60:	4770      	bx	lr
   21f62:	f04f 34ff 	mov.w	r4, #4294967295
   21f66:	e7f6      	b.n	21f56 <nrf_modem_at_cmd+0x9e>
   21f68:	f06f 040d 	mvn.w	r4, #13
   21f6c:	e7f3      	b.n	21f56 <nrf_modem_at_cmd+0x9e>
   21f6e:	f06f 0415 	mvn.w	r4, #21
   21f72:	e7f0      	b.n	21f56 <nrf_modem_at_cmd+0x9e>
   21f74:	2000f38f 	.word	0x2000f38f
   21f78:	2000ef3c 	.word	0x2000ef3c
   21f7c:	2000ef38 	.word	0x2000ef38
   21f80:	2000ef34 	.word	0x2000ef34

00021f84 <nrf_modem_at_scanf>:
   21f84:	b40e      	push	{r1, r2, r3}
   21f86:	4b23      	ldr	r3, [pc, #140]	; (22014 <nrf_modem_at_scanf+0x90>)
   21f88:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   21f8a:	781b      	ldrb	r3, [r3, #0]
   21f8c:	4605      	mov	r5, r0
   21f8e:	9f07      	ldr	r7, [sp, #28]
   21f90:	2b00      	cmp	r3, #0
   21f92:	d039      	beq.n	22008 <nrf_modem_at_scanf+0x84>
   21f94:	2800      	cmp	r0, #0
   21f96:	d03a      	beq.n	2200e <nrf_modem_at_scanf+0x8a>
   21f98:	2f00      	cmp	r7, #0
   21f9a:	d038      	beq.n	2200e <nrf_modem_at_scanf+0x8a>
   21f9c:	4e1e      	ldr	r6, [pc, #120]	; (22018 <nrf_modem_at_scanf+0x94>)
   21f9e:	f04f 31ff 	mov.w	r1, #4294967295
   21fa2:	6830      	ldr	r0, [r6, #0]
   21fa4:	f006 fc63 	bl	2886e <nrf_modem_os_sem_take>
   21fa8:	4628      	mov	r0, r5
   21faa:	f7ef f807 	bl	10fbc <strlen>
   21fae:	3001      	adds	r0, #1
   21fb0:	f007 fbc2 	bl	29738 <rpc_client_request_alloc>
   21fb4:	4604      	mov	r4, r0
   21fb6:	b320      	cbz	r0, 22002 <nrf_modem_at_scanf+0x7e>
   21fb8:	4629      	mov	r1, r5
   21fba:	6800      	ldr	r0, [r0, #0]
   21fbc:	4d17      	ldr	r5, [pc, #92]	; (2201c <nrf_modem_at_scanf+0x98>)
   21fbe:	f009 f88a 	bl	2b0d6 <strcpy>
   21fc2:	4620      	mov	r0, r4
   21fc4:	2202      	movs	r2, #2
   21fc6:	2101      	movs	r1, #1
   21fc8:	f7ff fea4 	bl	21d14 <at_cmd_send>
   21fcc:	682b      	ldr	r3, [r5, #0]
   21fce:	aa08      	add	r2, sp, #32
   21fd0:	4639      	mov	r1, r7
   21fd2:	6818      	ldr	r0, [r3, #0]
   21fd4:	9201      	str	r2, [sp, #4]
   21fd6:	f003 f871 	bl	250bc <vsiscanf>
   21fda:	682b      	ldr	r3, [r5, #0]
   21fdc:	1e04      	subs	r4, r0, #0
   21fde:	6818      	ldr	r0, [r3, #0]
   21fe0:	bf08      	it	eq
   21fe2:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   21fe6:	f007 fbb7 	bl	29758 <rpc_client_data_free>
   21fea:	6828      	ldr	r0, [r5, #0]
   21fec:	f007 fbb1 	bl	29752 <rpc_client_message_free>
   21ff0:	6830      	ldr	r0, [r6, #0]
   21ff2:	f006 fc3a 	bl	2886a <nrf_modem_os_sem_give>
   21ff6:	4620      	mov	r0, r4
   21ff8:	b002      	add	sp, #8
   21ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21ffe:	b003      	add	sp, #12
   22000:	4770      	bx	lr
   22002:	f06f 040b 	mvn.w	r4, #11
   22006:	e7f3      	b.n	21ff0 <nrf_modem_at_scanf+0x6c>
   22008:	f04f 34ff 	mov.w	r4, #4294967295
   2200c:	e7f3      	b.n	21ff6 <nrf_modem_at_scanf+0x72>
   2200e:	f06f 040d 	mvn.w	r4, #13
   22012:	e7f0      	b.n	21ff6 <nrf_modem_at_scanf+0x72>
   22014:	2000f38f 	.word	0x2000f38f
   22018:	2000ef34 	.word	0x2000ef34
   2201c:	2000ef44 	.word	0x2000ef44

00022020 <rpc_at_event_handler>:
   22020:	b570      	push	{r4, r5, r6, lr}
   22022:	68c3      	ldr	r3, [r0, #12]
   22024:	4605      	mov	r5, r0
   22026:	2ba7      	cmp	r3, #167	; 0xa7
   22028:	d003      	beq.n	22032 <rpc_at_event_handler+0x12>
   2202a:	6828      	ldr	r0, [r5, #0]
   2202c:	f007 fb94 	bl	29758 <rpc_client_data_free>
   22030:	e008      	b.n	22044 <rpc_at_event_handler+0x24>
   22032:	2903      	cmp	r1, #3
   22034:	d008      	beq.n	22048 <rpc_at_event_handler+0x28>
   22036:	2904      	cmp	r1, #4
   22038:	d019      	beq.n	2206e <rpc_at_event_handler+0x4e>
   2203a:	2902      	cmp	r1, #2
   2203c:	d102      	bne.n	22044 <rpc_at_event_handler+0x24>
   2203e:	2201      	movs	r2, #1
   22040:	4b0e      	ldr	r3, [pc, #56]	; (2207c <rpc_at_event_handler+0x5c>)
   22042:	701a      	strb	r2, [r3, #0]
   22044:	2000      	movs	r0, #0
   22046:	e00a      	b.n	2205e <rpc_at_event_handler+0x3e>
   22048:	4e0d      	ldr	r6, [pc, #52]	; (22080 <rpc_at_event_handler+0x60>)
   2204a:	6833      	ldr	r3, [r6, #0]
   2204c:	b143      	cbz	r3, 22060 <rpc_at_event_handler+0x40>
   2204e:	2400      	movs	r4, #0
   22050:	6800      	ldr	r0, [r0, #0]
   22052:	4798      	blx	r3
   22054:	6828      	ldr	r0, [r5, #0]
   22056:	6034      	str	r4, [r6, #0]
   22058:	f007 fb7e 	bl	29758 <rpc_client_data_free>
   2205c:	b2e0      	uxtb	r0, r4
   2205e:	bd70      	pop	{r4, r5, r6, pc}
   22060:	2202      	movs	r2, #2
   22062:	4b08      	ldr	r3, [pc, #32]	; (22084 <rpc_at_event_handler+0x64>)
   22064:	2401      	movs	r4, #1
   22066:	6018      	str	r0, [r3, #0]
   22068:	4b04      	ldr	r3, [pc, #16]	; (2207c <rpc_at_event_handler+0x5c>)
   2206a:	701a      	strb	r2, [r3, #0]
   2206c:	e7f6      	b.n	2205c <rpc_at_event_handler+0x3c>
   2206e:	4b06      	ldr	r3, [pc, #24]	; (22088 <rpc_at_event_handler+0x68>)
   22070:	681b      	ldr	r3, [r3, #0]
   22072:	2b00      	cmp	r3, #0
   22074:	d0d9      	beq.n	2202a <rpc_at_event_handler+0xa>
   22076:	6800      	ldr	r0, [r0, #0]
   22078:	4798      	blx	r3
   2207a:	e7d6      	b.n	2202a <rpc_at_event_handler+0xa>
   2207c:	2000f386 	.word	0x2000f386
   22080:	2000ef48 	.word	0x2000ef48
   22084:	2000ef44 	.word	0x2000ef44
   22088:	2000ef40 	.word	0x2000ef40

0002208c <mfu_client_send>:
   2208c:	f04f 33ff 	mov.w	r3, #4294967295
   22090:	b513      	push	{r0, r1, r4, lr}
   22092:	9301      	str	r3, [sp, #4]
   22094:	231a      	movs	r3, #26
   22096:	7303      	strb	r3, [r0, #12]
   22098:	f06f 031e 	mvn.w	r3, #30
   2209c:	7343      	strb	r3, [r0, #13]
   2209e:	f06f 0354 	mvn.w	r3, #84	; 0x54
   220a2:	7383      	strb	r3, [r0, #14]
   220a4:	2315      	movs	r3, #21
   220a6:	2903      	cmp	r1, #3
   220a8:	73c3      	strb	r3, [r0, #15]
   220aa:	bf14      	ite	ne
   220ac:	2304      	movne	r3, #4
   220ae:	2308      	moveq	r3, #8
   220b0:	6083      	str	r3, [r0, #8]
   220b2:	2300      	movs	r3, #0
   220b4:	4c09      	ldr	r4, [pc, #36]	; (220dc <mfu_client_send+0x50>)
   220b6:	4602      	mov	r2, r0
   220b8:	2006      	movs	r0, #6
   220ba:	7023      	strb	r3, [r4, #0]
   220bc:	f007 fb42 	bl	29744 <rpc_client_request_send>
   220c0:	7823      	ldrb	r3, [r4, #0]
   220c2:	2b01      	cmp	r3, #1
   220c4:	d105      	bne.n	220d2 <mfu_client_send+0x46>
   220c6:	4b06      	ldr	r3, [pc, #24]	; (220e0 <mfu_client_send+0x54>)
   220c8:	681b      	ldr	r3, [r3, #0]
   220ca:	6918      	ldr	r0, [r3, #16]
   220cc:	4240      	negs	r0, r0
   220ce:	b002      	add	sp, #8
   220d0:	bd10      	pop	{r4, pc}
   220d2:	a901      	add	r1, sp, #4
   220d4:	2000      	movs	r0, #0
   220d6:	f7f5 fd35 	bl	17b44 <nrf_modem_os_timedwait>
   220da:	e7f1      	b.n	220c0 <mfu_client_send+0x34>
   220dc:	2000f387 	.word	0x2000f387
   220e0:	2000ef4c 	.word	0x2000ef4c

000220e4 <nrf_modem_delta_dfu_offset>:
   220e4:	b538      	push	{r3, r4, r5, lr}
   220e6:	4b10      	ldr	r3, [pc, #64]	; (22128 <nrf_modem_delta_dfu_offset+0x44>)
   220e8:	4605      	mov	r5, r0
   220ea:	781b      	ldrb	r3, [r3, #0]
   220ec:	b193      	cbz	r3, 22114 <nrf_modem_delta_dfu_offset+0x30>
   220ee:	b1a0      	cbz	r0, 2211a <nrf_modem_delta_dfu_offset+0x36>
   220f0:	2000      	movs	r0, #0
   220f2:	f007 fb21 	bl	29738 <rpc_client_request_alloc>
   220f6:	b198      	cbz	r0, 22120 <nrf_modem_delta_dfu_offset+0x3c>
   220f8:	2109      	movs	r1, #9
   220fa:	f7ff ffc7 	bl	2208c <mfu_client_send>
   220fe:	4b0b      	ldr	r3, [pc, #44]	; (2212c <nrf_modem_delta_dfu_offset+0x48>)
   22100:	4604      	mov	r4, r0
   22102:	b910      	cbnz	r0, 2210a <nrf_modem_delta_dfu_offset+0x26>
   22104:	681a      	ldr	r2, [r3, #0]
   22106:	6952      	ldr	r2, [r2, #20]
   22108:	602a      	str	r2, [r5, #0]
   2210a:	6818      	ldr	r0, [r3, #0]
   2210c:	f007 fb21 	bl	29752 <rpc_client_message_free>
   22110:	4620      	mov	r0, r4
   22112:	bd38      	pop	{r3, r4, r5, pc}
   22114:	f04f 34ff 	mov.w	r4, #4294967295
   22118:	e7fa      	b.n	22110 <nrf_modem_delta_dfu_offset+0x2c>
   2211a:	f06f 040d 	mvn.w	r4, #13
   2211e:	e7f7      	b.n	22110 <nrf_modem_delta_dfu_offset+0x2c>
   22120:	f06f 040b 	mvn.w	r4, #11
   22124:	e7f4      	b.n	22110 <nrf_modem_delta_dfu_offset+0x2c>
   22126:	bf00      	nop
   22128:	2000f38f 	.word	0x2000f38f
   2212c:	2000ef4c 	.word	0x2000ef4c

00022130 <nrf_modem_delta_dfu_area>:
   22130:	b538      	push	{r3, r4, r5, lr}
   22132:	4b10      	ldr	r3, [pc, #64]	; (22174 <nrf_modem_delta_dfu_area+0x44>)
   22134:	4605      	mov	r5, r0
   22136:	781b      	ldrb	r3, [r3, #0]
   22138:	b193      	cbz	r3, 22160 <nrf_modem_delta_dfu_area+0x30>
   2213a:	b1a0      	cbz	r0, 22166 <nrf_modem_delta_dfu_area+0x36>
   2213c:	2000      	movs	r0, #0
   2213e:	f007 fafb 	bl	29738 <rpc_client_request_alloc>
   22142:	b198      	cbz	r0, 2216c <nrf_modem_delta_dfu_area+0x3c>
   22144:	2102      	movs	r1, #2
   22146:	f7ff ffa1 	bl	2208c <mfu_client_send>
   2214a:	4b0b      	ldr	r3, [pc, #44]	; (22178 <nrf_modem_delta_dfu_area+0x48>)
   2214c:	4604      	mov	r4, r0
   2214e:	b910      	cbnz	r0, 22156 <nrf_modem_delta_dfu_area+0x26>
   22150:	681a      	ldr	r2, [r3, #0]
   22152:	6952      	ldr	r2, [r2, #20]
   22154:	602a      	str	r2, [r5, #0]
   22156:	6818      	ldr	r0, [r3, #0]
   22158:	f007 fafb 	bl	29752 <rpc_client_message_free>
   2215c:	4620      	mov	r0, r4
   2215e:	bd38      	pop	{r3, r4, r5, pc}
   22160:	f04f 34ff 	mov.w	r4, #4294967295
   22164:	e7fa      	b.n	2215c <nrf_modem_delta_dfu_area+0x2c>
   22166:	f06f 040d 	mvn.w	r4, #13
   2216a:	e7f7      	b.n	2215c <nrf_modem_delta_dfu_area+0x2c>
   2216c:	f06f 040b 	mvn.w	r4, #11
   22170:	e7f4      	b.n	2215c <nrf_modem_delta_dfu_area+0x2c>
   22172:	bf00      	nop
   22174:	2000f38f 	.word	0x2000f38f
   22178:	2000ef4c 	.word	0x2000ef4c

0002217c <nrf_modem_delta_dfu_uuid>:
   2217c:	b538      	push	{r3, r4, r5, lr}
   2217e:	4b13      	ldr	r3, [pc, #76]	; (221cc <nrf_modem_delta_dfu_uuid+0x50>)
   22180:	4605      	mov	r5, r0
   22182:	781b      	ldrb	r3, [r3, #0]
   22184:	b1cb      	cbz	r3, 221ba <nrf_modem_delta_dfu_uuid+0x3e>
   22186:	b1d8      	cbz	r0, 221c0 <nrf_modem_delta_dfu_uuid+0x44>
   22188:	2000      	movs	r0, #0
   2218a:	f007 fad5 	bl	29738 <rpc_client_request_alloc>
   2218e:	b1d0      	cbz	r0, 221c6 <nrf_modem_delta_dfu_uuid+0x4a>
   22190:	2101      	movs	r1, #1
   22192:	f7ff ff7b 	bl	2208c <mfu_client_send>
   22196:	490e      	ldr	r1, [pc, #56]	; (221d0 <nrf_modem_delta_dfu_uuid+0x54>)
   22198:	4604      	mov	r4, r0
   2219a:	b948      	cbnz	r0, 221b0 <nrf_modem_delta_dfu_uuid+0x34>
   2219c:	680b      	ldr	r3, [r1, #0]
   2219e:	f103 0214 	add.w	r2, r3, #20
   221a2:	3338      	adds	r3, #56	; 0x38
   221a4:	f852 0b04 	ldr.w	r0, [r2], #4
   221a8:	429a      	cmp	r2, r3
   221aa:	f845 0b04 	str.w	r0, [r5], #4
   221ae:	d1f9      	bne.n	221a4 <nrf_modem_delta_dfu_uuid+0x28>
   221b0:	6808      	ldr	r0, [r1, #0]
   221b2:	f007 face 	bl	29752 <rpc_client_message_free>
   221b6:	4620      	mov	r0, r4
   221b8:	bd38      	pop	{r3, r4, r5, pc}
   221ba:	f04f 34ff 	mov.w	r4, #4294967295
   221be:	e7fa      	b.n	221b6 <nrf_modem_delta_dfu_uuid+0x3a>
   221c0:	f06f 040d 	mvn.w	r4, #13
   221c4:	e7f7      	b.n	221b6 <nrf_modem_delta_dfu_uuid+0x3a>
   221c6:	f06f 040b 	mvn.w	r4, #11
   221ca:	e7f4      	b.n	221b6 <nrf_modem_delta_dfu_uuid+0x3a>
   221cc:	2000f38f 	.word	0x2000f38f
   221d0:	2000ef4c 	.word	0x2000ef4c

000221d4 <nrf_modem_delta_dfu_write_init>:
   221d4:	4b13      	ldr	r3, [pc, #76]	; (22224 <nrf_modem_delta_dfu_write_init+0x50>)
   221d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   221d8:	781b      	ldrb	r3, [r3, #0]
   221da:	b1d3      	cbz	r3, 22212 <nrf_modem_delta_dfu_write_init+0x3e>
   221dc:	4d12      	ldr	r5, [pc, #72]	; (22228 <nrf_modem_delta_dfu_write_init+0x54>)
   221de:	782b      	ldrb	r3, [r5, #0]
   221e0:	b9d3      	cbnz	r3, 22218 <nrf_modem_delta_dfu_write_init+0x44>
   221e2:	a801      	add	r0, sp, #4
   221e4:	f7ff ff7e 	bl	220e4 <nrf_modem_delta_dfu_offset>
   221e8:	4604      	mov	r4, r0
   221ea:	b978      	cbnz	r0, 2220c <nrf_modem_delta_dfu_write_init+0x38>
   221ec:	f007 faa4 	bl	29738 <rpc_client_request_alloc>
   221f0:	b1a8      	cbz	r0, 2221e <nrf_modem_delta_dfu_write_init+0x4a>
   221f2:	9a01      	ldr	r2, [sp, #4]
   221f4:	2103      	movs	r1, #3
   221f6:	6102      	str	r2, [r0, #16]
   221f8:	f7ff ff48 	bl	2208c <mfu_client_send>
   221fc:	4604      	mov	r4, r0
   221fe:	4b0b      	ldr	r3, [pc, #44]	; (2222c <nrf_modem_delta_dfu_write_init+0x58>)
   22200:	6818      	ldr	r0, [r3, #0]
   22202:	f007 faa6 	bl	29752 <rpc_client_message_free>
   22206:	b90c      	cbnz	r4, 2220c <nrf_modem_delta_dfu_write_init+0x38>
   22208:	2301      	movs	r3, #1
   2220a:	702b      	strb	r3, [r5, #0]
   2220c:	4620      	mov	r0, r4
   2220e:	b003      	add	sp, #12
   22210:	bd30      	pop	{r4, r5, pc}
   22212:	f04f 34ff 	mov.w	r4, #4294967295
   22216:	e7f9      	b.n	2220c <nrf_modem_delta_dfu_write_init+0x38>
   22218:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2221c:	e7f6      	b.n	2220c <nrf_modem_delta_dfu_write_init+0x38>
   2221e:	f06f 040b 	mvn.w	r4, #11
   22222:	e7f3      	b.n	2220c <nrf_modem_delta_dfu_write_init+0x38>
   22224:	2000f38f 	.word	0x2000f38f
   22228:	2000f388 	.word	0x2000f388
   2222c:	2000ef4c 	.word	0x2000ef4c

00022230 <nrf_modem_delta_dfu_write>:
   22230:	4b14      	ldr	r3, [pc, #80]	; (22284 <nrf_modem_delta_dfu_write+0x54>)
   22232:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22234:	781b      	ldrb	r3, [r3, #0]
   22236:	4605      	mov	r5, r0
   22238:	b1c3      	cbz	r3, 2226c <nrf_modem_delta_dfu_write+0x3c>
   2223a:	b1d0      	cbz	r0, 22272 <nrf_modem_delta_dfu_write+0x42>
   2223c:	b1e1      	cbz	r1, 22278 <nrf_modem_delta_dfu_write+0x48>
   2223e:	4608      	mov	r0, r1
   22240:	9101      	str	r1, [sp, #4]
   22242:	f007 fa79 	bl	29738 <rpc_client_request_alloc>
   22246:	4604      	mov	r4, r0
   22248:	b1c8      	cbz	r0, 2227e <nrf_modem_delta_dfu_write+0x4e>
   2224a:	4629      	mov	r1, r5
   2224c:	9a01      	ldr	r2, [sp, #4]
   2224e:	6800      	ldr	r0, [r0, #0]
   22250:	f008 fdfa 	bl	2ae48 <memcpy>
   22254:	4620      	mov	r0, r4
   22256:	2104      	movs	r1, #4
   22258:	f7ff ff18 	bl	2208c <mfu_client_send>
   2225c:	4b0a      	ldr	r3, [pc, #40]	; (22288 <nrf_modem_delta_dfu_write+0x58>)
   2225e:	4604      	mov	r4, r0
   22260:	6818      	ldr	r0, [r3, #0]
   22262:	f007 fa76 	bl	29752 <rpc_client_message_free>
   22266:	4620      	mov	r0, r4
   22268:	b003      	add	sp, #12
   2226a:	bd30      	pop	{r4, r5, pc}
   2226c:	f04f 34ff 	mov.w	r4, #4294967295
   22270:	e7f9      	b.n	22266 <nrf_modem_delta_dfu_write+0x36>
   22272:	f06f 040d 	mvn.w	r4, #13
   22276:	e7f6      	b.n	22266 <nrf_modem_delta_dfu_write+0x36>
   22278:	f06f 0415 	mvn.w	r4, #21
   2227c:	e7f3      	b.n	22266 <nrf_modem_delta_dfu_write+0x36>
   2227e:	f06f 040b 	mvn.w	r4, #11
   22282:	e7f0      	b.n	22266 <nrf_modem_delta_dfu_write+0x36>
   22284:	2000f38f 	.word	0x2000f38f
   22288:	2000ef4c 	.word	0x2000ef4c

0002228c <nrf_modem_delta_dfu_write_done>:
   2228c:	4b0d      	ldr	r3, [pc, #52]	; (222c4 <nrf_modem_delta_dfu_write_done+0x38>)
   2228e:	b510      	push	{r4, lr}
   22290:	781b      	ldrb	r3, [r3, #0]
   22292:	b183      	cbz	r3, 222b6 <nrf_modem_delta_dfu_write_done+0x2a>
   22294:	2000      	movs	r0, #0
   22296:	f007 fa4f 	bl	29738 <rpc_client_request_alloc>
   2229a:	b178      	cbz	r0, 222bc <nrf_modem_delta_dfu_write_done+0x30>
   2229c:	2106      	movs	r1, #6
   2229e:	f7ff fef5 	bl	2208c <mfu_client_send>
   222a2:	4b09      	ldr	r3, [pc, #36]	; (222c8 <nrf_modem_delta_dfu_write_done+0x3c>)
   222a4:	4604      	mov	r4, r0
   222a6:	6818      	ldr	r0, [r3, #0]
   222a8:	f007 fa53 	bl	29752 <rpc_client_message_free>
   222ac:	2200      	movs	r2, #0
   222ae:	4b07      	ldr	r3, [pc, #28]	; (222cc <nrf_modem_delta_dfu_write_done+0x40>)
   222b0:	701a      	strb	r2, [r3, #0]
   222b2:	4620      	mov	r0, r4
   222b4:	bd10      	pop	{r4, pc}
   222b6:	f04f 34ff 	mov.w	r4, #4294967295
   222ba:	e7fa      	b.n	222b2 <nrf_modem_delta_dfu_write_done+0x26>
   222bc:	f06f 040b 	mvn.w	r4, #11
   222c0:	e7f7      	b.n	222b2 <nrf_modem_delta_dfu_write_done+0x26>
   222c2:	bf00      	nop
   222c4:	2000f38f 	.word	0x2000f38f
   222c8:	2000ef4c 	.word	0x2000ef4c
   222cc:	2000f388 	.word	0x2000f388

000222d0 <nrf_modem_delta_dfu_update>:
   222d0:	4b0b      	ldr	r3, [pc, #44]	; (22300 <nrf_modem_delta_dfu_update+0x30>)
   222d2:	b510      	push	{r4, lr}
   222d4:	781b      	ldrb	r3, [r3, #0]
   222d6:	b16b      	cbz	r3, 222f4 <nrf_modem_delta_dfu_update+0x24>
   222d8:	2000      	movs	r0, #0
   222da:	f007 fa2d 	bl	29738 <rpc_client_request_alloc>
   222de:	b160      	cbz	r0, 222fa <nrf_modem_delta_dfu_update+0x2a>
   222e0:	2105      	movs	r1, #5
   222e2:	f7ff fed3 	bl	2208c <mfu_client_send>
   222e6:	4b07      	ldr	r3, [pc, #28]	; (22304 <nrf_modem_delta_dfu_update+0x34>)
   222e8:	4604      	mov	r4, r0
   222ea:	6818      	ldr	r0, [r3, #0]
   222ec:	f007 fa31 	bl	29752 <rpc_client_message_free>
   222f0:	4620      	mov	r0, r4
   222f2:	bd10      	pop	{r4, pc}
   222f4:	f04f 34ff 	mov.w	r4, #4294967295
   222f8:	e7fa      	b.n	222f0 <nrf_modem_delta_dfu_update+0x20>
   222fa:	f06f 040b 	mvn.w	r4, #11
   222fe:	e7f7      	b.n	222f0 <nrf_modem_delta_dfu_update+0x20>
   22300:	2000f38f 	.word	0x2000f38f
   22304:	2000ef4c 	.word	0x2000ef4c

00022308 <nrf_modem_delta_dfu_erase>:
   22308:	4b0b      	ldr	r3, [pc, #44]	; (22338 <nrf_modem_delta_dfu_erase+0x30>)
   2230a:	b510      	push	{r4, lr}
   2230c:	781b      	ldrb	r3, [r3, #0]
   2230e:	b16b      	cbz	r3, 2232c <nrf_modem_delta_dfu_erase+0x24>
   22310:	2000      	movs	r0, #0
   22312:	f007 fa11 	bl	29738 <rpc_client_request_alloc>
   22316:	b160      	cbz	r0, 22332 <nrf_modem_delta_dfu_erase+0x2a>
   22318:	2108      	movs	r1, #8
   2231a:	f7ff feb7 	bl	2208c <mfu_client_send>
   2231e:	4b07      	ldr	r3, [pc, #28]	; (2233c <nrf_modem_delta_dfu_erase+0x34>)
   22320:	4604      	mov	r4, r0
   22322:	6818      	ldr	r0, [r3, #0]
   22324:	f007 fa15 	bl	29752 <rpc_client_message_free>
   22328:	4620      	mov	r0, r4
   2232a:	bd10      	pop	{r4, pc}
   2232c:	f04f 34ff 	mov.w	r4, #4294967295
   22330:	e7fa      	b.n	22328 <nrf_modem_delta_dfu_erase+0x20>
   22332:	f06f 040b 	mvn.w	r4, #11
   22336:	e7f7      	b.n	22328 <nrf_modem_delta_dfu_erase+0x20>
   22338:	2000f38f 	.word	0x2000f38f
   2233c:	2000ef4c 	.word	0x2000ef4c

00022340 <rpc_dfu_event_handler>:
   22340:	b510      	push	{r4, lr}
   22342:	4604      	mov	r4, r0
   22344:	6800      	ldr	r0, [r0, #0]
   22346:	b108      	cbz	r0, 2234c <rpc_dfu_event_handler+0xc>
   22348:	f007 fa06 	bl	29758 <rpc_client_data_free>
   2234c:	68e2      	ldr	r2, [r4, #12]
   2234e:	4b06      	ldr	r3, [pc, #24]	; (22368 <rpc_dfu_event_handler+0x28>)
   22350:	429a      	cmp	r2, r3
   22352:	bf01      	itttt	eq
   22354:	2301      	moveq	r3, #1
   22356:	4a05      	ldreq	r2, [pc, #20]	; (2236c <rpc_dfu_event_handler+0x2c>)
   22358:	4618      	moveq	r0, r3
   2235a:	7013      	strbeq	r3, [r2, #0]
   2235c:	bf0a      	itet	eq
   2235e:	4a04      	ldreq	r2, [pc, #16]	; (22370 <rpc_dfu_event_handler+0x30>)
   22360:	2000      	movne	r0, #0
   22362:	6014      	streq	r4, [r2, #0]
   22364:	bd10      	pop	{r4, pc}
   22366:	bf00      	nop
   22368:	15abe11a 	.word	0x15abe11a
   2236c:	2000f387 	.word	0x2000f387
   22370:	2000ef4c 	.word	0x2000ef4c

00022374 <send_message>:
   22374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22378:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2243c <send_message+0xc8>
   2237c:	4606      	mov	r6, r0
   2237e:	f899 3000 	ldrb.w	r3, [r9]
   22382:	460f      	mov	r7, r1
   22384:	464d      	mov	r5, r9
   22386:	b085      	sub	sp, #20
   22388:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   2238c:	2b00      	cmp	r3, #0
   2238e:	d14d      	bne.n	2242c <send_message+0xb8>
   22390:	2301      	movs	r3, #1
   22392:	4610      	mov	r0, r2
   22394:	f889 3000 	strb.w	r3, [r9]
   22398:	9201      	str	r2, [sp, #4]
   2239a:	f007 f9cd 	bl	29738 <rpc_client_request_alloc>
   2239e:	4604      	mov	r4, r0
   223a0:	2800      	cmp	r0, #0
   223a2:	d039      	beq.n	22418 <send_message+0xa4>
   223a4:	4923      	ldr	r1, [pc, #140]	; (22434 <send_message+0xc0>)
   223a6:	9a01      	ldr	r2, [sp, #4]
   223a8:	880b      	ldrh	r3, [r1, #0]
   223aa:	3301      	adds	r3, #1
   223ac:	b29b      	uxth	r3, r3
   223ae:	800b      	strh	r3, [r1, #0]
   223b0:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   223b4:	603b      	str	r3, [r7, #0]
   223b6:	2343      	movs	r3, #67	; 0x43
   223b8:	7303      	strb	r3, [r0, #12]
   223ba:	2354      	movs	r3, #84	; 0x54
   223bc:	7343      	strb	r3, [r0, #13]
   223be:	2376      	movs	r3, #118	; 0x76
   223c0:	7383      	strb	r3, [r0, #14]
   223c2:	2349      	movs	r3, #73	; 0x49
   223c4:	6042      	str	r2, [r0, #4]
   223c6:	73c3      	strb	r3, [r0, #15]
   223c8:	4639      	mov	r1, r7
   223ca:	f880 8008 	strb.w	r8, [r0, #8]
   223ce:	f880 8009 	strb.w	r8, [r0, #9]
   223d2:	f880 800a 	strb.w	r8, [r0, #10]
   223d6:	f880 800b 	strb.w	r8, [r0, #11]
   223da:	6800      	ldr	r0, [r0, #0]
   223dc:	f008 fd34 	bl	2ae48 <memcpy>
   223e0:	4622      	mov	r2, r4
   223e2:	4631      	mov	r1, r6
   223e4:	2007      	movs	r0, #7
   223e6:	f007 f9ad 	bl	29744 <rpc_client_request_send>
   223ea:	f04f 33ff 	mov.w	r3, #4294967295
   223ee:	4c12      	ldr	r4, [pc, #72]	; (22438 <send_message+0xc4>)
   223f0:	9303      	str	r3, [sp, #12]
   223f2:	4620      	mov	r0, r4
   223f4:	a903      	add	r1, sp, #12
   223f6:	f7f5 fba5 	bl	17b44 <nrf_modem_os_timedwait>
   223fa:	782b      	ldrb	r3, [r5, #0]
   223fc:	2b01      	cmp	r3, #1
   223fe:	d0f8      	beq.n	223f2 <send_message+0x7e>
   22400:	782b      	ldrb	r3, [r5, #0]
   22402:	2b02      	cmp	r3, #2
   22404:	d00f      	beq.n	22426 <send_message+0xb2>
   22406:	782b      	ldrb	r3, [r5, #0]
   22408:	2b03      	cmp	r3, #3
   2240a:	bf14      	ite	ne
   2240c:	2000      	movne	r0, #0
   2240e:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   22412:	2300      	movs	r3, #0
   22414:	702b      	strb	r3, [r5, #0]
   22416:	e003      	b.n	22420 <send_message+0xac>
   22418:	f889 0000 	strb.w	r0, [r9]
   2241c:	f06f 000a 	mvn.w	r0, #10
   22420:	b005      	add	sp, #20
   22422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22426:	f06f 0015 	mvn.w	r0, #21
   2242a:	e7f2      	b.n	22412 <send_message+0x9e>
   2242c:	f04f 30ff 	mov.w	r0, #4294967295
   22430:	e7f6      	b.n	22420 <send_message+0xac>
   22432:	bf00      	nop
   22434:	2000efc8 	.word	0x2000efc8
   22438:	49765443 	.word	0x49765443
   2243c:	2000f38b 	.word	0x2000f38b

00022440 <rpc_gnss_event_handler>:
   22440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22444:	6804      	ldr	r4, [r0, #0]
   22446:	4607      	mov	r7, r0
   22448:	460d      	mov	r5, r1
   2244a:	2c00      	cmp	r4, #0
   2244c:	f000 8086 	beq.w	2255c <rpc_gnss_event_handler+0x11c>
   22450:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   22454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22458:	d142      	bne.n	224e0 <rpc_gnss_event_handler+0xa0>
   2245a:	4b5f      	ldr	r3, [pc, #380]	; (225d8 <rpc_gnss_event_handler+0x198>)
   2245c:	781a      	ldrb	r2, [r3, #0]
   2245e:	4698      	mov	r8, r3
   22460:	2a01      	cmp	r2, #1
   22462:	d131      	bne.n	224c8 <rpc_gnss_event_handler+0x88>
   22464:	4a5d      	ldr	r2, [pc, #372]	; (225dc <rpc_gnss_event_handler+0x19c>)
   22466:	6821      	ldr	r1, [r4, #0]
   22468:	8812      	ldrh	r2, [r2, #0]
   2246a:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   2246e:	d12b      	bne.n	224c8 <rpc_gnss_event_handler+0x88>
   22470:	6862      	ldr	r2, [r4, #4]
   22472:	bb6a      	cbnz	r2, 224d0 <rpc_gnss_event_handler+0x90>
   22474:	4b5a      	ldr	r3, [pc, #360]	; (225e0 <rpc_gnss_event_handler+0x1a0>)
   22476:	681e      	ldr	r6, [r3, #0]
   22478:	b31e      	cbz	r6, 224c2 <rpc_gnss_event_handler+0x82>
   2247a:	f242 0309 	movw	r3, #8201	; 0x2009
   2247e:	429d      	cmp	r5, r3
   22480:	d11f      	bne.n	224c2 <rpc_gnss_event_handler+0x82>
   22482:	4630      	mov	r0, r6
   22484:	8923      	ldrh	r3, [r4, #8]
   22486:	2280      	movs	r2, #128	; 0x80
   22488:	f840 3b04 	str.w	r3, [r0], #4
   2248c:	f104 010a 	add.w	r1, r4, #10
   22490:	f008 fcda 	bl	2ae48 <memcpy>
   22494:	2280      	movs	r2, #128	; 0x80
   22496:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   2249a:	f106 0084 	add.w	r0, r6, #132	; 0x84
   2249e:	f008 fcd3 	bl	2ae48 <memcpy>
   224a2:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   224a6:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   224aa:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   224ae:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   224b2:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   224b6:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   224ba:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   224be:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   224c2:	2300      	movs	r3, #0
   224c4:	f888 3000 	strb.w	r3, [r8]
   224c8:	6838      	ldr	r0, [r7, #0]
   224ca:	f007 f945 	bl	29758 <rpc_client_data_free>
   224ce:	e045      	b.n	2255c <rpc_gnss_event_handler+0x11c>
   224d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
   224d4:	428a      	cmp	r2, r1
   224d6:	bf0c      	ite	eq
   224d8:	2203      	moveq	r2, #3
   224da:	2202      	movne	r2, #2
   224dc:	701a      	strb	r2, [r3, #0]
   224de:	e7f3      	b.n	224c8 <rpc_gnss_event_handler+0x88>
   224e0:	4e40      	ldr	r6, [pc, #256]	; (225e4 <rpc_gnss_event_handler+0x1a4>)
   224e2:	6833      	ldr	r3, [r6, #0]
   224e4:	2b00      	cmp	r3, #0
   224e6:	d0ef      	beq.n	224c8 <rpc_gnss_event_handler+0x88>
   224e8:	f244 0204 	movw	r2, #16388	; 0x4004
   224ec:	4291      	cmp	r1, r2
   224ee:	d80b      	bhi.n	22508 <rpc_gnss_event_handler+0xc8>
   224f0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   224f4:	d9e8      	bls.n	224c8 <rpc_gnss_event_handler+0x88>
   224f6:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   224fa:	3a02      	subs	r2, #2
   224fc:	2a02      	cmp	r2, #2
   224fe:	d80b      	bhi.n	22518 <rpc_gnss_event_handler+0xd8>
   22500:	e8df f002 	tbb	[pc, r2]
   22504:	4f45      	.short	0x4f45
   22506:	59          	.byte	0x59
   22507:	00          	.byte	0x00
   22508:	f244 1301 	movw	r3, #16641	; 0x4101
   2250c:	4299      	cmp	r1, r3
   2250e:	d003      	beq.n	22518 <rpc_gnss_event_handler+0xd8>
   22510:	f244 2301 	movw	r3, #16897	; 0x4201
   22514:	4299      	cmp	r1, r3
   22516:	d1d7      	bne.n	224c8 <rpc_gnss_event_handler+0x88>
   22518:	4f33      	ldr	r7, [pc, #204]	; (225e8 <rpc_gnss_event_handler+0x1a8>)
   2251a:	6838      	ldr	r0, [r7, #0]
   2251c:	b108      	cbz	r0, 22522 <rpc_gnss_event_handler+0xe2>
   2251e:	f007 f91b 	bl	29758 <rpc_client_data_free>
   22522:	f244 2301 	movw	r3, #16897	; 0x4201
   22526:	429d      	cmp	r5, r3
   22528:	4b30      	ldr	r3, [pc, #192]	; (225ec <rpc_gnss_event_handler+0x1ac>)
   2252a:	d11a      	bne.n	22562 <rpc_gnss_event_handler+0x122>
   2252c:	2202      	movs	r2, #2
   2252e:	603c      	str	r4, [r7, #0]
   22530:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   22534:	701a      	strb	r2, [r3, #0]
   22536:	07e3      	lsls	r3, r4, #31
   22538:	d502      	bpl.n	22540 <rpc_gnss_event_handler+0x100>
   2253a:	2002      	movs	r0, #2
   2253c:	6833      	ldr	r3, [r6, #0]
   2253e:	4798      	blx	r3
   22540:	4d2b      	ldr	r5, [pc, #172]	; (225f0 <rpc_gnss_event_handler+0x1b0>)
   22542:	f014 0418 	ands.w	r4, r4, #24
   22546:	6833      	ldr	r3, [r6, #0]
   22548:	782a      	ldrb	r2, [r5, #0]
   2254a:	d01a      	beq.n	22582 <rpc_gnss_event_handler+0x142>
   2254c:	b91a      	cbnz	r2, 22556 <rpc_gnss_event_handler+0x116>
   2254e:	2005      	movs	r0, #5
   22550:	4798      	blx	r3
   22552:	2301      	movs	r3, #1
   22554:	702b      	strb	r3, [r5, #0]
   22556:	2001      	movs	r0, #1
   22558:	6833      	ldr	r3, [r6, #0]
   2255a:	4798      	blx	r3
   2255c:	2000      	movs	r0, #0
   2255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22562:	f244 1201 	movw	r2, #16641	; 0x4101
   22566:	4295      	cmp	r5, r2
   22568:	bf0b      	itete	eq
   2256a:	2201      	moveq	r2, #1
   2256c:	2200      	movne	r2, #0
   2256e:	603c      	streq	r4, [r7, #0]
   22570:	603c      	strne	r4, [r7, #0]
   22572:	bf0b      	itete	eq
   22574:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   22578:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   2257c:	701a      	strbeq	r2, [r3, #0]
   2257e:	701a      	strbne	r2, [r3, #0]
   22580:	e7d9      	b.n	22536 <rpc_gnss_event_handler+0xf6>
   22582:	2a00      	cmp	r2, #0
   22584:	d0e7      	beq.n	22556 <rpc_gnss_event_handler+0x116>
   22586:	2006      	movs	r0, #6
   22588:	4798      	blx	r3
   2258a:	702c      	strb	r4, [r5, #0]
   2258c:	e7e3      	b.n	22556 <rpc_gnss_event_handler+0x116>
   2258e:	4c19      	ldr	r4, [pc, #100]	; (225f4 <rpc_gnss_event_handler+0x1b4>)
   22590:	6820      	ldr	r0, [r4, #0]
   22592:	b108      	cbz	r0, 22598 <rpc_gnss_event_handler+0x158>
   22594:	f007 f8e0 	bl	29758 <rpc_client_data_free>
   22598:	683b      	ldr	r3, [r7, #0]
   2259a:	2003      	movs	r0, #3
   2259c:	6023      	str	r3, [r4, #0]
   2259e:	6833      	ldr	r3, [r6, #0]
   225a0:	e7db      	b.n	2255a <rpc_gnss_event_handler+0x11a>
   225a2:	4c15      	ldr	r4, [pc, #84]	; (225f8 <rpc_gnss_event_handler+0x1b8>)
   225a4:	6820      	ldr	r0, [r4, #0]
   225a6:	b108      	cbz	r0, 225ac <rpc_gnss_event_handler+0x16c>
   225a8:	f007 f8d6 	bl	29758 <rpc_client_data_free>
   225ac:	683b      	ldr	r3, [r7, #0]
   225ae:	2004      	movs	r0, #4
   225b0:	6023      	str	r3, [r4, #0]
   225b2:	6833      	ldr	r3, [r6, #0]
   225b4:	e7d1      	b.n	2255a <rpc_gnss_event_handler+0x11a>
   225b6:	7822      	ldrb	r2, [r4, #0]
   225b8:	2a03      	cmp	r2, #3
   225ba:	d885      	bhi.n	224c8 <rpc_gnss_event_handler+0x88>
   225bc:	e8df f002 	tbb	[pc, r2]
   225c0:	09070502 	.word	0x09070502
   225c4:	2007      	movs	r0, #7
   225c6:	4798      	blx	r3
   225c8:	e77e      	b.n	224c8 <rpc_gnss_event_handler+0x88>
   225ca:	2008      	movs	r0, #8
   225cc:	e7fb      	b.n	225c6 <rpc_gnss_event_handler+0x186>
   225ce:	2009      	movs	r0, #9
   225d0:	e7f9      	b.n	225c6 <rpc_gnss_event_handler+0x186>
   225d2:	200a      	movs	r0, #10
   225d4:	e7f7      	b.n	225c6 <rpc_gnss_event_handler+0x186>
   225d6:	bf00      	nop
   225d8:	2000f38b 	.word	0x2000f38b
   225dc:	2000efc8 	.word	0x2000efc8
   225e0:	2000ef60 	.word	0x2000ef60
   225e4:	2000ef50 	.word	0x2000ef50
   225e8:	2000ef54 	.word	0x2000ef54
   225ec:	2000f38a 	.word	0x2000f38a
   225f0:	2000f389 	.word	0x2000f389
   225f4:	2000ef5c 	.word	0x2000ef5c
   225f8:	2000ef58 	.word	0x2000ef58

000225fc <nrf_modem_gnss_read>:
   225fc:	b570      	push	{r4, r5, r6, lr}
   225fe:	4604      	mov	r4, r0
   22600:	2800      	cmp	r0, #0
   22602:	f000 817c 	beq.w	228fe <nrf_modem_gnss_read+0x302>
   22606:	2a02      	cmp	r2, #2
   22608:	f000 8159 	beq.w	228be <nrf_modem_gnss_read+0x2c2>
   2260c:	2a03      	cmp	r2, #3
   2260e:	f000 8165 	beq.w	228dc <nrf_modem_gnss_read+0x2e0>
   22612:	2a01      	cmp	r2, #1
   22614:	f040 8173 	bne.w	228fe <nrf_modem_gnss_read+0x302>
   22618:	29e7      	cmp	r1, #231	; 0xe7
   2261a:	f240 8173 	bls.w	22904 <nrf_modem_gnss_read+0x308>
   2261e:	f007 f868 	bl	296f2 <rpc_transport_rx_data_suspend>
   22622:	4bba      	ldr	r3, [pc, #744]	; (2290c <nrf_modem_gnss_read+0x310>)
   22624:	681d      	ldr	r5, [r3, #0]
   22626:	b925      	cbnz	r5, 22632 <nrf_modem_gnss_read+0x36>
   22628:	f007 f865 	bl	296f6 <rpc_transport_rx_data_resume>
   2262c:	f06f 0004 	mvn.w	r0, #4
   22630:	e082      	b.n	22738 <nrf_modem_gnss_read+0x13c>
   22632:	22e8      	movs	r2, #232	; 0xe8
   22634:	2100      	movs	r1, #0
   22636:	4620      	mov	r0, r4
   22638:	f008 fc26 	bl	2ae88 <memset>
   2263c:	4bb4      	ldr	r3, [pc, #720]	; (22910 <nrf_modem_gnss_read+0x314>)
   2263e:	781b      	ldrb	r3, [r3, #0]
   22640:	2b01      	cmp	r3, #1
   22642:	d07a      	beq.n	2273a <nrf_modem_gnss_read+0x13e>
   22644:	686a      	ldr	r2, [r5, #4]
   22646:	2b02      	cmp	r3, #2
   22648:	68ab      	ldr	r3, [r5, #8]
   2264a:	e9c4 2300 	strd	r2, r3, [r4]
   2264e:	692b      	ldr	r3, [r5, #16]
   22650:	68ea      	ldr	r2, [r5, #12]
   22652:	e9c4 2302 	strd	r2, r3, [r4, #8]
   22656:	696b      	ldr	r3, [r5, #20]
   22658:	6123      	str	r3, [r4, #16]
   2265a:	69ab      	ldr	r3, [r5, #24]
   2265c:	6163      	str	r3, [r4, #20]
   2265e:	69eb      	ldr	r3, [r5, #28]
   22660:	f040 80d4 	bne.w	2280c <nrf_modem_gnss_read+0x210>
   22664:	61a3      	str	r3, [r4, #24]
   22666:	6a2b      	ldr	r3, [r5, #32]
   22668:	260a      	movs	r6, #10
   2266a:	61e3      	str	r3, [r4, #28]
   2266c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2266e:	6223      	str	r3, [r4, #32]
   22670:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22672:	6263      	str	r3, [r4, #36]	; 0x24
   22674:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22676:	62a3      	str	r3, [r4, #40]	; 0x28
   22678:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2267a:	62e3      	str	r3, [r4, #44]	; 0x2c
   2267c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2267e:	6323      	str	r3, [r4, #48]	; 0x30
   22680:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   22684:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   22688:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   2268c:	6423      	str	r3, [r4, #64]	; 0x40
   2268e:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   22692:	6463      	str	r3, [r4, #68]	; 0x44
   22694:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   22698:	64a3      	str	r3, [r4, #72]	; 0x48
   2269a:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   2269e:	64e3      	str	r3, [r4, #76]	; 0x4c
   226a0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   226a4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   226a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   226ac:	86a3      	strh	r3, [r4, #52]	; 0x34
   226ae:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   226b2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   226b6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   226ba:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   226be:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   226c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   226c6:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   226ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   226ce:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   226d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   226d6:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   226da:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   226de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   226e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   226e4:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   226e8:	462a      	mov	r2, r5
   226ea:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   226ee:	2300      	movs	r3, #0
   226f0:	fb06 5103 	mla	r1, r6, r3, r5
   226f4:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   226f8:	3301      	adds	r3, #1
   226fa:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   226fe:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   22702:	2b0c      	cmp	r3, #12
   22704:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   22708:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   2270c:	f104 040c 	add.w	r4, r4, #12
   22710:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   22714:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   22718:	f102 020a 	add.w	r2, r2, #10
   2271c:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   22720:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   22724:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   22728:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   2272c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   22730:	d1de      	bne.n	226f0 <nrf_modem_gnss_read+0xf4>
   22732:	f006 ffe0 	bl	296f6 <rpc_transport_rx_data_resume>
   22736:	2000      	movs	r0, #0
   22738:	bd70      	pop	{r4, r5, r6, pc}
   2273a:	686a      	ldr	r2, [r5, #4]
   2273c:	68ab      	ldr	r3, [r5, #8]
   2273e:	260a      	movs	r6, #10
   22740:	e9c4 2300 	strd	r2, r3, [r4]
   22744:	68ea      	ldr	r2, [r5, #12]
   22746:	692b      	ldr	r3, [r5, #16]
   22748:	e9c4 2302 	strd	r2, r3, [r4, #8]
   2274c:	696b      	ldr	r3, [r5, #20]
   2274e:	6123      	str	r3, [r4, #16]
   22750:	69ab      	ldr	r3, [r5, #24]
   22752:	6163      	str	r3, [r4, #20]
   22754:	69eb      	ldr	r3, [r5, #28]
   22756:	61e3      	str	r3, [r4, #28]
   22758:	6a2b      	ldr	r3, [r5, #32]
   2275a:	6223      	str	r3, [r4, #32]
   2275c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2275e:	62e3      	str	r3, [r4, #44]	; 0x2c
   22760:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   22764:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   22768:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   2276c:	6423      	str	r3, [r4, #64]	; 0x40
   2276e:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   22772:	6463      	str	r3, [r4, #68]	; 0x44
   22774:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   22778:	64a3      	str	r3, [r4, #72]	; 0x48
   2277a:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   2277e:	64e3      	str	r3, [r4, #76]	; 0x4c
   22780:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   22784:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   22788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2278c:	86a3      	strh	r3, [r4, #52]	; 0x34
   2278e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   22792:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   22796:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   2279a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   2279e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   227a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   227a6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   227aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   227ae:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   227b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   227b6:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   227ba:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   227be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   227c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   227c4:	462a      	mov	r2, r5
   227c6:	2300      	movs	r3, #0
   227c8:	fb06 5103 	mla	r1, r6, r3, r5
   227cc:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   227d0:	3301      	adds	r3, #1
   227d2:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   227d6:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   227da:	2b0c      	cmp	r3, #12
   227dc:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   227e0:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   227e4:	f104 040c 	add.w	r4, r4, #12
   227e8:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   227ec:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   227f0:	f102 020a 	add.w	r2, r2, #10
   227f4:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   227f8:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   227fc:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   22800:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   22804:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   22808:	d1de      	bne.n	227c8 <nrf_modem_gnss_read+0x1cc>
   2280a:	e792      	b.n	22732 <nrf_modem_gnss_read+0x136>
   2280c:	61e3      	str	r3, [r4, #28]
   2280e:	6a2b      	ldr	r3, [r5, #32]
   22810:	260a      	movs	r6, #10
   22812:	62e3      	str	r3, [r4, #44]	; 0x2c
   22814:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   22818:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   2281c:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   22820:	6423      	str	r3, [r4, #64]	; 0x40
   22822:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   22826:	6463      	str	r3, [r4, #68]	; 0x44
   22828:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   2282c:	64a3      	str	r3, [r4, #72]	; 0x48
   2282e:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   22832:	64e3      	str	r3, [r4, #76]	; 0x4c
   22834:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   22838:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   2283c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22840:	86a3      	strh	r3, [r4, #52]	; 0x34
   22842:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   22846:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   2284a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   2284e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   22852:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   22856:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   2285a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   2285e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   22862:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   22866:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   2286a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   2286e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   22872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22876:	87a3      	strh	r3, [r4, #60]	; 0x3c
   22878:	462a      	mov	r2, r5
   2287a:	2300      	movs	r3, #0
   2287c:	fb06 5103 	mla	r1, r6, r3, r5
   22880:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   22882:	3301      	adds	r3, #1
   22884:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   22888:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   2288c:	2b0c      	cmp	r3, #12
   2288e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   22892:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   22896:	f104 040c 	add.w	r4, r4, #12
   2289a:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   2289e:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   228a2:	f102 020a 	add.w	r2, r2, #10
   228a6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   228aa:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   228ae:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   228b2:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   228b6:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   228ba:	d1df      	bne.n	2287c <nrf_modem_gnss_read+0x280>
   228bc:	e739      	b.n	22732 <nrf_modem_gnss_read+0x136>
   228be:	2952      	cmp	r1, #82	; 0x52
   228c0:	d920      	bls.n	22904 <nrf_modem_gnss_read+0x308>
   228c2:	4d14      	ldr	r5, [pc, #80]	; (22914 <nrf_modem_gnss_read+0x318>)
   228c4:	682b      	ldr	r3, [r5, #0]
   228c6:	2b00      	cmp	r3, #0
   228c8:	f43f aeb0 	beq.w	2262c <nrf_modem_gnss_read+0x30>
   228cc:	f006 ff11 	bl	296f2 <rpc_transport_rx_data_suspend>
   228d0:	2253      	movs	r2, #83	; 0x53
   228d2:	4620      	mov	r0, r4
   228d4:	6829      	ldr	r1, [r5, #0]
   228d6:	f008 fab7 	bl	2ae48 <memcpy>
   228da:	e72a      	b.n	22732 <nrf_modem_gnss_read+0x136>
   228dc:	290b      	cmp	r1, #11
   228de:	d911      	bls.n	22904 <nrf_modem_gnss_read+0x308>
   228e0:	4d0d      	ldr	r5, [pc, #52]	; (22918 <nrf_modem_gnss_read+0x31c>)
   228e2:	682b      	ldr	r3, [r5, #0]
   228e4:	2b00      	cmp	r3, #0
   228e6:	f43f aea1 	beq.w	2262c <nrf_modem_gnss_read+0x30>
   228ea:	f006 ff02 	bl	296f2 <rpc_transport_rx_data_suspend>
   228ee:	682b      	ldr	r3, [r5, #0]
   228f0:	681a      	ldr	r2, [r3, #0]
   228f2:	6022      	str	r2, [r4, #0]
   228f4:	685a      	ldr	r2, [r3, #4]
   228f6:	6062      	str	r2, [r4, #4]
   228f8:	891b      	ldrh	r3, [r3, #8]
   228fa:	60a3      	str	r3, [r4, #8]
   228fc:	e719      	b.n	22732 <nrf_modem_gnss_read+0x136>
   228fe:	f06f 0015 	mvn.w	r0, #21
   22902:	e719      	b.n	22738 <nrf_modem_gnss_read+0x13c>
   22904:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22908:	e716      	b.n	22738 <nrf_modem_gnss_read+0x13c>
   2290a:	bf00      	nop
   2290c:	2000ef54 	.word	0x2000ef54
   22910:	2000f38a 	.word	0x2000f38a
   22914:	2000ef5c 	.word	0x2000ef5c
   22918:	2000ef58 	.word	0x2000ef58

0002291c <nrf_modem_gnss_start>:
   2291c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22920:	4c26      	ldr	r4, [pc, #152]	; (229bc <nrf_modem_gnss_start+0xa0>)
   22922:	b087      	sub	sp, #28
   22924:	7823      	ldrb	r3, [r4, #0]
   22926:	2b00      	cmp	r3, #0
   22928:	d145      	bne.n	229b6 <nrf_modem_gnss_start+0x9a>
   2292a:	4b25      	ldr	r3, [pc, #148]	; (229c0 <nrf_modem_gnss_start+0xa4>)
   2292c:	781a      	ldrb	r2, [r3, #0]
   2292e:	4698      	mov	r8, r3
   22930:	bb62      	cbnz	r2, 2298c <nrf_modem_gnss_start+0x70>
   22932:	2602      	movs	r6, #2
   22934:	f04f 0905 	mov.w	r9, #5
   22938:	4637      	mov	r7, r6
   2293a:	2214      	movs	r2, #20
   2293c:	2100      	movs	r1, #0
   2293e:	a801      	add	r0, sp, #4
   22940:	f008 faa2 	bl	2ae88 <memset>
   22944:	2214      	movs	r2, #20
   22946:	f241 0004 	movw	r0, #4100	; 0x1004
   2294a:	a901      	add	r1, sp, #4
   2294c:	f88d 9008 	strb.w	r9, [sp, #8]
   22950:	f8cd 7009 	str.w	r7, [sp, #9]
   22954:	f7ff fd0e 	bl	22374 <send_message>
   22958:	4605      	mov	r5, r0
   2295a:	b110      	cbz	r0, 22962 <nrf_modem_gnss_start+0x46>
   2295c:	2701      	movs	r7, #1
   2295e:	42be      	cmp	r6, r7
   22960:	d127      	bne.n	229b2 <nrf_modem_gnss_start+0x96>
   22962:	2214      	movs	r2, #20
   22964:	2100      	movs	r1, #0
   22966:	a801      	add	r0, sp, #4
   22968:	f008 fa8e 	bl	2ae88 <memset>
   2296c:	2601      	movs	r6, #1
   2296e:	2380      	movs	r3, #128	; 0x80
   22970:	2214      	movs	r2, #20
   22972:	f241 2003 	movw	r0, #4611	; 0x1203
   22976:	a901      	add	r1, sp, #4
   22978:	9302      	str	r3, [sp, #8]
   2297a:	f88d 6016 	strb.w	r6, [sp, #22]
   2297e:	f7ff fcf9 	bl	22374 <send_message>
   22982:	ea55 0300 	orrs.w	r3, r5, r0
   22986:	bf08      	it	eq
   22988:	f888 6000 	strbeq.w	r6, [r8]
   2298c:	2501      	movs	r5, #1
   2298e:	2214      	movs	r2, #20
   22990:	2100      	movs	r1, #0
   22992:	a801      	add	r0, sp, #4
   22994:	f008 fa78 	bl	2ae88 <memset>
   22998:	2214      	movs	r2, #20
   2299a:	f241 0004 	movw	r0, #4100	; 0x1004
   2299e:	a901      	add	r1, sp, #4
   229a0:	f88d 5008 	strb.w	r5, [sp, #8]
   229a4:	f7ff fce6 	bl	22374 <send_message>
   229a8:	b900      	cbnz	r0, 229ac <nrf_modem_gnss_start+0x90>
   229aa:	7025      	strb	r5, [r4, #0]
   229ac:	b007      	add	sp, #28
   229ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   229b2:	463e      	mov	r6, r7
   229b4:	e7c1      	b.n	2293a <nrf_modem_gnss_start+0x1e>
   229b6:	f04f 30ff 	mov.w	r0, #4294967295
   229ba:	e7f7      	b.n	229ac <nrf_modem_gnss_start+0x90>
   229bc:	2000f38d 	.word	0x2000f38d
   229c0:	2000f38c 	.word	0x2000f38c

000229c4 <nrf_modem_gnss_use_case_set>:
   229c4:	b510      	push	{r4, lr}
   229c6:	4b0d      	ldr	r3, [pc, #52]	; (229fc <nrf_modem_gnss_use_case_set+0x38>)
   229c8:	4604      	mov	r4, r0
   229ca:	781b      	ldrb	r3, [r3, #0]
   229cc:	b086      	sub	sp, #24
   229ce:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   229d2:	b97b      	cbnz	r3, 229f4 <nrf_modem_gnss_use_case_set+0x30>
   229d4:	2214      	movs	r2, #20
   229d6:	a801      	add	r0, sp, #4
   229d8:	f008 fa56 	bl	2ae88 <memset>
   229dc:	2302      	movs	r3, #2
   229de:	2214      	movs	r2, #20
   229e0:	f241 1003 	movw	r0, #4355	; 0x1103
   229e4:	a901      	add	r1, sp, #4
   229e6:	9302      	str	r3, [sp, #8]
   229e8:	f88d 400d 	strb.w	r4, [sp, #13]
   229ec:	f7ff fcc2 	bl	22374 <send_message>
   229f0:	b006      	add	sp, #24
   229f2:	bd10      	pop	{r4, pc}
   229f4:	f04f 30ff 	mov.w	r0, #4294967295
   229f8:	e7fa      	b.n	229f0 <nrf_modem_gnss_use_case_set+0x2c>
   229fa:	bf00      	nop
   229fc:	2000f38d 	.word	0x2000f38d

00022a00 <nrf_modem_gnss_fix_interval_set>:
   22a00:	b510      	push	{r4, lr}
   22a02:	4b0d      	ldr	r3, [pc, #52]	; (22a38 <nrf_modem_gnss_fix_interval_set+0x38>)
   22a04:	4604      	mov	r4, r0
   22a06:	781b      	ldrb	r3, [r3, #0]
   22a08:	b086      	sub	sp, #24
   22a0a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   22a0e:	b97b      	cbnz	r3, 22a30 <nrf_modem_gnss_fix_interval_set+0x30>
   22a10:	2214      	movs	r2, #20
   22a12:	a801      	add	r0, sp, #4
   22a14:	f008 fa38 	bl	2ae88 <memset>
   22a18:	2308      	movs	r3, #8
   22a1a:	2214      	movs	r2, #20
   22a1c:	f241 1003 	movw	r0, #4355	; 0x1103
   22a20:	a901      	add	r1, sp, #4
   22a22:	9302      	str	r3, [sp, #8]
   22a24:	f8ad 400f 	strh.w	r4, [sp, #15]
   22a28:	f7ff fca4 	bl	22374 <send_message>
   22a2c:	b006      	add	sp, #24
   22a2e:	bd10      	pop	{r4, pc}
   22a30:	f04f 30ff 	mov.w	r0, #4294967295
   22a34:	e7fa      	b.n	22a2c <nrf_modem_gnss_fix_interval_set+0x2c>
   22a36:	bf00      	nop
   22a38:	2000f38d 	.word	0x2000f38d

00022a3c <nrf_modem_gnss_fix_retry_set>:
   22a3c:	b510      	push	{r4, lr}
   22a3e:	4b0d      	ldr	r3, [pc, #52]	; (22a74 <nrf_modem_gnss_fix_retry_set+0x38>)
   22a40:	4604      	mov	r4, r0
   22a42:	781b      	ldrb	r3, [r3, #0]
   22a44:	b086      	sub	sp, #24
   22a46:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   22a4a:	b97b      	cbnz	r3, 22a6c <nrf_modem_gnss_fix_retry_set+0x30>
   22a4c:	2214      	movs	r2, #20
   22a4e:	a801      	add	r0, sp, #4
   22a50:	f008 fa1a 	bl	2ae88 <memset>
   22a54:	2310      	movs	r3, #16
   22a56:	2214      	movs	r2, #20
   22a58:	f241 1003 	movw	r0, #4355	; 0x1103
   22a5c:	a901      	add	r1, sp, #4
   22a5e:	9302      	str	r3, [sp, #8]
   22a60:	f8ad 4011 	strh.w	r4, [sp, #17]
   22a64:	f7ff fc86 	bl	22374 <send_message>
   22a68:	b006      	add	sp, #24
   22a6a:	bd10      	pop	{r4, pc}
   22a6c:	f04f 30ff 	mov.w	r0, #4294967295
   22a70:	e7fa      	b.n	22a68 <nrf_modem_gnss_fix_retry_set+0x2c>
   22a72:	bf00      	nop
   22a74:	2000f38d 	.word	0x2000f38d

00022a78 <nrf_modem_gnss_nmea_mask_set>:
   22a78:	b510      	push	{r4, lr}
   22a7a:	4b0d      	ldr	r3, [pc, #52]	; (22ab0 <nrf_modem_gnss_nmea_mask_set+0x38>)
   22a7c:	4604      	mov	r4, r0
   22a7e:	781b      	ldrb	r3, [r3, #0]
   22a80:	b086      	sub	sp, #24
   22a82:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   22a86:	b97b      	cbnz	r3, 22aa8 <nrf_modem_gnss_nmea_mask_set+0x30>
   22a88:	2214      	movs	r2, #20
   22a8a:	a801      	add	r0, sp, #4
   22a8c:	f008 f9fc 	bl	2ae88 <memset>
   22a90:	2320      	movs	r3, #32
   22a92:	2214      	movs	r2, #20
   22a94:	f241 1003 	movw	r0, #4355	; 0x1103
   22a98:	a901      	add	r1, sp, #4
   22a9a:	9302      	str	r3, [sp, #8]
   22a9c:	f8ad 4013 	strh.w	r4, [sp, #19]
   22aa0:	f7ff fc68 	bl	22374 <send_message>
   22aa4:	b006      	add	sp, #24
   22aa6:	bd10      	pop	{r4, pc}
   22aa8:	f04f 30ff 	mov.w	r0, #4294967295
   22aac:	e7fa      	b.n	22aa4 <nrf_modem_gnss_nmea_mask_set+0x2c>
   22aae:	bf00      	nop
   22ab0:	2000f38d 	.word	0x2000f38d

00022ab4 <nrf_modem_gnss_event_handler_set>:
   22ab4:	4b05      	ldr	r3, [pc, #20]	; (22acc <nrf_modem_gnss_event_handler_set+0x18>)
   22ab6:	781a      	ldrb	r2, [r3, #0]
   22ab8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   22abc:	b91a      	cbnz	r2, 22ac6 <nrf_modem_gnss_event_handler_set+0x12>
   22abe:	4a04      	ldr	r2, [pc, #16]	; (22ad0 <nrf_modem_gnss_event_handler_set+0x1c>)
   22ac0:	6010      	str	r0, [r2, #0]
   22ac2:	4618      	mov	r0, r3
   22ac4:	4770      	bx	lr
   22ac6:	f04f 30ff 	mov.w	r0, #4294967295
   22aca:	4770      	bx	lr
   22acc:	2000f38d 	.word	0x2000f38d
   22ad0:	2000ef50 	.word	0x2000ef50

00022ad4 <full_dfu_ipc_irq_handler>:
   22ad4:	2301      	movs	r3, #1
   22ad6:	4a03      	ldr	r2, [pc, #12]	; (22ae4 <full_dfu_ipc_irq_handler+0x10>)
   22ad8:	6013      	str	r3, [r2, #0]
   22ada:	07c2      	lsls	r2, r0, #31
   22adc:	bf44      	itt	mi
   22ade:	4a02      	ldrmi	r2, [pc, #8]	; (22ae8 <full_dfu_ipc_irq_handler+0x14>)
   22ae0:	7013      	strbmi	r3, [r2, #0]
   22ae2:	4770      	bx	lr
   22ae4:	2000ef64 	.word	0x2000ef64
   22ae8:	2000f38e 	.word	0x2000f38e

00022aec <modem_ipc_wait_for_event>:
   22aec:	b538      	push	{r3, r4, r5, lr}
   22aee:	2300      	movs	r3, #0
   22af0:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   22af4:	4c0b      	ldr	r4, [pc, #44]	; (22b24 <modem_ipc_wait_for_event+0x38>)
   22af6:	6023      	str	r3, [r4, #0]
   22af8:	6823      	ldr	r3, [r4, #0]
   22afa:	b92b      	cbnz	r3, 22b08 <modem_ipc_wait_for_event+0x1c>
   22afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   22b00:	f005 fea9 	bl	28856 <nrf_modem_os_busywait>
   22b04:	3d01      	subs	r5, #1
   22b06:	d1f7      	bne.n	22af8 <modem_ipc_wait_for_event+0xc>
   22b08:	6823      	ldr	r3, [r4, #0]
   22b0a:	b913      	cbnz	r3, 22b12 <modem_ipc_wait_for_event+0x26>
   22b0c:	f06f 0073 	mvn.w	r0, #115	; 0x73
   22b10:	e006      	b.n	22b20 <modem_ipc_wait_for_event+0x34>
   22b12:	4b05      	ldr	r3, [pc, #20]	; (22b28 <modem_ipc_wait_for_event+0x3c>)
   22b14:	781b      	ldrb	r3, [r3, #0]
   22b16:	2b01      	cmp	r3, #1
   22b18:	bf14      	ite	ne
   22b1a:	2000      	movne	r0, #0
   22b1c:	f06f 0004 	mvneq.w	r0, #4
   22b20:	bd38      	pop	{r3, r4, r5, pc}
   22b22:	bf00      	nop
   22b24:	2000ef64 	.word	0x2000ef64
   22b28:	2000f38e 	.word	0x2000f38e

00022b2c <nrf_modem_full_dfu_setup>:
   22b2c:	2200      	movs	r2, #0
   22b2e:	2300      	movs	r3, #0
   22b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b32:	4d2b      	ldr	r5, [pc, #172]	; (22be0 <nrf_modem_full_dfu_setup+0xb4>)
   22b34:	4e2b      	ldr	r6, [pc, #172]	; (22be4 <nrf_modem_full_dfu_setup+0xb8>)
   22b36:	e9c5 2302 	strd	r2, r3, [r5, #8]
   22b3a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   22b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   22b42:	4b29      	ldr	r3, [pc, #164]	; (22be8 <nrf_modem_full_dfu_setup+0xbc>)
   22b44:	2400      	movs	r4, #0
   22b46:	601a      	str	r2, [r3, #0]
   22b48:	f100 031c 	add.w	r3, r0, #28
   22b4c:	6033      	str	r3, [r6, #0]
   22b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   22b52:	6043      	str	r3, [r0, #4]
   22b54:	231c      	movs	r3, #28
   22b56:	7203      	strb	r3, [r0, #8]
   22b58:	2320      	movs	r3, #32
   22b5a:	2701      	movs	r7, #1
   22b5c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   22b60:	7243      	strb	r3, [r0, #9]
   22b62:	4b22      	ldr	r3, [pc, #136]	; (22bec <nrf_modem_full_dfu_setup+0xc0>)
   22b64:	7004      	strb	r4, [r0, #0]
   22b66:	7044      	strb	r4, [r0, #1]
   22b68:	70c2      	strb	r2, [r0, #3]
   22b6a:	7284      	strb	r4, [r0, #10]
   22b6c:	72c4      	strb	r4, [r0, #11]
   22b6e:	7087      	strb	r7, [r0, #2]
   22b70:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   22b74:	702c      	strb	r4, [r5, #0]
   22b76:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   22b7a:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   22b7e:	4b1c      	ldr	r3, [pc, #112]	; (22bf0 <nrf_modem_full_dfu_setup+0xc4>)
   22b80:	b093      	sub	sp, #76	; 0x4c
   22b82:	4622      	mov	r2, r4
   22b84:	4620      	mov	r0, r4
   22b86:	491b      	ldr	r1, [pc, #108]	; (22bf4 <nrf_modem_full_dfu_setup+0xc8>)
   22b88:	701c      	strb	r4, [r3, #0]
   22b8a:	f7fc fd8b 	bl	1f6a4 <nrfx_ipc_init>
   22b8e:	4621      	mov	r1, r4
   22b90:	2240      	movs	r2, #64	; 0x40
   22b92:	a801      	add	r0, sp, #4
   22b94:	f008 f978 	bl	2ae88 <memset>
   22b98:	2302      	movs	r3, #2
   22b9a:	9302      	str	r3, [sp, #8]
   22b9c:	2304      	movs	r3, #4
   22b9e:	930b      	str	r3, [sp, #44]	; 0x2c
   22ba0:	2305      	movs	r3, #5
   22ba2:	a801      	add	r0, sp, #4
   22ba4:	9311      	str	r3, [sp, #68]	; 0x44
   22ba6:	9709      	str	r7, [sp, #36]	; 0x24
   22ba8:	f7fc fd94 	bl	1f6d4 <nrfx_ipc_config_load>
   22bac:	4b12      	ldr	r3, [pc, #72]	; (22bf8 <nrf_modem_full_dfu_setup+0xcc>)
   22bae:	9400      	str	r4, [sp, #0]
   22bb0:	6836      	ldr	r6, [r6, #0]
   22bb2:	601c      	str	r4, [r3, #0]
   22bb4:	681b      	ldr	r3, [r3, #0]
   22bb6:	9300      	str	r3, [sp, #0]
   22bb8:	9b00      	ldr	r3, [sp, #0]
   22bba:	f7ff ff97 	bl	22aec <modem_ipc_wait_for_event>
   22bbe:	4604      	mov	r4, r0
   22bc0:	b130      	cbz	r0, 22bd0 <nrf_modem_full_dfu_setup+0xa4>
   22bc2:	2303      	movs	r3, #3
   22bc4:	702b      	strb	r3, [r5, #0]
   22bc6:	f7fc fda5 	bl	1f714 <nrfx_ipc_uninit>
   22bca:	4620      	mov	r0, r4
   22bcc:	b013      	add	sp, #76	; 0x4c
   22bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bd0:	6832      	ldr	r2, [r6, #0]
   22bd2:	4b0a      	ldr	r3, [pc, #40]	; (22bfc <nrf_modem_full_dfu_setup+0xd0>)
   22bd4:	429a      	cmp	r2, r3
   22bd6:	d0f8      	beq.n	22bca <nrf_modem_full_dfu_setup+0x9e>
   22bd8:	f06f 0404 	mvn.w	r4, #4
   22bdc:	e7f3      	b.n	22bc6 <nrf_modem_full_dfu_setup+0x9a>
   22bde:	bf00      	nop
   22be0:	2000dab8 	.word	0x2000dab8
   22be4:	2000ef68 	.word	0x2000ef68
   22be8:	2000ef6c 	.word	0x2000ef6c
   22bec:	4002a000 	.word	0x4002a000
   22bf0:	2000f38e 	.word	0x2000f38e
   22bf4:	00022ad5 	.word	0x00022ad5
   22bf8:	40005610 	.word	0x40005610
   22bfc:	a5000001 	.word	0xa5000001

00022c00 <packet_handler_create>:
   22c00:	2801      	cmp	r0, #1
   22c02:	b570      	push	{r4, r5, r6, lr}
   22c04:	4604      	mov	r4, r0
   22c06:	460e      	mov	r6, r1
   22c08:	4615      	mov	r5, r2
   22c0a:	d00f      	beq.n	22c2c <packet_handler_create+0x2c>
   22c0c:	1e84      	subs	r4, r0, #2
   22c0e:	2c01      	cmp	r4, #1
   22c10:	d810      	bhi.n	22c34 <packet_handler_create+0x34>
   22c12:	2010      	movs	r0, #16
   22c14:	f7f5 f88a 	bl	17d2c <nrf_modem_os_alloc>
   22c18:	2400      	movs	r4, #0
   22c1a:	b130      	cbz	r0, 22c2a <packet_handler_create+0x2a>
   22c1c:	2218      	movs	r2, #24
   22c1e:	4b08      	ldr	r3, [pc, #32]	; (22c40 <packet_handler_create+0x40>)
   22c20:	6085      	str	r5, [r0, #8]
   22c22:	fb02 3404 	mla	r4, r2, r4, r3
   22c26:	e9c0 4600 	strd	r4, r6, [r0]
   22c2a:	bd70      	pop	{r4, r5, r6, pc}
   22c2c:	2014      	movs	r0, #20
   22c2e:	f7f5 f87d 	bl	17d2c <nrf_modem_os_alloc>
   22c32:	e7f2      	b.n	22c1a <packet_handler_create+0x1a>
   22c34:	200c      	movs	r0, #12
   22c36:	f7f5 f879 	bl	17d2c <nrf_modem_os_alloc>
   22c3a:	2402      	movs	r4, #2
   22c3c:	e7ed      	b.n	22c1a <packet_handler_create+0x1a>
   22c3e:	bf00      	nop
   22c40:	0002caf4 	.word	0x0002caf4

00022c44 <modem_off>:
   22c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22c46:	2501      	movs	r5, #1
   22c48:	4c07      	ldr	r4, [pc, #28]	; (22c68 <modem_off+0x24>)
   22c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   22c4e:	6065      	str	r5, [r4, #4]
   22c50:	f005 fe01 	bl	28856 <nrf_modem_os_busywait>
   22c54:	2300      	movs	r3, #0
   22c56:	6063      	str	r3, [r4, #4]
   22c58:	9301      	str	r3, [sp, #4]
   22c5a:	6025      	str	r5, [r4, #0]
   22c5c:	6823      	ldr	r3, [r4, #0]
   22c5e:	9301      	str	r3, [sp, #4]
   22c60:	9b01      	ldr	r3, [sp, #4]
   22c62:	b003      	add	sp, #12
   22c64:	bd30      	pop	{r4, r5, pc}
   22c66:	bf00      	nop
   22c68:	40005610 	.word	0x40005610

00022c6c <nrf_modem_init>:
   22c6c:	b570      	push	{r4, r5, r6, lr}
   22c6e:	460d      	mov	r5, r1
   22c70:	b300      	cbz	r0, 22cb4 <nrf_modem_init+0x48>
   22c72:	4e15      	ldr	r6, [pc, #84]	; (22cc8 <nrf_modem_init+0x5c>)
   22c74:	7832      	ldrb	r2, [r6, #0]
   22c76:	bb02      	cbnz	r2, 22cba <nrf_modem_init+0x4e>
   22c78:	2901      	cmp	r1, #1
   22c7a:	d113      	bne.n	22ca4 <nrf_modem_init+0x38>
   22c7c:	68c1      	ldr	r1, [r0, #12]
   22c7e:	6842      	ldr	r2, [r0, #4]
   22c80:	440a      	add	r2, r1
   22c82:	6941      	ldr	r1, [r0, #20]
   22c84:	440a      	add	r2, r1
   22c86:	69c1      	ldr	r1, [r0, #28]
   22c88:	440a      	add	r2, r1
   22c8a:	f242 011b 	movw	r1, #8219	; 0x201b
   22c8e:	428a      	cmp	r2, r1
   22c90:	d916      	bls.n	22cc0 <nrf_modem_init+0x54>
   22c92:	6800      	ldr	r0, [r0, #0]
   22c94:	f7ff ff4a 	bl	22b2c <nrf_modem_full_dfu_setup>
   22c98:	4604      	mov	r4, r0
   22c9a:	b130      	cbz	r0, 22caa <nrf_modem_init+0x3e>
   22c9c:	f7ff ffd2 	bl	22c44 <modem_off>
   22ca0:	4620      	mov	r0, r4
   22ca2:	bd70      	pop	{r4, r5, r6, pc}
   22ca4:	f007 fa6d 	bl	2a182 <nrf_modem_platform_init>
   22ca8:	e7f6      	b.n	22c98 <nrf_modem_init+0x2c>
   22caa:	4b08      	ldr	r3, [pc, #32]	; (22ccc <nrf_modem_init+0x60>)
   22cac:	701d      	strb	r5, [r3, #0]
   22cae:	2301      	movs	r3, #1
   22cb0:	7033      	strb	r3, [r6, #0]
   22cb2:	e7f5      	b.n	22ca0 <nrf_modem_init+0x34>
   22cb4:	f06f 040d 	mvn.w	r4, #13
   22cb8:	e7f2      	b.n	22ca0 <nrf_modem_init+0x34>
   22cba:	f04f 34ff 	mov.w	r4, #4294967295
   22cbe:	e7ef      	b.n	22ca0 <nrf_modem_init+0x34>
   22cc0:	f06f 040b 	mvn.w	r4, #11
   22cc4:	e7ec      	b.n	22ca0 <nrf_modem_init+0x34>
   22cc6:	bf00      	nop
   22cc8:	2000f38f 	.word	0x2000f38f
   22ccc:	2000f390 	.word	0x2000f390

00022cd0 <nrf_modem_platform_af_method_table_get>:
   22cd0:	2805      	cmp	r0, #5
   22cd2:	b508      	push	{r3, lr}
   22cd4:	d016      	beq.n	22d04 <nrf_modem_platform_af_method_table_get+0x34>
   22cd6:	f020 0008 	bic.w	r0, r0, #8
   22cda:	2802      	cmp	r0, #2
   22cdc:	d117      	bne.n	22d0e <nrf_modem_platform_af_method_table_get+0x3e>
   22cde:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   22ce2:	d207      	bcs.n	22cf4 <nrf_modem_platform_af_method_table_get+0x24>
   22ce4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   22ce8:	d213      	bcs.n	22d12 <nrf_modem_platform_af_method_table_get+0x42>
   22cea:	3a01      	subs	r2, #1
   22cec:	2a01      	cmp	r2, #1
   22cee:	d804      	bhi.n	22cfa <nrf_modem_platform_af_method_table_get+0x2a>
   22cf0:	4809      	ldr	r0, [pc, #36]	; (22d18 <nrf_modem_platform_af_method_table_get+0x48>)
   22cf2:	bd08      	pop	{r3, pc}
   22cf4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   22cf8:	d00b      	beq.n	22d12 <nrf_modem_platform_af_method_table_get+0x42>
   22cfa:	207b      	movs	r0, #123	; 0x7b
   22cfc:	f005 fdad 	bl	2885a <nrf_modem_os_errno_set>
   22d00:	2000      	movs	r0, #0
   22d02:	e7f6      	b.n	22cf2 <nrf_modem_platform_af_method_table_get+0x22>
   22d04:	2903      	cmp	r1, #3
   22d06:	4805      	ldr	r0, [pc, #20]	; (22d1c <nrf_modem_platform_af_method_table_get+0x4c>)
   22d08:	bf18      	it	ne
   22d0a:	2000      	movne	r0, #0
   22d0c:	e7f1      	b.n	22cf2 <nrf_modem_platform_af_method_table_get+0x22>
   22d0e:	2016      	movs	r0, #22
   22d10:	e7f4      	b.n	22cfc <nrf_modem_platform_af_method_table_get+0x2c>
   22d12:	4803      	ldr	r0, [pc, #12]	; (22d20 <nrf_modem_platform_af_method_table_get+0x50>)
   22d14:	e7ed      	b.n	22cf2 <nrf_modem_platform_af_method_table_get+0x22>
   22d16:	bf00      	nop
   22d18:	0002cb3c 	.word	0x0002cb3c
   22d1c:	0002cb8c 	.word	0x0002cb8c
   22d20:	0002cb64 	.word	0x0002cb64

00022d24 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d24:	4b0e      	ldr	r3, [pc, #56]	; (22d60 <z_sys_init_run_level+0x3c>)
{
   22d26:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   22d2c:	3001      	adds	r0, #1
   22d2e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22d32:	42a6      	cmp	r6, r4
   22d34:	d800      	bhi.n	22d38 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   22d36:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   22d38:	e9d4 3500 	ldrd	r3, r5, [r4]
   22d3c:	4628      	mov	r0, r5
   22d3e:	4798      	blx	r3
		if (dev != NULL) {
   22d40:	b165      	cbz	r5, 22d5c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   22d42:	68eb      	ldr	r3, [r5, #12]
   22d44:	b130      	cbz	r0, 22d54 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   22d46:	2800      	cmp	r0, #0
   22d48:	bfb8      	it	lt
   22d4a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   22d4c:	28ff      	cmp	r0, #255	; 0xff
   22d4e:	bfa8      	it	ge
   22d50:	20ff      	movge	r0, #255	; 0xff
   22d52:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   22d54:	785a      	ldrb	r2, [r3, #1]
   22d56:	f042 0201 	orr.w	r2, r2, #1
   22d5a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d5c:	3408      	adds	r4, #8
   22d5e:	e7e8      	b.n	22d32 <z_sys_init_run_level+0xe>
   22d60:	0002cbb4 	.word	0x0002cbb4

00022d64 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   22d64:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   22d66:	4605      	mov	r5, r0
   22d68:	b910      	cbnz	r0, 22d70 <z_impl_device_get_binding+0xc>
		return NULL;
   22d6a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   22d6c:	4620      	mov	r0, r4
   22d6e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   22d70:	7803      	ldrb	r3, [r0, #0]
   22d72:	2b00      	cmp	r3, #0
   22d74:	d0f9      	beq.n	22d6a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   22d76:	4a0f      	ldr	r2, [pc, #60]	; (22db4 <z_impl_device_get_binding+0x50>)
   22d78:	4c0f      	ldr	r4, [pc, #60]	; (22db8 <z_impl_device_get_binding+0x54>)
   22d7a:	4616      	mov	r6, r2
   22d7c:	4294      	cmp	r4, r2
   22d7e:	d108      	bne.n	22d92 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   22d80:	4c0d      	ldr	r4, [pc, #52]	; (22db8 <z_impl_device_get_binding+0x54>)
   22d82:	42b4      	cmp	r4, r6
   22d84:	d0f1      	beq.n	22d6a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22d86:	4620      	mov	r0, r4
   22d88:	f007 fb91 	bl	2a4ae <z_device_ready>
   22d8c:	b950      	cbnz	r0, 22da4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   22d8e:	3418      	adds	r4, #24
   22d90:	e7f7      	b.n	22d82 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   22d92:	4620      	mov	r0, r4
   22d94:	f007 fb8b 	bl	2a4ae <z_device_ready>
   22d98:	b110      	cbz	r0, 22da0 <z_impl_device_get_binding+0x3c>
   22d9a:	6823      	ldr	r3, [r4, #0]
   22d9c:	42ab      	cmp	r3, r5
   22d9e:	d0e5      	beq.n	22d6c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   22da0:	3418      	adds	r4, #24
   22da2:	e7eb      	b.n	22d7c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22da4:	4628      	mov	r0, r5
   22da6:	6821      	ldr	r1, [r4, #0]
   22da8:	f7ee f8fe 	bl	10fa8 <strcmp>
   22dac:	2800      	cmp	r0, #0
   22dae:	d1ee      	bne.n	22d8e <z_impl_device_get_binding+0x2a>
   22db0:	e7dc      	b.n	22d6c <z_impl_device_get_binding+0x8>
   22db2:	bf00      	nop
   22db4:	0002c108 	.word	0x0002c108
   22db8:	0002c078 	.word	0x0002c078

00022dbc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22dbc:	4b01      	ldr	r3, [pc, #4]	; (22dc4 <z_impl_z_errno+0x8>)
   22dbe:	6898      	ldr	r0, [r3, #8]
}
   22dc0:	3064      	adds	r0, #100	; 0x64
   22dc2:	4770      	bx	lr
   22dc4:	2000ef70 	.word	0x2000ef70

00022dc8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22dcc:	4606      	mov	r6, r0
   22dce:	460f      	mov	r7, r1
	__asm__ volatile(
   22dd0:	f04f 0320 	mov.w	r3, #32
   22dd4:	f3ef 8811 	mrs	r8, BASEPRI
   22dd8:	f383 8812 	msr	BASEPRI_MAX, r3
   22ddc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22de0:	f001 f834 	bl	23e4c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22de4:	2200      	movs	r2, #0
   22de6:	4b20      	ldr	r3, [pc, #128]	; (22e68 <z_fatal_error+0xa0>)
   22de8:	4c20      	ldr	r4, [pc, #128]	; (22e6c <z_fatal_error+0xa4>)
   22dea:	2e04      	cmp	r6, #4
   22dec:	eba4 0403 	sub.w	r4, r4, r3
   22df0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   22df4:	bf98      	it	ls
   22df6:	4b1e      	ldrls	r3, [pc, #120]	; (22e70 <z_fatal_error+0xa8>)
   22df8:	ea4f 1484 	mov.w	r4, r4, lsl #6
   22dfc:	4605      	mov	r5, r0
   22dfe:	bf94      	ite	ls
   22e00:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   22e04:	4b1b      	ldrhi	r3, [pc, #108]	; (22e74 <z_fatal_error+0xac>)
   22e06:	9200      	str	r2, [sp, #0]
   22e08:	491b      	ldr	r1, [pc, #108]	; (22e78 <z_fatal_error+0xb0>)
   22e0a:	4632      	mov	r2, r6
   22e0c:	f044 0001 	orr.w	r0, r4, #1
   22e10:	f003 fb8d 	bl	2652e <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22e14:	b147      	cbz	r7, 22e28 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22e16:	69fb      	ldr	r3, [r7, #28]
   22e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
   22e1c:	b123      	cbz	r3, 22e28 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   22e1e:	4917      	ldr	r1, [pc, #92]	; (22e7c <z_fatal_error+0xb4>)
   22e20:	f044 0001 	orr.w	r0, r4, #1
   22e24:	f003 fb83 	bl	2652e <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22e28:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22e2c:	b12d      	cbz	r5, 22e3a <z_fatal_error+0x72>
   22e2e:	4628      	mov	r0, r5
   22e30:	f007 fbc7 	bl	2a5c2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   22e34:	b108      	cbz	r0, 22e3a <z_fatal_error+0x72>
   22e36:	7803      	ldrb	r3, [r0, #0]
   22e38:	b903      	cbnz	r3, 22e3c <z_fatal_error+0x74>
		thread_name = "unknown";
   22e3a:	4811      	ldr	r0, [pc, #68]	; (22e80 <z_fatal_error+0xb8>)
   22e3c:	f003 fb8a 	bl	26554 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   22e40:	462a      	mov	r2, r5
   22e42:	4603      	mov	r3, r0
   22e44:	490f      	ldr	r1, [pc, #60]	; (22e84 <z_fatal_error+0xbc>)
   22e46:	4620      	mov	r0, r4
   22e48:	f003 fb71 	bl	2652e <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22e4c:	4639      	mov	r1, r7
   22e4e:	4630      	mov	r0, r6
   22e50:	f7f7 fa7c 	bl	1a34c <k_sys_fatal_error_handler>
	__asm__ volatile(
   22e54:	f388 8811 	msr	BASEPRI, r8
   22e58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22e5c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22e5e:	b002      	add	sp, #8
   22e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22e64:	f7f3 b9f2 	b.w	1624c <z_impl_k_thread_abort>
   22e68:	0002c344 	.word	0x0002c344
   22e6c:	0002c3fc 	.word	0x0002c3fc
   22e70:	0002cbcc 	.word	0x0002cbcc
   22e74:	000301fb 	.word	0x000301fb
   22e78:	00030211 	.word	0x00030211
   22e7c:	00030239 	.word	0x00030239
   22e80:	00030209 	.word	0x00030209
   22e84:	0003025a 	.word	0x0003025a

00022e88 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   22e88:	b510      	push	{r4, lr}
	struct k_thread *thread = &z_idle_threads[i];
   22e8a:	24c8      	movs	r4, #200	; 0xc8
   22e8c:	4b0f      	ldr	r3, [pc, #60]	; (22ecc <init_idle_thread+0x44>)
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   22e8e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   22e90:	fb04 3400 	mla	r4, r4, r0, r3
	z_setup_new_thread(thread, stack,
   22e94:	2300      	movs	r3, #0
{
   22e96:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   22e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
   22e9c:	220f      	movs	r2, #15
   22e9e:	9301      	str	r3, [sp, #4]
   22ea0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22ea4:	2318      	movs	r3, #24
   22ea6:	4a0a      	ldr	r2, [pc, #40]	; (22ed0 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   22ea8:	490a      	ldr	r1, [pc, #40]	; (22ed4 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22eaa:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   22eae:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22eb2:	9300      	str	r3, [sp, #0]
   22eb4:	fb02 1100 	mla	r1, r2, r0, r1
   22eb8:	4b07      	ldr	r3, [pc, #28]	; (22ed8 <init_idle_thread+0x50>)
   22eba:	4620      	mov	r0, r4
   22ebc:	f000 f8d8 	bl	23070 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22ec0:	7b63      	ldrb	r3, [r4, #13]
   22ec2:	f023 0304 	bic.w	r3, r3, #4
   22ec6:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   22ec8:	b006      	add	sp, #24
   22eca:	bd10      	pop	{r4, pc}
   22ecc:	2000dad0 	.word	0x2000dad0
   22ed0:	2000ef70 	.word	0x2000ef70
   22ed4:	20011498 	.word	0x20011498
   22ed8:	000231e5 	.word	0x000231e5

00022edc <bg_thread_main>:
	z_sys_post_kernel = true;
   22edc:	2201      	movs	r2, #1
{
   22ede:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   22ee0:	4b09      	ldr	r3, [pc, #36]	; (22f08 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22ee2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22ee4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22ee6:	f7ff ff1d 	bl	22d24 <z_sys_init_run_level>
	boot_banner();
   22eea:	f001 fa45 	bl	24378 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22eee:	2003      	movs	r0, #3
   22ef0:	f7ff ff18 	bl	22d24 <z_sys_init_run_level>
	z_init_static_threads();
   22ef4:	f000 f918 	bl	23128 <z_init_static_threads>
	main();
   22ef8:	f7f0 f9ac 	bl	13254 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22efc:	4a03      	ldr	r2, [pc, #12]	; (22f0c <bg_thread_main+0x30>)
   22efe:	7b13      	ldrb	r3, [r2, #12]
   22f00:	f023 0301 	bic.w	r3, r3, #1
   22f04:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22f06:	bd08      	pop	{r3, pc}
   22f08:	2000f391 	.word	0x2000f391
   22f0c:	2000db98 	.word	0x2000db98

00022f10 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22f10:	4802      	ldr	r0, [pc, #8]	; (22f1c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   22f12:	4a03      	ldr	r2, [pc, #12]	; (22f20 <z_bss_zero+0x10>)
   22f14:	2100      	movs	r1, #0
   22f16:	1a12      	subs	r2, r2, r0
   22f18:	f007 bfb6 	b.w	2ae88 <memset>
   22f1c:	2000cb18 	.word	0x2000cb18
   22f20:	2000f398 	.word	0x2000f398

00022f24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   22f24:	b580      	push	{r7, lr}
   22f26:	b0ba      	sub	sp, #232	; 0xe8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   22f28:	f7f1 fb94 	bl	14654 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   22f2c:	4b2e      	ldr	r3, [pc, #184]	; (22fe8 <z_cstart+0xc4>)
	uint32_t msp =
   22f2e:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22f32:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   22f36:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22f3a:	2400      	movs	r4, #0
   22f3c:	23e0      	movs	r3, #224	; 0xe0
   22f3e:	4d2b      	ldr	r5, [pc, #172]	; (22fec <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   22f40:	4e2b      	ldr	r6, [pc, #172]	; (22ff0 <z_cstart+0xcc>)
   22f42:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   22f46:	77ec      	strb	r4, [r5, #31]
   22f48:	762c      	strb	r4, [r5, #24]
   22f4a:	766c      	strb	r4, [r5, #25]
   22f4c:	76ac      	strb	r4, [r5, #26]
   22f4e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22f54:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   22f58:	626b      	str	r3, [r5, #36]	; 0x24
   22f5a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22f5e:	f7f3 f929 	bl	161b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22f62:	f7f2 fd0f 	bl	15984 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22f66:	f04f 33ff 	mov.w	r3, #4294967295
   22f6a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   22f6c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   22f6e:	f7f3 fafd 	bl	1656c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   22f72:	f7f3 f97d 	bl	16270 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   22f76:	f240 1301 	movw	r3, #257	; 0x101
   22f7a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
   22f7e:	ab08      	add	r3, sp, #32
   22f80:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   22f82:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   22f86:	f007 fa91 	bl	2a4ac <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   22f8a:	4620      	mov	r0, r4
   22f8c:	f7ff feca 	bl	22d24 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   22f90:	2001      	movs	r0, #1
   22f92:	f7ff fec7 	bl	22d24 <z_sys_init_run_level>
	z_sched_init();
   22f96:	f000 fea5 	bl	23ce4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22f9a:	4a16      	ldr	r2, [pc, #88]	; (22ff4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   22f9c:	4d16      	ldr	r5, [pc, #88]	; (22ff8 <z_cstart+0xd4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22f9e:	9205      	str	r2, [sp, #20]
   22fa0:	2201      	movs	r2, #1
   22fa2:	4b16      	ldr	r3, [pc, #88]	; (22ffc <z_cstart+0xd8>)
   22fa4:	4916      	ldr	r1, [pc, #88]	; (23000 <z_cstart+0xdc>)
   22fa6:	e9cd 4203 	strd	r4, r2, [sp, #12]
   22faa:	4628      	mov	r0, r5
   22fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   22fb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   22fb4:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   22fb6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22fb8:	f000 f85a 	bl	23070 <z_setup_new_thread>
   22fbc:	7b6a      	ldrb	r2, [r5, #13]
   22fbe:	9007      	str	r0, [sp, #28]
   22fc0:	f022 0204 	bic.w	r2, r2, #4
   22fc4:	736a      	strb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   22fc6:	4628      	mov	r0, r5
   22fc8:	f007 fc8b 	bl	2a8e2 <z_ready_thread>
		init_idle_thread(i);
   22fcc:	4620      	mov	r0, r4
   22fce:	f7ff ff5b 	bl	22e88 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   22fd2:	4a0c      	ldr	r2, [pc, #48]	; (23004 <z_cstart+0xe0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22fd4:	4b09      	ldr	r3, [pc, #36]	; (22ffc <z_cstart+0xd8>)
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   22fd6:	60f2      	str	r2, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22fd8:	4628      	mov	r0, r5
   22fda:	461a      	mov	r2, r3
   22fdc:	9907      	ldr	r1, [sp, #28]
		_kernel.cpus[i].id = i;
   22fde:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   22fe0:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22fe2:	f7f2 fe65 	bl	15cb0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   22fe6:	bf00      	nop
   22fe8:	200115d8 	.word	0x200115d8
   22fec:	e000ed00 	.word	0xe000ed00
   22ff0:	2000ef70 	.word	0x2000ef70
   22ff4:	000302bc 	.word	0x000302bc
   22ff8:	2000db98 	.word	0x2000db98
   22ffc:	00022edd 	.word	0x00022edd
   23000:	20010498 	.word	0x20010498
   23004:	2000dad0 	.word	0x2000dad0

00023008 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23008:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2300a:	4c06      	ldr	r4, [pc, #24]	; (23024 <statics_init+0x1c>)
   2300c:	4d06      	ldr	r5, [pc, #24]	; (23028 <statics_init+0x20>)
   2300e:	42ac      	cmp	r4, r5
   23010:	d301      	bcc.n	23016 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   23012:	2000      	movs	r0, #0
   23014:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23016:	4620      	mov	r0, r4
   23018:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2301c:	f007 fa51 	bl	2a4c2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23020:	3414      	adds	r4, #20
   23022:	e7f4      	b.n	2300e <statics_init+0x6>
   23024:	2000c948 	.word	0x2000c948
   23028:	2000c984 	.word	0x2000c984

0002302c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   2302c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2302e:	4b0e      	ldr	r3, [pc, #56]	; (23068 <init_mem_slab_module+0x3c>)
   23030:	4c0e      	ldr	r4, [pc, #56]	; (2306c <init_mem_slab_module+0x40>)
   23032:	42a3      	cmp	r3, r4
   23034:	d301      	bcc.n	2303a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   23036:	2000      	movs	r0, #0
	return rc;
}
   23038:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2303a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2303e:	ea41 0200 	orr.w	r2, r1, r0
   23042:	f012 0203 	ands.w	r2, r2, #3
   23046:	d10b      	bne.n	23060 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   23048:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2304a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2304c:	42aa      	cmp	r2, r5
   2304e:	d101      	bne.n	23054 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23050:	331c      	adds	r3, #28
   23052:	e7ee      	b.n	23032 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   23054:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23056:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   23058:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   2305a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   2305c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2305e:	e7f5      	b.n	2304c <init_mem_slab_module+0x20>
		return -EINVAL;
   23060:	f06f 0015 	mvn.w	r0, #21
	return rc;
   23064:	e7e8      	b.n	23038 <init_mem_slab_module+0xc>
   23066:	bf00      	nop
   23068:	2000c948 	.word	0x2000c948
   2306c:	2000c948 	.word	0x2000c948

00023070 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23070:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23074:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23076:	f100 0558 	add.w	r5, r0, #88	; 0x58
   2307a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2307c:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2307e:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   23082:	2500      	movs	r5, #0
{
   23084:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23086:	3207      	adds	r2, #7
   23088:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   2308c:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	thread_base->thread_state = (uint8_t)initial_state;
   23090:	7346      	strb	r6, [r0, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   23092:	eb01 0802 	add.w	r8, r1, r2

	thread_base->prio = priority;
   23096:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2309a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   2309e:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
   230a0:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
   230a2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   230a4:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   230a6:	9202      	str	r2, [sp, #8]
   230a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   230aa:	9201      	str	r2, [sp, #4]
   230ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   230ae:	9200      	str	r2, [sp, #0]
   230b0:	4642      	mov	r2, r8
   230b2:	f7f2 fddd 	bl	15c70 <arch_new_thread>
	if (!_current) {
   230b6:	4b05      	ldr	r3, [pc, #20]	; (230cc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   230b8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   230ba:	689b      	ldr	r3, [r3, #8]
   230bc:	b103      	cbz	r3, 230c0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   230be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   230c0:	4640      	mov	r0, r8
   230c2:	6763      	str	r3, [r4, #116]	; 0x74
   230c4:	b004      	add	sp, #16
   230c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230ca:	bf00      	nop
   230cc:	2000ef70 	.word	0x2000ef70

000230d0 <z_impl_k_thread_create>:
{
   230d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   230d2:	2500      	movs	r5, #0
{
   230d4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   230d6:	9505      	str	r5, [sp, #20]
   230d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   230da:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   230de:	9504      	str	r5, [sp, #16]
   230e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   230e2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   230e4:	9503      	str	r5, [sp, #12]
   230e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   230e8:	9502      	str	r5, [sp, #8]
   230ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   230ec:	9501      	str	r5, [sp, #4]
   230ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   230f0:	9500      	str	r5, [sp, #0]
   230f2:	f7ff ffbd 	bl	23070 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   230f6:	1c7b      	adds	r3, r7, #1
   230f8:	bf08      	it	eq
   230fa:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   230fe:	d005      	beq.n	2310c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23100:	ea56 0307 	orrs.w	r3, r6, r7
   23104:	d105      	bne.n	23112 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   23106:	4620      	mov	r0, r4
   23108:	f000 fcc4 	bl	23a94 <z_sched_start>
}
   2310c:	4620      	mov	r0, r4
   2310e:	b007      	add	sp, #28
   23110:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23112:	4632      	mov	r2, r6
   23114:	463b      	mov	r3, r7
   23116:	4903      	ldr	r1, [pc, #12]	; (23124 <z_impl_k_thread_create+0x54>)
   23118:	f104 0018 	add.w	r0, r4, #24
   2311c:	f000 ff7a 	bl	24014 <z_add_timeout>
   23120:	e7f4      	b.n	2310c <z_impl_k_thread_create+0x3c>
   23122:	bf00      	nop
   23124:	0002a903 	.word	0x0002a903

00023128 <z_init_static_threads>:
{
   23128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2312c:	4e2a      	ldr	r6, [pc, #168]	; (231d8 <z_init_static_threads+0xb0>)
   2312e:	4d2b      	ldr	r5, [pc, #172]	; (231dc <z_init_static_threads+0xb4>)
   23130:	46b0      	mov	r8, r6
{
   23132:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   23134:	42b5      	cmp	r5, r6
   23136:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2313a:	d310      	bcc.n	2315e <z_init_static_threads+0x36>
	k_sched_lock();
   2313c:	f000 fbbe 	bl	238bc <k_sched_lock>
   23140:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   23144:	f240 36e7 	movw	r6, #999	; 0x3e7
   23148:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   2314a:	4c24      	ldr	r4, [pc, #144]	; (231dc <z_init_static_threads+0xb4>)
   2314c:	f8df a090 	ldr.w	sl, [pc, #144]	; 231e0 <z_init_static_threads+0xb8>
   23150:	4544      	cmp	r4, r8
   23152:	d321      	bcc.n	23198 <z_init_static_threads+0x70>
}
   23154:	b006      	add	sp, #24
   23156:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   2315a:	f000 bda7 	b.w	23cac <k_sched_unlock>
		z_setup_new_thread(
   2315e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23162:	9305      	str	r3, [sp, #20]
   23164:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23168:	9304      	str	r3, [sp, #16]
   2316a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2316e:	9303      	str	r3, [sp, #12]
   23170:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23174:	9302      	str	r3, [sp, #8]
   23176:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2317a:	9301      	str	r3, [sp, #4]
   2317c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23180:	9300      	str	r3, [sp, #0]
   23182:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23186:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2318a:	f7ff ff71 	bl	23070 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2318e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23192:	655d      	str	r5, [r3, #84]	; 0x54
   23194:	4625      	mov	r5, r4
   23196:	e7cd      	b.n	23134 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23198:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2319a:	1c5a      	adds	r2, r3, #1
   2319c:	d00d      	beq.n	231ba <z_init_static_threads+0x92>
   2319e:	4630      	mov	r0, r6
   231a0:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   231a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   231a6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   231aa:	42b9      	cmp	r1, r7
   231ac:	bf08      	it	eq
   231ae:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   231b0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   231b2:	d104      	bne.n	231be <z_init_static_threads+0x96>
	z_sched_start(thread);
   231b4:	4628      	mov	r0, r5
   231b6:	f000 fc6d 	bl	23a94 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   231ba:	3430      	adds	r4, #48	; 0x30
   231bc:	e7c8      	b.n	23150 <z_init_static_threads+0x28>
   231be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   231c2:	2300      	movs	r3, #0
   231c4:	f7ed fd40 	bl	10c48 <__aeabi_uldivmod>
   231c8:	4602      	mov	r2, r0
   231ca:	460b      	mov	r3, r1
   231cc:	f105 0018 	add.w	r0, r5, #24
   231d0:	4651      	mov	r1, sl
   231d2:	f000 ff1f 	bl	24014 <z_add_timeout>
   231d6:	e7f0      	b.n	231ba <z_init_static_threads+0x92>
   231d8:	2000c948 	.word	0x2000c948
   231dc:	2000c918 	.word	0x2000c918
   231e0:	0002a903 	.word	0x0002a903

000231e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   231e4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   231e6:	4c09      	ldr	r4, [pc, #36]	; (2320c <idle+0x28>)
	__asm__ volatile(
   231e8:	f04f 0220 	mov.w	r2, #32
   231ec:	f3ef 8311 	mrs	r3, BASEPRI
   231f0:	f382 8812 	msr	BASEPRI_MAX, r2
   231f4:	f3bf 8f6f 	isb	sy
   231f8:	f007 fc2d 	bl	2aa56 <z_get_next_timeout_expiry>
   231fc:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   231fe:	f7f2 fb35 	bl	1586c <pm_system_suspend>
   23202:	2800      	cmp	r0, #0
   23204:	d1f0      	bne.n	231e8 <idle+0x4>
	arch_cpu_idle();
   23206:	f7f2 fbc3 	bl	15990 <arch_cpu_idle>
}
   2320a:	e7ed      	b.n	231e8 <idle+0x4>
   2320c:	2000ef70 	.word	0x2000ef70

00023210 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23214:	4604      	mov	r4, r0
   23216:	4616      	mov	r6, r2
   23218:	461f      	mov	r7, r3
   2321a:	f04f 0320 	mov.w	r3, #32
   2321e:	f3ef 8811 	mrs	r8, BASEPRI
   23222:	f383 8812 	msr	BASEPRI_MAX, r3
   23226:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2322a:	68c3      	ldr	r3, [r0, #12]
   2322c:	4a35      	ldr	r2, [pc, #212]	; (23304 <z_impl_k_mutex_lock+0xf4>)
   2322e:	b16b      	cbz	r3, 2324c <z_impl_k_mutex_lock+0x3c>
   23230:	6880      	ldr	r0, [r0, #8]
   23232:	6891      	ldr	r1, [r2, #8]
   23234:	4288      	cmp	r0, r1
   23236:	d019      	beq.n	2326c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23238:	ea56 0307 	orrs.w	r3, r6, r7
   2323c:	d118      	bne.n	23270 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2323e:	f388 8811 	msr	BASEPRI, r8
   23242:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23246:	f06f 000f 	mvn.w	r0, #15
   2324a:	e00c      	b.n	23266 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   2324c:	6891      	ldr	r1, [r2, #8]
   2324e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23252:	3301      	adds	r3, #1
   23254:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23256:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23258:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2325a:	60a3      	str	r3, [r4, #8]
   2325c:	f388 8811 	msr	BASEPRI, r8
   23260:	f3bf 8f6f 	isb	sy
		return 0;
   23264:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23266:	b002      	add	sp, #8
   23268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2326c:	6921      	ldr	r1, [r4, #16]
   2326e:	e7f0      	b.n	23252 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23270:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23274:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   23278:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2327c:	4299      	cmp	r1, r3
   2327e:	bfa8      	it	ge
   23280:	4619      	movge	r1, r3
   23282:	4291      	cmp	r1, r2
   23284:	bfb8      	it	lt
   23286:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23288:	428b      	cmp	r3, r1
   2328a:	dd2f      	ble.n	232ec <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   2328c:	f000 fc90 	bl	23bb0 <z_set_prio>
   23290:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23292:	4622      	mov	r2, r4
   23294:	4641      	mov	r1, r8
   23296:	e9cd 6700 	strd	r6, r7, [sp]
   2329a:	481b      	ldr	r0, [pc, #108]	; (23308 <z_impl_k_mutex_lock+0xf8>)
   2329c:	f000 fc74 	bl	23b88 <z_pend_curr>
	if (got_mutex == 0) {
   232a0:	2800      	cmp	r0, #0
   232a2:	d0e0      	beq.n	23266 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   232a4:	f04f 0320 	mov.w	r3, #32
   232a8:	f3ef 8611 	mrs	r6, BASEPRI
   232ac:	f383 8812 	msr	BASEPRI_MAX, r3
   232b0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   232b4:	6823      	ldr	r3, [r4, #0]
   232b6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   232b8:	429c      	cmp	r4, r3
   232ba:	d00a      	beq.n	232d2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   232bc:	b14b      	cbz	r3, 232d2 <z_impl_k_mutex_lock+0xc2>
   232be:	f993 300e 	ldrsb.w	r3, [r3, #14]
   232c2:	4299      	cmp	r1, r3
   232c4:	bfa8      	it	ge
   232c6:	4619      	movge	r1, r3
   232c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   232cc:	4299      	cmp	r1, r3
   232ce:	bfb8      	it	lt
   232d0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   232d2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   232d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   232d8:	4299      	cmp	r1, r3
   232da:	d109      	bne.n	232f0 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   232dc:	b16d      	cbz	r5, 232fa <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   232de:	4631      	mov	r1, r6
   232e0:	4809      	ldr	r0, [pc, #36]	; (23308 <z_impl_k_mutex_lock+0xf8>)
   232e2:	f000 fad9 	bl	23898 <z_reschedule>
	return -EAGAIN;
   232e6:	f06f 000a 	mvn.w	r0, #10
   232ea:	e7bc      	b.n	23266 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   232ec:	2500      	movs	r5, #0
   232ee:	e7d0      	b.n	23292 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   232f0:	f000 fc5e 	bl	23bb0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   232f4:	2800      	cmp	r0, #0
   232f6:	d1f2      	bne.n	232de <z_impl_k_mutex_lock+0xce>
   232f8:	e7f0      	b.n	232dc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   232fa:	f386 8811 	msr	BASEPRI, r6
   232fe:	f3bf 8f6f 	isb	sy
   23302:	e7f0      	b.n	232e6 <z_impl_k_mutex_lock+0xd6>
   23304:	2000ef70 	.word	0x2000ef70
   23308:	2000f392 	.word	0x2000f392

0002330c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2330c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2330e:	6883      	ldr	r3, [r0, #8]
{
   23310:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   23312:	2b00      	cmp	r3, #0
   23314:	d036      	beq.n	23384 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23316:	4a1e      	ldr	r2, [pc, #120]	; (23390 <z_impl_k_mutex_unlock+0x84>)
   23318:	6892      	ldr	r2, [r2, #8]
   2331a:	4293      	cmp	r3, r2
   2331c:	d135      	bne.n	2338a <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   2331e:	7bda      	ldrb	r2, [r3, #15]
   23320:	3a01      	subs	r2, #1
   23322:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23324:	68c3      	ldr	r3, [r0, #12]
   23326:	2b01      	cmp	r3, #1
   23328:	d905      	bls.n	23336 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   2332a:	3b01      	subs	r3, #1
   2332c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2332e:	f000 fcbd 	bl	23cac <k_sched_unlock>

	return 0;
   23332:	2000      	movs	r0, #0
}
   23334:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23336:	f04f 0320 	mov.w	r3, #32
   2333a:	f3ef 8511 	mrs	r5, BASEPRI
   2333e:	f383 8812 	msr	BASEPRI_MAX, r3
   23342:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23346:	6901      	ldr	r1, [r0, #16]
   23348:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   2334a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2334e:	4299      	cmp	r1, r3
   23350:	d001      	beq.n	23356 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   23352:	f000 fc2d 	bl	23bb0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23356:	4620      	mov	r0, r4
   23358:	f007 fb22 	bl	2a9a0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2335c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2335e:	b158      	cbz	r0, 23378 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   23360:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23364:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23366:	2200      	movs	r2, #0
   23368:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2336a:	f007 faba 	bl	2a8e2 <z_ready_thread>
		z_reschedule(&lock, key);
   2336e:	4629      	mov	r1, r5
   23370:	4808      	ldr	r0, [pc, #32]	; (23394 <z_impl_k_mutex_unlock+0x88>)
   23372:	f000 fa91 	bl	23898 <z_reschedule>
   23376:	e7da      	b.n	2332e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   23378:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2337a:	f385 8811 	msr	BASEPRI, r5
   2337e:	f3bf 8f6f 	isb	sy
   23382:	e7d4      	b.n	2332e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   23384:	f06f 0015 	mvn.w	r0, #21
   23388:	e7d4      	b.n	23334 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   2338a:	f04f 30ff 	mov.w	r0, #4294967295
   2338e:	e7d1      	b.n	23334 <z_impl_k_mutex_unlock+0x28>
   23390:	2000ef70 	.word	0x2000ef70
   23394:	2000f392 	.word	0x2000f392

00023398 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2339a:	4616      	mov	r6, r2
   2339c:	461f      	mov	r7, r3
	__asm__ volatile(
   2339e:	f04f 0320 	mov.w	r3, #32
   233a2:	f3ef 8511 	mrs	r5, BASEPRI
   233a6:	f383 8812 	msr	BASEPRI_MAX, r3
   233aa:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   233ae:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   233b0:	b19c      	cbz	r4, 233da <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   233b2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   233b4:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   233b6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   233ba:	4294      	cmp	r4, r2
	list->head = node;
   233bc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   233be:	bf08      	it	eq
   233c0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   233c2:	2101      	movs	r1, #1
   233c4:	4620      	mov	r0, r4
   233c6:	f007 f972 	bl	2a6ae <z_queue_node_peek>
   233ca:	4604      	mov	r4, r0
	__asm__ volatile(
   233cc:	f385 8811 	msr	BASEPRI, r5
   233d0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   233d4:	4620      	mov	r0, r4
   233d6:	b003      	add	sp, #12
   233d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   233da:	ea56 0307 	orrs.w	r3, r6, r7
   233de:	d0f5      	beq.n	233cc <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   233e0:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   233e4:	4629      	mov	r1, r5
   233e6:	4610      	mov	r0, r2
   233e8:	e9cd 6700 	strd	r6, r7, [sp]
   233ec:	f000 fbcc 	bl	23b88 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   233f0:	2800      	cmp	r0, #0
   233f2:	d1ef      	bne.n	233d4 <z_impl_k_queue_get+0x3c>
   233f4:	4b01      	ldr	r3, [pc, #4]	; (233fc <z_impl_k_queue_get+0x64>)
   233f6:	689b      	ldr	r3, [r3, #8]
   233f8:	695c      	ldr	r4, [r3, #20]
   233fa:	e7eb      	b.n	233d4 <z_impl_k_queue_get+0x3c>
   233fc:	2000ef70 	.word	0x2000ef70

00023400 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23400:	b538      	push	{r3, r4, r5, lr}
   23402:	4604      	mov	r4, r0
	__asm__ volatile(
   23404:	f04f 0320 	mov.w	r3, #32
   23408:	f3ef 8511 	mrs	r5, BASEPRI
   2340c:	f383 8812 	msr	BASEPRI_MAX, r3
   23410:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23414:	f007 fac4 	bl	2a9a0 <z_unpend_first_thread>

	if (thread != NULL) {
   23418:	b148      	cbz	r0, 2342e <z_impl_k_sem_give+0x2e>
   2341a:	2200      	movs	r2, #0
   2341c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2341e:	f007 fa60 	bl	2a8e2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23422:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   23424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23428:	4807      	ldr	r0, [pc, #28]	; (23448 <z_impl_k_sem_give+0x48>)
   2342a:	f000 ba35 	b.w	23898 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2342e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23432:	429a      	cmp	r2, r3
   23434:	bf18      	it	ne
   23436:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23438:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2343a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2343c:	f104 0010 	add.w	r0, r4, #16
   23440:	f007 fc9e 	bl	2ad80 <z_handle_obj_poll_events>
}
   23444:	e7ed      	b.n	23422 <z_impl_k_sem_give+0x22>
   23446:	bf00      	nop
   23448:	2000f392 	.word	0x2000f392

0002344c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2344c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2344e:	4614      	mov	r4, r2
   23450:	461d      	mov	r5, r3
   23452:	f04f 0320 	mov.w	r3, #32
   23456:	f3ef 8111 	mrs	r1, BASEPRI
   2345a:	f383 8812 	msr	BASEPRI_MAX, r3
   2345e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23462:	6883      	ldr	r3, [r0, #8]
   23464:	b143      	cbz	r3, 23478 <z_impl_k_sem_take+0x2c>
		sem->count--;
   23466:	3b01      	subs	r3, #1
   23468:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   2346a:	f381 8811 	msr	BASEPRI, r1
   2346e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23472:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23474:	b003      	add	sp, #12
   23476:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23478:	ea54 0305 	orrs.w	r3, r4, r5
   2347c:	d106      	bne.n	2348c <z_impl_k_sem_take+0x40>
   2347e:	f381 8811 	msr	BASEPRI, r1
   23482:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23486:	f06f 000f 	mvn.w	r0, #15
   2348a:	e7f3      	b.n	23474 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2348c:	4602      	mov	r2, r0
   2348e:	e9cd 4500 	strd	r4, r5, [sp]
   23492:	4802      	ldr	r0, [pc, #8]	; (2349c <z_impl_k_sem_take+0x50>)
   23494:	f000 fb78 	bl	23b88 <z_pend_curr>
	return ret;
   23498:	e7ec      	b.n	23474 <z_impl_k_sem_take+0x28>
   2349a:	bf00      	nop
   2349c:	2000f392 	.word	0x2000f392

000234a0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   234a0:	b570      	push	{r4, r5, r6, lr}
   234a2:	4604      	mov	r4, r0
	__asm__ volatile(
   234a4:	f04f 0320 	mov.w	r3, #32
   234a8:	f3ef 8511 	mrs	r5, BASEPRI
   234ac:	f383 8812 	msr	BASEPRI_MAX, r3
   234b0:	f3bf 8f6f 	isb	sy
   234b4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   234b8:	4620      	mov	r0, r4
   234ba:	f007 fa71 	bl	2a9a0 <z_unpend_first_thread>
		if (thread == NULL) {
   234be:	b118      	cbz	r0, 234c8 <z_impl_k_sem_reset+0x28>
   234c0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   234c2:	f007 fa0e 	bl	2a8e2 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   234c6:	e7f7      	b.n	234b8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   234c8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   234ca:	2102      	movs	r1, #2
   234cc:	f104 0010 	add.w	r0, r4, #16
   234d0:	f007 fc56 	bl	2ad80 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   234d4:	4629      	mov	r1, r5
}
   234d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   234da:	4801      	ldr	r0, [pc, #4]	; (234e0 <z_impl_k_sem_reset+0x40>)
   234dc:	f000 b9dc 	b.w	23898 <z_reschedule>
   234e0:	2000f392 	.word	0x2000f392

000234e4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   234e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234e8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   234ea:	f04f 38ff 	mov.w	r8, #4294967295
   234ee:	f04f 39ff 	mov.w	r9, #4294967295
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   234f2:	4e49      	ldr	r6, [pc, #292]	; (23618 <work_queue_main+0x134>)
{
   234f4:	b085      	sub	sp, #20
   234f6:	f04f 0320 	mov.w	r3, #32
   234fa:	f3ef 8711 	mrs	r7, BASEPRI
   234fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23502:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   23506:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
	return list->head;
   2350a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
Z_GENLIST_GET(slist, snode)
   2350e:	b985      	cbnz	r5, 23532 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   23510:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   23514:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   23516:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
   2351a:	d433      	bmi.n	23584 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2351c:	2300      	movs	r3, #0
   2351e:	4639      	mov	r1, r7
   23520:	e9cd 8900 	strd	r8, r9, [sp]
   23524:	9302      	str	r3, [sp, #8]
   23526:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   2352a:	483c      	ldr	r0, [pc, #240]	; (2361c <work_queue_main+0x138>)
   2352c:	f000 fcf6 	bl	23f1c <z_sched_wait>
			continue;
   23530:	e7e1      	b.n	234f6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23532:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   23536:	6829      	ldr	r1, [r5, #0]
   23538:	4295      	cmp	r5, r2
	list->head = node;
   2353a:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2353e:	d101      	bne.n	23544 <work_queue_main+0x60>
	list->tail = node;
   23540:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   23544:	f043 0302 	orr.w	r3, r3, #2
   23548:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   2354c:	68eb      	ldr	r3, [r5, #12]
   2354e:	f023 0304 	bic.w	r3, r3, #4
   23552:	f043 0301 	orr.w	r3, r3, #1
   23556:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   23558:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2355a:	f387 8811 	msr	BASEPRI, r7
   2355e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   23562:	4628      	mov	r0, r5
   23564:	4798      	blx	r3
	__asm__ volatile(
   23566:	f04f 0320 	mov.w	r3, #32
   2356a:	f3ef 8b11 	mrs	fp, BASEPRI
   2356e:	f383 8812 	msr	BASEPRI_MAX, r3
   23572:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   23576:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23578:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2357a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2357e:	d40b      	bmi.n	23598 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   23580:	60ea      	str	r2, [r5, #12]
   23582:	e00e      	b.n	235a2 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   23584:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   23588:	2200      	movs	r2, #0
   2358a:	2101      	movs	r1, #1
   2358c:	4628      	mov	r0, r5
   2358e:	f007 fa2f 	bl	2a9f0 <z_sched_wake>
   23592:	2800      	cmp	r0, #0
   23594:	d1f8      	bne.n	23588 <work_queue_main+0xa4>
   23596:	e7c1      	b.n	2351c <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23598:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2359a:	f023 0303 	bic.w	r3, r3, #3
   2359e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   235a0:	b970      	cbnz	r0, 235c0 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   235a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   235a6:	f023 0302 	bic.w	r3, r3, #2
   235aa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   235ae:	f38b 8811 	msr	BASEPRI, fp
   235b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   235b6:	05d8      	lsls	r0, r3, #23
   235b8:	d49d      	bmi.n	234f6 <work_queue_main+0x12>
	z_impl_k_yield();
   235ba:	f000 fb9f 	bl	23cfc <z_impl_k_yield>
}
   235be:	e79a      	b.n	234f6 <work_queue_main+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   235c0:	f04f 0a00 	mov.w	sl, #0
   235c4:	6807      	ldr	r7, [r0, #0]
	parent->next = child;
   235c6:	4653      	mov	r3, sl
   235c8:	2f00      	cmp	r7, #0
   235ca:	bf38      	it	cc
   235cc:	2700      	movcc	r7, #0
		if (wc->work == work) {
   235ce:	6842      	ldr	r2, [r0, #4]
   235d0:	4601      	mov	r1, r0
   235d2:	4295      	cmp	r5, r2
   235d4:	d10e      	bne.n	235f4 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   235d6:	6801      	ldr	r1, [r0, #0]
   235d8:	f1ba 0f00 	cmp.w	sl, #0
   235dc:	d114      	bne.n	23608 <work_queue_main+0x124>
   235de:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   235e0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   235e2:	4290      	cmp	r0, r2
   235e4:	d100      	bne.n	235e8 <work_queue_main+0x104>
	list->tail = node;
   235e6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   235e8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   235ec:	f7ff ff08 	bl	23400 <z_impl_k_sem_give>
}
   235f0:	4651      	mov	r1, sl
   235f2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   235f4:	2f00      	cmp	r7, #0
   235f6:	d0d4      	beq.n	235a2 <work_queue_main+0xbe>
	return node->next;
   235f8:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   235fa:	4638      	mov	r0, r7
   235fc:	2a00      	cmp	r2, #0
   235fe:	bf38      	it	cc
   23600:	2200      	movcc	r2, #0
   23602:	468a      	mov	sl, r1
   23604:	4617      	mov	r7, r2
   23606:	e7e2      	b.n	235ce <work_queue_main+0xea>
	parent->next = child;
   23608:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   2360c:	6872      	ldr	r2, [r6, #4]
   2360e:	4290      	cmp	r0, r2
	list->tail = node;
   23610:	bf08      	it	eq
   23612:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   23616:	e7e7      	b.n	235e8 <work_queue_main+0x104>
   23618:	2000ef9c 	.word	0x2000ef9c
   2361c:	2000f392 	.word	0x2000f392

00023620 <submit_to_queue_locked>:
{
   23620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23622:	68c3      	ldr	r3, [r0, #12]
{
   23624:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23626:	079a      	lsls	r2, r3, #30
{
   23628:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2362a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2362e:	d41f      	bmi.n	23670 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   23630:	075f      	lsls	r7, r3, #29
   23632:	d41f      	bmi.n	23674 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   23634:	680a      	ldr	r2, [r1, #0]
   23636:	b90a      	cbnz	r2, 2363c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   23638:	6882      	ldr	r2, [r0, #8]
   2363a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2363c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2363e:	bf42      	ittt	mi
   23640:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   23642:	2502      	movmi	r5, #2
			*queuep = work->queue;
   23644:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   23646:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   23648:	bf58      	it	pl
   2364a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2364c:	b37f      	cbz	r7, 236ae <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2364e:	4b1b      	ldr	r3, [pc, #108]	; (236bc <submit_to_queue_locked+0x9c>)
   23650:	689b      	ldr	r3, [r3, #8]
   23652:	42bb      	cmp	r3, r7
   23654:	d111      	bne.n	2367a <submit_to_queue_locked+0x5a>
   23656:	f006 ffab 	bl	2a5b0 <k_is_in_isr>
   2365a:	f080 0001 	eor.w	r0, r0, #1
   2365e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   23660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23664:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23666:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2366a:	d523      	bpl.n	236b4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2366c:	b13a      	cbz	r2, 2367e <submit_to_queue_locked+0x5e>
   2366e:	b940      	cbnz	r0, 23682 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   23670:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   23674:	2300      	movs	r3, #0
   23676:	6033      	str	r3, [r6, #0]
	return ret;
   23678:	e013      	b.n	236a2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2367a:	2000      	movs	r0, #0
   2367c:	e7f0      	b.n	23660 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2367e:	071b      	lsls	r3, r3, #28
   23680:	d4f6      	bmi.n	23670 <submit_to_queue_locked+0x50>
	parent->next = child;
   23682:	2300      	movs	r3, #0
   23684:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2368a:	b963      	cbnz	r3, 236a6 <submit_to_queue_locked+0x86>
	list->head = node;
   2368c:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   23690:	4638      	mov	r0, r7
   23692:	f007 f833 	bl	2a6fc <notify_queue_locked>
	*flagp |= BIT(bit);
   23696:	68e3      	ldr	r3, [r4, #12]
   23698:	f043 0304 	orr.w	r3, r3, #4
   2369c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2369e:	6833      	ldr	r3, [r6, #0]
   236a0:	60a3      	str	r3, [r4, #8]
}
   236a2:	4628      	mov	r0, r5
   236a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   236a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   236a8:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
}
   236ac:	e7f0      	b.n	23690 <submit_to_queue_locked+0x70>
		return -EINVAL;
   236ae:	f06f 0515 	mvn.w	r5, #21
   236b2:	e7df      	b.n	23674 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   236b4:	f06f 0512 	mvn.w	r5, #18
   236b8:	e7dc      	b.n	23674 <submit_to_queue_locked+0x54>
   236ba:	bf00      	nop
   236bc:	2000ef70 	.word	0x2000ef70

000236c0 <k_work_submit>:
{
   236c0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   236c2:	4801      	ldr	r0, [pc, #4]	; (236c8 <k_work_submit+0x8>)
   236c4:	f007 b881 	b.w	2a7ca <k_work_submit_to_queue>
   236c8:	2000dc68 	.word	0x2000dc68

000236cc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   236cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ce:	4604      	mov	r4, r0
	list->head = NULL;
   236d0:	2000      	movs	r0, #0
   236d2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   236d4:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   236d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   236da:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   236de:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   236e2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   236e6:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   236ea:	b31d      	cbz	r5, 23734 <k_work_queue_start+0x68>
   236ec:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   236ee:	2800      	cmp	r0, #0
   236f0:	f240 1001 	movw	r0, #257	; 0x101
   236f4:	bf08      	it	eq
   236f6:	2001      	moveq	r0, #1
	*flagp = flags;
   236f8:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   236fc:	2000      	movs	r0, #0
   236fe:	f04f 36ff 	mov.w	r6, #4294967295
   23702:	f04f 37ff 	mov.w	r7, #4294967295
   23706:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2370a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2370e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   23712:	4620      	mov	r0, r4
   23714:	4b08      	ldr	r3, [pc, #32]	; (23738 <k_work_queue_start+0x6c>)
   23716:	9400      	str	r4, [sp, #0]
   23718:	f7ff fcda 	bl	230d0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2371c:	b125      	cbz	r5, 23728 <k_work_queue_start+0x5c>
   2371e:	6829      	ldr	r1, [r5, #0]
   23720:	b111      	cbz	r1, 23728 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   23722:	4620      	mov	r0, r4
   23724:	f006 ff4a 	bl	2a5bc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23728:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2372a:	b009      	add	sp, #36	; 0x24
   2372c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23730:	f006 bf49 	b.w	2a5c6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23734:	2001      	movs	r0, #1
   23736:	e7df      	b.n	236f8 <k_work_queue_start+0x2c>
   23738:	000234e5 	.word	0x000234e5

0002373c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2373c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2373e:	4614      	mov	r4, r2
   23740:	9001      	str	r0, [sp, #4]
   23742:	461d      	mov	r5, r3
   23744:	4608      	mov	r0, r1
	__asm__ volatile(
   23746:	f04f 0120 	mov.w	r1, #32
   2374a:	f3ef 8611 	mrs	r6, BASEPRI
   2374e:	f381 8812 	msr	BASEPRI_MAX, r1
   23752:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   23756:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23758:	f011 0f0e 	tst.w	r1, #14
   2375c:	d115      	bne.n	2378a <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2375e:	432c      	orrs	r4, r5
   23760:	d108      	bne.n	23774 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   23762:	a901      	add	r1, sp, #4
   23764:	f7ff ff5c 	bl	23620 <submit_to_queue_locked>
	__asm__ volatile(
   23768:	f386 8811 	msr	BASEPRI, r6
   2376c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23770:	b002      	add	sp, #8
   23772:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   23774:	f041 0108 	orr.w	r1, r1, #8
   23778:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2377a:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2377c:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   2377e:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23780:	4903      	ldr	r1, [pc, #12]	; (23790 <k_work_schedule_for_queue+0x54>)
   23782:	f000 fc47 	bl	24014 <z_add_timeout>
	return ret;
   23786:	2001      	movs	r0, #1
   23788:	e7ee      	b.n	23768 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2378a:	2000      	movs	r0, #0
   2378c:	e7ec      	b.n	23768 <k_work_schedule_for_queue+0x2c>
   2378e:	bf00      	nop
   23790:	0002a78d 	.word	0x0002a78d

00023794 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23794:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23796:	4801      	ldr	r0, [pc, #4]	; (2379c <k_work_schedule+0x8>)
   23798:	f7ff bfd0 	b.w	2373c <k_work_schedule_for_queue>
   2379c:	2000dc68 	.word	0x2000dc68

000237a0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   237a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   237a2:	460c      	mov	r4, r1
   237a4:	4616      	mov	r6, r2
   237a6:	461f      	mov	r7, r3
   237a8:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   237aa:	f04f 0320 	mov.w	r3, #32
   237ae:	f3ef 8511 	mrs	r5, BASEPRI
   237b2:	f383 8812 	msr	BASEPRI_MAX, r3
   237b6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   237ba:	4608      	mov	r0, r1
   237bc:	f006 ffa5 	bl	2a70a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   237c0:	ea56 0307 	orrs.w	r3, r6, r7
   237c4:	d109      	bne.n	237da <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   237c6:	4620      	mov	r0, r4
   237c8:	a901      	add	r1, sp, #4
   237ca:	f7ff ff29 	bl	23620 <submit_to_queue_locked>
	__asm__ volatile(
   237ce:	f385 8811 	msr	BASEPRI, r5
   237d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   237d6:	b003      	add	sp, #12
   237d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   237da:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   237dc:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   237e0:	f043 0308 	orr.w	r3, r3, #8
   237e4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   237e6:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   237e8:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   237ea:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   237ec:	4902      	ldr	r1, [pc, #8]	; (237f8 <k_work_reschedule_for_queue+0x58>)
   237ee:	463b      	mov	r3, r7
   237f0:	f000 fc10 	bl	24014 <z_add_timeout>
	return ret;
   237f4:	2001      	movs	r0, #1
   237f6:	e7ea      	b.n	237ce <k_work_reschedule_for_queue+0x2e>
   237f8:	0002a78d 	.word	0x0002a78d

000237fc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   237fc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   237fe:	4801      	ldr	r0, [pc, #4]	; (23804 <k_work_reschedule+0x8>)
   23800:	f7ff bfce 	b.w	237a0 <k_work_reschedule_for_queue>
   23804:	2000dc68 	.word	0x2000dc68

00023808 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   23808:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2380a:	4c08      	ldr	r4, [pc, #32]	; (2382c <z_reset_time_slice+0x24>)
   2380c:	6823      	ldr	r3, [r4, #0]
   2380e:	b15b      	cbz	r3, 23828 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   23810:	f7f4 f902 	bl	17a18 <sys_clock_elapsed>
   23814:	6822      	ldr	r2, [r4, #0]
   23816:	4906      	ldr	r1, [pc, #24]	; (23830 <z_reset_time_slice+0x28>)
   23818:	4410      	add	r0, r2
   2381a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   2381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   23820:	2100      	movs	r1, #0
   23822:	4610      	mov	r0, r2
   23824:	f007 b927 	b.w	2aa76 <z_set_timeout_expiry>
}
   23828:	bd10      	pop	{r4, pc}
   2382a:	bf00      	nop
   2382c:	2000efac 	.word	0x2000efac
   23830:	2000ef70 	.word	0x2000ef70

00023834 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   23834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23836:	4604      	mov	r4, r0
   23838:	460d      	mov	r5, r1
	__asm__ volatile(
   2383a:	f04f 0320 	mov.w	r3, #32
   2383e:	f3ef 8611 	mrs	r6, BASEPRI
   23842:	f383 8812 	msr	BASEPRI_MAX, r3
   23846:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2384a:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2384c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   23850:	f240 30e7 	movw	r0, #999	; 0x3e7
   23854:	2100      	movs	r1, #0
   23856:	4b0d      	ldr	r3, [pc, #52]	; (2388c <k_sched_time_slice_set+0x58>)
   23858:	fbe7 0104 	umlal	r0, r1, r7, r4
   2385c:	611a      	str	r2, [r3, #16]
   2385e:	2300      	movs	r3, #0
   23860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23864:	f7ed f9f0 	bl	10c48 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   23868:	2c00      	cmp	r4, #0
   2386a:	4b09      	ldr	r3, [pc, #36]	; (23890 <k_sched_time_slice_set+0x5c>)
   2386c:	dc09      	bgt.n	23882 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2386e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   23870:	4b08      	ldr	r3, [pc, #32]	; (23894 <k_sched_time_slice_set+0x60>)
   23872:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   23874:	f7ff ffc8 	bl	23808 <z_reset_time_slice>
	__asm__ volatile(
   23878:	f386 8811 	msr	BASEPRI, r6
   2387c:	f3bf 8f6f 	isb	sy
	}
}
   23880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   23882:	2802      	cmp	r0, #2
   23884:	bfb8      	it	lt
   23886:	2002      	movlt	r0, #2
   23888:	e7f1      	b.n	2386e <k_sched_time_slice_set+0x3a>
   2388a:	bf00      	nop
   2388c:	2000ef70 	.word	0x2000ef70
   23890:	2000efac 	.word	0x2000efac
   23894:	2000efa8 	.word	0x2000efa8

00023898 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23898:	b949      	cbnz	r1, 238ae <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2389a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2389e:	b930      	cbnz	r0, 238ae <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   238a0:	4b05      	ldr	r3, [pc, #20]	; (238b8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   238a2:	69da      	ldr	r2, [r3, #28]
   238a4:	689b      	ldr	r3, [r3, #8]
   238a6:	429a      	cmp	r2, r3
   238a8:	d001      	beq.n	238ae <z_reschedule+0x16>
	ret = arch_swap(key);
   238aa:	f7f2 b96d 	b.w	15b88 <arch_swap>
   238ae:	f381 8811 	msr	BASEPRI, r1
   238b2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   238b6:	4770      	bx	lr
   238b8:	2000ef70 	.word	0x2000ef70

000238bc <k_sched_lock>:
	__asm__ volatile(
   238bc:	f04f 0320 	mov.w	r3, #32
   238c0:	f3ef 8111 	mrs	r1, BASEPRI
   238c4:	f383 8812 	msr	BASEPRI_MAX, r3
   238c8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   238cc:	4b04      	ldr	r3, [pc, #16]	; (238e0 <k_sched_lock+0x24>)
   238ce:	689a      	ldr	r2, [r3, #8]
   238d0:	7bd3      	ldrb	r3, [r2, #15]
   238d2:	3b01      	subs	r3, #1
   238d4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   238d6:	f381 8811 	msr	BASEPRI, r1
   238da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   238de:	4770      	bx	lr
   238e0:	2000ef70 	.word	0x2000ef70

000238e4 <update_cache>:
{
   238e4:	b538      	push	{r3, r4, r5, lr}
   238e6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   238e8:	480c      	ldr	r0, [pc, #48]	; (2391c <update_cache+0x38>)
   238ea:	f006 fff0 	bl	2a8ce <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   238ee:	4d0c      	ldr	r5, [pc, #48]	; (23920 <update_cache+0x3c>)
   238f0:	4604      	mov	r4, r0
   238f2:	b900      	cbnz	r0, 238f6 <update_cache+0x12>
   238f4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   238f6:	68ab      	ldr	r3, [r5, #8]
   238f8:	b94a      	cbnz	r2, 2390e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   238fa:	7b5a      	ldrb	r2, [r3, #13]
   238fc:	06d2      	lsls	r2, r2, #27
   238fe:	d106      	bne.n	2390e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23900:	69a2      	ldr	r2, [r4, #24]
   23902:	b922      	cbnz	r2, 2390e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   23904:	89da      	ldrh	r2, [r3, #14]
   23906:	2a7f      	cmp	r2, #127	; 0x7f
   23908:	d901      	bls.n	2390e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2390a:	61eb      	str	r3, [r5, #28]
}
   2390c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2390e:	429c      	cmp	r4, r3
   23910:	d001      	beq.n	23916 <update_cache+0x32>
			z_reset_time_slice();
   23912:	f7ff ff79 	bl	23808 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23916:	61ec      	str	r4, [r5, #28]
}
   23918:	e7f8      	b.n	2390c <update_cache+0x28>
   2391a:	bf00      	nop
   2391c:	2000ef90 	.word	0x2000ef90
   23920:	2000ef70 	.word	0x2000ef70

00023924 <move_thread_to_end_of_prio_q>:
{
   23924:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23926:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2392a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2392c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2392e:	7b43      	ldrb	r3, [r0, #13]
   23930:	da04      	bge.n	2393c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23936:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   23938:	f006 ff84 	bl	2a844 <sys_dlist_remove>
	return list->head == list;
   2393c:	4a17      	ldr	r2, [pc, #92]	; (2399c <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2393e:	7b4b      	ldrb	r3, [r1, #13]
   23940:	4610      	mov	r0, r2
   23942:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23946:	734b      	strb	r3, [r1, #13]
   23948:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2394c:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2394e:	4283      	cmp	r3, r0
   23950:	bf08      	it	eq
   23952:	2300      	moveq	r3, #0
   23954:	2b00      	cmp	r3, #0
   23956:	bf38      	it	cc
   23958:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2395a:	b1cb      	cbz	r3, 23990 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   2395c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   23960:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   23964:	42a6      	cmp	r6, r4
   23966:	d00f      	beq.n	23988 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   23968:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2396a:	2c00      	cmp	r4, #0
   2396c:	dd0c      	ble.n	23988 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2396e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   23970:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   23974:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   23976:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   23978:	6890      	ldr	r0, [r2, #8]
}
   2397a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2397e:	1a43      	subs	r3, r0, r1
   23980:	4258      	negs	r0, r3
   23982:	4158      	adcs	r0, r3
   23984:	f7ff bfae 	b.w	238e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23988:	42ab      	cmp	r3, r5
   2398a:	d001      	beq.n	23990 <move_thread_to_end_of_prio_q+0x6c>
   2398c:	681b      	ldr	r3, [r3, #0]
   2398e:	e7e4      	b.n	2395a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   23990:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   23994:	6029      	str	r1, [r5, #0]
	list->tail = node;
   23996:	6251      	str	r1, [r2, #36]	; 0x24
}
   23998:	e7ee      	b.n	23978 <move_thread_to_end_of_prio_q+0x54>
   2399a:	bf00      	nop
   2399c:	2000ef70 	.word	0x2000ef70

000239a0 <z_time_slice>:
{
   239a0:	4601      	mov	r1, r0
   239a2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   239a4:	f04f 0320 	mov.w	r3, #32
   239a8:	f3ef 8411 	mrs	r4, BASEPRI
   239ac:	f383 8812 	msr	BASEPRI_MAX, r3
   239b0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   239b4:	4b16      	ldr	r3, [pc, #88]	; (23a10 <z_time_slice+0x70>)
   239b6:	4a17      	ldr	r2, [pc, #92]	; (23a14 <z_time_slice+0x74>)
   239b8:	6898      	ldr	r0, [r3, #8]
   239ba:	6815      	ldr	r5, [r2, #0]
   239bc:	42a8      	cmp	r0, r5
   239be:	461d      	mov	r5, r3
   239c0:	d106      	bne.n	239d0 <z_time_slice+0x30>
			z_reset_time_slice();
   239c2:	f7ff ff21 	bl	23808 <z_reset_time_slice>
	__asm__ volatile(
   239c6:	f384 8811 	msr	BASEPRI, r4
   239ca:	f3bf 8f6f 	isb	sy
}
   239ce:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   239d0:	2600      	movs	r6, #0
   239d2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   239d4:	4a10      	ldr	r2, [pc, #64]	; (23a18 <z_time_slice+0x78>)
   239d6:	6812      	ldr	r2, [r2, #0]
   239d8:	b1ba      	cbz	r2, 23a0a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   239da:	89c2      	ldrh	r2, [r0, #14]
   239dc:	2a7f      	cmp	r2, #127	; 0x7f
   239de:	d814      	bhi.n	23a0a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   239e0:	7b42      	ldrb	r2, [r0, #13]
   239e2:	06d2      	lsls	r2, r2, #27
   239e4:	d111      	bne.n	23a0a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   239e6:	4a0d      	ldr	r2, [pc, #52]	; (23a1c <z_time_slice+0x7c>)
   239e8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   239ec:	6812      	ldr	r2, [r2, #0]
   239ee:	4296      	cmp	r6, r2
   239f0:	db0b      	blt.n	23a0a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   239f2:	4a0b      	ldr	r2, [pc, #44]	; (23a20 <z_time_slice+0x80>)
   239f4:	4290      	cmp	r0, r2
   239f6:	d008      	beq.n	23a0a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   239f8:	691a      	ldr	r2, [r3, #16]
   239fa:	428a      	cmp	r2, r1
   239fc:	dc02      	bgt.n	23a04 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   239fe:	f7ff ff91 	bl	23924 <move_thread_to_end_of_prio_q>
   23a02:	e7de      	b.n	239c2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   23a04:	1a52      	subs	r2, r2, r1
   23a06:	611a      	str	r2, [r3, #16]
   23a08:	e7dd      	b.n	239c6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   23a0a:	2300      	movs	r3, #0
   23a0c:	612b      	str	r3, [r5, #16]
   23a0e:	e7da      	b.n	239c6 <z_time_slice+0x26>
   23a10:	2000ef70 	.word	0x2000ef70
   23a14:	2000efa4 	.word	0x2000efa4
   23a18:	2000efac 	.word	0x2000efac
   23a1c:	2000efa8 	.word	0x2000efa8
   23a20:	2000dad0 	.word	0x2000dad0

00023a24 <ready_thread>:
{
   23a24:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23a26:	f990 300d 	ldrsb.w	r3, [r0, #13]
   23a2a:	7b42      	ldrb	r2, [r0, #13]
   23a2c:	2b00      	cmp	r3, #0
   23a2e:	db2d      	blt.n	23a8c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23a30:	06d3      	lsls	r3, r2, #27
   23a32:	d12b      	bne.n	23a8c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   23a34:	6983      	ldr	r3, [r0, #24]
   23a36:	bb4b      	cbnz	r3, 23a8c <ready_thread+0x68>
	return list->head == list;
   23a38:	4915      	ldr	r1, [pc, #84]	; (23a90 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   23a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23a3e:	7342      	strb	r2, [r0, #13]
   23a40:	460a      	mov	r2, r1
   23a42:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23a46:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a48:	4294      	cmp	r4, r2
   23a4a:	bf18      	it	ne
   23a4c:	4623      	movne	r3, r4
   23a4e:	2b00      	cmp	r3, #0
   23a50:	bf38      	it	cc
   23a52:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a54:	b1ab      	cbz	r3, 23a82 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   23a56:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   23a5a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   23a5e:	42a6      	cmp	r6, r4
   23a60:	d00b      	beq.n	23a7a <ready_thread+0x56>
		return b2 - b1;
   23a62:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23a64:	2c00      	cmp	r4, #0
   23a66:	dd08      	ble.n	23a7a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   23a68:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23a6a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   23a6e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   23a70:	6058      	str	r0, [r3, #4]
		update_cache(0);
   23a72:	2000      	movs	r0, #0
}
   23a74:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   23a76:	f7ff bf35 	b.w	238e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23a7a:	42ab      	cmp	r3, r5
   23a7c:	d001      	beq.n	23a82 <ready_thread+0x5e>
   23a7e:	681b      	ldr	r3, [r3, #0]
   23a80:	e7e8      	b.n	23a54 <ready_thread+0x30>
	node->prev = tail;
   23a82:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   23a86:	6028      	str	r0, [r5, #0]
	list->tail = node;
   23a88:	6248      	str	r0, [r1, #36]	; 0x24
}
   23a8a:	e7f2      	b.n	23a72 <ready_thread+0x4e>
}
   23a8c:	bc70      	pop	{r4, r5, r6}
   23a8e:	4770      	bx	lr
   23a90:	2000ef70 	.word	0x2000ef70

00023a94 <z_sched_start>:
{
   23a94:	b510      	push	{r4, lr}
	__asm__ volatile(
   23a96:	f04f 0220 	mov.w	r2, #32
   23a9a:	f3ef 8411 	mrs	r4, BASEPRI
   23a9e:	f382 8812 	msr	BASEPRI_MAX, r2
   23aa2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   23aa6:	7b42      	ldrb	r2, [r0, #13]
   23aa8:	0751      	lsls	r1, r2, #29
   23aaa:	d404      	bmi.n	23ab6 <z_sched_start+0x22>
	__asm__ volatile(
   23aac:	f384 8811 	msr	BASEPRI, r4
   23ab0:	f3bf 8f6f 	isb	sy
}
   23ab4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23ab6:	f022 0204 	bic.w	r2, r2, #4
   23aba:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   23abc:	f7ff ffb2 	bl	23a24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23ac0:	4621      	mov	r1, r4
}
   23ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   23ac6:	4801      	ldr	r0, [pc, #4]	; (23acc <z_sched_start+0x38>)
   23ac8:	f7ff bee6 	b.w	23898 <z_reschedule>
   23acc:	2000f392 	.word	0x2000f392

00023ad0 <z_impl_k_thread_resume>:
{
   23ad0:	b510      	push	{r4, lr}
	__asm__ volatile(
   23ad2:	f04f 0220 	mov.w	r2, #32
   23ad6:	f3ef 8411 	mrs	r4, BASEPRI
   23ada:	f382 8812 	msr	BASEPRI_MAX, r2
   23ade:	f3bf 8f6f 	isb	sy
	if (!z_is_thread_suspended(thread)) {
   23ae2:	7b42      	ldrb	r2, [r0, #13]
   23ae4:	06d1      	lsls	r1, r2, #27
   23ae6:	d404      	bmi.n	23af2 <z_impl_k_thread_resume+0x22>
	__asm__ volatile(
   23ae8:	f384 8811 	msr	BASEPRI, r4
   23aec:	f3bf 8f6f 	isb	sy
}
   23af0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23af2:	f022 0210 	bic.w	r2, r2, #16
   23af6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   23af8:	f7ff ff94 	bl	23a24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23afc:	4621      	mov	r1, r4
}
   23afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   23b02:	4801      	ldr	r0, [pc, #4]	; (23b08 <z_impl_k_thread_resume+0x38>)
   23b04:	f7ff bec8 	b.w	23898 <z_reschedule>
   23b08:	2000f392 	.word	0x2000f392

00023b0c <unready_thread>:
{
   23b0c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   23b0e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   23b12:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23b14:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   23b16:	7b43      	ldrb	r3, [r0, #13]
   23b18:	da04      	bge.n	23b24 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23b1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23b20:	f006 fe90 	bl	2a844 <sys_dlist_remove>
	update_cache(thread == _current);
   23b24:	4b04      	ldr	r3, [pc, #16]	; (23b38 <unready_thread+0x2c>)
   23b26:	6898      	ldr	r0, [r3, #8]
   23b28:	1a43      	subs	r3, r0, r1
   23b2a:	4258      	negs	r0, r3
   23b2c:	4158      	adcs	r0, r3
}
   23b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   23b32:	f7ff bed7 	b.w	238e4 <update_cache>
   23b36:	bf00      	nop
   23b38:	2000ef70 	.word	0x2000ef70

00023b3c <pend>:
{
   23b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b40:	4606      	mov	r6, r0
   23b42:	4614      	mov	r4, r2
   23b44:	461d      	mov	r5, r3
	__asm__ volatile(
   23b46:	f04f 0320 	mov.w	r3, #32
   23b4a:	f3ef 8711 	mrs	r7, BASEPRI
   23b4e:	f383 8812 	msr	BASEPRI_MAX, r3
   23b52:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   23b56:	f006 fef6 	bl	2a946 <add_to_waitq_locked>
	__asm__ volatile(
   23b5a:	f387 8811 	msr	BASEPRI, r7
   23b5e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23b62:	1c6b      	adds	r3, r5, #1
   23b64:	bf08      	it	eq
   23b66:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   23b6a:	d008      	beq.n	23b7e <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23b6c:	4622      	mov	r2, r4
   23b6e:	462b      	mov	r3, r5
   23b70:	f106 0018 	add.w	r0, r6, #24
   23b74:	4903      	ldr	r1, [pc, #12]	; (23b84 <pend+0x48>)
}
   23b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23b7a:	f000 ba4b 	b.w	24014 <z_add_timeout>
   23b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b82:	bf00      	nop
   23b84:	0002a903 	.word	0x0002a903

00023b88 <z_pend_curr>:
{
   23b88:	b510      	push	{r4, lr}
   23b8a:	460c      	mov	r4, r1
	pending_current = _current;
   23b8c:	4b06      	ldr	r3, [pc, #24]	; (23ba8 <z_pend_curr+0x20>)
{
   23b8e:	4611      	mov	r1, r2
	pending_current = _current;
   23b90:	6898      	ldr	r0, [r3, #8]
   23b92:	4b06      	ldr	r3, [pc, #24]	; (23bac <z_pend_curr+0x24>)
   23b94:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   23b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23b9a:	f7ff ffcf 	bl	23b3c <pend>
   23b9e:	4620      	mov	r0, r4
}
   23ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ba4:	f7f1 bff0 	b.w	15b88 <arch_swap>
   23ba8:	2000ef70 	.word	0x2000ef70
   23bac:	2000efa4 	.word	0x2000efa4

00023bb0 <z_set_prio>:
{
   23bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23bb2:	4604      	mov	r4, r0
	__asm__ volatile(
   23bb4:	f04f 0320 	mov.w	r3, #32
   23bb8:	f3ef 8611 	mrs	r6, BASEPRI
   23bbc:	f383 8812 	msr	BASEPRI_MAX, r3
   23bc0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23bc4:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   23bc6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23bc8:	06da      	lsls	r2, r3, #27
   23bca:	d138      	bne.n	23c3e <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   23bcc:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   23bce:	2d00      	cmp	r5, #0
   23bd0:	d135      	bne.n	23c3e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23bd6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23bd8:	f006 fe34 	bl	2a844 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23bdc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   23bde:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23be0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23be4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   23be6:	4817      	ldr	r0, [pc, #92]	; (23c44 <z_set_prio+0x94>)
   23be8:	4603      	mov	r3, r0
   23bea:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23bee:	429f      	cmp	r7, r3
   23bf0:	bf18      	it	ne
   23bf2:	463d      	movne	r5, r7
   23bf4:	2d00      	cmp	r5, #0
   23bf6:	461a      	mov	r2, r3
   23bf8:	462b      	mov	r3, r5
   23bfa:	bf38      	it	cc
   23bfc:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23bfe:	6a47      	ldr	r7, [r0, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23c00:	b1c3      	cbz	r3, 23c34 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   23c02:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   23c06:	42a9      	cmp	r1, r5
   23c08:	d010      	beq.n	23c2c <z_set_prio+0x7c>
		return b2 - b1;
   23c0a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23c0c:	2d00      	cmp	r5, #0
   23c0e:	dd0d      	ble.n	23c2c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   23c10:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23c12:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23c16:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23c18:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23c1a:	2001      	movs	r0, #1
   23c1c:	f7ff fe62 	bl	238e4 <update_cache>
   23c20:	2001      	movs	r0, #1
	__asm__ volatile(
   23c22:	f386 8811 	msr	BASEPRI, r6
   23c26:	f3bf 8f6f 	isb	sy
}
   23c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23c2c:	42bb      	cmp	r3, r7
   23c2e:	d001      	beq.n	23c34 <z_set_prio+0x84>
   23c30:	681b      	ldr	r3, [r3, #0]
   23c32:	e7e5      	b.n	23c00 <z_set_prio+0x50>
	node->prev = tail;
   23c34:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   23c38:	603c      	str	r4, [r7, #0]
	list->tail = node;
   23c3a:	6244      	str	r4, [r0, #36]	; 0x24
}
   23c3c:	e7ed      	b.n	23c1a <z_set_prio+0x6a>
			thread->base.prio = prio;
   23c3e:	2000      	movs	r0, #0
   23c40:	73a1      	strb	r1, [r4, #14]
   23c42:	e7ee      	b.n	23c22 <z_set_prio+0x72>
   23c44:	2000ef70 	.word	0x2000ef70

00023c48 <z_impl_k_thread_suspend>:
{
   23c48:	b570      	push	{r4, r5, r6, lr}
   23c4a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23c4c:	3018      	adds	r0, #24
   23c4e:	f006 feec 	bl	2aa2a <z_abort_timeout>
	__asm__ volatile(
   23c52:	f04f 0320 	mov.w	r3, #32
   23c56:	f3ef 8611 	mrs	r6, BASEPRI
   23c5a:	f383 8812 	msr	BASEPRI_MAX, r3
   23c5e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   23c62:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   23c66:	7b63      	ldrb	r3, [r4, #13]
   23c68:	2a00      	cmp	r2, #0
   23c6a:	da05      	bge.n	23c78 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   23c70:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c72:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23c74:	f006 fde6 	bl	2a844 <sys_dlist_remove>
		update_cache(thread == _current);
   23c78:	4d0b      	ldr	r5, [pc, #44]	; (23ca8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23c7a:	7b63      	ldrb	r3, [r4, #13]
   23c7c:	68a8      	ldr	r0, [r5, #8]
   23c7e:	f043 0310 	orr.w	r3, r3, #16
   23c82:	7363      	strb	r3, [r4, #13]
   23c84:	1b03      	subs	r3, r0, r4
   23c86:	4258      	negs	r0, r3
   23c88:	4158      	adcs	r0, r3
   23c8a:	f7ff fe2b 	bl	238e4 <update_cache>
	__asm__ volatile(
   23c8e:	f386 8811 	msr	BASEPRI, r6
   23c92:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23c96:	68ab      	ldr	r3, [r5, #8]
   23c98:	42a3      	cmp	r3, r4
   23c9a:	d103      	bne.n	23ca4 <z_impl_k_thread_suspend+0x5c>
}
   23c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23ca0:	f006 be0b 	b.w	2a8ba <z_reschedule_unlocked>
}
   23ca4:	bd70      	pop	{r4, r5, r6, pc}
   23ca6:	bf00      	nop
   23ca8:	2000ef70 	.word	0x2000ef70

00023cac <k_sched_unlock>:
{
   23cac:	b510      	push	{r4, lr}
	__asm__ volatile(
   23cae:	f04f 0320 	mov.w	r3, #32
   23cb2:	f3ef 8411 	mrs	r4, BASEPRI
   23cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   23cba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   23cbe:	4b08      	ldr	r3, [pc, #32]	; (23ce0 <k_sched_unlock+0x34>)
		update_cache(0);
   23cc0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23cc2:	689a      	ldr	r2, [r3, #8]
   23cc4:	7bd3      	ldrb	r3, [r2, #15]
   23cc6:	3301      	adds	r3, #1
   23cc8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23cca:	f7ff fe0b 	bl	238e4 <update_cache>
	__asm__ volatile(
   23cce:	f384 8811 	msr	BASEPRI, r4
   23cd2:	f3bf 8f6f 	isb	sy
}
   23cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   23cda:	f006 bdee 	b.w	2a8ba <z_reschedule_unlocked>
   23cde:	bf00      	nop
   23ce0:	2000ef70 	.word	0x2000ef70

00023ce4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23ce4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   23ce6:	4b04      	ldr	r3, [pc, #16]	; (23cf8 <z_sched_init+0x14>)
   23ce8:	4608      	mov	r0, r1
   23cea:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   23cee:	e9c3 2208 	strd	r2, r2, [r3, #32]
   23cf2:	f7ff bd9f 	b.w	23834 <k_sched_time_slice_set>
   23cf6:	bf00      	nop
   23cf8:	2000ef70 	.word	0x2000ef70

00023cfc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   23cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23cfe:	f04f 0320 	mov.w	r3, #32
   23d02:	f3ef 8411 	mrs	r4, BASEPRI
   23d06:	f383 8812 	msr	BASEPRI_MAX, r3
   23d0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   23d0e:	491b      	ldr	r1, [pc, #108]	; (23d7c <z_impl_k_yield+0x80>)
   23d10:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23d12:	7b43      	ldrb	r3, [r0, #13]
   23d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23d1a:	f006 fd93 	bl	2a844 <sys_dlist_remove>
	return list->head == list;
   23d1e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   23d20:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23d22:	7b53      	ldrb	r3, [r2, #13]
   23d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23d28:	7353      	strb	r3, [r2, #13]
   23d2a:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23d2e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d30:	4283      	cmp	r3, r0
   23d32:	bf08      	it	eq
   23d34:	2300      	moveq	r3, #0
   23d36:	2b00      	cmp	r3, #0
   23d38:	bf38      	it	cc
   23d3a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d3c:	b1cb      	cbz	r3, 23d72 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   23d3e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   23d42:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   23d46:	42af      	cmp	r7, r5
   23d48:	d00f      	beq.n	23d6a <z_impl_k_yield+0x6e>
		return b2 - b1;
   23d4a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   23d4c:	2d00      	cmp	r5, #0
   23d4e:	dd0c      	ble.n	23d6a <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   23d50:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23d52:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   23d56:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   23d58:	605a      	str	r2, [r3, #4]
	update_cache(1);
   23d5a:	2001      	movs	r0, #1
   23d5c:	f7ff fdc2 	bl	238e4 <update_cache>
   23d60:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   23d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23d66:	f7f1 bf0f 	b.w	15b88 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23d6a:	42b3      	cmp	r3, r6
   23d6c:	d001      	beq.n	23d72 <z_impl_k_yield+0x76>
   23d6e:	681b      	ldr	r3, [r3, #0]
   23d70:	e7e4      	b.n	23d3c <z_impl_k_yield+0x40>
	node->prev = tail;
   23d72:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   23d76:	6032      	str	r2, [r6, #0]
	list->tail = node;
   23d78:	624a      	str	r2, [r1, #36]	; 0x24
}
   23d7a:	e7ee      	b.n	23d5a <z_impl_k_yield+0x5e>
   23d7c:	2000ef70 	.word	0x2000ef70

00023d80 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d84:	4604      	mov	r4, r0
   23d86:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23d88:	ea54 0105 	orrs.w	r1, r4, r5
   23d8c:	d104      	bne.n	23d98 <z_tick_sleep+0x18>
	z_impl_k_yield();
   23d8e:	f7ff ffb5 	bl	23cfc <z_impl_k_yield>
		k_yield();
		return 0;
   23d92:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   23d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   23d98:	f06f 0101 	mvn.w	r1, #1
   23d9c:	1a0a      	subs	r2, r1, r0
   23d9e:	f04f 31ff 	mov.w	r1, #4294967295
   23da2:	eb61 0305 	sbc.w	r3, r1, r5
   23da6:	2a01      	cmp	r2, #1
   23da8:	f173 0300 	sbcs.w	r3, r3, #0
   23dac:	da2a      	bge.n	23e04 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23dae:	f006 fe7d 	bl	2aaac <sys_clock_tick_get_32>
   23db2:	1906      	adds	r6, r0, r4
   23db4:	f04f 0320 	mov.w	r3, #32
   23db8:	f3ef 8811 	mrs	r8, BASEPRI
   23dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   23dc0:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   23dc4:	4f11      	ldr	r7, [pc, #68]	; (23e0c <z_tick_sleep+0x8c>)
   23dc6:	4b12      	ldr	r3, [pc, #72]	; (23e10 <z_tick_sleep+0x90>)
   23dc8:	68b8      	ldr	r0, [r7, #8]
   23dca:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23dcc:	f7ff fe9e 	bl	23b0c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23dd0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23dd2:	4910      	ldr	r1, [pc, #64]	; (23e14 <z_tick_sleep+0x94>)
   23dd4:	4622      	mov	r2, r4
   23dd6:	462b      	mov	r3, r5
   23dd8:	3018      	adds	r0, #24
   23dda:	f000 f91b 	bl	24014 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23dde:	68ba      	ldr	r2, [r7, #8]
   23de0:	4640      	mov	r0, r8
   23de2:	7b53      	ldrb	r3, [r2, #13]
   23de4:	f043 0310 	orr.w	r3, r3, #16
   23de8:	7353      	strb	r3, [r2, #13]
   23dea:	f7f1 fecd 	bl	15b88 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23dee:	f006 fe5d 	bl	2aaac <sys_clock_tick_get_32>
   23df2:	1a30      	subs	r0, r6, r0
   23df4:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   23df8:	2801      	cmp	r0, #1
   23dfa:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   23dfe:	bfb8      	it	lt
   23e00:	2000      	movlt	r0, #0
   23e02:	e7c7      	b.n	23d94 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   23e04:	f06f 0601 	mvn.w	r6, #1
   23e08:	1a36      	subs	r6, r6, r0
   23e0a:	e7d3      	b.n	23db4 <z_tick_sleep+0x34>
   23e0c:	2000ef70 	.word	0x2000ef70
   23e10:	2000efa4 	.word	0x2000efa4
   23e14:	0002a903 	.word	0x0002a903

00023e18 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23e18:	b508      	push	{r3, lr}
   23e1a:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23e1c:	3301      	adds	r3, #1
   23e1e:	bf08      	it	eq
   23e20:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   23e24:	d106      	bne.n	23e34 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   23e26:	4b08      	ldr	r3, [pc, #32]	; (23e48 <z_impl_k_sleep+0x30>)
   23e28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23e2a:	f7ff ff0d 	bl	23c48 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23e2e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23e32:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   23e34:	f7ff ffa4 	bl	23d80 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   23e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23e3c:	fb80 0103 	smull	r0, r1, r0, r3
   23e40:	0bc3      	lsrs	r3, r0, #15
   23e42:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return ret;
   23e46:	e7f4      	b.n	23e32 <z_impl_k_sleep+0x1a>
   23e48:	2000ef70 	.word	0x2000ef70

00023e4c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23e4c:	4b01      	ldr	r3, [pc, #4]	; (23e54 <z_impl_z_current_get+0x8>)
   23e4e:	6898      	ldr	r0, [r3, #8]
   23e50:	4770      	bx	lr
   23e52:	bf00      	nop
   23e54:	2000ef70 	.word	0x2000ef70

00023e58 <z_impl_k_is_preempt_thread>:
   23e58:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   23e5c:	b93b      	cbnz	r3, 23e6e <z_impl_k_is_preempt_thread+0x16>
   23e5e:	4b05      	ldr	r3, [pc, #20]	; (23e74 <z_impl_k_is_preempt_thread+0x1c>)
   23e60:	689b      	ldr	r3, [r3, #8]
   23e62:	89d8      	ldrh	r0, [r3, #14]
   23e64:	287f      	cmp	r0, #127	; 0x7f
   23e66:	bf8c      	ite	hi
   23e68:	2000      	movhi	r0, #0
   23e6a:	2001      	movls	r0, #1
   23e6c:	4770      	bx	lr
   23e6e:	2000      	movs	r0, #0
}
   23e70:	4770      	bx	lr
   23e72:	bf00      	nop
   23e74:	2000ef70 	.word	0x2000ef70

00023e78 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   23e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e7c:	4604      	mov	r4, r0
   23e7e:	f04f 0320 	mov.w	r3, #32
   23e82:	f3ef 8611 	mrs	r6, BASEPRI
   23e86:	f383 8812 	msr	BASEPRI_MAX, r3
   23e8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23e8e:	7b43      	ldrb	r3, [r0, #13]
   23e90:	071a      	lsls	r2, r3, #28
   23e92:	d505      	bpl.n	23ea0 <z_thread_abort+0x28>
	__asm__ volatile(
   23e94:	f386 8811 	msr	BASEPRI, r6
   23e98:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23ea0:	f023 0220 	bic.w	r2, r3, #32
   23ea4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   23ea8:	09d2      	lsrs	r2, r2, #7
   23eaa:	d120      	bne.n	23eee <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23eac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   23eae:	68a3      	ldr	r3, [r4, #8]
   23eb0:	b113      	cbz	r3, 23eb8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   23eb2:	4620      	mov	r0, r4
   23eb4:	f006 fcce 	bl	2a854 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23eb8:	f104 0018 	add.w	r0, r4, #24
   23ebc:	f006 fdb5 	bl	2aa2a <z_abort_timeout>
   23ec0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23ec4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   23ec8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23eca:	42bd      	cmp	r5, r7
   23ecc:	d000      	beq.n	23ed0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23ece:	b9b5      	cbnz	r5, 23efe <z_thread_abort+0x86>
		update_cache(1);
   23ed0:	2001      	movs	r0, #1
   23ed2:	f7ff fd07 	bl	238e4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   23ed6:	4b10      	ldr	r3, [pc, #64]	; (23f18 <z_thread_abort+0xa0>)
   23ed8:	689b      	ldr	r3, [r3, #8]
   23eda:	42a3      	cmp	r3, r4
   23edc:	d1da      	bne.n	23e94 <z_thread_abort+0x1c>
   23ede:	f3ef 8305 	mrs	r3, IPSR
   23ee2:	2b00      	cmp	r3, #0
   23ee4:	d1d6      	bne.n	23e94 <z_thread_abort+0x1c>
   23ee6:	4630      	mov	r0, r6
   23ee8:	f7f1 fe4e 	bl	15b88 <arch_swap>
	return ret;
   23eec:	e7d2      	b.n	23e94 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23eee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   23ef2:	f043 0308 	orr.w	r3, r3, #8
   23ef6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23ef8:	f006 fca4 	bl	2a844 <sys_dlist_remove>
}
   23efc:	e7d7      	b.n	23eae <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   23efe:	4628      	mov	r0, r5
   23f00:	f006 fca8 	bl	2a854 <unpend_thread_no_timeout>
   23f04:	f105 0018 	add.w	r0, r5, #24
   23f08:	f006 fd8f 	bl	2aa2a <z_abort_timeout>
		ready_thread(thread);
   23f0c:	4628      	mov	r0, r5
   23f0e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   23f12:	f7ff fd87 	bl	23a24 <ready_thread>
   23f16:	e7d7      	b.n	23ec8 <z_thread_abort+0x50>
   23f18:	2000ef70 	.word	0x2000ef70

00023f1c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23f1c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23f1e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   23f22:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23f24:	e9cd 6700 	strd	r6, r7, [sp]
   23f28:	f7ff fe2e 	bl	23b88 <z_pend_curr>

	if (data != NULL) {
   23f2c:	b11c      	cbz	r4, 23f36 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   23f2e:	4b03      	ldr	r3, [pc, #12]	; (23f3c <z_sched_wait+0x20>)
   23f30:	689b      	ldr	r3, [r3, #8]
   23f32:	695b      	ldr	r3, [r3, #20]
   23f34:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23f36:	b002      	add	sp, #8
   23f38:	bdd0      	pop	{r4, r6, r7, pc}
   23f3a:	bf00      	nop
   23f3c:	2000ef70 	.word	0x2000ef70

00023f40 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   23f40:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f42:	4806      	ldr	r0, [pc, #24]	; (23f5c <z_data_copy+0x1c>)
   23f44:	4a06      	ldr	r2, [pc, #24]	; (23f60 <z_data_copy+0x20>)
   23f46:	4907      	ldr	r1, [pc, #28]	; (23f64 <z_data_copy+0x24>)
   23f48:	1a12      	subs	r2, r2, r0
   23f4a:	f006 ff7d 	bl	2ae48 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23f52:	4a05      	ldr	r2, [pc, #20]	; (23f68 <z_data_copy+0x28>)
   23f54:	4905      	ldr	r1, [pc, #20]	; (23f6c <z_data_copy+0x2c>)
   23f56:	4806      	ldr	r0, [pc, #24]	; (23f70 <z_data_copy+0x30>)
   23f58:	f006 bf76 	b.w	2ae48 <memcpy>
   23f5c:	2000c500 	.word	0x2000c500
   23f60:	2000cb18 	.word	0x2000cb18
   23f64:	00030490 	.word	0x00030490
   23f68:	00000000 	.word	0x00000000
   23f6c:	00030478 	.word	0x00030478
   23f70:	2000c500 	.word	0x2000c500

00023f74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   23f74:	4b03      	ldr	r3, [pc, #12]	; (23f84 <elapsed+0x10>)
   23f76:	681b      	ldr	r3, [r3, #0]
   23f78:	b90b      	cbnz	r3, 23f7e <elapsed+0xa>
   23f7a:	f7f3 bd4d 	b.w	17a18 <sys_clock_elapsed>
}
   23f7e:	2000      	movs	r0, #0
   23f80:	4770      	bx	lr
   23f82:	bf00      	nop
   23f84:	2000efb0 	.word	0x2000efb0

00023f88 <remove_timeout>:
{
   23f88:	b530      	push	{r4, r5, lr}
   23f8a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23f8c:	b168      	cbz	r0, 23faa <remove_timeout+0x22>
   23f8e:	4a0a      	ldr	r2, [pc, #40]	; (23fb8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   23f90:	6852      	ldr	r2, [r2, #4]
   23f92:	4290      	cmp	r0, r2
   23f94:	d009      	beq.n	23faa <remove_timeout+0x22>
	if (next(t) != NULL) {
   23f96:	b143      	cbz	r3, 23faa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23f98:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23f9c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23fa0:	1912      	adds	r2, r2, r4
   23fa2:	eb45 0101 	adc.w	r1, r5, r1
   23fa6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   23faa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   23fac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23fae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23fb0:	2300      	movs	r3, #0
	node->prev = NULL;
   23fb2:	e9c0 3300 	strd	r3, r3, [r0]
}
   23fb6:	bd30      	pop	{r4, r5, pc}
   23fb8:	2000c684 	.word	0x2000c684

00023fbc <next_timeout>:
	return list->head == list;
   23fbc:	4b13      	ldr	r3, [pc, #76]	; (2400c <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   23fbe:	b510      	push	{r4, lr}
   23fc0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fc2:	429c      	cmp	r4, r3
   23fc4:	bf08      	it	eq
   23fc6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23fc8:	f7ff ffd4 	bl	23f74 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   23fcc:	b1cc      	cbz	r4, 24002 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23fce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   23fd2:	1a12      	subs	r2, r2, r0
   23fd4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   23fd8:	2a01      	cmp	r2, #1
   23fda:	f173 0100 	sbcs.w	r1, r3, #0
   23fde:	db13      	blt.n	24008 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23fe0:	4610      	mov	r0, r2
   23fe2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23fe6:	4619      	mov	r1, r3
   23fe8:	2300      	movs	r3, #0
   23fea:	4282      	cmp	r2, r0
   23fec:	eb73 0401 	sbcs.w	r4, r3, r1
   23ff0:	da00      	bge.n	23ff4 <next_timeout+0x38>
   23ff2:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23ff4:	4b06      	ldr	r3, [pc, #24]	; (24010 <next_timeout+0x54>)
   23ff6:	691b      	ldr	r3, [r3, #16]
   23ff8:	b113      	cbz	r3, 24000 <next_timeout+0x44>
   23ffa:	4298      	cmp	r0, r3
   23ffc:	bfa8      	it	ge
   23ffe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24000:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24002:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24006:	e7f5      	b.n	23ff4 <next_timeout+0x38>
   24008:	2000      	movs	r0, #0
   2400a:	e7f3      	b.n	23ff4 <next_timeout+0x38>
   2400c:	2000c684 	.word	0x2000c684
   24010:	2000ef70 	.word	0x2000ef70

00024014 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24014:	f1b3 3fff 	cmp.w	r3, #4294967295
   24018:	bf08      	it	eq
   2401a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2401e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24022:	4604      	mov	r4, r0
   24024:	4692      	mov	sl, r2
   24026:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24028:	d073      	beq.n	24112 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2402a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2402c:	f04f 0320 	mov.w	r3, #32
   24030:	f3ef 8511 	mrs	r5, BASEPRI
   24034:	f383 8812 	msr	BASEPRI_MAX, r3
   24038:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2403c:	f06f 0301 	mvn.w	r3, #1
   24040:	f04f 32ff 	mov.w	r2, #4294967295
   24044:	ebb3 080a 	subs.w	r8, r3, sl
   24048:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2404c:	f1b8 0f00 	cmp.w	r8, #0
   24050:	f179 0100 	sbcs.w	r1, r9, #0
   24054:	db1c      	blt.n	24090 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24056:	4830      	ldr	r0, [pc, #192]	; (24118 <z_add_timeout+0x104>)
   24058:	e9d0 1000 	ldrd	r1, r0, [r0]
   2405c:	1a5b      	subs	r3, r3, r1
   2405e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   24062:	ebb3 060a 	subs.w	r6, r3, sl
   24066:	eb62 070b 	sbc.w	r7, r2, fp
   2406a:	2e01      	cmp	r6, #1
   2406c:	f177 0300 	sbcs.w	r3, r7, #0
   24070:	bfbc      	itt	lt
   24072:	2601      	movlt	r6, #1
   24074:	2700      	movlt	r7, #0
   24076:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   2407a:	4a28      	ldr	r2, [pc, #160]	; (2411c <z_add_timeout+0x108>)
   2407c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24080:	4293      	cmp	r3, r2
   24082:	d11e      	bne.n	240c2 <z_add_timeout+0xae>
	node->prev = tail;
   24084:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   24088:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2408c:	6054      	str	r4, [r2, #4]
}
   2408e:	e02d      	b.n	240ec <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   24090:	f7ff ff70 	bl	23f74 <elapsed>
   24094:	f11a 0301 	adds.w	r3, sl, #1
   24098:	9300      	str	r3, [sp, #0]
   2409a:	f14b 0300 	adc.w	r3, fp, #0
   2409e:	9301      	str	r3, [sp, #4]
   240a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   240a4:	1812      	adds	r2, r2, r0
   240a6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   240aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
   240ae:	e7e4      	b.n	2407a <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   240b0:	ebb6 0008 	subs.w	r0, r6, r8
   240b4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   240b8:	4563      	cmp	r3, ip
   240ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
   240be:	d0e1      	beq.n	24084 <z_add_timeout+0x70>
   240c0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   240c2:	2b00      	cmp	r3, #0
   240c4:	d0de      	beq.n	24084 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   240c6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   240ca:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   240ce:	4546      	cmp	r6, r8
   240d0:	eb77 0109 	sbcs.w	r1, r7, r9
   240d4:	daec      	bge.n	240b0 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   240d6:	ebb8 0006 	subs.w	r0, r8, r6
   240da:	eb69 0107 	sbc.w	r1, r9, r7
   240de:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   240e2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   240e4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   240e8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   240ea:	605c      	str	r4, [r3, #4]
	return list->head == list;
   240ec:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240ee:	4293      	cmp	r3, r2
   240f0:	d00b      	beq.n	2410a <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   240f2:	429c      	cmp	r4, r3
   240f4:	d109      	bne.n	2410a <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   240f6:	f7ff ff61 	bl	23fbc <next_timeout>

			if (next_time == 0 ||
   240fa:	b118      	cbz	r0, 24104 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   240fc:	4b08      	ldr	r3, [pc, #32]	; (24120 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   240fe:	691b      	ldr	r3, [r3, #16]
   24100:	4283      	cmp	r3, r0
   24102:	d002      	beq.n	2410a <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   24104:	2100      	movs	r1, #0
   24106:	f7f3 fc57 	bl	179b8 <sys_clock_set_timeout>
	__asm__ volatile(
   2410a:	f385 8811 	msr	BASEPRI, r5
   2410e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24112:	b003      	add	sp, #12
   24114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24118:	2000dc60 	.word	0x2000dc60
   2411c:	2000c684 	.word	0x2000c684
   24120:	2000ef70 	.word	0x2000ef70

00024124 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24128:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2412a:	f7ff fc39 	bl	239a0 <z_time_slice>
	__asm__ volatile(
   2412e:	f04f 0320 	mov.w	r3, #32
   24132:	f3ef 8411 	mrs	r4, BASEPRI
   24136:	f383 8812 	msr	BASEPRI_MAX, r3
   2413a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2413e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 241f0 <sys_clock_announce+0xcc>
   24142:	4d2a      	ldr	r5, [pc, #168]	; (241ec <sys_clock_announce+0xc8>)
   24144:	4651      	mov	r1, sl
	return list->head == list;
   24146:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 241f4 <sys_clock_announce+0xd0>
   2414a:	602e      	str	r6, [r5, #0]
   2414c:	f8d5 c000 	ldr.w	ip, [r5]
   24150:	f8db 0000 	ldr.w	r0, [fp]
   24154:	4662      	mov	r2, ip
   24156:	e9da 8900 	ldrd	r8, r9, [sl]
   2415a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2415c:	4558      	cmp	r0, fp
   2415e:	e9cd 2300 	strd	r2, r3, [sp]
   24162:	d00d      	beq.n	24180 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24164:	b160      	cbz	r0, 24180 <sys_clock_announce+0x5c>
   24166:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   2416a:	45b4      	cmp	ip, r6
   2416c:	41bb      	sbcs	r3, r7
   2416e:	da1d      	bge.n	241ac <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24170:	9b00      	ldr	r3, [sp, #0]
   24172:	ebb6 0c03 	subs.w	ip, r6, r3
   24176:	9b01      	ldr	r3, [sp, #4]
   24178:	eb67 0603 	sbc.w	r6, r7, r3
   2417c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   24180:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   24182:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   24184:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   24186:	eb13 0208 	adds.w	r2, r3, r8
   2418a:	9b01      	ldr	r3, [sp, #4]
   2418c:	eb43 0309 	adc.w	r3, r3, r9
   24190:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
   24194:	f7ff ff12 	bl	23fbc <next_timeout>
   24198:	4631      	mov	r1, r6
   2419a:	f7f3 fc0d 	bl	179b8 <sys_clock_set_timeout>
	__asm__ volatile(
   2419e:	f384 8811 	msr	BASEPRI, r4
   241a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   241a6:	b003      	add	sp, #12
   241a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   241ac:	2200      	movs	r2, #0
   241ae:	2300      	movs	r3, #0
		curr_tick += dt;
   241b0:	eb18 0806 	adds.w	r8, r8, r6
   241b4:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   241b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   241bc:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   241c0:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   241c4:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   241c6:	f7ff fedf 	bl	23f88 <remove_timeout>
   241ca:	f384 8811 	msr	BASEPRI, r4
   241ce:	f3bf 8f6f 	isb	sy
		t->fn(t);
   241d2:	6883      	ldr	r3, [r0, #8]
   241d4:	4798      	blx	r3
	__asm__ volatile(
   241d6:	f04f 0320 	mov.w	r3, #32
   241da:	f3ef 8411 	mrs	r4, BASEPRI
   241de:	f383 8812 	msr	BASEPRI_MAX, r3
   241e2:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   241e6:	4902      	ldr	r1, [pc, #8]	; (241f0 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   241e8:	e7b0      	b.n	2414c <sys_clock_announce+0x28>
   241ea:	bf00      	nop
   241ec:	2000efb0 	.word	0x2000efb0
   241f0:	2000dc60 	.word	0x2000dc60
   241f4:	2000c684 	.word	0x2000c684

000241f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   241f8:	b510      	push	{r4, lr}
   241fa:	f04f 0320 	mov.w	r3, #32
   241fe:	f3ef 8411 	mrs	r4, BASEPRI
   24202:	f383 8812 	msr	BASEPRI_MAX, r3
   24206:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2420a:	f7f3 fc05 	bl	17a18 <sys_clock_elapsed>
   2420e:	4b06      	ldr	r3, [pc, #24]	; (24228 <sys_clock_tick_get+0x30>)
   24210:	e9d3 2300 	ldrd	r2, r3, [r3]
   24214:	1812      	adds	r2, r2, r0
   24216:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   2421a:	f384 8811 	msr	BASEPRI, r4
   2421e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24222:	4610      	mov	r0, r2
   24224:	4619      	mov	r1, r3
   24226:	bd10      	pop	{r4, pc}
   24228:	2000dc60 	.word	0x2000dc60

0002422c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2422c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24230:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24232:	4b29      	ldr	r3, [pc, #164]	; (242d8 <z_impl_k_poll+0xac>)
{
   24234:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   24236:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   24238:	2301      	movs	r3, #1
   2423a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   2423e:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24242:	ea52 0307 	orrs.w	r3, r2, r7
   24246:	bf0c      	ite	eq
   24248:	2301      	moveq	r3, #1
   2424a:	2300      	movne	r3, #0
   2424c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   24250:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   24252:	f006 fcc0 	bl	2abd6 <register_events>
   24256:	4681      	mov	r9, r0
	__asm__ volatile(
   24258:	f04f 0320 	mov.w	r3, #32
   2425c:	f3ef 8a11 	mrs	sl, BASEPRI
   24260:	f383 8812 	msr	BASEPRI_MAX, r3
   24264:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24268:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   2426c:	b964      	cbnz	r4, 24288 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2426e:	4601      	mov	r1, r0
   24270:	4652      	mov	r2, sl
   24272:	4640      	mov	r0, r8
   24274:	f006 fc4d 	bl	2ab12 <clear_event_registrations>
	__asm__ volatile(
   24278:	f38a 8811 	msr	BASEPRI, sl
   2427c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24280:	4620      	mov	r0, r4
   24282:	b002      	add	sp, #8
   24284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   24288:	2300      	movs	r3, #0
   2428a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2428e:	ea56 0307 	orrs.w	r3, r6, r7
   24292:	d106      	bne.n	242a2 <z_impl_k_poll+0x76>
   24294:	f38a 8811 	msr	BASEPRI, sl
   24298:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2429c:	f06f 040a 	mvn.w	r4, #10
   242a0:	e7ee      	b.n	24280 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   242a2:	4651      	mov	r1, sl
   242a4:	e9cd 6700 	strd	r6, r7, [sp]
   242a8:	4a0c      	ldr	r2, [pc, #48]	; (242dc <z_impl_k_poll+0xb0>)
   242aa:	480d      	ldr	r0, [pc, #52]	; (242e0 <z_impl_k_poll+0xb4>)
   242ac:	f7ff fc6c 	bl	23b88 <z_pend_curr>
   242b0:	4604      	mov	r4, r0
	__asm__ volatile(
   242b2:	f04f 0320 	mov.w	r3, #32
   242b6:	f3ef 8511 	mrs	r5, BASEPRI
   242ba:	f383 8812 	msr	BASEPRI_MAX, r3
   242be:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   242c2:	462a      	mov	r2, r5
   242c4:	4649      	mov	r1, r9
   242c6:	4640      	mov	r0, r8
   242c8:	f006 fc23 	bl	2ab12 <clear_event_registrations>
	__asm__ volatile(
   242cc:	f385 8811 	msr	BASEPRI, r5
   242d0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   242d4:	e7d4      	b.n	24280 <z_impl_k_poll+0x54>
   242d6:	bf00      	nop
   242d8:	2000ef70 	.word	0x2000ef70
   242dc:	2000c68c 	.word	0x2000c68c
   242e0:	2000f392 	.word	0x2000f392

000242e4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   242e4:	b538      	push	{r3, r4, r5, lr}
   242e6:	4603      	mov	r3, r0
	__asm__ volatile(
   242e8:	f04f 0220 	mov.w	r2, #32
   242ec:	f3ef 8511 	mrs	r5, BASEPRI
   242f0:	f382 8812 	msr	BASEPRI_MAX, r2
   242f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   242f8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   242fa:	2101      	movs	r1, #1
   242fc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   242fe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24300:	4283      	cmp	r3, r0
   24302:	d106      	bne.n	24312 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24304:	f385 8811 	msr	BASEPRI, r5
   24308:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2430c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2430e:	4620      	mov	r0, r4
   24310:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24312:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24316:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24318:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2431a:	2300      	movs	r3, #0
	node->prev = NULL;
   2431c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24320:	f006 fcd0 	bl	2acc4 <signal_poll_event>
	z_reschedule(&lock, key);
   24324:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24326:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24328:	4801      	ldr	r0, [pc, #4]	; (24330 <z_impl_k_poll_signal_raise+0x4c>)
   2432a:	f7ff fab5 	bl	23898 <z_reschedule>
	return rc;
   2432e:	e7ee      	b.n	2430e <z_impl_k_poll_signal_raise+0x2a>
   24330:	2000f392 	.word	0x2000f392

00024334 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   24334:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24336:	4601      	mov	r1, r0
   24338:	4801      	ldr	r0, [pc, #4]	; (24340 <k_aligned_alloc+0xc>)
   2433a:	f006 bd2f 	b.w	2ad9c <z_heap_aligned_alloc>
   2433e:	bf00      	nop
   24340:	2000c948 	.word	0x2000c948

00024344 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24344:	b513      	push	{r0, r1, r4, lr}
   24346:	4604      	mov	r4, r0
   24348:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2434a:	f006 f931 	bl	2a5b0 <k_is_in_isr>
   2434e:	9a01      	ldr	r2, [sp, #4]
   24350:	b950      	cbnz	r0, 24368 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24352:	4b07      	ldr	r3, [pc, #28]	; (24370 <z_thread_aligned_alloc+0x2c>)
   24354:	689b      	ldr	r3, [r3, #8]
   24356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24358:	b143      	cbz	r3, 2436c <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   2435a:	4621      	mov	r1, r4
   2435c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2435e:	b002      	add	sp, #8
   24360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24364:	f006 bd1a 	b.w	2ad9c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   24368:	4b02      	ldr	r3, [pc, #8]	; (24374 <z_thread_aligned_alloc+0x30>)
   2436a:	e7f6      	b.n	2435a <z_thread_aligned_alloc+0x16>
}
   2436c:	b002      	add	sp, #8
   2436e:	bd10      	pop	{r4, pc}
   24370:	2000ef70 	.word	0x2000ef70
   24374:	2000c948 	.word	0x2000c948

00024378 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   24378:	4a02      	ldr	r2, [pc, #8]	; (24384 <boot_banner+0xc>)
   2437a:	4903      	ldr	r1, [pc, #12]	; (24388 <boot_banner+0x10>)
   2437c:	4803      	ldr	r0, [pc, #12]	; (2438c <boot_banner+0x14>)
   2437e:	f001 bdca 	b.w	25f16 <printk>
   24382:	bf00      	nop
   24384:	0002fa74 	.word	0x0002fa74
   24388:	000302c4 	.word	0x000302c4
   2438c:	000302d3 	.word	0x000302d3

00024390 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24392:	2400      	movs	r4, #0
   24394:	4b08      	ldr	r3, [pc, #32]	; (243b8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24396:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   2439a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   2439c:	ab02      	add	r3, sp, #8
   2439e:	9300      	str	r3, [sp, #0]
   243a0:	4906      	ldr	r1, [pc, #24]	; (243bc <k_sys_work_q_init+0x2c>)
   243a2:	f04f 33ff 	mov.w	r3, #4294967295
   243a6:	4806      	ldr	r0, [pc, #24]	; (243c0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   243a8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   243ac:	f7ff f98e 	bl	236cc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   243b0:	4620      	mov	r0, r4
   243b2:	b004      	add	sp, #16
   243b4:	bd10      	pop	{r4, pc}
   243b6:	bf00      	nop
   243b8:	000302fa 	.word	0x000302fa
   243bc:	20013dd8 	.word	0x20013dd8
   243c0:	2000dc68 	.word	0x2000dc68

000243c4 <fabs>:
   243c4:	ec51 0b10 	vmov	r0, r1, d0
   243c8:	ee10 2a10 	vmov	r2, s0
   243cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   243d0:	ec43 2b10 	vmov	d0, r2, r3
   243d4:	4770      	bx	lr
   243d6:	bf00      	nop

000243d8 <malloc>:
   243d8:	4b02      	ldr	r3, [pc, #8]	; (243e4 <malloc+0xc>)
   243da:	4601      	mov	r1, r0
   243dc:	6818      	ldr	r0, [r3, #0]
   243de:	f000 b85b 	b.w	24498 <_malloc_r>
   243e2:	bf00      	nop
   243e4:	2000c694 	.word	0x2000c694

000243e8 <free>:
   243e8:	4b02      	ldr	r3, [pc, #8]	; (243f4 <free+0xc>)
   243ea:	4601      	mov	r1, r0
   243ec:	6818      	ldr	r0, [r3, #0]
   243ee:	f000 b803 	b.w	243f8 <_free_r>
   243f2:	bf00      	nop
   243f4:	2000c694 	.word	0x2000c694

000243f8 <_free_r>:
   243f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   243fa:	2900      	cmp	r1, #0
   243fc:	d047      	beq.n	2448e <_free_r+0x96>
   243fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24402:	1f0c      	subs	r4, r1, #4
   24404:	9001      	str	r0, [sp, #4]
   24406:	2b00      	cmp	r3, #0
   24408:	bfb8      	it	lt
   2440a:	18e4      	addlt	r4, r4, r3
   2440c:	f001 f898 	bl	25540 <__malloc_lock>
   24410:	4a20      	ldr	r2, [pc, #128]	; (24494 <_free_r+0x9c>)
   24412:	9801      	ldr	r0, [sp, #4]
   24414:	6813      	ldr	r3, [r2, #0]
   24416:	4615      	mov	r5, r2
   24418:	b933      	cbnz	r3, 24428 <_free_r+0x30>
   2441a:	6063      	str	r3, [r4, #4]
   2441c:	6014      	str	r4, [r2, #0]
   2441e:	b003      	add	sp, #12
   24420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24424:	f001 b892 	b.w	2554c <__malloc_unlock>
   24428:	42a3      	cmp	r3, r4
   2442a:	d90b      	bls.n	24444 <_free_r+0x4c>
   2442c:	6821      	ldr	r1, [r4, #0]
   2442e:	1862      	adds	r2, r4, r1
   24430:	4293      	cmp	r3, r2
   24432:	bf02      	ittt	eq
   24434:	681a      	ldreq	r2, [r3, #0]
   24436:	685b      	ldreq	r3, [r3, #4]
   24438:	1852      	addeq	r2, r2, r1
   2443a:	6063      	str	r3, [r4, #4]
   2443c:	bf08      	it	eq
   2443e:	6022      	streq	r2, [r4, #0]
   24440:	602c      	str	r4, [r5, #0]
   24442:	e7ec      	b.n	2441e <_free_r+0x26>
   24444:	461a      	mov	r2, r3
   24446:	685b      	ldr	r3, [r3, #4]
   24448:	b10b      	cbz	r3, 2444e <_free_r+0x56>
   2444a:	42a3      	cmp	r3, r4
   2444c:	d9fa      	bls.n	24444 <_free_r+0x4c>
   2444e:	6811      	ldr	r1, [r2, #0]
   24450:	1855      	adds	r5, r2, r1
   24452:	42a5      	cmp	r5, r4
   24454:	d10b      	bne.n	2446e <_free_r+0x76>
   24456:	6824      	ldr	r4, [r4, #0]
   24458:	4421      	add	r1, r4
   2445a:	1854      	adds	r4, r2, r1
   2445c:	6011      	str	r1, [r2, #0]
   2445e:	42a3      	cmp	r3, r4
   24460:	d1dd      	bne.n	2441e <_free_r+0x26>
   24462:	681c      	ldr	r4, [r3, #0]
   24464:	685b      	ldr	r3, [r3, #4]
   24466:	4421      	add	r1, r4
   24468:	6053      	str	r3, [r2, #4]
   2446a:	6011      	str	r1, [r2, #0]
   2446c:	e7d7      	b.n	2441e <_free_r+0x26>
   2446e:	d902      	bls.n	24476 <_free_r+0x7e>
   24470:	230c      	movs	r3, #12
   24472:	6003      	str	r3, [r0, #0]
   24474:	e7d3      	b.n	2441e <_free_r+0x26>
   24476:	6825      	ldr	r5, [r4, #0]
   24478:	1961      	adds	r1, r4, r5
   2447a:	428b      	cmp	r3, r1
   2447c:	bf02      	ittt	eq
   2447e:	6819      	ldreq	r1, [r3, #0]
   24480:	685b      	ldreq	r3, [r3, #4]
   24482:	1949      	addeq	r1, r1, r5
   24484:	6063      	str	r3, [r4, #4]
   24486:	bf08      	it	eq
   24488:	6021      	streq	r1, [r4, #0]
   2448a:	6054      	str	r4, [r2, #4]
   2448c:	e7c7      	b.n	2441e <_free_r+0x26>
   2448e:	b003      	add	sp, #12
   24490:	bd30      	pop	{r4, r5, pc}
   24492:	bf00      	nop
   24494:	2000efb4 	.word	0x2000efb4

00024498 <_malloc_r>:
   24498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2449a:	1ccd      	adds	r5, r1, #3
   2449c:	4606      	mov	r6, r0
   2449e:	f025 0503 	bic.w	r5, r5, #3
   244a2:	3508      	adds	r5, #8
   244a4:	2d0c      	cmp	r5, #12
   244a6:	bf38      	it	cc
   244a8:	250c      	movcc	r5, #12
   244aa:	2d00      	cmp	r5, #0
   244ac:	db01      	blt.n	244b2 <_malloc_r+0x1a>
   244ae:	42a9      	cmp	r1, r5
   244b0:	d903      	bls.n	244ba <_malloc_r+0x22>
   244b2:	230c      	movs	r3, #12
   244b4:	6033      	str	r3, [r6, #0]
   244b6:	2000      	movs	r0, #0
   244b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   244ba:	f001 f841 	bl	25540 <__malloc_lock>
   244be:	4921      	ldr	r1, [pc, #132]	; (24544 <_malloc_r+0xac>)
   244c0:	680a      	ldr	r2, [r1, #0]
   244c2:	4614      	mov	r4, r2
   244c4:	b99c      	cbnz	r4, 244ee <_malloc_r+0x56>
   244c6:	4f20      	ldr	r7, [pc, #128]	; (24548 <_malloc_r+0xb0>)
   244c8:	683b      	ldr	r3, [r7, #0]
   244ca:	b923      	cbnz	r3, 244d6 <_malloc_r+0x3e>
   244cc:	4621      	mov	r1, r4
   244ce:	4630      	mov	r0, r6
   244d0:	f000 fba0 	bl	24c14 <_sbrk_r>
   244d4:	6038      	str	r0, [r7, #0]
   244d6:	4629      	mov	r1, r5
   244d8:	4630      	mov	r0, r6
   244da:	f000 fb9b 	bl	24c14 <_sbrk_r>
   244de:	1c43      	adds	r3, r0, #1
   244e0:	d123      	bne.n	2452a <_malloc_r+0x92>
   244e2:	230c      	movs	r3, #12
   244e4:	4630      	mov	r0, r6
   244e6:	6033      	str	r3, [r6, #0]
   244e8:	f001 f830 	bl	2554c <__malloc_unlock>
   244ec:	e7e3      	b.n	244b6 <_malloc_r+0x1e>
   244ee:	6823      	ldr	r3, [r4, #0]
   244f0:	1b5b      	subs	r3, r3, r5
   244f2:	d417      	bmi.n	24524 <_malloc_r+0x8c>
   244f4:	2b0b      	cmp	r3, #11
   244f6:	d903      	bls.n	24500 <_malloc_r+0x68>
   244f8:	6023      	str	r3, [r4, #0]
   244fa:	441c      	add	r4, r3
   244fc:	6025      	str	r5, [r4, #0]
   244fe:	e004      	b.n	2450a <_malloc_r+0x72>
   24500:	6863      	ldr	r3, [r4, #4]
   24502:	42a2      	cmp	r2, r4
   24504:	bf0c      	ite	eq
   24506:	600b      	streq	r3, [r1, #0]
   24508:	6053      	strne	r3, [r2, #4]
   2450a:	4630      	mov	r0, r6
   2450c:	f001 f81e 	bl	2554c <__malloc_unlock>
   24510:	f104 000b 	add.w	r0, r4, #11
   24514:	1d23      	adds	r3, r4, #4
   24516:	f020 0007 	bic.w	r0, r0, #7
   2451a:	1ac2      	subs	r2, r0, r3
   2451c:	d0cc      	beq.n	244b8 <_malloc_r+0x20>
   2451e:	1a1b      	subs	r3, r3, r0
   24520:	50a3      	str	r3, [r4, r2]
   24522:	e7c9      	b.n	244b8 <_malloc_r+0x20>
   24524:	4622      	mov	r2, r4
   24526:	6864      	ldr	r4, [r4, #4]
   24528:	e7cc      	b.n	244c4 <_malloc_r+0x2c>
   2452a:	1cc4      	adds	r4, r0, #3
   2452c:	f024 0403 	bic.w	r4, r4, #3
   24530:	42a0      	cmp	r0, r4
   24532:	d0e3      	beq.n	244fc <_malloc_r+0x64>
   24534:	1a21      	subs	r1, r4, r0
   24536:	4630      	mov	r0, r6
   24538:	f000 fb6c 	bl	24c14 <_sbrk_r>
   2453c:	3001      	adds	r0, #1
   2453e:	d1dd      	bne.n	244fc <_malloc_r+0x64>
   24540:	e7cf      	b.n	244e2 <_malloc_r+0x4a>
   24542:	bf00      	nop
   24544:	2000efb4 	.word	0x2000efb4
   24548:	2000efb8 	.word	0x2000efb8

0002454c <_printf_float>:
   2454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24550:	ed2d 8b02 	vpush	{d8}
   24554:	b08d      	sub	sp, #52	; 0x34
   24556:	460c      	mov	r4, r1
   24558:	4616      	mov	r6, r2
   2455a:	461f      	mov	r7, r3
   2455c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   24560:	4605      	mov	r5, r0
   24562:	f000 ffe9 	bl	25538 <_localeconv_r>
   24566:	f8d0 a000 	ldr.w	sl, [r0]
   2456a:	4650      	mov	r0, sl
   2456c:	f7ec fd26 	bl	10fbc <strlen>
   24570:	2300      	movs	r3, #0
   24572:	f894 b018 	ldrb.w	fp, [r4, #24]
   24576:	ee08 0a10 	vmov	s16, r0
   2457a:	930a      	str	r3, [sp, #40]	; 0x28
   2457c:	6823      	ldr	r3, [r4, #0]
   2457e:	9305      	str	r3, [sp, #20]
   24580:	f8d8 3000 	ldr.w	r3, [r8]
   24584:	3307      	adds	r3, #7
   24586:	f023 0307 	bic.w	r3, r3, #7
   2458a:	f103 0208 	add.w	r2, r3, #8
   2458e:	f8c8 2000 	str.w	r2, [r8]
   24592:	e9d3 2300 	ldrd	r2, r3, [r3]
   24596:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2459a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   2459e:	f04f 32ff 	mov.w	r2, #4294967295
   245a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   245a6:	f8cd 8018 	str.w	r8, [sp, #24]
   245aa:	9307      	str	r3, [sp, #28]
   245ac:	4b9e      	ldr	r3, [pc, #632]	; (24828 <_printf_float+0x2dc>)
   245ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   245b2:	f7ec fa9b 	bl	10aec <__aeabi_dcmpun>
   245b6:	bb88      	cbnz	r0, 2461c <_printf_float+0xd0>
   245b8:	f04f 32ff 	mov.w	r2, #4294967295
   245bc:	4b9a      	ldr	r3, [pc, #616]	; (24828 <_printf_float+0x2dc>)
   245be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   245c2:	f7ec fa75 	bl	10ab0 <__aeabi_dcmple>
   245c6:	bb48      	cbnz	r0, 2461c <_printf_float+0xd0>
   245c8:	2200      	movs	r2, #0
   245ca:	2300      	movs	r3, #0
   245cc:	4640      	mov	r0, r8
   245ce:	4649      	mov	r1, r9
   245d0:	f7ec fa64 	bl	10a9c <__aeabi_dcmplt>
   245d4:	b110      	cbz	r0, 245dc <_printf_float+0x90>
   245d6:	232d      	movs	r3, #45	; 0x2d
   245d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   245dc:	4b93      	ldr	r3, [pc, #588]	; (2482c <_printf_float+0x2e0>)
   245de:	4894      	ldr	r0, [pc, #592]	; (24830 <_printf_float+0x2e4>)
   245e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   245e4:	bf94      	ite	ls
   245e6:	4698      	movls	r8, r3
   245e8:	4680      	movhi	r8, r0
   245ea:	2303      	movs	r3, #3
   245ec:	f04f 0900 	mov.w	r9, #0
   245f0:	6123      	str	r3, [r4, #16]
   245f2:	9b05      	ldr	r3, [sp, #20]
   245f4:	f023 0204 	bic.w	r2, r3, #4
   245f8:	6022      	str	r2, [r4, #0]
   245fa:	4633      	mov	r3, r6
   245fc:	aa0b      	add	r2, sp, #44	; 0x2c
   245fe:	4621      	mov	r1, r4
   24600:	4628      	mov	r0, r5
   24602:	9700      	str	r7, [sp, #0]
   24604:	f006 fce8 	bl	2afd8 <_printf_common>
   24608:	3001      	adds	r0, #1
   2460a:	f040 8090 	bne.w	2472e <_printf_float+0x1e2>
   2460e:	f04f 30ff 	mov.w	r0, #4294967295
   24612:	b00d      	add	sp, #52	; 0x34
   24614:	ecbd 8b02 	vpop	{d8}
   24618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2461c:	4642      	mov	r2, r8
   2461e:	464b      	mov	r3, r9
   24620:	4640      	mov	r0, r8
   24622:	4649      	mov	r1, r9
   24624:	f7ec fa62 	bl	10aec <__aeabi_dcmpun>
   24628:	b140      	cbz	r0, 2463c <_printf_float+0xf0>
   2462a:	464b      	mov	r3, r9
   2462c:	4881      	ldr	r0, [pc, #516]	; (24834 <_printf_float+0x2e8>)
   2462e:	2b00      	cmp	r3, #0
   24630:	bfbc      	itt	lt
   24632:	232d      	movlt	r3, #45	; 0x2d
   24634:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   24638:	4b7f      	ldr	r3, [pc, #508]	; (24838 <_printf_float+0x2ec>)
   2463a:	e7d1      	b.n	245e0 <_printf_float+0x94>
   2463c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   24640:	6863      	ldr	r3, [r4, #4]
   24642:	9206      	str	r2, [sp, #24]
   24644:	1c5a      	adds	r2, r3, #1
   24646:	d13f      	bne.n	246c8 <_printf_float+0x17c>
   24648:	2306      	movs	r3, #6
   2464a:	6063      	str	r3, [r4, #4]
   2464c:	9b05      	ldr	r3, [sp, #20]
   2464e:	4628      	mov	r0, r5
   24650:	6861      	ldr	r1, [r4, #4]
   24652:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   24656:	2300      	movs	r3, #0
   24658:	9303      	str	r3, [sp, #12]
   2465a:	ab0a      	add	r3, sp, #40	; 0x28
   2465c:	6022      	str	r2, [r4, #0]
   2465e:	e9cd b301 	strd	fp, r3, [sp, #4]
   24662:	ab09      	add	r3, sp, #36	; 0x24
   24664:	ec49 8b10 	vmov	d0, r8, r9
   24668:	9300      	str	r3, [sp, #0]
   2466a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2466e:	f006 fc13 	bl	2ae98 <__cvt>
   24672:	9b06      	ldr	r3, [sp, #24]
   24674:	4680      	mov	r8, r0
   24676:	9909      	ldr	r1, [sp, #36]	; 0x24
   24678:	2b47      	cmp	r3, #71	; 0x47
   2467a:	d108      	bne.n	2468e <_printf_float+0x142>
   2467c:	1cc8      	adds	r0, r1, #3
   2467e:	db02      	blt.n	24686 <_printf_float+0x13a>
   24680:	6863      	ldr	r3, [r4, #4]
   24682:	4299      	cmp	r1, r3
   24684:	dd41      	ble.n	2470a <_printf_float+0x1be>
   24686:	f1ab 0b02 	sub.w	fp, fp, #2
   2468a:	fa5f fb8b 	uxtb.w	fp, fp
   2468e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   24692:	d820      	bhi.n	246d6 <_printf_float+0x18a>
   24694:	3901      	subs	r1, #1
   24696:	465a      	mov	r2, fp
   24698:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2469c:	9109      	str	r1, [sp, #36]	; 0x24
   2469e:	f006 fc5d 	bl	2af5c <__exponent>
   246a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   246a4:	4681      	mov	r9, r0
   246a6:	1813      	adds	r3, r2, r0
   246a8:	2a01      	cmp	r2, #1
   246aa:	6123      	str	r3, [r4, #16]
   246ac:	dc02      	bgt.n	246b4 <_printf_float+0x168>
   246ae:	6822      	ldr	r2, [r4, #0]
   246b0:	07d2      	lsls	r2, r2, #31
   246b2:	d501      	bpl.n	246b8 <_printf_float+0x16c>
   246b4:	3301      	adds	r3, #1
   246b6:	6123      	str	r3, [r4, #16]
   246b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   246bc:	2b00      	cmp	r3, #0
   246be:	d09c      	beq.n	245fa <_printf_float+0xae>
   246c0:	232d      	movs	r3, #45	; 0x2d
   246c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   246c6:	e798      	b.n	245fa <_printf_float+0xae>
   246c8:	9a06      	ldr	r2, [sp, #24]
   246ca:	2a47      	cmp	r2, #71	; 0x47
   246cc:	d1be      	bne.n	2464c <_printf_float+0x100>
   246ce:	2b00      	cmp	r3, #0
   246d0:	d1bc      	bne.n	2464c <_printf_float+0x100>
   246d2:	2301      	movs	r3, #1
   246d4:	e7b9      	b.n	2464a <_printf_float+0xfe>
   246d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   246da:	d118      	bne.n	2470e <_printf_float+0x1c2>
   246dc:	2900      	cmp	r1, #0
   246de:	6863      	ldr	r3, [r4, #4]
   246e0:	dd0b      	ble.n	246fa <_printf_float+0x1ae>
   246e2:	6121      	str	r1, [r4, #16]
   246e4:	b913      	cbnz	r3, 246ec <_printf_float+0x1a0>
   246e6:	6822      	ldr	r2, [r4, #0]
   246e8:	07d0      	lsls	r0, r2, #31
   246ea:	d502      	bpl.n	246f2 <_printf_float+0x1a6>
   246ec:	3301      	adds	r3, #1
   246ee:	440b      	add	r3, r1
   246f0:	6123      	str	r3, [r4, #16]
   246f2:	f04f 0900 	mov.w	r9, #0
   246f6:	65a1      	str	r1, [r4, #88]	; 0x58
   246f8:	e7de      	b.n	246b8 <_printf_float+0x16c>
   246fa:	b913      	cbnz	r3, 24702 <_printf_float+0x1b6>
   246fc:	6822      	ldr	r2, [r4, #0]
   246fe:	07d2      	lsls	r2, r2, #31
   24700:	d501      	bpl.n	24706 <_printf_float+0x1ba>
   24702:	3302      	adds	r3, #2
   24704:	e7f4      	b.n	246f0 <_printf_float+0x1a4>
   24706:	2301      	movs	r3, #1
   24708:	e7f2      	b.n	246f0 <_printf_float+0x1a4>
   2470a:	f04f 0b67 	mov.w	fp, #103	; 0x67
   2470e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24710:	4299      	cmp	r1, r3
   24712:	db05      	blt.n	24720 <_printf_float+0x1d4>
   24714:	6823      	ldr	r3, [r4, #0]
   24716:	6121      	str	r1, [r4, #16]
   24718:	07d8      	lsls	r0, r3, #31
   2471a:	d5ea      	bpl.n	246f2 <_printf_float+0x1a6>
   2471c:	1c4b      	adds	r3, r1, #1
   2471e:	e7e7      	b.n	246f0 <_printf_float+0x1a4>
   24720:	2900      	cmp	r1, #0
   24722:	bfd4      	ite	le
   24724:	f1c1 0202 	rsble	r2, r1, #2
   24728:	2201      	movgt	r2, #1
   2472a:	4413      	add	r3, r2
   2472c:	e7e0      	b.n	246f0 <_printf_float+0x1a4>
   2472e:	6823      	ldr	r3, [r4, #0]
   24730:	055a      	lsls	r2, r3, #21
   24732:	d407      	bmi.n	24744 <_printf_float+0x1f8>
   24734:	6923      	ldr	r3, [r4, #16]
   24736:	4642      	mov	r2, r8
   24738:	4631      	mov	r1, r6
   2473a:	4628      	mov	r0, r5
   2473c:	47b8      	blx	r7
   2473e:	3001      	adds	r0, #1
   24740:	d12c      	bne.n	2479c <_printf_float+0x250>
   24742:	e764      	b.n	2460e <_printf_float+0xc2>
   24744:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   24748:	f240 80e0 	bls.w	2490c <_printf_float+0x3c0>
   2474c:	2200      	movs	r2, #0
   2474e:	2300      	movs	r3, #0
   24750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24754:	f7ec f998 	bl	10a88 <__aeabi_dcmpeq>
   24758:	2800      	cmp	r0, #0
   2475a:	d034      	beq.n	247c6 <_printf_float+0x27a>
   2475c:	2301      	movs	r3, #1
   2475e:	4a37      	ldr	r2, [pc, #220]	; (2483c <_printf_float+0x2f0>)
   24760:	4631      	mov	r1, r6
   24762:	4628      	mov	r0, r5
   24764:	47b8      	blx	r7
   24766:	3001      	adds	r0, #1
   24768:	f43f af51 	beq.w	2460e <_printf_float+0xc2>
   2476c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   24770:	429a      	cmp	r2, r3
   24772:	db02      	blt.n	2477a <_printf_float+0x22e>
   24774:	6823      	ldr	r3, [r4, #0]
   24776:	07d8      	lsls	r0, r3, #31
   24778:	d510      	bpl.n	2479c <_printf_float+0x250>
   2477a:	ee18 3a10 	vmov	r3, s16
   2477e:	4652      	mov	r2, sl
   24780:	4631      	mov	r1, r6
   24782:	4628      	mov	r0, r5
   24784:	47b8      	blx	r7
   24786:	3001      	adds	r0, #1
   24788:	f43f af41 	beq.w	2460e <_printf_float+0xc2>
   2478c:	f04f 0800 	mov.w	r8, #0
   24790:	f104 091a 	add.w	r9, r4, #26
   24794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24796:	3b01      	subs	r3, #1
   24798:	4543      	cmp	r3, r8
   2479a:	dc09      	bgt.n	247b0 <_printf_float+0x264>
   2479c:	6823      	ldr	r3, [r4, #0]
   2479e:	079b      	lsls	r3, r3, #30
   247a0:	f100 8105 	bmi.w	249ae <_printf_float+0x462>
   247a4:	68e0      	ldr	r0, [r4, #12]
   247a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   247a8:	4298      	cmp	r0, r3
   247aa:	bfb8      	it	lt
   247ac:	4618      	movlt	r0, r3
   247ae:	e730      	b.n	24612 <_printf_float+0xc6>
   247b0:	2301      	movs	r3, #1
   247b2:	464a      	mov	r2, r9
   247b4:	4631      	mov	r1, r6
   247b6:	4628      	mov	r0, r5
   247b8:	47b8      	blx	r7
   247ba:	3001      	adds	r0, #1
   247bc:	f43f af27 	beq.w	2460e <_printf_float+0xc2>
   247c0:	f108 0801 	add.w	r8, r8, #1
   247c4:	e7e6      	b.n	24794 <_printf_float+0x248>
   247c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   247c8:	2b00      	cmp	r3, #0
   247ca:	dc39      	bgt.n	24840 <_printf_float+0x2f4>
   247cc:	2301      	movs	r3, #1
   247ce:	4a1b      	ldr	r2, [pc, #108]	; (2483c <_printf_float+0x2f0>)
   247d0:	4631      	mov	r1, r6
   247d2:	4628      	mov	r0, r5
   247d4:	47b8      	blx	r7
   247d6:	3001      	adds	r0, #1
   247d8:	f43f af19 	beq.w	2460e <_printf_float+0xc2>
   247dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   247e0:	4313      	orrs	r3, r2
   247e2:	d102      	bne.n	247ea <_printf_float+0x29e>
   247e4:	6823      	ldr	r3, [r4, #0]
   247e6:	07d9      	lsls	r1, r3, #31
   247e8:	d5d8      	bpl.n	2479c <_printf_float+0x250>
   247ea:	ee18 3a10 	vmov	r3, s16
   247ee:	4652      	mov	r2, sl
   247f0:	4631      	mov	r1, r6
   247f2:	4628      	mov	r0, r5
   247f4:	47b8      	blx	r7
   247f6:	3001      	adds	r0, #1
   247f8:	f43f af09 	beq.w	2460e <_printf_float+0xc2>
   247fc:	f04f 0900 	mov.w	r9, #0
   24800:	f104 0a1a 	add.w	sl, r4, #26
   24804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24806:	425b      	negs	r3, r3
   24808:	454b      	cmp	r3, r9
   2480a:	dc01      	bgt.n	24810 <_printf_float+0x2c4>
   2480c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2480e:	e792      	b.n	24736 <_printf_float+0x1ea>
   24810:	2301      	movs	r3, #1
   24812:	4652      	mov	r2, sl
   24814:	4631      	mov	r1, r6
   24816:	4628      	mov	r0, r5
   24818:	47b8      	blx	r7
   2481a:	3001      	adds	r0, #1
   2481c:	f43f aef7 	beq.w	2460e <_printf_float+0xc2>
   24820:	f109 0901 	add.w	r9, r9, #1
   24824:	e7ee      	b.n	24804 <_printf_float+0x2b8>
   24826:	bf00      	nop
   24828:	7fefffff 	.word	0x7fefffff
   2482c:	00030404 	.word	0x00030404
   24830:	0002d524 	.word	0x0002d524
   24834:	0003040c 	.word	0x0003040c
   24838:	00030408 	.word	0x00030408
   2483c:	0002e4f4 	.word	0x0002e4f4
   24840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24842:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24844:	429a      	cmp	r2, r3
   24846:	bfa8      	it	ge
   24848:	461a      	movge	r2, r3
   2484a:	2a00      	cmp	r2, #0
   2484c:	4691      	mov	r9, r2
   2484e:	dc37      	bgt.n	248c0 <_printf_float+0x374>
   24850:	f04f 0b00 	mov.w	fp, #0
   24854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   24858:	f104 021a 	add.w	r2, r4, #26
   2485c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2485e:	9305      	str	r3, [sp, #20]
   24860:	eba3 0309 	sub.w	r3, r3, r9
   24864:	455b      	cmp	r3, fp
   24866:	dc33      	bgt.n	248d0 <_printf_float+0x384>
   24868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2486c:	429a      	cmp	r2, r3
   2486e:	db3b      	blt.n	248e8 <_printf_float+0x39c>
   24870:	6823      	ldr	r3, [r4, #0]
   24872:	07da      	lsls	r2, r3, #31
   24874:	d438      	bmi.n	248e8 <_printf_float+0x39c>
   24876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24878:	9b05      	ldr	r3, [sp, #20]
   2487a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2487c:	1ad3      	subs	r3, r2, r3
   2487e:	eba2 0901 	sub.w	r9, r2, r1
   24882:	4599      	cmp	r9, r3
   24884:	bfa8      	it	ge
   24886:	4699      	movge	r9, r3
   24888:	f1b9 0f00 	cmp.w	r9, #0
   2488c:	dc35      	bgt.n	248fa <_printf_float+0x3ae>
   2488e:	f04f 0800 	mov.w	r8, #0
   24892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   24896:	f104 0a1a 	add.w	sl, r4, #26
   2489a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2489e:	1a9b      	subs	r3, r3, r2
   248a0:	eba3 0309 	sub.w	r3, r3, r9
   248a4:	4543      	cmp	r3, r8
   248a6:	f77f af79 	ble.w	2479c <_printf_float+0x250>
   248aa:	2301      	movs	r3, #1
   248ac:	4652      	mov	r2, sl
   248ae:	4631      	mov	r1, r6
   248b0:	4628      	mov	r0, r5
   248b2:	47b8      	blx	r7
   248b4:	3001      	adds	r0, #1
   248b6:	f43f aeaa 	beq.w	2460e <_printf_float+0xc2>
   248ba:	f108 0801 	add.w	r8, r8, #1
   248be:	e7ec      	b.n	2489a <_printf_float+0x34e>
   248c0:	4613      	mov	r3, r2
   248c2:	4631      	mov	r1, r6
   248c4:	4642      	mov	r2, r8
   248c6:	4628      	mov	r0, r5
   248c8:	47b8      	blx	r7
   248ca:	3001      	adds	r0, #1
   248cc:	d1c0      	bne.n	24850 <_printf_float+0x304>
   248ce:	e69e      	b.n	2460e <_printf_float+0xc2>
   248d0:	2301      	movs	r3, #1
   248d2:	4631      	mov	r1, r6
   248d4:	4628      	mov	r0, r5
   248d6:	9205      	str	r2, [sp, #20]
   248d8:	47b8      	blx	r7
   248da:	3001      	adds	r0, #1
   248dc:	f43f ae97 	beq.w	2460e <_printf_float+0xc2>
   248e0:	f10b 0b01 	add.w	fp, fp, #1
   248e4:	9a05      	ldr	r2, [sp, #20]
   248e6:	e7b9      	b.n	2485c <_printf_float+0x310>
   248e8:	ee18 3a10 	vmov	r3, s16
   248ec:	4652      	mov	r2, sl
   248ee:	4631      	mov	r1, r6
   248f0:	4628      	mov	r0, r5
   248f2:	47b8      	blx	r7
   248f4:	3001      	adds	r0, #1
   248f6:	d1be      	bne.n	24876 <_printf_float+0x32a>
   248f8:	e689      	b.n	2460e <_printf_float+0xc2>
   248fa:	9a05      	ldr	r2, [sp, #20]
   248fc:	464b      	mov	r3, r9
   248fe:	4631      	mov	r1, r6
   24900:	4628      	mov	r0, r5
   24902:	4442      	add	r2, r8
   24904:	47b8      	blx	r7
   24906:	3001      	adds	r0, #1
   24908:	d1c1      	bne.n	2488e <_printf_float+0x342>
   2490a:	e680      	b.n	2460e <_printf_float+0xc2>
   2490c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2490e:	2a01      	cmp	r2, #1
   24910:	dc01      	bgt.n	24916 <_printf_float+0x3ca>
   24912:	07db      	lsls	r3, r3, #31
   24914:	d538      	bpl.n	24988 <_printf_float+0x43c>
   24916:	2301      	movs	r3, #1
   24918:	4642      	mov	r2, r8
   2491a:	4631      	mov	r1, r6
   2491c:	4628      	mov	r0, r5
   2491e:	47b8      	blx	r7
   24920:	3001      	adds	r0, #1
   24922:	f43f ae74 	beq.w	2460e <_printf_float+0xc2>
   24926:	ee18 3a10 	vmov	r3, s16
   2492a:	4652      	mov	r2, sl
   2492c:	4631      	mov	r1, r6
   2492e:	4628      	mov	r0, r5
   24930:	47b8      	blx	r7
   24932:	3001      	adds	r0, #1
   24934:	f43f ae6b 	beq.w	2460e <_printf_float+0xc2>
   24938:	2200      	movs	r2, #0
   2493a:	2300      	movs	r3, #0
   2493c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24940:	f7ec f8a2 	bl	10a88 <__aeabi_dcmpeq>
   24944:	b9d8      	cbnz	r0, 2497e <_printf_float+0x432>
   24946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24948:	f108 0201 	add.w	r2, r8, #1
   2494c:	3b01      	subs	r3, #1
   2494e:	4631      	mov	r1, r6
   24950:	4628      	mov	r0, r5
   24952:	47b8      	blx	r7
   24954:	3001      	adds	r0, #1
   24956:	d10e      	bne.n	24976 <_printf_float+0x42a>
   24958:	e659      	b.n	2460e <_printf_float+0xc2>
   2495a:	2301      	movs	r3, #1
   2495c:	4652      	mov	r2, sl
   2495e:	4631      	mov	r1, r6
   24960:	4628      	mov	r0, r5
   24962:	47b8      	blx	r7
   24964:	3001      	adds	r0, #1
   24966:	f43f ae52 	beq.w	2460e <_printf_float+0xc2>
   2496a:	f108 0801 	add.w	r8, r8, #1
   2496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24970:	3b01      	subs	r3, #1
   24972:	4543      	cmp	r3, r8
   24974:	dcf1      	bgt.n	2495a <_printf_float+0x40e>
   24976:	464b      	mov	r3, r9
   24978:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2497c:	e6dc      	b.n	24738 <_printf_float+0x1ec>
   2497e:	f04f 0800 	mov.w	r8, #0
   24982:	f104 0a1a 	add.w	sl, r4, #26
   24986:	e7f2      	b.n	2496e <_printf_float+0x422>
   24988:	2301      	movs	r3, #1
   2498a:	4642      	mov	r2, r8
   2498c:	e7df      	b.n	2494e <_printf_float+0x402>
   2498e:	2301      	movs	r3, #1
   24990:	464a      	mov	r2, r9
   24992:	4631      	mov	r1, r6
   24994:	4628      	mov	r0, r5
   24996:	47b8      	blx	r7
   24998:	3001      	adds	r0, #1
   2499a:	f43f ae38 	beq.w	2460e <_printf_float+0xc2>
   2499e:	f108 0801 	add.w	r8, r8, #1
   249a2:	68e3      	ldr	r3, [r4, #12]
   249a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   249a6:	1a5b      	subs	r3, r3, r1
   249a8:	4543      	cmp	r3, r8
   249aa:	dcf0      	bgt.n	2498e <_printf_float+0x442>
   249ac:	e6fa      	b.n	247a4 <_printf_float+0x258>
   249ae:	f04f 0800 	mov.w	r8, #0
   249b2:	f104 0919 	add.w	r9, r4, #25
   249b6:	e7f4      	b.n	249a2 <_printf_float+0x456>

000249b8 <_printf_i>:
   249b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   249bc:	460c      	mov	r4, r1
   249be:	4691      	mov	r9, r2
   249c0:	4680      	mov	r8, r0
   249c2:	469a      	mov	sl, r3
   249c4:	7e27      	ldrb	r7, [r4, #24]
   249c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   249ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   249cc:	2f78      	cmp	r7, #120	; 0x78
   249ce:	d807      	bhi.n	249e0 <_printf_i+0x28>
   249d0:	2f62      	cmp	r7, #98	; 0x62
   249d2:	d80a      	bhi.n	249ea <_printf_i+0x32>
   249d4:	2f00      	cmp	r7, #0
   249d6:	f000 80d8 	beq.w	24b8a <_printf_i+0x1d2>
   249da:	2f58      	cmp	r7, #88	; 0x58
   249dc:	f000 80a3 	beq.w	24b26 <_printf_i+0x16e>
   249e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   249e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   249e8:	e03a      	b.n	24a60 <_printf_i+0xa8>
   249ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   249ee:	2b15      	cmp	r3, #21
   249f0:	d8f6      	bhi.n	249e0 <_printf_i+0x28>
   249f2:	a001      	add	r0, pc, #4	; (adr r0, 249f8 <_printf_i+0x40>)
   249f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   249f8:	00024a51 	.word	0x00024a51
   249fc:	00024a65 	.word	0x00024a65
   24a00:	000249e1 	.word	0x000249e1
   24a04:	000249e1 	.word	0x000249e1
   24a08:	000249e1 	.word	0x000249e1
   24a0c:	000249e1 	.word	0x000249e1
   24a10:	00024a65 	.word	0x00024a65
   24a14:	000249e1 	.word	0x000249e1
   24a18:	000249e1 	.word	0x000249e1
   24a1c:	000249e1 	.word	0x000249e1
   24a20:	000249e1 	.word	0x000249e1
   24a24:	00024b71 	.word	0x00024b71
   24a28:	00024a95 	.word	0x00024a95
   24a2c:	00024b53 	.word	0x00024b53
   24a30:	000249e1 	.word	0x000249e1
   24a34:	000249e1 	.word	0x000249e1
   24a38:	00024b93 	.word	0x00024b93
   24a3c:	000249e1 	.word	0x000249e1
   24a40:	00024a95 	.word	0x00024a95
   24a44:	000249e1 	.word	0x000249e1
   24a48:	000249e1 	.word	0x000249e1
   24a4c:	00024b5b 	.word	0x00024b5b
   24a50:	680b      	ldr	r3, [r1, #0]
   24a52:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24a56:	1d1a      	adds	r2, r3, #4
   24a58:	681b      	ldr	r3, [r3, #0]
   24a5a:	600a      	str	r2, [r1, #0]
   24a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   24a60:	2301      	movs	r3, #1
   24a62:	e0a3      	b.n	24bac <_printf_i+0x1f4>
   24a64:	6825      	ldr	r5, [r4, #0]
   24a66:	6808      	ldr	r0, [r1, #0]
   24a68:	062e      	lsls	r6, r5, #24
   24a6a:	f100 0304 	add.w	r3, r0, #4
   24a6e:	d50a      	bpl.n	24a86 <_printf_i+0xce>
   24a70:	6805      	ldr	r5, [r0, #0]
   24a72:	600b      	str	r3, [r1, #0]
   24a74:	2d00      	cmp	r5, #0
   24a76:	da03      	bge.n	24a80 <_printf_i+0xc8>
   24a78:	232d      	movs	r3, #45	; 0x2d
   24a7a:	426d      	negs	r5, r5
   24a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24a80:	485e      	ldr	r0, [pc, #376]	; (24bfc <_printf_i+0x244>)
   24a82:	230a      	movs	r3, #10
   24a84:	e019      	b.n	24aba <_printf_i+0x102>
   24a86:	f015 0f40 	tst.w	r5, #64	; 0x40
   24a8a:	6805      	ldr	r5, [r0, #0]
   24a8c:	600b      	str	r3, [r1, #0]
   24a8e:	bf18      	it	ne
   24a90:	b22d      	sxthne	r5, r5
   24a92:	e7ef      	b.n	24a74 <_printf_i+0xbc>
   24a94:	680b      	ldr	r3, [r1, #0]
   24a96:	6825      	ldr	r5, [r4, #0]
   24a98:	1d18      	adds	r0, r3, #4
   24a9a:	6008      	str	r0, [r1, #0]
   24a9c:	0628      	lsls	r0, r5, #24
   24a9e:	d501      	bpl.n	24aa4 <_printf_i+0xec>
   24aa0:	681d      	ldr	r5, [r3, #0]
   24aa2:	e002      	b.n	24aaa <_printf_i+0xf2>
   24aa4:	0669      	lsls	r1, r5, #25
   24aa6:	d5fb      	bpl.n	24aa0 <_printf_i+0xe8>
   24aa8:	881d      	ldrh	r5, [r3, #0]
   24aaa:	2f6f      	cmp	r7, #111	; 0x6f
   24aac:	4853      	ldr	r0, [pc, #332]	; (24bfc <_printf_i+0x244>)
   24aae:	bf0c      	ite	eq
   24ab0:	2308      	moveq	r3, #8
   24ab2:	230a      	movne	r3, #10
   24ab4:	2100      	movs	r1, #0
   24ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   24aba:	6866      	ldr	r6, [r4, #4]
   24abc:	2e00      	cmp	r6, #0
   24abe:	60a6      	str	r6, [r4, #8]
   24ac0:	bfa2      	ittt	ge
   24ac2:	6821      	ldrge	r1, [r4, #0]
   24ac4:	f021 0104 	bicge.w	r1, r1, #4
   24ac8:	6021      	strge	r1, [r4, #0]
   24aca:	b90d      	cbnz	r5, 24ad0 <_printf_i+0x118>
   24acc:	2e00      	cmp	r6, #0
   24ace:	d04d      	beq.n	24b6c <_printf_i+0x1b4>
   24ad0:	4616      	mov	r6, r2
   24ad2:	fbb5 f1f3 	udiv	r1, r5, r3
   24ad6:	fb03 5711 	mls	r7, r3, r1, r5
   24ada:	5dc7      	ldrb	r7, [r0, r7]
   24adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
   24ae0:	462f      	mov	r7, r5
   24ae2:	460d      	mov	r5, r1
   24ae4:	42bb      	cmp	r3, r7
   24ae6:	d9f4      	bls.n	24ad2 <_printf_i+0x11a>
   24ae8:	2b08      	cmp	r3, #8
   24aea:	d10b      	bne.n	24b04 <_printf_i+0x14c>
   24aec:	6823      	ldr	r3, [r4, #0]
   24aee:	07df      	lsls	r7, r3, #31
   24af0:	d508      	bpl.n	24b04 <_printf_i+0x14c>
   24af2:	6923      	ldr	r3, [r4, #16]
   24af4:	6861      	ldr	r1, [r4, #4]
   24af6:	4299      	cmp	r1, r3
   24af8:	bfde      	ittt	le
   24afa:	2330      	movle	r3, #48	; 0x30
   24afc:	f806 3c01 	strble.w	r3, [r6, #-1]
   24b00:	f106 36ff 	addle.w	r6, r6, #4294967295
   24b04:	1b92      	subs	r2, r2, r6
   24b06:	6122      	str	r2, [r4, #16]
   24b08:	464b      	mov	r3, r9
   24b0a:	aa03      	add	r2, sp, #12
   24b0c:	4621      	mov	r1, r4
   24b0e:	4640      	mov	r0, r8
   24b10:	f8cd a000 	str.w	sl, [sp]
   24b14:	f006 fa60 	bl	2afd8 <_printf_common>
   24b18:	3001      	adds	r0, #1
   24b1a:	d14c      	bne.n	24bb6 <_printf_i+0x1fe>
   24b1c:	f04f 30ff 	mov.w	r0, #4294967295
   24b20:	b004      	add	sp, #16
   24b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24b26:	4835      	ldr	r0, [pc, #212]	; (24bfc <_printf_i+0x244>)
   24b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   24b2c:	6823      	ldr	r3, [r4, #0]
   24b2e:	680e      	ldr	r6, [r1, #0]
   24b30:	061f      	lsls	r7, r3, #24
   24b32:	f856 5b04 	ldr.w	r5, [r6], #4
   24b36:	600e      	str	r6, [r1, #0]
   24b38:	d514      	bpl.n	24b64 <_printf_i+0x1ac>
   24b3a:	07d9      	lsls	r1, r3, #31
   24b3c:	bf44      	itt	mi
   24b3e:	f043 0320 	orrmi.w	r3, r3, #32
   24b42:	6023      	strmi	r3, [r4, #0]
   24b44:	b91d      	cbnz	r5, 24b4e <_printf_i+0x196>
   24b46:	6823      	ldr	r3, [r4, #0]
   24b48:	f023 0320 	bic.w	r3, r3, #32
   24b4c:	6023      	str	r3, [r4, #0]
   24b4e:	2310      	movs	r3, #16
   24b50:	e7b0      	b.n	24ab4 <_printf_i+0xfc>
   24b52:	6823      	ldr	r3, [r4, #0]
   24b54:	f043 0320 	orr.w	r3, r3, #32
   24b58:	6023      	str	r3, [r4, #0]
   24b5a:	2378      	movs	r3, #120	; 0x78
   24b5c:	4828      	ldr	r0, [pc, #160]	; (24c00 <_printf_i+0x248>)
   24b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   24b62:	e7e3      	b.n	24b2c <_printf_i+0x174>
   24b64:	065e      	lsls	r6, r3, #25
   24b66:	bf48      	it	mi
   24b68:	b2ad      	uxthmi	r5, r5
   24b6a:	e7e6      	b.n	24b3a <_printf_i+0x182>
   24b6c:	4616      	mov	r6, r2
   24b6e:	e7bb      	b.n	24ae8 <_printf_i+0x130>
   24b70:	680b      	ldr	r3, [r1, #0]
   24b72:	6826      	ldr	r6, [r4, #0]
   24b74:	1d1d      	adds	r5, r3, #4
   24b76:	6960      	ldr	r0, [r4, #20]
   24b78:	600d      	str	r5, [r1, #0]
   24b7a:	0635      	lsls	r5, r6, #24
   24b7c:	681b      	ldr	r3, [r3, #0]
   24b7e:	d501      	bpl.n	24b84 <_printf_i+0x1cc>
   24b80:	6018      	str	r0, [r3, #0]
   24b82:	e002      	b.n	24b8a <_printf_i+0x1d2>
   24b84:	0671      	lsls	r1, r6, #25
   24b86:	d5fb      	bpl.n	24b80 <_printf_i+0x1c8>
   24b88:	8018      	strh	r0, [r3, #0]
   24b8a:	2300      	movs	r3, #0
   24b8c:	4616      	mov	r6, r2
   24b8e:	6123      	str	r3, [r4, #16]
   24b90:	e7ba      	b.n	24b08 <_printf_i+0x150>
   24b92:	680b      	ldr	r3, [r1, #0]
   24b94:	1d1a      	adds	r2, r3, #4
   24b96:	600a      	str	r2, [r1, #0]
   24b98:	2100      	movs	r1, #0
   24b9a:	681e      	ldr	r6, [r3, #0]
   24b9c:	6862      	ldr	r2, [r4, #4]
   24b9e:	4630      	mov	r0, r6
   24ba0:	f006 f936 	bl	2ae10 <memchr>
   24ba4:	b108      	cbz	r0, 24baa <_printf_i+0x1f2>
   24ba6:	1b80      	subs	r0, r0, r6
   24ba8:	6060      	str	r0, [r4, #4]
   24baa:	6863      	ldr	r3, [r4, #4]
   24bac:	6123      	str	r3, [r4, #16]
   24bae:	2300      	movs	r3, #0
   24bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24bb4:	e7a8      	b.n	24b08 <_printf_i+0x150>
   24bb6:	6923      	ldr	r3, [r4, #16]
   24bb8:	4632      	mov	r2, r6
   24bba:	4649      	mov	r1, r9
   24bbc:	4640      	mov	r0, r8
   24bbe:	47d0      	blx	sl
   24bc0:	3001      	adds	r0, #1
   24bc2:	d0ab      	beq.n	24b1c <_printf_i+0x164>
   24bc4:	6823      	ldr	r3, [r4, #0]
   24bc6:	079b      	lsls	r3, r3, #30
   24bc8:	d413      	bmi.n	24bf2 <_printf_i+0x23a>
   24bca:	68e0      	ldr	r0, [r4, #12]
   24bcc:	9b03      	ldr	r3, [sp, #12]
   24bce:	4298      	cmp	r0, r3
   24bd0:	bfb8      	it	lt
   24bd2:	4618      	movlt	r0, r3
   24bd4:	e7a4      	b.n	24b20 <_printf_i+0x168>
   24bd6:	2301      	movs	r3, #1
   24bd8:	4632      	mov	r2, r6
   24bda:	4649      	mov	r1, r9
   24bdc:	4640      	mov	r0, r8
   24bde:	47d0      	blx	sl
   24be0:	3001      	adds	r0, #1
   24be2:	d09b      	beq.n	24b1c <_printf_i+0x164>
   24be4:	3501      	adds	r5, #1
   24be6:	68e3      	ldr	r3, [r4, #12]
   24be8:	9903      	ldr	r1, [sp, #12]
   24bea:	1a5b      	subs	r3, r3, r1
   24bec:	42ab      	cmp	r3, r5
   24bee:	dcf2      	bgt.n	24bd6 <_printf_i+0x21e>
   24bf0:	e7eb      	b.n	24bca <_printf_i+0x212>
   24bf2:	2500      	movs	r5, #0
   24bf4:	f104 0619 	add.w	r6, r4, #25
   24bf8:	e7f5      	b.n	24be6 <_printf_i+0x22e>
   24bfa:	bf00      	nop
   24bfc:	00030410 	.word	0x00030410
   24c00:	00030421 	.word	0x00030421

00024c04 <realloc>:
   24c04:	4b02      	ldr	r3, [pc, #8]	; (24c10 <realloc+0xc>)
   24c06:	460a      	mov	r2, r1
   24c08:	4601      	mov	r1, r0
   24c0a:	6818      	ldr	r0, [r3, #0]
   24c0c:	f007 b867 	b.w	2bcde <_realloc_r>
   24c10:	2000c694 	.word	0x2000c694

00024c14 <_sbrk_r>:
   24c14:	b538      	push	{r3, r4, r5, lr}
   24c16:	2300      	movs	r3, #0
   24c18:	4d05      	ldr	r5, [pc, #20]	; (24c30 <_sbrk_r+0x1c>)
   24c1a:	4604      	mov	r4, r0
   24c1c:	4608      	mov	r0, r1
   24c1e:	602b      	str	r3, [r5, #0]
   24c20:	f7f1 fce8 	bl	165f4 <_sbrk>
   24c24:	1c43      	adds	r3, r0, #1
   24c26:	d102      	bne.n	24c2e <_sbrk_r+0x1a>
   24c28:	682b      	ldr	r3, [r5, #0]
   24c2a:	b103      	cbz	r3, 24c2e <_sbrk_r+0x1a>
   24c2c:	6023      	str	r3, [r4, #0]
   24c2e:	bd38      	pop	{r3, r4, r5, pc}
   24c30:	2000f394 	.word	0x2000f394

00024c34 <sniprintf>:
   24c34:	b40c      	push	{r2, r3}
   24c36:	4b18      	ldr	r3, [pc, #96]	; (24c98 <sniprintf+0x64>)
   24c38:	b530      	push	{r4, r5, lr}
   24c3a:	1e0c      	subs	r4, r1, #0
   24c3c:	b09d      	sub	sp, #116	; 0x74
   24c3e:	681d      	ldr	r5, [r3, #0]
   24c40:	da08      	bge.n	24c54 <sniprintf+0x20>
   24c42:	238b      	movs	r3, #139	; 0x8b
   24c44:	f04f 30ff 	mov.w	r0, #4294967295
   24c48:	602b      	str	r3, [r5, #0]
   24c4a:	b01d      	add	sp, #116	; 0x74
   24c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24c50:	b002      	add	sp, #8
   24c52:	4770      	bx	lr
   24c54:	f44f 7302 	mov.w	r3, #520	; 0x208
   24c58:	9002      	str	r0, [sp, #8]
   24c5a:	9006      	str	r0, [sp, #24]
   24c5c:	a902      	add	r1, sp, #8
   24c5e:	f8ad 3014 	strh.w	r3, [sp, #20]
   24c62:	bf14      	ite	ne
   24c64:	f104 33ff 	addne.w	r3, r4, #4294967295
   24c68:	4623      	moveq	r3, r4
   24c6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   24c6c:	4628      	mov	r0, r5
   24c6e:	9304      	str	r3, [sp, #16]
   24c70:	9307      	str	r3, [sp, #28]
   24c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24c76:	f8ad 3016 	strh.w	r3, [sp, #22]
   24c7a:	ab21      	add	r3, sp, #132	; 0x84
   24c7c:	9301      	str	r3, [sp, #4]
   24c7e:	f000 fd33 	bl	256e8 <_svfiprintf_r>
   24c82:	1c43      	adds	r3, r0, #1
   24c84:	bfbc      	itt	lt
   24c86:	238b      	movlt	r3, #139	; 0x8b
   24c88:	602b      	strlt	r3, [r5, #0]
   24c8a:	2c00      	cmp	r4, #0
   24c8c:	d0dd      	beq.n	24c4a <sniprintf+0x16>
   24c8e:	9b02      	ldr	r3, [sp, #8]
   24c90:	2200      	movs	r2, #0
   24c92:	701a      	strb	r2, [r3, #0]
   24c94:	e7d9      	b.n	24c4a <sniprintf+0x16>
   24c96:	bf00      	nop
   24c98:	2000c694 	.word	0x2000c694

00024c9c <siscanf>:
   24c9c:	b40e      	push	{r1, r2, r3}
   24c9e:	b510      	push	{r4, lr}
   24ca0:	b09f      	sub	sp, #124	; 0x7c
   24ca2:	f44f 7101 	mov.w	r1, #516	; 0x204
   24ca6:	ac21      	add	r4, sp, #132	; 0x84
   24ca8:	f8ad 101c 	strh.w	r1, [sp, #28]
   24cac:	9004      	str	r0, [sp, #16]
   24cae:	f854 2b04 	ldr.w	r2, [r4], #4
   24cb2:	9008      	str	r0, [sp, #32]
   24cb4:	9201      	str	r2, [sp, #4]
   24cb6:	f7ec f981 	bl	10fbc <strlen>
   24cba:	4b0c      	ldr	r3, [pc, #48]	; (24cec <siscanf+0x50>)
   24cbc:	a904      	add	r1, sp, #16
   24cbe:	9005      	str	r0, [sp, #20]
   24cc0:	930d      	str	r3, [sp, #52]	; 0x34
   24cc2:	2300      	movs	r3, #0
   24cc4:	9009      	str	r0, [sp, #36]	; 0x24
   24cc6:	9311      	str	r3, [sp, #68]	; 0x44
   24cc8:	9316      	str	r3, [sp, #88]	; 0x58
   24cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24cce:	4808      	ldr	r0, [pc, #32]	; (24cf0 <siscanf+0x54>)
   24cd0:	f8ad 301e 	strh.w	r3, [sp, #30]
   24cd4:	4623      	mov	r3, r4
   24cd6:	9a01      	ldr	r2, [sp, #4]
   24cd8:	6800      	ldr	r0, [r0, #0]
   24cda:	9403      	str	r4, [sp, #12]
   24cdc:	f000 fe04 	bl	258e8 <__ssvfiscanf_r>
   24ce0:	b01f      	add	sp, #124	; 0x7c
   24ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24ce6:	b003      	add	sp, #12
   24ce8:	4770      	bx	lr
   24cea:	bf00      	nop
   24cec:	0002b0b9 	.word	0x0002b0b9
   24cf0:	2000c694 	.word	0x2000c694

00024cf4 <strtod>:
   24cf4:	460a      	mov	r2, r1
   24cf6:	4601      	mov	r1, r0
   24cf8:	4802      	ldr	r0, [pc, #8]	; (24d04 <strtod+0x10>)
   24cfa:	4b03      	ldr	r3, [pc, #12]	; (24d08 <strtod+0x14>)
   24cfc:	6800      	ldr	r0, [r0, #0]
   24cfe:	f7ec bc33 	b.w	11568 <_strtod_l>
   24d02:	bf00      	nop
   24d04:	2000c694 	.word	0x2000c694
   24d08:	2000c6f8 	.word	0x2000c6f8

00024d0c <_strtol_l.isra.0>:
   24d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d10:	468c      	mov	ip, r1
   24d12:	4686      	mov	lr, r0
   24d14:	4e38      	ldr	r6, [pc, #224]	; (24df8 <_strtol_l.isra.0+0xec>)
   24d16:	4660      	mov	r0, ip
   24d18:	f81c 4b01 	ldrb.w	r4, [ip], #1
   24d1c:	5da5      	ldrb	r5, [r4, r6]
   24d1e:	f015 0508 	ands.w	r5, r5, #8
   24d22:	d1f8      	bne.n	24d16 <_strtol_l.isra.0+0xa>
   24d24:	2c2d      	cmp	r4, #45	; 0x2d
   24d26:	d133      	bne.n	24d90 <_strtol_l.isra.0+0x84>
   24d28:	f89c 4000 	ldrb.w	r4, [ip]
   24d2c:	f04f 0801 	mov.w	r8, #1
   24d30:	f100 0c02 	add.w	ip, r0, #2
   24d34:	2b00      	cmp	r3, #0
   24d36:	d05b      	beq.n	24df0 <_strtol_l.isra.0+0xe4>
   24d38:	2b10      	cmp	r3, #16
   24d3a:	d10c      	bne.n	24d56 <_strtol_l.isra.0+0x4a>
   24d3c:	2c30      	cmp	r4, #48	; 0x30
   24d3e:	d10a      	bne.n	24d56 <_strtol_l.isra.0+0x4a>
   24d40:	f89c 0000 	ldrb.w	r0, [ip]
   24d44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   24d48:	2858      	cmp	r0, #88	; 0x58
   24d4a:	d14c      	bne.n	24de6 <_strtol_l.isra.0+0xda>
   24d4c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   24d50:	2310      	movs	r3, #16
   24d52:	f10c 0c02 	add.w	ip, ip, #2
   24d56:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   24d5a:	2600      	movs	r6, #0
   24d5c:	3f01      	subs	r7, #1
   24d5e:	4630      	mov	r0, r6
   24d60:	fbb7 f9f3 	udiv	r9, r7, r3
   24d64:	fb03 7a19 	mls	sl, r3, r9, r7
   24d68:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   24d6c:	2d09      	cmp	r5, #9
   24d6e:	d817      	bhi.n	24da0 <_strtol_l.isra.0+0x94>
   24d70:	462c      	mov	r4, r5
   24d72:	42a3      	cmp	r3, r4
   24d74:	dd23      	ble.n	24dbe <_strtol_l.isra.0+0xb2>
   24d76:	1c75      	adds	r5, r6, #1
   24d78:	d007      	beq.n	24d8a <_strtol_l.isra.0+0x7e>
   24d7a:	4581      	cmp	r9, r0
   24d7c:	d31c      	bcc.n	24db8 <_strtol_l.isra.0+0xac>
   24d7e:	d101      	bne.n	24d84 <_strtol_l.isra.0+0x78>
   24d80:	45a2      	cmp	sl, r4
   24d82:	db19      	blt.n	24db8 <_strtol_l.isra.0+0xac>
   24d84:	fb00 4003 	mla	r0, r0, r3, r4
   24d88:	2601      	movs	r6, #1
   24d8a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   24d8e:	e7eb      	b.n	24d68 <_strtol_l.isra.0+0x5c>
   24d90:	2c2b      	cmp	r4, #43	; 0x2b
   24d92:	46a8      	mov	r8, r5
   24d94:	bf04      	itt	eq
   24d96:	f89c 4000 	ldrbeq.w	r4, [ip]
   24d9a:	f100 0c02 	addeq.w	ip, r0, #2
   24d9e:	e7c9      	b.n	24d34 <_strtol_l.isra.0+0x28>
   24da0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   24da4:	2d19      	cmp	r5, #25
   24da6:	d801      	bhi.n	24dac <_strtol_l.isra.0+0xa0>
   24da8:	3c37      	subs	r4, #55	; 0x37
   24daa:	e7e2      	b.n	24d72 <_strtol_l.isra.0+0x66>
   24dac:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   24db0:	2d19      	cmp	r5, #25
   24db2:	d804      	bhi.n	24dbe <_strtol_l.isra.0+0xb2>
   24db4:	3c57      	subs	r4, #87	; 0x57
   24db6:	e7dc      	b.n	24d72 <_strtol_l.isra.0+0x66>
   24db8:	f04f 36ff 	mov.w	r6, #4294967295
   24dbc:	e7e5      	b.n	24d8a <_strtol_l.isra.0+0x7e>
   24dbe:	1c73      	adds	r3, r6, #1
   24dc0:	d106      	bne.n	24dd0 <_strtol_l.isra.0+0xc4>
   24dc2:	2322      	movs	r3, #34	; 0x22
   24dc4:	4638      	mov	r0, r7
   24dc6:	f8ce 3000 	str.w	r3, [lr]
   24dca:	b942      	cbnz	r2, 24dde <_strtol_l.isra.0+0xd2>
   24dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24dd0:	f1b8 0f00 	cmp.w	r8, #0
   24dd4:	d000      	beq.n	24dd8 <_strtol_l.isra.0+0xcc>
   24dd6:	4240      	negs	r0, r0
   24dd8:	2a00      	cmp	r2, #0
   24dda:	d0f7      	beq.n	24dcc <_strtol_l.isra.0+0xc0>
   24ddc:	b10e      	cbz	r6, 24de2 <_strtol_l.isra.0+0xd6>
   24dde:	f10c 31ff 	add.w	r1, ip, #4294967295
   24de2:	6011      	str	r1, [r2, #0]
   24de4:	e7f2      	b.n	24dcc <_strtol_l.isra.0+0xc0>
   24de6:	2430      	movs	r4, #48	; 0x30
   24de8:	2b00      	cmp	r3, #0
   24dea:	d1b4      	bne.n	24d56 <_strtol_l.isra.0+0x4a>
   24dec:	2308      	movs	r3, #8
   24dee:	e7b2      	b.n	24d56 <_strtol_l.isra.0+0x4a>
   24df0:	2c30      	cmp	r4, #48	; 0x30
   24df2:	d0a5      	beq.n	24d40 <_strtol_l.isra.0+0x34>
   24df4:	230a      	movs	r3, #10
   24df6:	e7ae      	b.n	24d56 <_strtol_l.isra.0+0x4a>
   24df8:	00030304 	.word	0x00030304

00024dfc <strtol>:
   24dfc:	4613      	mov	r3, r2
   24dfe:	460a      	mov	r2, r1
   24e00:	4601      	mov	r1, r0
   24e02:	4802      	ldr	r0, [pc, #8]	; (24e0c <strtol+0x10>)
   24e04:	6800      	ldr	r0, [r0, #0]
   24e06:	f7ff bf81 	b.w	24d0c <_strtol_l.isra.0>
   24e0a:	bf00      	nop
   24e0c:	2000c694 	.word	0x2000c694

00024e10 <_strtoll_l.isra.0>:
   24e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e14:	4691      	mov	r9, r2
   24e16:	b087      	sub	sp, #28
   24e18:	4688      	mov	r8, r1
   24e1a:	461f      	mov	r7, r3
   24e1c:	460d      	mov	r5, r1
   24e1e:	4a46      	ldr	r2, [pc, #280]	; (24f38 <_strtoll_l.isra.0+0x128>)
   24e20:	9005      	str	r0, [sp, #20]
   24e22:	462b      	mov	r3, r5
   24e24:	f815 4b01 	ldrb.w	r4, [r5], #1
   24e28:	5ca6      	ldrb	r6, [r4, r2]
   24e2a:	f016 0608 	ands.w	r6, r6, #8
   24e2e:	d1f8      	bne.n	24e22 <_strtoll_l.isra.0+0x12>
   24e30:	2c2d      	cmp	r4, #45	; 0x2d
   24e32:	d148      	bne.n	24ec6 <_strtoll_l.isra.0+0xb6>
   24e34:	782c      	ldrb	r4, [r5, #0]
   24e36:	2601      	movs	r6, #1
   24e38:	1c9d      	adds	r5, r3, #2
   24e3a:	2f00      	cmp	r7, #0
   24e3c:	d078      	beq.n	24f30 <_strtoll_l.isra.0+0x120>
   24e3e:	2f10      	cmp	r7, #16
   24e40:	d109      	bne.n	24e56 <_strtoll_l.isra.0+0x46>
   24e42:	2c30      	cmp	r4, #48	; 0x30
   24e44:	d107      	bne.n	24e56 <_strtoll_l.isra.0+0x46>
   24e46:	782b      	ldrb	r3, [r5, #0]
   24e48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24e4c:	2b58      	cmp	r3, #88	; 0x58
   24e4e:	d16a      	bne.n	24f26 <_strtoll_l.isra.0+0x116>
   24e50:	786c      	ldrb	r4, [r5, #1]
   24e52:	2710      	movs	r7, #16
   24e54:	3502      	adds	r5, #2
   24e56:	f04f 32ff 	mov.w	r2, #4294967295
   24e5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   24e5e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   24e62:	46ba      	mov	sl, r7
   24e64:	1990      	adds	r0, r2, r6
   24e66:	463a      	mov	r2, r7
   24e68:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   24e6c:	465b      	mov	r3, fp
   24e6e:	e9cd 0100 	strd	r0, r1, [sp]
   24e72:	f7eb fee9 	bl	10c48 <__aeabi_uldivmod>
   24e76:	2300      	movs	r3, #0
   24e78:	4696      	mov	lr, r2
   24e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24e7e:	2000      	movs	r0, #0
   24e80:	2100      	movs	r1, #0
   24e82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   24e86:	f1bc 0f09 	cmp.w	ip, #9
   24e8a:	d821      	bhi.n	24ed0 <_strtoll_l.isra.0+0xc0>
   24e8c:	4664      	mov	r4, ip
   24e8e:	42a7      	cmp	r7, r4
   24e90:	dd2f      	ble.n	24ef2 <_strtoll_l.isra.0+0xe2>
   24e92:	1c5a      	adds	r2, r3, #1
   24e94:	d014      	beq.n	24ec0 <_strtoll_l.isra.0+0xb0>
   24e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24e9a:	428b      	cmp	r3, r1
   24e9c:	bf08      	it	eq
   24e9e:	4282      	cmpeq	r2, r0
   24ea0:	d324      	bcc.n	24eec <_strtoll_l.isra.0+0xdc>
   24ea2:	d101      	bne.n	24ea8 <_strtoll_l.isra.0+0x98>
   24ea4:	45a6      	cmp	lr, r4
   24ea6:	db21      	blt.n	24eec <_strtoll_l.isra.0+0xdc>
   24ea8:	fb0a f301 	mul.w	r3, sl, r1
   24eac:	fb00 330b 	mla	r3, r0, fp, r3
   24eb0:	fbaa 0100 	umull	r0, r1, sl, r0
   24eb4:	4419      	add	r1, r3
   24eb6:	1900      	adds	r0, r0, r4
   24eb8:	f04f 0301 	mov.w	r3, #1
   24ebc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   24ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
   24ec4:	e7dd      	b.n	24e82 <_strtoll_l.isra.0+0x72>
   24ec6:	2c2b      	cmp	r4, #43	; 0x2b
   24ec8:	bf04      	itt	eq
   24eca:	782c      	ldrbeq	r4, [r5, #0]
   24ecc:	1c9d      	addeq	r5, r3, #2
   24ece:	e7b4      	b.n	24e3a <_strtoll_l.isra.0+0x2a>
   24ed0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   24ed4:	f1bc 0f19 	cmp.w	ip, #25
   24ed8:	d801      	bhi.n	24ede <_strtoll_l.isra.0+0xce>
   24eda:	3c37      	subs	r4, #55	; 0x37
   24edc:	e7d7      	b.n	24e8e <_strtoll_l.isra.0+0x7e>
   24ede:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   24ee2:	f1bc 0f19 	cmp.w	ip, #25
   24ee6:	d804      	bhi.n	24ef2 <_strtoll_l.isra.0+0xe2>
   24ee8:	3c57      	subs	r4, #87	; 0x57
   24eea:	e7d0      	b.n	24e8e <_strtoll_l.isra.0+0x7e>
   24eec:	f04f 33ff 	mov.w	r3, #4294967295
   24ef0:	e7e6      	b.n	24ec0 <_strtoll_l.isra.0+0xb0>
   24ef2:	1c5a      	adds	r2, r3, #1
   24ef4:	d10a      	bne.n	24f0c <_strtoll_l.isra.0+0xfc>
   24ef6:	2322      	movs	r3, #34	; 0x22
   24ef8:	9a05      	ldr	r2, [sp, #20]
   24efa:	e9dd 0100 	ldrd	r0, r1, [sp]
   24efe:	6013      	str	r3, [r2, #0]
   24f00:	f1b9 0f00 	cmp.w	r9, #0
   24f04:	d10a      	bne.n	24f1c <_strtoll_l.isra.0+0x10c>
   24f06:	b007      	add	sp, #28
   24f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f0c:	b116      	cbz	r6, 24f14 <_strtoll_l.isra.0+0x104>
   24f0e:	4240      	negs	r0, r0
   24f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24f14:	f1b9 0f00 	cmp.w	r9, #0
   24f18:	d0f5      	beq.n	24f06 <_strtoll_l.isra.0+0xf6>
   24f1a:	b10b      	cbz	r3, 24f20 <_strtoll_l.isra.0+0x110>
   24f1c:	f105 38ff 	add.w	r8, r5, #4294967295
   24f20:	f8c9 8000 	str.w	r8, [r9]
   24f24:	e7ef      	b.n	24f06 <_strtoll_l.isra.0+0xf6>
   24f26:	2430      	movs	r4, #48	; 0x30
   24f28:	2f00      	cmp	r7, #0
   24f2a:	d194      	bne.n	24e56 <_strtoll_l.isra.0+0x46>
   24f2c:	2708      	movs	r7, #8
   24f2e:	e792      	b.n	24e56 <_strtoll_l.isra.0+0x46>
   24f30:	2c30      	cmp	r4, #48	; 0x30
   24f32:	d088      	beq.n	24e46 <_strtoll_l.isra.0+0x36>
   24f34:	270a      	movs	r7, #10
   24f36:	e78e      	b.n	24e56 <_strtoll_l.isra.0+0x46>
   24f38:	00030304 	.word	0x00030304

00024f3c <strtoll>:
   24f3c:	4613      	mov	r3, r2
   24f3e:	460a      	mov	r2, r1
   24f40:	4601      	mov	r1, r0
   24f42:	4802      	ldr	r0, [pc, #8]	; (24f4c <strtoll+0x10>)
   24f44:	6800      	ldr	r0, [r0, #0]
   24f46:	f7ff bf63 	b.w	24e10 <_strtoll_l.isra.0>
   24f4a:	bf00      	nop
   24f4c:	2000c694 	.word	0x2000c694

00024f50 <_strtoul_l.isra.0>:
   24f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f54:	468c      	mov	ip, r1
   24f56:	4686      	mov	lr, r0
   24f58:	4e39      	ldr	r6, [pc, #228]	; (25040 <_strtoul_l.isra.0+0xf0>)
   24f5a:	4660      	mov	r0, ip
   24f5c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   24f60:	5da5      	ldrb	r5, [r4, r6]
   24f62:	f015 0508 	ands.w	r5, r5, #8
   24f66:	d1f8      	bne.n	24f5a <_strtoul_l.isra.0+0xa>
   24f68:	2c2d      	cmp	r4, #45	; 0x2d
   24f6a:	d134      	bne.n	24fd6 <_strtoul_l.isra.0+0x86>
   24f6c:	f89c 4000 	ldrb.w	r4, [ip]
   24f70:	f04f 0801 	mov.w	r8, #1
   24f74:	f100 0c02 	add.w	ip, r0, #2
   24f78:	2b00      	cmp	r3, #0
   24f7a:	d05d      	beq.n	25038 <_strtoul_l.isra.0+0xe8>
   24f7c:	2b10      	cmp	r3, #16
   24f7e:	d10c      	bne.n	24f9a <_strtoul_l.isra.0+0x4a>
   24f80:	2c30      	cmp	r4, #48	; 0x30
   24f82:	d10a      	bne.n	24f9a <_strtoul_l.isra.0+0x4a>
   24f84:	f89c 0000 	ldrb.w	r0, [ip]
   24f88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   24f8c:	2858      	cmp	r0, #88	; 0x58
   24f8e:	d14e      	bne.n	2502e <_strtoul_l.isra.0+0xde>
   24f90:	f89c 4001 	ldrb.w	r4, [ip, #1]
   24f94:	2310      	movs	r3, #16
   24f96:	f10c 0c02 	add.w	ip, ip, #2
   24f9a:	f04f 37ff 	mov.w	r7, #4294967295
   24f9e:	2500      	movs	r5, #0
   24fa0:	fbb7 f7f3 	udiv	r7, r7, r3
   24fa4:	fb03 f907 	mul.w	r9, r3, r7
   24fa8:	4628      	mov	r0, r5
   24faa:	ea6f 0909 	mvn.w	r9, r9
   24fae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   24fb2:	2e09      	cmp	r6, #9
   24fb4:	d817      	bhi.n	24fe6 <_strtoul_l.isra.0+0x96>
   24fb6:	4634      	mov	r4, r6
   24fb8:	42a3      	cmp	r3, r4
   24fba:	dd23      	ble.n	25004 <_strtoul_l.isra.0+0xb4>
   24fbc:	2d00      	cmp	r5, #0
   24fbe:	db1e      	blt.n	24ffe <_strtoul_l.isra.0+0xae>
   24fc0:	4287      	cmp	r7, r0
   24fc2:	d31c      	bcc.n	24ffe <_strtoul_l.isra.0+0xae>
   24fc4:	d101      	bne.n	24fca <_strtoul_l.isra.0+0x7a>
   24fc6:	45a1      	cmp	r9, r4
   24fc8:	db19      	blt.n	24ffe <_strtoul_l.isra.0+0xae>
   24fca:	fb00 4003 	mla	r0, r0, r3, r4
   24fce:	2501      	movs	r5, #1
   24fd0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   24fd4:	e7eb      	b.n	24fae <_strtoul_l.isra.0+0x5e>
   24fd6:	2c2b      	cmp	r4, #43	; 0x2b
   24fd8:	46a8      	mov	r8, r5
   24fda:	bf04      	itt	eq
   24fdc:	f89c 4000 	ldrbeq.w	r4, [ip]
   24fe0:	f100 0c02 	addeq.w	ip, r0, #2
   24fe4:	e7c8      	b.n	24f78 <_strtoul_l.isra.0+0x28>
   24fe6:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   24fea:	2e19      	cmp	r6, #25
   24fec:	d801      	bhi.n	24ff2 <_strtoul_l.isra.0+0xa2>
   24fee:	3c37      	subs	r4, #55	; 0x37
   24ff0:	e7e2      	b.n	24fb8 <_strtoul_l.isra.0+0x68>
   24ff2:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   24ff6:	2e19      	cmp	r6, #25
   24ff8:	d804      	bhi.n	25004 <_strtoul_l.isra.0+0xb4>
   24ffa:	3c57      	subs	r4, #87	; 0x57
   24ffc:	e7dc      	b.n	24fb8 <_strtoul_l.isra.0+0x68>
   24ffe:	f04f 35ff 	mov.w	r5, #4294967295
   25002:	e7e5      	b.n	24fd0 <_strtoul_l.isra.0+0x80>
   25004:	2d00      	cmp	r5, #0
   25006:	da07      	bge.n	25018 <_strtoul_l.isra.0+0xc8>
   25008:	2322      	movs	r3, #34	; 0x22
   2500a:	f04f 30ff 	mov.w	r0, #4294967295
   2500e:	f8ce 3000 	str.w	r3, [lr]
   25012:	b942      	cbnz	r2, 25026 <_strtoul_l.isra.0+0xd6>
   25014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25018:	f1b8 0f00 	cmp.w	r8, #0
   2501c:	d000      	beq.n	25020 <_strtoul_l.isra.0+0xd0>
   2501e:	4240      	negs	r0, r0
   25020:	2a00      	cmp	r2, #0
   25022:	d0f7      	beq.n	25014 <_strtoul_l.isra.0+0xc4>
   25024:	b10d      	cbz	r5, 2502a <_strtoul_l.isra.0+0xda>
   25026:	f10c 31ff 	add.w	r1, ip, #4294967295
   2502a:	6011      	str	r1, [r2, #0]
   2502c:	e7f2      	b.n	25014 <_strtoul_l.isra.0+0xc4>
   2502e:	2430      	movs	r4, #48	; 0x30
   25030:	2b00      	cmp	r3, #0
   25032:	d1b2      	bne.n	24f9a <_strtoul_l.isra.0+0x4a>
   25034:	2308      	movs	r3, #8
   25036:	e7b0      	b.n	24f9a <_strtoul_l.isra.0+0x4a>
   25038:	2c30      	cmp	r4, #48	; 0x30
   2503a:	d0a3      	beq.n	24f84 <_strtoul_l.isra.0+0x34>
   2503c:	230a      	movs	r3, #10
   2503e:	e7ac      	b.n	24f9a <_strtoul_l.isra.0+0x4a>
   25040:	00030304 	.word	0x00030304

00025044 <strtoul>:
   25044:	4613      	mov	r3, r2
   25046:	460a      	mov	r2, r1
   25048:	4601      	mov	r1, r0
   2504a:	4802      	ldr	r0, [pc, #8]	; (25054 <strtoul+0x10>)
   2504c:	6800      	ldr	r0, [r0, #0]
   2504e:	f7ff bf7f 	b.w	24f50 <_strtoul_l.isra.0>
   25052:	bf00      	nop
   25054:	2000c694 	.word	0x2000c694

00025058 <vsniprintf>:
   25058:	b507      	push	{r0, r1, r2, lr}
   2505a:	9300      	str	r3, [sp, #0]
   2505c:	4613      	mov	r3, r2
   2505e:	460a      	mov	r2, r1
   25060:	4601      	mov	r1, r0
   25062:	4803      	ldr	r0, [pc, #12]	; (25070 <vsniprintf+0x18>)
   25064:	6800      	ldr	r0, [r0, #0]
   25066:	f006 f8bb 	bl	2b1e0 <_vsniprintf_r>
   2506a:	b003      	add	sp, #12
   2506c:	f85d fb04 	ldr.w	pc, [sp], #4
   25070:	2000c694 	.word	0x2000c694

00025074 <_vsiscanf_r>:
   25074:	b510      	push	{r4, lr}
   25076:	4604      	mov	r4, r0
   25078:	b09c      	sub	sp, #112	; 0x70
   2507a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2507e:	9102      	str	r1, [sp, #8]
   25080:	f8ad 0014 	strh.w	r0, [sp, #20]
   25084:	4608      	mov	r0, r1
   25086:	9106      	str	r1, [sp, #24]
   25088:	e9cd 3200 	strd	r3, r2, [sp]
   2508c:	f7eb ff96 	bl	10fbc <strlen>
   25090:	4909      	ldr	r1, [pc, #36]	; (250b8 <_vsiscanf_r+0x44>)
   25092:	9003      	str	r0, [sp, #12]
   25094:	910b      	str	r1, [sp, #44]	; 0x2c
   25096:	2100      	movs	r1, #0
   25098:	9007      	str	r0, [sp, #28]
   2509a:	4620      	mov	r0, r4
   2509c:	910f      	str	r1, [sp, #60]	; 0x3c
   2509e:	9114      	str	r1, [sp, #80]	; 0x50
   250a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   250a4:	e9dd 3200 	ldrd	r3, r2, [sp]
   250a8:	f8ad 1016 	strh.w	r1, [sp, #22]
   250ac:	a902      	add	r1, sp, #8
   250ae:	f000 fc1b 	bl	258e8 <__ssvfiscanf_r>
   250b2:	b01c      	add	sp, #112	; 0x70
   250b4:	bd10      	pop	{r4, pc}
   250b6:	bf00      	nop
   250b8:	0002b0b9 	.word	0x0002b0b9

000250bc <vsiscanf>:
   250bc:	4613      	mov	r3, r2
   250be:	460a      	mov	r2, r1
   250c0:	4601      	mov	r1, r0
   250c2:	4802      	ldr	r0, [pc, #8]	; (250cc <vsiscanf+0x10>)
   250c4:	6800      	ldr	r0, [r0, #0]
   250c6:	f7ff bfd5 	b.w	25074 <_vsiscanf_r>
   250ca:	bf00      	nop
   250cc:	2000c694 	.word	0x2000c694

000250d0 <__gethex>:
   250d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250d4:	ed2d 8b02 	vpush	{d8}
   250d8:	b089      	sub	sp, #36	; 0x24
   250da:	ee08 0a10 	vmov	s16, r0
   250de:	468b      	mov	fp, r1
   250e0:	4690      	mov	r8, r2
   250e2:	9304      	str	r3, [sp, #16]
   250e4:	4bbb      	ldr	r3, [pc, #748]	; (253d4 <__gethex+0x304>)
   250e6:	681b      	ldr	r3, [r3, #0]
   250e8:	4618      	mov	r0, r3
   250ea:	9301      	str	r3, [sp, #4]
   250ec:	f7eb ff66 	bl	10fbc <strlen>
   250f0:	9b01      	ldr	r3, [sp, #4]
   250f2:	f8db 2000 	ldr.w	r2, [fp]
   250f6:	4682      	mov	sl, r0
   250f8:	4403      	add	r3, r0
   250fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   250fe:	9305      	str	r3, [sp, #20]
   25100:	1c93      	adds	r3, r2, #2
   25102:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   25106:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   2510a:	32fe      	adds	r2, #254	; 0xfe
   2510c:	18d1      	adds	r1, r2, r3
   2510e:	461f      	mov	r7, r3
   25110:	f813 0b01 	ldrb.w	r0, [r3], #1
   25114:	9100      	str	r1, [sp, #0]
   25116:	2830      	cmp	r0, #48	; 0x30
   25118:	d0f8      	beq.n	2510c <__gethex+0x3c>
   2511a:	f006 f96d 	bl	2b3f8 <__hexdig_fun>
   2511e:	4604      	mov	r4, r0
   25120:	2800      	cmp	r0, #0
   25122:	d139      	bne.n	25198 <__gethex+0xc8>
   25124:	4652      	mov	r2, sl
   25126:	9901      	ldr	r1, [sp, #4]
   25128:	4638      	mov	r0, r7
   2512a:	f005 ffdc 	bl	2b0e6 <strncmp>
   2512e:	4605      	mov	r5, r0
   25130:	2800      	cmp	r0, #0
   25132:	d167      	bne.n	25204 <__gethex+0x134>
   25134:	f817 000a 	ldrb.w	r0, [r7, sl]
   25138:	eb07 060a 	add.w	r6, r7, sl
   2513c:	f006 f95c 	bl	2b3f8 <__hexdig_fun>
   25140:	2800      	cmp	r0, #0
   25142:	d061      	beq.n	25208 <__gethex+0x138>
   25144:	4633      	mov	r3, r6
   25146:	7818      	ldrb	r0, [r3, #0]
   25148:	461f      	mov	r7, r3
   2514a:	3301      	adds	r3, #1
   2514c:	2830      	cmp	r0, #48	; 0x30
   2514e:	d0fa      	beq.n	25146 <__gethex+0x76>
   25150:	f006 f952 	bl	2b3f8 <__hexdig_fun>
   25154:	fab0 f480 	clz	r4, r0
   25158:	2301      	movs	r3, #1
   2515a:	4635      	mov	r5, r6
   2515c:	0964      	lsrs	r4, r4, #5
   2515e:	9300      	str	r3, [sp, #0]
   25160:	463a      	mov	r2, r7
   25162:	4616      	mov	r6, r2
   25164:	3201      	adds	r2, #1
   25166:	7830      	ldrb	r0, [r6, #0]
   25168:	f006 f946 	bl	2b3f8 <__hexdig_fun>
   2516c:	2800      	cmp	r0, #0
   2516e:	d1f8      	bne.n	25162 <__gethex+0x92>
   25170:	4652      	mov	r2, sl
   25172:	9901      	ldr	r1, [sp, #4]
   25174:	4630      	mov	r0, r6
   25176:	f005 ffb6 	bl	2b0e6 <strncmp>
   2517a:	b980      	cbnz	r0, 2519e <__gethex+0xce>
   2517c:	b94d      	cbnz	r5, 25192 <__gethex+0xc2>
   2517e:	eb06 050a 	add.w	r5, r6, sl
   25182:	462a      	mov	r2, r5
   25184:	4616      	mov	r6, r2
   25186:	3201      	adds	r2, #1
   25188:	7830      	ldrb	r0, [r6, #0]
   2518a:	f006 f935 	bl	2b3f8 <__hexdig_fun>
   2518e:	2800      	cmp	r0, #0
   25190:	d1f8      	bne.n	25184 <__gethex+0xb4>
   25192:	1bad      	subs	r5, r5, r6
   25194:	00ad      	lsls	r5, r5, #2
   25196:	e004      	b.n	251a2 <__gethex+0xd2>
   25198:	2400      	movs	r4, #0
   2519a:	4625      	mov	r5, r4
   2519c:	e7e0      	b.n	25160 <__gethex+0x90>
   2519e:	2d00      	cmp	r5, #0
   251a0:	d1f7      	bne.n	25192 <__gethex+0xc2>
   251a2:	7833      	ldrb	r3, [r6, #0]
   251a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   251a8:	2b50      	cmp	r3, #80	; 0x50
   251aa:	d13b      	bne.n	25224 <__gethex+0x154>
   251ac:	7873      	ldrb	r3, [r6, #1]
   251ae:	2b2b      	cmp	r3, #43	; 0x2b
   251b0:	d02c      	beq.n	2520c <__gethex+0x13c>
   251b2:	2b2d      	cmp	r3, #45	; 0x2d
   251b4:	d02e      	beq.n	25214 <__gethex+0x144>
   251b6:	1c71      	adds	r1, r6, #1
   251b8:	f04f 0900 	mov.w	r9, #0
   251bc:	7808      	ldrb	r0, [r1, #0]
   251be:	f006 f91b 	bl	2b3f8 <__hexdig_fun>
   251c2:	1e43      	subs	r3, r0, #1
   251c4:	b2db      	uxtb	r3, r3
   251c6:	2b18      	cmp	r3, #24
   251c8:	d82c      	bhi.n	25224 <__gethex+0x154>
   251ca:	f1a0 0210 	sub.w	r2, r0, #16
   251ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   251d2:	f006 f911 	bl	2b3f8 <__hexdig_fun>
   251d6:	1e43      	subs	r3, r0, #1
   251d8:	b2db      	uxtb	r3, r3
   251da:	2b18      	cmp	r3, #24
   251dc:	d91d      	bls.n	2521a <__gethex+0x14a>
   251de:	f1b9 0f00 	cmp.w	r9, #0
   251e2:	d000      	beq.n	251e6 <__gethex+0x116>
   251e4:	4252      	negs	r2, r2
   251e6:	4415      	add	r5, r2
   251e8:	f8cb 1000 	str.w	r1, [fp]
   251ec:	b1e4      	cbz	r4, 25228 <__gethex+0x158>
   251ee:	9b00      	ldr	r3, [sp, #0]
   251f0:	2b00      	cmp	r3, #0
   251f2:	bf14      	ite	ne
   251f4:	2700      	movne	r7, #0
   251f6:	2706      	moveq	r7, #6
   251f8:	4638      	mov	r0, r7
   251fa:	b009      	add	sp, #36	; 0x24
   251fc:	ecbd 8b02 	vpop	{d8}
   25200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25204:	463e      	mov	r6, r7
   25206:	4625      	mov	r5, r4
   25208:	2401      	movs	r4, #1
   2520a:	e7ca      	b.n	251a2 <__gethex+0xd2>
   2520c:	f04f 0900 	mov.w	r9, #0
   25210:	1cb1      	adds	r1, r6, #2
   25212:	e7d3      	b.n	251bc <__gethex+0xec>
   25214:	f04f 0901 	mov.w	r9, #1
   25218:	e7fa      	b.n	25210 <__gethex+0x140>
   2521a:	230a      	movs	r3, #10
   2521c:	fb03 0202 	mla	r2, r3, r2, r0
   25220:	3a10      	subs	r2, #16
   25222:	e7d4      	b.n	251ce <__gethex+0xfe>
   25224:	4631      	mov	r1, r6
   25226:	e7df      	b.n	251e8 <__gethex+0x118>
   25228:	1bf3      	subs	r3, r6, r7
   2522a:	4621      	mov	r1, r4
   2522c:	3b01      	subs	r3, #1
   2522e:	2b07      	cmp	r3, #7
   25230:	dc52      	bgt.n	252d8 <__gethex+0x208>
   25232:	ee18 0a10 	vmov	r0, s16
   25236:	f04f 0b00 	mov.w	fp, #0
   2523a:	f006 f9c6 	bl	2b5ca <_Balloc>
   2523e:	f1ca 0301 	rsb	r3, sl, #1
   25242:	f100 0914 	add.w	r9, r0, #20
   25246:	4604      	mov	r4, r0
   25248:	f8cd b000 	str.w	fp, [sp]
   2524c:	f8cd 9008 	str.w	r9, [sp, #8]
   25250:	9306      	str	r3, [sp, #24]
   25252:	42b7      	cmp	r7, r6
   25254:	d343      	bcc.n	252de <__gethex+0x20e>
   25256:	9802      	ldr	r0, [sp, #8]
   25258:	9b00      	ldr	r3, [sp, #0]
   2525a:	f840 3b04 	str.w	r3, [r0], #4
   2525e:	eba0 0009 	sub.w	r0, r0, r9
   25262:	1080      	asrs	r0, r0, #2
   25264:	0146      	lsls	r6, r0, #5
   25266:	6120      	str	r0, [r4, #16]
   25268:	4618      	mov	r0, r3
   2526a:	f006 fa76 	bl	2b75a <__hi0bits>
   2526e:	1a30      	subs	r0, r6, r0
   25270:	f8d8 6000 	ldr.w	r6, [r8]
   25274:	42b0      	cmp	r0, r6
   25276:	dd66      	ble.n	25346 <__gethex+0x276>
   25278:	1b87      	subs	r7, r0, r6
   2527a:	4620      	mov	r0, r4
   2527c:	4639      	mov	r1, r7
   2527e:	f006 fcfe 	bl	2bc7e <__any_on>
   25282:	4682      	mov	sl, r0
   25284:	b1a8      	cbz	r0, 252b2 <__gethex+0x1e2>
   25286:	1e7b      	subs	r3, r7, #1
   25288:	f04f 0a01 	mov.w	sl, #1
   2528c:	1159      	asrs	r1, r3, #5
   2528e:	f003 021f 	and.w	r2, r3, #31
   25292:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   25296:	fa0a f202 	lsl.w	r2, sl, r2
   2529a:	420a      	tst	r2, r1
   2529c:	d009      	beq.n	252b2 <__gethex+0x1e2>
   2529e:	4553      	cmp	r3, sl
   252a0:	dd05      	ble.n	252ae <__gethex+0x1de>
   252a2:	1eb9      	subs	r1, r7, #2
   252a4:	4620      	mov	r0, r4
   252a6:	f006 fcea 	bl	2bc7e <__any_on>
   252aa:	2800      	cmp	r0, #0
   252ac:	d148      	bne.n	25340 <__gethex+0x270>
   252ae:	f04f 0a02 	mov.w	sl, #2
   252b2:	443d      	add	r5, r7
   252b4:	4639      	mov	r1, r7
   252b6:	4620      	mov	r0, r4
   252b8:	f006 f84d 	bl	2b356 <rshift>
   252bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   252c0:	42ab      	cmp	r3, r5
   252c2:	da4f      	bge.n	25364 <__gethex+0x294>
   252c4:	4621      	mov	r1, r4
   252c6:	ee18 0a10 	vmov	r0, s16
   252ca:	f006 f9b2 	bl	2b632 <_Bfree>
   252ce:	2300      	movs	r3, #0
   252d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   252d2:	27a3      	movs	r7, #163	; 0xa3
   252d4:	6013      	str	r3, [r2, #0]
   252d6:	e78f      	b.n	251f8 <__gethex+0x128>
   252d8:	3101      	adds	r1, #1
   252da:	105b      	asrs	r3, r3, #1
   252dc:	e7a7      	b.n	2522e <__gethex+0x15e>
   252de:	1e73      	subs	r3, r6, #1
   252e0:	9a05      	ldr	r2, [sp, #20]
   252e2:	9303      	str	r3, [sp, #12]
   252e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   252e8:	4293      	cmp	r3, r2
   252ea:	d019      	beq.n	25320 <__gethex+0x250>
   252ec:	f1bb 0f20 	cmp.w	fp, #32
   252f0:	d107      	bne.n	25302 <__gethex+0x232>
   252f2:	9b02      	ldr	r3, [sp, #8]
   252f4:	9a00      	ldr	r2, [sp, #0]
   252f6:	f843 2b04 	str.w	r2, [r3], #4
   252fa:	9302      	str	r3, [sp, #8]
   252fc:	2300      	movs	r3, #0
   252fe:	469b      	mov	fp, r3
   25300:	9300      	str	r3, [sp, #0]
   25302:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   25306:	f006 f877 	bl	2b3f8 <__hexdig_fun>
   2530a:	f000 000f 	and.w	r0, r0, #15
   2530e:	9b00      	ldr	r3, [sp, #0]
   25310:	fa00 f00b 	lsl.w	r0, r0, fp
   25314:	f10b 0b04 	add.w	fp, fp, #4
   25318:	4303      	orrs	r3, r0
   2531a:	9300      	str	r3, [sp, #0]
   2531c:	9b03      	ldr	r3, [sp, #12]
   2531e:	e00d      	b.n	2533c <__gethex+0x26c>
   25320:	9b03      	ldr	r3, [sp, #12]
   25322:	9a06      	ldr	r2, [sp, #24]
   25324:	4413      	add	r3, r2
   25326:	42bb      	cmp	r3, r7
   25328:	d3e0      	bcc.n	252ec <__gethex+0x21c>
   2532a:	4618      	mov	r0, r3
   2532c:	4652      	mov	r2, sl
   2532e:	9901      	ldr	r1, [sp, #4]
   25330:	9307      	str	r3, [sp, #28]
   25332:	f005 fed8 	bl	2b0e6 <strncmp>
   25336:	9b07      	ldr	r3, [sp, #28]
   25338:	2800      	cmp	r0, #0
   2533a:	d1d7      	bne.n	252ec <__gethex+0x21c>
   2533c:	461e      	mov	r6, r3
   2533e:	e788      	b.n	25252 <__gethex+0x182>
   25340:	f04f 0a03 	mov.w	sl, #3
   25344:	e7b5      	b.n	252b2 <__gethex+0x1e2>
   25346:	da0a      	bge.n	2535e <__gethex+0x28e>
   25348:	1a37      	subs	r7, r6, r0
   2534a:	4621      	mov	r1, r4
   2534c:	ee18 0a10 	vmov	r0, s16
   25350:	463a      	mov	r2, r7
   25352:	1bed      	subs	r5, r5, r7
   25354:	f006 faf5 	bl	2b942 <__lshift>
   25358:	4604      	mov	r4, r0
   2535a:	f100 0914 	add.w	r9, r0, #20
   2535e:	f04f 0a00 	mov.w	sl, #0
   25362:	e7ab      	b.n	252bc <__gethex+0x1ec>
   25364:	f8d8 0004 	ldr.w	r0, [r8, #4]
   25368:	42a8      	cmp	r0, r5
   2536a:	dd6f      	ble.n	2544c <__gethex+0x37c>
   2536c:	1b45      	subs	r5, r0, r5
   2536e:	42ae      	cmp	r6, r5
   25370:	dc32      	bgt.n	253d8 <__gethex+0x308>
   25372:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25376:	2b02      	cmp	r3, #2
   25378:	d023      	beq.n	253c2 <__gethex+0x2f2>
   2537a:	2b03      	cmp	r3, #3
   2537c:	d025      	beq.n	253ca <__gethex+0x2fa>
   2537e:	2b01      	cmp	r3, #1
   25380:	d115      	bne.n	253ae <__gethex+0x2de>
   25382:	42ae      	cmp	r6, r5
   25384:	d113      	bne.n	253ae <__gethex+0x2de>
   25386:	2e01      	cmp	r6, #1
   25388:	d10b      	bne.n	253a2 <__gethex+0x2d2>
   2538a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2538e:	2762      	movs	r7, #98	; 0x62
   25390:	9a04      	ldr	r2, [sp, #16]
   25392:	6013      	str	r3, [r2, #0]
   25394:	2301      	movs	r3, #1
   25396:	6123      	str	r3, [r4, #16]
   25398:	f8c9 3000 	str.w	r3, [r9]
   2539c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2539e:	601c      	str	r4, [r3, #0]
   253a0:	e72a      	b.n	251f8 <__gethex+0x128>
   253a2:	1e71      	subs	r1, r6, #1
   253a4:	4620      	mov	r0, r4
   253a6:	f006 fc6a 	bl	2bc7e <__any_on>
   253aa:	2800      	cmp	r0, #0
   253ac:	d1ed      	bne.n	2538a <__gethex+0x2ba>
   253ae:	4621      	mov	r1, r4
   253b0:	ee18 0a10 	vmov	r0, s16
   253b4:	f006 f93d 	bl	2b632 <_Bfree>
   253b8:	2300      	movs	r3, #0
   253ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   253bc:	2750      	movs	r7, #80	; 0x50
   253be:	6013      	str	r3, [r2, #0]
   253c0:	e71a      	b.n	251f8 <__gethex+0x128>
   253c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   253c4:	2b00      	cmp	r3, #0
   253c6:	d1f2      	bne.n	253ae <__gethex+0x2de>
   253c8:	e7df      	b.n	2538a <__gethex+0x2ba>
   253ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   253cc:	2b00      	cmp	r3, #0
   253ce:	d1dc      	bne.n	2538a <__gethex+0x2ba>
   253d0:	e7ed      	b.n	253ae <__gethex+0x2de>
   253d2:	bf00      	nop
   253d4:	0002cc08 	.word	0x0002cc08
   253d8:	1e6f      	subs	r7, r5, #1
   253da:	f1ba 0f00 	cmp.w	sl, #0
   253de:	d132      	bne.n	25446 <__gethex+0x376>
   253e0:	b127      	cbz	r7, 253ec <__gethex+0x31c>
   253e2:	4639      	mov	r1, r7
   253e4:	4620      	mov	r0, r4
   253e6:	f006 fc4a 	bl	2bc7e <__any_on>
   253ea:	4682      	mov	sl, r0
   253ec:	117b      	asrs	r3, r7, #5
   253ee:	2101      	movs	r1, #1
   253f0:	f007 071f 	and.w	r7, r7, #31
   253f4:	4620      	mov	r0, r4
   253f6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   253fa:	1b76      	subs	r6, r6, r5
   253fc:	fa01 f707 	lsl.w	r7, r1, r7
   25400:	4629      	mov	r1, r5
   25402:	421f      	tst	r7, r3
   25404:	f04f 0702 	mov.w	r7, #2
   25408:	bf18      	it	ne
   2540a:	f04a 0a02 	orrne.w	sl, sl, #2
   2540e:	f005 ffa2 	bl	2b356 <rshift>
   25412:	f8d8 5004 	ldr.w	r5, [r8, #4]
   25416:	f1ba 0f00 	cmp.w	sl, #0
   2541a:	d048      	beq.n	254ae <__gethex+0x3de>
   2541c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25420:	2b02      	cmp	r3, #2
   25422:	d015      	beq.n	25450 <__gethex+0x380>
   25424:	2b03      	cmp	r3, #3
   25426:	d017      	beq.n	25458 <__gethex+0x388>
   25428:	2b01      	cmp	r3, #1
   2542a:	d109      	bne.n	25440 <__gethex+0x370>
   2542c:	f01a 0f02 	tst.w	sl, #2
   25430:	d006      	beq.n	25440 <__gethex+0x370>
   25432:	f8d9 0000 	ldr.w	r0, [r9]
   25436:	ea4a 0a00 	orr.w	sl, sl, r0
   2543a:	f01a 0f01 	tst.w	sl, #1
   2543e:	d10e      	bne.n	2545e <__gethex+0x38e>
   25440:	f047 0710 	orr.w	r7, r7, #16
   25444:	e033      	b.n	254ae <__gethex+0x3de>
   25446:	f04f 0a01 	mov.w	sl, #1
   2544a:	e7cf      	b.n	253ec <__gethex+0x31c>
   2544c:	2701      	movs	r7, #1
   2544e:	e7e2      	b.n	25416 <__gethex+0x346>
   25450:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25452:	f1c3 0301 	rsb	r3, r3, #1
   25456:	9315      	str	r3, [sp, #84]	; 0x54
   25458:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2545a:	2b00      	cmp	r3, #0
   2545c:	d0f0      	beq.n	25440 <__gethex+0x370>
   2545e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   25462:	f104 0314 	add.w	r3, r4, #20
   25466:	f04f 0c00 	mov.w	ip, #0
   2546a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   2546e:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   25472:	4618      	mov	r0, r3
   25474:	f853 2b04 	ldr.w	r2, [r3], #4
   25478:	f1b2 3fff 	cmp.w	r2, #4294967295
   2547c:	d01c      	beq.n	254b8 <__gethex+0x3e8>
   2547e:	3201      	adds	r2, #1
   25480:	6002      	str	r2, [r0, #0]
   25482:	2f02      	cmp	r7, #2
   25484:	f104 0314 	add.w	r3, r4, #20
   25488:	d13a      	bne.n	25500 <__gethex+0x430>
   2548a:	f8d8 2000 	ldr.w	r2, [r8]
   2548e:	3a01      	subs	r2, #1
   25490:	42b2      	cmp	r2, r6
   25492:	d10a      	bne.n	254aa <__gethex+0x3da>
   25494:	1171      	asrs	r1, r6, #5
   25496:	2201      	movs	r2, #1
   25498:	f006 061f 	and.w	r6, r6, #31
   2549c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   254a0:	fa02 f606 	lsl.w	r6, r2, r6
   254a4:	421e      	tst	r6, r3
   254a6:	bf18      	it	ne
   254a8:	4617      	movne	r7, r2
   254aa:	f047 0720 	orr.w	r7, r7, #32
   254ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   254b0:	601c      	str	r4, [r3, #0]
   254b2:	9b04      	ldr	r3, [sp, #16]
   254b4:	601d      	str	r5, [r3, #0]
   254b6:	e69f      	b.n	251f8 <__gethex+0x128>
   254b8:	4299      	cmp	r1, r3
   254ba:	f843 cc04 	str.w	ip, [r3, #-4]
   254be:	d8d8      	bhi.n	25472 <__gethex+0x3a2>
   254c0:	68a3      	ldr	r3, [r4, #8]
   254c2:	4599      	cmp	r9, r3
   254c4:	db14      	blt.n	254f0 <__gethex+0x420>
   254c6:	6861      	ldr	r1, [r4, #4]
   254c8:	ee18 0a10 	vmov	r0, s16
   254cc:	3101      	adds	r1, #1
   254ce:	f006 f87c 	bl	2b5ca <_Balloc>
   254d2:	6922      	ldr	r2, [r4, #16]
   254d4:	4682      	mov	sl, r0
   254d6:	f104 010c 	add.w	r1, r4, #12
   254da:	3202      	adds	r2, #2
   254dc:	300c      	adds	r0, #12
   254de:	0092      	lsls	r2, r2, #2
   254e0:	f005 fcb2 	bl	2ae48 <memcpy>
   254e4:	4621      	mov	r1, r4
   254e6:	4654      	mov	r4, sl
   254e8:	ee18 0a10 	vmov	r0, s16
   254ec:	f006 f8a1 	bl	2b632 <_Bfree>
   254f0:	6923      	ldr	r3, [r4, #16]
   254f2:	1c5a      	adds	r2, r3, #1
   254f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   254f8:	6122      	str	r2, [r4, #16]
   254fa:	2201      	movs	r2, #1
   254fc:	615a      	str	r2, [r3, #20]
   254fe:	e7c0      	b.n	25482 <__gethex+0x3b2>
   25500:	6922      	ldr	r2, [r4, #16]
   25502:	454a      	cmp	r2, r9
   25504:	dd0b      	ble.n	2551e <__gethex+0x44e>
   25506:	2101      	movs	r1, #1
   25508:	4620      	mov	r0, r4
   2550a:	f005 ff24 	bl	2b356 <rshift>
   2550e:	3501      	adds	r5, #1
   25510:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25514:	42ab      	cmp	r3, r5
   25516:	f6ff aed5 	blt.w	252c4 <__gethex+0x1f4>
   2551a:	2701      	movs	r7, #1
   2551c:	e7c5      	b.n	254aa <__gethex+0x3da>
   2551e:	f016 061f 	ands.w	r6, r6, #31
   25522:	d0fa      	beq.n	2551a <__gethex+0x44a>
   25524:	449b      	add	fp, r3
   25526:	f1c6 0620 	rsb	r6, r6, #32
   2552a:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   2552e:	f006 f914 	bl	2b75a <__hi0bits>
   25532:	42b0      	cmp	r0, r6
   25534:	dbe7      	blt.n	25506 <__gethex+0x436>
   25536:	e7f0      	b.n	2551a <__gethex+0x44a>

00025538 <_localeconv_r>:
   25538:	4800      	ldr	r0, [pc, #0]	; (2553c <_localeconv_r+0x4>)
   2553a:	4770      	bx	lr
   2553c:	2000c7e8 	.word	0x2000c7e8

00025540 <__malloc_lock>:
   25540:	4801      	ldr	r0, [pc, #4]	; (25548 <__malloc_lock+0x8>)
   25542:	f001 bebb 	b.w	272bc <__retarget_lock_acquire_recursive>
   25546:	bf00      	nop
   25548:	2000c984 	.word	0x2000c984

0002554c <__malloc_unlock>:
   2554c:	4801      	ldr	r0, [pc, #4]	; (25554 <__malloc_unlock+0x8>)
   2554e:	f001 bebb 	b.w	272c8 <__retarget_lock_release_recursive>
   25552:	bf00      	nop
   25554:	2000c984 	.word	0x2000c984

00025558 <__pow5mult>:
   25558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2555c:	4615      	mov	r5, r2
   2555e:	f012 0203 	ands.w	r2, r2, #3
   25562:	4606      	mov	r6, r0
   25564:	460f      	mov	r7, r1
   25566:	d007      	beq.n	25578 <__pow5mult+0x20>
   25568:	3a01      	subs	r2, #1
   2556a:	4c21      	ldr	r4, [pc, #132]	; (255f0 <__pow5mult+0x98>)
   2556c:	2300      	movs	r3, #0
   2556e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   25572:	f006 f875 	bl	2b660 <__multadd>
   25576:	4607      	mov	r7, r0
   25578:	10ad      	asrs	r5, r5, #2
   2557a:	d035      	beq.n	255e8 <__pow5mult+0x90>
   2557c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2557e:	b93c      	cbnz	r4, 25590 <__pow5mult+0x38>
   25580:	2010      	movs	r0, #16
   25582:	f7fe ff29 	bl	243d8 <malloc>
   25586:	6270      	str	r0, [r6, #36]	; 0x24
   25588:	6004      	str	r4, [r0, #0]
   2558a:	60c4      	str	r4, [r0, #12]
   2558c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   25590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   25594:	f8d8 4008 	ldr.w	r4, [r8, #8]
   25598:	b94c      	cbnz	r4, 255ae <__pow5mult+0x56>
   2559a:	f240 2171 	movw	r1, #625	; 0x271
   2559e:	4630      	mov	r0, r6
   255a0:	f006 f92b 	bl	2b7fa <__i2b>
   255a4:	2300      	movs	r3, #0
   255a6:	4604      	mov	r4, r0
   255a8:	f8c8 0008 	str.w	r0, [r8, #8]
   255ac:	6003      	str	r3, [r0, #0]
   255ae:	f04f 0900 	mov.w	r9, #0
   255b2:	07eb      	lsls	r3, r5, #31
   255b4:	d50a      	bpl.n	255cc <__pow5mult+0x74>
   255b6:	4639      	mov	r1, r7
   255b8:	4622      	mov	r2, r4
   255ba:	4630      	mov	r0, r6
   255bc:	f006 f926 	bl	2b80c <__multiply>
   255c0:	4680      	mov	r8, r0
   255c2:	4639      	mov	r1, r7
   255c4:	4630      	mov	r0, r6
   255c6:	4647      	mov	r7, r8
   255c8:	f006 f833 	bl	2b632 <_Bfree>
   255cc:	106d      	asrs	r5, r5, #1
   255ce:	d00b      	beq.n	255e8 <__pow5mult+0x90>
   255d0:	6820      	ldr	r0, [r4, #0]
   255d2:	b938      	cbnz	r0, 255e4 <__pow5mult+0x8c>
   255d4:	4622      	mov	r2, r4
   255d6:	4621      	mov	r1, r4
   255d8:	4630      	mov	r0, r6
   255da:	f006 f917 	bl	2b80c <__multiply>
   255de:	6020      	str	r0, [r4, #0]
   255e0:	f8c0 9000 	str.w	r9, [r0]
   255e4:	4604      	mov	r4, r0
   255e6:	e7e4      	b.n	255b2 <__pow5mult+0x5a>
   255e8:	4638      	mov	r0, r7
   255ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   255ee:	bf00      	nop
   255f0:	0002cc14 	.word	0x0002cc14

000255f4 <__ulp>:
   255f4:	b082      	sub	sp, #8
   255f6:	4913      	ldr	r1, [pc, #76]	; (25644 <__ulp+0x50>)
   255f8:	ed8d 0b00 	vstr	d0, [sp]
   255fc:	9b01      	ldr	r3, [sp, #4]
   255fe:	4019      	ands	r1, r3
   25600:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   25604:	2900      	cmp	r1, #0
   25606:	dd05      	ble.n	25614 <__ulp+0x20>
   25608:	2200      	movs	r2, #0
   2560a:	460b      	mov	r3, r1
   2560c:	ec43 2b10 	vmov	d0, r2, r3
   25610:	b002      	add	sp, #8
   25612:	4770      	bx	lr
   25614:	4249      	negs	r1, r1
   25616:	2200      	movs	r2, #0
   25618:	2300      	movs	r3, #0
   2561a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   2561e:	ea4f 5021 	mov.w	r0, r1, asr #20
   25622:	da04      	bge.n	2562e <__ulp+0x3a>
   25624:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   25628:	fa41 f300 	asr.w	r3, r1, r0
   2562c:	e7ee      	b.n	2560c <__ulp+0x18>
   2562e:	f1a0 0114 	sub.w	r1, r0, #20
   25632:	291e      	cmp	r1, #30
   25634:	bfd6      	itet	le
   25636:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   2563a:	2101      	movgt	r1, #1
   2563c:	fa20 f101 	lsrle.w	r1, r0, r1
   25640:	460a      	mov	r2, r1
   25642:	e7e3      	b.n	2560c <__ulp+0x18>
   25644:	7ff00000 	.word	0x7ff00000

00025648 <__b2d>:
   25648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2564a:	6905      	ldr	r5, [r0, #16]
   2564c:	f100 0714 	add.w	r7, r0, #20
   25650:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   25654:	f855 4c04 	ldr.w	r4, [r5, #-4]
   25658:	1f2e      	subs	r6, r5, #4
   2565a:	4620      	mov	r0, r4
   2565c:	f006 f87d 	bl	2b75a <__hi0bits>
   25660:	f1c0 0320 	rsb	r3, r0, #32
   25664:	280a      	cmp	r0, #10
   25666:	f8df c07c 	ldr.w	ip, [pc, #124]	; 256e4 <__b2d+0x9c>
   2566a:	600b      	str	r3, [r1, #0]
   2566c:	dc15      	bgt.n	2569a <__b2d+0x52>
   2566e:	f1c0 0e0b 	rsb	lr, r0, #11
   25672:	42b7      	cmp	r7, r6
   25674:	f100 0015 	add.w	r0, r0, #21
   25678:	fa24 f10e 	lsr.w	r1, r4, lr
   2567c:	fa04 f000 	lsl.w	r0, r4, r0
   25680:	ea41 030c 	orr.w	r3, r1, ip
   25684:	bf34      	ite	cc
   25686:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   2568a:	2100      	movcs	r1, #0
   2568c:	fa21 f10e 	lsr.w	r1, r1, lr
   25690:	ea40 0201 	orr.w	r2, r0, r1
   25694:	ec43 2b10 	vmov	d0, r2, r3
   25698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2569a:	42b7      	cmp	r7, r6
   2569c:	bf3a      	itte	cc
   2569e:	f1a5 0608 	subcc.w	r6, r5, #8
   256a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   256a6:	2100      	movcs	r1, #0
   256a8:	380b      	subs	r0, #11
   256aa:	d017      	beq.n	256dc <__b2d+0x94>
   256ac:	f1c0 0c20 	rsb	ip, r0, #32
   256b0:	fa04 f500 	lsl.w	r5, r4, r0
   256b4:	42be      	cmp	r6, r7
   256b6:	fa01 f000 	lsl.w	r0, r1, r0
   256ba:	fa21 f40c 	lsr.w	r4, r1, ip
   256be:	ea45 0504 	orr.w	r5, r5, r4
   256c2:	bf8c      	ite	hi
   256c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   256c8:	2400      	movls	r4, #0
   256ca:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   256ce:	fa24 f40c 	lsr.w	r4, r4, ip
   256d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   256d6:	ea40 0204 	orr.w	r2, r0, r4
   256da:	e7db      	b.n	25694 <__b2d+0x4c>
   256dc:	ea44 030c 	orr.w	r3, r4, ip
   256e0:	460a      	mov	r2, r1
   256e2:	e7d7      	b.n	25694 <__b2d+0x4c>
   256e4:	3ff00000 	.word	0x3ff00000

000256e8 <_svfiprintf_r>:
   256e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256ec:	4698      	mov	r8, r3
   256ee:	898b      	ldrh	r3, [r1, #12]
   256f0:	b09d      	sub	sp, #116	; 0x74
   256f2:	4607      	mov	r7, r0
   256f4:	061b      	lsls	r3, r3, #24
   256f6:	460d      	mov	r5, r1
   256f8:	4614      	mov	r4, r2
   256fa:	d50e      	bpl.n	2571a <_svfiprintf_r+0x32>
   256fc:	690b      	ldr	r3, [r1, #16]
   256fe:	b963      	cbnz	r3, 2571a <_svfiprintf_r+0x32>
   25700:	2140      	movs	r1, #64	; 0x40
   25702:	f7fe fec9 	bl	24498 <_malloc_r>
   25706:	6028      	str	r0, [r5, #0]
   25708:	6128      	str	r0, [r5, #16]
   2570a:	b920      	cbnz	r0, 25716 <_svfiprintf_r+0x2e>
   2570c:	230c      	movs	r3, #12
   2570e:	603b      	str	r3, [r7, #0]
   25710:	f04f 30ff 	mov.w	r0, #4294967295
   25714:	e0d1      	b.n	258ba <_svfiprintf_r+0x1d2>
   25716:	2340      	movs	r3, #64	; 0x40
   25718:	616b      	str	r3, [r5, #20]
   2571a:	2300      	movs	r3, #0
   2571c:	f8cd 800c 	str.w	r8, [sp, #12]
   25720:	f04f 0901 	mov.w	r9, #1
   25724:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 258d4 <_svfiprintf_r+0x1ec>
   25728:	9309      	str	r3, [sp, #36]	; 0x24
   2572a:	2320      	movs	r3, #32
   2572c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25730:	2330      	movs	r3, #48	; 0x30
   25732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25736:	4623      	mov	r3, r4
   25738:	469a      	mov	sl, r3
   2573a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2573e:	b10a      	cbz	r2, 25744 <_svfiprintf_r+0x5c>
   25740:	2a25      	cmp	r2, #37	; 0x25
   25742:	d1f9      	bne.n	25738 <_svfiprintf_r+0x50>
   25744:	ebba 0b04 	subs.w	fp, sl, r4
   25748:	d00b      	beq.n	25762 <_svfiprintf_r+0x7a>
   2574a:	465b      	mov	r3, fp
   2574c:	4622      	mov	r2, r4
   2574e:	4629      	mov	r1, r5
   25750:	4638      	mov	r0, r7
   25752:	f006 faea 	bl	2bd2a <__ssputs_r>
   25756:	3001      	adds	r0, #1
   25758:	f000 80aa 	beq.w	258b0 <_svfiprintf_r+0x1c8>
   2575c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2575e:	445a      	add	r2, fp
   25760:	9209      	str	r2, [sp, #36]	; 0x24
   25762:	f89a 3000 	ldrb.w	r3, [sl]
   25766:	2b00      	cmp	r3, #0
   25768:	f000 80a2 	beq.w	258b0 <_svfiprintf_r+0x1c8>
   2576c:	2300      	movs	r3, #0
   2576e:	f04f 32ff 	mov.w	r2, #4294967295
   25772:	f10a 0a01 	add.w	sl, sl, #1
   25776:	9304      	str	r3, [sp, #16]
   25778:	9307      	str	r3, [sp, #28]
   2577a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2577e:	931a      	str	r3, [sp, #104]	; 0x68
   25780:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25784:	4654      	mov	r4, sl
   25786:	2205      	movs	r2, #5
   25788:	4852      	ldr	r0, [pc, #328]	; (258d4 <_svfiprintf_r+0x1ec>)
   2578a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2578e:	f005 fb3f 	bl	2ae10 <memchr>
   25792:	9a04      	ldr	r2, [sp, #16]
   25794:	b9d8      	cbnz	r0, 257ce <_svfiprintf_r+0xe6>
   25796:	06d0      	lsls	r0, r2, #27
   25798:	bf44      	itt	mi
   2579a:	2320      	movmi	r3, #32
   2579c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   257a0:	0711      	lsls	r1, r2, #28
   257a2:	bf44      	itt	mi
   257a4:	232b      	movmi	r3, #43	; 0x2b
   257a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   257aa:	f89a 3000 	ldrb.w	r3, [sl]
   257ae:	2b2a      	cmp	r3, #42	; 0x2a
   257b0:	d015      	beq.n	257de <_svfiprintf_r+0xf6>
   257b2:	9a07      	ldr	r2, [sp, #28]
   257b4:	4654      	mov	r4, sl
   257b6:	2000      	movs	r0, #0
   257b8:	f04f 0c0a 	mov.w	ip, #10
   257bc:	4621      	mov	r1, r4
   257be:	f811 3b01 	ldrb.w	r3, [r1], #1
   257c2:	3b30      	subs	r3, #48	; 0x30
   257c4:	2b09      	cmp	r3, #9
   257c6:	d94e      	bls.n	25866 <_svfiprintf_r+0x17e>
   257c8:	b1b0      	cbz	r0, 257f8 <_svfiprintf_r+0x110>
   257ca:	9207      	str	r2, [sp, #28]
   257cc:	e014      	b.n	257f8 <_svfiprintf_r+0x110>
   257ce:	eba0 0308 	sub.w	r3, r0, r8
   257d2:	46a2      	mov	sl, r4
   257d4:	fa09 f303 	lsl.w	r3, r9, r3
   257d8:	4313      	orrs	r3, r2
   257da:	9304      	str	r3, [sp, #16]
   257dc:	e7d2      	b.n	25784 <_svfiprintf_r+0x9c>
   257de:	9b03      	ldr	r3, [sp, #12]
   257e0:	1d19      	adds	r1, r3, #4
   257e2:	681b      	ldr	r3, [r3, #0]
   257e4:	2b00      	cmp	r3, #0
   257e6:	9103      	str	r1, [sp, #12]
   257e8:	bfbb      	ittet	lt
   257ea:	425b      	neglt	r3, r3
   257ec:	f042 0202 	orrlt.w	r2, r2, #2
   257f0:	9307      	strge	r3, [sp, #28]
   257f2:	9307      	strlt	r3, [sp, #28]
   257f4:	bfb8      	it	lt
   257f6:	9204      	strlt	r2, [sp, #16]
   257f8:	7823      	ldrb	r3, [r4, #0]
   257fa:	2b2e      	cmp	r3, #46	; 0x2e
   257fc:	d10c      	bne.n	25818 <_svfiprintf_r+0x130>
   257fe:	7863      	ldrb	r3, [r4, #1]
   25800:	2b2a      	cmp	r3, #42	; 0x2a
   25802:	d135      	bne.n	25870 <_svfiprintf_r+0x188>
   25804:	9b03      	ldr	r3, [sp, #12]
   25806:	3402      	adds	r4, #2
   25808:	1d1a      	adds	r2, r3, #4
   2580a:	681b      	ldr	r3, [r3, #0]
   2580c:	2b00      	cmp	r3, #0
   2580e:	9203      	str	r2, [sp, #12]
   25810:	bfb8      	it	lt
   25812:	f04f 33ff 	movlt.w	r3, #4294967295
   25816:	9305      	str	r3, [sp, #20]
   25818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 258e4 <_svfiprintf_r+0x1fc>
   2581c:	2203      	movs	r2, #3
   2581e:	7821      	ldrb	r1, [r4, #0]
   25820:	4650      	mov	r0, sl
   25822:	f005 faf5 	bl	2ae10 <memchr>
   25826:	b140      	cbz	r0, 2583a <_svfiprintf_r+0x152>
   25828:	2340      	movs	r3, #64	; 0x40
   2582a:	eba0 000a 	sub.w	r0, r0, sl
   2582e:	3401      	adds	r4, #1
   25830:	fa03 f000 	lsl.w	r0, r3, r0
   25834:	9b04      	ldr	r3, [sp, #16]
   25836:	4303      	orrs	r3, r0
   25838:	9304      	str	r3, [sp, #16]
   2583a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2583e:	2206      	movs	r2, #6
   25840:	4825      	ldr	r0, [pc, #148]	; (258d8 <_svfiprintf_r+0x1f0>)
   25842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25846:	f005 fae3 	bl	2ae10 <memchr>
   2584a:	2800      	cmp	r0, #0
   2584c:	d038      	beq.n	258c0 <_svfiprintf_r+0x1d8>
   2584e:	4b23      	ldr	r3, [pc, #140]	; (258dc <_svfiprintf_r+0x1f4>)
   25850:	bb1b      	cbnz	r3, 2589a <_svfiprintf_r+0x1b2>
   25852:	9b03      	ldr	r3, [sp, #12]
   25854:	3307      	adds	r3, #7
   25856:	f023 0307 	bic.w	r3, r3, #7
   2585a:	3308      	adds	r3, #8
   2585c:	9303      	str	r3, [sp, #12]
   2585e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25860:	4433      	add	r3, r6
   25862:	9309      	str	r3, [sp, #36]	; 0x24
   25864:	e767      	b.n	25736 <_svfiprintf_r+0x4e>
   25866:	fb0c 3202 	mla	r2, ip, r2, r3
   2586a:	460c      	mov	r4, r1
   2586c:	2001      	movs	r0, #1
   2586e:	e7a5      	b.n	257bc <_svfiprintf_r+0xd4>
   25870:	2300      	movs	r3, #0
   25872:	3401      	adds	r4, #1
   25874:	f04f 0c0a 	mov.w	ip, #10
   25878:	4619      	mov	r1, r3
   2587a:	9305      	str	r3, [sp, #20]
   2587c:	4620      	mov	r0, r4
   2587e:	f810 2b01 	ldrb.w	r2, [r0], #1
   25882:	3a30      	subs	r2, #48	; 0x30
   25884:	2a09      	cmp	r2, #9
   25886:	d903      	bls.n	25890 <_svfiprintf_r+0x1a8>
   25888:	2b00      	cmp	r3, #0
   2588a:	d0c5      	beq.n	25818 <_svfiprintf_r+0x130>
   2588c:	9105      	str	r1, [sp, #20]
   2588e:	e7c3      	b.n	25818 <_svfiprintf_r+0x130>
   25890:	fb0c 2101 	mla	r1, ip, r1, r2
   25894:	4604      	mov	r4, r0
   25896:	2301      	movs	r3, #1
   25898:	e7f0      	b.n	2587c <_svfiprintf_r+0x194>
   2589a:	ab03      	add	r3, sp, #12
   2589c:	462a      	mov	r2, r5
   2589e:	a904      	add	r1, sp, #16
   258a0:	4638      	mov	r0, r7
   258a2:	9300      	str	r3, [sp, #0]
   258a4:	4b0e      	ldr	r3, [pc, #56]	; (258e0 <_svfiprintf_r+0x1f8>)
   258a6:	f7fe fe51 	bl	2454c <_printf_float>
   258aa:	1c42      	adds	r2, r0, #1
   258ac:	4606      	mov	r6, r0
   258ae:	d1d6      	bne.n	2585e <_svfiprintf_r+0x176>
   258b0:	89ab      	ldrh	r3, [r5, #12]
   258b2:	065b      	lsls	r3, r3, #25
   258b4:	f53f af2c 	bmi.w	25710 <_svfiprintf_r+0x28>
   258b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   258ba:	b01d      	add	sp, #116	; 0x74
   258bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258c0:	ab03      	add	r3, sp, #12
   258c2:	462a      	mov	r2, r5
   258c4:	a904      	add	r1, sp, #16
   258c6:	4638      	mov	r0, r7
   258c8:	9300      	str	r3, [sp, #0]
   258ca:	4b05      	ldr	r3, [pc, #20]	; (258e0 <_svfiprintf_r+0x1f8>)
   258cc:	f7ff f874 	bl	249b8 <_printf_i>
   258d0:	e7eb      	b.n	258aa <_svfiprintf_r+0x1c2>
   258d2:	bf00      	nop
   258d4:	00030445 	.word	0x00030445
   258d8:	0003044f 	.word	0x0003044f
   258dc:	0002454d 	.word	0x0002454d
   258e0:	0002bd2b 	.word	0x0002bd2b
   258e4:	0003044b 	.word	0x0003044b

000258e8 <__ssvfiscanf_r>:
   258e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258ec:	460c      	mov	r4, r1
   258ee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   258f2:	2100      	movs	r1, #0
   258f4:	4606      	mov	r6, r0
   258f6:	f10d 0804 	add.w	r8, sp, #4
   258fa:	4fb4      	ldr	r7, [pc, #720]	; (25bcc <__ssvfiscanf_r+0x2e4>)
   258fc:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 25bd8 <__ssvfiscanf_r+0x2f0>
   25900:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   25904:	9300      	str	r3, [sp, #0]
   25906:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2590a:	49b1      	ldr	r1, [pc, #708]	; (25bd0 <__ssvfiscanf_r+0x2e8>)
   2590c:	91a0      	str	r1, [sp, #640]	; 0x280
   2590e:	49b1      	ldr	r1, [pc, #708]	; (25bd4 <__ssvfiscanf_r+0x2ec>)
   25910:	91a1      	str	r1, [sp, #644]	; 0x284
   25912:	f892 a000 	ldrb.w	sl, [r2]
   25916:	f1ba 0f00 	cmp.w	sl, #0
   2591a:	f000 8154 	beq.w	25bc6 <__ssvfiscanf_r+0x2de>
   2591e:	f81a 3007 	ldrb.w	r3, [sl, r7]
   25922:	1c55      	adds	r5, r2, #1
   25924:	f013 0308 	ands.w	r3, r3, #8
   25928:	d019      	beq.n	2595e <__ssvfiscanf_r+0x76>
   2592a:	6863      	ldr	r3, [r4, #4]
   2592c:	2b00      	cmp	r3, #0
   2592e:	dd0f      	ble.n	25950 <__ssvfiscanf_r+0x68>
   25930:	6823      	ldr	r3, [r4, #0]
   25932:	781a      	ldrb	r2, [r3, #0]
   25934:	5cba      	ldrb	r2, [r7, r2]
   25936:	0712      	lsls	r2, r2, #28
   25938:	d401      	bmi.n	2593e <__ssvfiscanf_r+0x56>
   2593a:	462a      	mov	r2, r5
   2593c:	e7e9      	b.n	25912 <__ssvfiscanf_r+0x2a>
   2593e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   25940:	3301      	adds	r3, #1
   25942:	3201      	adds	r2, #1
   25944:	6023      	str	r3, [r4, #0]
   25946:	9245      	str	r2, [sp, #276]	; 0x114
   25948:	6862      	ldr	r2, [r4, #4]
   2594a:	3a01      	subs	r2, #1
   2594c:	6062      	str	r2, [r4, #4]
   2594e:	e7ec      	b.n	2592a <__ssvfiscanf_r+0x42>
   25950:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   25952:	4621      	mov	r1, r4
   25954:	4630      	mov	r0, r6
   25956:	4798      	blx	r3
   25958:	2800      	cmp	r0, #0
   2595a:	d0e9      	beq.n	25930 <__ssvfiscanf_r+0x48>
   2595c:	e7ed      	b.n	2593a <__ssvfiscanf_r+0x52>
   2595e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   25962:	f040 8086 	bne.w	25a72 <__ssvfiscanf_r+0x18a>
   25966:	9341      	str	r3, [sp, #260]	; 0x104
   25968:	9343      	str	r3, [sp, #268]	; 0x10c
   2596a:	7853      	ldrb	r3, [r2, #1]
   2596c:	2b2a      	cmp	r3, #42	; 0x2a
   2596e:	bf04      	itt	eq
   25970:	2310      	moveq	r3, #16
   25972:	1c95      	addeq	r5, r2, #2
   25974:	f04f 020a 	mov.w	r2, #10
   25978:	bf08      	it	eq
   2597a:	9341      	streq	r3, [sp, #260]	; 0x104
   2597c:	46ab      	mov	fp, r5
   2597e:	f81b 1b01 	ldrb.w	r1, [fp], #1
   25982:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   25986:	2b09      	cmp	r3, #9
   25988:	d91d      	bls.n	259c6 <__ssvfiscanf_r+0xde>
   2598a:	2203      	movs	r2, #3
   2598c:	4892      	ldr	r0, [pc, #584]	; (25bd8 <__ssvfiscanf_r+0x2f0>)
   2598e:	f005 fa3f 	bl	2ae10 <memchr>
   25992:	b140      	cbz	r0, 259a6 <__ssvfiscanf_r+0xbe>
   25994:	2301      	movs	r3, #1
   25996:	eba0 0009 	sub.w	r0, r0, r9
   2599a:	465d      	mov	r5, fp
   2599c:	fa03 f000 	lsl.w	r0, r3, r0
   259a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   259a2:	4318      	orrs	r0, r3
   259a4:	9041      	str	r0, [sp, #260]	; 0x104
   259a6:	f815 3b01 	ldrb.w	r3, [r5], #1
   259aa:	2b78      	cmp	r3, #120	; 0x78
   259ac:	d806      	bhi.n	259bc <__ssvfiscanf_r+0xd4>
   259ae:	2b57      	cmp	r3, #87	; 0x57
   259b0:	d810      	bhi.n	259d4 <__ssvfiscanf_r+0xec>
   259b2:	2b25      	cmp	r3, #37	; 0x25
   259b4:	d05d      	beq.n	25a72 <__ssvfiscanf_r+0x18a>
   259b6:	d857      	bhi.n	25a68 <__ssvfiscanf_r+0x180>
   259b8:	2b00      	cmp	r3, #0
   259ba:	d075      	beq.n	25aa8 <__ssvfiscanf_r+0x1c0>
   259bc:	2303      	movs	r3, #3
   259be:	9347      	str	r3, [sp, #284]	; 0x11c
   259c0:	230a      	movs	r3, #10
   259c2:	9342      	str	r3, [sp, #264]	; 0x108
   259c4:	e082      	b.n	25acc <__ssvfiscanf_r+0x1e4>
   259c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   259c8:	465d      	mov	r5, fp
   259ca:	fb02 1303 	mla	r3, r2, r3, r1
   259ce:	3b30      	subs	r3, #48	; 0x30
   259d0:	9343      	str	r3, [sp, #268]	; 0x10c
   259d2:	e7d3      	b.n	2597c <__ssvfiscanf_r+0x94>
   259d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   259d8:	2a20      	cmp	r2, #32
   259da:	d8ef      	bhi.n	259bc <__ssvfiscanf_r+0xd4>
   259dc:	a101      	add	r1, pc, #4	; (adr r1, 259e4 <__ssvfiscanf_r+0xfc>)
   259de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   259e2:	bf00      	nop
   259e4:	00025ab7 	.word	0x00025ab7
   259e8:	000259bd 	.word	0x000259bd
   259ec:	000259bd 	.word	0x000259bd
   259f0:	00025b15 	.word	0x00025b15
   259f4:	000259bd 	.word	0x000259bd
   259f8:	000259bd 	.word	0x000259bd
   259fc:	000259bd 	.word	0x000259bd
   25a00:	000259bd 	.word	0x000259bd
   25a04:	000259bd 	.word	0x000259bd
   25a08:	000259bd 	.word	0x000259bd
   25a0c:	000259bd 	.word	0x000259bd
   25a10:	00025b2b 	.word	0x00025b2b
   25a14:	00025b01 	.word	0x00025b01
   25a18:	00025a6f 	.word	0x00025a6f
   25a1c:	00025a6f 	.word	0x00025a6f
   25a20:	00025a6f 	.word	0x00025a6f
   25a24:	000259bd 	.word	0x000259bd
   25a28:	00025b05 	.word	0x00025b05
   25a2c:	000259bd 	.word	0x000259bd
   25a30:	000259bd 	.word	0x000259bd
   25a34:	000259bd 	.word	0x000259bd
   25a38:	000259bd 	.word	0x000259bd
   25a3c:	00025b3b 	.word	0x00025b3b
   25a40:	00025b0d 	.word	0x00025b0d
   25a44:	00025aaf 	.word	0x00025aaf
   25a48:	000259bd 	.word	0x000259bd
   25a4c:	000259bd 	.word	0x000259bd
   25a50:	00025b37 	.word	0x00025b37
   25a54:	000259bd 	.word	0x000259bd
   25a58:	00025b01 	.word	0x00025b01
   25a5c:	000259bd 	.word	0x000259bd
   25a60:	000259bd 	.word	0x000259bd
   25a64:	00025ab7 	.word	0x00025ab7
   25a68:	3b45      	subs	r3, #69	; 0x45
   25a6a:	2b02      	cmp	r3, #2
   25a6c:	d8a6      	bhi.n	259bc <__ssvfiscanf_r+0xd4>
   25a6e:	2305      	movs	r3, #5
   25a70:	e02b      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25a72:	6863      	ldr	r3, [r4, #4]
   25a74:	2b00      	cmp	r3, #0
   25a76:	dd0d      	ble.n	25a94 <__ssvfiscanf_r+0x1ac>
   25a78:	6823      	ldr	r3, [r4, #0]
   25a7a:	781a      	ldrb	r2, [r3, #0]
   25a7c:	4552      	cmp	r2, sl
   25a7e:	f040 80a2 	bne.w	25bc6 <__ssvfiscanf_r+0x2de>
   25a82:	3301      	adds	r3, #1
   25a84:	6862      	ldr	r2, [r4, #4]
   25a86:	6023      	str	r3, [r4, #0]
   25a88:	3a01      	subs	r2, #1
   25a8a:	9b45      	ldr	r3, [sp, #276]	; 0x114
   25a8c:	6062      	str	r2, [r4, #4]
   25a8e:	3301      	adds	r3, #1
   25a90:	9345      	str	r3, [sp, #276]	; 0x114
   25a92:	e752      	b.n	2593a <__ssvfiscanf_r+0x52>
   25a94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   25a96:	4621      	mov	r1, r4
   25a98:	4630      	mov	r0, r6
   25a9a:	4798      	blx	r3
   25a9c:	2800      	cmp	r0, #0
   25a9e:	d0eb      	beq.n	25a78 <__ssvfiscanf_r+0x190>
   25aa0:	9844      	ldr	r0, [sp, #272]	; 0x110
   25aa2:	2800      	cmp	r0, #0
   25aa4:	f040 8085 	bne.w	25bb2 <__ssvfiscanf_r+0x2ca>
   25aa8:	f04f 30ff 	mov.w	r0, #4294967295
   25aac:	e087      	b.n	25bbe <__ssvfiscanf_r+0x2d6>
   25aae:	9a41      	ldr	r2, [sp, #260]	; 0x104
   25ab0:	f042 0220 	orr.w	r2, r2, #32
   25ab4:	9241      	str	r2, [sp, #260]	; 0x104
   25ab6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   25ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   25abc:	9241      	str	r2, [sp, #260]	; 0x104
   25abe:	2210      	movs	r2, #16
   25ac0:	2b6f      	cmp	r3, #111	; 0x6f
   25ac2:	9242      	str	r2, [sp, #264]	; 0x108
   25ac4:	bf34      	ite	cc
   25ac6:	2303      	movcc	r3, #3
   25ac8:	2304      	movcs	r3, #4
   25aca:	9347      	str	r3, [sp, #284]	; 0x11c
   25acc:	6863      	ldr	r3, [r4, #4]
   25ace:	2b00      	cmp	r3, #0
   25ad0:	dd42      	ble.n	25b58 <__ssvfiscanf_r+0x270>
   25ad2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   25ad4:	0659      	lsls	r1, r3, #25
   25ad6:	d404      	bmi.n	25ae2 <__ssvfiscanf_r+0x1fa>
   25ad8:	6823      	ldr	r3, [r4, #0]
   25ada:	781a      	ldrb	r2, [r3, #0]
   25adc:	5cba      	ldrb	r2, [r7, r2]
   25ade:	0712      	lsls	r2, r2, #28
   25ae0:	d441      	bmi.n	25b66 <__ssvfiscanf_r+0x27e>
   25ae2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   25ae4:	2b02      	cmp	r3, #2
   25ae6:	dc50      	bgt.n	25b8a <__ssvfiscanf_r+0x2a2>
   25ae8:	466b      	mov	r3, sp
   25aea:	4622      	mov	r2, r4
   25aec:	a941      	add	r1, sp, #260	; 0x104
   25aee:	4630      	mov	r0, r6
   25af0:	f000 f876 	bl	25be0 <_scanf_chars>
   25af4:	2801      	cmp	r0, #1
   25af6:	d066      	beq.n	25bc6 <__ssvfiscanf_r+0x2de>
   25af8:	2802      	cmp	r0, #2
   25afa:	f47f af1e 	bne.w	2593a <__ssvfiscanf_r+0x52>
   25afe:	e7cf      	b.n	25aa0 <__ssvfiscanf_r+0x1b8>
   25b00:	220a      	movs	r2, #10
   25b02:	e7dd      	b.n	25ac0 <__ssvfiscanf_r+0x1d8>
   25b04:	2300      	movs	r3, #0
   25b06:	9342      	str	r3, [sp, #264]	; 0x108
   25b08:	2303      	movs	r3, #3
   25b0a:	e7de      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25b0c:	2308      	movs	r3, #8
   25b0e:	9342      	str	r3, [sp, #264]	; 0x108
   25b10:	2304      	movs	r3, #4
   25b12:	e7da      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25b14:	4629      	mov	r1, r5
   25b16:	4640      	mov	r0, r8
   25b18:	f006 f9bc 	bl	2be94 <__sccl>
   25b1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   25b1e:	4605      	mov	r5, r0
   25b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b24:	9341      	str	r3, [sp, #260]	; 0x104
   25b26:	2301      	movs	r3, #1
   25b28:	e7cf      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25b2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   25b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b30:	9341      	str	r3, [sp, #260]	; 0x104
   25b32:	2300      	movs	r3, #0
   25b34:	e7c9      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25b36:	2302      	movs	r3, #2
   25b38:	e7c7      	b.n	25aca <__ssvfiscanf_r+0x1e2>
   25b3a:	9841      	ldr	r0, [sp, #260]	; 0x104
   25b3c:	06c3      	lsls	r3, r0, #27
   25b3e:	f53f aefc 	bmi.w	2593a <__ssvfiscanf_r+0x52>
   25b42:	9b00      	ldr	r3, [sp, #0]
   25b44:	07c0      	lsls	r0, r0, #31
   25b46:	9a45      	ldr	r2, [sp, #276]	; 0x114
   25b48:	f103 0104 	add.w	r1, r3, #4
   25b4c:	9100      	str	r1, [sp, #0]
   25b4e:	681b      	ldr	r3, [r3, #0]
   25b50:	bf4c      	ite	mi
   25b52:	801a      	strhmi	r2, [r3, #0]
   25b54:	601a      	strpl	r2, [r3, #0]
   25b56:	e6f0      	b.n	2593a <__ssvfiscanf_r+0x52>
   25b58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   25b5a:	4621      	mov	r1, r4
   25b5c:	4630      	mov	r0, r6
   25b5e:	4798      	blx	r3
   25b60:	2800      	cmp	r0, #0
   25b62:	d0b6      	beq.n	25ad2 <__ssvfiscanf_r+0x1ea>
   25b64:	e79c      	b.n	25aa0 <__ssvfiscanf_r+0x1b8>
   25b66:	9a45      	ldr	r2, [sp, #276]	; 0x114
   25b68:	3201      	adds	r2, #1
   25b6a:	9245      	str	r2, [sp, #276]	; 0x114
   25b6c:	6862      	ldr	r2, [r4, #4]
   25b6e:	3a01      	subs	r2, #1
   25b70:	2a00      	cmp	r2, #0
   25b72:	6062      	str	r2, [r4, #4]
   25b74:	dd02      	ble.n	25b7c <__ssvfiscanf_r+0x294>
   25b76:	3301      	adds	r3, #1
   25b78:	6023      	str	r3, [r4, #0]
   25b7a:	e7ad      	b.n	25ad8 <__ssvfiscanf_r+0x1f0>
   25b7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   25b7e:	4621      	mov	r1, r4
   25b80:	4630      	mov	r0, r6
   25b82:	4798      	blx	r3
   25b84:	2800      	cmp	r0, #0
   25b86:	d0a7      	beq.n	25ad8 <__ssvfiscanf_r+0x1f0>
   25b88:	e78a      	b.n	25aa0 <__ssvfiscanf_r+0x1b8>
   25b8a:	2b04      	cmp	r3, #4
   25b8c:	dc06      	bgt.n	25b9c <__ssvfiscanf_r+0x2b4>
   25b8e:	466b      	mov	r3, sp
   25b90:	4622      	mov	r2, r4
   25b92:	a941      	add	r1, sp, #260	; 0x104
   25b94:	4630      	mov	r0, r6
   25b96:	f000 f87b 	bl	25c90 <_scanf_i>
   25b9a:	e7ab      	b.n	25af4 <__ssvfiscanf_r+0x20c>
   25b9c:	4b0f      	ldr	r3, [pc, #60]	; (25bdc <__ssvfiscanf_r+0x2f4>)
   25b9e:	2b00      	cmp	r3, #0
   25ba0:	f43f aecb 	beq.w	2593a <__ssvfiscanf_r+0x52>
   25ba4:	466b      	mov	r3, sp
   25ba6:	4622      	mov	r2, r4
   25ba8:	a941      	add	r1, sp, #260	; 0x104
   25baa:	4630      	mov	r0, r6
   25bac:	e000      	b.n	25bb0 <__ssvfiscanf_r+0x2c8>
   25bae:	bf00      	nop
   25bb0:	e7a0      	b.n	25af4 <__ssvfiscanf_r+0x20c>
   25bb2:	89a3      	ldrh	r3, [r4, #12]
   25bb4:	f013 0f40 	tst.w	r3, #64	; 0x40
   25bb8:	bf18      	it	ne
   25bba:	f04f 30ff 	movne.w	r0, #4294967295
   25bbe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   25bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bc6:	9844      	ldr	r0, [sp, #272]	; 0x110
   25bc8:	e7f9      	b.n	25bbe <__ssvfiscanf_r+0x2d6>
   25bca:	bf00      	nop
   25bcc:	00030304 	.word	0x00030304
   25bd0:	0002bde1 	.word	0x0002bde1
   25bd4:	0002be5b 	.word	0x0002be5b
   25bd8:	0003044b 	.word	0x0003044b
   25bdc:	00000000 	.word	0x00000000

00025be0 <_scanf_chars>:
   25be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25be4:	4615      	mov	r5, r2
   25be6:	688a      	ldr	r2, [r1, #8]
   25be8:	4680      	mov	r8, r0
   25bea:	460c      	mov	r4, r1
   25bec:	b932      	cbnz	r2, 25bfc <_scanf_chars+0x1c>
   25bee:	698a      	ldr	r2, [r1, #24]
   25bf0:	2a00      	cmp	r2, #0
   25bf2:	bf0c      	ite	eq
   25bf4:	2201      	moveq	r2, #1
   25bf6:	f04f 32ff 	movne.w	r2, #4294967295
   25bfa:	608a      	str	r2, [r1, #8]
   25bfc:	6822      	ldr	r2, [r4, #0]
   25bfe:	2700      	movs	r7, #0
   25c00:	f8df 9088 	ldr.w	r9, [pc, #136]	; 25c8c <_scanf_chars+0xac>
   25c04:	06d1      	lsls	r1, r2, #27
   25c06:	bf5f      	itttt	pl
   25c08:	681a      	ldrpl	r2, [r3, #0]
   25c0a:	1d11      	addpl	r1, r2, #4
   25c0c:	6019      	strpl	r1, [r3, #0]
   25c0e:	6816      	ldrpl	r6, [r2, #0]
   25c10:	69a0      	ldr	r0, [r4, #24]
   25c12:	b188      	cbz	r0, 25c38 <_scanf_chars+0x58>
   25c14:	2801      	cmp	r0, #1
   25c16:	d107      	bne.n	25c28 <_scanf_chars+0x48>
   25c18:	682b      	ldr	r3, [r5, #0]
   25c1a:	781a      	ldrb	r2, [r3, #0]
   25c1c:	6963      	ldr	r3, [r4, #20]
   25c1e:	5c9b      	ldrb	r3, [r3, r2]
   25c20:	b953      	cbnz	r3, 25c38 <_scanf_chars+0x58>
   25c22:	bb27      	cbnz	r7, 25c6e <_scanf_chars+0x8e>
   25c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25c28:	2802      	cmp	r0, #2
   25c2a:	d120      	bne.n	25c6e <_scanf_chars+0x8e>
   25c2c:	682b      	ldr	r3, [r5, #0]
   25c2e:	781b      	ldrb	r3, [r3, #0]
   25c30:	f813 3009 	ldrb.w	r3, [r3, r9]
   25c34:	071b      	lsls	r3, r3, #28
   25c36:	d41a      	bmi.n	25c6e <_scanf_chars+0x8e>
   25c38:	6823      	ldr	r3, [r4, #0]
   25c3a:	3701      	adds	r7, #1
   25c3c:	06da      	lsls	r2, r3, #27
   25c3e:	bf5e      	ittt	pl
   25c40:	682b      	ldrpl	r3, [r5, #0]
   25c42:	781b      	ldrbpl	r3, [r3, #0]
   25c44:	f806 3b01 	strbpl.w	r3, [r6], #1
   25c48:	682a      	ldr	r2, [r5, #0]
   25c4a:	686b      	ldr	r3, [r5, #4]
   25c4c:	3201      	adds	r2, #1
   25c4e:	3b01      	subs	r3, #1
   25c50:	602a      	str	r2, [r5, #0]
   25c52:	68a2      	ldr	r2, [r4, #8]
   25c54:	606b      	str	r3, [r5, #4]
   25c56:	3a01      	subs	r2, #1
   25c58:	60a2      	str	r2, [r4, #8]
   25c5a:	b142      	cbz	r2, 25c6e <_scanf_chars+0x8e>
   25c5c:	2b00      	cmp	r3, #0
   25c5e:	dcd7      	bgt.n	25c10 <_scanf_chars+0x30>
   25c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   25c64:	4629      	mov	r1, r5
   25c66:	4640      	mov	r0, r8
   25c68:	4798      	blx	r3
   25c6a:	2800      	cmp	r0, #0
   25c6c:	d0d0      	beq.n	25c10 <_scanf_chars+0x30>
   25c6e:	6823      	ldr	r3, [r4, #0]
   25c70:	f013 0310 	ands.w	r3, r3, #16
   25c74:	d105      	bne.n	25c82 <_scanf_chars+0xa2>
   25c76:	68e2      	ldr	r2, [r4, #12]
   25c78:	3201      	adds	r2, #1
   25c7a:	60e2      	str	r2, [r4, #12]
   25c7c:	69a2      	ldr	r2, [r4, #24]
   25c7e:	b102      	cbz	r2, 25c82 <_scanf_chars+0xa2>
   25c80:	7033      	strb	r3, [r6, #0]
   25c82:	6923      	ldr	r3, [r4, #16]
   25c84:	2000      	movs	r0, #0
   25c86:	441f      	add	r7, r3
   25c88:	6127      	str	r7, [r4, #16]
   25c8a:	e7cb      	b.n	25c24 <_scanf_chars+0x44>
   25c8c:	00030304 	.word	0x00030304

00025c90 <_scanf_i>:
   25c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c94:	4698      	mov	r8, r3
   25c96:	b087      	sub	sp, #28
   25c98:	4b72      	ldr	r3, [pc, #456]	; (25e64 <_scanf_i+0x1d4>)
   25c9a:	460c      	mov	r4, r1
   25c9c:	4682      	mov	sl, r0
   25c9e:	4616      	mov	r6, r2
   25ca0:	4627      	mov	r7, r4
   25ca2:	f04f 0b00 	mov.w	fp, #0
   25ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   25caa:	ab03      	add	r3, sp, #12
   25cac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   25cb0:	4b6d      	ldr	r3, [pc, #436]	; (25e68 <_scanf_i+0x1d8>)
   25cb2:	69a1      	ldr	r1, [r4, #24]
   25cb4:	4a6d      	ldr	r2, [pc, #436]	; (25e6c <_scanf_i+0x1dc>)
   25cb6:	2903      	cmp	r1, #3
   25cb8:	bf18      	it	ne
   25cba:	461a      	movne	r2, r3
   25cbc:	68a3      	ldr	r3, [r4, #8]
   25cbe:	9201      	str	r2, [sp, #4]
   25cc0:	1e5a      	subs	r2, r3, #1
   25cc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   25cc6:	bf89      	itett	hi
   25cc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   25ccc:	f04f 0900 	movls.w	r9, #0
   25cd0:	eb03 0905 	addhi.w	r9, r3, r5
   25cd4:	f240 135d 	movwhi	r3, #349	; 0x15d
   25cd8:	bf88      	it	hi
   25cda:	60a3      	strhi	r3, [r4, #8]
   25cdc:	f857 3b1c 	ldr.w	r3, [r7], #28
   25ce0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   25ce4:	463d      	mov	r5, r7
   25ce6:	6023      	str	r3, [r4, #0]
   25ce8:	6831      	ldr	r1, [r6, #0]
   25cea:	ab03      	add	r3, sp, #12
   25cec:	2202      	movs	r2, #2
   25cee:	7809      	ldrb	r1, [r1, #0]
   25cf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   25cf4:	f005 f88c 	bl	2ae10 <memchr>
   25cf8:	b328      	cbz	r0, 25d46 <_scanf_i+0xb6>
   25cfa:	f1bb 0f01 	cmp.w	fp, #1
   25cfe:	d159      	bne.n	25db4 <_scanf_i+0x124>
   25d00:	6862      	ldr	r2, [r4, #4]
   25d02:	b92a      	cbnz	r2, 25d10 <_scanf_i+0x80>
   25d04:	6822      	ldr	r2, [r4, #0]
   25d06:	2308      	movs	r3, #8
   25d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   25d0c:	6063      	str	r3, [r4, #4]
   25d0e:	6022      	str	r2, [r4, #0]
   25d10:	6822      	ldr	r2, [r4, #0]
   25d12:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   25d16:	6022      	str	r2, [r4, #0]
   25d18:	68a2      	ldr	r2, [r4, #8]
   25d1a:	1e51      	subs	r1, r2, #1
   25d1c:	60a1      	str	r1, [r4, #8]
   25d1e:	b192      	cbz	r2, 25d46 <_scanf_i+0xb6>
   25d20:	6832      	ldr	r2, [r6, #0]
   25d22:	1c51      	adds	r1, r2, #1
   25d24:	6031      	str	r1, [r6, #0]
   25d26:	7812      	ldrb	r2, [r2, #0]
   25d28:	f805 2b01 	strb.w	r2, [r5], #1
   25d2c:	6872      	ldr	r2, [r6, #4]
   25d2e:	3a01      	subs	r2, #1
   25d30:	2a00      	cmp	r2, #0
   25d32:	6072      	str	r2, [r6, #4]
   25d34:	dc07      	bgt.n	25d46 <_scanf_i+0xb6>
   25d36:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   25d3a:	4631      	mov	r1, r6
   25d3c:	4650      	mov	r0, sl
   25d3e:	4790      	blx	r2
   25d40:	2800      	cmp	r0, #0
   25d42:	f040 8085 	bne.w	25e50 <_scanf_i+0x1c0>
   25d46:	f10b 0b01 	add.w	fp, fp, #1
   25d4a:	f1bb 0f03 	cmp.w	fp, #3
   25d4e:	d1cb      	bne.n	25ce8 <_scanf_i+0x58>
   25d50:	6863      	ldr	r3, [r4, #4]
   25d52:	b90b      	cbnz	r3, 25d58 <_scanf_i+0xc8>
   25d54:	230a      	movs	r3, #10
   25d56:	6063      	str	r3, [r4, #4]
   25d58:	6863      	ldr	r3, [r4, #4]
   25d5a:	f04f 0b00 	mov.w	fp, #0
   25d5e:	4944      	ldr	r1, [pc, #272]	; (25e70 <_scanf_i+0x1e0>)
   25d60:	6960      	ldr	r0, [r4, #20]
   25d62:	1ac9      	subs	r1, r1, r3
   25d64:	f006 f896 	bl	2be94 <__sccl>
   25d68:	68a3      	ldr	r3, [r4, #8]
   25d6a:	6822      	ldr	r2, [r4, #0]
   25d6c:	2b00      	cmp	r3, #0
   25d6e:	d03d      	beq.n	25dec <_scanf_i+0x15c>
   25d70:	6831      	ldr	r1, [r6, #0]
   25d72:	6960      	ldr	r0, [r4, #20]
   25d74:	f891 c000 	ldrb.w	ip, [r1]
   25d78:	f810 000c 	ldrb.w	r0, [r0, ip]
   25d7c:	2800      	cmp	r0, #0
   25d7e:	d035      	beq.n	25dec <_scanf_i+0x15c>
   25d80:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   25d84:	d124      	bne.n	25dd0 <_scanf_i+0x140>
   25d86:	0510      	lsls	r0, r2, #20
   25d88:	d522      	bpl.n	25dd0 <_scanf_i+0x140>
   25d8a:	f10b 0b01 	add.w	fp, fp, #1
   25d8e:	f1b9 0f00 	cmp.w	r9, #0
   25d92:	d003      	beq.n	25d9c <_scanf_i+0x10c>
   25d94:	3301      	adds	r3, #1
   25d96:	f109 39ff 	add.w	r9, r9, #4294967295
   25d9a:	60a3      	str	r3, [r4, #8]
   25d9c:	6873      	ldr	r3, [r6, #4]
   25d9e:	3b01      	subs	r3, #1
   25da0:	2b00      	cmp	r3, #0
   25da2:	6073      	str	r3, [r6, #4]
   25da4:	dd1b      	ble.n	25dde <_scanf_i+0x14e>
   25da6:	6833      	ldr	r3, [r6, #0]
   25da8:	3301      	adds	r3, #1
   25daa:	6033      	str	r3, [r6, #0]
   25dac:	68a3      	ldr	r3, [r4, #8]
   25dae:	3b01      	subs	r3, #1
   25db0:	60a3      	str	r3, [r4, #8]
   25db2:	e7d9      	b.n	25d68 <_scanf_i+0xd8>
   25db4:	f1bb 0f02 	cmp.w	fp, #2
   25db8:	d1ae      	bne.n	25d18 <_scanf_i+0x88>
   25dba:	6822      	ldr	r2, [r4, #0]
   25dbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   25dc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   25dc4:	d1bf      	bne.n	25d46 <_scanf_i+0xb6>
   25dc6:	2310      	movs	r3, #16
   25dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   25dcc:	6063      	str	r3, [r4, #4]
   25dce:	e7a2      	b.n	25d16 <_scanf_i+0x86>
   25dd0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   25dd4:	6022      	str	r2, [r4, #0]
   25dd6:	780b      	ldrb	r3, [r1, #0]
   25dd8:	f805 3b01 	strb.w	r3, [r5], #1
   25ddc:	e7de      	b.n	25d9c <_scanf_i+0x10c>
   25dde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   25de2:	4631      	mov	r1, r6
   25de4:	4650      	mov	r0, sl
   25de6:	4798      	blx	r3
   25de8:	2800      	cmp	r0, #0
   25dea:	d0df      	beq.n	25dac <_scanf_i+0x11c>
   25dec:	6823      	ldr	r3, [r4, #0]
   25dee:	05d9      	lsls	r1, r3, #23
   25df0:	d50d      	bpl.n	25e0e <_scanf_i+0x17e>
   25df2:	42bd      	cmp	r5, r7
   25df4:	d909      	bls.n	25e0a <_scanf_i+0x17a>
   25df6:	f105 39ff 	add.w	r9, r5, #4294967295
   25dfa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   25dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   25e02:	4632      	mov	r2, r6
   25e04:	464d      	mov	r5, r9
   25e06:	4650      	mov	r0, sl
   25e08:	4798      	blx	r3
   25e0a:	42bd      	cmp	r5, r7
   25e0c:	d028      	beq.n	25e60 <_scanf_i+0x1d0>
   25e0e:	6822      	ldr	r2, [r4, #0]
   25e10:	f012 0210 	ands.w	r2, r2, #16
   25e14:	d113      	bne.n	25e3e <_scanf_i+0x1ae>
   25e16:	702a      	strb	r2, [r5, #0]
   25e18:	4639      	mov	r1, r7
   25e1a:	6863      	ldr	r3, [r4, #4]
   25e1c:	4650      	mov	r0, sl
   25e1e:	9e01      	ldr	r6, [sp, #4]
   25e20:	47b0      	blx	r6
   25e22:	f8d8 3000 	ldr.w	r3, [r8]
   25e26:	6821      	ldr	r1, [r4, #0]
   25e28:	1d1a      	adds	r2, r3, #4
   25e2a:	f011 0f20 	tst.w	r1, #32
   25e2e:	f8c8 2000 	str.w	r2, [r8]
   25e32:	681b      	ldr	r3, [r3, #0]
   25e34:	d00f      	beq.n	25e56 <_scanf_i+0x1c6>
   25e36:	6018      	str	r0, [r3, #0]
   25e38:	68e3      	ldr	r3, [r4, #12]
   25e3a:	3301      	adds	r3, #1
   25e3c:	60e3      	str	r3, [r4, #12]
   25e3e:	1bed      	subs	r5, r5, r7
   25e40:	2000      	movs	r0, #0
   25e42:	44ab      	add	fp, r5
   25e44:	6925      	ldr	r5, [r4, #16]
   25e46:	445d      	add	r5, fp
   25e48:	6125      	str	r5, [r4, #16]
   25e4a:	b007      	add	sp, #28
   25e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e50:	f04f 0b00 	mov.w	fp, #0
   25e54:	e7ca      	b.n	25dec <_scanf_i+0x15c>
   25e56:	07ca      	lsls	r2, r1, #31
   25e58:	bf4c      	ite	mi
   25e5a:	8018      	strhmi	r0, [r3, #0]
   25e5c:	6018      	strpl	r0, [r3, #0]
   25e5e:	e7eb      	b.n	25e38 <_scanf_i+0x1a8>
   25e60:	2001      	movs	r0, #1
   25e62:	e7f2      	b.n	25e4a <_scanf_i+0x1ba>
   25e64:	0002c490 	.word	0x0002c490
   25e68:	0002b1dd 	.word	0x0002b1dd
   25e6c:	0002b1d9 	.word	0x0002b1d9
   25e70:	0003046f 	.word	0x0003046f

00025e74 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   25e74:	b40c      	push	{r2, r3}
   25e76:	4603      	mov	r3, r0
   25e78:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   25e7a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   25e7c:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   25e7e:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   25e80:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   25e84:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   25e86:	4798      	blx	r3
	va_end(args);

	return res;
}
   25e88:	b003      	add	sp, #12
   25e8a:	f85d eb04 	ldr.w	lr, [sp], #4
   25e8e:	b002      	add	sp, #8
   25e90:	4770      	bx	lr

00025e92 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25e92:	b140      	cbz	r0, 25ea6 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25e94:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25e96:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25e9a:	2b02      	cmp	r3, #2
   25e9c:	d006      	beq.n	25eac <sys_notify_validate+0x1a>
   25e9e:	2b03      	cmp	r3, #3
   25ea0:	d004      	beq.n	25eac <sys_notify_validate+0x1a>
   25ea2:	2b01      	cmp	r3, #1
   25ea4:	d005      	beq.n	25eb2 <sys_notify_validate+0x20>
		return -EINVAL;
   25ea6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25eaa:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25eac:	6803      	ldr	r3, [r0, #0]
   25eae:	2b00      	cmp	r3, #0
   25eb0:	d0f9      	beq.n	25ea6 <sys_notify_validate+0x14>
		notify->result = 0;
   25eb2:	2300      	movs	r3, #0
   25eb4:	6083      	str	r3, [r0, #8]
   25eb6:	4618      	mov	r0, r3
   25eb8:	4770      	bx	lr

00025eba <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25eba:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   25ebc:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   25ebe:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25ec2:	2b02      	cmp	r3, #2
	notify->result = res;
   25ec4:	6081      	str	r1, [r0, #8]
	switch (method) {
   25ec6:	d00b      	beq.n	25ee0 <sys_notify_finalize+0x26>
   25ec8:	2b03      	cmp	r3, #3
   25eca:	d10c      	bne.n	25ee6 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   25ecc:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   25ece:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25ed0:	2200      	movs	r2, #0
   25ed2:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25ed4:	b113      	cbz	r3, 25edc <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   25ed6:	4618      	mov	r0, r3
   25ed8:	f7fe fa04 	bl	242e4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25edc:	4620      	mov	r0, r4
   25ede:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
   25ee0:	2400      	movs	r4, #0
		sig = notify->method.signal;
   25ee2:	6803      	ldr	r3, [r0, #0]
		break;
   25ee4:	e7f4      	b.n	25ed0 <sys_notify_finalize+0x16>
	switch (method) {
   25ee6:	2400      	movs	r4, #0
   25ee8:	4623      	mov	r3, r4
   25eea:	e7f1      	b.n	25ed0 <sys_notify_finalize+0x16>

00025eec <arch_printk_char_out>:
}
   25eec:	2000      	movs	r0, #0
   25eee:	4770      	bx	lr

00025ef0 <str_out>:
{
   25ef0:	b530      	push	{r4, r5, lr}
   25ef2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ef4:	680c      	ldr	r4, [r1, #0]
   25ef6:	1c55      	adds	r5, r2, #1
   25ef8:	b114      	cbz	r4, 25f00 <str_out+0x10>
   25efa:	684b      	ldr	r3, [r1, #4]
   25efc:	4293      	cmp	r3, r2
   25efe:	dc01      	bgt.n	25f04 <str_out+0x14>
		ctx->count++;
   25f00:	608d      	str	r5, [r1, #8]
}
   25f02:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25f04:	3b01      	subs	r3, #1
   25f06:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25f08:	bf08      	it	eq
   25f0a:	2200      	moveq	r2, #0
   25f0c:	608d      	str	r5, [r1, #8]
   25f0e:	bf0c      	ite	eq
   25f10:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25f12:	54a0      	strbne	r0, [r4, r2]
   25f14:	e7f5      	b.n	25f02 <str_out+0x12>

00025f16 <printk>:
{
   25f16:	b40f      	push	{r0, r1, r2, r3}
   25f18:	b507      	push	{r0, r1, r2, lr}
   25f1a:	a904      	add	r1, sp, #16
   25f1c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25f20:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   25f22:	f7ed fb35 	bl	13590 <vprintk>
}
   25f26:	b003      	add	sp, #12
   25f28:	f85d eb04 	ldr.w	lr, [sp], #4
   25f2c:	b004      	add	sp, #16
   25f2e:	4770      	bx	lr

00025f30 <snprintk>:
{
   25f30:	b40c      	push	{r2, r3}
   25f32:	b507      	push	{r0, r1, r2, lr}
   25f34:	ab04      	add	r3, sp, #16
   25f36:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25f3a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25f3c:	f7ed fb36 	bl	135ac <vsnprintk>
}
   25f40:	b003      	add	sp, #12
   25f42:	f85d eb04 	ldr.w	lr, [sp], #4
   25f46:	b002      	add	sp, #8
   25f48:	4770      	bx	lr

00025f4a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25f4a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25f4c:	f013 0307 	ands.w	r3, r3, #7
   25f50:	d105      	bne.n	25f5e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25f52:	6803      	ldr	r3, [r0, #0]
   25f54:	2b00      	cmp	r3, #0
		evt = EVT_START;
   25f56:	bf0c      	ite	eq
   25f58:	2000      	moveq	r0, #0
   25f5a:	2003      	movne	r0, #3
   25f5c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25f5e:	2b02      	cmp	r3, #2
   25f60:	d105      	bne.n	25f6e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25f62:	8b43      	ldrh	r3, [r0, #26]
   25f64:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   25f66:	bf14      	ite	ne
   25f68:	2000      	movne	r0, #0
   25f6a:	2004      	moveq	r0, #4
   25f6c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25f6e:	2b01      	cmp	r3, #1
   25f70:	d105      	bne.n	25f7e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25f72:	6803      	ldr	r3, [r0, #0]
   25f74:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   25f76:	bf0c      	ite	eq
   25f78:	2000      	moveq	r0, #0
   25f7a:	2005      	movne	r0, #5
   25f7c:	4770      	bx	lr
	int evt = EVT_NOP;
   25f7e:	2000      	movs	r0, #0
}
   25f80:	4770      	bx	lr

00025f82 <notify_one>:
{
   25f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25f84:	460d      	mov	r5, r1
   25f86:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25f88:	4619      	mov	r1, r3
   25f8a:	1d28      	adds	r0, r5, #4
{
   25f8c:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25f8e:	9300      	str	r3, [sp, #0]
   25f90:	f7ff ff93 	bl	25eba <sys_notify_finalize>
	if (cb) {
   25f94:	4604      	mov	r4, r0
   25f96:	b140      	cbz	r0, 25faa <notify_one+0x28>
		cb(mgr, cli, state, res);
   25f98:	e9dd 3200 	ldrd	r3, r2, [sp]
   25f9c:	4629      	mov	r1, r5
   25f9e:	4630      	mov	r0, r6
   25fa0:	46a4      	mov	ip, r4
}
   25fa2:	b002      	add	sp, #8
   25fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   25fa8:	4760      	bx	ip
}
   25faa:	b002      	add	sp, #8
   25fac:	bd70      	pop	{r4, r5, r6, pc}

00025fae <transition_complete>:
{
   25fae:	b410      	push	{r4}
	__asm__ volatile(
   25fb0:	f04f 0420 	mov.w	r4, #32
   25fb4:	f3ef 8211 	mrs	r2, BASEPRI
   25fb8:	f384 8812 	msr	BASEPRI_MAX, r4
   25fbc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25fc0:	6141      	str	r1, [r0, #20]
}
   25fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   25fc6:	2101      	movs	r1, #1
   25fc8:	f7ed bb04 	b.w	135d4 <process_event>

00025fcc <validate_args>:
{
   25fcc:	b510      	push	{r4, lr}
   25fce:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25fd0:	b140      	cbz	r0, 25fe4 <validate_args+0x18>
   25fd2:	b139      	cbz	r1, 25fe4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   25fd4:	1d08      	adds	r0, r1, #4
   25fd6:	f7ff ff5c 	bl	25e92 <sys_notify_validate>
	if ((rv == 0)
   25fda:	b928      	cbnz	r0, 25fe8 <validate_args+0x1c>
	    && ((cli->notify.flags
   25fdc:	68a3      	ldr	r3, [r4, #8]
   25fde:	f033 0303 	bics.w	r3, r3, #3
   25fe2:	d001      	beq.n	25fe8 <validate_args+0x1c>
		rv = -EINVAL;
   25fe4:	f06f 0015 	mvn.w	r0, #21
}
   25fe8:	bd10      	pop	{r4, pc}

00025fea <onoff_manager_init>:
{
   25fea:	b538      	push	{r3, r4, r5, lr}
   25fec:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25fee:	4605      	mov	r5, r0
   25ff0:	b158      	cbz	r0, 2600a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25ff2:	b151      	cbz	r1, 2600a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25ff4:	680b      	ldr	r3, [r1, #0]
   25ff6:	b143      	cbz	r3, 2600a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25ff8:	684b      	ldr	r3, [r1, #4]
   25ffa:	b133      	cbz	r3, 2600a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25ffc:	221c      	movs	r2, #28
   25ffe:	2100      	movs	r1, #0
   26000:	f004 ff42 	bl	2ae88 <memset>
	return 0;
   26004:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   26006:	612c      	str	r4, [r5, #16]
}
   26008:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2600a:	f06f 0015 	mvn.w	r0, #21
   2600e:	e7fb      	b.n	26008 <onoff_manager_init+0x1e>

00026010 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   26010:	b570      	push	{r4, r5, r6, lr}
   26012:	4604      	mov	r4, r0
   26014:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   26016:	f7ff ffd9 	bl	25fcc <validate_args>

	if (rv < 0) {
   2601a:	1e05      	subs	r5, r0, #0
   2601c:	db31      	blt.n	26082 <onoff_request+0x72>
   2601e:	f04f 0320 	mov.w	r3, #32
   26022:	f3ef 8111 	mrs	r1, BASEPRI
   26026:	f383 8812 	msr	BASEPRI_MAX, r3
   2602a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2602e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   26032:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26034:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   26036:	42ab      	cmp	r3, r5
   26038:	f000 0207 	and.w	r2, r0, #7
   2603c:	d02e      	beq.n	2609c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2603e:	2a02      	cmp	r2, #2
   26040:	d10e      	bne.n	26060 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   26042:	3301      	adds	r3, #1
   26044:	8363      	strh	r3, [r4, #26]
	rv = state;
   26046:	4615      	mov	r5, r2
		notify = true;
   26048:	2301      	movs	r3, #1
	__asm__ volatile(
   2604a:	f381 8811 	msr	BASEPRI, r1
   2604e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   26052:	b1b3      	cbz	r3, 26082 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   26054:	2300      	movs	r3, #0
   26056:	4631      	mov	r1, r6
   26058:	4620      	mov	r0, r4
   2605a:	f7ff ff92 	bl	25f82 <notify_one>
   2605e:	e010      	b.n	26082 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   26060:	0783      	lsls	r3, r0, #30
   26062:	d001      	beq.n	26068 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   26064:	2a06      	cmp	r2, #6
   26066:	d10e      	bne.n	26086 <onoff_request+0x76>
	parent->next = child;
   26068:	2300      	movs	r3, #0
   2606a:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   2606c:	6863      	ldr	r3, [r4, #4]
   2606e:	b993      	cbnz	r3, 26096 <onoff_request+0x86>
	list->head = node;
   26070:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   26074:	4615      	mov	r5, r2
   26076:	b962      	cbnz	r2, 26092 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   26078:	460a      	mov	r2, r1
   2607a:	4620      	mov	r0, r4
   2607c:	2102      	movs	r1, #2
   2607e:	f7ed faa9 	bl	135d4 <process_event>
		}
	}

	return rv;
}
   26082:	4628      	mov	r0, r5
   26084:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   26086:	2a05      	cmp	r2, #5
   26088:	bf0c      	ite	eq
   2608a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2608e:	f06f 0504 	mvnne.w	r5, #4
   26092:	2300      	movs	r3, #0
   26094:	e7d9      	b.n	2604a <onoff_request+0x3a>
	parent->next = child;
   26096:	601e      	str	r6, [r3, #0]
	list->tail = node;
   26098:	6066      	str	r6, [r4, #4]
}
   2609a:	e7eb      	b.n	26074 <onoff_request+0x64>
		rv = -EAGAIN;
   2609c:	f06f 050a 	mvn.w	r5, #10
   260a0:	e7f7      	b.n	26092 <onoff_request+0x82>

000260a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   260a2:	4604      	mov	r4, r0
   260a4:	b508      	push	{r3, lr}
   260a6:	4608      	mov	r0, r1
   260a8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   260aa:	461a      	mov	r2, r3
   260ac:	47a0      	blx	r4
	return z_impl_z_current_get();
   260ae:	f7fd fecd 	bl	23e4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   260b2:	f7f0 f8cb 	bl	1624c <z_impl_k_thread_abort>

000260b6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   260b6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   260ba:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   260bc:	0840      	lsrs	r0, r0, #1
   260be:	4770      	bx	lr

000260c0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   260c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260c2:	460c      	mov	r4, r1
   260c4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   260c6:	f7ff fff6 	bl	260b6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   260ca:	fab0 f080 	clz	r0, r0
   260ce:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   260d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   260d6:	f8dc 6010 	ldr.w	r6, [ip, #16]
   260da:	00e2      	lsls	r2, r4, #3
   260dc:	1d17      	adds	r7, r2, #4
   260de:	b2a5      	uxth	r5, r4
   260e0:	3206      	adds	r2, #6
   260e2:	b956      	cbnz	r6, 260fa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   260e4:	2101      	movs	r1, #1
   260e6:	fa01 f000 	lsl.w	r0, r1, r0
   260ea:	68d9      	ldr	r1, [r3, #12]
   260ec:	4301      	orrs	r1, r0
   260ee:	60d9      	str	r1, [r3, #12]
		b->next = c;
   260f0:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   260f4:	53dd      	strh	r5, [r3, r7]
   260f6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   260f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   260fa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   260fc:	3104      	adds	r1, #4
   260fe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26100:	53d8      	strh	r0, [r3, r7]
   26102:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26106:	529e      	strh	r6, [r3, r2]
   26108:	80c5      	strh	r5, [r0, #6]
   2610a:	525d      	strh	r5, [r3, r1]
   2610c:	e7f4      	b.n	260f8 <free_list_add+0x38>

0002610e <free_list_remove_bidx>:
{
   2610e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26110:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26114:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26116:	4299      	cmp	r1, r3
   26118:	f102 0104 	add.w	r1, r2, #4
   2611c:	d10a      	bne.n	26134 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2611e:	2301      	movs	r3, #1
   26120:	fa03 f202 	lsl.w	r2, r3, r2
   26124:	68c3      	ldr	r3, [r0, #12]
   26126:	ea23 0302 	bic.w	r3, r3, r2
   2612a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2612c:	2300      	movs	r3, #0
   2612e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26132:	bd10      	pop	{r4, pc}
   26134:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26136:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2613a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2613e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26142:	80cb      	strh	r3, [r1, #6]
   26144:	8082      	strh	r2, [r0, #4]
}
   26146:	e7f4      	b.n	26132 <free_list_remove_bidx+0x24>

00026148 <free_list_remove>:
{
   26148:	b510      	push	{r4, lr}
   2614a:	4603      	mov	r3, r0
   2614c:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   2614e:	f7ff ffb2 	bl	260b6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26152:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   26156:	4621      	mov	r1, r4
}
   26158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   2615c:	f1c0 021f 	rsb	r2, r0, #31
   26160:	4618      	mov	r0, r3
   26162:	f7ff bfd4 	b.w	2610e <free_list_remove_bidx>

00026166 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   26166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2616a:	fab1 f581 	clz	r5, r1
   2616e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   26172:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   26176:	693a      	ldr	r2, [r7, #16]
{
   26178:	4603      	mov	r3, r0
   2617a:	460e      	mov	r6, r1
	if (b->next) {
   2617c:	b1ca      	cbz	r2, 261b2 <alloc_chunk+0x4c>
   2617e:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   26182:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   26184:	4618      	mov	r0, r3
   26186:	4621      	mov	r1, r4
   26188:	f7ff ff95 	bl	260b6 <chunk_size>
   2618c:	42b0      	cmp	r0, r6
   2618e:	d307      	bcc.n	261a0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   26190:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   26192:	4621      	mov	r1, r4
   26194:	4618      	mov	r0, r3
   26196:	f7ff ffba 	bl	2610e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2619a:	4620      	mov	r0, r4
   2619c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   261a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   261a4:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   261a6:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   261aa:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   261ac:	d001      	beq.n	261b2 <alloc_chunk+0x4c>
   261ae:	428a      	cmp	r2, r1
   261b0:	d1e7      	bne.n	26182 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   261b2:	f04f 34ff 	mov.w	r4, #4294967295
   261b6:	68d9      	ldr	r1, [r3, #12]
   261b8:	f1c5 0520 	rsb	r5, r5, #32
   261bc:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   261be:	400c      	ands	r4, r1
   261c0:	d0eb      	beq.n	2619a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   261c2:	fa94 f2a4 	rbit	r2, r4
   261c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   261ca:	1d11      	adds	r1, r2, #4
   261cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   261d0:	e7df      	b.n	26192 <alloc_chunk+0x2c>

000261d2 <merge_chunks>:
{
   261d2:	b538      	push	{r3, r4, r5, lr}
   261d4:	4603      	mov	r3, r0
   261d6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   261d8:	f7ff ff6d 	bl	260b6 <chunk_size>
   261dc:	4611      	mov	r1, r2
   261de:	4604      	mov	r4, r0
   261e0:	4618      	mov	r0, r3
   261e2:	f7ff ff68 	bl	260b6 <chunk_size>
   261e6:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   261e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   261ec:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   261ee:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   261f0:	4618      	mov	r0, r3
   261f2:	4611      	mov	r1, r2
   261f4:	f7ff ff5f 	bl	260b6 <chunk_size>
	void *cmem = &buf[c];
   261f8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   261fa:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   261fe:	bd38      	pop	{r3, r4, r5, pc}

00026200 <split_chunks>:
{
   26200:	b538      	push	{r3, r4, r5, lr}
   26202:	4603      	mov	r3, r0
   26204:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   26206:	f7ff ff56 	bl	260b6 <chunk_size>
	chunksz_t lsz = rc - lc;
   2620a:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   2620c:	1aa5      	subs	r5, r4, r2
   2620e:	4405      	add	r5, r0
   26210:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26214:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26216:	8060      	strh	r0, [r4, #2]
   26218:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2621c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2621e:	8044      	strh	r4, [r0, #2]
   26220:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26224:	4618      	mov	r0, r3
   26226:	4611      	mov	r1, r2
   26228:	f7ff ff45 	bl	260b6 <chunk_size>
	void *cmem = &buf[c];
   2622c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2622e:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   26232:	bd38      	pop	{r3, r4, r5, pc}

00026234 <free_chunk>:
{
   26234:	b538      	push	{r3, r4, r5, lr}
   26236:	4605      	mov	r5, r0
   26238:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   2623a:	f7ff ff3c 	bl	260b6 <chunk_size>
   2623e:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   26240:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26244:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26246:	07da      	lsls	r2, r3, #31
   26248:	d40b      	bmi.n	26262 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   2624a:	4628      	mov	r0, r5
   2624c:	f7ff ff7c 	bl	26148 <free_list_remove>
	return c + chunk_size(h, c);
   26250:	4621      	mov	r1, r4
   26252:	4628      	mov	r0, r5
   26254:	f7ff ff2f 	bl	260b6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26258:	4621      	mov	r1, r4
   2625a:	1822      	adds	r2, r4, r0
   2625c:	4628      	mov	r0, r5
   2625e:	f7ff ffb8 	bl	261d2 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26262:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26266:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26268:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2626c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2626e:	07db      	lsls	r3, r3, #31
   26270:	d40c      	bmi.n	2628c <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   26272:	4628      	mov	r0, r5
   26274:	f7ff ff68 	bl	26148 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26278:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2627c:	4622      	mov	r2, r4
   2627e:	1a61      	subs	r1, r4, r1
   26280:	4628      	mov	r0, r5
   26282:	f7ff ffa6 	bl	261d2 <merge_chunks>
   26286:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2628a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2628c:	4621      	mov	r1, r4
   2628e:	4628      	mov	r0, r5
}
   26290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26294:	f7ff bf14 	b.w	260c0 <free_list_add>

00026298 <sys_heap_free>:
	if (mem == NULL) {
   26298:	b161      	cbz	r1, 262b4 <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   2629a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2629c:	3904      	subs	r1, #4
   2629e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   262a0:	f021 0307 	bic.w	r3, r1, #7
   262a4:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   262a6:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   262a8:	08c9      	lsrs	r1, r1, #3
   262aa:	f022 0201 	bic.w	r2, r2, #1
   262ae:	805a      	strh	r2, [r3, #2]
   262b0:	f7ff bfc0 	b.w	26234 <free_chunk>
}
   262b4:	4770      	bx	lr

000262b6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   262b6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   262b8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   262ba:	b909      	cbnz	r1, 262c0 <sys_heap_alloc+0xa>
		return NULL;
   262bc:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   262be:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   262c0:	68ab      	ldr	r3, [r5, #8]
   262c2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   262c6:	d9f9      	bls.n	262bc <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   262c8:	310b      	adds	r1, #11
   262ca:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   262cc:	4621      	mov	r1, r4
   262ce:	4628      	mov	r0, r5
   262d0:	f7ff ff49 	bl	26166 <alloc_chunk>
	if (c == 0U) {
   262d4:	4606      	mov	r6, r0
   262d6:	2800      	cmp	r0, #0
   262d8:	d0f0      	beq.n	262bc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   262da:	4601      	mov	r1, r0
   262dc:	4628      	mov	r0, r5
   262de:	f7ff feea 	bl	260b6 <chunk_size>
   262e2:	42a0      	cmp	r0, r4
   262e4:	d909      	bls.n	262fa <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   262e6:	4434      	add	r4, r6
   262e8:	4631      	mov	r1, r6
   262ea:	4628      	mov	r0, r5
   262ec:	4622      	mov	r2, r4
   262ee:	f7ff ff87 	bl	26200 <split_chunks>
		free_list_add(h, c + chunk_sz);
   262f2:	4621      	mov	r1, r4
   262f4:	4628      	mov	r0, r5
   262f6:	f7ff fee3 	bl	260c0 <free_list_add>
	void *cmem = &buf[c];
   262fa:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   262fe:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26300:	8853      	ldrh	r3, [r2, #2]
   26302:	3004      	adds	r0, #4
   26304:	f043 0301 	orr.w	r3, r3, #1
   26308:	8053      	strh	r3, [r2, #2]
	return chunk_mem(h, c);
   2630a:	e7d8      	b.n	262be <sys_heap_alloc+0x8>

0002630c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26310:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   26312:	424a      	negs	r2, r1
   26314:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   26318:	ea31 0202 	bics.w	r2, r1, r2
{
   2631c:	4603      	mov	r3, r0
	if (align != rew) {
   2631e:	d00a      	beq.n	26336 <sys_heap_aligned_alloc+0x2a>
		return false;
   26320:	2f04      	cmp	r7, #4
   26322:	463a      	mov	r2, r7
   26324:	bf28      	it	cs
   26326:	2204      	movcs	r2, #4
   26328:	46b9      	mov	r9, r7
		align -= rew;
   2632a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2632c:	b974      	cbnz	r4, 2634c <sys_heap_aligned_alloc+0x40>
		return NULL;
   2632e:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   26330:	4628      	mov	r0, r5
   26332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   26336:	2904      	cmp	r1, #4
   26338:	d804      	bhi.n	26344 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   2633a:	4621      	mov	r1, r4
}
   2633c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   26340:	f7ff bfb9 	b.w	262b6 <sys_heap_alloc>
		rew = 0;
   26344:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   26348:	2204      	movs	r2, #4
   2634a:	e7ef      	b.n	2632c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   2634c:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2634e:	68b3      	ldr	r3, [r6, #8]
   26350:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   26354:	d9eb      	bls.n	2632e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26356:	f104 010b 	add.w	r1, r4, #11
   2635a:	4439      	add	r1, r7
   2635c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2635e:	4630      	mov	r0, r6
   26360:	08c9      	lsrs	r1, r1, #3
   26362:	f7ff ff00 	bl	26166 <alloc_chunk>
	if (c0 == 0) {
   26366:	4680      	mov	r8, r0
   26368:	2800      	cmp	r0, #0
   2636a:	d0e0      	beq.n	2632e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2636c:	f109 0504 	add.w	r5, r9, #4
   26370:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   26374:	1e7b      	subs	r3, r7, #1
   26376:	4435      	add	r5, r6
   26378:	441d      	add	r5, r3
   2637a:	427f      	negs	r7, r7
   2637c:	403d      	ands	r5, r7
   2637e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26382:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26384:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26386:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26388:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2638a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2638e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   26390:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26394:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   26398:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2639c:	d208      	bcs.n	263b0 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   2639e:	4601      	mov	r1, r0
   263a0:	463a      	mov	r2, r7
   263a2:	4630      	mov	r0, r6
   263a4:	f7ff ff2c 	bl	26200 <split_chunks>
		free_list_add(h, c0);
   263a8:	4641      	mov	r1, r8
   263aa:	4630      	mov	r0, r6
   263ac:	f7ff fe88 	bl	260c0 <free_list_add>
	return c + chunk_size(h, c);
   263b0:	4639      	mov	r1, r7
   263b2:	4630      	mov	r0, r6
   263b4:	f7ff fe7f 	bl	260b6 <chunk_size>
   263b8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   263ba:	4284      	cmp	r4, r0
   263bc:	d208      	bcs.n	263d0 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c, c_end);
   263be:	4639      	mov	r1, r7
   263c0:	4630      	mov	r0, r6
   263c2:	4622      	mov	r2, r4
   263c4:	f7ff ff1c 	bl	26200 <split_chunks>
		free_list_add(h, c_end);
   263c8:	4621      	mov	r1, r4
   263ca:	4630      	mov	r0, r6
   263cc:	f7ff fe78 	bl	260c0 <free_list_add>
	void *cmem = &buf[c];
   263d0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   263d4:	8873      	ldrh	r3, [r6, #2]
   263d6:	f043 0301 	orr.w	r3, r3, #1
   263da:	8073      	strh	r3, [r6, #2]
   263dc:	e7a8      	b.n	26330 <sys_heap_aligned_alloc+0x24>

000263de <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   263de:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   263e0:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   263e2:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   263e4:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   263e8:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   263ec:	1ad2      	subs	r2, r2, r3
{
   263ee:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   263f0:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   263f2:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   263f4:	fab4 f084 	clz	r0, r4
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   263f8:	2500      	movs	r5, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   263fa:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   263fe:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26400:	1dc1      	adds	r1, r0, #7
	h->end_chunk = heap_sz;
   26402:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   26404:	60dd      	str	r5, [r3, #12]
   26406:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   26408:	f103 0610 	add.w	r6, r3, #16
   2640c:	4418      	add	r0, r3
   2640e:	4286      	cmp	r6, r0
   26410:	d118      	bne.n	26444 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26412:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26414:	f040 0001 	orr.w	r0, r0, #1
   26418:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2641a:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2641c:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   2641e:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
   26422:	801d      	strh	r5, [r3, #0]
   26424:	8077      	strh	r7, [r6, #2]
   26426:	189e      	adds	r6, r3, r2
   26428:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2642c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   26430:	8075      	strh	r5, [r6, #2]
   26432:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26434:	8862      	ldrh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   26436:	4618      	mov	r0, r3
   26438:	f042 0201 	orr.w	r2, r2, #1
   2643c:	8062      	strh	r2, [r4, #2]
}
   2643e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   26440:	f7ff be3e 	b.w	260c0 <free_list_add>
		h->buckets[i].next = 0;
   26444:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   26448:	e7e1      	b.n	2640e <sys_heap_init+0x30>

0002644a <_ldiv5>:
{
   2644a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   2644e:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   26452:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   26456:	fba2 bc03 	umull	fp, ip, r2, r3
   2645a:	eb1b 0603 	adds.w	r6, fp, r3
   2645e:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   26462:	462f      	mov	r7, r5
   26464:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   26466:	fba4 4503 	umull	r4, r5, r4, r3
   2646a:	eb1b 0204 	adds.w	r2, fp, r4
   2646e:	eb4c 0105 	adc.w	r1, ip, r5
   26472:	19d2      	adds	r2, r2, r7
	result >>= 32;
   26474:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   26476:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   2647a:	1863      	adds	r3, r4, r1
   2647c:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   26480:	e9c0 3200 	strd	r3, r2, [r0]
}
   26484:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

00026488 <_get_digit>:
	if (*digit_count > 0) {
   26488:	680b      	ldr	r3, [r1, #0]
{
   2648a:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   2648c:	2b00      	cmp	r3, #0
   2648e:	dd10      	ble.n	264b2 <_get_digit+0x2a>
		--*digit_count;
   26490:	3b01      	subs	r3, #1
   26492:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   26494:	210a      	movs	r1, #10
   26496:	6802      	ldr	r2, [r0, #0]
   26498:	6844      	ldr	r4, [r0, #4]
   2649a:	fba2 5601 	umull	r5, r6, r2, r1
   2649e:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   264a2:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   264a6:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   264aa:	0f31      	lsrs	r1, r6, #28
   264ac:	3130      	adds	r1, #48	; 0x30
}
   264ae:	4608      	mov	r0, r1
   264b0:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   264b2:	2130      	movs	r1, #48	; 0x30
   264b4:	e7fb      	b.n	264ae <_get_digit+0x26>

000264b6 <outs>:
{
   264b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   264ba:	4680      	mov	r8, r0
   264bc:	4689      	mov	r9, r1
   264be:	4616      	mov	r6, r2
   264c0:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   264c2:	4615      	mov	r5, r2
   264c4:	42bd      	cmp	r5, r7
   264c6:	eba5 0406 	sub.w	r4, r5, r6
   264ca:	d305      	bcc.n	264d8 <outs+0x22>
   264cc:	b10f      	cbz	r7, 264d2 <outs+0x1c>
	return (int)count;
   264ce:	4620      	mov	r0, r4
   264d0:	e008      	b.n	264e4 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   264d2:	782b      	ldrb	r3, [r5, #0]
   264d4:	2b00      	cmp	r3, #0
   264d6:	d0fa      	beq.n	264ce <outs+0x18>
		int rc = out((int)*sp++, ctx);
   264d8:	4649      	mov	r1, r9
   264da:	f815 0b01 	ldrb.w	r0, [r5], #1
   264de:	47c0      	blx	r8
		if (rc < 0) {
   264e0:	2800      	cmp	r0, #0
   264e2:	daef      	bge.n	264c4 <outs+0xe>
}
   264e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000264e8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_SAU_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_SAU_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   264e8:	4770      	bx	lr

000264ea <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   264ea:	b084      	sub	sp, #16
   264ec:	ab04      	add	r3, sp, #16
   264ee:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   264f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   264f6:	2b06      	cmp	r3, #6
   264f8:	d108      	bne.n	2650c <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   264fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   264fe:	2201      	movs	r2, #1
   26500:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26504:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   26508:	bf20      	wfe
    while (true)
   2650a:	e7fd      	b.n	26508 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2650c:	b004      	add	sp, #16
   2650e:	4770      	bx	lr

00026510 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   26510:	b084      	sub	sp, #16
   26512:	ab04      	add	r3, sp, #16
   26514:	e903 0007 	stmdb	r3, {r0, r1, r2}
   26518:	2300      	movs	r3, #0
   2651a:	f383 8811 	msr	BASEPRI, r3
   2651e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26522:	b004      	add	sp, #16
   26524:	4770      	bx	lr

00026526 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26526:	f002 b992 	b.w	2884e <sys_clock_cycle_get_32>

0002652a <dummy_timestamp>:
   2652a:	2000      	movs	r0, #0
   2652c:	4770      	bx	lr

0002652e <log_string_sync>:
{
   2652e:	b40e      	push	{r1, r2, r3}
   26530:	b503      	push	{r0, r1, lr}
   26532:	aa03      	add	r2, sp, #12
   26534:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   26538:	2300      	movs	r3, #0
	va_start(ap, fmt);
   2653a:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   2653c:	f7ee f85e 	bl	145fc <log_generic>
}
   26540:	b002      	add	sp, #8
   26542:	f85d eb04 	ldr.w	lr, [sp], #4
   26546:	b003      	add	sp, #12
   26548:	4770      	bx	lr

0002654a <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   2654a:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   2654c:	f7ee f896 	bl	1467c <log_init>
	}

	return 0;
}
   26550:	2000      	movs	r0, #0
   26552:	bd08      	pop	{r3, pc}

00026554 <z_log_strdup>:
}
   26554:	4770      	bx	lr

00026556 <z_log_get_tag>:
}
   26556:	2000      	movs	r0, #0
   26558:	4770      	bx	lr

0002655a <out_func>:
{
   2655a:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   2655c:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   26560:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   26562:	2101      	movs	r1, #1
   26564:	6852      	ldr	r2, [r2, #4]
   26566:	a801      	add	r0, sp, #4
   26568:	4798      	blx	r3
}
   2656a:	2000      	movs	r0, #0
   2656c:	b003      	add	sp, #12
   2656e:	f85d fb04 	ldr.w	pc, [sp], #4

00026572 <buffer_write>:
{
   26572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26574:	4606      	mov	r6, r0
   26576:	460d      	mov	r5, r1
   26578:	4614      	mov	r4, r2
   2657a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2657c:	4621      	mov	r1, r4
   2657e:	4628      	mov	r0, r5
   26580:	463a      	mov	r2, r7
   26582:	47b0      	blx	r6
	} while (len != 0);
   26584:	1a24      	subs	r4, r4, r0
		buf += processed;
   26586:	4405      	add	r5, r0
	} while (len != 0);
   26588:	d1f8      	bne.n	2657c <buffer_write+0xa>
}
   2658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002658c <log_output_flush>:
		     output->control_block->offset,
   2658c:	6842      	ldr	r2, [r0, #4]
{
   2658e:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   26590:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   26594:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   26596:	6881      	ldr	r1, [r0, #8]
   26598:	6800      	ldr	r0, [r0, #0]
   2659a:	f7ff ffea 	bl	26572 <buffer_write>
	output->control_block->offset = 0;
   2659e:	2200      	movs	r2, #0
   265a0:	6863      	ldr	r3, [r4, #4]
   265a2:	601a      	str	r2, [r3, #0]
}
   265a4:	bd10      	pop	{r4, pc}

000265a6 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   265a6:	b538      	push	{r3, r4, r5, lr}
   265a8:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   265aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
   265ac:	f000 facf 	bl	26b4e <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   265b0:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   265b2:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   265b4:	4298      	cmp	r0, r3
   265b6:	d00f      	beq.n	265d8 <fcb_append_to_scratch+0x32>
	struct flash_sector *sector;
	int rc;

	sector = fcb_new_sector(fcb, 0);
	if (!sector) {
   265b8:	b170      	cbz	r0, 265d8 <fcb_append_to_scratch+0x32>
		return -ENOSPC;
	}
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   265ba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   265bc:	4601      	mov	r1, r0
   265be:	3201      	adds	r2, #1
   265c0:	4620      	mov	r0, r4
   265c2:	b292      	uxth	r2, r2
   265c4:	f000 f952 	bl	2686c <fcb_sector_hdr_init>
	if (rc) {
   265c8:	b928      	cbnz	r0, 265d6 <fcb_append_to_scratch+0x30>
		return rc;
	}
	fcb->f_active.fe_sector = sector;
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   265ca:	2308      	movs	r3, #8
   265cc:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   265ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   265d0:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   265d2:	3301      	adds	r3, #1
   265d4:	86a3      	strh	r3, [r4, #52]	; 0x34
	return 0;
}
   265d6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   265d8:	f06f 001b 	mvn.w	r0, #27
   265dc:	e7fb      	b.n	265d6 <fcb_append_to_scratch+0x30>

000265de <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   265de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265e2:	b085      	sub	sp, #20
   265e4:	460d      	mov	r5, r1
   265e6:	4690      	mov	r8, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   265e8:	460a      	mov	r2, r1
   265ea:	a902      	add	r1, sp, #8
{
   265ec:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   265ee:	f000 f8fb 	bl	267e8 <fcb_put_len>
	if (cnt < 0) {
   265f2:	1e06      	subs	r6, r0, #0
   265f4:	db6a      	blt.n	266cc <fcb_append+0xee>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   265f6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   265fa:	b2b7      	uxth	r7, r6
   265fc:	2b01      	cmp	r3, #1
   265fe:	d906      	bls.n	2660e <fcb_append+0x30>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26600:	1e5a      	subs	r2, r3, #1
   26602:	3d01      	subs	r5, #1
   26604:	4259      	negs	r1, r3
   26606:	4417      	add	r7, r2
   26608:	441d      	add	r5, r3
   2660a:	400f      	ands	r7, r1
   2660c:	400d      	ands	r5, r1
	if (fcb->f_align <= 1U) {
   2660e:	2b01      	cmp	r3, #1
		return len;
   26610:	bf92      	itee	ls
   26612:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26614:	425a      	neghi	r2, r3
   26616:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   26618:	b22d      	sxth	r5, r5
   2661a:	441d      	add	r5, r3
   2661c:	b2ad      	uxth	r5, r5

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   2661e:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   26622:	f04f 32ff 	mov.w	r2, #4294967295
   26626:	f04f 33ff 	mov.w	r3, #4294967295
   2662a:	4650      	mov	r0, sl
   2662c:	f7fc fdf0 	bl	23210 <z_impl_k_mutex_lock>
	if (rc) {
   26630:	4606      	mov	r6, r0
   26632:	2800      	cmp	r0, #0
   26634:	d156      	bne.n	266e4 <fcb_append+0x106>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   26636:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   2663a:	684a      	ldr	r2, [r1, #4]
   2663c:	443b      	add	r3, r7
   2663e:	442b      	add	r3, r5
   26640:	4293      	cmp	r3, r2
   26642:	d92b      	bls.n	2669c <fcb_append+0xbe>
	prev = NULL;
   26644:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   26646:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   2664a:	4620      	mov	r0, r4
   2664c:	f000 fa7f 	bl	26b4e <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   26650:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   26652:	f1b9 0f00 	cmp.w	r9, #0
   26656:	bf08      	it	eq
   26658:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   2665a:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   2665c:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   2665e:	d03b      	beq.n	266d8 <fcb_append+0xfa>
	} while (i++ < cnt);
   26660:	45b3      	cmp	fp, r6
   26662:	f106 0301 	add.w	r3, r6, #1
   26666:	dc35      	bgt.n	266d4 <fcb_append+0xf6>
		if (!sector || (sector->fs_size <
   26668:	f1b9 0f00 	cmp.w	r9, #0
   2666c:	d034      	beq.n	266d8 <fcb_append+0xfa>
   2666e:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   26672:	f107 0308 	add.w	r3, r7, #8
   26676:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   26678:	429a      	cmp	r2, r3
   2667a:	d32d      	bcc.n	266d8 <fcb_append+0xfa>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   2667c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   2667e:	4649      	mov	r1, r9
   26680:	3201      	adds	r2, #1
   26682:	4620      	mov	r0, r4
   26684:	b292      	uxth	r2, r2
   26686:	f000 f8f1 	bl	2686c <fcb_sector_hdr_init>
		if (rc) {
   2668a:	4606      	mov	r6, r0
   2668c:	b9d8      	cbnz	r0, 266c6 <fcb_append+0xe8>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2668e:	2308      	movs	r3, #8
   26690:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   26692:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   26694:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   26698:	3301      	adds	r3, #1
   2669a:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   2669c:	4620      	mov	r0, r4
   2669e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   266a2:	9700      	str	r7, [sp, #0]
   266a4:	ab02      	add	r3, sp, #8
   266a6:	f000 f86d 	bl	26784 <fcb_flash_write>
	if (rc) {
   266aa:	4606      	mov	r6, r0
   266ac:	b9b8      	cbnz	r0, 266de <fcb_append+0x100>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   266ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   266b0:	f8c8 3000 	str.w	r3, [r8]
	append_loc->fe_elem_off = active->fe_elem_off;
   266b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   266b6:	f8c8 3004 	str.w	r3, [r8, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   266ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   266bc:	441f      	add	r7, r3
   266be:	f8c8 7008 	str.w	r7, [r8, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   266c2:	442f      	add	r7, r5
   266c4:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   266c6:	4650      	mov	r0, sl
   266c8:	f7fc fe20 	bl	2330c <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   266cc:	4630      	mov	r0, r6
   266ce:	b005      	add	sp, #20
   266d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   266d4:	461e      	mov	r6, r3
   266d6:	e7b8      	b.n	2664a <fcb_append+0x6c>
			rc = -ENOSPC;
   266d8:	f06f 061b 	mvn.w	r6, #27
   266dc:	e7f3      	b.n	266c6 <fcb_append+0xe8>
		rc = -EIO;
   266de:	f06f 0604 	mvn.w	r6, #4
   266e2:	e7f0      	b.n	266c6 <fcb_append+0xe8>
		return -EINVAL;
   266e4:	f06f 0615 	mvn.w	r6, #21
   266e8:	e7f0      	b.n	266cc <fcb_append+0xee>

000266ea <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   266ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   266ec:	b083      	sub	sp, #12
   266ee:	4604      	mov	r4, r0
   266f0:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   266f2:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   266f6:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   266f8:	1dd3      	adds	r3, r2, #7
   266fa:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   266fe:	ebad 0d03 	sub.w	sp, sp, r3
   26702:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   26704:	21ff      	movs	r1, #255	; 0xff
   26706:	4630      	mov	r0, r6
   26708:	f004 fbbe 	bl	2ae88 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   2670c:	4632      	mov	r2, r6
   2670e:	4629      	mov	r1, r5
   26710:	4620      	mov	r0, r4
   26712:	f000 f972 	bl	269fa <fcb_elem_crc8>
	if (rc) {
   26716:	b9b0      	cbnz	r0, 26746 <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   26718:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   2671c:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   2671e:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26720:	bf82      	ittt	hi
   26722:	f102 32ff 	addhi.w	r2, r2, #4294967295
   26726:	18d2      	addhi	r2, r2, r3
   26728:	4258      	neghi	r0, r3
   2672a:	68a9      	ldr	r1, [r5, #8]
   2672c:	bf88      	it	hi
   2672e:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   26730:	9300      	str	r3, [sp, #0]
   26732:	440a      	add	r2, r1
   26734:	4633      	mov	r3, r6
   26736:	4620      	mov	r0, r4
   26738:	6829      	ldr	r1, [r5, #0]
   2673a:	f000 f823 	bl	26784 <fcb_flash_write>
	if (rc) {
   2673e:	2800      	cmp	r0, #0
		return -EIO;
   26740:	bf18      	it	ne
   26742:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   26746:	3704      	adds	r7, #4
   26748:	46bd      	mov	sp, r7
   2674a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002674c <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   2674c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   2674e:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   26750:	b110      	cbz	r0, 26758 <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   26752:	f000 fc50 	bl	26ff6 <flash_area_align>
   26756:	b2c0      	uxtb	r0, r0

	return align;
}
   26758:	bd08      	pop	{r3, pc}

0002675a <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   2675a:	b570      	push	{r4, r5, r6, lr}
   2675c:	4614      	mov	r4, r2
   2675e:	461a      	mov	r2, r3
   26760:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   26762:	684d      	ldr	r5, [r1, #4]
   26764:	18e6      	adds	r6, r4, r3
   26766:	42ae      	cmp	r6, r5
   26768:	d809      	bhi.n	2677e <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   2676a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2676c:	b120      	cbz	r0, 26778 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   2676e:	6809      	ldr	r1, [r1, #0]
   26770:	4421      	add	r1, r4
   26772:	f000 fbc7 	bl	26f04 <flash_area_read>

	if (rc != 0) {
   26776:	b108      	cbz	r0, 2677c <fcb_flash_read+0x22>
		return -EIO;
   26778:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   2677c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2677e:	f06f 0015 	mvn.w	r0, #21
   26782:	e7fb      	b.n	2677c <fcb_flash_read+0x22>

00026784 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   26784:	b570      	push	{r4, r5, r6, lr}
   26786:	4614      	mov	r4, r2
   26788:	461a      	mov	r2, r3
   2678a:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   2678c:	684d      	ldr	r5, [r1, #4]
   2678e:	18e6      	adds	r6, r4, r3
   26790:	42ae      	cmp	r6, r5
   26792:	d809      	bhi.n	267a8 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   26794:	6b80      	ldr	r0, [r0, #56]	; 0x38
   26796:	b120      	cbz	r0, 267a2 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   26798:	6809      	ldr	r1, [r1, #0]
   2679a:	4421      	add	r1, r4
   2679c:	f000 fbce 	bl	26f3c <flash_area_write>

	if (rc != 0) {
   267a0:	b108      	cbz	r0, 267a6 <fcb_flash_write+0x22>
		return -EIO;
   267a2:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   267a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   267a8:	f06f 0015 	mvn.w	r0, #21
   267ac:	e7fb      	b.n	267a6 <fcb_flash_write+0x22>

000267ae <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   267ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   267b0:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   267b2:	b120      	cbz	r0, 267be <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   267b4:	e9d1 1200 	ldrd	r1, r2, [r1]
   267b8:	f000 fbee 	bl	26f98 <flash_area_erase>

	if (rc != 0) {
   267bc:	b108      	cbz	r0, 267c2 <fcb_erase_sector+0x14>
		return -EIO;
   267be:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   267c2:	bd08      	pop	{r3, pc}

000267c4 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   267c4:	b538      	push	{r3, r4, r5, lr}
   267c6:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   267c8:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   267ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   267cc:	7963      	ldrb	r3, [r4, #5]
   267ce:	42ab      	cmp	r3, r5
   267d0:	dc01      	bgt.n	267d6 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   267d2:	4628      	mov	r0, r5
   267d4:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   267d6:	4620      	mov	r0, r4
   267d8:	f000 f9b9 	bl	26b4e <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   267dc:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   267de:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   267e0:	4283      	cmp	r3, r0
   267e2:	d0f6      	beq.n	267d2 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   267e4:	3501      	adds	r5, #1
   267e6:	e7f1      	b.n	267cc <fcb_free_sector_cnt+0x8>

000267e8 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   267e8:	2a7f      	cmp	r2, #127	; 0x7f
{
   267ea:	b510      	push	{r4, lr}
	if (len < 0x80) {
   267ec:	d806      	bhi.n	267fc <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   267ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   267f2:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   267f4:	405a      	eors	r2, r3
   267f6:	43d2      	mvns	r2, r2
   267f8:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   267fa:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   267fc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   26800:	429a      	cmp	r2, r3
   26802:	d80e      	bhi.n	26822 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   26804:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   26808:	f062 047f 	orn	r4, r2, #127	; 0x7f
   2680c:	4063      	eors	r3, r4
   2680e:	43db      	mvns	r3, r3
   26810:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   26812:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   26816:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   26818:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   2681c:	43d2      	mvns	r2, r2
   2681e:	704a      	strb	r2, [r1, #1]
		return 2;
   26820:	e7eb      	b.n	267fa <fcb_put_len+0x12>
		return -EINVAL;
   26822:	f06f 0015 	mvn.w	r0, #21
   26826:	e7e8      	b.n	267fa <fcb_put_len+0x12>

00026828 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   26828:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   2682a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2682e:	780d      	ldrb	r5, [r1, #0]
   26830:	ea83 0405 	eor.w	r4, r3, r5
   26834:	f014 0f80 	tst.w	r4, #128	; 0x80
   26838:	4620      	mov	r0, r4
   2683a:	d10f      	bne.n	2685c <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   2683c:	42ab      	cmp	r3, r5
   2683e:	7849      	ldrb	r1, [r1, #1]
   26840:	d101      	bne.n	26846 <fcb_get_len+0x1e>
   26842:	428b      	cmp	r3, r1
   26844:	d00f      	beq.n	26866 <fcb_get_len+0x3e>
		    (buf[1] == fcb->f_erase_value)) {
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   26846:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   26848:	404b      	eors	r3, r1
   2684a:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   2684c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   26850:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   26854:	4303      	orrs	r3, r0
		rc = 2;
   26856:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   26858:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   2685a:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   2685c:	43e3      	mvns	r3, r4
   2685e:	b2db      	uxtb	r3, r3
		rc = 1;
   26860:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   26862:	8013      	strh	r3, [r2, #0]
		rc = 1;
   26864:	e7f9      	b.n	2685a <fcb_get_len+0x32>
			return -ENOTSUP;
   26866:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2686a:	e7f6      	b.n	2685a <fcb_get_len+0x32>

0002686c <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   2686c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   2686e:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   26872:	6806      	ldr	r6, [r0, #0]
   26874:	0423      	lsls	r3, r4, #16
   26876:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   2687a:	4323      	orrs	r3, r4
   2687c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   26880:	4073      	eors	r3, r6
   26882:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   26884:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   26886:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   26888:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   2688c:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   26890:	2308      	movs	r3, #8
   26892:	2200      	movs	r2, #0
   26894:	9300      	str	r3, [sp, #0]
   26896:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   26898:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   2689c:	f7ff ff72 	bl	26784 <fcb_flash_write>
	if (rc != 0) {
   268a0:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   268a2:	bf18      	it	ne
   268a4:	f06f 0004 	mvnne.w	r0, #4
   268a8:	b004      	add	sp, #16
   268aa:	bd70      	pop	{r4, r5, r6, pc}

000268ac <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   268ac:	b530      	push	{r4, r5, lr}
   268ae:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   268b0:	4614      	mov	r4, r2
{
   268b2:	b085      	sub	sp, #20
	if (!fdap) {
   268b4:	b902      	cbnz	r2, 268b8 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   268b6:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   268b8:	2308      	movs	r3, #8
   268ba:	2200      	movs	r2, #0
   268bc:	9300      	str	r3, [sp, #0]
   268be:	4628      	mov	r0, r5
   268c0:	4623      	mov	r3, r4
   268c2:	f7ff ff4a 	bl	2675a <fcb_flash_read>
	if (rc) {
   268c6:	b9a0      	cbnz	r0, 268f2 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   268c8:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   268cc:	6821      	ldr	r1, [r4, #0]
   268ce:	0413      	lsls	r3, r2, #16
   268d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   268d4:	4313      	orrs	r3, r2
   268d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   268da:	4299      	cmp	r1, r3
   268dc:	d007      	beq.n	268ee <fcb_sector_hdr_read+0x42>
   268de:	682a      	ldr	r2, [r5, #0]
   268e0:	4053      	eors	r3, r2
   268e2:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
   268e4:	4299      	cmp	r1, r3
		return -ENOMSG;
   268e6:	bf0c      	ite	eq
   268e8:	2001      	moveq	r0, #1
   268ea:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   268ee:	b005      	add	sp, #20
   268f0:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   268f2:	f06f 0004 	mvn.w	r0, #4
   268f6:	e7fa      	b.n	268ee <fcb_sector_hdr_read+0x42>

000268f8 <fcb_init>:
{
   268f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   268fc:	688b      	ldr	r3, [r1, #8]
{
   268fe:	460c      	mov	r4, r1
   26900:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   26902:	b92b      	cbnz	r3, 26910 <fcb_init+0x18>
		return -EINVAL;
   26904:	f06f 0515 	mvn.w	r5, #21
}
   26908:	4628      	mov	r0, r5
   2690a:	b005      	add	sp, #20
   2690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   26910:	794b      	ldrb	r3, [r1, #5]
   26912:	798a      	ldrb	r2, [r1, #6]
   26914:	1a9b      	subs	r3, r3, r2
   26916:	2b00      	cmp	r3, #0
   26918:	ddf4      	ble.n	26904 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   2691a:	3138      	adds	r1, #56	; 0x38
   2691c:	b2c0      	uxtb	r0, r0
   2691e:	f7ee fa89 	bl	14e34 <flash_area_open>
	if (rc != 0) {
   26922:	4606      	mov	r6, r0
   26924:	2800      	cmp	r0, #0
   26926:	d1ed      	bne.n	26904 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   26928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2692a:	68d8      	ldr	r0, [r3, #12]
   2692c:	f7fc fa1a 	bl	22d64 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   26930:	6883      	ldr	r3, [r0, #8]
   26932:	691b      	ldr	r3, [r3, #16]
   26934:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   26936:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   26938:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   2693a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   2693e:	f7ff ff05 	bl	2674c <fcb_get_align>
	if (align == 0U) {
   26942:	4681      	mov	r9, r0
   26944:	2800      	cmp	r0, #0
   26946:	d0dd      	beq.n	26904 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   26948:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   2694c:	46b2      	mov	sl, r6
   2694e:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   26950:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   26952:	7963      	ldrb	r3, [r4, #5]
   26954:	42b3      	cmp	r3, r6
   26956:	dc24      	bgt.n	269a2 <fcb_init+0xaa>
	if (oldest < 0) {
   26958:	f1b8 3fff 	cmp.w	r8, #4294967295
   2695c:	d149      	bne.n	269f2 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   2695e:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   26960:	2200      	movs	r2, #0
   26962:	4639      	mov	r1, r7
   26964:	4620      	mov	r0, r4
   26966:	f7ff ff81 	bl	2686c <fcb_sector_hdr_init>
		if (rc) {
   2696a:	4605      	mov	r5, r0
   2696c:	2800      	cmp	r0, #0
   2696e:	d1cb      	bne.n	26908 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   26970:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   26972:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   26974:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   26978:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2697c:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   2697e:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   26980:	f104 0624 	add.w	r6, r4, #36	; 0x24
   26984:	4631      	mov	r1, r6
   26986:	4620      	mov	r0, r4
   26988:	f000 f8be 	bl	26b08 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   2698c:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   26990:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   26992:	d030      	beq.n	269f6 <fcb_init+0xfe>
		if (rc != 0) {
   26994:	2800      	cmp	r0, #0
   26996:	d0f5      	beq.n	26984 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   26998:	f104 000c 	add.w	r0, r4, #12
   2699c:	f003 fe1c 	bl	2a5d8 <z_impl_k_mutex_init>
   269a0:	e7b2      	b.n	26908 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   269a2:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   269a4:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   269a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   269aa:	aa02      	add	r2, sp, #8
   269ac:	9101      	str	r1, [sp, #4]
   269ae:	f7ff ff7d 	bl	268ac <fcb_sector_hdr_read>
		if (rc < 0) {
   269b2:	1e05      	subs	r5, r0, #0
   269b4:	dba8      	blt.n	26908 <fcb_init+0x10>
		if (rc == 0) {
   269b6:	d009      	beq.n	269cc <fcb_init+0xd4>
		if (oldest < 0) {
   269b8:	f1b8 3fff 	cmp.w	r8, #4294967295
   269bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   269c0:	9901      	ldr	r1, [sp, #4]
   269c2:	d105      	bne.n	269d0 <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   269c4:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   269c6:	468a      	mov	sl, r1
   269c8:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   269ca:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   269cc:	3601      	adds	r6, #1
   269ce:	e7c0      	b.n	26952 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   269d0:	b21d      	sxth	r5, r3
   269d2:	fa0f f08b 	sxth.w	r0, fp
   269d6:	1a28      	subs	r0, r5, r0
   269d8:	2800      	cmp	r0, #0
   269da:	dd02      	ble.n	269e2 <fcb_init+0xea>
			newest = fda.fd_id;
   269dc:	469b      	mov	fp, r3
			newest_sector = sector;
   269de:	468a      	mov	sl, r1
   269e0:	e7f4      	b.n	269cc <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   269e2:	fa0f f288 	sxth.w	r2, r8
   269e6:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   269e8:	2a00      	cmp	r2, #0
   269ea:	bfc4      	itt	gt
   269ec:	4698      	movgt	r8, r3
   269ee:	460f      	movgt	r7, r1
   269f0:	e7ec      	b.n	269cc <fcb_init+0xd4>
   269f2:	465d      	mov	r5, fp
   269f4:	e7bd      	b.n	26972 <fcb_init+0x7a>
			rc = 0;
   269f6:	2500      	movs	r5, #0
   269f8:	e7ce      	b.n	26998 <fcb_init+0xa0>

000269fa <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   269fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269fe:	460c      	mov	r4, r1
   26a00:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   26a02:	e9d1 1200 	ldrd	r1, r2, [r1]
   26a06:	684b      	ldr	r3, [r1, #4]
   26a08:	1c95      	adds	r5, r2, #2
   26a0a:	429d      	cmp	r5, r3
{
   26a0c:	4606      	mov	r6, r0
   26a0e:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   26a10:	d84c      	bhi.n	26aac <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   26a12:	2302      	movs	r3, #2
   26a14:	9300      	str	r3, [sp, #0]
   26a16:	ab04      	add	r3, sp, #16
   26a18:	f7ff fe9f 	bl	2675a <fcb_flash_read>
	if (rc) {
   26a1c:	b120      	cbz	r0, 26a28 <fcb_elem_crc8+0x2e>
		return -EIO;
   26a1e:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   26a22:	b00c      	add	sp, #48	; 0x30
   26a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   26a28:	4630      	mov	r0, r6
   26a2a:	f10d 020e 	add.w	r2, sp, #14
   26a2e:	a904      	add	r1, sp, #16
   26a30:	f7ff fefa 	bl	26828 <fcb_get_len>
	if (cnt < 0) {
   26a34:	2800      	cmp	r0, #0
   26a36:	dbf4      	blt.n	26a22 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   26a38:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   26a3c:	b283      	uxth	r3, r0
   26a3e:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26a40:	bf84      	itt	hi
   26a42:	f102 35ff 	addhi.w	r5, r2, #4294967295
   26a46:	195b      	addhi	r3, r3, r5
   26a48:	6861      	ldr	r1, [r4, #4]
   26a4a:	bf84      	itt	hi
   26a4c:	4252      	neghi	r2, r2
   26a4e:	4013      	andhi	r3, r2
   26a50:	440b      	add	r3, r1
   26a52:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   26a54:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   26a58:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   26a5a:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   26a5c:	20ff      	movs	r0, #255	; 0xff
   26a5e:	a904      	add	r1, sp, #16
   26a60:	f7ec fcba 	bl	133d8 <crc8_ccitt>
   26a64:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   26a66:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   26a6a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   26a6e:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   26a70:	45d0      	cmp	r8, sl
   26a72:	d302      	bcc.n	26a7a <fcb_elem_crc8+0x80>
	return 0;
   26a74:	2000      	movs	r0, #0
	*c8p = crc8;
   26a76:	703d      	strb	r5, [r7, #0]
	return 0;
   26a78:	e7d3      	b.n	26a22 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   26a7a:	ebaa 0908 	sub.w	r9, sl, r8
   26a7e:	f1b9 0f20 	cmp.w	r9, #32
   26a82:	bf28      	it	cs
   26a84:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   26a88:	4642      	mov	r2, r8
   26a8a:	4630      	mov	r0, r6
   26a8c:	6821      	ldr	r1, [r4, #0]
   26a8e:	f8cd 9000 	str.w	r9, [sp]
   26a92:	ab04      	add	r3, sp, #16
   26a94:	f7ff fe61 	bl	2675a <fcb_flash_read>
		if (rc) {
   26a98:	2800      	cmp	r0, #0
   26a9a:	d1c0      	bne.n	26a1e <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   26a9c:	4628      	mov	r0, r5
   26a9e:	464a      	mov	r2, r9
   26aa0:	a904      	add	r1, sp, #16
   26aa2:	f7ec fc99 	bl	133d8 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   26aa6:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   26aa8:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   26aaa:	e7e1      	b.n	26a70 <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   26aac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26ab0:	e7b7      	b.n	26a22 <fcb_elem_crc8+0x28>

00026ab2 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   26ab2:	b530      	push	{r4, r5, lr}
   26ab4:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   26ab6:	f10d 020e 	add.w	r2, sp, #14
{
   26aba:	4605      	mov	r5, r0
   26abc:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   26abe:	f7ff ff9c 	bl	269fa <fcb_elem_crc8>
	if (rc) {
   26ac2:	b9e0      	cbnz	r0, 26afe <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   26ac4:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   26ac8:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   26aca:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26acc:	bf81      	itttt	hi
   26ace:	f102 32ff 	addhi.w	r2, r2, #4294967295
   26ad2:	18d2      	addhi	r2, r2, r3
   26ad4:	425b      	neghi	r3, r3
   26ad6:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   26ad8:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   26ada:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   26adc:	9300      	str	r3, [sp, #0]
   26ade:	440a      	add	r2, r1
   26ae0:	4628      	mov	r0, r5
   26ae2:	6821      	ldr	r1, [r4, #0]
   26ae4:	f10d 030f 	add.w	r3, sp, #15
   26ae8:	f7ff fe37 	bl	2675a <fcb_flash_read>
	if (rc) {
   26aec:	b948      	cbnz	r0, 26b02 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   26aee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26af2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   26af6:	429a      	cmp	r2, r3
		return -EBADMSG;
   26af8:	bf18      	it	ne
   26afa:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   26afe:	b005      	add	sp, #20
   26b00:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   26b02:	f06f 0004 	mvn.w	r0, #4
   26b06:	e7fa      	b.n	26afe <fcb_elem_info+0x4c>

00026b08 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   26b08:	b538      	push	{r3, r4, r5, lr}
   26b0a:	4604      	mov	r4, r0
   26b0c:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   26b0e:	f7ff ffd0 	bl	26ab2 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   26b12:	b110      	cbz	r0, 26b1a <fcb_getnext_in_sector+0x12>
   26b14:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   26b18:	d118      	bne.n	26b4c <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   26b1a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   26b1e:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   26b20:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26b22:	bf88      	it	hi
   26b24:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   26b28:	68aa      	ldr	r2, [r5, #8]
   26b2a:	bf82      	ittt	hi
   26b2c:	185b      	addhi	r3, r3, r1
   26b2e:	4248      	neghi	r0, r1
   26b30:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   26b32:	2901      	cmp	r1, #1
   26b34:	4413      	add	r3, r2
		return len;
   26b36:	bf92      	itee	ls
   26b38:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   26b3a:	424a      	neghi	r2, r1
   26b3c:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   26b3e:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   26b40:	4629      	mov	r1, r5
   26b42:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   26b44:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   26b46:	f7ff ffb4 	bl	26ab2 <fcb_elem_info>
			if (rc != -EBADMSG) {
   26b4a:	e7e3      	b.n	26b14 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   26b4c:	bd38      	pop	{r3, r4, r5, pc}

00026b4e <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   26b4e:	6882      	ldr	r2, [r0, #8]
   26b50:	7943      	ldrb	r3, [r0, #5]
	sector++;
   26b52:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   26b54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   26b58:	4299      	cmp	r1, r3
   26b5a:	bf34      	ite	cc
   26b5c:	4608      	movcc	r0, r1
   26b5e:	4610      	movcs	r0, r2
   26b60:	4770      	bx	lr

00026b62 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   26b62:	680b      	ldr	r3, [r1, #0]
{
   26b64:	b570      	push	{r4, r5, r6, lr}
   26b66:	4605      	mov	r5, r0
   26b68:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   26b6a:	b90b      	cbnz	r3, 26b70 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   26b6c:	6a03      	ldr	r3, [r0, #32]
   26b6e:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   26b70:	6863      	ldr	r3, [r4, #4]
   26b72:	b95b      	cbnz	r3, 26b8c <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   26b74:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   26b76:	4621      	mov	r1, r4
   26b78:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   26b7a:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   26b7c:	f7ff ff99 	bl	26ab2 <fcb_elem_info>
		switch (rc) {
   26b80:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   26b84:	d021      	beq.n	26bca <fcb_getnext_nolock+0x68>
   26b86:	b950      	cbnz	r0, 26b9e <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   26b88:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   26b8a:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   26b8c:	4621      	mov	r1, r4
   26b8e:	4628      	mov	r0, r5
   26b90:	f7ff ffba 	bl	26b08 <fcb_getnext_in_sector>
		if (rc == 0) {
   26b94:	2800      	cmp	r0, #0
   26b96:	d0f7      	beq.n	26b88 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   26b98:	f110 0f86 	cmn.w	r0, #134	; 0x86
   26b9c:	d113      	bne.n	26bc6 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   26b9e:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   26ba0:	6821      	ldr	r1, [r4, #0]
   26ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   26ba4:	4299      	cmp	r1, r3
   26ba6:	d019      	beq.n	26bdc <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   26ba8:	4628      	mov	r0, r5
   26baa:	f7ff ffd0 	bl	26b4e <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   26bae:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   26bb0:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   26bb4:	4628      	mov	r0, r5
   26bb6:	f7ff ff7c 	bl	26ab2 <fcb_elem_info>
			switch (rc) {
   26bba:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   26bbe:	d004      	beq.n	26bca <fcb_getnext_nolock+0x68>
   26bc0:	2800      	cmp	r0, #0
   26bc2:	d0e1      	beq.n	26b88 <fcb_getnext_nolock+0x26>
   26bc4:	e7ec      	b.n	26ba0 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   26bc6:	304d      	adds	r0, #77	; 0x4d
   26bc8:	d1de      	bne.n	26b88 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   26bca:	4621      	mov	r1, r4
   26bcc:	4628      	mov	r0, r5
   26bce:	f7ff ff9b 	bl	26b08 <fcb_getnext_in_sector>
		if (rc == 0) {
   26bd2:	2800      	cmp	r0, #0
   26bd4:	d0d8      	beq.n	26b88 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   26bd6:	304d      	adds	r0, #77	; 0x4d
   26bd8:	d0f7      	beq.n	26bca <fcb_getnext_nolock+0x68>
next_sector:
   26bda:	e7e0      	b.n	26b9e <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   26bdc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26be0:	e7d3      	b.n	26b8a <fcb_getnext_nolock+0x28>

00026be2 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   26be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26be4:	4604      	mov	r4, r0
   26be6:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   26be8:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   26bec:	f04f 32ff 	mov.w	r2, #4294967295
   26bf0:	f04f 33ff 	mov.w	r3, #4294967295
   26bf4:	4628      	mov	r0, r5
   26bf6:	f7fc fb0b 	bl	23210 <z_impl_k_mutex_lock>
	if (rc) {
   26bfa:	b950      	cbnz	r0, 26c12 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   26bfc:	4620      	mov	r0, r4
   26bfe:	9901      	ldr	r1, [sp, #4]
   26c00:	f7ff ffaf 	bl	26b62 <fcb_getnext_nolock>
   26c04:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   26c06:	4628      	mov	r0, r5
   26c08:	f7fc fb80 	bl	2330c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   26c0c:	4620      	mov	r0, r4
   26c0e:	b003      	add	sp, #12
   26c10:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26c12:	f06f 0415 	mvn.w	r4, #21
   26c16:	e7f9      	b.n	26c0c <fcb_getnext+0x2a>

00026c18 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   26c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c1a:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   26c1c:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   26c20:	f04f 32ff 	mov.w	r2, #4294967295
   26c24:	f04f 33ff 	mov.w	r3, #4294967295
   26c28:	4638      	mov	r0, r7
   26c2a:	f7fc faf1 	bl	23210 <z_impl_k_mutex_lock>
	if (rc) {
   26c2e:	bb48      	cbnz	r0, 26c84 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   26c30:	4620      	mov	r0, r4
   26c32:	6a21      	ldr	r1, [r4, #32]
   26c34:	f7ff fdbb 	bl	267ae <fcb_erase_sector>
	if (rc) {
   26c38:	bb08      	cbnz	r0, 26c7e <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   26c3a:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   26c3e:	4299      	cmp	r1, r3
   26c40:	d112      	bne.n	26c68 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   26c42:	4620      	mov	r0, r4
   26c44:	f7ff ff83 	bl	26b4e <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   26c48:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   26c4a:	4601      	mov	r1, r0
   26c4c:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   26c4e:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   26c50:	b292      	uxth	r2, r2
   26c52:	4620      	mov	r0, r4
   26c54:	f7ff fe0a 	bl	2686c <fcb_sector_hdr_init>
		if (rc) {
   26c58:	4605      	mov	r5, r0
   26c5a:	b958      	cbnz	r0, 26c74 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   26c5c:	2308      	movs	r3, #8
   26c5e:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   26c60:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   26c62:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   26c64:	3301      	adds	r3, #1
   26c66:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   26c68:	4620      	mov	r0, r4
   26c6a:	6a21      	ldr	r1, [r4, #32]
   26c6c:	f7ff ff6f 	bl	26b4e <fcb_getnext_sector>
   26c70:	2500      	movs	r5, #0
   26c72:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   26c74:	4638      	mov	r0, r7
   26c76:	f7fc fb49 	bl	2330c <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   26c7a:	4628      	mov	r0, r5
   26c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   26c7e:	f06f 0504 	mvn.w	r5, #4
   26c82:	e7f7      	b.n	26c74 <fcb_rotate+0x5c>
		return -EINVAL;
   26c84:	f06f 0515 	mvn.w	r5, #21
   26c88:	e7f7      	b.n	26c7a <fcb_rotate+0x62>

00026c8a <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   26c8a:	f7ee b8b3 	b.w	14df4 <socket_offload_getaddrinfo>

00026c8e <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   26c8e:	f7ee b8bb 	b.w	14e08 <socket_offload_freeaddrinfo>

00026c92 <k_mutex_unlock>:
   26c92:	f7fc bb3b 	b.w	2330c <z_impl_k_mutex_unlock>

00026c96 <z_fdtable_call_ioctl>:
{
   26c96:	b40c      	push	{r2, r3}
   26c98:	4603      	mov	r3, r0
   26c9a:	b507      	push	{r0, r1, r2, lr}
   26c9c:	aa04      	add	r2, sp, #16
   26c9e:	4608      	mov	r0, r1
   26ca0:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   26ca4:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   26ca6:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   26ca8:	4798      	blx	r3
}
   26caa:	b003      	add	sp, #12
   26cac:	f85d eb04 	ldr.w	lr, [sp], #4
   26cb0:	b002      	add	sp, #8
   26cb2:	4770      	bx	lr

00026cb4 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26cb4:	f7fc baac 	b.w	23210 <z_impl_k_mutex_lock>

00026cb8 <z_impl_zsock_close>:
{
   26cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   26cba:	4669      	mov	r1, sp
   26cbc:	aa01      	add	r2, sp, #4
{
   26cbe:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   26cc0:	f7ec fbd0 	bl	13464 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   26cc4:	4604      	mov	r4, r0
   26cc6:	b940      	cbnz	r0, 26cda <z_impl_zsock_close+0x22>
		errno = EBADF;
   26cc8:	f000 fb00 	bl	272cc <__errno>
   26ccc:	2309      	movs	r3, #9
		return -1;
   26cce:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   26cd2:	6003      	str	r3, [r0, #0]
}
   26cd4:	4620      	mov	r0, r4
   26cd6:	b003      	add	sp, #12
   26cd8:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   26cda:	f04f 32ff 	mov.w	r2, #4294967295
   26cde:	f04f 33ff 	mov.w	r3, #4294967295
   26ce2:	9801      	ldr	r0, [sp, #4]
   26ce4:	f7ff ffe6 	bl	26cb4 <k_mutex_lock.constprop.0>
	ret = vtable->fd_vtable.close(ctx);
   26ce8:	9b00      	ldr	r3, [sp, #0]
   26cea:	4620      	mov	r0, r4
   26cec:	689b      	ldr	r3, [r3, #8]
   26cee:	4798      	blx	r3
   26cf0:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   26cf2:	9801      	ldr	r0, [sp, #4]
   26cf4:	f7ff ffcd 	bl	26c92 <k_mutex_unlock>
	z_free_fd(sock);
   26cf8:	4628      	mov	r0, r5
   26cfa:	f7ec fc1d 	bl	13538 <z_free_fd>
	return ret;
   26cfe:	e7e9      	b.n	26cd4 <z_impl_zsock_close+0x1c>

00026d00 <z_impl_zsock_connect>:
{
   26d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d02:	460d      	mov	r5, r1
   26d04:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   26d06:	4669      	mov	r1, sp
   26d08:	aa01      	add	r2, sp, #4
   26d0a:	f7ec fbab 	bl	13464 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   26d0e:	4604      	mov	r4, r0
   26d10:	b110      	cbz	r0, 26d18 <z_impl_zsock_connect+0x18>
   26d12:	9b00      	ldr	r3, [sp, #0]
   26d14:	695b      	ldr	r3, [r3, #20]
   26d16:	b943      	cbnz	r3, 26d2a <z_impl_zsock_connect+0x2a>
   26d18:	f000 fad8 	bl	272cc <__errno>
   26d1c:	2309      	movs	r3, #9
   26d1e:	f04f 34ff 	mov.w	r4, #4294967295
   26d22:	6003      	str	r3, [r0, #0]
}
   26d24:	4620      	mov	r0, r4
   26d26:	b002      	add	sp, #8
   26d28:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   26d2a:	f04f 32ff 	mov.w	r2, #4294967295
   26d2e:	f04f 33ff 	mov.w	r3, #4294967295
   26d32:	9801      	ldr	r0, [sp, #4]
   26d34:	f7ff ffbe 	bl	26cb4 <k_mutex_lock.constprop.0>
   26d38:	9b00      	ldr	r3, [sp, #0]
   26d3a:	4632      	mov	r2, r6
   26d3c:	4629      	mov	r1, r5
   26d3e:	4620      	mov	r0, r4
   26d40:	695b      	ldr	r3, [r3, #20]
   26d42:	4798      	blx	r3
   26d44:	4604      	mov	r4, r0
   26d46:	9801      	ldr	r0, [sp, #4]
   26d48:	f7ff ffa3 	bl	26c92 <k_mutex_unlock>
   26d4c:	e7ea      	b.n	26d24 <z_impl_zsock_connect+0x24>

00026d4e <z_impl_zsock_sendto>:
{
   26d4e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26d52:	460d      	mov	r5, r1
   26d54:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   26d56:	a902      	add	r1, sp, #8
   26d58:	aa03      	add	r2, sp, #12
{
   26d5a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   26d5c:	f7ec fb82 	bl	13464 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   26d60:	4604      	mov	r4, r0
   26d62:	b110      	cbz	r0, 26d6a <z_impl_zsock_sendto+0x1c>
   26d64:	9b02      	ldr	r3, [sp, #8]
   26d66:	6a1b      	ldr	r3, [r3, #32]
   26d68:	b94b      	cbnz	r3, 26d7e <z_impl_zsock_sendto+0x30>
   26d6a:	f000 faaf 	bl	272cc <__errno>
   26d6e:	2309      	movs	r3, #9
   26d70:	f04f 34ff 	mov.w	r4, #4294967295
   26d74:	6003      	str	r3, [r0, #0]
}
   26d76:	4620      	mov	r0, r4
   26d78:	b004      	add	sp, #16
   26d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   26d7e:	f04f 32ff 	mov.w	r2, #4294967295
   26d82:	f04f 33ff 	mov.w	r3, #4294967295
   26d86:	9803      	ldr	r0, [sp, #12]
   26d88:	f7ff ff94 	bl	26cb4 <k_mutex_lock.constprop.0>
   26d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26d8e:	4632      	mov	r2, r6
   26d90:	9301      	str	r3, [sp, #4]
   26d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26d94:	4629      	mov	r1, r5
   26d96:	9300      	str	r3, [sp, #0]
   26d98:	9b02      	ldr	r3, [sp, #8]
   26d9a:	4620      	mov	r0, r4
   26d9c:	f8d3 8020 	ldr.w	r8, [r3, #32]
   26da0:	463b      	mov	r3, r7
   26da2:	47c0      	blx	r8
   26da4:	4604      	mov	r4, r0
   26da6:	9803      	ldr	r0, [sp, #12]
   26da8:	f7ff ff73 	bl	26c92 <k_mutex_unlock>
   26dac:	e7e3      	b.n	26d76 <z_impl_zsock_sendto+0x28>

00026dae <z_impl_zsock_sendmsg>:
{
   26dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26db0:	460d      	mov	r5, r1
   26db2:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   26db4:	4669      	mov	r1, sp
   26db6:	aa01      	add	r2, sp, #4
   26db8:	f7ec fb54 	bl	13464 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   26dbc:	4604      	mov	r4, r0
   26dbe:	b110      	cbz	r0, 26dc6 <z_impl_zsock_sendmsg+0x18>
   26dc0:	9b00      	ldr	r3, [sp, #0]
   26dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   26dc4:	b943      	cbnz	r3, 26dd8 <z_impl_zsock_sendmsg+0x2a>
   26dc6:	f000 fa81 	bl	272cc <__errno>
   26dca:	2309      	movs	r3, #9
   26dcc:	f04f 34ff 	mov.w	r4, #4294967295
   26dd0:	6003      	str	r3, [r0, #0]
}
   26dd2:	4620      	mov	r0, r4
   26dd4:	b002      	add	sp, #8
   26dd6:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   26dd8:	f04f 32ff 	mov.w	r2, #4294967295
   26ddc:	f04f 33ff 	mov.w	r3, #4294967295
   26de0:	9801      	ldr	r0, [sp, #4]
   26de2:	f7ff ff67 	bl	26cb4 <k_mutex_lock.constprop.0>
   26de6:	9b00      	ldr	r3, [sp, #0]
   26de8:	4632      	mov	r2, r6
   26dea:	4629      	mov	r1, r5
   26dec:	4620      	mov	r0, r4
   26dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   26df0:	4798      	blx	r3
   26df2:	4604      	mov	r4, r0
   26df4:	9801      	ldr	r0, [sp, #4]
   26df6:	f7ff ff4c 	bl	26c92 <k_mutex_unlock>
   26dfa:	e7ea      	b.n	26dd2 <z_impl_zsock_sendmsg+0x24>

00026dfc <z_impl_zsock_recvfrom>:
{
   26dfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26e00:	460d      	mov	r5, r1
   26e02:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   26e04:	a902      	add	r1, sp, #8
   26e06:	aa03      	add	r2, sp, #12
{
   26e08:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   26e0a:	f7ec fb2b 	bl	13464 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   26e0e:	4604      	mov	r4, r0
   26e10:	b110      	cbz	r0, 26e18 <z_impl_zsock_recvfrom+0x1c>
   26e12:	9b02      	ldr	r3, [sp, #8]
   26e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e16:	b94b      	cbnz	r3, 26e2c <z_impl_zsock_recvfrom+0x30>
   26e18:	f000 fa58 	bl	272cc <__errno>
   26e1c:	2309      	movs	r3, #9
   26e1e:	f04f 34ff 	mov.w	r4, #4294967295
   26e22:	6003      	str	r3, [r0, #0]
}
   26e24:	4620      	mov	r0, r4
   26e26:	b004      	add	sp, #16
   26e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   26e2c:	f04f 32ff 	mov.w	r2, #4294967295
   26e30:	f04f 33ff 	mov.w	r3, #4294967295
   26e34:	9803      	ldr	r0, [sp, #12]
   26e36:	f7ff ff3d 	bl	26cb4 <k_mutex_lock.constprop.0>
   26e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26e3c:	4632      	mov	r2, r6
   26e3e:	9301      	str	r3, [sp, #4]
   26e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26e42:	4629      	mov	r1, r5
   26e44:	9300      	str	r3, [sp, #0]
   26e46:	9b02      	ldr	r3, [sp, #8]
   26e48:	4620      	mov	r0, r4
   26e4a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   26e4e:	463b      	mov	r3, r7
   26e50:	47c0      	blx	r8
   26e52:	4604      	mov	r4, r0
   26e54:	9803      	ldr	r0, [sp, #12]
   26e56:	f7ff ff1c 	bl	26c92 <k_mutex_unlock>
   26e5a:	e7e3      	b.n	26e24 <z_impl_zsock_recvfrom+0x28>

00026e5c <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   26e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   26e60:	1e14      	subs	r4, r2, #0
{
   26e62:	4605      	mov	r5, r0
   26e64:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   26e66:	db13      	blt.n	26e90 <z_impl_zsock_poll+0x34>
   26e68:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   26e6c:	f240 30e7 	movw	r0, #999	; 0x3e7
   26e70:	2100      	movs	r1, #0
   26e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26e76:	2300      	movs	r3, #0
   26e78:	fbc7 0104 	smlal	r0, r1, r7, r4
   26e7c:	f7e9 fee4 	bl	10c48 <__aeabi_uldivmod>
   26e80:	4602      	mov	r2, r0
   26e82:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   26e84:	4631      	mov	r1, r6
   26e86:	4628      	mov	r0, r5
}
   26e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   26e8c:	f7ed be96 	b.w	14bbc <zsock_poll_internal>
		timeout = K_FOREVER;
   26e90:	f04f 32ff 	mov.w	r2, #4294967295
   26e94:	4613      	mov	r3, r2
   26e96:	e7f5      	b.n	26e84 <z_impl_zsock_poll+0x28>

00026e98 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   26e98:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   26e9a:	f000 fa96 	bl	273ca <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   26e9e:	fab0 f080 	clz	r0, r0
   26ea2:	0940      	lsrs	r0, r0, #5
   26ea4:	bd08      	pop	{r3, pc}

00026ea6 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   26ea6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26eaa:	460d      	mov	r5, r1
   26eac:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   26eae:	a902      	add	r1, sp, #8
   26eb0:	aa03      	add	r2, sp, #12
{
   26eb2:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   26eb4:	f7ec fad6 	bl	13464 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   26eb8:	4604      	mov	r4, r0
   26eba:	b110      	cbz	r0, 26ec2 <z_impl_zsock_setsockopt+0x1c>
   26ebc:	9b02      	ldr	r3, [sp, #8]
   26ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26ec0:	b94b      	cbnz	r3, 26ed6 <z_impl_zsock_setsockopt+0x30>
   26ec2:	f000 fa03 	bl	272cc <__errno>
   26ec6:	2309      	movs	r3, #9
   26ec8:	f04f 34ff 	mov.w	r4, #4294967295
   26ecc:	6003      	str	r3, [r0, #0]
}
   26ece:	4620      	mov	r0, r4
   26ed0:	b004      	add	sp, #16
   26ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   26ed6:	f04f 32ff 	mov.w	r2, #4294967295
   26eda:	f04f 33ff 	mov.w	r3, #4294967295
   26ede:	9803      	ldr	r0, [sp, #12]
   26ee0:	f7ff fee8 	bl	26cb4 <k_mutex_lock.constprop.0>
   26ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26ee6:	4632      	mov	r2, r6
   26ee8:	9300      	str	r3, [sp, #0]
   26eea:	9b02      	ldr	r3, [sp, #8]
   26eec:	4629      	mov	r1, r5
   26eee:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   26ef2:	4620      	mov	r0, r4
   26ef4:	463b      	mov	r3, r7
   26ef6:	47c0      	blx	r8
   26ef8:	4604      	mov	r4, r0
   26efa:	9803      	ldr	r0, [sp, #12]
   26efc:	f7ff fec9 	bl	26c92 <k_mutex_unlock>
   26f00:	e7e5      	b.n	26ece <z_impl_zsock_setsockopt+0x28>

00026f02 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   26f02:	4770      	bx	lr

00026f04 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   26f04:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   26f06:	1e0c      	subs	r4, r1, #0
   26f08:	4605      	mov	r5, r0
   26f0a:	461e      	mov	r6, r3
   26f0c:	9201      	str	r2, [sp, #4]
   26f0e:	db11      	blt.n	26f34 <flash_area_read+0x30>
   26f10:	6881      	ldr	r1, [r0, #8]
   26f12:	18e3      	adds	r3, r4, r3
   26f14:	428b      	cmp	r3, r1
   26f16:	d80d      	bhi.n	26f34 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   26f18:	68c0      	ldr	r0, [r0, #12]
   26f1a:	f7fb ff23 	bl	22d64 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   26f1e:	6869      	ldr	r1, [r5, #4]
   26f20:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   26f22:	6883      	ldr	r3, [r0, #8]
   26f24:	9a01      	ldr	r2, [sp, #4]
   26f26:	681c      	ldr	r4, [r3, #0]
   26f28:	4633      	mov	r3, r6
   26f2a:	46a4      	mov	ip, r4
}
   26f2c:	b002      	add	sp, #8
   26f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26f32:	4760      	bx	ip
   26f34:	f06f 0015 	mvn.w	r0, #21
   26f38:	b002      	add	sp, #8
   26f3a:	bd70      	pop	{r4, r5, r6, pc}

00026f3c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   26f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26f40:	f1b1 0900 	subs.w	r9, r1, #0
   26f44:	4607      	mov	r7, r0
   26f46:	4690      	mov	r8, r2
   26f48:	461e      	mov	r6, r3
   26f4a:	db22      	blt.n	26f92 <flash_area_write+0x56>
   26f4c:	6882      	ldr	r2, [r0, #8]
   26f4e:	444b      	add	r3, r9
   26f50:	4293      	cmp	r3, r2
   26f52:	d81e      	bhi.n	26f92 <flash_area_write+0x56>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   26f54:	68c0      	ldr	r0, [r0, #12]
   26f56:	f7fb ff05 	bl	22d64 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   26f5a:	6879      	ldr	r1, [r7, #4]
   26f5c:	4605      	mov	r5, r0
   26f5e:	4489      	add	r9, r1
	const struct flash_driver_api *api =
   26f60:	6887      	ldr	r7, [r0, #8]
	if (api->write_protection != NULL) {
   26f62:	68fb      	ldr	r3, [r7, #12]
   26f64:	b95b      	cbnz	r3, 26f7e <flash_area_write+0x42>
	rc = api->write(dev, offset, data, len);
   26f66:	4633      	mov	r3, r6
   26f68:	687c      	ldr	r4, [r7, #4]
   26f6a:	4642      	mov	r2, r8
   26f6c:	4649      	mov	r1, r9
   26f6e:	4628      	mov	r0, r5
   26f70:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   26f72:	68fb      	ldr	r3, [r7, #12]
	rc = api->write(dev, offset, data, len);
   26f74:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   26f76:	b943      	cbnz	r3, 26f8a <flash_area_write+0x4e>

	return rc;
}
   26f78:	4620      	mov	r0, r4
   26f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   26f7e:	2100      	movs	r1, #0
   26f80:	4798      	blx	r3
		if (rc) {
   26f82:	4604      	mov	r4, r0
   26f84:	2800      	cmp	r0, #0
   26f86:	d0ee      	beq.n	26f66 <flash_area_write+0x2a>
   26f88:	e7f6      	b.n	26f78 <flash_area_write+0x3c>
		(void) api->write_protection(dev, true);
   26f8a:	2101      	movs	r1, #1
   26f8c:	4628      	mov	r0, r5
   26f8e:	4798      	blx	r3
   26f90:	e7f2      	b.n	26f78 <flash_area_write+0x3c>
		return -EINVAL;
   26f92:	f06f 0415 	mvn.w	r4, #21
   26f96:	e7ef      	b.n	26f78 <flash_area_write+0x3c>

00026f98 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   26f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f9c:	1e0c      	subs	r4, r1, #0
   26f9e:	4605      	mov	r5, r0
   26fa0:	4617      	mov	r7, r2
   26fa2:	db25      	blt.n	26ff0 <flash_area_erase+0x58>
   26fa4:	18a3      	adds	r3, r4, r2
   26fa6:	6882      	ldr	r2, [r0, #8]
   26fa8:	4293      	cmp	r3, r2
   26faa:	d821      	bhi.n	26ff0 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   26fac:	68c0      	ldr	r0, [r0, #12]
   26fae:	f7fb fed9 	bl	22d64 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   26fb2:	686d      	ldr	r5, [r5, #4]
   26fb4:	4606      	mov	r6, r0
   26fb6:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   26fb8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   26fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   26fc0:	b963      	cbnz	r3, 26fdc <flash_area_erase+0x44>
	rc = api->erase(dev, offset, size);
   26fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26fc6:	463a      	mov	r2, r7
   26fc8:	4629      	mov	r1, r5
   26fca:	4630      	mov	r0, r6
   26fcc:	4798      	blx	r3
	if (api->write_protection != NULL) {
   26fce:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   26fd2:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   26fd4:	b943      	cbnz	r3, 26fe8 <flash_area_erase+0x50>

	return rc;
}
   26fd6:	4620      	mov	r0, r4
   26fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   26fdc:	2100      	movs	r1, #0
   26fde:	4798      	blx	r3
		if (rc) {
   26fe0:	4604      	mov	r4, r0
   26fe2:	2800      	cmp	r0, #0
   26fe4:	d0ed      	beq.n	26fc2 <flash_area_erase+0x2a>
   26fe6:	e7f6      	b.n	26fd6 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
   26fe8:	2101      	movs	r1, #1
   26fea:	4630      	mov	r0, r6
   26fec:	4798      	blx	r3
   26fee:	e7f2      	b.n	26fd6 <flash_area_erase+0x3e>
		return -EINVAL;
   26ff0:	f06f 0415 	mvn.w	r4, #21
   26ff4:	e7ef      	b.n	26fd6 <flash_area_erase+0x3e>

00026ff6 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   26ff6:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   26ff8:	68c0      	ldr	r0, [r0, #12]
   26ffa:	f7fb feb3 	bl	22d64 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   26ffe:	6883      	ldr	r3, [r0, #8]
   27000:	691b      	ldr	r3, [r3, #16]
   27002:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   27004:	6800      	ldr	r0, [r0, #0]
   27006:	bd08      	pop	{r3, pc}

00027008 <get_sectors_cb>:
{
   27008:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2700a:	6802      	ldr	r2, [r0, #0]
   2700c:	684c      	ldr	r4, [r1, #4]
   2700e:	42a2      	cmp	r2, r4
   27010:	d316      	bcc.n	27040 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   27012:	688b      	ldr	r3, [r1, #8]
   27014:	4423      	add	r3, r4
   27016:	429a      	cmp	r2, r3
   27018:	d206      	bcs.n	27028 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   2701a:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   2701e:	42ab      	cmp	r3, r5
   27020:	d304      	bcc.n	2702c <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   27022:	f06f 030b 	mvn.w	r3, #11
   27026:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   27028:	2000      	movs	r0, #0
   2702a:	e00a      	b.n	27042 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2702c:	68cd      	ldr	r5, [r1, #12]
   2702e:	1b12      	subs	r2, r2, r4
   27030:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   27034:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   27036:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   2703a:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   2703c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   2703e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   27040:	2001      	movs	r0, #1
}
   27042:	bd70      	pop	{r4, r5, r6, pc}

00027044 <settings_name_steq>:
{
   27044:	b530      	push	{r4, r5, lr}
	if (next) {
   27046:	b10a      	cbz	r2, 2704c <settings_name_steq+0x8>
		*next = NULL;
   27048:	2300      	movs	r3, #0
   2704a:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   2704c:	b190      	cbz	r0, 27074 <settings_name_steq+0x30>
   2704e:	b151      	cbz	r1, 27066 <settings_name_steq+0x22>
   27050:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   27052:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   27056:	4604      	mov	r4, r0
   27058:	f810 3b01 	ldrb.w	r3, [r0], #1
   2705c:	b15d      	cbz	r5, 27076 <settings_name_steq+0x32>
   2705e:	429d      	cmp	r5, r3
   27060:	d101      	bne.n	27066 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   27062:	2d3d      	cmp	r5, #61	; 0x3d
   27064:	d1f5      	bne.n	27052 <settings_name_steq+0xe>
	return 0;
   27066:	2000      	movs	r0, #0
   27068:	e004      	b.n	27074 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2706a:	2b3d      	cmp	r3, #61	; 0x3d
   2706c:	d008      	beq.n	27080 <settings_name_steq+0x3c>
   2706e:	fab3 f083 	clz	r0, r3
   27072:	0940      	lsrs	r0, r0, #5
}
   27074:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   27076:	2b2f      	cmp	r3, #47	; 0x2f
   27078:	d1f7      	bne.n	2706a <settings_name_steq+0x26>
		if (next) {
   2707a:	b10a      	cbz	r2, 27080 <settings_name_steq+0x3c>
			*next = name + 1;
   2707c:	3401      	adds	r4, #1
   2707e:	6014      	str	r4, [r2, #0]
		return 1;
   27080:	2001      	movs	r0, #1
   27082:	e7f7      	b.n	27074 <settings_name_steq+0x30>

00027084 <settings_line_len_calc>:
{
   27084:	b510      	push	{r4, lr}
   27086:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   27088:	f7e9 ff98 	bl	10fbc <strlen>
   2708c:	3401      	adds	r4, #1
}
   2708e:	4420      	add	r0, r4
   27090:	bd10      	pop	{r4, pc}

00027092 <settings_line_raw_read>:
{
   27092:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   27094:	9c04      	ldr	r4, [sp, #16]
   27096:	9401      	str	r4, [sp, #4]
   27098:	2400      	movs	r4, #0
   2709a:	9400      	str	r4, [sp, #0]
   2709c:	f7ee f86e 	bl	1517c <settings_line_raw_read_until>
}
   270a0:	b002      	add	sp, #8
   270a2:	bd10      	pop	{r4, pc}

000270a4 <settings_line_read_cb>:
{
   270a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   270a6:	6803      	ldr	r3, [r0, #0]
   270a8:	9300      	str	r3, [sp, #0]
   270aa:	6840      	ldr	r0, [r0, #4]
   270ac:	ab03      	add	r3, sp, #12
   270ae:	f7ff fff0 	bl	27092 <settings_line_raw_read>
	if (rc == 0) {
   270b2:	b918      	cbnz	r0, 270bc <settings_line_read_cb+0x18>
		return len_read;
   270b4:	9803      	ldr	r0, [sp, #12]
}
   270b6:	b005      	add	sp, #20
   270b8:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   270bc:	f04f 30ff 	mov.w	r0, #4294967295
   270c0:	e7f9      	b.n	270b6 <settings_line_read_cb+0x12>

000270c2 <settings_line_name_read>:
{
   270c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   270c4:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   270c6:	9301      	str	r3, [sp, #4]
   270c8:	f10d 030f 	add.w	r3, sp, #15
   270cc:	9300      	str	r3, [sp, #0]
   270ce:	4613      	mov	r3, r2
   270d0:	460a      	mov	r2, r1
   270d2:	4601      	mov	r1, r0
   270d4:	2000      	movs	r0, #0
	char const until_char = '=';
   270d6:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   270da:	f7ee f84f 	bl	1517c <settings_line_raw_read_until>
}
   270de:	b004      	add	sp, #16
   270e0:	bd10      	pop	{r4, pc}

000270e2 <settings_line_dup_check_cb>:
{
   270e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   270e6:	460f      	mov	r7, r1
   270e8:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   270ea:	6819      	ldr	r1, [r3, #0]
{
   270ec:	4690      	mov	r8, r2
   270ee:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   270f0:	f7e9 ff5a 	bl	10fa8 <strcmp>
   270f4:	4606      	mov	r6, r0
   270f6:	b940      	cbnz	r0, 2710a <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   270f8:	4639      	mov	r1, r7
   270fa:	4640      	mov	r0, r8
   270fc:	f7ee f8fe 	bl	152fc <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   27100:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   27102:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   27104:	4283      	cmp	r3, r0
   27106:	d004      	beq.n	27112 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   27108:	60e6      	str	r6, [r4, #12]
}
   2710a:	2000      	movs	r0, #0
   2710c:	b008      	add	sp, #32
   2710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   27112:	b913      	cbnz	r3, 2711a <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   27114:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   27116:	60e3      	str	r3, [r4, #12]
   27118:	e7f7      	b.n	2710a <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   2711a:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   2711e:	2d10      	cmp	r5, #16
   27120:	46a9      	mov	r9, r5
   27122:	bf28      	it	cs
   27124:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   27128:	9700      	str	r7, [sp, #0]
   2712a:	464a      	mov	r2, r9
   2712c:	ab03      	add	r3, sp, #12
   2712e:	a904      	add	r1, sp, #16
   27130:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   27134:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   27138:	f7ff ffab 	bl	27092 <settings_line_raw_read>
		if (rc) {
   2713c:	b970      	cbnz	r0, 2715c <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   2713e:	9b03      	ldr	r3, [sp, #12]
   27140:	4599      	cmp	r9, r3
   27142:	d10b      	bne.n	2715c <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   27144:	464a      	mov	r2, r9
   27146:	4650      	mov	r0, sl
   27148:	a904      	add	r1, sp, #16
   2714a:	f003 fe6f 	bl	2ae2c <memcmp>
		if (rc) {
   2714e:	b928      	cbnz	r0, 2715c <settings_line_dup_check_cb+0x7a>
		val += len_read;
   27150:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   27152:	1aed      	subs	r5, r5, r3
		val += len_read;
   27154:	449a      	add	sl, r3
		off += len_read;
   27156:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   27158:	d1e1      	bne.n	2711e <settings_line_dup_check_cb+0x3c>
   2715a:	e7db      	b.n	27114 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   2715c:	2300      	movs	r3, #0
   2715e:	e7da      	b.n	27116 <settings_line_dup_check_cb+0x34>

00027160 <get_len_cb>:
}
   27160:	8980      	ldrh	r0, [r0, #12]
   27162:	4770      	bx	lr

00027164 <write_handler>:
{
   27164:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   27166:	6804      	ldr	r4, [r0, #0]
   27168:	6885      	ldr	r5, [r0, #8]
   2716a:	6824      	ldr	r4, [r4, #0]
   2716c:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   2716e:	4421      	add	r1, r4
   27170:	6900      	ldr	r0, [r0, #16]
}
   27172:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   27174:	f7ff bee2 	b.w	26f3c <flash_area_write>

00027178 <read_handler>:
{
   27178:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   2717a:	8984      	ldrh	r4, [r0, #12]
   2717c:	428c      	cmp	r4, r1
   2717e:	dc03      	bgt.n	27188 <read_handler+0x10>
}
   27180:	bc30      	pop	{r4, r5}
		*len = 0;
   27182:	2000      	movs	r0, #0
   27184:	6018      	str	r0, [r3, #0]
}
   27186:	4770      	bx	lr
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   27188:	681d      	ldr	r5, [r3, #0]
   2718a:	440d      	add	r5, r1
   2718c:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   2718e:	bf84      	itt	hi
   27190:	1a64      	subhi	r4, r4, r1
   27192:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   27194:	6804      	ldr	r4, [r0, #0]
   27196:	6885      	ldr	r5, [r0, #8]
   27198:	6824      	ldr	r4, [r4, #0]
   2719a:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   2719c:	4421      	add	r1, r4
   2719e:	681b      	ldr	r3, [r3, #0]
   271a0:	6900      	ldr	r0, [r0, #16]
}
   271a2:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   271a4:	f7ff beae 	b.w	26f04 <flash_area_read>

000271a8 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   271a8:	2200      	movs	r2, #0
   271aa:	e9c0 2200 	strd	r2, r2, [r0]
   271ae:	6082      	str	r2, [r0, #8]
}
   271b0:	4770      	bx	lr

000271b2 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   271b2:	b510      	push	{r4, lr}
   271b4:	b40f      	push	{r0, r1, r2, r3}
   271b6:	f7ee fbd1 	bl	1595c <before_nse>
   271ba:	bc0f      	pop	{r0, r1, r2, r3}
   271bc:	f7e8 ff14 	bl	ffe8 <spm_request_random_number_nse>
   271c0:	b40f      	push	{r0, r1, r2, r3}
   271c2:	f7ee fbd5 	bl	15970 <after_nse>
   271c6:	bc0f      	pop	{r0, r1, r2, r3}
   271c8:	bd10      	pop	{r4, pc}

000271ca <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   271ca:	b510      	push	{r4, lr}
   271cc:	b40f      	push	{r0, r1, r2, r3}
   271ce:	f7ee fbc5 	bl	1595c <before_nse>
   271d2:	bc0f      	pop	{r0, r1, r2, r3}
   271d4:	f7e8 ff10 	bl	fff8 <spm_request_read_nse>
   271d8:	b40f      	push	{r0, r1, r2, r3}
   271da:	f7ee fbc9 	bl	15970 <after_nse>
   271de:	bc0f      	pop	{r0, r1, r2, r3}
   271e0:	bd10      	pop	{r4, pc}

000271e2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   271e2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   271e4:	6800      	ldr	r0, [r0, #0]
   271e6:	f7ee bbeb 	b.w	159c0 <z_arm_fatal_error>

000271ea <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   271ea:	2100      	movs	r1, #0
   271ec:	2001      	movs	r0, #1
   271ee:	f7ee bbe7 	b.w	159c0 <z_arm_fatal_error>

000271f2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   271f2:	b508      	push	{r3, lr}
	handler();
   271f4:	f7ee fc96 	bl	15b24 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   271f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   271fc:	f7ee bd9a 	b.w	15d34 <z_arm_exc_exit>

00027200 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   27200:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27202:	f383 880b 	msr	PSPLIM, r3
}
   27206:	4770      	bx	lr

00027208 <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   27208:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   2720c:	075a      	lsls	r2, r3, #29
   2720e:	d512      	bpl.n	27236 <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   27210:	f100 0240 	add.w	r2, r0, #64	; 0x40
   27214:	ec80 0a10 	vstmia	r0, {s0-s15}
   27218:	ec82 8a10 	vstmia	r2, {s16-s31}
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
   2721c:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   27220:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   27224:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   27226:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   2722a:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2722e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   27232:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   27236:	4770      	bx	lr

00027238 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   27238:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   2723c:	b18b      	cbz	r3, 27262 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2723e:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   27242:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   27246:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2724a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   2724e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   27252:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   27256:	f100 0340 	add.w	r3, r0, #64	; 0x40
   2725a:	ec90 0a10 	vldmia	r0, {s0-s15}
   2725e:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   27262:	4770      	bx	lr

00027264 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   27264:	e840 f000 	tt	r0, r0
   27268:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2726a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2726e:	bf14      	ite	ne
   27270:	4618      	movne	r0, r3
   27272:	f06f 0015 	mvneq.w	r0, #21
   27276:	4770      	bx	lr

00027278 <mpu_configure_region>:
{
   27278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   2727a:	890a      	ldrh	r2, [r1, #8]
   2727c:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   2727e:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   27280:	684d      	ldr	r5, [r1, #4]
   27282:	f002 021f 	and.w	r2, r2, #31
   27286:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   2728a:	9300      	str	r3, [sp, #0]
   2728c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27290:	f023 031f 	bic.w	r3, r3, #31
   27294:	1e6a      	subs	r2, r5, #1
   27296:	4413      	add	r3, r2
   27298:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2729c:	280f      	cmp	r0, #15
   2729e:	9303      	str	r3, [sp, #12]
   272a0:	d903      	bls.n	272aa <mpu_configure_region+0x32>
   272a2:	f7ef f819 	bl	162d8 <region_allocate_and_init.part.0>
}
   272a6:	b004      	add	sp, #16
   272a8:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
   272aa:	4669      	mov	r1, sp
   272ac:	f7ee fffc 	bl	162a8 <region_init>
	return region_allocate_and_init(index,
   272b0:	e7f9      	b.n	272a6 <mpu_configure_region+0x2e>

000272b2 <malloc_prepare>:
}
   272b2:	2000      	movs	r0, #0
   272b4:	4770      	bx	lr

000272b6 <_stdout_hook_default>:
}
   272b6:	f04f 30ff 	mov.w	r0, #4294967295
   272ba:	4770      	bx	lr

000272bc <__retarget_lock_acquire_recursive>:
   272bc:	f04f 32ff 	mov.w	r2, #4294967295
   272c0:	f04f 33ff 	mov.w	r3, #4294967295
   272c4:	f7fb bfa4 	b.w	23210 <z_impl_k_mutex_lock>

000272c8 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   272c8:	f7fc b820 	b.w	2330c <z_impl_k_mutex_unlock>

000272cc <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   272cc:	f7fb bd76 	b.w	22dbc <z_impl_z_errno>

000272d0 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   272d0:	b508      	push	{r3, lr}
	net_if_init();
   272d2:	f7ef f9bf 	bl	16654 <net_if_init>
	net_if_post_init();
   272d6:	f7ef f9dd 	bl	16694 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   272da:	2000      	movs	r0, #0
   272dc:	bd08      	pop	{r3, pc}

000272de <net_if_l2>:
	if (!iface || !iface->if_dev) {
   272de:	b110      	cbz	r0, 272e6 <net_if_l2+0x8>
   272e0:	6800      	ldr	r0, [r0, #0]
   272e2:	b100      	cbz	r0, 272e6 <net_if_l2+0x8>
	return iface->if_dev->l2;
   272e4:	6840      	ldr	r0, [r0, #4]
}
   272e6:	4770      	bx	lr

000272e8 <l2_flags_get>:
{
   272e8:	b510      	push	{r4, lr}
   272ea:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   272ec:	f7ff fff7 	bl	272de <net_if_l2>
   272f0:	b128      	cbz	r0, 272fe <l2_flags_get+0x16>
   272f2:	68c2      	ldr	r2, [r0, #12]
   272f4:	b11a      	cbz	r2, 272fe <l2_flags_get+0x16>
}
   272f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   272fa:	4618      	mov	r0, r3
   272fc:	4710      	bx	r2
}
   272fe:	2000      	movs	r0, #0
   27300:	bd10      	pop	{r4, pc}

00027302 <net_if_flag_is_set>:
	if (iface == NULL) {
   27302:	b138      	cbz	r0, 27314 <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27304:	6803      	ldr	r3, [r0, #0]
   27306:	330c      	adds	r3, #12
   27308:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2730c:	fa43 f101 	asr.w	r1, r3, r1
   27310:	f001 0001 	and.w	r0, r1, #1
}
   27314:	4770      	bx	lr

00027316 <net_if_up>:
{
   27316:	b538      	push	{r3, r4, r5, lr}
   27318:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   2731a:	f04f 31ff 	mov.w	r1, #4294967295
   2731e:	f04f 30ff 	mov.w	r0, #4294967295
   27322:	f7ef f98f 	bl	16644 <k_mutex_lock.constprop.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27326:	2100      	movs	r1, #0
   27328:	4628      	mov	r0, r5
   2732a:	f7ff ffea 	bl	27302 <net_if_flag_is_set>
   2732e:	4604      	mov	r4, r0
   27330:	bb48      	cbnz	r0, 27386 <net_if_up+0x70>
	     net_if_is_socket_offloaded(iface))) {
   27332:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   27334:	7e9a      	ldrb	r2, [r3, #26]
   27336:	b162      	cbz	r2, 27352 <net_if_up+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27338:	330c      	adds	r3, #12
   2733a:	e8d3 2fef 	ldaex	r2, [r3]
   2733e:	f042 0201 	orr.w	r2, r2, #1
   27342:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27346:	2900      	cmp	r1, #0
   27348:	d1f7      	bne.n	2733a <net_if_up+0x24>
	k_mutex_unlock(&lock);
   2734a:	f7ef f975 	bl	16638 <k_mutex_unlock.constprop.0>
}
   2734e:	4620      	mov	r0, r4
   27350:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27352:	4628      	mov	r0, r5
   27354:	f7ff ffc3 	bl	272de <net_if_l2>
   27358:	4604      	mov	r4, r0
   2735a:	b130      	cbz	r0, 2736a <net_if_up+0x54>
   2735c:	6884      	ldr	r4, [r0, #8]
   2735e:	b124      	cbz	r4, 2736a <net_if_up+0x54>
	status = net_if_l2(iface)->enable(iface, true);
   27360:	2101      	movs	r1, #1
   27362:	4628      	mov	r0, r5
   27364:	47a0      	blx	r4
	if (status < 0) {
   27366:	1e04      	subs	r4, r0, #0
   27368:	dbef      	blt.n	2734a <net_if_up+0x34>
   2736a:	682b      	ldr	r3, [r5, #0]
   2736c:	330c      	adds	r3, #12
   2736e:	e8d3 2fef 	ldaex	r2, [r3]
   27372:	f042 0201 	orr.w	r2, r2, #1
   27376:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2737a:	2900      	cmp	r1, #0
   2737c:	d1f7      	bne.n	2736e <net_if_up+0x58>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2737e:	4628      	mov	r0, r5
   27380:	f7ff ffb2 	bl	272e8 <l2_flags_get>
notify:
   27384:	e7e1      	b.n	2734a <net_if_up+0x34>
		status = -EALREADY;
   27386:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2738a:	e7de      	b.n	2734a <net_if_up+0x34>

0002738c <net_byte_to_hex>:
{
   2738c:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2738e:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   27390:	b1bb      	cbz	r3, 273c2 <net_byte_to_hex+0x36>
		if (val < 10) {
   27392:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   27394:	b26b      	sxtb	r3, r5
   27396:	bf86      	itte	hi
   27398:	f1a2 050a 	subhi.w	r5, r2, #10
   2739c:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2739e:	3330      	addls	r3, #48	; 0x30
   273a0:	1c44      	adds	r4, r0, #1
   273a2:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   273a4:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   273a8:	4619      	mov	r1, r3
   273aa:	2b09      	cmp	r3, #9
	*ptr = '\0';
   273ac:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   273b0:	bf83      	ittte	hi
   273b2:	3a0a      	subhi	r2, #10
   273b4:	1889      	addhi	r1, r1, r2
   273b6:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   273b8:	3130      	addls	r1, #48	; 0x30
   273ba:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   273bc:	7063      	strb	r3, [r4, #1]
   273be:	1c60      	adds	r0, r4, #1
}
   273c0:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   273c2:	2d00      	cmp	r5, #0
   273c4:	d1e5      	bne.n	27392 <net_byte_to_hex+0x6>
   273c6:	4604      	mov	r4, r0
   273c8:	e7ec      	b.n	273a4 <net_byte_to_hex+0x18>

000273ca <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   273ca:	2801      	cmp	r0, #1
{
   273cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   273d0:	460c      	mov	r4, r1
   273d2:	4616      	mov	r6, r2
	if (family == AF_INET) {
   273d4:	d126      	bne.n	27424 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   273d6:	4608      	mov	r0, r1
   273d8:	f7e9 fdf0 	bl	10fbc <strlen>
		for (i = 0; i < len; i++) {
   273dc:	4623      	mov	r3, r4
   273de:	4420      	add	r0, r4
   273e0:	4298      	cmp	r0, r3
   273e2:	d112      	bne.n	2740a <z_impl_net_addr_pton+0x40>
   273e4:	4635      	mov	r5, r6
   273e6:	2300      	movs	r3, #0
   273e8:	3603      	adds	r6, #3
   273ea:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   273ee:	4620      	mov	r0, r4
   273f0:	220a      	movs	r2, #10
   273f2:	a901      	add	r1, sp, #4
   273f4:	f7fd fd02 	bl	24dfc <strtol>

			src = ++endptr;
   273f8:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   273fa:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   273fe:	42ae      	cmp	r6, r5
			src = ++endptr;
   27400:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   27404:	d1f3      	bne.n	273ee <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   27406:	2000      	movs	r0, #0
   27408:	e009      	b.n	2741e <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   2740a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2740e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   27412:	2909      	cmp	r1, #9
   27414:	d9e4      	bls.n	273e0 <z_impl_net_addr_pton+0x16>
   27416:	2a2e      	cmp	r2, #46	; 0x2e
   27418:	d0e2      	beq.n	273e0 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   2741a:	f06f 0015 	mvn.w	r0, #21
}
   2741e:	b003      	add	sp, #12
   27420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   27424:	2802      	cmp	r0, #2
   27426:	d1f8      	bne.n	2741a <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   27428:	212e      	movs	r1, #46	; 0x2e
   2742a:	4620      	mov	r0, r4
   2742c:	f003 fe46 	bl	2b0bc <strchr>
		if (*src == ':') {
   27430:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   27432:	2800      	cmp	r0, #0
   27434:	bf14      	ite	ne
   27436:	2706      	movne	r7, #6
   27438:	2708      	moveq	r7, #8
		if (*src == ':') {
   2743a:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   2743c:	bf08      	it	eq
   2743e:	3401      	addeq	r4, #1
		len = strlen(src);
   27440:	4620      	mov	r0, r4
   27442:	f7e9 fdbb 	bl	10fbc <strlen>
		for (i = 0; i < len; i++) {
   27446:	2300      	movs	r3, #0
   27448:	4283      	cmp	r3, r0
   2744a:	db21      	blt.n	27490 <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   2744c:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   2744e:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   27450:	2c00      	cmp	r4, #0
   27452:	d0e2      	beq.n	2741a <z_impl_net_addr_pton+0x50>
   27454:	7823      	ldrb	r3, [r4, #0]
   27456:	2b00      	cmp	r3, #0
   27458:	d0df      	beq.n	2741a <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   2745a:	2b3a      	cmp	r3, #58	; 0x3a
   2745c:	d02d      	beq.n	274ba <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   2745e:	2210      	movs	r2, #16
   27460:	2100      	movs	r1, #0
   27462:	4620      	mov	r0, r4
   27464:	f7fd fcca 	bl	24dfc <strtol>
   27468:	2210      	movs	r2, #16
   2746a:	4681      	mov	r9, r0
   2746c:	2100      	movs	r1, #0
   2746e:	4620      	mov	r0, r4
   27470:	f7fd fcc4 	bl	24dfc <strtol>
   27474:	f3c9 2907 	ubfx	r9, r9, #8, #8
   27478:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
   2747c:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
				src = strchr(src, ':');
   27480:	213a      	movs	r1, #58	; 0x3a
   27482:	4620      	mov	r0, r4
   27484:	f003 fe1a 	bl	2b0bc <strchr>
				if (src) {
   27488:	4604      	mov	r4, r0
   2748a:	b178      	cbz	r0, 274ac <z_impl_net_addr_pton+0xe2>
			src++;
   2748c:	3401      	adds	r4, #1
   2748e:	e010      	b.n	274b2 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   27490:	5ce2      	ldrb	r2, [r4, r3]
   27492:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   27496:	290a      	cmp	r1, #10
   27498:	d906      	bls.n	274a8 <z_impl_net_addr_pton+0xde>
   2749a:	f022 0120 	bic.w	r1, r2, #32
   2749e:	3941      	subs	r1, #65	; 0x41
   274a0:	2905      	cmp	r1, #5
   274a2:	d901      	bls.n	274a8 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   274a4:	2a2e      	cmp	r2, #46	; 0x2e
   274a6:	d1b8      	bne.n	2741a <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   274a8:	3301      	adds	r3, #1
   274aa:	e7cd      	b.n	27448 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   274ac:	1e7b      	subs	r3, r7, #1
   274ae:	42ab      	cmp	r3, r5
   274b0:	dcb3      	bgt.n	2741a <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   274b2:	3501      	adds	r5, #1
   274b4:	42af      	cmp	r7, r5
   274b6:	dccb      	bgt.n	27450 <z_impl_net_addr_pton+0x86>
   274b8:	e013      	b.n	274e2 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   274ba:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   274be:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   274c2:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   274c6:	3501      	adds	r5, #1
   274c8:	42af      	cmp	r7, r5
   274ca:	dcf6      	bgt.n	274ba <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   274cc:	213a      	movs	r1, #58	; 0x3a
   274ce:	4620      	mov	r0, r4
   274d0:	f003 fe3b 	bl	2b14a <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   274d4:	42a0      	cmp	r0, r4
   274d6:	d11f      	bne.n	27518 <z_impl_net_addr_pton+0x14e>
   274d8:	2f06      	cmp	r7, #6
   274da:	d001      	beq.n	274e0 <z_impl_net_addr_pton+0x116>
   274dc:	7863      	ldrb	r3, [r4, #1]
   274de:	bb63      	cbnz	r3, 2753a <z_impl_net_addr_pton+0x170>
				src++;
   274e0:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   274e2:	2f06      	cmp	r7, #6
   274e4:	d18f      	bne.n	27406 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   274e6:	2500      	movs	r5, #0
   274e8:	360c      	adds	r6, #12
				if (!src || !*src) {
   274ea:	2c00      	cmp	r4, #0
   274ec:	d095      	beq.n	2741a <z_impl_net_addr_pton+0x50>
   274ee:	7823      	ldrb	r3, [r4, #0]
   274f0:	2b00      	cmp	r3, #0
   274f2:	d092      	beq.n	2741a <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   274f4:	220a      	movs	r2, #10
   274f6:	2100      	movs	r1, #0
   274f8:	4620      	mov	r0, r4
   274fa:	f7fd fc7f 	bl	24dfc <strtol>
				src = strchr(src, '.');
   274fe:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   27500:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   27504:	4620      	mov	r0, r4
   27506:	f003 fdd9 	bl	2b0bc <strchr>
				if (src) {
   2750a:	4604      	mov	r4, r0
   2750c:	b1b8      	cbz	r0, 2753e <z_impl_net_addr_pton+0x174>
					src++;
   2750e:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   27510:	3501      	adds	r5, #1
   27512:	2d04      	cmp	r5, #4
   27514:	d1e9      	bne.n	274ea <z_impl_net_addr_pton+0x120>
   27516:	e776      	b.n	27406 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   27518:	2f06      	cmp	r7, #6
   2751a:	d100      	bne.n	2751e <z_impl_net_addr_pton+0x154>
				tmp--;
   2751c:	3801      	subs	r0, #1
			i = expected_groups - 1;
   2751e:	1e7d      	subs	r5, r7, #1
   27520:	3001      	adds	r0, #1
				if (*tmp == ':') {
   27522:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   27526:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   27528:	bf08      	it	eq
   2752a:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   2752e:	2d00      	cmp	r5, #0
   27530:	f6ff af73 	blt.w	2741a <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   27534:	42a0      	cmp	r0, r4
   27536:	d1f4      	bne.n	27522 <z_impl_net_addr_pton+0x158>
   27538:	e7a8      	b.n	2748c <z_impl_net_addr_pton+0xc2>
   2753a:	4620      	mov	r0, r4
   2753c:	e7ef      	b.n	2751e <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   2753e:	2d03      	cmp	r5, #3
   27540:	f47f af6b 	bne.w	2741a <z_impl_net_addr_pton+0x50>
   27544:	e7e4      	b.n	27510 <z_impl_net_addr_pton+0x146>

00027546 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   27546:	e9d0 2300 	ldrd	r2, r3, [r0]
   2754a:	1a9b      	subs	r3, r3, r2
   2754c:	2b01      	cmp	r3, #1
{
   2754e:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   27550:	d90c      	bls.n	2756c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   27552:	4614      	mov	r4, r2
   27554:	1c53      	adds	r3, r2, #1
   27556:	6003      	str	r3, [r0, #0]
   27558:	f814 3b02 	ldrb.w	r3, [r4], #2
   2755c:	021b      	lsls	r3, r3, #8
   2755e:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   27560:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   27562:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   27564:	7852      	ldrb	r2, [r2, #1]
   27566:	4313      	orrs	r3, r2
   27568:	800b      	strh	r3, [r1, #0]
}
   2756a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2756c:	f06f 0015 	mvn.w	r0, #21
   27570:	e7fb      	b.n	2756a <unpack_uint16+0x24>

00027572 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   27572:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27574:	e9d0 3400 	ldrd	r3, r4, [r0]
   27578:	429c      	cmp	r4, r3
   2757a:	d01f      	beq.n	275bc <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   2757c:	1c5c      	adds	r4, r3, #1
   2757e:	6004      	str	r4, [r0, #0]
   27580:	781b      	ldrb	r3, [r3, #0]
   27582:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   27584:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   27586:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   27588:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   2758a:	6804      	ldr	r4, [r0, #0]
   2758c:	42bc      	cmp	r4, r7
   2758e:	d218      	bcs.n	275c2 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   27590:	4625      	mov	r5, r4
   27592:	f815 3b01 	ldrb.w	r3, [r5], #1
   27596:	6816      	ldr	r6, [r2, #0]
   27598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2759c:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2759e:	4433      	add	r3, r6
   275a0:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   275a2:	6005      	str	r5, [r0, #0]
   275a4:	f994 4000 	ldrsb.w	r4, [r4]
   275a8:	2c00      	cmp	r4, #0
   275aa:	db04      	blt.n	275b6 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   275ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   275b0:	d204      	bcs.n	275bc <fixed_header_decode+0x4a>
	return 0;
   275b2:	2000      	movs	r0, #0
   275b4:	e004      	b.n	275c0 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   275b6:	3107      	adds	r1, #7
   275b8:	291c      	cmp	r1, #28
   275ba:	d1e6      	bne.n	2758a <fixed_header_decode+0x18>
		return -EINVAL;
   275bc:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   275c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   275c2:	f06f 000a 	mvn.w	r0, #10
   275c6:	e7fb      	b.n	275c0 <fixed_header_decode+0x4e>

000275c8 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   275c8:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   275ca:	e9d1 3500 	ldrd	r3, r5, [r1]
   275ce:	429d      	cmp	r5, r3
   275d0:	d102      	bne.n	275d8 <connect_ack_decode+0x10>
		return -EINVAL;
   275d2:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   275d6:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   275d8:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   275da:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   275dc:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   275de:	d0f8      	beq.n	275d2 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   275e0:	461d      	mov	r5, r3
   275e2:	f815 4b02 	ldrb.w	r4, [r5], #2
   275e6:	600d      	str	r5, [r1, #0]
   275e8:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   275ea:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
	return 0;
   275ee:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   275f0:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   275f2:	bf04      	itt	eq
   275f4:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   275f8:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   275fa:	7051      	strb	r1, [r2, #1]
	return 0;
   275fc:	e7eb      	b.n	275d6 <connect_ack_decode+0xe>

000275fe <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   275fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27602:	461c      	mov	r4, r3
   27604:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   27606:	7da2      	ldrb	r2, [r4, #22]
   27608:	0043      	lsls	r3, r0, #1
   2760a:	f022 0203 	bic.w	r2, r2, #3
   2760e:	f003 0302 	and.w	r3, r3, #2
   27612:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   27614:	f3c0 0041 	ubfx	r0, r0, #1, #2
   27618:	7220      	strb	r0, [r4, #8]
{
   2761a:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2761c:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2761e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   27620:	f10d 0106 	add.w	r1, sp, #6
   27624:	f7ff ff8f 	bl	27546 <unpack_uint16>
	if (err_code != 0) {
   27628:	4606      	mov	r6, r0
   2762a:	b9c0      	cbnz	r0, 2765e <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2762c:	683b      	ldr	r3, [r7, #0]
   2762e:	687a      	ldr	r2, [r7, #4]
   27630:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   27634:	1ad2      	subs	r2, r2, r3
   27636:	42aa      	cmp	r2, r5
   27638:	da02      	bge.n	27640 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   2763a:	f06f 0615 	mvn.w	r6, #21
   2763e:	e00e      	b.n	2765e <publish_decode+0x60>
	str->size = utf8_strlen;
   27640:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   27642:	b185      	cbz	r5, 27666 <publish_decode+0x68>
		str->utf8 = buf->cur;
   27644:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   27646:	442b      	add	r3, r5
   27648:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2764a:	7a23      	ldrb	r3, [r4, #8]
   2764c:	b96b      	cbnz	r3, 2766a <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2764e:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   27650:	45a8      	cmp	r8, r5
   27652:	d3f2      	bcc.n	2763a <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   27654:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   27656:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   2765a:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2765c:	6125      	str	r5, [r4, #16]

	return 0;
}
   2765e:	4630      	mov	r0, r6
   27660:	b002      	add	sp, #8
   27662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   27666:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   27668:	e7ef      	b.n	2764a <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   2766a:	4638      	mov	r0, r7
   2766c:	f104 0114 	add.w	r1, r4, #20
   27670:	f7ff ff69 	bl	27546 <unpack_uint16>
		if (err_code != 0) {
   27674:	b908      	cbnz	r0, 2767a <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   27676:	3504      	adds	r5, #4
   27678:	e7ea      	b.n	27650 <publish_decode+0x52>
   2767a:	4606      	mov	r6, r0
   2767c:	e7ef      	b.n	2765e <publish_decode+0x60>

0002767e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2767e:	f7ff bf62 	b.w	27546 <unpack_uint16>

00027682 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   27682:	f7ff bf60 	b.w	27546 <unpack_uint16>

00027686 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   27686:	f7ff bf5e 	b.w	27546 <unpack_uint16>

0002768a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2768a:	f7ff bf5c 	b.w	27546 <unpack_uint16>

0002768e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2768e:	b538      	push	{r3, r4, r5, lr}
   27690:	4605      	mov	r5, r0
   27692:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   27694:	f7ff ff57 	bl	27546 <unpack_uint16>
	if (err_code != 0) {
   27698:	b930      	cbnz	r0, 276a8 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2769a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2769e:	1a99      	subs	r1, r3, r2
	str->len = length;
   276a0:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   276a2:	b111      	cbz	r1, 276aa <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   276a4:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   276a6:	602b      	str	r3, [r5, #0]
}
   276a8:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   276aa:	6060      	str	r0, [r4, #4]
   276ac:	e7fc      	b.n	276a8 <subscribe_ack_decode+0x1a>

000276ae <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   276ae:	f7ff bf4a 	b.w	27546 <unpack_uint16>

000276b2 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   276b2:	e9d1 3200 	ldrd	r3, r2, [r1]
   276b6:	1ad2      	subs	r2, r2, r3
   276b8:	2a01      	cmp	r2, #1
   276ba:	d909      	bls.n	276d0 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   276bc:	1c5a      	adds	r2, r3, #1
   276be:	600a      	str	r2, [r1, #0]
   276c0:	0a02      	lsrs	r2, r0, #8
   276c2:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   276c4:	680b      	ldr	r3, [r1, #0]
   276c6:	1c5a      	adds	r2, r3, #1
   276c8:	600a      	str	r2, [r1, #0]
   276ca:	7018      	strb	r0, [r3, #0]
	return 0;
   276cc:	2000      	movs	r0, #0
   276ce:	4770      	bx	lr
		return -ENOMEM;
   276d0:	f06f 000b 	mvn.w	r0, #11
}
   276d4:	4770      	bx	lr

000276d6 <pack_utf8_str>:
{
   276d6:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   276d8:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   276dc:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   276de:	6840      	ldr	r0, [r0, #4]
   276e0:	1a9b      	subs	r3, r3, r2
   276e2:	1c82      	adds	r2, r0, #2
   276e4:	4293      	cmp	r3, r2
{
   276e6:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   276e8:	d30d      	bcc.n	27706 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   276ea:	b280      	uxth	r0, r0
   276ec:	f7ff ffe1 	bl	276b2 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   276f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   276f4:	6820      	ldr	r0, [r4, #0]
   276f6:	f003 fba7 	bl	2ae48 <memcpy>
	return 0;
   276fa:	2000      	movs	r0, #0
	buf->cur += str->size;
   276fc:	6823      	ldr	r3, [r4, #0]
   276fe:	686a      	ldr	r2, [r5, #4]
   27700:	4413      	add	r3, r2
   27702:	6023      	str	r3, [r4, #0]
}
   27704:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   27706:	f06f 000b 	mvn.w	r0, #11
   2770a:	e7fb      	b.n	27704 <pack_utf8_str+0x2e>

0002770c <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   2770c:	6813      	ldr	r3, [r2, #0]
{
   2770e:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   27710:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   27712:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   27716:	d227      	bcs.n	27768 <mqtt_encode_fixed_header+0x5c>
   27718:	4625      	mov	r5, r4
   2771a:	2600      	movs	r6, #0
	} while (length > 0);
   2771c:	09ed      	lsrs	r5, r5, #7
   2771e:	b2f3      	uxtb	r3, r6
   27720:	f106 0601 	add.w	r6, r6, #1
   27724:	d1fa      	bne.n	2771c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   27726:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27728:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2772a:	b2db      	uxtb	r3, r3
   2772c:	425d      	negs	r5, r3
   2772e:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27730:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   27732:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   27734:	bf1e      	ittt	ne
   27736:	3301      	addne	r3, #1
   27738:	6013      	strne	r3, [r2, #0]
   2773a:	5548      	strbne	r0, [r1, r5]
	return 0;
   2773c:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2773e:	6813      	ldr	r3, [r2, #0]
   27740:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   27744:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   27746:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   27748:	bf1f      	itttt	ne
   2774a:	6811      	ldrne	r1, [r2, #0]
   2774c:	780b      	ldrbne	r3, [r1, #0]
   2774e:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   27752:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   27754:	6813      	ldr	r3, [r2, #0]
   27756:	3301      	adds	r3, #1
   27758:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2775a:	2800      	cmp	r0, #0
   2775c:	d1ef      	bne.n	2773e <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   2775e:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   27760:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   27762:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   27764:	6053      	str	r3, [r2, #4]
}
   27766:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   27768:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2776c:	e7fb      	b.n	27766 <mqtt_encode_fixed_header+0x5a>

0002776e <mqtt_message_id_only_enc>:
{
   2776e:	b570      	push	{r4, r5, r6, lr}
   27770:	4606      	mov	r6, r0
   27772:	4614      	mov	r4, r2
	if (message_id == 0U) {
   27774:	4608      	mov	r0, r1
   27776:	b169      	cbz	r1, 27794 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27778:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   2777a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2777c:	3505      	adds	r5, #5
   2777e:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   27780:	f7ff ff97 	bl	276b2 <pack_uint16>
	if (err_code != 0) {
   27784:	b940      	cbnz	r0, 27798 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   27786:	4622      	mov	r2, r4
   27788:	4629      	mov	r1, r5
   2778a:	4630      	mov	r0, r6
}
   2778c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   27790:	f7ff bfbc 	b.w	2770c <mqtt_encode_fixed_header>
		return -EINVAL;
   27794:	f06f 0015 	mvn.w	r0, #21
}
   27798:	bd70      	pop	{r4, r5, r6, pc}

0002779a <publish_encode>:
{
   2779a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2779e:	7d87      	ldrb	r7, [r0, #22]
   277a0:	7a04      	ldrb	r4, [r0, #8]
   277a2:	f007 0801 	and.w	r8, r7, #1
{
   277a6:	4605      	mov	r5, r0
   277a8:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   277aa:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   277ae:	b10c      	cbz	r4, 277b4 <publish_encode+0x1a>
   277b0:	8a83      	ldrh	r3, [r0, #20]
   277b2:	b383      	cbz	r3, 27816 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   277b4:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   277b8:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   277ba:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   277bc:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   277be:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   277c2:	f7ff ff88 	bl	276d6 <pack_utf8_str>
	if (err_code != 0) {
   277c6:	b9b0      	cbnz	r0, 277f6 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   277c8:	7a2b      	ldrb	r3, [r5, #8]
   277ca:	b9b3      	cbnz	r3, 277fa <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   277cc:	0060      	lsls	r0, r4, #1
   277ce:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   277d2:	692a      	ldr	r2, [r5, #16]
   277d4:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   277d8:	4338      	orrs	r0, r7
   277da:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   277de:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   277e0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   277e4:	464a      	mov	r2, r9
   277e6:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   277e8:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   277ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   277f0:	f7ff ff8c 	bl	2770c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   277f4:	b140      	cbz	r0, 27808 <publish_encode+0x6e>
}
   277f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   277fa:	4649      	mov	r1, r9
   277fc:	8aa8      	ldrh	r0, [r5, #20]
   277fe:	f7ff ff58 	bl	276b2 <pack_uint16>
		if (err_code != 0) {
   27802:	2800      	cmp	r0, #0
   27804:	d0e2      	beq.n	277cc <publish_encode+0x32>
   27806:	e7f6      	b.n	277f6 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   27808:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2780c:	692a      	ldr	r2, [r5, #16]
   2780e:	1a9b      	subs	r3, r3, r2
   27810:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   27814:	e7ef      	b.n	277f6 <publish_encode+0x5c>
		return -EINVAL;
   27816:	f06f 0015 	mvn.w	r0, #21
   2781a:	e7ec      	b.n	277f6 <publish_encode+0x5c>

0002781c <publish_ack_encode>:
{
   2781c:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   2781e:	8801      	ldrh	r1, [r0, #0]
   27820:	2040      	movs	r0, #64	; 0x40
   27822:	f7ff bfa4 	b.w	2776e <mqtt_message_id_only_enc>

00027826 <subscribe_encode>:
{
   27826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2782a:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   2782c:	88c0      	ldrh	r0, [r0, #6]
{
   2782e:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   27830:	b330      	cbz	r0, 27880 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27832:	680f      	ldr	r7, [r1, #0]
   27834:	3705      	adds	r7, #5
   27836:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   27838:	f7ff ff3b 	bl	276b2 <pack_uint16>
	if (err_code != 0) {
   2783c:	4604      	mov	r4, r0
   2783e:	bb08      	cbnz	r0, 27884 <subscribe_encode+0x5e>
   27840:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   27844:	88b3      	ldrh	r3, [r6, #4]
   27846:	42a3      	cmp	r3, r4
   27848:	dc06      	bgt.n	27858 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   2784a:	462a      	mov	r2, r5
   2784c:	4639      	mov	r1, r7
}
   2784e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   27852:	2082      	movs	r0, #130	; 0x82
   27854:	f7ff bf5a 	b.w	2770c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   27858:	fb08 f904 	mul.w	r9, r8, r4
   2785c:	6830      	ldr	r0, [r6, #0]
   2785e:	4629      	mov	r1, r5
   27860:	4448      	add	r0, r9
   27862:	f7ff ff38 	bl	276d6 <pack_utf8_str>
		if (err_code != 0) {
   27866:	b980      	cbnz	r0, 2788a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   27868:	6833      	ldr	r3, [r6, #0]
   2786a:	444b      	add	r3, r9
   2786c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2786e:	e9d5 3100 	ldrd	r3, r1, [r5]
   27872:	4299      	cmp	r1, r3
   27874:	d00b      	beq.n	2788e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   27876:	1c59      	adds	r1, r3, #1
   27878:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   2787a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   2787c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   2787e:	e7e1      	b.n	27844 <subscribe_encode+0x1e>
		return -EINVAL;
   27880:	f06f 0415 	mvn.w	r4, #21
}
   27884:	4620      	mov	r0, r4
   27886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   2788a:	4604      	mov	r4, r0
   2788c:	e7fa      	b.n	27884 <subscribe_encode+0x5e>
		return -ENOMEM;
   2788e:	f06f 040b 	mvn.w	r4, #11
   27892:	e7f7      	b.n	27884 <subscribe_encode+0x5e>

00027894 <unsubscribe_encode>:
{
   27894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27898:	680f      	ldr	r7, [r1, #0]
{
   2789a:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2789c:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   2789e:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   278a0:	600f      	str	r7, [r1, #0]
{
   278a2:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   278a4:	f7ff ff05 	bl	276b2 <pack_uint16>
	if (err_code != 0) {
   278a8:	4604      	mov	r4, r0
   278aa:	b9a8      	cbnz	r0, 278d8 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   278ac:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   278b0:	88b3      	ldrh	r3, [r6, #4]
   278b2:	42a3      	cmp	r3, r4
   278b4:	dc06      	bgt.n	278c4 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   278b6:	462a      	mov	r2, r5
   278b8:	4639      	mov	r1, r7
}
   278ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   278be:	20a2      	movs	r0, #162	; 0xa2
   278c0:	f7ff bf24 	b.w	2770c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   278c4:	6830      	ldr	r0, [r6, #0]
   278c6:	4629      	mov	r1, r5
   278c8:	fb08 0004 	mla	r0, r8, r4, r0
   278cc:	f7ff ff03 	bl	276d6 <pack_utf8_str>
		if (err_code != 0) {
   278d0:	b908      	cbnz	r0, 278d6 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   278d2:	3401      	adds	r4, #1
   278d4:	e7ec      	b.n	278b0 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   278d6:	4604      	mov	r4, r0
}
   278d8:	4620      	mov	r0, r4
   278da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000278de <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   278de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278e0:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   278e2:	e9d1 3100 	ldrd	r3, r1, [r1]
   278e6:	1acb      	subs	r3, r1, r3
   278e8:	4293      	cmp	r3, r2
{
   278ea:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   278ec:	d301      	bcc.n	278f2 <mqtt_read_message_chunk+0x14>
		return 0;
   278ee:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   278f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   278f2:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   278f4:	190f      	adds	r7, r1, r4
   278f6:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
   278fa:	4413      	add	r3, r2
   278fc:	429f      	cmp	r7, r3
   278fe:	d813      	bhi.n	27928 <mqtt_read_message_chunk+0x4a>
   27900:	4297      	cmp	r7, r2
   27902:	d311      	bcc.n	27928 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   27904:	2300      	movs	r3, #0
   27906:	4622      	mov	r2, r4
   27908:	f7ef f886 	bl	16a18 <mqtt_transport_read>
	if (len < 0) {
   2790c:	2800      	cmp	r0, #0
   2790e:	dbef      	blt.n	278f0 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   27910:	d00d      	beq.n	2792e <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   27912:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   27914:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   27916:	4403      	add	r3, r0
   27918:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2791a:	686b      	ldr	r3, [r5, #4]
   2791c:	4403      	add	r3, r0
   2791e:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   27920:	d2e5      	bcs.n	278ee <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   27922:	f06f 000a 	mvn.w	r0, #10
   27926:	e7e3      	b.n	278f0 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   27928:	f06f 000b 	mvn.w	r0, #11
   2792c:	e7e0      	b.n	278f0 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2792e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27932:	e7dd      	b.n	278f0 <mqtt_read_message_chunk+0x12>

00027934 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   27934:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   27936:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   27938:	69c2      	ldr	r2, [r0, #28]
{
   2793a:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2793c:	9302      	str	r3, [sp, #8]
{
   2793e:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   27940:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   27942:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   27944:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   27946:	4628      	mov	r0, r5
   27948:	a902      	add	r1, sp, #8
   2794a:	f7ff ffc8 	bl	278de <mqtt_read_message_chunk>
		if (err_code < 0) {
   2794e:	1e04      	subs	r4, r0, #0
   27950:	db2d      	blt.n	279ae <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   27952:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   27954:	aa01      	add	r2, sp, #4
   27956:	f10d 0103 	add.w	r1, sp, #3
   2795a:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2795c:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2795e:	f7ff fe08 	bl	27572 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   27962:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   27966:	4604      	mov	r4, r0
		chunk_size = 1U;
   27968:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2796c:	d0eb      	beq.n	27946 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2796e:	2800      	cmp	r0, #0
   27970:	db21      	blt.n	279b6 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   27972:	f89d 6003 	ldrb.w	r6, [sp, #3]
   27976:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2797a:	2b30      	cmp	r3, #48	; 0x30
   2797c:	d11e      	bne.n	279bc <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2797e:	2202      	movs	r2, #2
   27980:	4628      	mov	r0, r5
   27982:	a902      	add	r1, sp, #8
   27984:	f7ff ffab 	bl	278de <mqtt_read_message_chunk>
	if (err_code < 0) {
   27988:	1e04      	subs	r4, r0, #0
   2798a:	db10      	blt.n	279ae <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2798c:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2798e:	f016 0f06 	tst.w	r6, #6
   27992:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   27994:	4628      	mov	r0, r5
   27996:	ba52      	rev16	r2, r2
   27998:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2799a:	bf0c      	ite	eq
   2799c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2799e:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   279a0:	a902      	add	r1, sp, #8
   279a2:	f7ff ff9c 	bl	278de <mqtt_read_message_chunk>
	if (err_code < 0) {
   279a6:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   279aa:	2c00      	cmp	r4, #0
   279ac:	da0d      	bge.n	279ca <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   279ae:	f114 0f0b 	cmn.w	r4, #11
   279b2:	d100      	bne.n	279b6 <mqtt_handle_rx+0x82>
   279b4:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   279b6:	4620      	mov	r0, r4
   279b8:	b00c      	add	sp, #48	; 0x30
   279ba:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   279bc:	4628      	mov	r0, r5
   279be:	9a01      	ldr	r2, [sp, #4]
   279c0:	a902      	add	r1, sp, #8
   279c2:	f7ff ff8c 	bl	278de <mqtt_read_message_chunk>
   279c6:	4604      	mov	r4, r0
   279c8:	e7ef      	b.n	279aa <mqtt_handle_rx+0x76>
	evt.result = 0;
   279ca:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   279cc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   279d0:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   279d2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   279d6:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   279d8:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   279da:	d066      	beq.n	27aaa <mqtt_handle_rx+0x176>
   279dc:	d813      	bhi.n	27a06 <mqtt_handle_rx+0xd2>
   279de:	2b40      	cmp	r3, #64	; 0x40
   279e0:	d059      	beq.n	27a96 <mqtt_handle_rx+0x162>
   279e2:	d806      	bhi.n	279f2 <mqtt_handle_rx+0xbe>
   279e4:	2b20      	cmp	r3, #32
   279e6:	d02f      	beq.n	27a48 <mqtt_handle_rx+0x114>
   279e8:	2b30      	cmp	r3, #48	; 0x30
   279ea:	d048      	beq.n	27a7e <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   279ec:	2400      	movs	r4, #0
   279ee:	61ec      	str	r4, [r5, #28]
	return 0;
   279f0:	e7e1      	b.n	279b6 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   279f2:	2b50      	cmp	r3, #80	; 0x50
   279f4:	d1fa      	bne.n	279ec <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   279f6:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   279f8:	a905      	add	r1, sp, #20
   279fa:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   279fc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   27a00:	f7ff fe3f 	bl	27682 <publish_receive_decode>
   27a04:	e04e      	b.n	27aa4 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   27a06:	2bb0      	cmp	r3, #176	; 0xb0
   27a08:	d05f      	beq.n	27aca <mqtt_handle_rx+0x196>
   27a0a:	d80b      	bhi.n	27a24 <mqtt_handle_rx+0xf0>
   27a0c:	2b70      	cmp	r3, #112	; 0x70
   27a0e:	d054      	beq.n	27aba <mqtt_handle_rx+0x186>
   27a10:	2b90      	cmp	r3, #144	; 0x90
   27a12:	d1eb      	bne.n	279ec <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   27a14:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   27a16:	a905      	add	r1, sp, #20
   27a18:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   27a1a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   27a1e:	f7ff fe36 	bl	2768e <subscribe_ack_decode>
   27a22:	e03f      	b.n	27aa4 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   27a24:	2bd0      	cmp	r3, #208	; 0xd0
   27a26:	d1e1      	bne.n	279ec <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   27a28:	f995 307f 	ldrsb.w	r3, [r5, #127]	; 0x7f
	int err_code = 0;
   27a2c:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   27a2e:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   27a30:	bfc8      	it	gt
   27a32:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   27a36:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   27a3a:	bfc8      	it	gt
   27a3c:	b252      	sxtbgt	r2, r2
   27a3e:	f885 207f 	strb.w	r2, [r5, #127]	; 0x7f
		evt.type = MQTT_EVT_PINGRESP;
   27a42:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   27a46:	e010      	b.n	27a6a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   27a48:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   27a4c:	4628      	mov	r0, r5
   27a4e:	aa05      	add	r2, sp, #20
   27a50:	a902      	add	r1, sp, #8
   27a52:	f7ff fdb9 	bl	275c8 <connect_ack_decode>
		if (err_code == 0) {
   27a56:	4604      	mov	r4, r0
   27a58:	bb28      	cbnz	r0, 27aa6 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   27a5a:	f89d 2015 	ldrb.w	r2, [sp, #21]
   27a5e:	b95a      	cbnz	r2, 27a78 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   27a60:	69ab      	ldr	r3, [r5, #24]
   27a62:	f043 0304 	orr.w	r3, r3, #4
   27a66:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   27a68:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   27a6a:	4628      	mov	r0, r5
   27a6c:	a904      	add	r1, sp, #16
   27a6e:	f000 f8f3 	bl	27c58 <event_notify>
	if (err_code < 0) {
   27a72:	2c00      	cmp	r4, #0
   27a74:	daba      	bge.n	279ec <mqtt_handle_rx+0xb8>
   27a76:	e79e      	b.n	279b6 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   27a78:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   27a7c:	e7f4      	b.n	27a68 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   27a7e:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   27a80:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   27a82:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   27a86:	ab05      	add	r3, sp, #20
   27a88:	f7ff fdb9 	bl	275fe <publish_decode>
		client->internal.remaining_payload =
   27a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   27a8e:	4604      	mov	r4, r0
		evt.result = err_code;
   27a90:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   27a92:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   27a94:	e7e9      	b.n	27a6a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   27a96:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   27a98:	a905      	add	r1, sp, #20
   27a9a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   27a9c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   27aa0:	f7ff fded 	bl	2767e <publish_ack_decode>
   27aa4:	4604      	mov	r4, r0
		evt.result = err_code;
   27aa6:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   27aa8:	e7df      	b.n	27a6a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   27aaa:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   27aac:	a905      	add	r1, sp, #20
   27aae:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   27ab0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   27ab4:	f7ff fde7 	bl	27686 <publish_release_decode>
   27ab8:	e7f4      	b.n	27aa4 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   27aba:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   27abc:	a905      	add	r1, sp, #20
   27abe:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   27ac0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   27ac4:	f7ff fde1 	bl	2768a <publish_complete_decode>
   27ac8:	e7ec      	b.n	27aa4 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   27aca:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   27acc:	a905      	add	r1, sp, #20
   27ace:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   27ad2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   27ad6:	f7ff fdea 	bl	276ae <unsubscribe_ack_decode>
   27ada:	e7e3      	b.n	27aa4 <mqtt_handle_rx+0x170>

00027adc <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   27adc:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   27ade:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
   27ae0:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   27ae2:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   27ae4:	2206      	movs	r2, #6
   27ae6:	2101      	movs	r1, #1
   27ae8:	f7ed f842 	bl	14b70 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   27aec:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   27aee:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   27af0:	da04      	bge.n	27afc <mqtt_client_tcp_connect+0x20>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   27af2:	f7ff fbeb 	bl	272cc <__errno>
   27af6:	6800      	ldr	r0, [r0, #0]
   27af8:	4240      	negs	r0, r0
}
   27afa:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   27afc:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   27afe:	6d61      	ldr	r1, [r4, #84]	; 0x54
	if (broker->sa_family == AF_INET) {
   27b00:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   27b02:	bf14      	ite	ne
   27b04:	2218      	movne	r2, #24
   27b06:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   27b08:	f7ff f8fa 	bl	26d00 <z_impl_zsock_connect>
	if (ret < 0) {
   27b0c:	2800      	cmp	r0, #0
   27b0e:	da03      	bge.n	27b18 <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   27b10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   27b12:	f7ff f8d1 	bl	26cb8 <z_impl_zsock_close>
   27b16:	e7ec      	b.n	27af2 <mqtt_client_tcp_connect+0x16>
	return 0;
   27b18:	2000      	movs	r0, #0
   27b1a:	e7ee      	b.n	27afa <mqtt_client_tcp_connect+0x1e>

00027b1c <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   27b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   27b20:	2400      	movs	r4, #0
{
   27b22:	4606      	mov	r6, r0
   27b24:	460f      	mov	r7, r1
   27b26:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   27b28:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   27b2a:	42ac      	cmp	r4, r5
   27b2c:	d301      	bcc.n	27b32 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   27b2e:	2000      	movs	r0, #0
   27b30:	e00d      	b.n	27b4e <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   27b32:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   27b34:	2300      	movs	r3, #0
   27b36:	e9cd 8800 	strd	r8, r8, [sp]
   27b3a:	1b2a      	subs	r2, r5, r4
   27b3c:	1939      	adds	r1, r7, r4
   27b3e:	f7ff f906 	bl	26d4e <z_impl_zsock_sendto>
		if (ret < 0) {
   27b42:	1e03      	subs	r3, r0, #0
   27b44:	da06      	bge.n	27b54 <mqtt_client_tcp_write+0x38>
			return -errno;
   27b46:	f7ff fbc1 	bl	272cc <__errno>
   27b4a:	6800      	ldr	r0, [r0, #0]
   27b4c:	4240      	negs	r0, r0
}
   27b4e:	b002      	add	sp, #8
   27b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   27b54:	441c      	add	r4, r3
   27b56:	e7e8      	b.n	27b2a <mqtt_client_tcp_write+0xe>

00027b58 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   27b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   27b5c:	2500      	movs	r5, #0
{
   27b5e:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   27b60:	462b      	mov	r3, r5
{
   27b62:	460c      	mov	r4, r1
   27b64:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   27b66:	428b      	cmp	r3, r1
   27b68:	d110      	bne.n	27b8c <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   27b6a:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   27b6c:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   27b6e:	42ae      	cmp	r6, r5
   27b70:	d216      	bcs.n	27ba0 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   27b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   27b74:	2200      	movs	r2, #0
   27b76:	4621      	mov	r1, r4
   27b78:	f7ff f919 	bl	26dae <z_impl_zsock_sendmsg>
		if (ret < 0) {
   27b7c:	1e03      	subs	r3, r0, #0
   27b7e:	da0c      	bge.n	27b9a <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   27b80:	f7ff fba4 	bl	272cc <__errno>
   27b84:	6800      	ldr	r0, [r0, #0]
   27b86:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   27b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   27b8c:	68a2      	ldr	r2, [r4, #8]
   27b8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   27b92:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   27b94:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   27b96:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   27b98:	e7e5      	b.n	27b66 <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   27b9a:	441e      	add	r6, r3
		if (offset >= total_len) {
   27b9c:	42b5      	cmp	r5, r6
   27b9e:	d801      	bhi.n	27ba4 <mqtt_client_tcp_write_msg+0x4c>
	return 0;
   27ba0:	2000      	movs	r0, #0
   27ba2:	e7f1      	b.n	27b88 <mqtt_client_tcp_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   27ba4:	2000      	movs	r0, #0
   27ba6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   27baa:	4560      	cmp	r0, ip
   27bac:	d0df      	beq.n	27b6e <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   27bae:	68a2      	ldr	r2, [r4, #8]
   27bb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   27bb4:	6851      	ldr	r1, [r2, #4]
   27bb6:	4299      	cmp	r1, r3
   27bb8:	d905      	bls.n	27bc6 <mqtt_client_tcp_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   27bba:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   27bbc:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   27bbe:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   27bc0:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   27bc2:	6010      	str	r0, [r2, #0]
				break;
   27bc4:	e7d3      	b.n	27b6e <mqtt_client_tcp_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   27bc6:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   27bc8:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   27bcc:	3001      	adds	r0, #1
   27bce:	e7ec      	b.n	27baa <mqtt_client_tcp_write_msg+0x52>

00027bd0 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   27bd0:	b513      	push	{r0, r1, r4, lr}
   27bd2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   27bd4:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   27bd6:	bf14      	ite	ne
   27bd8:	4623      	movne	r3, r4
   27bda:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   27bdc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   27bde:	e9cd 4400 	strd	r4, r4, [sp]
   27be2:	f7ff f90b 	bl	26dfc <z_impl_zsock_recvfrom>
	if (ret < 0) {
   27be6:	2800      	cmp	r0, #0
   27be8:	da03      	bge.n	27bf2 <mqtt_client_tcp_read+0x22>
		return -errno;
   27bea:	f7ff fb6f 	bl	272cc <__errno>
   27bee:	6800      	ldr	r0, [r0, #0]
   27bf0:	4240      	negs	r0, r0
	}

	return ret;
}
   27bf2:	b002      	add	sp, #8
   27bf4:	bd10      	pop	{r4, pc}

00027bf6 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   27bf6:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   27bf8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   27bfa:	f7ff f85d 	bl	26cb8 <z_impl_zsock_close>
	if (ret < 0) {
   27bfe:	2800      	cmp	r0, #0
   27c00:	da04      	bge.n	27c0c <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   27c02:	f7ff fb63 	bl	272cc <__errno>
   27c06:	6800      	ldr	r0, [r0, #0]
   27c08:	4240      	negs	r0, r0
	}

	return 0;
}
   27c0a:	bd08      	pop	{r3, pc}
	return 0;
   27c0c:	2000      	movs	r0, #0
   27c0e:	e7fc      	b.n	27c0a <mqtt_client_tcp_disconnect+0x14>

00027c10 <k_mutex_unlock>:
   27c10:	f7fb bb7c 	b.w	2330c <z_impl_k_mutex_unlock>

00027c14 <k_uptime_get>:
{
   27c14:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   27c16:	f002 ff4d 	bl	2aab4 <z_impl_k_uptime_ticks>
   27c1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   27c1e:	fba0 2304 	umull	r2, r3, r0, r4
   27c22:	fb04 3301 	mla	r3, r4, r1, r3
   27c26:	0bd0      	lsrs	r0, r2, #15
}
   27c28:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   27c2c:	0bd9      	lsrs	r1, r3, #15
   27c2e:	bd10      	pop	{r4, pc}

00027c30 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   27c30:	b538      	push	{r3, r4, r5, lr}
   27c32:	4604      	mov	r4, r0
   27c34:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   27c36:	6f82      	ldr	r2, [r0, #120]	; 0x78
   27c38:	2100      	movs	r1, #0
   27c3a:	6f40      	ldr	r0, [r0, #116]	; 0x74
   27c3c:	f003 f924 	bl	2ae88 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   27c40:	6f63      	ldr	r3, [r4, #116]	; 0x74
	buf->end = client->tx_buf + client->tx_buf_size;
   27c42:	6fa2      	ldr	r2, [r4, #120]	; 0x78
	buf->cur = client->tx_buf;
   27c44:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   27c46:	4413      	add	r3, r2
   27c48:	606b      	str	r3, [r5, #4]
}
   27c4a:	bd38      	pop	{r3, r4, r5, pc}

00027c4c <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   27c4c:	f04f 32ff 	mov.w	r2, #4294967295
   27c50:	f04f 33ff 	mov.w	r3, #4294967295
   27c54:	f7fb badc 	b.w	23210 <z_impl_k_mutex_lock>

00027c58 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   27c58:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   27c5a:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
   27c5c:	4604      	mov	r4, r0
   27c5e:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   27c60:	b15b      	cbz	r3, 27c7a <event_notify+0x22>
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	return k_mutex_unlock(&mutex->kernel_mutex);
   27c62:	f7ff ffd5 	bl	27c10 <k_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   27c66:	4620      	mov	r0, r4
   27c68:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   27c6a:	9901      	ldr	r1, [sp, #4]
   27c6c:	4798      	blx	r3

		mqtt_mutex_lock(client);
   27c6e:	4620      	mov	r0, r4
	}
}
   27c70:	b002      	add	sp, #8
   27c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   27c76:	f7ff bfe9 	b.w	27c4c <mqtt_mutex_lock>
}
   27c7a:	b002      	add	sp, #8
   27c7c:	bd10      	pop	{r4, pc}

00027c7e <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   27c7e:	b530      	push	{r4, r5, lr}
   27c80:	b089      	sub	sp, #36	; 0x24
   27c82:	4604      	mov	r4, r0
   27c84:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   27c86:	f7ee fed5 	bl	16a34 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   27c8a:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   27c8c:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   27c8e:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   27c92:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   27c96:	4668      	mov	r0, sp
   27c98:	f003 f8f6 	bl	2ae88 <memset>
   27c9c:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   27c9e:	4669      	mov	r1, sp
   27ca0:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   27ca2:	f88d 3000 	strb.w	r3, [sp]
   27ca6:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   27ca8:	f7ff ffd6 	bl	27c58 <event_notify>
	}
}
   27cac:	b009      	add	sp, #36	; 0x24
   27cae:	bd30      	pop	{r4, r5, pc}

00027cb0 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   27cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27cb2:	4617      	mov	r7, r2
   27cb4:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   27cb6:	4605      	mov	r5, r0
{
   27cb8:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   27cba:	b320      	cbz	r0, 27d06 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   27cbc:	f7ff ffc6 	bl	27c4c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   27cc0:	6a2c      	ldr	r4, [r5, #32]
   27cc2:	b1b4      	cbz	r4, 27cf2 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   27cc4:	42bc      	cmp	r4, r7
   27cc6:	4622      	mov	r2, r4
   27cc8:	4633      	mov	r3, r6
   27cca:	bf28      	it	cs
   27ccc:	463a      	movcs	r2, r7
   27cce:	4628      	mov	r0, r5
   27cd0:	9901      	ldr	r1, [sp, #4]
   27cd2:	f7ee fea1 	bl	16a18 <mqtt_transport_read>
   27cd6:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   27cd8:	b916      	cbnz	r6, 27ce0 <read_publish_payload+0x30>
   27cda:	f110 0f0b 	cmn.w	r0, #11
   27cde:	d008      	beq.n	27cf2 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   27ce0:	2c00      	cmp	r4, #0
   27ce2:	dc0c      	bgt.n	27cfe <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   27ce4:	bf08      	it	eq
   27ce6:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   27cea:	4628      	mov	r0, r5
   27cec:	4621      	mov	r1, r4
   27cee:	f7ff ffc6 	bl	27c7e <client_disconnect.constprop.0>
   27cf2:	4628      	mov	r0, r5
   27cf4:	f7ff ff8c 	bl	27c10 <k_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   27cf8:	4620      	mov	r0, r4
   27cfa:	b003      	add	sp, #12
   27cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   27cfe:	6a2b      	ldr	r3, [r5, #32]
   27d00:	1b1b      	subs	r3, r3, r4
   27d02:	622b      	str	r3, [r5, #32]
   27d04:	e7f5      	b.n	27cf2 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   27d06:	f06f 0415 	mvn.w	r4, #21
   27d0a:	e7f5      	b.n	27cf8 <read_publish_payload+0x48>

00027d0c <client_write>:
{
   27d0c:	b538      	push	{r3, r4, r5, lr}
   27d0e:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   27d10:	f7ee fe68 	bl	169e4 <mqtt_transport_write>
	if (err_code < 0) {
   27d14:	1e04      	subs	r4, r0, #0
   27d16:	da05      	bge.n	27d24 <client_write+0x18>
		client_disconnect(client, err_code, true);
   27d18:	4621      	mov	r1, r4
   27d1a:	4628      	mov	r0, r5
   27d1c:	f7ff ffaf 	bl	27c7e <client_disconnect.constprop.0>
}
   27d20:	4620      	mov	r0, r4
   27d22:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   27d24:	f7ff ff76 	bl	27c14 <k_uptime_get>
	return 0;
   27d28:	2400      	movs	r4, #0
   27d2a:	6168      	str	r0, [r5, #20]
   27d2c:	e7f8      	b.n	27d20 <client_write+0x14>

00027d2e <mqtt_client_init>:
{
   27d2e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   27d30:	4604      	mov	r4, r0
   27d32:	b1a8      	cbz	r0, 27d60 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   27d34:	2500      	movs	r5, #0
   27d36:	2284      	movs	r2, #132	; 0x84
   27d38:	2100      	movs	r1, #0
   27d3a:	f003 f8a5 	bl	2ae88 <memset>
   27d3e:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   27d40:	4620      	mov	r0, r4
   27d42:	f002 fc49 	bl	2a5d8 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   27d46:	2304      	movs	r3, #4
   27d48:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	client->clean_session = MQTT_CLEAN_SESSION;
   27d4c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   27d50:	f365 0341 	bfi	r3, r5, #1, #1
   27d54:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	client->keepalive = MQTT_KEEPALIVE;
   27d58:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   27d5c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
}
   27d60:	bd38      	pop	{r3, r4, r5, pc}

00027d62 <mqtt_connect>:
{
   27d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   27d64:	4605      	mov	r5, r0
   27d66:	2800      	cmp	r0, #0
   27d68:	d03b      	beq.n	27de2 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   27d6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   27d6c:	2b00      	cmp	r3, #0
   27d6e:	d038      	beq.n	27de2 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   27d70:	f7ff ff6c 	bl	27c4c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   27d74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   27d76:	b38b      	cbz	r3, 27ddc <mqtt_connect+0x7a>
   27d78:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   27d7a:	b37b      	cbz	r3, 27ddc <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   27d7c:	4628      	mov	r0, r5
   27d7e:	f7ee fe27 	bl	169d0 <mqtt_transport_connect>
	if (err_code < 0) {
   27d82:	1e04      	subs	r4, r0, #0
   27d84:	db24      	blt.n	27dd0 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   27d86:	4669      	mov	r1, sp
   27d88:	4628      	mov	r0, r5
   27d8a:	f7ff ff51 	bl	27c30 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   27d8e:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   27d90:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   27d92:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   27d96:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   27d98:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   27d9a:	f7ee fd75 	bl	16888 <connect_request_encode>
	if (err_code < 0) {
   27d9e:	1e04      	subs	r4, r0, #0
   27da0:	db13      	blt.n	27dca <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   27da2:	e9dd 1200 	ldrd	r1, r2, [sp]
   27da6:	4628      	mov	r0, r5
   27da8:	1a52      	subs	r2, r2, r1
   27daa:	f7ee fe1b 	bl	169e4 <mqtt_transport_write>
	if (err_code < 0) {
   27dae:	1e04      	subs	r4, r0, #0
   27db0:	db0b      	blt.n	27dca <mqtt_connect+0x68>
   27db2:	f7ff ff2f 	bl	27c14 <k_uptime_get>
	client->unacked_ping = 0;
   27db6:	2400      	movs	r4, #0
   27db8:	6168      	str	r0, [r5, #20]
   27dba:	f885 407f 	strb.w	r4, [r5, #127]	; 0x7f
   27dbe:	4628      	mov	r0, r5
   27dc0:	f7ff ff26 	bl	27c10 <k_mutex_unlock>
}
   27dc4:	4620      	mov	r0, r4
   27dc6:	b003      	add	sp, #12
   27dc8:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   27dca:	4628      	mov	r0, r5
   27dcc:	f7ee fe32 	bl	16a34 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   27dd0:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   27dd2:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   27dd6:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   27dda:	e7f0      	b.n	27dbe <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   27ddc:	f06f 040b 	mvn.w	r4, #11
   27de0:	e7f6      	b.n	27dd0 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   27de2:	f06f 0415 	mvn.w	r4, #21
   27de6:	e7ed      	b.n	27dc4 <mqtt_connect+0x62>

00027de8 <mqtt_publish>:
{
   27de8:	b570      	push	{r4, r5, r6, lr}
   27dea:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   27dec:	4605      	mov	r5, r0
{
   27dee:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   27df0:	2800      	cmp	r0, #0
   27df2:	d03b      	beq.n	27e6c <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   27df4:	2900      	cmp	r1, #0
   27df6:	d039      	beq.n	27e6c <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   27df8:	f7ff ff28 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27dfc:	4628      	mov	r0, r5
   27dfe:	a901      	add	r1, sp, #4
   27e00:	f7ff ff16 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27e04:	69ab      	ldr	r3, [r5, #24]
   27e06:	075b      	lsls	r3, r3, #29
   27e08:	d52d      	bpl.n	27e66 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   27e0a:	4630      	mov	r0, r6
   27e0c:	a901      	add	r1, sp, #4
   27e0e:	f7ff fcc4 	bl	2779a <publish_encode>
	if (err_code < 0) {
   27e12:	1e04      	subs	r4, r0, #0
   27e14:	db1c      	blt.n	27e50 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   27e16:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   27e18:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   27e1a:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   27e1c:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   27e1e:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   27e20:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   27e22:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   27e24:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   27e26:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   27e28:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   27e2a:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   27e2e:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   27e30:	f003 f82a 	bl	2ae88 <memset>
	msg.msg_iov = io_vector;
   27e34:	ab03      	add	r3, sp, #12
   27e36:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   27e38:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   27e3a:	4628      	mov	r0, r5
   27e3c:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   27e3e:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   27e40:	f7ee fddc 	bl	169fc <mqtt_transport_write_msg>
	if (err_code < 0) {
   27e44:	1e04      	subs	r4, r0, #0
   27e46:	da09      	bge.n	27e5c <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   27e48:	4621      	mov	r1, r4
   27e4a:	4628      	mov	r0, r5
   27e4c:	f7ff ff17 	bl	27c7e <client_disconnect.constprop.0>
   27e50:	4628      	mov	r0, r5
   27e52:	f7ff fedd 	bl	27c10 <k_mutex_unlock>
}
   27e56:	4620      	mov	r0, r4
   27e58:	b00e      	add	sp, #56	; 0x38
   27e5a:	bd70      	pop	{r4, r5, r6, pc}
   27e5c:	f7ff feda 	bl	27c14 <k_uptime_get>
	return 0;
   27e60:	2400      	movs	r4, #0
   27e62:	6168      	str	r0, [r5, #20]
   27e64:	e7f4      	b.n	27e50 <mqtt_publish+0x68>
		return -ENOTCONN;
   27e66:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27e6a:	e7f1      	b.n	27e50 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   27e6c:	f06f 0415 	mvn.w	r4, #21
   27e70:	e7f1      	b.n	27e56 <mqtt_publish+0x6e>

00027e72 <mqtt_publish_qos1_ack>:
{
   27e72:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27e74:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   27e76:	4605      	mov	r5, r0
   27e78:	b1f8      	cbz	r0, 27eba <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   27e7a:	b1f1      	cbz	r1, 27eba <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   27e7c:	f7ff fee6 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27e80:	4669      	mov	r1, sp
   27e82:	4628      	mov	r0, r5
   27e84:	f7ff fed4 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27e88:	69ab      	ldr	r3, [r5, #24]
   27e8a:	075b      	lsls	r3, r3, #29
   27e8c:	d512      	bpl.n	27eb4 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   27e8e:	4620      	mov	r0, r4
   27e90:	4669      	mov	r1, sp
   27e92:	f7ff fcc3 	bl	2781c <publish_ack_encode>
	if (err_code < 0) {
   27e96:	1e04      	subs	r4, r0, #0
   27e98:	db06      	blt.n	27ea8 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27e9a:	e9dd 1200 	ldrd	r1, r2, [sp]
   27e9e:	4628      	mov	r0, r5
   27ea0:	1a52      	subs	r2, r2, r1
   27ea2:	f7ff ff33 	bl	27d0c <client_write>
   27ea6:	4604      	mov	r4, r0
   27ea8:	4628      	mov	r0, r5
   27eaa:	f7ff feb1 	bl	27c10 <k_mutex_unlock>
}
   27eae:	4620      	mov	r0, r4
   27eb0:	b003      	add	sp, #12
   27eb2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   27eb4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27eb8:	e7f6      	b.n	27ea8 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   27eba:	f06f 0415 	mvn.w	r4, #21
   27ebe:	e7f6      	b.n	27eae <mqtt_publish_qos1_ack+0x3c>

00027ec0 <mqtt_disconnect>:
{
   27ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   27ec2:	4605      	mov	r5, r0
   27ec4:	b310      	cbz	r0, 27f0c <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   27ec6:	f7ff fec1 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27eca:	4669      	mov	r1, sp
   27ecc:	4628      	mov	r0, r5
   27ece:	f7ff feaf 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27ed2:	69ab      	ldr	r3, [r5, #24]
   27ed4:	075b      	lsls	r3, r3, #29
   27ed6:	d516      	bpl.n	27f06 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   27ed8:	4668      	mov	r0, sp
   27eda:	f7ee fd55 	bl	16988 <disconnect_encode>
	if (err_code < 0) {
   27ede:	1e04      	subs	r4, r0, #0
   27ee0:	db0b      	blt.n	27efa <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27ee2:	e9dd 1200 	ldrd	r1, r2, [sp]
   27ee6:	4628      	mov	r0, r5
   27ee8:	1a52      	subs	r2, r2, r1
   27eea:	f7ff ff0f 	bl	27d0c <client_write>
	if (err_code < 0) {
   27eee:	1e04      	subs	r4, r0, #0
   27ef0:	db03      	blt.n	27efa <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   27ef2:	2100      	movs	r1, #0
   27ef4:	4628      	mov	r0, r5
   27ef6:	f7ff fec2 	bl	27c7e <client_disconnect.constprop.0>
   27efa:	4628      	mov	r0, r5
   27efc:	f7ff fe88 	bl	27c10 <k_mutex_unlock>
}
   27f00:	4620      	mov	r0, r4
   27f02:	b003      	add	sp, #12
   27f04:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   27f06:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27f0a:	e7f6      	b.n	27efa <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   27f0c:	f06f 0415 	mvn.w	r4, #21
   27f10:	e7f6      	b.n	27f00 <mqtt_disconnect+0x40>

00027f12 <mqtt_subscribe>:
{
   27f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27f14:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   27f16:	4605      	mov	r5, r0
   27f18:	b1f8      	cbz	r0, 27f5a <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   27f1a:	b1f1      	cbz	r1, 27f5a <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   27f1c:	f7ff fe96 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27f20:	4669      	mov	r1, sp
   27f22:	4628      	mov	r0, r5
   27f24:	f7ff fe84 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27f28:	69ab      	ldr	r3, [r5, #24]
   27f2a:	075b      	lsls	r3, r3, #29
   27f2c:	d512      	bpl.n	27f54 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   27f2e:	4620      	mov	r0, r4
   27f30:	4669      	mov	r1, sp
   27f32:	f7ff fc78 	bl	27826 <subscribe_encode>
	if (err_code < 0) {
   27f36:	1e04      	subs	r4, r0, #0
   27f38:	db06      	blt.n	27f48 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27f3a:	e9dd 1200 	ldrd	r1, r2, [sp]
   27f3e:	4628      	mov	r0, r5
   27f40:	1a52      	subs	r2, r2, r1
   27f42:	f7ff fee3 	bl	27d0c <client_write>
   27f46:	4604      	mov	r4, r0
   27f48:	4628      	mov	r0, r5
   27f4a:	f7ff fe61 	bl	27c10 <k_mutex_unlock>
}
   27f4e:	4620      	mov	r0, r4
   27f50:	b003      	add	sp, #12
   27f52:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   27f54:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27f58:	e7f6      	b.n	27f48 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   27f5a:	f06f 0415 	mvn.w	r4, #21
   27f5e:	e7f6      	b.n	27f4e <mqtt_subscribe+0x3c>

00027f60 <mqtt_unsubscribe>:
{
   27f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27f62:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   27f64:	4605      	mov	r5, r0
   27f66:	b1f8      	cbz	r0, 27fa8 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   27f68:	b1f1      	cbz	r1, 27fa8 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   27f6a:	f7ff fe6f 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27f6e:	4669      	mov	r1, sp
   27f70:	4628      	mov	r0, r5
   27f72:	f7ff fe5d 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27f76:	69ab      	ldr	r3, [r5, #24]
   27f78:	075b      	lsls	r3, r3, #29
   27f7a:	d512      	bpl.n	27fa2 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   27f7c:	4620      	mov	r0, r4
   27f7e:	4669      	mov	r1, sp
   27f80:	f7ff fc88 	bl	27894 <unsubscribe_encode>
	if (err_code < 0) {
   27f84:	1e04      	subs	r4, r0, #0
   27f86:	db06      	blt.n	27f96 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27f88:	e9dd 1200 	ldrd	r1, r2, [sp]
   27f8c:	4628      	mov	r0, r5
   27f8e:	1a52      	subs	r2, r2, r1
   27f90:	f7ff febc 	bl	27d0c <client_write>
   27f94:	4604      	mov	r4, r0
   27f96:	4628      	mov	r0, r5
   27f98:	f7ff fe3a 	bl	27c10 <k_mutex_unlock>
}
   27f9c:	4620      	mov	r0, r4
   27f9e:	b003      	add	sp, #12
   27fa0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   27fa2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27fa6:	e7f6      	b.n	27f96 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   27fa8:	f06f 0415 	mvn.w	r4, #21
   27fac:	e7f6      	b.n	27f9c <mqtt_unsubscribe+0x3c>

00027fae <mqtt_ping>:
{
   27fae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   27fb0:	4605      	mov	r5, r0
   27fb2:	b320      	cbz	r0, 27ffe <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   27fb4:	f7ff fe4a 	bl	27c4c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   27fb8:	4669      	mov	r1, sp
   27fba:	4628      	mov	r0, r5
   27fbc:	f7ff fe38 	bl	27c30 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   27fc0:	69ab      	ldr	r3, [r5, #24]
   27fc2:	075b      	lsls	r3, r3, #29
   27fc4:	d518      	bpl.n	27ff8 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   27fc6:	4668      	mov	r0, sp
   27fc8:	f7ee fcf0 	bl	169ac <ping_request_encode>
	if (err_code < 0) {
   27fcc:	1e04      	subs	r4, r0, #0
   27fce:	db0d      	blt.n	27fec <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27fd0:	e9dd 1200 	ldrd	r1, r2, [sp]
   27fd4:	4628      	mov	r0, r5
   27fd6:	1a52      	subs	r2, r2, r1
   27fd8:	f7ff fe98 	bl	27d0c <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   27fdc:	f995 307f 	ldrsb.w	r3, [r5, #127]	; 0x7f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   27fe0:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   27fe2:	2b7f      	cmp	r3, #127	; 0x7f
   27fe4:	d002      	beq.n	27fec <mqtt_ping+0x3e>
		client->unacked_ping++;
   27fe6:	3301      	adds	r3, #1
   27fe8:	f885 307f 	strb.w	r3, [r5, #127]	; 0x7f
   27fec:	4628      	mov	r0, r5
   27fee:	f7ff fe0f 	bl	27c10 <k_mutex_unlock>
}
   27ff2:	4620      	mov	r0, r4
   27ff4:	b003      	add	sp, #12
   27ff6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   27ff8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   27ffc:	e7f6      	b.n	27fec <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   27ffe:	f06f 0415 	mvn.w	r4, #21
   28002:	e7f6      	b.n	27ff2 <mqtt_ping+0x44>

00028004 <mqtt_live>:
{
   28004:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   28006:	4606      	mov	r6, r0
   28008:	b300      	cbz	r0, 2804c <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   2800a:	f7ff fe1f 	bl	27c4c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2800e:	6974      	ldr	r4, [r6, #20]
   28010:	f7ff fe00 	bl	27c14 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   28014:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   28016:	f8b6 407c 	ldrh.w	r4, [r6, #124]	; 0x7c

	if (diff < 0) {
		return 0;
   2801a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2801e:	b19c      	cbz	r4, 28048 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   28020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28024:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   28026:	4284      	cmp	r4, r0
   28028:	d80d      	bhi.n	28046 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   2802a:	4630      	mov	r0, r6
   2802c:	f7ff ffbf 	bl	27fae <mqtt_ping>
		ping_sent = true;
   28030:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   28032:	4605      	mov	r5, r0
   28034:	4630      	mov	r0, r6
   28036:	f7ff fdeb 	bl	27c10 <k_mutex_unlock>
		return -EAGAIN;
   2803a:	2c00      	cmp	r4, #0
   2803c:	bf08      	it	eq
   2803e:	f06f 050a 	mvneq.w	r5, #10
}
   28042:	4628      	mov	r0, r5
   28044:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   28046:	2400      	movs	r4, #0
	int err_code = 0;
   28048:	4625      	mov	r5, r4
   2804a:	e7f3      	b.n	28034 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   2804c:	f06f 0515 	mvn.w	r5, #21
   28050:	e7f7      	b.n	28042 <mqtt_live+0x3e>

00028052 <mqtt_keepalive_time_left>:
{
   28052:	b538      	push	{r3, r4, r5, lr}
   28054:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   28056:	6945      	ldr	r5, [r0, #20]
   28058:	f7ff fddc 	bl	27c14 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2805c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28060:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
	int32_t diff = k_uptime_get_32() - last_activity;
   28064:	1b42      	subs	r2, r0, r5
   28066:	434b      	muls	r3, r1
		return 0;
   28068:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   2806c:	b119      	cbz	r1, 28076 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2806e:	4293      	cmp	r3, r2
   28070:	d904      	bls.n	2807c <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   28072:	1a98      	subs	r0, r3, r2
}
   28074:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   28076:	f04f 30ff 	mov.w	r0, #4294967295
   2807a:	e7fb      	b.n	28074 <mqtt_keepalive_time_left+0x22>
		return 0;
   2807c:	2000      	movs	r0, #0
   2807e:	e7f9      	b.n	28074 <mqtt_keepalive_time_left+0x22>

00028080 <mqtt_input>:
{
   28080:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   28082:	4605      	mov	r5, r0
   28084:	b1d0      	cbz	r0, 280bc <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   28086:	f7ff fde1 	bl	27c4c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2808a:	69ab      	ldr	r3, [r5, #24]
   2808c:	079b      	lsls	r3, r3, #30
   2808e:	d50f      	bpl.n	280b0 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   28090:	6a2b      	ldr	r3, [r5, #32]
   28092:	b983      	cbnz	r3, 280b6 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   28094:	4628      	mov	r0, r5
   28096:	f7ff fc4d 	bl	27934 <mqtt_handle_rx>
	if (err_code < 0) {
   2809a:	1e04      	subs	r4, r0, #0
   2809c:	da03      	bge.n	280a6 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2809e:	4621      	mov	r1, r4
   280a0:	4628      	mov	r0, r5
   280a2:	f7ff fdec 	bl	27c7e <client_disconnect.constprop.0>
   280a6:	4628      	mov	r0, r5
   280a8:	f7ff fdb2 	bl	27c10 <k_mutex_unlock>
}
   280ac:	4620      	mov	r0, r4
   280ae:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   280b0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   280b4:	e7f7      	b.n	280a6 <mqtt_input+0x26>
		return -EBUSY;
   280b6:	f06f 040f 	mvn.w	r4, #15
   280ba:	e7f4      	b.n	280a6 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   280bc:	f06f 0415 	mvn.w	r4, #21
   280c0:	e7f4      	b.n	280ac <mqtt_input+0x2c>

000280c2 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   280c2:	2301      	movs	r3, #1
   280c4:	f7ff bdf4 	b.w	27cb0 <read_publish_payload>

000280c8 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   280c8:	b570      	push	{r4, r5, r6, lr}
   280ca:	4606      	mov	r6, r0
   280cc:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   280ce:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   280d0:	42ac      	cmp	r4, r5
   280d2:	d301      	bcc.n	280d8 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   280d4:	2000      	movs	r0, #0
}
   280d6:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   280d8:	4621      	mov	r1, r4
   280da:	4630      	mov	r0, r6
   280dc:	1b2a      	subs	r2, r5, r4
   280de:	f7ff fff0 	bl	280c2 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   280e2:	2800      	cmp	r0, #0
   280e4:	dbf7      	blt.n	280d6 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   280e6:	d001      	beq.n	280ec <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   280e8:	4404      	add	r4, r0
   280ea:	e7f1      	b.n	280d0 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   280ec:	f06f 0004 	mvn.w	r0, #4
   280f0:	e7f1      	b.n	280d6 <mqtt_readall_publish_payload+0xe>

000280f2 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   280f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
   280f4:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
   280f6:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   280f8:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   280fa:	f44f 7281 	mov.w	r2, #258	; 0x102
   280fe:	2101      	movs	r1, #1
   28100:	f7ec fd36 	bl	14b70 <z_impl_zsock_socket>
						  SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   28104:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   28106:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   28108:	da05      	bge.n	28116 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   2810a:	f7ff f8df 	bl	272cc <__errno>
   2810e:	6800      	ldr	r0, [r0, #0]
   28110:	4240      	negs	r0, r0
}
   28112:	b004      	add	sp, #16
   28114:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   28116:	2304      	movs	r3, #4
   28118:	2205      	movs	r2, #5
   2811a:	9300      	str	r3, [sp, #0]
   2811c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28120:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   28124:	f7fe febf 	bl	26ea6 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   28128:	2800      	cmp	r0, #0
   2812a:	da03      	bge.n	28134 <mqtt_client_tls_connect+0x42>
	(void) zsock_close(client->transport.tls.sock);
   2812c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2812e:	f7fe fdc3 	bl	26cb8 <z_impl_zsock_close>
   28132:	e7ea      	b.n	2810a <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   28134:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28136:	2b00      	cmp	r3, #0
   28138:	d12f      	bne.n	2819a <mqtt_client_tls_connect+0xa8>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2813a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2813c:	2b00      	cmp	r3, #0
   2813e:	d13a      	bne.n	281b6 <mqtt_client_tls_connect+0xc4>
	if (tls_config->hostname) {
   28140:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28142:	2b00      	cmp	r3, #0
   28144:	d145      	bne.n	281d2 <mqtt_client_tls_connect+0xe0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   28146:	6c23      	ldr	r3, [r4, #64]	; 0x40
   28148:	2b01      	cmp	r3, #1
   2814a:	d10b      	bne.n	28164 <mqtt_client_tls_connect+0x72>
   2814c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2814e:	2304      	movs	r3, #4
   28150:	220a      	movs	r2, #10
   28152:	9300      	str	r3, [sp, #0]
   28154:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28158:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2815c:	f7fe fea3 	bl	26ea6 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   28160:	2800      	cmp	r0, #0
   28162:	dbe3      	blt.n	2812c <mqtt_client_tls_connect+0x3a>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   28164:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28166:	b15b      	cbz	r3, 28180 <mqtt_client_tls_connect+0x8e>
   28168:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2816a:	2304      	movs	r3, #4
   2816c:	220a      	movs	r2, #10
   2816e:	9300      	str	r3, [sp, #0]
   28170:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28174:	f104 0348 	add.w	r3, r4, #72	; 0x48
   28178:	f7fe fe95 	bl	26ea6 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   2817c:	2800      	cmp	r0, #0
   2817e:	dbd5      	blt.n	2812c <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   28180:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   28182:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   28184:	2b01      	cmp	r3, #1
   28186:	bf0c      	ite	eq
   28188:	2208      	moveq	r2, #8
   2818a:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   2818c:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return z_impl_zsock_connect(sock, addr, addrlen);
   2818e:	f7fe fdb7 	bl	26d00 <z_impl_zsock_connect>
	if (ret < 0) {
   28192:	2800      	cmp	r0, #0
   28194:	dbca      	blt.n	2812c <mqtt_client_tls_connect+0x3a>
	return 0;
   28196:	2000      	movs	r0, #0
   28198:	e7bb      	b.n	28112 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   2819a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2819c:	2a00      	cmp	r2, #0
   2819e:	d0cc      	beq.n	2813a <mqtt_client_tls_connect+0x48>
   281a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   281a2:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   281a4:	9200      	str	r2, [sp, #0]
   281a6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   281aa:	2203      	movs	r2, #3
   281ac:	f7fe fe7b 	bl	26ea6 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   281b0:	2800      	cmp	r0, #0
   281b2:	dac2      	bge.n	2813a <mqtt_client_tls_connect+0x48>
   281b4:	e7ba      	b.n	2812c <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   281b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   281b8:	2a00      	cmp	r2, #0
   281ba:	d0c1      	beq.n	28140 <mqtt_client_tls_connect+0x4e>
   281bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   281be:	0092      	lsls	r2, r2, #2
   281c0:	9200      	str	r2, [sp, #0]
   281c2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   281c6:	2201      	movs	r2, #1
   281c8:	f7fe fe6d 	bl	26ea6 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   281cc:	2800      	cmp	r0, #0
   281ce:	dab7      	bge.n	28140 <mqtt_client_tls_connect+0x4e>
   281d0:	e7ac      	b.n	2812c <mqtt_client_tls_connect+0x3a>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   281d2:	4618      	mov	r0, r3
   281d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   281d6:	9303      	str	r3, [sp, #12]
   281d8:	f7e8 fef0 	bl	10fbc <strlen>
   281dc:	2202      	movs	r2, #2
   281de:	9000      	str	r0, [sp, #0]
   281e0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   281e4:	4630      	mov	r0, r6
   281e6:	9b03      	ldr	r3, [sp, #12]
   281e8:	f7fe fe5d 	bl	26ea6 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   281ec:	2800      	cmp	r0, #0
   281ee:	daaa      	bge.n	28146 <mqtt_client_tls_connect+0x54>
   281f0:	e79c      	b.n	2812c <mqtt_client_tls_connect+0x3a>

000281f2 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   281f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   281f6:	2400      	movs	r4, #0
{
   281f8:	4606      	mov	r6, r0
   281fa:	460f      	mov	r7, r1
   281fc:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   281fe:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   28200:	42ac      	cmp	r4, r5
   28202:	d301      	bcc.n	28208 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   28204:	2000      	movs	r0, #0
   28206:	e00d      	b.n	28224 <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   28208:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2820a:	2300      	movs	r3, #0
   2820c:	e9cd 8800 	strd	r8, r8, [sp]
   28210:	1b2a      	subs	r2, r5, r4
   28212:	1939      	adds	r1, r7, r4
   28214:	f7fe fd9b 	bl	26d4e <z_impl_zsock_sendto>
		if (ret < 0) {
   28218:	1e03      	subs	r3, r0, #0
   2821a:	da06      	bge.n	2822a <mqtt_client_tls_write+0x38>
			return -errno;
   2821c:	f7ff f856 	bl	272cc <__errno>
   28220:	6800      	ldr	r0, [r0, #0]
   28222:	4240      	negs	r0, r0
}
   28224:	b002      	add	sp, #8
   28226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2822a:	441c      	add	r4, r3
   2822c:	e7e8      	b.n	28200 <mqtt_client_tls_write+0xe>

0002822e <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   2822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   28232:	2500      	movs	r5, #0
{
   28234:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   28236:	462b      	mov	r3, r5
{
   28238:	460c      	mov	r4, r1
   2823a:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   2823c:	428b      	cmp	r3, r1
   2823e:	d110      	bne.n	28262 <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   28240:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   28242:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   28244:	42ae      	cmp	r6, r5
   28246:	d216      	bcs.n	28276 <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   28248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2824a:	2200      	movs	r2, #0
   2824c:	4621      	mov	r1, r4
   2824e:	f7fe fdae 	bl	26dae <z_impl_zsock_sendmsg>
		if (ret < 0) {
   28252:	1e03      	subs	r3, r0, #0
   28254:	da0c      	bge.n	28270 <mqtt_client_tls_write_msg+0x42>
			return -errno;
   28256:	f7ff f839 	bl	272cc <__errno>
   2825a:	6800      	ldr	r0, [r0, #0]
   2825c:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   2825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   28262:	68a2      	ldr	r2, [r4, #8]
   28264:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   28268:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   2826a:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   2826c:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   2826e:	e7e5      	b.n	2823c <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   28270:	441e      	add	r6, r3
		if (offset >= total_len) {
   28272:	42b5      	cmp	r5, r6
   28274:	d801      	bhi.n	2827a <mqtt_client_tls_write_msg+0x4c>
	return 0;
   28276:	2000      	movs	r0, #0
   28278:	e7f1      	b.n	2825e <mqtt_client_tls_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   2827a:	2000      	movs	r0, #0
   2827c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   28280:	4560      	cmp	r0, ip
   28282:	d0df      	beq.n	28244 <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   28284:	68a2      	ldr	r2, [r4, #8]
   28286:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2828a:	6851      	ldr	r1, [r2, #4]
   2828c:	4299      	cmp	r1, r3
   2828e:	d905      	bls.n	2829c <mqtt_client_tls_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   28290:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   28292:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   28294:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   28296:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   28298:	6010      	str	r0, [r2, #0]
				break;
   2829a:	e7d3      	b.n	28244 <mqtt_client_tls_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   2829c:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   2829e:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   282a2:	3001      	adds	r0, #1
   282a4:	e7ec      	b.n	28280 <mqtt_client_tls_write_msg+0x52>

000282a6 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   282a6:	b513      	push	{r0, r1, r4, lr}
   282a8:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   282aa:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   282ac:	bf14      	ite	ne
   282ae:	4623      	movne	r3, r4
   282b0:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   282b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   282b4:	e9cd 4400 	strd	r4, r4, [sp]
   282b8:	f7fe fda0 	bl	26dfc <z_impl_zsock_recvfrom>
	if (ret < 0) {
   282bc:	2800      	cmp	r0, #0
   282be:	da03      	bge.n	282c8 <mqtt_client_tls_read+0x22>
		return -errno;
   282c0:	f7ff f804 	bl	272cc <__errno>
   282c4:	6800      	ldr	r0, [r0, #0]
   282c6:	4240      	negs	r0, r0
	}

	return ret;
}
   282c8:	b002      	add	sp, #8
   282ca:	bd10      	pop	{r4, pc}

000282cc <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   282cc:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   282ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   282d0:	f7fe fcf2 	bl	26cb8 <z_impl_zsock_close>
	if (ret < 0) {
   282d4:	2800      	cmp	r0, #0
   282d6:	da04      	bge.n	282e2 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   282d8:	f7fe fff8 	bl	272cc <__errno>
   282dc:	6800      	ldr	r0, [r0, #0]
   282de:	4240      	negs	r0, r0
	}

	return 0;
}
   282e0:	bd08      	pop	{r3, pc}
	return 0;
   282e2:	2000      	movs	r0, #0
   282e4:	e7fc      	b.n	282e0 <mqtt_client_tls_disconnect+0x14>

000282e6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   282e6:	b2cb      	uxtb	r3, r1
   282e8:	210c      	movs	r1, #12
   282ea:	6902      	ldr	r2, [r0, #16]
   282ec:	fb03 2101 	mla	r1, r3, r1, r2
   282f0:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   282f2:	f000 0007 	and.w	r0, r0, #7
   282f6:	4770      	bx	lr

000282f8 <set_off_state>:
	__asm__ volatile(
   282f8:	f04f 0320 	mov.w	r3, #32
   282fc:	f3ef 8211 	mrs	r2, BASEPRI
   28300:	f383 8812 	msr	BASEPRI_MAX, r3
   28304:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28308:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2830a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2830e:	d001      	beq.n	28314 <set_off_state+0x1c>
   28310:	428b      	cmp	r3, r1
   28312:	d107      	bne.n	28324 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   28314:	2301      	movs	r3, #1
   28316:	6003      	str	r3, [r0, #0]
	int err = 0;
   28318:	2000      	movs	r0, #0
	__asm__ volatile(
   2831a:	f382 8811 	msr	BASEPRI, r2
   2831e:	f3bf 8f6f 	isb	sy
}
   28322:	4770      	bx	lr
		err = -EPERM;
   28324:	f04f 30ff 	mov.w	r0, #4294967295
   28328:	e7f7      	b.n	2831a <set_off_state+0x22>

0002832a <set_starting_state>:
{
   2832a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2832c:	f04f 0320 	mov.w	r3, #32
   28330:	f3ef 8211 	mrs	r2, BASEPRI
   28334:	f383 8812 	msr	BASEPRI_MAX, r3
   28338:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2833c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2833e:	f003 0407 	and.w	r4, r3, #7
   28342:	2c01      	cmp	r4, #1
   28344:	d106      	bne.n	28354 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28346:	6001      	str	r1, [r0, #0]
	int err = 0;
   28348:	2000      	movs	r0, #0
	__asm__ volatile(
   2834a:	f382 8811 	msr	BASEPRI, r2
   2834e:	f3bf 8f6f 	isb	sy
}
   28352:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   28354:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   28358:	428b      	cmp	r3, r1
		err = -EALREADY;
   2835a:	bf14      	ite	ne
   2835c:	f04f 30ff 	movne.w	r0, #4294967295
   28360:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   28364:	e7f1      	b.n	2834a <set_starting_state+0x20>

00028366 <set_on_state>:
	__asm__ volatile(
   28366:	f04f 0320 	mov.w	r3, #32
   2836a:	f3ef 8211 	mrs	r2, BASEPRI
   2836e:	f383 8812 	msr	BASEPRI_MAX, r3
   28372:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   28376:	6803      	ldr	r3, [r0, #0]
   28378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2837c:	f043 0302 	orr.w	r3, r3, #2
   28380:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28382:	f382 8811 	msr	BASEPRI, r2
   28386:	f3bf 8f6f 	isb	sy
}
   2838a:	4770      	bx	lr

0002838c <onoff_started_callback>:
{
   2838c:	b410      	push	{r4}
	notify(mgr, 0);
   2838e:	241c      	movs	r4, #28
	return &data->mgr[type];
   28390:	6900      	ldr	r0, [r0, #16]
   28392:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28394:	fb03 0004 	mla	r0, r3, r4, r0
   28398:	2100      	movs	r1, #0
}
   2839a:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   2839e:	4710      	bx	r2

000283a0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   283a0:	2000      	movs	r0, #0
   283a2:	f7f6 bd9f 	b.w	1eee4 <nrfx_clock_start>

000283a6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   283a6:	2000      	movs	r0, #0
   283a8:	f7f6 bdce 	b.w	1ef48 <nrfx_clock_stop>

000283ac <blocking_start_callback>:
{
   283ac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   283ae:	f7fb b827 	b.w	23400 <z_impl_k_sem_give>

000283b2 <api_stop>:
{
   283b2:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   283b4:	240c      	movs	r4, #12
   283b6:	b2c9      	uxtb	r1, r1
   283b8:	434c      	muls	r4, r1
{
   283ba:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   283bc:	6900      	ldr	r0, [r0, #16]
   283be:	f104 0340 	add.w	r3, r4, #64	; 0x40
   283c2:	2180      	movs	r1, #128	; 0x80
   283c4:	4418      	add	r0, r3
   283c6:	f7ff ff97 	bl	282f8 <set_off_state>
	if (err < 0) {
   283ca:	2800      	cmp	r0, #0
   283cc:	db04      	blt.n	283d8 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   283ce:	6869      	ldr	r1, [r5, #4]
   283d0:	440c      	add	r4, r1
   283d2:	6863      	ldr	r3, [r4, #4]
   283d4:	4798      	blx	r3
	return 0;
   283d6:	2000      	movs	r0, #0
}
   283d8:	bd38      	pop	{r3, r4, r5, pc}

000283da <api_start>:
{
   283da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   283de:	240c      	movs	r4, #12
   283e0:	b2c9      	uxtb	r1, r1
   283e2:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   283e4:	6905      	ldr	r5, [r0, #16]
{
   283e6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   283e8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   283ec:	2180      	movs	r1, #128	; 0x80
   283ee:	4428      	add	r0, r5
{
   283f0:	4690      	mov	r8, r2
   283f2:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   283f4:	f7ff ff99 	bl	2832a <set_starting_state>
	if (err < 0) {
   283f8:	2800      	cmp	r0, #0
   283fa:	db06      	blt.n	2840a <api_start+0x30>
	subdata->cb = cb;
   283fc:	4425      	add	r5, r4
	subdata->user_data = user_data;
   283fe:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   28402:	6873      	ldr	r3, [r6, #4]
   28404:	591b      	ldr	r3, [r3, r4]
   28406:	4798      	blx	r3
	return 0;
   28408:	2000      	movs	r0, #0
}
   2840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002840e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2840e:	6843      	ldr	r3, [r0, #4]
}
   28410:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28412:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28414:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   28416:	600b      	str	r3, [r1, #0]
}
   28418:	4770      	bx	lr

0002841a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2841a:	6843      	ldr	r3, [r0, #4]
   2841c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2841e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   28420:	4042      	eors	r2, r0
   28422:	400a      	ands	r2, r1
   28424:	4042      	eors	r2, r0
    p_reg->OUT = value;
   28426:	605a      	str	r2, [r3, #4]
}
   28428:	2000      	movs	r0, #0
   2842a:	4770      	bx	lr

0002842c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2842c:	6843      	ldr	r3, [r0, #4]
}
   2842e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28430:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   28432:	6099      	str	r1, [r3, #8]
}
   28434:	4770      	bx	lr

00028436 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28436:	6843      	ldr	r3, [r0, #4]
}
   28438:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2843a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2843c:	60d9      	str	r1, [r3, #12]
}
   2843e:	4770      	bx	lr

00028440 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28440:	6843      	ldr	r3, [r0, #4]
}
   28442:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28444:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28446:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   28448:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2844a:	6051      	str	r1, [r2, #4]
}
   2844c:	4770      	bx	lr

0002844e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2844e:	6903      	ldr	r3, [r0, #16]
{
   28450:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   28452:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   28454:	b158      	cbz	r0, 2846e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28456:	2400      	movs	r4, #0
   28458:	4281      	cmp	r1, r0
   2845a:	d113      	bne.n	28484 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2845c:	6808      	ldr	r0, [r1, #0]
   2845e:	b95c      	cbnz	r4, 28478 <gpio_nrfx_manage_callback+0x2a>
   28460:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   28462:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   28464:	42a1      	cmp	r1, r4
   28466:	d100      	bne.n	2846a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   28468:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2846a:	2000      	movs	r0, #0
   2846c:	6008      	str	r0, [r1, #0]
	if (set) {
   2846e:	b972      	cbnz	r2, 2848e <gpio_nrfx_manage_callback+0x40>
	return 0;
   28470:	2000      	movs	r0, #0
}
   28472:	bd30      	pop	{r4, r5, pc}
   28474:	4628      	mov	r0, r5
   28476:	e7ef      	b.n	28458 <gpio_nrfx_manage_callback+0xa>
   28478:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2847a:	6898      	ldr	r0, [r3, #8]
   2847c:	4281      	cmp	r1, r0
	list->tail = node;
   2847e:	bf08      	it	eq
   28480:	609c      	streq	r4, [r3, #8]
}
   28482:	e7f2      	b.n	2846a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28484:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28486:	4604      	mov	r4, r0
   28488:	2d00      	cmp	r5, #0
   2848a:	d1f3      	bne.n	28474 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2848c:	b13a      	cbz	r2, 2849e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2848e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   28490:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   28492:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   28494:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   28496:	2800      	cmp	r0, #0
   28498:	d1ea      	bne.n	28470 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2849a:	6099      	str	r1, [r3, #8]
}
   2849c:	e7e9      	b.n	28472 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2849e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   284a2:	e7e6      	b.n	28472 <gpio_nrfx_manage_callback+0x24>

000284a4 <is_regular_addr_valid>:
{
   284a4:	b538      	push	{r3, r4, r5, lr}
   284a6:	4604      	mov	r4, r0
   284a8:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   284aa:	f001 f8d1 	bl	29650 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   284ae:	4284      	cmp	r4, r0
   284b0:	d209      	bcs.n	284c6 <is_regular_addr_valid+0x22>
   284b2:	2c00      	cmp	r4, #0
   284b4:	db07      	blt.n	284c6 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   284b6:	42a8      	cmp	r0, r5
   284b8:	d305      	bcc.n	284c6 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   284ba:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   284bc:	4281      	cmp	r1, r0
   284be:	bf8c      	ite	hi
   284c0:	2000      	movhi	r0, #0
   284c2:	2001      	movls	r0, #1
}
   284c4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   284c6:	2000      	movs	r0, #0
   284c8:	e7fc      	b.n	284c4 <is_regular_addr_valid+0x20>

000284ca <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   284ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   284ce:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   284d0:	6883      	ldr	r3, [r0, #8]
{
   284d2:	b086      	sub	sp, #24
   284d4:	4688      	mov	r8, r1
   284d6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   284d8:	695b      	ldr	r3, [r3, #20]
   284da:	aa02      	add	r2, sp, #8
   284dc:	a901      	add	r1, sp, #4
   284de:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   284e0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   284e2:	4625      	mov	r5, r4
   284e4:	9b02      	ldr	r3, [sp, #8]
   284e6:	42ab      	cmp	r3, r5
   284e8:	d802      	bhi.n	284f0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   284ea:	b006      	add	sp, #24
   284ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   284f0:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   284f2:	9f01      	ldr	r7, [sp, #4]
   284f4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   284f8:	687b      	ldr	r3, [r7, #4]
   284fa:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   284fc:	683a      	ldr	r2, [r7, #0]
   284fe:	eb0a 0306 	add.w	r3, sl, r6
   28502:	42b2      	cmp	r2, r6
   28504:	d802      	bhi.n	2850c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   28506:	469a      	mov	sl, r3
   28508:	3501      	adds	r5, #1
   2850a:	e7eb      	b.n	284e4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2850c:	4649      	mov	r1, r9
   2850e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   28510:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   28512:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   28514:	47c0      	blx	r8
   28516:	2800      	cmp	r0, #0
   28518:	d0e7      	beq.n	284ea <flash_page_foreach+0x20>
			off += page_info.size;
   2851a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2851c:	3601      	adds	r6, #1
			off += page_info.size;
   2851e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   28520:	e7ec      	b.n	284fc <flash_page_foreach+0x32>

00028522 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   28522:	6843      	ldr	r3, [r0, #4]
{
   28524:	b410      	push	{r4}
	return config->uarte_regs;
   28526:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   28528:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2852c:	05d1      	lsls	r1, r2, #23
   2852e:	d518      	bpl.n	28562 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28530:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   28534:	b1aa      	cbz	r2, 28562 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   28536:	f04f 0120 	mov.w	r1, #32
   2853a:	f3ef 8211 	mrs	r2, BASEPRI
   2853e:	f381 8812 	msr	BASEPRI_MAX, r1
   28542:	f3bf 8f6f 	isb	sy
   28546:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2854a:	b131      	cbz	r1, 2855a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2854c:	2100      	movs	r1, #0
   2854e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   28552:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28556:	2101      	movs	r1, #1
   28558:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2855a:	f382 8811 	msr	BASEPRI, r2
   2855e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28562:	6842      	ldr	r2, [r0, #4]
   28564:	6852      	ldr	r2, [r2, #4]
   28566:	06d2      	lsls	r2, r2, #27
   28568:	d51a      	bpl.n	285a0 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   2856a:	f04f 0220 	mov.w	r2, #32
   2856e:	f3ef 8111 	mrs	r1, BASEPRI
   28572:	f382 8812 	msr	BASEPRI_MAX, r2
   28576:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2857a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2857e:	b112      	cbz	r2, 28586 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28580:	2200      	movs	r2, #0
   28582:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   28586:	6902      	ldr	r2, [r0, #16]
   28588:	68d2      	ldr	r2, [r2, #12]
   2858a:	b10a      	cbz	r2, 28590 <uarte_nrfx_isr_int+0x6e>
   2858c:	6912      	ldr	r2, [r2, #16]
   2858e:	b91a      	cbnz	r2, 28598 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   28590:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   28594:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   28598:	f381 8811 	msr	BASEPRI, r1
   2859c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   285a0:	6902      	ldr	r2, [r0, #16]
   285a2:	68d2      	ldr	r2, [r2, #12]
   285a4:	b15a      	cbz	r2, 285be <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   285a6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   285aa:	b159      	cbz	r1, 285c4 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   285ac:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   285ae:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   285b0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   285b2:	b13c      	cbz	r4, 285c4 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   285b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   285b8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   285bc:	7391      	strb	r1, [r2, #14]
}
   285be:	f85d 4b04 	ldr.w	r4, [sp], #4
   285c2:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   285c4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   285c8:	b121      	cbz	r1, 285d4 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   285ca:	2100      	movs	r1, #0
   285cc:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   285d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   285d4:	6813      	ldr	r3, [r2, #0]
   285d6:	2b00      	cmp	r3, #0
   285d8:	d0f1      	beq.n	285be <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   285da:	6851      	ldr	r1, [r2, #4]
}
   285dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   285e0:	4718      	bx	r3

000285e2 <uarte_nrfx_config_get>:
{
   285e2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   285e4:	6902      	ldr	r2, [r0, #16]
   285e6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   285ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
   285ee:	2000      	movs	r0, #0
   285f0:	4770      	bx	lr

000285f2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   285f2:	6843      	ldr	r3, [r0, #4]
   285f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   285f6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   285fa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   285fe:	4770      	bx	lr

00028600 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   28600:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   28602:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28604:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28608:	b940      	cbnz	r0, 2861c <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2860a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2860c:	0792      	lsls	r2, r2, #30
   2860e:	d406      	bmi.n	2861e <is_tx_ready+0x1e>
   28610:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   28614:	3800      	subs	r0, #0
   28616:	bf18      	it	ne
   28618:	2001      	movne	r0, #1
   2861a:	4770      	bx	lr
   2861c:	2001      	movs	r0, #1
}
   2861e:	4770      	bx	lr

00028620 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   28620:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   28622:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28624:	681b      	ldr	r3, [r3, #0]
   28626:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2862a:	b148      	cbz	r0, 28640 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2862c:	2000      	movs	r0, #0
	*c = data->rx_data;
   2862e:	7d52      	ldrb	r2, [r2, #21]
   28630:	700a      	strb	r2, [r1, #0]
   28632:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28636:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2863a:	2201      	movs	r2, #1
   2863c:	601a      	str	r2, [r3, #0]
	return 0;
   2863e:	4770      	bx	lr
		return -1;
   28640:	f04f 30ff 	mov.w	r0, #4294967295
}
   28644:	4770      	bx	lr

00028646 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28646:	2a00      	cmp	r2, #0
   28648:	dd0f      	ble.n	2866a <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   2864a:	6843      	ldr	r3, [r0, #4]
   2864c:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2864e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28652:	b153      	cbz	r3, 2866a <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   28654:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28656:	2000      	movs	r0, #0
   28658:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   2865c:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28660:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   28662:	7d5b      	ldrb	r3, [r3, #21]
   28664:	700b      	strb	r3, [r1, #0]
   28666:	6010      	str	r0, [r2, #0]
}
   28668:	4770      	bx	lr
	int num_rx = 0;
   2866a:	2000      	movs	r0, #0
   2866c:	4770      	bx	lr

0002866e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2866e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   28670:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   28672:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   28674:	f04f 0020 	mov.w	r0, #32
   28678:	f3ef 8311 	mrs	r3, BASEPRI
   2867c:	f380 8812 	msr	BASEPRI_MAX, r0
   28680:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   28684:	2000      	movs	r0, #0
   28686:	68c9      	ldr	r1, [r1, #12]
   28688:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2868a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2868e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   28692:	f383 8811 	msr	BASEPRI, r3
   28696:	f3bf 8f6f 	isb	sy
}
   2869a:	4770      	bx	lr

0002869c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2869c:	2201      	movs	r2, #1
   2869e:	6903      	ldr	r3, [r0, #16]
   286a0:	68db      	ldr	r3, [r3, #12]
   286a2:	739a      	strb	r2, [r3, #14]
}
   286a4:	4770      	bx	lr

000286a6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   286a6:	6903      	ldr	r3, [r0, #16]
   286a8:	68db      	ldr	r3, [r3, #12]
   286aa:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   286ac:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   286b0:	b962      	cbnz	r2, 286cc <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   286b2:	6842      	ldr	r2, [r0, #4]
   286b4:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   286b6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   286ba:	b140      	cbz	r0, 286ce <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   286bc:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   286c0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   286c4:	d003      	beq.n	286ce <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   286c6:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   286c8:	6119      	str	r1, [r3, #16]
   286ca:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   286cc:	2000      	movs	r0, #0
}
   286ce:	4770      	bx	lr

000286d0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   286d0:	6843      	ldr	r3, [r0, #4]
   286d2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   286d4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   286d8:	3800      	subs	r0, #0
   286da:	bf18      	it	ne
   286dc:	2001      	movne	r0, #1
   286de:	4770      	bx	lr

000286e0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   286e0:	2210      	movs	r2, #16
	return config->uarte_regs;
   286e2:	6843      	ldr	r3, [r0, #4]
   286e4:	681b      	ldr	r3, [r3, #0]
   286e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   286ea:	4770      	bx	lr

000286ec <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   286ec:	2210      	movs	r2, #16
	return config->uarte_regs;
   286ee:	6843      	ldr	r3, [r0, #4]
   286f0:	681b      	ldr	r3, [r3, #0]
   286f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   286f6:	4770      	bx	lr

000286f8 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   286f8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   286fc:	6843      	ldr	r3, [r0, #4]
   286fe:	681b      	ldr	r3, [r3, #0]
   28700:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   28704:	4770      	bx	lr

00028706 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   28706:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2870a:	6843      	ldr	r3, [r0, #4]
   2870c:	681b      	ldr	r3, [r3, #0]
   2870e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   28712:	4770      	bx	lr

00028714 <uarte_nrfx_irq_update>:
}
   28714:	2001      	movs	r0, #1
   28716:	4770      	bx	lr

00028718 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   28718:	6903      	ldr	r3, [r0, #16]
   2871a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2871c:	e9c3 1200 	strd	r1, r2, [r3]
}
   28720:	4770      	bx	lr

00028722 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   28722:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   28724:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28726:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2872a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2872e:	2200      	movs	r2, #0
   28730:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   28734:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   28738:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2873c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28740:	6842      	ldr	r2, [r0, #4]
   28742:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28744:	bf41      	itttt	mi
   28746:	2208      	movmi	r2, #8
   28748:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2874c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   28750:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28754:	2201      	movs	r2, #1
   28756:	609a      	str	r2, [r3, #8]
}
   28758:	4770      	bx	lr

0002875a <uarte_nrfx_fifo_fill>:
{
   2875a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2875c:	6906      	ldr	r6, [r0, #16]
{
   2875e:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   28760:	68f3      	ldr	r3, [r6, #12]
   28762:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28764:	3310      	adds	r3, #16
   28766:	4294      	cmp	r4, r2
   28768:	bfa8      	it	ge
   2876a:	4614      	movge	r4, r2
   2876c:	2201      	movs	r2, #1
   2876e:	e8d3 0fef 	ldaex	r0, [r3]
   28772:	2800      	cmp	r0, #0
   28774:	d103      	bne.n	2877e <uarte_nrfx_fifo_fill+0x24>
   28776:	e8c3 2fe7 	stlex	r7, r2, [r3]
   2877a:	2f00      	cmp	r7, #0
   2877c:	d1f7      	bne.n	2876e <uarte_nrfx_fifo_fill+0x14>
   2877e:	bf0c      	ite	eq
   28780:	4613      	moveq	r3, r2
   28782:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   28784:	d01d      	beq.n	287c2 <uarte_nrfx_fifo_fill+0x68>
		return 0;
   28786:	461c      	mov	r4, r3
}
   28788:	4620      	mov	r0, r4
   2878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2878c:	68f2      	ldr	r2, [r6, #12]
   2878e:	5cc8      	ldrb	r0, [r1, r3]
   28790:	6892      	ldr	r2, [r2, #8]
   28792:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   28794:	3301      	adds	r3, #1
   28796:	42a3      	cmp	r3, r4
   28798:	dbf8      	blt.n	2878c <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   2879a:	f04f 0320 	mov.w	r3, #32
   2879e:	f3ef 8711 	mrs	r7, BASEPRI
   287a2:	f383 8812 	msr	BASEPRI_MAX, r3
   287a6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   287aa:	4628      	mov	r0, r5
   287ac:	f7ff ff28 	bl	28600 <is_tx_ready>
   287b0:	68f3      	ldr	r3, [r6, #12]
   287b2:	b940      	cbnz	r0, 287c6 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   287b4:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   287b6:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   287b8:	f387 8811 	msr	BASEPRI, r7
   287bc:	f3bf 8f6f 	isb	sy
	return len;
   287c0:	e7e2      	b.n	28788 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   287c2:	2300      	movs	r3, #0
   287c4:	e7e7      	b.n	28796 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   287c6:	4622      	mov	r2, r4
   287c8:	4628      	mov	r0, r5
   287ca:	6899      	ldr	r1, [r3, #8]
   287cc:	f7ff ffa9 	bl	28722 <tx_start>
   287d0:	e7f2      	b.n	287b8 <uarte_nrfx_fifo_fill+0x5e>

000287d2 <uarte_nrfx_irq_is_pending>:
{
   287d2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   287d4:	6843      	ldr	r3, [r0, #4]
{
   287d6:	4604      	mov	r4, r0
	return config->uarte_regs;
   287d8:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   287da:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   287de:	025b      	lsls	r3, r3, #9
   287e0:	d405      	bmi.n	287ee <uarte_nrfx_irq_is_pending+0x1c>
   287e2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   287e6:	f010 0010 	ands.w	r0, r0, #16
   287ea:	d106      	bne.n	287fa <uarte_nrfx_irq_is_pending+0x28>
}
   287ec:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   287ee:	f7ff ff5a 	bl	286a6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   287f2:	2800      	cmp	r0, #0
   287f4:	d0f5      	beq.n	287e2 <uarte_nrfx_irq_is_pending+0x10>
		||
   287f6:	2001      	movs	r0, #1
   287f8:	e7f8      	b.n	287ec <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   287fa:	4620      	mov	r0, r4
   287fc:	f7ff ff68 	bl	286d0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   28800:	3800      	subs	r0, #0
   28802:	bf18      	it	ne
   28804:	2001      	movne	r0, #1
   28806:	e7f1      	b.n	287ec <uarte_nrfx_irq_is_pending+0x1a>

00028808 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   28808:	2000      	movs	r0, #0
   2880a:	4770      	bx	lr

0002880c <entropy_cc3xx_rng_get_entropy>:
{
   2880c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2880e:	460f      	mov	r7, r1
   28810:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   28812:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   28816:	2400      	movs	r4, #0
	int res = -EINVAL;
   28818:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   2881c:	42a6      	cmp	r6, r4
   2881e:	d801      	bhi.n	28824 <entropy_cc3xx_rng_get_entropy+0x18>
}
   28820:	b003      	add	sp, #12
   28822:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   28824:	1b33      	subs	r3, r6, r4
   28826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2882a:	bf38      	it	cc
   2882c:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   2882e:	aa01      	add	r2, sp, #4
   28830:	4629      	mov	r1, r5
   28832:	1938      	adds	r0, r7, r4
   28834:	f7fe fcbd 	bl	271b2 <spm_request_random_number>
		if (olen != chunk_size) {
   28838:	9b01      	ldr	r3, [sp, #4]
   2883a:	42ab      	cmp	r3, r5
   2883c:	d103      	bne.n	28846 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (res != 0) {
   2883e:	2800      	cmp	r0, #0
   28840:	d1ee      	bne.n	28820 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   28842:	442c      	add	r4, r5
   28844:	e7ea      	b.n	2881c <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   28846:	f06f 0015 	mvn.w	r0, #21
   2884a:	e7e9      	b.n	28820 <entropy_cc3xx_rng_get_entropy+0x14>

0002884c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2884c:	4770      	bx	lr

0002884e <sys_clock_cycle_get_32>:
{
   2884e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   28850:	f7ee ff3a 	bl	176c8 <z_nrf_rtc_timer_read>
}
   28854:	bd08      	pop	{r3, pc}

00028856 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   28856:	f002 b92f 	b.w	2aab8 <z_impl_k_busy_wait>

0002885a <nrf_modem_os_errno_set>:
{
   2885a:	b510      	push	{r4, lr}
   2885c:	4604      	mov	r4, r0
	errno = err_code;
   2885e:	f7fe fd35 	bl	272cc <__errno>
   28862:	6004      	str	r4, [r0, #0]
}
   28864:	bd10      	pop	{r4, pc}

00028866 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   28866:	f001 bea3 	b.w	2a5b0 <k_is_in_isr>

0002886a <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   2886a:	f7fa bdc9 	b.w	23400 <z_impl_k_sem_give>

0002886e <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2886e:	1c4b      	adds	r3, r1, #1
{
   28870:	b5d0      	push	{r4, r6, r7, lr}
   28872:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   28874:	d01a      	beq.n	288ac <nrf_modem_os_sem_take+0x3e>
   28876:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2887a:	f240 36e7 	movw	r6, #999	; 0x3e7
   2887e:	2700      	movs	r7, #0
   28880:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   28884:	fbc0 6701 	smlal	r6, r7, r0, r1
   28888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2888c:	2300      	movs	r3, #0
   2888e:	4630      	mov	r0, r6
   28890:	4639      	mov	r1, r7
   28892:	f7e8 f9d9 	bl	10c48 <__aeabi_uldivmod>
   28896:	4602      	mov	r2, r0
   28898:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2889a:	4620      	mov	r0, r4
   2889c:	f7fa fdd6 	bl	2344c <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   288a0:	f110 0f0b 	cmn.w	r0, #11
}
   288a4:	bf0c      	ite	eq
   288a6:	2074      	moveq	r0, #116	; 0x74
   288a8:	2000      	movne	r0, #0
   288aa:	bdd0      	pop	{r4, r6, r7, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   288ac:	f04f 32ff 	mov.w	r2, #4294967295
   288b0:	4613      	mov	r3, r2
   288b2:	e7f2      	b.n	2889a <nrf_modem_os_sem_take+0x2c>

000288b4 <read_task_create>:
{
   288b4:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   288b6:	201c      	movs	r0, #28
   288b8:	2200      	movs	r2, #0
   288ba:	2106      	movs	r1, #6
   288bc:	f7ed f90e 	bl	15adc <z_arm_irq_priority_set>
}
   288c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   288c4:	201c      	movs	r0, #28
   288c6:	f7ed b8eb 	b.w	15aa0 <arch_irq_enable>

000288ca <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   288ca:	2000      	movs	r0, #0
   288cc:	4770      	bx	lr

000288ce <z_to_nrf_flags>:
{
   288ce:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   288d0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   288d4:	bf18      	it	ne
   288d6:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   288d8:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   288da:	bf48      	it	mi
   288dc:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   288e0:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   288e2:	bf48      	it	mi
   288e4:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   288e8:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   288ea:	bf48      	it	mi
   288ec:	f040 0010 	orrmi.w	r0, r0, #16
}
   288f0:	4770      	bx	lr

000288f2 <z_to_nrf_protocol>:
	switch (proto) {
   288f2:	2811      	cmp	r0, #17
   288f4:	d013      	beq.n	2891e <z_to_nrf_protocol+0x2c>
   288f6:	dc06      	bgt.n	28906 <z_to_nrf_protocol+0x14>
   288f8:	b1a8      	cbz	r0, 28926 <z_to_nrf_protocol+0x34>
		return NRF_IPPROTO_TCP;
   288fa:	2806      	cmp	r0, #6
   288fc:	bf14      	ite	ne
   288fe:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   28902:	2001      	moveq	r0, #1
   28904:	4770      	bx	lr
	switch (proto) {
   28906:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2890a:	d00a      	beq.n	28922 <z_to_nrf_protocol+0x30>
   2890c:	f240 1311 	movw	r3, #273	; 0x111
		return NRF_SPROTO_DTLS1v2;
   28910:	4298      	cmp	r0, r3
   28912:	bf14      	ite	ne
   28914:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   28918:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   2891c:	4770      	bx	lr
	switch (proto) {
   2891e:	2002      	movs	r0, #2
   28920:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   28922:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   28926:	4770      	bx	lr

00028928 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   28928:	f7fa bcf0 	b.w	2330c <z_impl_k_mutex_unlock>

0002892c <nrf91_socket_offload_getsockopt>:
{
   2892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28930:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   28932:	2300      	movs	r3, #0
{
   28934:	b086      	sub	sp, #24
   28936:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2893a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2893e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   28942:	2901      	cmp	r1, #1
{
   28944:	460e      	mov	r6, r1
   28946:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   28948:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2894a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2894c:	d002      	beq.n	28954 <nrf91_socket_offload_getsockopt+0x28>
   2894e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   28952:	d139      	bne.n	289c8 <nrf91_socket_offload_getsockopt+0x9c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   28954:	4629      	mov	r1, r5
   28956:	4630      	mov	r0, r6
   28958:	aa02      	add	r2, sp, #8
   2895a:	f7ef fa29 	bl	17db0 <z_to_nrf_optname>
   2895e:	2800      	cmp	r0, #0
   28960:	db32      	blt.n	289c8 <nrf91_socket_offload_getsockopt+0x9c>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   28962:	2e01      	cmp	r6, #1
   28964:	d123      	bne.n	289ae <nrf91_socket_offload_getsockopt+0x82>
   28966:	f1a5 0314 	sub.w	r3, r5, #20
   2896a:	2b01      	cmp	r3, #1
   2896c:	d81f      	bhi.n	289ae <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   2896e:	2308      	movs	r3, #8
   28970:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   28972:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   28974:	aa03      	add	r2, sp, #12
   28976:	4638      	mov	r0, r7
   28978:	9200      	str	r2, [sp, #0]
   2897a:	4631      	mov	r1, r6
   2897c:	9a02      	ldr	r2, [sp, #8]
   2897e:	f001 fd44 	bl	2a40a <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   28982:	4607      	mov	r7, r0
   28984:	b978      	cbnz	r0, 289a6 <nrf91_socket_offload_getsockopt+0x7a>
   28986:	b174      	cbz	r4, 289a6 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   28988:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2898a:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   2898c:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   28990:	d109      	bne.n	289a6 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   28992:	2d04      	cmp	r5, #4
   28994:	d10d      	bne.n	289b2 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   28996:	6820      	ldr	r0, [r4, #0]
   28998:	b128      	cbz	r0, 289a6 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   2899a:	f7ff ff5e 	bl	2885a <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   2899e:	f7fe fc95 	bl	272cc <__errno>
   289a2:	6803      	ldr	r3, [r0, #0]
   289a4:	6023      	str	r3, [r4, #0]
}
   289a6:	4638      	mov	r0, r7
   289a8:	b006      	add	sp, #24
   289aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   289ae:	4623      	mov	r3, r4
   289b0:	e7e0      	b.n	28974 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   289b2:	3d14      	subs	r5, #20
   289b4:	2d01      	cmp	r5, #1
   289b6:	d8f6      	bhi.n	289a6 <nrf91_socket_offload_getsockopt+0x7a>
				((struct timeval *)optval)->tv_sec =
   289b8:	9b04      	ldr	r3, [sp, #16]
   289ba:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   289bc:	9b05      	ldr	r3, [sp, #20]
   289be:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   289c0:	2308      	movs	r3, #8
   289c2:	f8c8 3000 	str.w	r3, [r8]
   289c6:	e7ee      	b.n	289a6 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   289c8:	f7fe fc80 	bl	272cc <__errno>
   289cc:	236d      	movs	r3, #109	; 0x6d
	return retval;
   289ce:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   289d2:	6003      	str	r3, [r0, #0]
	return retval;
   289d4:	e7e7      	b.n	289a6 <nrf91_socket_offload_getsockopt+0x7a>

000289d6 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   289d6:	6800      	ldr	r0, [r0, #0]
   289d8:	f001 bcc5 	b.w	2a366 <nrf_listen>

000289dc <nrf91_socket_offload_freeaddrinfo>:
{
   289dc:	b538      	push	{r3, r4, r5, lr}
   289de:	4604      	mov	r4, r0
	while (next != NULL) {
   289e0:	b904      	cbnz	r4, 289e4 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   289e2:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   289e4:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   289e6:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   289e8:	f002 f9eb 	bl	2adc2 <k_free>
		k_free(this);
   289ec:	4620      	mov	r0, r4
   289ee:	f002 f9e8 	bl	2adc2 <k_free>
		next = next->ai_next;
   289f2:	462c      	mov	r4, r5
   289f4:	e7f4      	b.n	289e0 <nrf91_socket_offload_freeaddrinfo+0x4>

000289f6 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   289f6:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   289f8:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   289fa:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   289fc:	4603      	mov	r3, r0
{
   289fe:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   28a00:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28a04:	f101 0420 	add.w	r4, r1, #32
   28a08:	f101 0210 	add.w	r2, r1, #16
   28a0c:	f852 5b04 	ldr.w	r5, [r2], #4
   28a10:	42a2      	cmp	r2, r4
   28a12:	f843 5b04 	str.w	r5, [r3], #4
   28a16:	d1f9      	bne.n	28a0c <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   28a18:	6a0b      	ldr	r3, [r1, #32]
   28a1a:	7503      	strb	r3, [r0, #20]
}
   28a1c:	bd30      	pop	{r4, r5, pc}

00028a1e <z_to_nrf_ipv6>:
{
   28a1e:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   28a20:	2124      	movs	r1, #36	; 0x24
   28a22:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   28a24:	8841      	ldrh	r1, [r0, #2]
{
   28a26:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   28a28:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   28a2a:	210a      	movs	r1, #10
{
   28a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   28a2e:	6059      	str	r1, [r3, #4]
   28a30:	1d04      	adds	r4, r0, #4
   28a32:	f103 0610 	add.w	r6, r3, #16
   28a36:	f100 0714 	add.w	r7, r0, #20
   28a3a:	4635      	mov	r5, r6
   28a3c:	6820      	ldr	r0, [r4, #0]
   28a3e:	6861      	ldr	r1, [r4, #4]
   28a40:	3408      	adds	r4, #8
   28a42:	c503      	stmia	r5!, {r0, r1}
   28a44:	42bc      	cmp	r4, r7
   28a46:	462e      	mov	r6, r5
   28a48:	d1f7      	bne.n	28a3a <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   28a4a:	7d12      	ldrb	r2, [r2, #20]
   28a4c:	621a      	str	r2, [r3, #32]
}
   28a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028a50 <nrf91_socket_offload_sendto>:
{
   28a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a54:	b08e      	sub	sp, #56	; 0x38
   28a56:	9c14      	ldr	r4, [sp, #80]	; 0x50
   28a58:	460d      	mov	r5, r1
   28a5a:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   28a5c:	6807      	ldr	r7, [r0, #0]
	if (to == NULL) {
   28a5e:	b974      	cbnz	r4, 28a7e <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   28a60:	4618      	mov	r0, r3
   28a62:	9203      	str	r2, [sp, #12]
   28a64:	f7ff ff33 	bl	288ce <z_to_nrf_flags>
   28a68:	4603      	mov	r3, r0
   28a6a:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   28a6e:	4629      	mov	r1, r5
   28a70:	4638      	mov	r0, r7
   28a72:	9a03      	ldr	r2, [sp, #12]
   28a74:	f001 fc30 	bl	2a2d8 <nrf_sendto>
}
   28a78:	b00e      	add	sp, #56	; 0x38
   28a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   28a7e:	8823      	ldrh	r3, [r4, #0]
   28a80:	9203      	str	r2, [sp, #12]
   28a82:	2b01      	cmp	r3, #1
   28a84:	d113      	bne.n	28aae <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   28a86:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28a88:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   28a8c:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   28a90:	2302      	movs	r3, #2
   28a92:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28a94:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   28a96:	4630      	mov	r0, r6
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28a98:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28a9a:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   28a9e:	f7ff ff16 	bl	288ce <z_to_nrf_flags>
   28aa2:	a905      	add	r1, sp, #20
   28aa4:	4603      	mov	r3, r0
   28aa6:	f8cd 8004 	str.w	r8, [sp, #4]
   28aaa:	9100      	str	r1, [sp, #0]
   28aac:	e7df      	b.n	28a6e <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   28aae:	2b02      	cmp	r3, #2
   28ab0:	d10d      	bne.n	28ace <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   28ab2:	f10d 0814 	add.w	r8, sp, #20
   28ab6:	4641      	mov	r1, r8
   28ab8:	4620      	mov	r0, r4
   28aba:	f7ff ffb0 	bl	28a1e <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   28abe:	4630      	mov	r0, r6
   28ac0:	f7ff ff05 	bl	288ce <z_to_nrf_flags>
   28ac4:	2124      	movs	r1, #36	; 0x24
   28ac6:	4603      	mov	r3, r0
   28ac8:	e9cd 8100 	strd	r8, r1, [sp]
   28acc:	e7cf      	b.n	28a6e <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   28ace:	f7fe fbfd 	bl	272cc <__errno>
   28ad2:	2386      	movs	r3, #134	; 0x86
   28ad4:	6003      	str	r3, [r0, #0]
	return retval;
   28ad6:	f04f 30ff 	mov.w	r0, #4294967295
   28ada:	e7cd      	b.n	28a78 <nrf91_socket_offload_sendto+0x28>

00028adc <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   28adc:	2300      	movs	r3, #0
{
   28ade:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   28ae0:	e9cd 3300 	strd	r3, r3, [sp]
   28ae4:	f7ff ffb4 	bl	28a50 <nrf91_socket_offload_sendto>
}
   28ae8:	b003      	add	sp, #12
   28aea:	f85d fb04 	ldr.w	pc, [sp], #4

00028aee <nrf91_socket_offload_connect>:
{
   28aee:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   28af0:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   28af2:	8808      	ldrh	r0, [r1, #0]
{
   28af4:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   28af6:	2801      	cmp	r0, #1
{
   28af8:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   28afa:	d10f      	bne.n	28b1c <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   28afc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28afe:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   28b00:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   28b04:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28b06:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28b08:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   28b0c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28b0e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   28b10:	4620      	mov	r0, r4
   28b12:	a901      	add	r1, sp, #4
   28b14:	f001 fc14 	bl	2a340 <nrf_connect>
}
   28b18:	b00a      	add	sp, #40	; 0x28
   28b1a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   28b1c:	2802      	cmp	r0, #2
   28b1e:	d105      	bne.n	28b2c <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   28b20:	4618      	mov	r0, r3
   28b22:	a901      	add	r1, sp, #4
   28b24:	f7ff ff7b 	bl	28a1e <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   28b28:	2224      	movs	r2, #36	; 0x24
   28b2a:	e7f1      	b.n	28b10 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   28b2c:	4620      	mov	r0, r4
   28b2e:	f001 fc07 	bl	2a340 <nrf_connect>
		if (retval < 0) {
   28b32:	2800      	cmp	r0, #0
   28b34:	daf0      	bge.n	28b18 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   28b36:	f7fe fbc9 	bl	272cc <__errno>
   28b3a:	2386      	movs	r3, #134	; 0x86
   28b3c:	6003      	str	r3, [r0, #0]
   28b3e:	f04f 30ff 	mov.w	r0, #4294967295
   28b42:	e7e9      	b.n	28b18 <nrf91_socket_offload_connect+0x2a>

00028b44 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   28b44:	f7fa bb64 	b.w	23210 <z_impl_k_mutex_lock>

00028b48 <nrf91_socket_offload_recvfrom>:
{
   28b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b4c:	4699      	mov	r9, r3
   28b4e:	b08e      	sub	sp, #56	; 0x38
   28b50:	4606      	mov	r6, r0
   28b52:	e9dd 5816 	ldrd	r5, r8, [sp, #88]	; 0x58
	k_mutex_unlock(ctx->lock);
   28b56:	6840      	ldr	r0, [r0, #4]
{
   28b58:	460c      	mov	r4, r1
   28b5a:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   28b5c:	f7ff fee4 	bl	28928 <k_mutex_unlock>
	if (from == NULL) {
   28b60:	4648      	mov	r0, r9
   28b62:	f7ff feb4 	bl	288ce <z_to_nrf_flags>
   28b66:	4603      	mov	r3, r0
   28b68:	b99d      	cbnz	r5, 28b92 <nrf91_socket_offload_recvfrom+0x4a>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   28b6a:	4621      	mov	r1, r4
   28b6c:	463a      	mov	r2, r7
   28b6e:	e9cd 5500 	strd	r5, r5, [sp]
   28b72:	6830      	ldr	r0, [r6, #0]
   28b74:	f001 fbca 	bl	2a30c <nrf_recvfrom>
   28b78:	4604      	mov	r4, r0
	if (ctx->lock) {
   28b7a:	6870      	ldr	r0, [r6, #4]
   28b7c:	b128      	cbz	r0, 28b8a <nrf91_socket_offload_recvfrom+0x42>
		k_mutex_lock(ctx->lock, K_FOREVER);
   28b7e:	f04f 32ff 	mov.w	r2, #4294967295
   28b82:	f04f 33ff 	mov.w	r3, #4294967295
   28b86:	f7ff ffdd 	bl	28b44 <k_mutex_lock.constprop.0>
}
   28b8a:	4620      	mov	r0, r4
   28b8c:	b00e      	add	sp, #56	; 0x38
   28b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   28b92:	f04f 0a24 	mov.w	sl, #36	; 0x24
   28b96:	f10d 0914 	add.w	r9, sp, #20
   28b9a:	4652      	mov	r2, sl
   28b9c:	2100      	movs	r1, #0
   28b9e:	9003      	str	r0, [sp, #12]
   28ba0:	4648      	mov	r0, r9
   28ba2:	f002 f971 	bl	2ae88 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   28ba6:	aa04      	add	r2, sp, #16
   28ba8:	4621      	mov	r1, r4
   28baa:	e9cd 9200 	strd	r9, r2, [sp]
   28bae:	9b03      	ldr	r3, [sp, #12]
   28bb0:	463a      	mov	r2, r7
   28bb2:	6830      	ldr	r0, [r6, #0]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   28bb4:	f8cd a010 	str.w	sl, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   28bb8:	f001 fba8 	bl	2a30c <nrf_recvfrom>
		if (retval < 0) {
   28bbc:	1e04      	subs	r4, r0, #0
   28bbe:	dbdc      	blt.n	28b7a <nrf91_socket_offload_recvfrom+0x32>
		if (cliaddr->sa_family == NRF_AF_INET) {
   28bc0:	9b06      	ldr	r3, [sp, #24]
   28bc2:	2b02      	cmp	r3, #2
   28bc4:	d10a      	bne.n	28bdc <nrf91_socket_offload_recvfrom+0x94>
	ptr->sin_port = nrf_in->sin_port;
   28bc6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   28bca:	806b      	strh	r3, [r5, #2]
	ptr->sin_family = AF_INET;
   28bcc:	2301      	movs	r3, #1
   28bce:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   28bd0:	9b08      	ldr	r3, [sp, #32]
   28bd2:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   28bd4:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   28bd6:	f8c8 3000 	str.w	r3, [r8]
   28bda:	e7ce      	b.n	28b7a <nrf91_socket_offload_recvfrom+0x32>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   28bdc:	2b0a      	cmp	r3, #10
   28bde:	d1cc      	bne.n	28b7a <nrf91_socket_offload_recvfrom+0x32>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   28be0:	4649      	mov	r1, r9
   28be2:	4628      	mov	r0, r5
   28be4:	f7ff ff07 	bl	289f6 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   28be8:	2318      	movs	r3, #24
   28bea:	e7f4      	b.n	28bd6 <nrf91_socket_offload_recvfrom+0x8e>

00028bec <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   28bec:	2300      	movs	r3, #0
{
   28bee:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   28bf0:	e9cd 3300 	strd	r3, r3, [sp]
   28bf4:	f7ff ffa8 	bl	28b48 <nrf91_socket_offload_recvfrom>
}
   28bf8:	b003      	add	sp, #12
   28bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00028bfe <nrf91_socket_offload_close>:
{
   28bfe:	b538      	push	{r3, r4, r5, lr}
   28c00:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   28c02:	6800      	ldr	r0, [r0, #0]
   28c04:	f001 fb5b 	bl	2a2be <nrf_close>
	if (retval == 0) {
   28c08:	4604      	mov	r4, r0
   28c0a:	b910      	cbnz	r0, 28c12 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   28c0c:	4628      	mov	r0, r5
   28c0e:	f7ef fbc9 	bl	183a4 <release_ctx>
}
   28c12:	4620      	mov	r0, r4
   28c14:	bd38      	pop	{r3, r4, r5, pc}

00028c16 <nrf91_socket_offload_setsockopt>:
{
   28c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   28c1a:	2901      	cmp	r1, #1
{
   28c1c:	b086      	sub	sp, #24
   28c1e:	460c      	mov	r4, r1
   28c20:	4615      	mov	r5, r2
   28c22:	461e      	mov	r6, r3
   28c24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   28c26:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   28c2a:	d002      	beq.n	28c32 <nrf91_socket_offload_setsockopt+0x1c>
   28c2c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   28c30:	d122      	bne.n	28c78 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   28c32:	4629      	mov	r1, r5
   28c34:	4620      	mov	r0, r4
   28c36:	aa03      	add	r2, sp, #12
   28c38:	f7ef f8ba 	bl	17db0 <z_to_nrf_optname>
   28c3c:	2800      	cmp	r0, #0
   28c3e:	db1b      	blt.n	28c78 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   28c40:	2c01      	cmp	r4, #1
   28c42:	d112      	bne.n	28c6a <nrf91_socket_offload_setsockopt+0x54>
   28c44:	3d14      	subs	r5, #20
   28c46:	2d01      	cmp	r5, #1
   28c48:	d805      	bhi.n	28c56 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   28c4a:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   28c4c:	6833      	ldr	r3, [r6, #0]
   28c4e:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   28c50:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   28c52:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   28c54:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   28c56:	4633      	mov	r3, r6
   28c58:	4621      	mov	r1, r4
   28c5a:	4640      	mov	r0, r8
   28c5c:	9a03      	ldr	r2, [sp, #12]
   28c5e:	9700      	str	r7, [sp, #0]
   28c60:	f001 fbba 	bl	2a3d8 <nrf_setsockopt>
}
   28c64:	b006      	add	sp, #24
   28c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   28c6a:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   28c6e:	d1f2      	bne.n	28c56 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   28c70:	2d0a      	cmp	r5, #10
   28c72:	bf08      	it	eq
   28c74:	2701      	moveq	r7, #1
   28c76:	e7ee      	b.n	28c56 <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   28c78:	f7fe fb28 	bl	272cc <__errno>
   28c7c:	236d      	movs	r3, #109	; 0x6d
   28c7e:	6003      	str	r3, [r0, #0]
   28c80:	f04f 30ff 	mov.w	r0, #4294967295
   28c84:	e7ee      	b.n	28c64 <nrf91_socket_offload_setsockopt+0x4e>

00028c86 <nrf91_socket_offload_bind>:
{
   28c86:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   28c88:	880a      	ldrh	r2, [r1, #0]
{
   28c8a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   28c8c:	2a01      	cmp	r2, #1
	int sd = OBJ_TO_SD(obj);
   28c8e:	6804      	ldr	r4, [r0, #0]
{
   28c90:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   28c92:	d10f      	bne.n	28cb4 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   28c94:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28c96:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   28c98:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   28c9c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28c9e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28ca0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   28ca4:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28ca6:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   28ca8:	4620      	mov	r0, r4
   28caa:	a901      	add	r1, sp, #4
   28cac:	f001 fb81 	bl	2a3b2 <nrf_bind>
}
   28cb0:	b00a      	add	sp, #40	; 0x28
   28cb2:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   28cb4:	2a02      	cmp	r2, #2
   28cb6:	d105      	bne.n	28cc4 <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   28cb8:	4618      	mov	r0, r3
   28cba:	a901      	add	r1, sp, #4
   28cbc:	f7ff feaf 	bl	28a1e <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   28cc0:	2224      	movs	r2, #36	; 0x24
   28cc2:	e7f1      	b.n	28ca8 <nrf91_socket_offload_bind+0x22>
	errno = ENOTSUP;
   28cc4:	f7fe fb02 	bl	272cc <__errno>
   28cc8:	2386      	movs	r3, #134	; 0x86
   28cca:	6003      	str	r3, [r0, #0]
   28ccc:	f04f 30ff 	mov.w	r0, #4294967295
   28cd0:	e7ee      	b.n	28cb0 <nrf91_socket_offload_bind+0x2a>

00028cd2 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   28cd2:	280d      	cmp	r0, #13
   28cd4:	d004      	beq.n	28ce0 <is_lfcr+0xe>
   28cd6:	f1a0 030a 	sub.w	r3, r0, #10
   28cda:	4258      	negs	r0, r3
   28cdc:	4158      	adcs	r0, r3
   28cde:	4770      	bx	lr
		return true;
   28ce0:	2001      	movs	r0, #1
}
   28ce2:	4770      	bx	lr

00028ce4 <skip_command_prefix>:
{
   28ce4:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   28ce6:	6801      	ldr	r1, [r0, #0]
{
   28ce8:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   28cea:	1c8b      	adds	r3, r1, #2
   28cec:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   28cee:	788c      	ldrb	r4, [r1, #2]
   28cf0:	4620      	mov	r0, r4
   28cf2:	f7ff ffee 	bl	28cd2 <is_lfcr>
   28cf6:	b910      	cbnz	r0, 28cfe <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28cf8:	b10c      	cbz	r4, 28cfe <skip_command_prefix+0x1a>
	(*cmd)++;
   28cfa:	3103      	adds	r1, #3
   28cfc:	6011      	str	r1, [r2, #0]
}
   28cfe:	bd10      	pop	{r4, pc}

00028d00 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   28d00:	6813      	ldr	r3, [r2, #0]
   28d02:	f7ef beed 	b.w	18ae0 <at_parser_max_params_from_str>

00028d06 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   28d06:	6803      	ldr	r3, [r0, #0]
   28d08:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   28d0a:	bf86      	itte	hi
   28d0c:	6840      	ldrhi	r0, [r0, #4]
   28d0e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   28d12:	2000      	movls	r0, #0
}
   28d14:	4770      	bx	lr

00028d16 <at_param_clear>:
{
   28d16:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   28d18:	7803      	ldrb	r3, [r0, #0]
{
   28d1a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   28d1c:	3b02      	subs	r3, #2
   28d1e:	2b01      	cmp	r3, #1
   28d20:	d802      	bhi.n	28d28 <at_param_clear+0x12>
		k_free(param->value.str_val);
   28d22:	6880      	ldr	r0, [r0, #8]
   28d24:	f002 f84d 	bl	2adc2 <k_free>
	param->value.int_val = 0;
   28d28:	2200      	movs	r2, #0
   28d2a:	2300      	movs	r3, #0
   28d2c:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   28d30:	bd10      	pop	{r4, pc}

00028d32 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   28d32:	b538      	push	{r3, r4, r5, lr}
   28d34:	460d      	mov	r5, r1
	if (list == NULL) {
   28d36:	4604      	mov	r4, r0
   28d38:	b140      	cbz	r0, 28d4c <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   28d3a:	2110      	movs	r1, #16
   28d3c:	4628      	mov	r0, r5
   28d3e:	f002 f84b 	bl	2add8 <k_calloc>
   28d42:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   28d44:	b128      	cbz	r0, 28d52 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   28d46:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   28d48:	6025      	str	r5, [r4, #0]
}
   28d4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28d4c:	f06f 0015 	mvn.w	r0, #21
   28d50:	e7fb      	b.n	28d4a <at_params_list_init+0x18>
		return -ENOMEM;
   28d52:	f06f 000b 	mvn.w	r0, #11
   28d56:	e7f8      	b.n	28d4a <at_params_list_init+0x18>

00028d58 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   28d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   28d5a:	4604      	mov	r4, r0
   28d5c:	b128      	cbz	r0, 28d6a <at_params_list_clear+0x12>
   28d5e:	6843      	ldr	r3, [r0, #4]
   28d60:	b11b      	cbz	r3, 28d6a <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   28d62:	2500      	movs	r5, #0
   28d64:	6823      	ldr	r3, [r4, #0]
   28d66:	429d      	cmp	r5, r3
   28d68:	d301      	bcc.n	28d6e <at_params_list_clear+0x16>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   28d6a:	b003      	add	sp, #12
   28d6c:	bd30      	pop	{r4, r5, pc}
		at_param_clear(&params[i]);
   28d6e:	6860      	ldr	r0, [r4, #4]
   28d70:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   28d74:	9001      	str	r0, [sp, #4]
   28d76:	f7ff ffce 	bl	28d16 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   28d7a:	2210      	movs	r2, #16
   28d7c:	2100      	movs	r1, #0
   28d7e:	9801      	ldr	r0, [sp, #4]
   28d80:	f002 f882 	bl	2ae88 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   28d84:	3501      	adds	r5, #1
   28d86:	e7ed      	b.n	28d64 <at_params_list_clear+0xc>

00028d88 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   28d88:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   28d8a:	4604      	mov	r4, r0
   28d8c:	b148      	cbz	r0, 28da2 <at_params_list_free+0x1a>
   28d8e:	6843      	ldr	r3, [r0, #4]
   28d90:	b13b      	cbz	r3, 28da2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   28d92:	2500      	movs	r5, #0
	at_params_list_clear(list);
   28d94:	f7ff ffe0 	bl	28d58 <at_params_list_clear>
	k_free(list->params);
   28d98:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   28d9a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   28d9c:	f002 f811 	bl	2adc2 <k_free>
	list->params = NULL;
   28da0:	6065      	str	r5, [r4, #4]
}
   28da2:	bd38      	pop	{r3, r4, r5, pc}

00028da4 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   28da4:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   28da6:	b178      	cbz	r0, 28dc8 <at_params_empty_put+0x24>
   28da8:	6843      	ldr	r3, [r0, #4]
   28daa:	b16b      	cbz	r3, 28dc8 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28dac:	f7ff ffab 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28db0:	4604      	mov	r4, r0
   28db2:	b148      	cbz	r0, 28dc8 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   28db4:	f7ff ffaf 	bl	28d16 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   28db8:	2304      	movs	r3, #4
	param->value.int_val = 0;
   28dba:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   28dbc:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   28dbe:	2300      	movs	r3, #0

	return 0;
   28dc0:	2000      	movs	r0, #0
	param->value.int_val = 0;
   28dc2:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   28dc6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28dc8:	f06f 0015 	mvn.w	r0, #21
   28dcc:	e7fb      	b.n	28dc6 <at_params_empty_put+0x22>

00028dce <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   28dce:	b570      	push	{r4, r5, r6, lr}
   28dd0:	4616      	mov	r6, r2
   28dd2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   28dd4:	b168      	cbz	r0, 28df2 <at_params_int_put+0x24>
   28dd6:	6843      	ldr	r3, [r0, #4]
   28dd8:	b15b      	cbz	r3, 28df2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28dda:	f7ff ff94 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28dde:	4604      	mov	r4, r0
   28de0:	b138      	cbz	r0, 28df2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   28de2:	f7ff ff98 	bl	28d16 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   28de6:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   28de8:	2000      	movs	r0, #0
	param->value.int_val = value;
   28dea:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   28dee:	7023      	strb	r3, [r4, #0]
}
   28df0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28df2:	f06f 0015 	mvn.w	r0, #21
   28df6:	e7fb      	b.n	28df0 <at_params_int_put+0x22>

00028df8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   28df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28dfa:	4617      	mov	r7, r2
   28dfc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   28dfe:	b1c0      	cbz	r0, 28e32 <at_params_string_put+0x3a>
   28e00:	6843      	ldr	r3, [r0, #4]
   28e02:	b1b3      	cbz	r3, 28e32 <at_params_string_put+0x3a>
   28e04:	b1aa      	cbz	r2, 28e32 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28e06:	f7ff ff7e 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28e0a:	4604      	mov	r4, r0
   28e0c:	b188      	cbz	r0, 28e32 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   28e0e:	1c68      	adds	r0, r5, #1
   28e10:	f001 ffde 	bl	2add0 <k_malloc>

	if (param_value == NULL) {
   28e14:	4606      	mov	r6, r0
   28e16:	b178      	cbz	r0, 28e38 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28e18:	462a      	mov	r2, r5
   28e1a:	4639      	mov	r1, r7
   28e1c:	f002 f814 	bl	2ae48 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   28e20:	4620      	mov	r0, r4
   28e22:	f7ff ff78 	bl	28d16 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   28e26:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   28e28:	2000      	movs	r0, #0
	param->size = str_len;
   28e2a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   28e2c:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   28e2e:	60a6      	str	r6, [r4, #8]
}
   28e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   28e32:	f06f 0015 	mvn.w	r0, #21
   28e36:	e7fb      	b.n	28e30 <at_params_string_put+0x38>
		return -ENOMEM;
   28e38:	f06f 000b 	mvn.w	r0, #11
   28e3c:	e7f8      	b.n	28e30 <at_params_string_put+0x38>

00028e3e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   28e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e40:	4617      	mov	r7, r2
   28e42:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   28e44:	b1c0      	cbz	r0, 28e78 <at_params_array_put+0x3a>
   28e46:	6843      	ldr	r3, [r0, #4]
   28e48:	b1b3      	cbz	r3, 28e78 <at_params_array_put+0x3a>
   28e4a:	b1aa      	cbz	r2, 28e78 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28e4c:	f7ff ff5b 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28e50:	4604      	mov	r4, r0
   28e52:	b188      	cbz	r0, 28e78 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   28e54:	4628      	mov	r0, r5
   28e56:	f001 ffbb 	bl	2add0 <k_malloc>

	if (param_value == NULL) {
   28e5a:	4606      	mov	r6, r0
   28e5c:	b178      	cbz	r0, 28e7e <at_params_array_put+0x40>
   28e5e:	462a      	mov	r2, r5
   28e60:	4639      	mov	r1, r7
   28e62:	f001 fff1 	bl	2ae48 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   28e66:	4620      	mov	r0, r4
   28e68:	f7ff ff55 	bl	28d16 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   28e6c:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   28e6e:	2000      	movs	r0, #0
	param->size = array_len;
   28e70:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   28e72:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   28e74:	60a6      	str	r6, [r4, #8]
}
   28e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   28e78:	f06f 0015 	mvn.w	r0, #21
   28e7c:	e7fb      	b.n	28e76 <at_params_array_put+0x38>
		return -ENOMEM;
   28e7e:	f06f 000b 	mvn.w	r0, #11
   28e82:	e7f8      	b.n	28e76 <at_params_array_put+0x38>

00028e84 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   28e84:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   28e86:	b1b0      	cbz	r0, 28eb6 <at_params_short_get+0x32>
   28e88:	6843      	ldr	r3, [r0, #4]
   28e8a:	b1a3      	cbz	r3, 28eb6 <at_params_short_get+0x32>
   28e8c:	b19a      	cbz	r2, 28eb6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28e8e:	f7ff ff3a 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28e92:	b180      	cbz	r0, 28eb6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   28e94:	7803      	ldrb	r3, [r0, #0]
   28e96:	2b01      	cmp	r3, #1
   28e98:	d10d      	bne.n	28eb6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   28e9a:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   28e9e:	f513 4400 	adds.w	r4, r3, #32768	; 0x8000
   28ea2:	f141 0500 	adc.w	r5, r1, #0
   28ea6:	2d00      	cmp	r5, #0
   28ea8:	bf08      	it	eq
   28eaa:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   28eae:	d202      	bcs.n	28eb6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   28eb0:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   28eb2:	8013      	strh	r3, [r2, #0]
}
   28eb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28eb6:	f06f 0015 	mvn.w	r0, #21
   28eba:	e7fb      	b.n	28eb4 <at_params_short_get+0x30>

00028ebc <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   28ebc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   28ebe:	b190      	cbz	r0, 28ee6 <at_params_unsigned_short_get+0x2a>
   28ec0:	6843      	ldr	r3, [r0, #4]
   28ec2:	b183      	cbz	r3, 28ee6 <at_params_unsigned_short_get+0x2a>
   28ec4:	b17a      	cbz	r2, 28ee6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28ec6:	f7ff ff1e 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28eca:	b160      	cbz	r0, 28ee6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   28ecc:	7803      	ldrb	r3, [r0, #0]
   28ece:	2b01      	cmp	r3, #1
   28ed0:	d109      	bne.n	28ee6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   28ed2:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   28ed6:	2900      	cmp	r1, #0
   28ed8:	bf08      	it	eq
   28eda:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   28ede:	d202      	bcs.n	28ee6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   28ee0:	8010      	strh	r0, [r2, #0]
	return 0;
   28ee2:	2000      	movs	r0, #0
}
   28ee4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28ee6:	f06f 0015 	mvn.w	r0, #21
   28eea:	e7fb      	b.n	28ee4 <at_params_unsigned_short_get+0x28>

00028eec <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   28eec:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   28eee:	b1a8      	cbz	r0, 28f1c <at_params_int_get+0x30>
   28ef0:	6843      	ldr	r3, [r0, #4]
   28ef2:	b19b      	cbz	r3, 28f1c <at_params_int_get+0x30>
   28ef4:	b192      	cbz	r2, 28f1c <at_params_int_get+0x30>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28ef6:	f7ff ff06 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28efa:	b178      	cbz	r0, 28f1c <at_params_int_get+0x30>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   28efc:	7803      	ldrb	r3, [r0, #0]
   28efe:	2b01      	cmp	r3, #1
   28f00:	d10c      	bne.n	28f1c <at_params_int_get+0x30>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   28f02:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   28f06:	f113 4400 	adds.w	r4, r3, #2147483648	; 0x80000000
   28f0a:	f141 0500 	adc.w	r5, r1, #0
   28f0e:	2d01      	cmp	r5, #1
   28f10:	bf08      	it	eq
   28f12:	2c00      	cmpeq	r4, #0
   28f14:	d202      	bcs.n	28f1c <at_params_int_get+0x30>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   28f16:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   28f18:	6013      	str	r3, [r2, #0]
}
   28f1a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28f1c:	f06f 0015 	mvn.w	r0, #21
   28f20:	e7fb      	b.n	28f1a <at_params_int_get+0x2e>

00028f22 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   28f22:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   28f24:	b170      	cbz	r0, 28f44 <at_params_int64_get+0x22>
   28f26:	6843      	ldr	r3, [r0, #4]
   28f28:	b163      	cbz	r3, 28f44 <at_params_int64_get+0x22>
   28f2a:	b15a      	cbz	r2, 28f44 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28f2c:	f7ff feeb 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28f30:	b140      	cbz	r0, 28f44 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   28f32:	7803      	ldrb	r3, [r0, #0]
   28f34:	2b01      	cmp	r3, #1
   28f36:	d105      	bne.n	28f44 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   28f38:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   28f3c:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   28f40:	2000      	movs	r0, #0
}
   28f42:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28f44:	f06f 0015 	mvn.w	r0, #21
   28f48:	e7fb      	b.n	28f42 <at_params_int64_get+0x20>

00028f4a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   28f4a:	b570      	push	{r4, r5, r6, lr}
   28f4c:	4615      	mov	r5, r2
   28f4e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   28f50:	b1a8      	cbz	r0, 28f7e <at_params_string_get+0x34>
   28f52:	6843      	ldr	r3, [r0, #4]
   28f54:	b19b      	cbz	r3, 28f7e <at_params_string_get+0x34>
   28f56:	b192      	cbz	r2, 28f7e <at_params_string_get+0x34>
	    value == NULL || len == NULL) {
   28f58:	b18c      	cbz	r4, 28f7e <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28f5a:	f7ff fed4 	bl	28d06 <at_params_get>

	if (param == NULL) {
   28f5e:	b170      	cbz	r0, 28f7e <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   28f60:	7803      	ldrb	r3, [r0, #0]
   28f62:	2b02      	cmp	r3, #2
   28f64:	d10b      	bne.n	28f7e <at_params_string_get+0x34>
		return param->size;
   28f66:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   28f68:	6823      	ldr	r3, [r4, #0]
   28f6a:	42b3      	cmp	r3, r6
   28f6c:	d30a      	bcc.n	28f84 <at_params_string_get+0x3a>
   28f6e:	6881      	ldr	r1, [r0, #8]
   28f70:	4632      	mov	r2, r6
   28f72:	4628      	mov	r0, r5
   28f74:	f001 ff68 	bl	2ae48 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   28f78:	2000      	movs	r0, #0
	*len = param_len;
   28f7a:	6026      	str	r6, [r4, #0]
}
   28f7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28f7e:	f06f 0015 	mvn.w	r0, #21
   28f82:	e7fb      	b.n	28f7c <at_params_string_get+0x32>
		return -ENOMEM;
   28f84:	f06f 000b 	mvn.w	r0, #11
   28f88:	e7f8      	b.n	28f7c <at_params_string_get+0x32>

00028f8a <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   28f8a:	4602      	mov	r2, r0
{
   28f8c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   28f8e:	b170      	cbz	r0, 28fae <at_params_valid_count_get+0x24>
   28f90:	6840      	ldr	r0, [r0, #4]
   28f92:	b160      	cbz	r0, 28fae <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   28f94:	6811      	ldr	r1, [r2, #0]
   28f96:	b141      	cbz	r1, 28faa <at_params_valid_count_get+0x20>
   28f98:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   28f9a:	7803      	ldrb	r3, [r0, #0]
   28f9c:	b12b      	cbz	r3, 28faa <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   28f9e:	4610      	mov	r0, r2
		valid_i += 1;
   28fa0:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   28fa2:	f7ff feb0 	bl	28d06 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   28fa6:	2800      	cmp	r0, #0
   28fa8:	d1f7      	bne.n	28f9a <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   28faa:	4608      	mov	r0, r1
   28fac:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28fae:	f06f 0115 	mvn.w	r1, #21
   28fb2:	e7fa      	b.n	28faa <at_params_valid_count_get+0x20>

00028fb4 <lte_lc_init>:
{
   28fb4:	b508      	push	{r3, lr}
	int err = init_and_config();
   28fb6:	f7f0 fb1f 	bl	195f8 <init_and_config>
	return err ? -EFAULT : 0;
   28fba:	2800      	cmp	r0, #0
}
   28fbc:	bf18      	it	ne
   28fbe:	f06f 000d 	mvnne.w	r0, #13
   28fc2:	bd08      	pop	{r3, pc}

00028fc4 <lte_lc_connect>:
	return connect_lte(true);
   28fc4:	2001      	movs	r0, #1
   28fc6:	f7f0 bbf5 	b.w	197b4 <connect_lte>

00028fca <string_to_int>:
{
   28fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28fcc:	460c      	mov	r4, r1
   28fce:	4605      	mov	r5, r0
   28fd0:	4616      	mov	r6, r2
	errno = 0;
   28fd2:	f7fe f97b 	bl	272cc <__errno>
   28fd6:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   28fd8:	4622      	mov	r2, r4
	errno = 0;
   28fda:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   28fdc:	a901      	add	r1, sp, #4
   28fde:	4628      	mov	r0, r5
   28fe0:	f7fb ff0c 	bl	24dfc <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   28fe4:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   28fe6:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   28fe8:	42ab      	cmp	r3, r5
   28fea:	d103      	bne.n	28ff4 <string_to_int+0x2a>
		return -ENODATA;
   28fec:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   28ff0:	b002      	add	sp, #8
   28ff2:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   28ff4:	781b      	ldrb	r3, [r3, #0]
   28ff6:	2b00      	cmp	r3, #0
   28ff8:	d1f8      	bne.n	28fec <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   28ffa:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   28ffe:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   29000:	3303      	adds	r3, #3
   29002:	d802      	bhi.n	2900a <string_to_int+0x40>
	return 0;
   29004:	2000      	movs	r0, #0
	*output = temp;
   29006:	6034      	str	r4, [r6, #0]
	return 0;
   29008:	e7f2      	b.n	28ff0 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2900a:	f7fe f95f 	bl	272cc <__errno>
   2900e:	6803      	ldr	r3, [r0, #0]
   29010:	2b22      	cmp	r3, #34	; 0x22
   29012:	d1f7      	bne.n	29004 <string_to_int+0x3a>
   29014:	e7ea      	b.n	28fec <string_to_int+0x22>

00029016 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   29016:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   29018:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   2901a:	b087      	sub	sp, #28
   2901c:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2901e:	ab01      	add	r3, sp, #4
   29020:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   29022:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   29024:	f7ff ff91 	bl	28f4a <at_params_string_get>
	if (err) {
   29028:	b968      	cbnz	r0, 29046 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   2902a:	9b01      	ldr	r3, [sp, #4]
   2902c:	aa06      	add	r2, sp, #24
   2902e:	4413      	add	r3, r2
   29030:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   29034:	4622      	mov	r2, r4
   29036:	4629      	mov	r1, r5
   29038:	a802      	add	r0, sp, #8
   2903a:	f7ff ffc6 	bl	28fca <string_to_int>
   2903e:	2800      	cmp	r0, #0
		return -ENODATA;
   29040:	bf18      	it	ne
   29042:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   29046:	b007      	add	sp, #28
   29048:	bd30      	pop	{r4, r5, pc}

0002904a <json_add_num_cs>:
{
   2904a:	ec43 2b10 	vmov	d0, r2, r3
   2904e:	b508      	push	{r3, lr}
	if (!parent || !str) {
   29050:	b138      	cbz	r0, 29062 <json_add_num_cs+0x18>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   29052:	f000 fa8d 	bl	29570 <cJSON_AddNumberToObjectCS>
   29056:	2800      	cmp	r0, #0
   29058:	bf14      	ite	ne
   2905a:	2000      	movne	r0, #0
   2905c:	f06f 000b 	mvneq.w	r0, #11
}
   29060:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29062:	f06f 0015 	mvn.w	r0, #21
   29066:	e7fb      	b.n	29060 <json_add_num_cs+0x16>

00029068 <json_add_obj_cs>:
{
   29068:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   2906a:	b148      	cbz	r0, 29080 <json_add_obj_cs+0x18>
   2906c:	b141      	cbz	r1, 29080 <json_add_obj_cs+0x18>
   2906e:	b13a      	cbz	r2, 29080 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   29070:	f000 fa40 	bl	294f4 <cJSON_AddItemToObjectCS>
   29074:	2800      	cmp	r0, #0
   29076:	bf14      	ite	ne
   29078:	2000      	movne	r0, #0
   2907a:	f06f 000b 	mvneq.w	r0, #11
}
   2907e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   29080:	f06f 0015 	mvn.w	r0, #21
   29084:	e7fb      	b.n	2907e <json_add_obj_cs+0x16>

00029086 <json_add_str_cs>:
{
   29086:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   29088:	b140      	cbz	r0, 2909c <json_add_str_cs+0x16>
   2908a:	b13a      	cbz	r2, 2909c <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   2908c:	f000 fa85 	bl	2959a <cJSON_AddStringToObjectCS>
   29090:	2800      	cmp	r0, #0
   29092:	bf14      	ite	ne
   29094:	2000      	movne	r0, #0
   29096:	f06f 000b 	mvneq.w	r0, #11
}
   2909a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2909c:	f06f 0015 	mvn.w	r0, #21
   290a0:	e7fb      	b.n	2909a <json_add_str_cs+0x14>

000290a2 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   290a2:	b108      	cbz	r0, 290a8 <json_object_decode+0x6>
   290a4:	f000 ba1a 	b.w	294dc <cJSON_GetObjectItem>
}
   290a8:	4770      	bx	lr

000290aa <json_add_null_cs>:
{
   290aa:	b508      	push	{r3, lr}
	if (!parent || !str) {
   290ac:	b138      	cbz	r0, 290be <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   290ae:	f000 fa4a 	bl	29546 <cJSON_AddNullToObjectCS>
   290b2:	2800      	cmp	r0, #0
   290b4:	bf14      	ite	ne
   290b6:	2000      	movne	r0, #0
   290b8:	f06f 000b 	mvneq.w	r0, #11
}
   290bc:	bd08      	pop	{r3, pc}
		return -EINVAL;
   290be:	f06f 0015 	mvn.w	r0, #21
   290c2:	e7fb      	b.n	290bc <json_add_null_cs+0x12>

000290c4 <json_item_string_exists>:
{
   290c4:	b510      	push	{r4, lr}
   290c6:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetObjectItem(obj, key);
   290c8:	f000 fa08 	bl	294dc <cJSON_GetObjectItem>
	if (!item) {
   290cc:	b908      	cbnz	r0, 290d2 <json_item_string_exists+0xe>
		return false;
   290ce:	2000      	movs	r0, #0
}
   290d0:	bd10      	pop	{r4, pc}
	str_val = cJSON_GetStringValue(item);
   290d2:	f000 fa9b 	bl	2960c <cJSON_GetStringValue>
	if (!str_val) {
   290d6:	2800      	cmp	r0, #0
   290d8:	d0f9      	beq.n	290ce <json_item_string_exists+0xa>
	return (strcmp(str_val, val) == 0);
   290da:	4621      	mov	r1, r4
   290dc:	f7e7 ff64 	bl	10fa8 <strcmp>
   290e0:	fab0 f080 	clz	r0, r0
   290e4:	0940      	lsrs	r0, r0, #5
   290e6:	e7f3      	b.n	290d0 <json_item_string_exists+0xc>

000290e8 <json_strdup>:
{
   290e8:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   290ea:	f000 fa8f 	bl	2960c <cJSON_GetStringValue>
	if (!src) {
   290ee:	4605      	mov	r5, r0
   290f0:	b160      	cbz	r0, 2910c <json_strdup+0x24>
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   290f2:	f7e7 ff63 	bl	10fbc <strlen>
   290f6:	2101      	movs	r1, #1
   290f8:	4408      	add	r0, r1
   290fa:	f001 fe6d 	bl	2add8 <k_calloc>
	if (dest) {
   290fe:	4604      	mov	r4, r0
   29100:	b110      	cbz	r0, 29108 <json_strdup+0x20>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   29102:	4629      	mov	r1, r5
   29104:	f001 ffe7 	bl	2b0d6 <strcpy>
}
   29108:	4620      	mov	r0, r4
   2910a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   2910c:	4604      	mov	r4, r0
   2910e:	e7fb      	b.n	29108 <json_strdup+0x20>

00029110 <json_decode_and_alloc>:
{
   29110:	b538      	push	{r3, r4, r5, lr}
   29112:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   29114:	460c      	mov	r4, r1
   29116:	b911      	cbnz	r1, 2911e <json_decode_and_alloc+0xe>
		return -EINVAL;
   29118:	f06f 0015 	mvn.w	r0, #21
}
   2911c:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   2911e:	f000 fa6e 	bl	295fe <cJSON_IsString>
   29122:	2800      	cmp	r0, #0
   29124:	d0f8      	beq.n	29118 <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   29126:	4628      	mov	r0, r5
   29128:	f7ff ffde 	bl	290e8 <json_strdup>
   2912c:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   2912e:	b120      	cbz	r0, 2913a <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   29130:	f7e7 ff44 	bl	10fbc <strlen>
   29134:	6020      	str	r0, [r4, #0]
	return 0;
   29136:	2000      	movs	r0, #0
   29138:	e7f0      	b.n	2911c <json_decode_and_alloc+0xc>
		return -ENOMEM;
   2913a:	f06f 000b 	mvn.w	r0, #11
   2913e:	e7ed      	b.n	2911c <json_decode_and_alloc+0xc>

00029140 <get_string_from_array>:
{
   29140:	b538      	push	{r3, r4, r5, lr}
   29142:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   29144:	f000 f9c4 	bl	294d0 <cJSON_GetArrayItem>
   29148:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2914a:	f000 fa58 	bl	295fe <cJSON_IsString>
   2914e:	b118      	cbz	r0, 29158 <get_string_from_array+0x18>
	return 0;
   29150:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   29152:	692b      	ldr	r3, [r5, #16]
   29154:	6023      	str	r3, [r4, #0]
}
   29156:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   29158:	f06f 0015 	mvn.w	r0, #21
   2915c:	e7fb      	b.n	29156 <get_string_from_array+0x16>

0002915e <nrf_cloud_client_id_get>:
	return nct_client_id_get(id_buf, id_len);
   2915e:	f7f2 bb33 	b.w	1b7c8 <nct_client_id_get>

00029162 <nrf_cloud_configured_client_id_length_get>:
}
   29162:	2013      	movs	r0, #19
   29164:	4770      	bx	lr

00029166 <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   29166:	6843      	ldr	r3, [r0, #4]
   29168:	685b      	ldr	r3, [r3, #4]
   2916a:	b103      	cbz	r3, 2916e <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   2916c:	4718      	bx	r3
	}
}
   2916e:	4770      	bx	lr

00029170 <api_user_data_set>:
}

static int api_user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   29170:	6843      	ldr	r3, [r0, #4]
	return 0;
}
   29172:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   29174:	60d9      	str	r1, [r3, #12]
}
   29176:	4770      	bx	lr

00029178 <atomic_set>:
{
   29178:	4603      	mov	r3, r0
}
   2917a:	e8d3 0fef 	ldaex	r0, [r3]
   2917e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29182:	2a00      	cmp	r2, #0
   29184:	d1f9      	bne.n	2917a <atomic_set+0x2>
   29186:	4770      	bx	lr

00029188 <api_ping>:
	return nct_process();
   29188:	f7f2 bfaa 	b.w	1c0e0 <nct_process>

0002918c <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   2918c:	f7f3 b814 	b.w	1c1b8 <nct_keepalive_time_left>

00029190 <api_id_get>:

static int api_id_get(const struct cloud_backend *const backend,
		      char *id, size_t id_len)
{
   29190:	4608      	mov	r0, r1
	return nrf_cloud_client_id_get(id, id_len);
   29192:	4611      	mov	r1, r2
   29194:	f7ff bfe3 	b.w	2915e <nrf_cloud_client_id_get>

00029198 <api_connect_error_translate>:
	switch (err) {
   29198:	f100 030b 	add.w	r3, r0, #11
   2919c:	2b0b      	cmp	r3, #11
   2919e:	d807      	bhi.n	291b0 <api_connect_error_translate+0x18>
   291a0:	e8df f003 	tbb	[pc, r3]
   291a4:	08080808 	.word	0x08080808
   291a8:	08060808 	.word	0x08060808
   291ac:	08080608 	.word	0x08080608
   291b0:	f7f1 bbe6 	b.w	1a980 <api_connect_error_translate.part.0>
}
   291b4:	4770      	bx	lr

000291b6 <api_input>:
   291b6:	f7f2 bf93 	b.w	1c0e0 <nct_process>

000291ba <api_uninit>:
	return nrf_cloud_uninit();
   291ba:	f7f1 bd4d 	b.w	1ac58 <nrf_cloud_uninit>

000291be <api_connect>:
{
   291be:	b538      	push	{r3, r4, r5, lr}
   291c0:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   291c2:	2000      	movs	r0, #0
   291c4:	f7f1 fdae 	bl	1ad24 <nrf_cloud_connect>
	if (!err) {
   291c8:	4604      	mov	r4, r0
   291ca:	b918      	cbnz	r0, 291d4 <api_connect+0x16>
		backend->config->socket = nct_socket_get();
   291cc:	686d      	ldr	r5, [r5, #4]
   291ce:	f7f2 fff9 	bl	1c1c4 <nct_socket_get>
   291d2:	60a8      	str	r0, [r5, #8]
	return api_connect_error_translate(err);
   291d4:	4620      	mov	r0, r4
}
   291d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return api_connect_error_translate(err);
   291da:	f7ff bfdd 	b.w	29198 <api_connect_error_translate>

000291de <api_disconnect>:
	return nrf_cloud_disconnect();
   291de:	f7f1 bdcf 	b.w	1ad80 <nrf_cloud_disconnect>

000291e2 <cc_disconnection_handler>:
}
   291e2:	2000      	movs	r0, #0
   291e4:	4770      	bx	lr

000291e6 <disconnection_handler>:
{
   291e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   291e8:	2218      	movs	r2, #24
   291ea:	2100      	movs	r1, #0
   291ec:	4668      	mov	r0, sp
   291ee:	f001 fe4b 	bl	2ae88 <memset>
   291f2:	2308      	movs	r3, #8
   291f4:	f88d 3000 	strb.w	r3, [sp]
   291f8:	2301      	movs	r3, #1
   291fa:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   291fc:	f7f1 fcdc 	bl	1abb8 <nfsm_get_disconnect_requested>
   29200:	b108      	cbz	r0, 29206 <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   29202:	2300      	movs	r3, #0
   29204:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   29206:	4669      	mov	r1, sp
   29208:	2001      	movs	r0, #1
   2920a:	f7f1 fc99 	bl	1ab40 <nfsm_set_current_state_and_notify>
}
   2920e:	2000      	movs	r0, #0
   29210:	b007      	add	sp, #28
   29212:	f85d fb04 	ldr.w	pc, [sp], #4

00029216 <dc_connection_handler>:
{
   29216:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   29218:	6801      	ldr	r1, [r0, #0]
   2921a:	b951      	cbnz	r1, 29232 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   2921c:	2218      	movs	r2, #24
   2921e:	4668      	mov	r0, sp
   29220:	f001 fe32 	bl	2ae88 <memset>
   29224:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   29226:	4669      	mov	r1, sp
   29228:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   2922a:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   2922e:	f7f1 fc87 	bl	1ab40 <nfsm_set_current_state_and_notify>
}
   29232:	2000      	movs	r0, #0
   29234:	b007      	add	sp, #28
   29236:	f85d fb04 	ldr.w	pc, [sp], #4

0002923a <cc_tx_ack_in_state_requested_handler>:
{
   2923a:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2923c:	8883      	ldrh	r3, [r0, #4]
   2923e:	2bc8      	cmp	r3, #200	; 0xc8
   29240:	d103      	bne.n	2924a <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   29242:	2100      	movs	r1, #0
   29244:	2005      	movs	r0, #5
   29246:	f7f1 fc7b 	bl	1ab40 <nfsm_set_current_state_and_notify>
}
   2924a:	2000      	movs	r0, #0
   2924c:	bd08      	pop	{r3, pc}

0002924e <dc_disconnection_handler>:
   2924e:	2000      	movs	r0, #0
   29250:	4770      	bx	lr

00029252 <dc_tx_ack_handler>:
   29252:	2000      	movs	r0, #0
   29254:	4770      	bx	lr

00029256 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   29256:	2101      	movs	r1, #1
   29258:	f7f2 ba4a 	b.w	1b6f0 <dc_send>

0002925c <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   2925c:	2100      	movs	r1, #0
   2925e:	f7f2 ba47 	b.w	1b6f0 <dc_send>

00029262 <reset_topic>:
{
   29262:	b510      	push	{r4, lr}
   29264:	4604      	mov	r4, r0
	if (topic->utf8) {
   29266:	6800      	ldr	r0, [r0, #0]
   29268:	b118      	cbz	r0, 29272 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   2926a:	f001 fdaa 	bl	2adc2 <k_free>
		topic->utf8 = NULL;
   2926e:	2300      	movs	r3, #0
   29270:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   29272:	2300      	movs	r3, #0
   29274:	6063      	str	r3, [r4, #4]
}
   29276:	bd10      	pop	{r4, pc}

00029278 <request_send>:
	switch (dl->proto) {
   29278:	f8d0 3828 	ldr.w	r3, [r0, #2088]	; 0x828
   2927c:	2b06      	cmp	r3, #6
   2927e:	d002      	beq.n	29286 <request_send+0xe>
   29280:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   29284:	d101      	bne.n	2928a <request_send+0x12>
		return http_get_request_send(dl);
   29286:	f7f4 ba85 	b.w	1d794 <http_get_request_send>
}
   2928a:	2000      	movs	r0, #0
   2928c:	4770      	bx	lr

0002928e <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   2928e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   29290:	2300      	movs	r3, #0
   29292:	9301      	str	r3, [sp, #4]
   29294:	9303      	str	r3, [sp, #12]
   29296:	2301      	movs	r3, #1
static int error_evt_send(const struct download_client *dl, int error)
   29298:	4602      	mov	r2, r0
		.error = -error
   2929a:	4249      	negs	r1, r1
	return dl->callback(&evt);
   2929c:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2929e:	f88d 3004 	strb.w	r3, [sp, #4]
   292a2:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   292a4:	4790      	blx	r2
}
   292a6:	b005      	add	sp, #20
   292a8:	f85d fb04 	ldr.w	pc, [sp], #4

000292ac <socket_send>:
{
   292ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   292b0:	2500      	movs	r5, #0
{
   292b2:	4606      	mov	r6, r0
   292b4:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   292b6:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   292b8:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   292bc:	b90c      	cbnz	r4, 292c2 <socket_send+0x16>
	return 0;
   292be:	4620      	mov	r0, r4
   292c0:	e00e      	b.n	292e0 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   292c2:	6830      	ldr	r0, [r6, #0]
   292c4:	2300      	movs	r3, #0
   292c6:	4622      	mov	r2, r4
   292c8:	e9cd 7700 	strd	r7, r7, [sp]
   292cc:	eb08 0105 	add.w	r1, r8, r5
   292d0:	f7fd fd3d 	bl	26d4e <z_impl_zsock_sendto>
		if (sent < 0) {
   292d4:	1e03      	subs	r3, r0, #0
   292d6:	da06      	bge.n	292e6 <socket_send+0x3a>
			return -errno;
   292d8:	f7fd fff8 	bl	272cc <__errno>
   292dc:	6800      	ldr	r0, [r0, #0]
   292de:	4240      	negs	r0, r0
}
   292e0:	b002      	add	sp, #8
   292e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   292e6:	441d      	add	r5, r3
		len -= sent;
   292e8:	1ae4      	subs	r4, r4, r3
   292ea:	e7e7      	b.n	292bc <socket_send+0x10>

000292ec <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   292ec:	b128      	cbz	r0, 292fa <download_client_file_size_get+0xe>
   292ee:	b121      	cbz	r1, 292fa <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   292f0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   292f4:	2000      	movs	r0, #0
	*size = client->file_size;
   292f6:	600b      	str	r3, [r1, #0]
	return 0;
   292f8:	4770      	bx	lr
		return -EINVAL;
   292fa:	f06f 0015 	mvn.w	r0, #21
}
   292fe:	4770      	bx	lr

00029300 <swallow>:
{
   29300:	b570      	push	{r4, r5, r6, lr}
   29302:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   29304:	6800      	ldr	r0, [r0, #0]
{
   29306:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   29308:	f001 ff33 	bl	2b172 <strstr>
	if (!p) {
   2930c:	4604      	mov	r4, r0
   2930e:	b130      	cbz	r0, 2931e <swallow+0x1e>
	*str = p + strlen(swallow);
   29310:	4630      	mov	r0, r6
   29312:	f7e7 fe53 	bl	10fbc <strlen>
   29316:	4404      	add	r4, r0
	return 0;
   29318:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   2931a:	602c      	str	r4, [r5, #0]
}
   2931c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   2931e:	2001      	movs	r0, #1
   29320:	e7fc      	b.n	2931c <swallow+0x1c>

00029322 <dfu_target_callback_handler>:
	switch (evt) {
   29322:	b120      	cbz	r0, 2932e <dfu_target_callback_handler+0xc>
   29324:	2801      	cmp	r0, #1
   29326:	d005      	beq.n	29334 <dfu_target_callback_handler+0x12>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   29328:	2001      	movs	r0, #1
   2932a:	f7f4 bb8b 	b.w	1da44 <send_error_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   2932e:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   29330:	f7f4 bb78 	b.w	1da24 <send_evt>
   29334:	2003      	movs	r0, #3
   29336:	e7fb      	b.n	29330 <dfu_target_callback_handler+0xe>

00029338 <parse_hex4>:
    for (i = 0; i < 4; i++)
   29338:	2200      	movs	r2, #0
{
   2933a:	b510      	push	{r4, lr}
   2933c:	4604      	mov	r4, r0
    unsigned int h = 0;
   2933e:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   29340:	5ca1      	ldrb	r1, [r4, r2]
   29342:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   29346:	2b09      	cmp	r3, #9
   29348:	d80b      	bhi.n	29362 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   2934a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   2934e:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   29350:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   29354:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   29358:	bf18      	it	ne
   2935a:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   2935c:	2a04      	cmp	r2, #4
   2935e:	d1ef      	bne.n	29340 <parse_hex4+0x8>
}
   29360:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   29362:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   29366:	2b05      	cmp	r3, #5
   29368:	d802      	bhi.n	29370 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   2936a:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   2936e:	e7ee      	b.n	2934e <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   29370:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   29374:	2b05      	cmp	r3, #5
   29376:	d802      	bhi.n	2937e <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   29378:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   2937c:	e7e7      	b.n	2934e <parse_hex4+0x16>
            return 0;
   2937e:	2000      	movs	r0, #0
   29380:	e7ee      	b.n	29360 <parse_hex4+0x28>

00029382 <buffer_skip_whitespace>:
{
   29382:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   29384:	b128      	cbz	r0, 29392 <buffer_skip_whitespace+0x10>
   29386:	6801      	ldr	r1, [r0, #0]
   29388:	b189      	cbz	r1, 293ae <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   2938a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   2938e:	429a      	cmp	r2, r3
   29390:	d302      	bcc.n	29398 <buffer_skip_whitespace+0x16>
}
   29392:	bd10      	pop	{r4, pc}
       buffer->offset++;
   29394:	3201      	adds	r2, #1
   29396:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   29398:	6882      	ldr	r2, [r0, #8]
   2939a:	4293      	cmp	r3, r2
   2939c:	d903      	bls.n	293a6 <buffer_skip_whitespace+0x24>
   2939e:	5c8c      	ldrb	r4, [r1, r2]
   293a0:	2c20      	cmp	r4, #32
   293a2:	d9f7      	bls.n	29394 <buffer_skip_whitespace+0x12>
   293a4:	e7f5      	b.n	29392 <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   293a6:	d1f4      	bne.n	29392 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   293a8:	3b01      	subs	r3, #1
   293aa:	6083      	str	r3, [r0, #8]
   293ac:	e7f1      	b.n	29392 <buffer_skip_whitespace+0x10>
        return NULL;
   293ae:	4608      	mov	r0, r1
   293b0:	e7ef      	b.n	29392 <buffer_skip_whitespace+0x10>

000293b2 <get_array_item>:
    if (array == NULL)
   293b2:	b110      	cbz	r0, 293ba <get_array_item+0x8>
    current_child = array->child;
   293b4:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   293b6:	b100      	cbz	r0, 293ba <get_array_item+0x8>
   293b8:	b901      	cbnz	r1, 293bc <get_array_item+0xa>
}
   293ba:	4770      	bx	lr
        current_child = current_child->next;
   293bc:	6800      	ldr	r0, [r0, #0]
        index--;
   293be:	3901      	subs	r1, #1
        current_child = current_child->next;
   293c0:	e7f9      	b.n	293b6 <get_array_item+0x4>

000293c2 <update_offset>:
{
   293c2:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   293c4:	4604      	mov	r4, r0
   293c6:	b140      	cbz	r0, 293da <update_offset+0x18>
   293c8:	6803      	ldr	r3, [r0, #0]
   293ca:	b133      	cbz	r3, 293da <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   293cc:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   293ce:	4418      	add	r0, r3
   293d0:	f7e7 fdf4 	bl	10fbc <strlen>
   293d4:	68a3      	ldr	r3, [r4, #8]
   293d6:	4418      	add	r0, r3
   293d8:	60a0      	str	r0, [r4, #8]
}
   293da:	bd10      	pop	{r4, pc}

000293dc <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   293dc:	b181      	cbz	r1, 29400 <add_item_to_array+0x24>
   293de:	b138      	cbz	r0, 293f0 <add_item_to_array+0x14>
   293e0:	4281      	cmp	r1, r0
   293e2:	d00d      	beq.n	29400 <add_item_to_array+0x24>
    child = array->child;
   293e4:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   293e6:	b923      	cbnz	r3, 293f2 <add_item_to_array+0x16>
        array->child = item;
   293e8:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   293ea:	e9c1 3100 	strd	r3, r1, [r1]
   293ee:	2001      	movs	r0, #1
}
   293f0:	4770      	bx	lr
        if (child->prev)
   293f2:	685a      	ldr	r2, [r3, #4]
   293f4:	2a00      	cmp	r2, #0
   293f6:	d0fa      	beq.n	293ee <add_item_to_array+0x12>
    prev->next = item;
   293f8:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   293fa:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   293fc:	6059      	str	r1, [r3, #4]
   293fe:	e7f6      	b.n	293ee <add_item_to_array+0x12>
        return false;
   29400:	2000      	movs	r0, #0
   29402:	4770      	bx	lr

00029404 <ensure>:
{
   29404:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   29406:	4604      	mov	r4, r0
   29408:	b1b8      	cbz	r0, 2943a <ensure+0x36>
   2940a:	6805      	ldr	r5, [r0, #0]
   2940c:	b165      	cbz	r5, 29428 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2940e:	6842      	ldr	r2, [r0, #4]
   29410:	b112      	cbz	r2, 29418 <ensure+0x14>
   29412:	6883      	ldr	r3, [r0, #8]
   29414:	429a      	cmp	r2, r3
   29416:	d910      	bls.n	2943a <ensure+0x36>
    if (needed > INT_MAX)
   29418:	2900      	cmp	r1, #0
   2941a:	db0e      	blt.n	2943a <ensure+0x36>
    needed += p->offset + 1;
   2941c:	68a0      	ldr	r0, [r4, #8]
   2941e:	4401      	add	r1, r0
   29420:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   29422:	429a      	cmp	r2, r3
   29424:	d302      	bcc.n	2942c <ensure+0x28>
        return p->buffer + p->offset;
   29426:	4405      	add	r5, r0
}
   29428:	4628      	mov	r0, r5
   2942a:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2942c:	6922      	ldr	r2, [r4, #16]
   2942e:	b922      	cbnz	r2, 2943a <ensure+0x36>
    if (needed > (INT_MAX / 2))
   29430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   29434:	d303      	bcc.n	2943e <ensure+0x3a>
        if (needed <= INT_MAX)
   29436:	2b00      	cmp	r3, #0
   29438:	da0f      	bge.n	2945a <ensure+0x56>
        return NULL;
   2943a:	2500      	movs	r5, #0
   2943c:	e7f4      	b.n	29428 <ensure+0x24>
        newsize = needed + 1;
   2943e:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   29440:	6a23      	ldr	r3, [r4, #32]
   29442:	b16b      	cbz	r3, 29460 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   29444:	4628      	mov	r0, r5
   29446:	4631      	mov	r1, r6
   29448:	4798      	blx	r3
        if (newbuffer == NULL)
   2944a:	4605      	mov	r5, r0
   2944c:	b9b0      	cbnz	r0, 2947c <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2944e:	69e3      	ldr	r3, [r4, #28]
   29450:	6820      	ldr	r0, [r4, #0]
   29452:	4798      	blx	r3
            p->buffer = NULL;
   29454:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   29458:	e7e6      	b.n	29428 <ensure+0x24>
            newsize = INT_MAX;
   2945a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2945e:	e7ef      	b.n	29440 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   29460:	4630      	mov	r0, r6
   29462:	69a3      	ldr	r3, [r4, #24]
   29464:	4798      	blx	r3
        if (!newbuffer)
   29466:	4605      	mov	r5, r0
   29468:	2800      	cmp	r0, #0
   2946a:	d0f0      	beq.n	2944e <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2946c:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2946e:	6821      	ldr	r1, [r4, #0]
   29470:	3201      	adds	r2, #1
   29472:	f001 fce9 	bl	2ae48 <memcpy>
        p->hooks.deallocate(p->buffer);
   29476:	69e3      	ldr	r3, [r4, #28]
   29478:	6820      	ldr	r0, [r4, #0]
   2947a:	4798      	blx	r3
    return newbuffer + p->offset;
   2947c:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2947e:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   29482:	441d      	add	r5, r3
   29484:	e7d0      	b.n	29428 <ensure+0x24>

00029486 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   29486:	4603      	mov	r3, r0
   29488:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2948a:	2028      	movs	r0, #40	; 0x28
   2948c:	4798      	blx	r3
    if (node)
   2948e:	4604      	mov	r4, r0
   29490:	b118      	cbz	r0, 2949a <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   29492:	2228      	movs	r2, #40	; 0x28
   29494:	2100      	movs	r1, #0
   29496:	f001 fcf7 	bl	2ae88 <memset>
}
   2949a:	4620      	mov	r0, r4
   2949c:	bd10      	pop	{r4, pc}

0002949e <cJSON_ParseWithOpts>:
{
   2949e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   294a0:	460d      	mov	r5, r1
    if (NULL == value)
   294a2:	4604      	mov	r4, r0
{
   294a4:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   294a6:	b150      	cbz	r0, 294be <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   294a8:	f7e7 fd88 	bl	10fbc <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   294ac:	462a      	mov	r2, r5
   294ae:	1c41      	adds	r1, r0, #1
   294b0:	4620      	mov	r0, r4
   294b2:	9b01      	ldr	r3, [sp, #4]
}
   294b4:	b003      	add	sp, #12
   294b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   294ba:	f7f5 bbf7 	b.w	1ecac <cJSON_ParseWithLengthOpts>
}
   294be:	b003      	add	sp, #12
   294c0:	bd30      	pop	{r4, r5, pc}

000294c2 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   294c2:	2200      	movs	r2, #0
   294c4:	4611      	mov	r1, r2
   294c6:	f7ff bfea 	b.w	2949e <cJSON_ParseWithOpts>

000294ca <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   294ca:	2100      	movs	r1, #0
   294cc:	f7f5 bb18 	b.w	1eb00 <print.constprop.0>

000294d0 <cJSON_GetArrayItem>:
    if (index < 0)
   294d0:	2900      	cmp	r1, #0
   294d2:	db01      	blt.n	294d8 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   294d4:	f7ff bf6d 	b.w	293b2 <get_array_item>
}
   294d8:	2000      	movs	r0, #0
   294da:	4770      	bx	lr

000294dc <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   294dc:	2200      	movs	r2, #0
   294de:	f7f5 b859 	b.w	1e594 <get_object_item>

000294e2 <cJSON_HasObjectItem>:
{
   294e2:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   294e4:	f7ff fffa 	bl	294dc <cJSON_GetObjectItem>
}
   294e8:	3800      	subs	r0, #0
   294ea:	bf18      	it	ne
   294ec:	2001      	movne	r0, #1
   294ee:	bd08      	pop	{r3, pc}

000294f0 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   294f0:	f7ff bf74 	b.w	293dc <add_item_to_array>

000294f4 <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   294f4:	2301      	movs	r3, #1
   294f6:	f7f5 bb67 	b.w	1ebc8 <add_item_to_object.constprop.0>

000294fa <cJSON_DetachItemViaPointer>:
{
   294fa:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   294fc:	b190      	cbz	r0, 29524 <cJSON_DetachItemViaPointer+0x2a>
   294fe:	b179      	cbz	r1, 29520 <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   29500:	6883      	ldr	r3, [r0, #8]
   29502:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   29504:	bf1c      	itt	ne
   29506:	e9d1 4200 	ldrdne	r4, r2, [r1]
   2950a:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   2950c:	680a      	ldr	r2, [r1, #0]
   2950e:	b15a      	cbz	r2, 29528 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   29510:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   29512:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   29514:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   29516:	d100      	bne.n	2951a <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   29518:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   2951a:	2300      	movs	r3, #0
    item->next = NULL;
   2951c:	e9c1 3300 	strd	r3, r3, [r1]
}
   29520:	4608      	mov	r0, r1
   29522:	bd10      	pop	{r4, pc}
        return NULL;
   29524:	4601      	mov	r1, r0
   29526:	e7fb      	b.n	29520 <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   29528:	428b      	cmp	r3, r1
   2952a:	d0f5      	beq.n	29518 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   2952c:	684a      	ldr	r2, [r1, #4]
   2952e:	605a      	str	r2, [r3, #4]
   29530:	e7f3      	b.n	2951a <cJSON_DetachItemViaPointer+0x20>

00029532 <cJSON_DetachItemFromObject>:
{
   29532:	b510      	push	{r4, lr}
   29534:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   29536:	f7ff ffd1 	bl	294dc <cJSON_GetObjectItem>
   2953a:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   2953c:	4620      	mov	r0, r4
}
   2953e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   29542:	f7ff bfda 	b.w	294fa <cJSON_DetachItemViaPointer>

00029546 <cJSON_AddNullToObjectCS>:
{
   29546:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29548:	4605      	mov	r5, r0
   2954a:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   2954c:	f7f5 fc1c 	bl	1ed88 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   29550:	2301      	movs	r3, #1
   29552:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   29554:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   29556:	9901      	ldr	r1, [sp, #4]
   29558:	4628      	mov	r0, r5
   2955a:	f7f5 fb35 	bl	1ebc8 <add_item_to_object.constprop.0>
   2955e:	4605      	mov	r5, r0
   29560:	b918      	cbnz	r0, 2956a <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   29562:	4620      	mov	r0, r4
   29564:	f7f5 fb7e 	bl	1ec64 <cJSON_Delete>
    return NULL;
   29568:	462c      	mov	r4, r5
}
   2956a:	4620      	mov	r0, r4
   2956c:	b003      	add	sp, #12
   2956e:	bd30      	pop	{r4, r5, pc}

00029570 <cJSON_AddNumberToObjectCS>:
{
   29570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29572:	4605      	mov	r5, r0
   29574:	9101      	str	r1, [sp, #4]
    cJSON *number_item = cJSON_CreateNumber(number);
   29576:	f7e7 ffc3 	bl	11500 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   2957a:	2301      	movs	r3, #1
   2957c:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   2957e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   29580:	9901      	ldr	r1, [sp, #4]
   29582:	4628      	mov	r0, r5
   29584:	f7f5 fb20 	bl	1ebc8 <add_item_to_object.constprop.0>
   29588:	4605      	mov	r5, r0
   2958a:	b918      	cbnz	r0, 29594 <cJSON_AddNumberToObjectCS+0x24>
    cJSON_Delete(number_item);
   2958c:	4620      	mov	r0, r4
   2958e:	f7f5 fb69 	bl	1ec64 <cJSON_Delete>
    return NULL;
   29592:	462c      	mov	r4, r5
}
   29594:	4620      	mov	r0, r4
   29596:	b003      	add	sp, #12
   29598:	bd30      	pop	{r4, r5, pc}

0002959a <cJSON_AddStringToObjectCS>:
{
   2959a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2959c:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2959e:	4610      	mov	r0, r2
{
   295a0:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   295a2:	f7f5 fbfd 	bl	1eda0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   295a6:	2301      	movs	r3, #1
   295a8:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   295aa:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   295ac:	9901      	ldr	r1, [sp, #4]
   295ae:	4628      	mov	r0, r5
   295b0:	f7f5 fb0a 	bl	1ebc8 <add_item_to_object.constprop.0>
   295b4:	4605      	mov	r5, r0
   295b6:	b918      	cbnz	r0, 295c0 <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   295b8:	4620      	mov	r0, r4
   295ba:	f7f5 fb53 	bl	1ec64 <cJSON_Delete>
    return NULL;
   295be:	462c      	mov	r4, r5
}
   295c0:	4620      	mov	r0, r4
   295c2:	b003      	add	sp, #12
   295c4:	bd30      	pop	{r4, r5, pc}

000295c6 <cJSON_AddObjectToObjectCS>:
{
   295c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   295c8:	4605      	mov	r5, r0
   295ca:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   295cc:	f7f5 fc0c 	bl	1ede8 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   295d0:	2301      	movs	r3, #1
   295d2:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   295d4:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   295d6:	9901      	ldr	r1, [sp, #4]
   295d8:	4628      	mov	r0, r5
   295da:	f7f5 faf5 	bl	1ebc8 <add_item_to_object.constprop.0>
   295de:	4605      	mov	r5, r0
   295e0:	b918      	cbnz	r0, 295ea <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   295e2:	4620      	mov	r0, r4
   295e4:	f7f5 fb3e 	bl	1ec64 <cJSON_Delete>
    return NULL;
   295e8:	462c      	mov	r4, r5
}
   295ea:	4620      	mov	r0, r4
   295ec:	b003      	add	sp, #12
   295ee:	bd30      	pop	{r4, r5, pc}

000295f0 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   295f0:	b120      	cbz	r0, 295fc <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   295f2:	7b00      	ldrb	r0, [r0, #12]
   295f4:	f1a0 0308 	sub.w	r3, r0, #8
   295f8:	4258      	negs	r0, r3
   295fa:	4158      	adcs	r0, r3
}
   295fc:	4770      	bx	lr

000295fe <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   295fe:	b120      	cbz	r0, 2960a <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   29600:	7b00      	ldrb	r0, [r0, #12]
   29602:	f1a0 0310 	sub.w	r3, r0, #16
   29606:	4258      	negs	r0, r3
   29608:	4158      	adcs	r0, r3
}
   2960a:	4770      	bx	lr

0002960c <cJSON_GetStringValue>:
{
   2960c:	b508      	push	{r3, lr}
   2960e:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   29610:	f7ff fff5 	bl	295fe <cJSON_IsString>
   29614:	b100      	cbz	r0, 29618 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   29616:	6910      	ldr	r0, [r2, #16]
}
   29618:	bd08      	pop	{r3, pc}

0002961a <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   2961a:	b120      	cbz	r0, 29626 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   2961c:	7b00      	ldrb	r0, [r0, #12]
   2961e:	f1a0 0320 	sub.w	r3, r0, #32
   29622:	4258      	negs	r0, r3
   29624:	4158      	adcs	r0, r3
}
   29626:	4770      	bx	lr

00029628 <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   29628:	f001 bbcb 	b.w	2adc2 <k_free>

0002962c <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   2962c:	f001 bbd0 	b.w	2add0 <k_malloc>

00029630 <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   29630:	f001 bbc7 	b.w	2adc2 <k_free>

00029634 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29634:	4700      	bx	r0

00029636 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29636:	f001 ba3f 	b.w	2aab8 <z_impl_k_busy_wait>

0002963a <nrfx_clock_enable>:
{
   2963a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2963c:	2005      	movs	r0, #5
   2963e:	f7ec fa3f 	bl	15ac0 <arch_irq_is_enabled>
   29642:	b920      	cbnz	r0, 2964e <nrfx_clock_enable+0x14>
}
   29644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   29648:	2005      	movs	r0, #5
   2964a:	f7ec ba29 	b.w	15aa0 <arch_irq_enable>
   2964e:	bd08      	pop	{r3, pc}

00029650 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   29654:	4770      	bx	lr

00029656 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29656:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2965a:	4770      	bx	lr

0002965c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2965c:	f44f 7080 	mov.w	r0, #256	; 0x100
   29660:	4770      	bx	lr

00029662 <rpc_handle_ctrl_message>:
   29662:	2902      	cmp	r1, #2
   29664:	b510      	push	{r4, lr}
   29666:	4604      	mov	r4, r0
   29668:	d005      	beq.n	29676 <rpc_handle_ctrl_message+0x14>
   2966a:	2904      	cmp	r1, #4
   2966c:	d001      	beq.n	29672 <rpc_handle_ctrl_message+0x10>
   2966e:	2901      	cmp	r1, #1
   29670:	d107      	bne.n	29682 <rpc_handle_ctrl_message+0x20>
   29672:	2000      	movs	r0, #0
   29674:	bd10      	pop	{r4, pc}
   29676:	6880      	ldr	r0, [r0, #8]
   29678:	2800      	cmp	r0, #0
   2967a:	d0fa      	beq.n	29672 <rpc_handle_ctrl_message+0x10>
   2967c:	f000 f833 	bl	296e6 <rpc_transport_local_data_free>
   29680:	e7f7      	b.n	29672 <rpc_handle_ctrl_message+0x10>
   29682:	6880      	ldr	r0, [r0, #8]
   29684:	b108      	cbz	r0, 2968a <rpc_handle_ctrl_message+0x28>
   29686:	f000 f82e 	bl	296e6 <rpc_transport_local_data_free>
   2968a:	4620      	mov	r0, r4
   2968c:	f000 f827 	bl	296de <rpc_transport_msg_free>
   29690:	e7ef      	b.n	29672 <rpc_handle_ctrl_message+0x10>

00029692 <rpc_message_send>:
   29692:	6843      	ldr	r3, [r0, #4]
   29694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29698:	f043 0302 	orr.w	r3, r3, #2
   2969c:	6043      	str	r3, [r0, #4]
   2969e:	f000 b826 	b.w	296ee <rpc_transport_data_msg_send>

000296a2 <rpc_message_alloc>:
   296a2:	b570      	push	{r4, r5, r6, lr}
   296a4:	4606      	mov	r6, r0
   296a6:	b130      	cbz	r0, 296b6 <rpc_message_alloc+0x14>
   296a8:	f000 f81b 	bl	296e2 <rpc_transport_data_alloc>
   296ac:	4605      	mov	r5, r0
   296ae:	b918      	cbnz	r0, 296b8 <rpc_message_alloc+0x16>
   296b0:	2400      	movs	r4, #0
   296b2:	4620      	mov	r0, r4
   296b4:	bd70      	pop	{r4, r5, r6, pc}
   296b6:	4605      	mov	r5, r0
   296b8:	f000 f80f 	bl	296da <rpc_transport_data_msg_alloc>
   296bc:	4604      	mov	r4, r0
   296be:	b110      	cbz	r0, 296c6 <rpc_message_alloc+0x24>
   296c0:	60c6      	str	r6, [r0, #12]
   296c2:	6085      	str	r5, [r0, #8]
   296c4:	e7f5      	b.n	296b2 <rpc_message_alloc+0x10>
   296c6:	2d00      	cmp	r5, #0
   296c8:	d0f2      	beq.n	296b0 <rpc_message_alloc+0xe>
   296ca:	4628      	mov	r0, r5
   296cc:	f000 f80b 	bl	296e6 <rpc_transport_local_data_free>
   296d0:	e7ef      	b.n	296b2 <rpc_message_alloc+0x10>

000296d2 <rpc_message_free>:
   296d2:	f000 b804 	b.w	296de <rpc_transport_msg_free>

000296d6 <rpc_message_data_free>:
   296d6:	f000 b808 	b.w	296ea <rpc_transport_peer_data_free>

000296da <rpc_transport_data_msg_alloc>:
   296da:	f7f6 bb0f 	b.w	1fcfc <rpc_transport_ipc_data_msg_alloc>

000296de <rpc_transport_msg_free>:
   296de:	f7f6 bb59 	b.w	1fd94 <rpc_transport_ipc_msg_free>

000296e2 <rpc_transport_data_alloc>:
   296e2:	f7f6 bb3d 	b.w	1fd60 <rpc_transport_ipc_data_alloc>

000296e6 <rpc_transport_local_data_free>:
   296e6:	f000 b808 	b.w	296fa <rpc_transport_ipc_local_data_free>

000296ea <rpc_transport_peer_data_free>:
   296ea:	f000 b80d 	b.w	29708 <rpc_transport_ipc_peer_data_free>

000296ee <rpc_transport_data_msg_send>:
   296ee:	f7f6 bac9 	b.w	1fc84 <rpc_transport_ipc_data_msg_send>

000296f2 <rpc_transport_rx_data_suspend>:
   296f2:	f000 b81b 	b.w	2972c <rpc_transport_ipc_rx_data_suspend>

000296f6 <rpc_transport_rx_data_resume>:
   296f6:	f000 b81c 	b.w	29732 <rpc_transport_ipc_rx_data_resume>

000296fa <rpc_transport_ipc_local_data_free>:
   296fa:	b508      	push	{r3, lr}
   296fc:	f7ee fb2c 	bl	17d58 <nrf_modem_os_shm_tx_free>
   29700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29704:	f7ee baf2 	b.w	17cec <nrf_modem_os_application_irq_set>

00029708 <rpc_transport_ipc_peer_data_free>:
   29708:	b510      	push	{r4, lr}
   2970a:	4604      	mov	r4, r0
   2970c:	f7f6 fb08 	bl	1fd20 <rpc_transport_ipc_ctrl_msg_alloc>
   29710:	2101      	movs	r1, #1
   29712:	2200      	movs	r2, #0
   29714:	7001      	strb	r1, [r0, #0]
   29716:	2102      	movs	r1, #2
   29718:	6084      	str	r4, [r0, #8]
   2971a:	7042      	strb	r2, [r0, #1]
   2971c:	7081      	strb	r1, [r0, #2]
   2971e:	70c2      	strb	r2, [r0, #3]
   29720:	f7f6 face 	bl	1fcc0 <rpc_transport_ipc_ctrl_msg_send>
   29724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29728:	f7ee bae0 	b.w	17cec <nrf_modem_os_application_irq_set>

0002972c <rpc_transport_ipc_rx_data_suspend>:
   2972c:	2004      	movs	r0, #4
   2972e:	f7f6 b82b 	b.w	1f788 <nrfx_ipc_receive_event_disable>

00029732 <rpc_transport_ipc_rx_data_resume>:
   29732:	2004      	movs	r0, #4
   29734:	f7f6 b81e 	b.w	1f774 <nrfx_ipc_receive_event_enable>

00029738 <rpc_client_request_alloc>:
   29738:	b508      	push	{r3, lr}
   2973a:	f7ff ffb2 	bl	296a2 <rpc_message_alloc>
   2973e:	b100      	cbz	r0, 29742 <rpc_client_request_alloc+0xa>
   29740:	3008      	adds	r0, #8
   29742:	bd08      	pop	{r3, pc}

00029744 <rpc_client_request_send>:
   29744:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   29748:	4610      	mov	r0, r2
   2974a:	f840 1d08 	str.w	r1, [r0, #-8]!
   2974e:	f7ff bfa0 	b.w	29692 <rpc_message_send>

00029752 <rpc_client_message_free>:
   29752:	3808      	subs	r0, #8
   29754:	f7ff bfbd 	b.w	296d2 <rpc_message_free>

00029758 <rpc_client_data_free>:
   29758:	f7ff bfbd 	b.w	296d6 <rpc_message_data_free>

0002975c <packet_handler_alloc_and_init>:
   2975c:	b538      	push	{r3, r4, r5, lr}
   2975e:	4604      	mov	r4, r0
   29760:	4608      	mov	r0, r1
   29762:	4611      	mov	r1, r2
   29764:	4622      	mov	r2, r4
   29766:	f7f9 fa4b 	bl	22c00 <packet_handler_create>
   2976a:	61e0      	str	r0, [r4, #28]
   2976c:	b158      	cbz	r0, 29786 <packet_handler_alloc_and_init+0x2a>
   2976e:	6803      	ldr	r3, [r0, #0]
   29770:	681b      	ldr	r3, [r3, #0]
   29772:	4798      	blx	r3
   29774:	4605      	mov	r5, r0
   29776:	b120      	cbz	r0, 29782 <packet_handler_alloc_and_init+0x26>
   29778:	69e0      	ldr	r0, [r4, #28]
   2977a:	f000 fce3 	bl	2a144 <packet_handler_delete>
   2977e:	2300      	movs	r3, #0
   29780:	61e3      	str	r3, [r4, #28]
   29782:	4628      	mov	r0, r5
   29784:	bd38      	pop	{r3, r4, r5, pc}
   29786:	250c      	movs	r5, #12
   29788:	e7fb      	b.n	29782 <packet_handler_alloc_and_init+0x26>

0002978a <socket_free>:
   2978a:	b510      	push	{r4, lr}
   2978c:	4604      	mov	r4, r0
   2978e:	69c0      	ldr	r0, [r0, #28]
   29790:	b108      	cbz	r0, 29796 <socket_free+0xc>
   29792:	f000 fcd7 	bl	2a144 <packet_handler_delete>
   29796:	4620      	mov	r0, r4
   29798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2979c:	222c      	movs	r2, #44	; 0x2c
   2979e:	2100      	movs	r1, #0
   297a0:	f001 bb72 	b.w	2ae88 <memset>

000297a4 <interface_socket_event_get>:
   297a4:	b510      	push	{r4, lr}
   297a6:	4604      	mov	r4, r0
   297a8:	b189      	cbz	r1, 297ce <interface_socket_event_get+0x2a>
   297aa:	f7f6 fd3f 	bl	2022c <interface_socket_from_handle_get>
   297ae:	b158      	cbz	r0, 297c8 <interface_socket_event_get+0x24>
   297b0:	6803      	ldr	r3, [r0, #0]
   297b2:	0c1b      	lsrs	r3, r3, #16
   297b4:	f003 020a 	and.w	r2, r3, #10
   297b8:	2a0a      	cmp	r2, #10
   297ba:	bf14      	ite	ne
   297bc:	f003 030f 	andne.w	r3, r3, #15
   297c0:	f003 030d 	andeq.w	r3, r3, #13
   297c4:	600b      	str	r3, [r1, #0]
   297c6:	e002      	b.n	297ce <interface_socket_event_get+0x2a>
   297c8:	2c00      	cmp	r4, #0
   297ca:	da01      	bge.n	297d0 <interface_socket_event_get+0x2c>
   297cc:	6008      	str	r0, [r1, #0]
   297ce:	bd10      	pop	{r4, pc}
   297d0:	2310      	movs	r3, #16
   297d2:	e7f7      	b.n	297c4 <interface_socket_event_get+0x20>

000297d4 <ip_recvd_packet_free_cb>:
   297d4:	b510      	push	{r4, lr}
   297d6:	4604      	mov	r4, r0
   297d8:	6800      	ldr	r0, [r0, #0]
   297da:	f7ff ffbd 	bl	29758 <rpc_client_data_free>
   297de:	68a0      	ldr	r0, [r4, #8]
   297e0:	b118      	cbz	r0, 297ea <ip_recvd_packet_free_cb+0x16>
   297e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   297e6:	f7ee baa9 	b.w	17d3c <nrf_modem_os_free>
   297ea:	bd10      	pop	{r4, pc}

000297ec <protocol_verify>:
   297ec:	b508      	push	{r3, lr}
   297ee:	4603      	mov	r3, r0
   297f0:	b171      	cbz	r1, 29810 <protocol_verify+0x24>
   297f2:	2801      	cmp	r0, #1
   297f4:	d108      	bne.n	29808 <protocol_verify+0x1c>
   297f6:	2901      	cmp	r1, #1
   297f8:	d014      	beq.n	29824 <protocol_verify+0x38>
   297fa:	206b      	movs	r0, #107	; 0x6b
   297fc:	f7ff f82d 	bl	2885a <nrf_modem_os_errno_set>
   29800:	f04f 31ff 	mov.w	r1, #4294967295
   29804:	4608      	mov	r0, r1
   29806:	bd08      	pop	{r3, pc}
   29808:	2802      	cmp	r0, #2
   2980a:	d10b      	bne.n	29824 <protocol_verify+0x38>
   2980c:	2902      	cmp	r1, #2
   2980e:	e7f3      	b.n	297f8 <protocol_verify+0xc>
   29810:	2801      	cmp	r0, #1
   29812:	d101      	bne.n	29818 <protocol_verify+0x2c>
   29814:	6013      	str	r3, [r2, #0]
   29816:	e7f5      	b.n	29804 <protocol_verify+0x18>
   29818:	2803      	cmp	r0, #3
   2981a:	d101      	bne.n	29820 <protocol_verify+0x34>
   2981c:	6011      	str	r1, [r2, #0]
   2981e:	e7f1      	b.n	29804 <protocol_verify+0x18>
   29820:	2302      	movs	r3, #2
   29822:	e7f7      	b.n	29814 <protocol_verify+0x28>
   29824:	2100      	movs	r1, #0
   29826:	e7ed      	b.n	29804 <protocol_verify+0x18>

00029828 <ip_addr_parse>:
   29828:	b570      	push	{r4, r5, r6, lr}
   2982a:	684d      	ldr	r5, [r1, #4]
   2982c:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   29830:	4285      	cmp	r5, r0
   29832:	d11f      	bne.n	29874 <ip_addr_parse+0x4c>
   29834:	7808      	ldrb	r0, [r1, #0]
   29836:	4290      	cmp	r0, r2
   29838:	d11e      	bne.n	29878 <ip_addr_parse+0x50>
   2983a:	2d02      	cmp	r5, #2
   2983c:	d109      	bne.n	29852 <ip_addr_parse+0x2a>
   2983e:	2810      	cmp	r0, #16
   29840:	d11a      	bne.n	29878 <ip_addr_parse+0x50>
   29842:	890a      	ldrh	r2, [r1, #8]
   29844:	8032      	strh	r2, [r6, #0]
   29846:	2204      	movs	r2, #4
   29848:	801a      	strh	r2, [r3, #0]
   2984a:	68cb      	ldr	r3, [r1, #12]
   2984c:	6023      	str	r3, [r4, #0]
   2984e:	2000      	movs	r0, #0
   29850:	bd70      	pop	{r4, r5, r6, pc}
   29852:	2d0a      	cmp	r5, #10
   29854:	d110      	bne.n	29878 <ip_addr_parse+0x50>
   29856:	2824      	cmp	r0, #36	; 0x24
   29858:	d10e      	bne.n	29878 <ip_addr_parse+0x50>
   2985a:	890a      	ldrh	r2, [r1, #8]
   2985c:	8032      	strh	r2, [r6, #0]
   2985e:	2210      	movs	r2, #16
   29860:	801a      	strh	r2, [r3, #0]
   29862:	188b      	adds	r3, r1, r2
   29864:	3120      	adds	r1, #32
   29866:	f853 2b04 	ldr.w	r2, [r3], #4
   2986a:	428b      	cmp	r3, r1
   2986c:	f844 2b04 	str.w	r2, [r4], #4
   29870:	d1f9      	bne.n	29866 <ip_addr_parse+0x3e>
   29872:	e7ec      	b.n	2984e <ip_addr_parse+0x26>
   29874:	206a      	movs	r0, #106	; 0x6a
   29876:	e7eb      	b.n	29850 <ip_addr_parse+0x28>
   29878:	2016      	movs	r0, #22
   2987a:	e7e9      	b.n	29850 <ip_addr_parse+0x28>

0002987c <ip_interface_request_create>:
   2987c:	b570      	push	{r4, r5, r6, lr}
   2987e:	4606      	mov	r6, r0
   29880:	4618      	mov	r0, r3
   29882:	460d      	mov	r5, r1
   29884:	4614      	mov	r4, r2
   29886:	f7ff ff57 	bl	29738 <rpc_client_request_alloc>
   2988a:	b148      	cbz	r0, 298a0 <ip_interface_request_create+0x24>
   2988c:	2300      	movs	r3, #0
   2988e:	2208      	movs	r2, #8
   29890:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   29894:	60c4      	str	r4, [r0, #12]
   29896:	6105      	str	r5, [r0, #16]
   29898:	7202      	strb	r2, [r0, #8]
   2989a:	7243      	strb	r3, [r0, #9]
   2989c:	7283      	strb	r3, [r0, #10]
   2989e:	72c3      	strb	r3, [r0, #11]
   298a0:	bd70      	pop	{r4, r5, r6, pc}

000298a2 <ip_interface_wait>:
   298a2:	b538      	push	{r3, r4, r5, lr}
   298a4:	4605      	mov	r5, r0
   298a6:	f7f6 fc47 	bl	20138 <interface_socket_wait>
   298aa:	4604      	mov	r4, r0
   298ac:	b938      	cbnz	r0, 298be <ip_interface_wait+0x1c>
   298ae:	4628      	mov	r0, r5
   298b0:	f7f6 fcbc 	bl	2022c <interface_socket_from_handle_get>
   298b4:	b118      	cbz	r0, 298be <ip_interface_wait+0x1c>
   298b6:	6844      	ldr	r4, [r0, #4]
   298b8:	b10c      	cbz	r4, 298be <ip_interface_wait+0x1c>
   298ba:	2300      	movs	r3, #0
   298bc:	6043      	str	r3, [r0, #4]
   298be:	4620      	mov	r0, r4
   298c0:	bd38      	pop	{r3, r4, r5, pc}

000298c2 <ip_interface_recvfrom>:
   298c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   298c6:	b087      	sub	sp, #28
   298c8:	4681      	mov	r9, r0
   298ca:	461e      	mov	r6, r3
   298cc:	4690      	mov	r8, r2
   298ce:	9f11      	ldr	r7, [sp, #68]	; 0x44
   298d0:	9101      	str	r1, [sp, #4]
   298d2:	2a00      	cmp	r2, #0
   298d4:	f000 80e8 	beq.w	29aa8 <ip_interface_recvfrom+0x1e6>
   298d8:	b11b      	cbz	r3, 298e2 <ip_interface_recvfrom+0x20>
   298da:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   298de:	f000 80e5 	beq.w	29aac <ip_interface_recvfrom+0x1ea>
   298e2:	4648      	mov	r0, r9
   298e4:	f7f6 fca2 	bl	2022c <interface_socket_from_handle_get>
   298e8:	4604      	mov	r4, r0
   298ea:	2800      	cmp	r0, #0
   298ec:	f000 80e0 	beq.w	29ab0 <ip_interface_recvfrom+0x1ee>
   298f0:	6803      	ldr	r3, [r0, #0]
   298f2:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   298f6:	d10f      	bne.n	29918 <ip_interface_recvfrom+0x56>
   298f8:	6802      	ldr	r2, [r0, #0]
   298fa:	b292      	uxth	r2, r2
   298fc:	2a06      	cmp	r2, #6
   298fe:	f000 809e 	beq.w	29a3e <ip_interface_recvfrom+0x17c>
   29902:	6802      	ldr	r2, [r0, #0]
   29904:	461e      	mov	r6, r3
   29906:	b292      	uxth	r2, r2
   29908:	2a07      	cmp	r2, #7
   2990a:	469a      	mov	sl, r3
   2990c:	f000 8099 	beq.w	29a42 <ip_interface_recvfrom+0x180>
   29910:	2280      	movs	r2, #128	; 0x80
   29912:	f04f 35ff 	mov.w	r5, #4294967295
   29916:	e084      	b.n	29a22 <ip_interface_recvfrom+0x160>
   29918:	07b1      	lsls	r1, r6, #30
   2991a:	d422      	bmi.n	29962 <ip_interface_recvfrom+0xa0>
   2991c:	6803      	ldr	r3, [r0, #0]
   2991e:	00da      	lsls	r2, r3, #3
   29920:	d522      	bpl.n	29968 <ip_interface_recvfrom+0xa6>
   29922:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   29926:	f04f 35ff 	mov.w	r5, #4294967295
   2992a:	f006 0b10 	and.w	fp, r6, #16
   2992e:	6822      	ldr	r2, [r4, #0]
   29930:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   29934:	d01b      	beq.n	2996e <ip_interface_recvfrom+0xac>
   29936:	6822      	ldr	r2, [r4, #0]
   29938:	69e0      	ldr	r0, [r4, #28]
   2993a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   2993e:	6022      	str	r2, [r4, #0]
   29940:	6802      	ldr	r2, [r0, #0]
   29942:	68d2      	ldr	r2, [r2, #12]
   29944:	4790      	blx	r2
   29946:	1c43      	adds	r3, r0, #1
   29948:	4605      	mov	r5, r0
   2994a:	d029      	beq.n	299a0 <ip_interface_recvfrom+0xde>
   2994c:	4580      	cmp	r8, r0
   2994e:	dd05      	ble.n	2995c <ip_interface_recvfrom+0x9a>
   29950:	6923      	ldr	r3, [r4, #16]
   29952:	2b01      	cmp	r3, #1
   29954:	d102      	bne.n	2995c <ip_interface_recvfrom+0x9a>
   29956:	f1bb 0f00 	cmp.w	fp, #0
   2995a:	d125      	bne.n	299a8 <ip_interface_recvfrom+0xe6>
   2995c:	f04f 0a00 	mov.w	sl, #0
   29960:	e04a      	b.n	299f8 <ip_interface_recvfrom+0x136>
   29962:	f04f 0a00 	mov.w	sl, #0
   29966:	e7de      	b.n	29926 <ip_interface_recvfrom+0x64>
   29968:	f04f 0a01 	mov.w	sl, #1
   2996c:	e7db      	b.n	29926 <ip_interface_recvfrom+0x64>
   2996e:	6821      	ldr	r1, [r4, #0]
   29970:	0308      	lsls	r0, r1, #12
   29972:	d515      	bpl.n	299a0 <ip_interface_recvfrom+0xde>
   29974:	6821      	ldr	r1, [r4, #0]
   29976:	b289      	uxth	r1, r1
   29978:	290d      	cmp	r1, #13
   2997a:	d011      	beq.n	299a0 <ip_interface_recvfrom+0xde>
   2997c:	6923      	ldr	r3, [r4, #16]
   2997e:	2b01      	cmp	r3, #1
   29980:	f000 809e 	beq.w	29ac0 <ip_interface_recvfrom+0x1fe>
   29984:	4692      	mov	sl, r2
   29986:	2280      	movs	r2, #128	; 0x80
   29988:	6823      	ldr	r3, [r4, #0]
   2998a:	0c1b      	lsrs	r3, r3, #16
   2998c:	041b      	lsls	r3, r3, #16
   2998e:	f043 030d 	orr.w	r3, r3, #13
   29992:	6023      	str	r3, [r4, #0]
   29994:	6823      	ldr	r3, [r4, #0]
   29996:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2999a:	6023      	str	r3, [r4, #0]
   2999c:	2600      	movs	r6, #0
   2999e:	e040      	b.n	29a22 <ip_interface_recvfrom+0x160>
   299a0:	f1ba 0f00 	cmp.w	sl, #0
   299a4:	f000 808d 	beq.w	29ac2 <ip_interface_recvfrom+0x200>
   299a8:	6a23      	ldr	r3, [r4, #32]
   299aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   299ae:	2b00      	cmp	r3, #0
   299b0:	bf08      	it	eq
   299b2:	f04f 33ff 	moveq.w	r3, #4294967295
   299b6:	4611      	mov	r1, r2
   299b8:	9302      	str	r3, [sp, #8]
   299ba:	4648      	mov	r0, r9
   299bc:	ab02      	add	r3, sp, #8
   299be:	f7ff ff70 	bl	298a2 <ip_interface_wait>
   299c2:	6823      	ldr	r3, [r4, #0]
   299c4:	4602      	mov	r2, r0
   299c6:	b29b      	uxth	r3, r3
   299c8:	b933      	cbnz	r3, 299d8 <ip_interface_recvfrom+0x116>
   299ca:	2204      	movs	r2, #4
   299cc:	4610      	mov	r0, r2
   299ce:	f7fe ff44 	bl	2885a <nrf_modem_os_errno_set>
   299d2:	f04f 35ff 	mov.w	r5, #4294967295
   299d6:	e046      	b.n	29a66 <ip_interface_recvfrom+0x1a4>
   299d8:	2800      	cmp	r0, #0
   299da:	d06b      	beq.n	29ab4 <ip_interface_recvfrom+0x1f2>
   299dc:	6823      	ldr	r3, [r4, #0]
   299de:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   299e2:	d06a      	beq.n	29aba <ip_interface_recvfrom+0x1f8>
   299e4:	6823      	ldr	r3, [r4, #0]
   299e6:	b29b      	uxth	r3, r3
   299e8:	2b0d      	cmp	r3, #13
   299ea:	d066      	beq.n	29aba <ip_interface_recvfrom+0x1f8>
   299ec:	6923      	ldr	r3, [r4, #16]
   299ee:	1e59      	subs	r1, r3, #1
   299f0:	f1d1 0a00 	rsbs	sl, r1, #0
   299f4:	eb4a 0a01 	adc.w	sl, sl, r1
   299f8:	b107      	cbz	r7, 299fc <ip_interface_recvfrom+0x13a>
   299fa:	683f      	ldr	r7, [r7, #0]
   299fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   299fe:	69e0      	ldr	r0, [r4, #28]
   29a00:	e9cd 2704 	strd	r2, r7, [sp, #16]
   29a04:	9b01      	ldr	r3, [sp, #4]
   29a06:	6802      	ldr	r2, [r0, #0]
   29a08:	e9cd 3802 	strd	r3, r8, [sp, #8]
   29a0c:	6895      	ldr	r5, [r2, #8]
   29a0e:	a902      	add	r1, sp, #8
   29a10:	4632      	mov	r2, r6
   29a12:	47a8      	blx	r5
   29a14:	1c42      	adds	r2, r0, #1
   29a16:	4605      	mov	r5, r0
   29a18:	bf0b      	itete	eq
   29a1a:	2600      	moveq	r6, #0
   29a1c:	2601      	movne	r6, #1
   29a1e:	220b      	moveq	r2, #11
   29a20:	2200      	movne	r2, #0
   29a22:	69e0      	ldr	r0, [r4, #28]
   29a24:	9201      	str	r2, [sp, #4]
   29a26:	6801      	ldr	r1, [r0, #0]
   29a28:	68c9      	ldr	r1, [r1, #12]
   29a2a:	4788      	blx	r1
   29a2c:	3001      	adds	r0, #1
   29a2e:	9a01      	ldr	r2, [sp, #4]
   29a30:	d009      	beq.n	29a46 <ip_interface_recvfrom+0x184>
   29a32:	6823      	ldr	r3, [r4, #0]
   29a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   29a38:	6023      	str	r3, [r4, #0]
   29a3a:	b1a2      	cbz	r2, 29a66 <ip_interface_recvfrom+0x1a4>
   29a3c:	e7c6      	b.n	299cc <ip_interface_recvfrom+0x10a>
   29a3e:	461e      	mov	r6, r3
   29a40:	469a      	mov	sl, r3
   29a42:	2209      	movs	r2, #9
   29a44:	e765      	b.n	29912 <ip_interface_recvfrom+0x50>
   29a46:	f1ba 0f00 	cmp.w	sl, #0
   29a4a:	d010      	beq.n	29a6e <ip_interface_recvfrom+0x1ac>
   29a4c:	2e00      	cmp	r6, #0
   29a4e:	d1f4      	bne.n	29a3a <ip_interface_recvfrom+0x178>
   29a50:	4635      	mov	r5, r6
   29a52:	6823      	ldr	r3, [r4, #0]
   29a54:	0c1b      	lsrs	r3, r3, #16
   29a56:	041b      	lsls	r3, r3, #16
   29a58:	f043 030d 	orr.w	r3, r3, #13
   29a5c:	6023      	str	r3, [r4, #0]
   29a5e:	6823      	ldr	r3, [r4, #0]
   29a60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   29a64:	6023      	str	r3, [r4, #0]
   29a66:	4628      	mov	r0, r5
   29a68:	b007      	add	sp, #28
   29a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a6e:	2e00      	cmp	r6, #0
   29a70:	d1e3      	bne.n	29a3a <ip_interface_recvfrom+0x178>
   29a72:	6823      	ldr	r3, [r4, #0]
   29a74:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   29a78:	6823      	ldr	r3, [r4, #0]
   29a7a:	d00a      	beq.n	29a92 <ip_interface_recvfrom+0x1d0>
   29a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   29a80:	6023      	str	r3, [r4, #0]
   29a82:	6823      	ldr	r3, [r4, #0]
   29a84:	2269      	movs	r2, #105	; 0x69
   29a86:	0c1b      	lsrs	r3, r3, #16
   29a88:	041b      	lsls	r3, r3, #16
   29a8a:	f043 030d 	orr.w	r3, r3, #13
   29a8e:	6023      	str	r3, [r4, #0]
   29a90:	e79c      	b.n	299cc <ip_interface_recvfrom+0x10a>
   29a92:	031b      	lsls	r3, r3, #12
   29a94:	d5d1      	bpl.n	29a3a <ip_interface_recvfrom+0x178>
   29a96:	6823      	ldr	r3, [r4, #0]
   29a98:	b29b      	uxth	r3, r3
   29a9a:	2b0d      	cmp	r3, #13
   29a9c:	d1cd      	bne.n	29a3a <ip_interface_recvfrom+0x178>
   29a9e:	68a3      	ldr	r3, [r4, #8]
   29aa0:	2b00      	cmp	r3, #0
   29aa2:	d0ca      	beq.n	29a3a <ip_interface_recvfrom+0x178>
   29aa4:	68a2      	ldr	r2, [r4, #8]
   29aa6:	e7c8      	b.n	29a3a <ip_interface_recvfrom+0x178>
   29aa8:	2216      	movs	r2, #22
   29aaa:	e78f      	b.n	299cc <ip_interface_recvfrom+0x10a>
   29aac:	225f      	movs	r2, #95	; 0x5f
   29aae:	e78d      	b.n	299cc <ip_interface_recvfrom+0x10a>
   29ab0:	2209      	movs	r2, #9
   29ab2:	e78b      	b.n	299cc <ip_interface_recvfrom+0x10a>
   29ab4:	f04f 0a01 	mov.w	sl, #1
   29ab8:	e739      	b.n	2992e <ip_interface_recvfrom+0x6c>
   29aba:	2600      	movs	r6, #0
   29abc:	46b2      	mov	sl, r6
   29abe:	e7b0      	b.n	29a22 <ip_interface_recvfrom+0x160>
   29ac0:	469a      	mov	sl, r3
   29ac2:	220b      	movs	r2, #11
   29ac4:	e76a      	b.n	2999c <ip_interface_recvfrom+0xda>

00029ac6 <ip_interface_connect>:
   29ac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29aca:	4606      	mov	r6, r0
   29acc:	4691      	mov	r9, r2
   29ace:	460f      	mov	r7, r1
   29ad0:	b085      	sub	sp, #20
   29ad2:	2900      	cmp	r1, #0
   29ad4:	d067      	beq.n	29ba6 <ip_interface_connect+0xe0>
   29ad6:	2a00      	cmp	r2, #0
   29ad8:	d065      	beq.n	29ba6 <ip_interface_connect+0xe0>
   29ada:	f7f6 fba7 	bl	2022c <interface_socket_from_handle_get>
   29ade:	4604      	mov	r4, r0
   29ae0:	2800      	cmp	r0, #0
   29ae2:	d062      	beq.n	29baa <ip_interface_connect+0xe4>
   29ae4:	6803      	ldr	r3, [r0, #0]
   29ae6:	b29b      	uxth	r3, r3
   29ae8:	2b02      	cmp	r3, #2
   29aea:	d003      	beq.n	29af4 <ip_interface_connect+0x2e>
   29aec:	6803      	ldr	r3, [r0, #0]
   29aee:	b29b      	uxth	r3, r3
   29af0:	2b04      	cmp	r3, #4
   29af2:	d151      	bne.n	29b98 <ip_interface_connect+0xd2>
   29af4:	6823      	ldr	r3, [r4, #0]
   29af6:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   29afa:	d158      	bne.n	29bae <ip_interface_connect+0xe8>
   29afc:	f247 0202 	movw	r2, #28674	; 0x7002
   29b00:	4630      	mov	r0, r6
   29b02:	69a1      	ldr	r1, [r4, #24]
   29b04:	f7ff feba 	bl	2987c <ip_interface_request_create>
   29b08:	4605      	mov	r5, r0
   29b0a:	2800      	cmp	r0, #0
   29b0c:	d051      	beq.n	29bb2 <ip_interface_connect+0xec>
   29b0e:	f247 0802 	movw	r8, #28674	; 0x7002
   29b12:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   29b16:	60c3      	str	r3, [r0, #12]
   29b18:	69a3      	ldr	r3, [r4, #24]
   29b1a:	464a      	mov	r2, r9
   29b1c:	6103      	str	r3, [r0, #16]
   29b1e:	6883      	ldr	r3, [r0, #8]
   29b20:	4639      	mov	r1, r7
   29b22:	3304      	adds	r3, #4
   29b24:	6083      	str	r3, [r0, #8]
   29b26:	f100 0318 	add.w	r3, r0, #24
   29b2a:	9301      	str	r3, [sp, #4]
   29b2c:	f10d 030a 	add.w	r3, sp, #10
   29b30:	9300      	str	r3, [sp, #0]
   29b32:	68e0      	ldr	r0, [r4, #12]
   29b34:	ab02      	add	r3, sp, #8
   29b36:	f7ff fe77 	bl	29828 <ip_addr_parse>
   29b3a:	bb30      	cbnz	r0, 29b8a <ip_interface_connect+0xc4>
   29b3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   29b40:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   29b44:	82ab      	strh	r3, [r5, #20]
   29b46:	68ab      	ldr	r3, [r5, #8]
   29b48:	6827      	ldr	r7, [r4, #0]
   29b4a:	4413      	add	r3, r2
   29b4c:	60ab      	str	r3, [r5, #8]
   29b4e:	6823      	ldr	r3, [r4, #0]
   29b50:	82ea      	strh	r2, [r5, #22]
   29b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   29b56:	6023      	str	r3, [r4, #0]
   29b58:	462a      	mov	r2, r5
   29b5a:	4641      	mov	r1, r8
   29b5c:	2004      	movs	r0, #4
   29b5e:	f7ff fdf1 	bl	29744 <rpc_client_request_send>
   29b62:	6823      	ldr	r3, [r4, #0]
   29b64:	00db      	lsls	r3, r3, #3
   29b66:	d426      	bmi.n	29bb6 <ip_interface_connect+0xf0>
   29b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29b6e:	2b00      	cmp	r3, #0
   29b70:	bf08      	it	eq
   29b72:	f04f 33ff 	moveq.w	r3, #4294967295
   29b76:	2105      	movs	r1, #5
   29b78:	9303      	str	r3, [sp, #12]
   29b7a:	4630      	mov	r0, r6
   29b7c:	ab03      	add	r3, sp, #12
   29b7e:	f7ff fe90 	bl	298a2 <ip_interface_wait>
   29b82:	b130      	cbz	r0, 29b92 <ip_interface_connect+0xcc>
   29b84:	2877      	cmp	r0, #119	; 0x77
   29b86:	d000      	beq.n	29b8a <ip_interface_connect+0xc4>
   29b88:	6027      	str	r7, [r4, #0]
   29b8a:	f7fe fe66 	bl	2885a <nrf_modem_os_errno_set>
   29b8e:	f04f 30ff 	mov.w	r0, #4294967295
   29b92:	b005      	add	sp, #20
   29b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29b98:	6803      	ldr	r3, [r0, #0]
   29b9a:	b29b      	uxth	r3, r3
   29b9c:	2b05      	cmp	r3, #5
   29b9e:	bf14      	ite	ne
   29ba0:	2009      	movne	r0, #9
   29ba2:	207f      	moveq	r0, #127	; 0x7f
   29ba4:	e7f1      	b.n	29b8a <ip_interface_connect+0xc4>
   29ba6:	2016      	movs	r0, #22
   29ba8:	e7ef      	b.n	29b8a <ip_interface_connect+0xc4>
   29baa:	2009      	movs	r0, #9
   29bac:	e7ed      	b.n	29b8a <ip_interface_connect+0xc4>
   29bae:	2078      	movs	r0, #120	; 0x78
   29bb0:	e7eb      	b.n	29b8a <ip_interface_connect+0xc4>
   29bb2:	200c      	movs	r0, #12
   29bb4:	e7e9      	b.n	29b8a <ip_interface_connect+0xc4>
   29bb6:	2077      	movs	r0, #119	; 0x77
   29bb8:	e7e7      	b.n	29b8a <ip_interface_connect+0xc4>

00029bba <getopt_check_and_send_int>:
   29bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29bbc:	4604      	mov	r4, r0
   29bbe:	460d      	mov	r5, r1
   29bc0:	4618      	mov	r0, r3
   29bc2:	4611      	mov	r1, r2
   29bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   29bc8:	b18b      	cbz	r3, 29bee <getopt_check_and_send_int+0x34>
   29bca:	681e      	ldr	r6, [r3, #0]
   29bcc:	b17e      	cbz	r6, 29bee <getopt_check_and_send_int+0x34>
   29bce:	b172      	cbz	r2, 29bee <getopt_check_and_send_int+0x34>
   29bd0:	e9cd 2300 	strd	r2, r3, [sp]
   29bd4:	462b      	mov	r3, r5
   29bd6:	4622      	mov	r2, r4
   29bd8:	f7f6 fe0e 	bl	207f8 <ip_interface_socketoption_get>
   29bdc:	4603      	mov	r3, r0
   29bde:	b118      	cbz	r0, 29be8 <getopt_check_and_send_int+0x2e>
   29be0:	f7fe fe3b 	bl	2885a <nrf_modem_os_errno_set>
   29be4:	f04f 33ff 	mov.w	r3, #4294967295
   29be8:	4618      	mov	r0, r3
   29bea:	b002      	add	sp, #8
   29bec:	bd70      	pop	{r4, r5, r6, pc}
   29bee:	2016      	movs	r0, #22
   29bf0:	e7f6      	b.n	29be0 <getopt_check_and_send_int+0x26>

00029bf2 <ip_interface_socketoption_send>:
   29bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bf6:	4698      	mov	r8, r3
   29bf8:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   29bfc:	f04f 33ff 	mov.w	r3, #4294967295
   29c00:	9301      	str	r3, [sp, #4]
   29c02:	680b      	ldr	r3, [r1, #0]
   29c04:	4606      	mov	r6, r0
   29c06:	025d      	lsls	r5, r3, #9
   29c08:	460c      	mov	r4, r1
   29c0a:	4692      	mov	sl, r2
   29c0c:	d43a      	bmi.n	29c84 <ip_interface_socketoption_send+0x92>
   29c0e:	680b      	ldr	r3, [r1, #0]
   29c10:	0219      	lsls	r1, r3, #8
   29c12:	d437      	bmi.n	29c84 <ip_interface_socketoption_send+0x92>
   29c14:	6823      	ldr	r3, [r4, #0]
   29c16:	01da      	lsls	r2, r3, #7
   29c18:	d434      	bmi.n	29c84 <ip_interface_socketoption_send+0x92>
   29c1a:	6823      	ldr	r3, [r4, #0]
   29c1c:	019b      	lsls	r3, r3, #6
   29c1e:	d431      	bmi.n	29c84 <ip_interface_socketoption_send+0x92>
   29c20:	f8d4 9000 	ldr.w	r9, [r4]
   29c24:	6823      	ldr	r3, [r4, #0]
   29c26:	f247 0203 	movw	r2, #28675	; 0x7003
   29c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   29c2e:	6023      	str	r3, [r4, #0]
   29c30:	69a1      	ldr	r1, [r4, #24]
   29c32:	463b      	mov	r3, r7
   29c34:	f7ff fe22 	bl	2987c <ip_interface_request_create>
   29c38:	4605      	mov	r5, r0
   29c3a:	b308      	cbz	r0, 29c80 <ip_interface_socketoption_send+0x8e>
   29c3c:	6883      	ldr	r3, [r0, #8]
   29c3e:	f8c0 a014 	str.w	sl, [r0, #20]
   29c42:	3308      	adds	r3, #8
   29c44:	6083      	str	r3, [r0, #8]
   29c46:	f8c0 8018 	str.w	r8, [r0, #24]
   29c4a:	b13f      	cbz	r7, 29c5c <ip_interface_socketoption_send+0x6a>
   29c4c:	f1bb 0f00 	cmp.w	fp, #0
   29c50:	d004      	beq.n	29c5c <ip_interface_socketoption_send+0x6a>
   29c52:	463a      	mov	r2, r7
   29c54:	4659      	mov	r1, fp
   29c56:	6800      	ldr	r0, [r0, #0]
   29c58:	f001 f8f6 	bl	2ae48 <memcpy>
   29c5c:	462a      	mov	r2, r5
   29c5e:	f247 0103 	movw	r1, #28675	; 0x7003
   29c62:	2004      	movs	r0, #4
   29c64:	f7ff fd6e 	bl	29744 <rpc_client_request_send>
   29c68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   29c6c:	4630      	mov	r0, r6
   29c6e:	4611      	mov	r1, r2
   29c70:	ab01      	add	r3, sp, #4
   29c72:	f7ff fe16 	bl	298a2 <ip_interface_wait>
   29c76:	f8c4 9000 	str.w	r9, [r4]
   29c7a:	b003      	add	sp, #12
   29c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c80:	200c      	movs	r0, #12
   29c82:	e7f8      	b.n	29c76 <ip_interface_socketoption_send+0x84>
   29c84:	200b      	movs	r0, #11
   29c86:	e7f8      	b.n	29c7a <ip_interface_socketoption_send+0x88>

00029c88 <setopt_check_and_send_int>:
   29c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29c8a:	4604      	mov	r4, r0
   29c8c:	460d      	mov	r5, r1
   29c8e:	4618      	mov	r0, r3
   29c90:	4611      	mov	r1, r2
   29c92:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   29c96:	2a04      	cmp	r2, #4
   29c98:	d10f      	bne.n	29cba <setopt_check_and_send_int+0x32>
   29c9a:	b173      	cbz	r3, 29cba <setopt_check_and_send_int+0x32>
   29c9c:	e9cd 3200 	strd	r3, r2, [sp]
   29ca0:	462b      	mov	r3, r5
   29ca2:	4622      	mov	r2, r4
   29ca4:	f7ff ffa5 	bl	29bf2 <ip_interface_socketoption_send>
   29ca8:	4603      	mov	r3, r0
   29caa:	b118      	cbz	r0, 29cb4 <setopt_check_and_send_int+0x2c>
   29cac:	f7fe fdd5 	bl	2885a <nrf_modem_os_errno_set>
   29cb0:	f04f 33ff 	mov.w	r3, #4294967295
   29cb4:	4618      	mov	r0, r3
   29cb6:	b003      	add	sp, #12
   29cb8:	bd30      	pop	{r4, r5, pc}
   29cba:	2016      	movs	r0, #22
   29cbc:	e7f6      	b.n	29cac <setopt_check_and_send_int+0x24>

00029cbe <ip_interface_getopt>:
   29cbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29cc2:	2901      	cmp	r1, #1
   29cc4:	4604      	mov	r4, r0
   29cc6:	460f      	mov	r7, r1
   29cc8:	4616      	mov	r6, r2
   29cca:	461d      	mov	r5, r3
   29ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
   29cd0:	d007      	beq.n	29ce2 <ip_interface_getopt+0x24>
   29cd2:	206d      	movs	r0, #109	; 0x6d
   29cd4:	f7fe fdc1 	bl	2885a <nrf_modem_os_errno_set>
   29cd8:	f04f 30ff 	mov.w	r0, #4294967295
   29cdc:	b002      	add	sp, #8
   29cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ce2:	f7f6 faa3 	bl	2022c <interface_socket_from_handle_get>
   29ce6:	4602      	mov	r2, r0
   29ce8:	b908      	cbnz	r0, 29cee <ip_interface_getopt+0x30>
   29cea:	2009      	movs	r0, #9
   29cec:	e7f2      	b.n	29cd4 <ip_interface_getopt+0x16>
   29cee:	2e28      	cmp	r6, #40	; 0x28
   29cf0:	dc0d      	bgt.n	29d0e <ip_interface_getopt+0x50>
   29cf2:	2e1d      	cmp	r6, #29
   29cf4:	dd0d      	ble.n	29d12 <ip_interface_getopt+0x54>
   29cf6:	f1a6 031e 	sub.w	r3, r6, #30
   29cfa:	2b0a      	cmp	r3, #10
   29cfc:	d809      	bhi.n	29d12 <ip_interface_getopt+0x54>
   29cfe:	e8df f003 	tbb	[pc, r3]
   29d02:	1d13      	.short	0x1d13
   29d04:	08080824 	.word	0x08080824
   29d08:	08080808 	.word	0x08080808
   29d0c:	2b          	.byte	0x2b
   29d0d:	00          	.byte	0x00
   29d0e:	2e37      	cmp	r6, #55	; 0x37
   29d10:	d029      	beq.n	29d66 <ip_interface_getopt+0xa8>
   29d12:	462b      	mov	r3, r5
   29d14:	4632      	mov	r2, r6
   29d16:	2101      	movs	r1, #1
   29d18:	4620      	mov	r0, r4
   29d1a:	f8cd 8020 	str.w	r8, [sp, #32]
   29d1e:	b002      	add	sp, #8
   29d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29d24:	f7f6 bac6 	b.w	202b4 <interface_socket_getopt>
   29d28:	4623      	mov	r3, r4
   29d2a:	f248 0101 	movw	r1, #32769	; 0x8001
   29d2e:	f44f 7000 	mov.w	r0, #512	; 0x200
   29d32:	e9cd 5800 	strd	r5, r8, [sp]
   29d36:	f7ff ff40 	bl	29bba <getopt_check_and_send_int>
   29d3a:	e7cf      	b.n	29cdc <ip_interface_getopt+0x1e>
   29d3c:	4623      	mov	r3, r4
   29d3e:	f244 0110 	movw	r1, #16400	; 0x4010
   29d42:	2004      	movs	r0, #4
   29d44:	e9cd 5800 	strd	r5, r8, [sp]
   29d48:	e7f5      	b.n	29d36 <ip_interface_getopt+0x78>
   29d4a:	4623      	mov	r3, r4
   29d4c:	f246 0110 	movw	r1, #24592	; 0x6010
   29d50:	2006      	movs	r0, #6
   29d52:	e9cd 5800 	strd	r5, r8, [sp]
   29d56:	e7ee      	b.n	29d36 <ip_interface_getopt+0x78>
   29d58:	4623      	mov	r3, r4
   29d5a:	f241 0104 	movw	r1, #4100	; 0x1004
   29d5e:	2008      	movs	r0, #8
   29d60:	e9cd 5800 	strd	r5, r8, [sp]
   29d64:	e7e7      	b.n	29d36 <ip_interface_getopt+0x78>
   29d66:	4623      	mov	r3, r4
   29d68:	f245 0106 	movw	r1, #20486	; 0x5006
   29d6c:	4638      	mov	r0, r7
   29d6e:	e9cd 5800 	strd	r5, r8, [sp]
   29d72:	e7e0      	b.n	29d36 <ip_interface_getopt+0x78>

00029d74 <attach_trigger_condition_verify>:
   29d74:	6903      	ldr	r3, [r0, #16]
   29d76:	2b01      	cmp	r3, #1
   29d78:	d105      	bne.n	29d86 <attach_trigger_condition_verify+0x12>
   29d7a:	6800      	ldr	r0, [r0, #0]
   29d7c:	b280      	uxth	r0, r0
   29d7e:	1f43      	subs	r3, r0, #5
   29d80:	4258      	negs	r0, r3
   29d82:	4158      	adcs	r0, r3
   29d84:	4770      	bx	lr
   29d86:	2b02      	cmp	r3, #2
   29d88:	d109      	bne.n	29d9e <attach_trigger_condition_verify+0x2a>
   29d8a:	6803      	ldr	r3, [r0, #0]
   29d8c:	b29b      	uxth	r3, r3
   29d8e:	2b02      	cmp	r3, #2
   29d90:	d003      	beq.n	29d9a <attach_trigger_condition_verify+0x26>
   29d92:	6803      	ldr	r3, [r0, #0]
   29d94:	b29b      	uxth	r3, r3
   29d96:	2b04      	cmp	r3, #4
   29d98:	d1ef      	bne.n	29d7a <attach_trigger_condition_verify+0x6>
   29d9a:	2001      	movs	r0, #1
   29d9c:	4770      	bx	lr
   29d9e:	2000      	movs	r0, #0
   29da0:	4770      	bx	lr

00029da2 <secure_client_socket>:
   29da2:	f04f 33ff 	mov.w	r3, #4294967295
   29da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29da8:	9301      	str	r3, [sp, #4]
   29daa:	680b      	ldr	r3, [r1, #0]
   29dac:	4606      	mov	r6, r0
   29dae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   29db2:	600b      	str	r3, [r1, #0]
   29db4:	680b      	ldr	r3, [r1, #0]
   29db6:	460c      	mov	r4, r1
   29db8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   29dbc:	600b      	str	r3, [r1, #0]
   29dbe:	680f      	ldr	r7, [r1, #0]
   29dc0:	463a      	mov	r2, r7
   29dc2:	f7f7 fb83 	bl	214cc <secure_socket_attach_initiate>
   29dc6:	4605      	mov	r5, r0
   29dc8:	b950      	cbnz	r0, 29de0 <secure_client_socket+0x3e>
   29dca:	220c      	movs	r2, #12
   29dcc:	4630      	mov	r0, r6
   29dce:	4611      	mov	r1, r2
   29dd0:	ab01      	add	r3, sp, #4
   29dd2:	f7ff fd66 	bl	298a2 <ip_interface_wait>
   29dd6:	4605      	mov	r5, r0
   29dd8:	b128      	cbz	r0, 29de6 <secure_client_socket+0x44>
   29dda:	2877      	cmp	r0, #119	; 0x77
   29ddc:	d000      	beq.n	29de0 <secure_client_socket+0x3e>
   29dde:	6027      	str	r7, [r4, #0]
   29de0:	4628      	mov	r0, r5
   29de2:	b003      	add	sp, #12
   29de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29de6:	4630      	mov	r0, r6
   29de8:	f7f7 fb5e 	bl	214a8 <hostname_free>
   29dec:	6823      	ldr	r3, [r4, #0]
   29dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   29df2:	6023      	str	r3, [r4, #0]
   29df4:	6823      	ldr	r3, [r4, #0]
   29df6:	0c1b      	lsrs	r3, r3, #16
   29df8:	041b      	lsls	r3, r3, #16
   29dfa:	f043 030c 	orr.w	r3, r3, #12
   29dfe:	6023      	str	r3, [r4, #0]
   29e00:	6823      	ldr	r3, [r4, #0]
   29e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   29e06:	6023      	str	r3, [r4, #0]
   29e08:	6823      	ldr	r3, [r4, #0]
   29e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   29e0e:	6023      	str	r3, [r4, #0]
   29e10:	e7e6      	b.n	29de0 <secure_client_socket+0x3e>

00029e12 <tls_interface_close>:
   29e12:	b510      	push	{r4, lr}
   29e14:	4604      	mov	r4, r0
   29e16:	f7f6 fa09 	bl	2022c <interface_socket_from_handle_get>
   29e1a:	b138      	cbz	r0, 29e2c <tls_interface_close+0x1a>
   29e1c:	4620      	mov	r0, r4
   29e1e:	f7f7 fb43 	bl	214a8 <hostname_free>
   29e22:	4620      	mov	r0, r4
   29e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29e28:	f7f6 bb82 	b.w	20530 <ip_interface_close>
   29e2c:	2009      	movs	r0, #9
   29e2e:	f7fe fd14 	bl	2885a <nrf_modem_os_errno_set>
   29e32:	f04f 30ff 	mov.w	r0, #4294967295
   29e36:	bd10      	pop	{r4, pc}

00029e38 <null_handler_init>:
   29e38:	2000      	movs	r0, #0
   29e3a:	4770      	bx	lr

00029e3c <null_handler_put>:
   29e3c:	b510      	push	{r4, lr}
   29e3e:	460c      	mov	r4, r1
   29e40:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   29e44:	4620      	mov	r0, r4
   29e46:	4798      	blx	r3
   29e48:	6860      	ldr	r0, [r4, #4]
   29e4a:	bd10      	pop	{r4, pc}

00029e4c <null_handler_get>:
   29e4c:	f04f 30ff 	mov.w	r0, #4294967295
   29e50:	4770      	bx	lr

00029e52 <null_handler_available>:
   29e52:	f04f 30ff 	mov.w	r0, #4294967295
   29e56:	4770      	bx	lr

00029e58 <null_handler_flush>:
   29e58:	2000      	movs	r0, #0
   29e5a:	4770      	bx	lr

00029e5c <null_handler_free>:
   29e5c:	4770      	bx	lr

00029e5e <stream_handler_free_packet>:
   29e5e:	b530      	push	{r4, r5, lr}
   29e60:	4605      	mov	r5, r0
   29e62:	b085      	sub	sp, #20
   29e64:	68c0      	ldr	r0, [r0, #12]
   29e66:	f000 fb0d 	bl	2a484 <linked_list_pop>
   29e6a:	4604      	mov	r4, r0
   29e6c:	b170      	cbz	r0, 29e8c <stream_handler_free_packet+0x2e>
   29e6e:	6843      	ldr	r3, [r0, #4]
   29e70:	9300      	str	r3, [sp, #0]
   29e72:	6883      	ldr	r3, [r0, #8]
   29e74:	9301      	str	r3, [sp, #4]
   29e76:	6903      	ldr	r3, [r0, #16]
   29e78:	9302      	str	r3, [sp, #8]
   29e7a:	68c3      	ldr	r3, [r0, #12]
   29e7c:	4668      	mov	r0, sp
   29e7e:	9303      	str	r3, [sp, #12]
   29e80:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29e84:	4798      	blx	r3
   29e86:	4620      	mov	r0, r4
   29e88:	f7ed ff58 	bl	17d3c <nrf_modem_os_free>
   29e8c:	b005      	add	sp, #20
   29e8e:	bd30      	pop	{r4, r5, pc}

00029e90 <stream_handler_init>:
   29e90:	b510      	push	{r4, lr}
   29e92:	4604      	mov	r4, r0
   29e94:	200c      	movs	r0, #12
   29e96:	f7ed ff49 	bl	17d2c <nrf_modem_os_alloc>
   29e9a:	60e0      	str	r0, [r4, #12]
   29e9c:	b128      	cbz	r0, 29eaa <stream_handler_init+0x1a>
   29e9e:	2300      	movs	r3, #0
   29ea0:	6123      	str	r3, [r4, #16]
   29ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ea6:	f000 bad1 	b.w	2a44c <linked_list_init>
   29eaa:	200c      	movs	r0, #12
   29eac:	bd10      	pop	{r4, pc}

00029eae <stream_handler_put>:
   29eae:	b570      	push	{r4, r5, r6, lr}
   29eb0:	4606      	mov	r6, r0
   29eb2:	2014      	movs	r0, #20
   29eb4:	460d      	mov	r5, r1
   29eb6:	f7ed ff39 	bl	17d2c <nrf_modem_os_alloc>
   29eba:	4604      	mov	r4, r0
   29ebc:	b178      	cbz	r0, 29ede <stream_handler_put+0x30>
   29ebe:	682b      	ldr	r3, [r5, #0]
   29ec0:	4601      	mov	r1, r0
   29ec2:	6043      	str	r3, [r0, #4]
   29ec4:	686b      	ldr	r3, [r5, #4]
   29ec6:	6083      	str	r3, [r0, #8]
   29ec8:	68eb      	ldr	r3, [r5, #12]
   29eca:	60c3      	str	r3, [r0, #12]
   29ecc:	68ab      	ldr	r3, [r5, #8]
   29ece:	6103      	str	r3, [r0, #16]
   29ed0:	68f0      	ldr	r0, [r6, #12]
   29ed2:	f000 fac4 	bl	2a45e <linked_list_push>
   29ed6:	b128      	cbz	r0, 29ee4 <stream_handler_put+0x36>
   29ed8:	4620      	mov	r0, r4
   29eda:	f7ed ff2f 	bl	17d3c <nrf_modem_os_free>
   29ede:	f04f 30ff 	mov.w	r0, #4294967295
   29ee2:	e000      	b.n	29ee6 <stream_handler_put+0x38>
   29ee4:	6868      	ldr	r0, [r5, #4]
   29ee6:	bd70      	pop	{r4, r5, r6, pc}

00029ee8 <stream_handler_get>:
   29ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29eec:	4606      	mov	r6, r0
   29eee:	b085      	sub	sp, #20
   29ef0:	68c0      	ldr	r0, [r0, #12]
   29ef2:	468a      	mov	sl, r1
   29ef4:	4617      	mov	r7, r2
   29ef6:	f000 facf 	bl	2a498 <linked_list_peek>
   29efa:	4604      	mov	r4, r0
   29efc:	2800      	cmp	r0, #0
   29efe:	d055      	beq.n	29fac <stream_handler_get+0xc4>
   29f00:	f8da 0008 	ldr.w	r0, [sl, #8]
   29f04:	2800      	cmp	r0, #0
   29f06:	d049      	beq.n	29f9c <stream_handler_get+0xb4>
   29f08:	6921      	ldr	r1, [r4, #16]
   29f0a:	2900      	cmp	r1, #0
   29f0c:	d046      	beq.n	29f9c <stream_handler_get+0xb4>
   29f0e:	68e2      	ldr	r2, [r4, #12]
   29f10:	2a00      	cmp	r2, #0
   29f12:	d043      	beq.n	29f9c <stream_handler_get+0xb4>
   29f14:	f8da 500c 	ldr.w	r5, [sl, #12]
   29f18:	42aa      	cmp	r2, r5
   29f1a:	bf28      	it	cs
   29f1c:	462a      	movcs	r2, r5
   29f1e:	f8ca 200c 	str.w	r2, [sl, #12]
   29f22:	f000 ff91 	bl	2ae48 <memcpy>
   29f26:	2500      	movs	r5, #0
   29f28:	f8da 3004 	ldr.w	r3, [sl, #4]
   29f2c:	6931      	ldr	r1, [r6, #16]
   29f2e:	9301      	str	r3, [sp, #4]
   29f30:	f8da 3000 	ldr.w	r3, [sl]
   29f34:	9302      	str	r3, [sp, #8]
   29f36:	f007 0320 	and.w	r3, r7, #32
   29f3a:	9303      	str	r3, [sp, #12]
   29f3c:	f007 0708 	and.w	r7, r7, #8
   29f40:	9b01      	ldr	r3, [sp, #4]
   29f42:	42ab      	cmp	r3, r5
   29f44:	d924      	bls.n	29f90 <stream_handler_get+0xa8>
   29f46:	68a2      	ldr	r2, [r4, #8]
   29f48:	9b01      	ldr	r3, [sp, #4]
   29f4a:	eba2 0801 	sub.w	r8, r2, r1
   29f4e:	eba3 0b05 	sub.w	fp, r3, r5
   29f52:	f8da 2000 	ldr.w	r2, [sl]
   29f56:	45d8      	cmp	r8, fp
   29f58:	46c1      	mov	r9, r8
   29f5a:	bf28      	it	cs
   29f5c:	46d9      	movcs	r9, fp
   29f5e:	b142      	cbz	r2, 29f72 <stream_handler_get+0x8a>
   29f60:	9b03      	ldr	r3, [sp, #12]
   29f62:	b933      	cbnz	r3, 29f72 <stream_handler_get+0x8a>
   29f64:	6860      	ldr	r0, [r4, #4]
   29f66:	9b02      	ldr	r3, [sp, #8]
   29f68:	4401      	add	r1, r0
   29f6a:	464a      	mov	r2, r9
   29f6c:	1958      	adds	r0, r3, r5
   29f6e:	f000 ff6b 	bl	2ae48 <memcpy>
   29f72:	4620      	mov	r0, r4
   29f74:	f000 fa98 	bl	2a4a8 <linked_list_get_next>
   29f78:	4604      	mov	r4, r0
   29f7a:	b92f      	cbnz	r7, 29f88 <stream_handler_get+0xa0>
   29f7c:	45d8      	cmp	r8, fp
   29f7e:	d811      	bhi.n	29fa4 <stream_handler_get+0xbc>
   29f80:	4630      	mov	r0, r6
   29f82:	f7ff ff6c 	bl	29e5e <stream_handler_free_packet>
   29f86:	6137      	str	r7, [r6, #16]
   29f88:	2100      	movs	r1, #0
   29f8a:	444d      	add	r5, r9
   29f8c:	2c00      	cmp	r4, #0
   29f8e:	d1d7      	bne.n	29f40 <stream_handler_get+0x58>
   29f90:	4628      	mov	r0, r5
   29f92:	f8ca 5004 	str.w	r5, [sl, #4]
   29f96:	b005      	add	sp, #20
   29f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f9c:	2200      	movs	r2, #0
   29f9e:	f8ca 200c 	str.w	r2, [sl, #12]
   29fa2:	e7c0      	b.n	29f26 <stream_handler_get+0x3e>
   29fa4:	6932      	ldr	r2, [r6, #16]
   29fa6:	444a      	add	r2, r9
   29fa8:	6132      	str	r2, [r6, #16]
   29faa:	e7ed      	b.n	29f88 <stream_handler_get+0xa0>
   29fac:	f04f 30ff 	mov.w	r0, #4294967295
   29fb0:	e7f1      	b.n	29f96 <stream_handler_get+0xae>

00029fb2 <stream_handler_available>:
   29fb2:	b510      	push	{r4, lr}
   29fb4:	4604      	mov	r4, r0
   29fb6:	68c0      	ldr	r0, [r0, #12]
   29fb8:	f000 fa6e 	bl	2a498 <linked_list_peek>
   29fbc:	b150      	cbz	r0, 29fd4 <stream_handler_available+0x22>
   29fbe:	6924      	ldr	r4, [r4, #16]
   29fc0:	4264      	negs	r4, r4
   29fc2:	6883      	ldr	r3, [r0, #8]
   29fc4:	441c      	add	r4, r3
   29fc6:	f000 fa6f 	bl	2a4a8 <linked_list_get_next>
   29fca:	2800      	cmp	r0, #0
   29fcc:	d1f9      	bne.n	29fc2 <stream_handler_available+0x10>
   29fce:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   29fd2:	bd10      	pop	{r4, pc}
   29fd4:	f04f 30ff 	mov.w	r0, #4294967295
   29fd8:	e7fb      	b.n	29fd2 <stream_handler_available+0x20>

00029fda <stream_handler_flush>:
   29fda:	68c3      	ldr	r3, [r0, #12]
   29fdc:	b510      	push	{r4, lr}
   29fde:	4604      	mov	r4, r0
   29fe0:	b923      	cbnz	r3, 29fec <stream_handler_flush+0x12>
   29fe2:	2016      	movs	r0, #22
   29fe4:	e007      	b.n	29ff6 <stream_handler_flush+0x1c>
   29fe6:	4620      	mov	r0, r4
   29fe8:	f7ff ff39 	bl	29e5e <stream_handler_free_packet>
   29fec:	68e0      	ldr	r0, [r4, #12]
   29fee:	f000 fa59 	bl	2a4a4 <linked_list_size_get>
   29ff2:	2800      	cmp	r0, #0
   29ff4:	d1f7      	bne.n	29fe6 <stream_handler_flush+0xc>
   29ff6:	bd10      	pop	{r4, pc}

00029ff8 <stream_handler_free>:
   29ff8:	68c3      	ldr	r3, [r0, #12]
   29ffa:	b510      	push	{r4, lr}
   29ffc:	4604      	mov	r4, r0
   29ffe:	b133      	cbz	r3, 2a00e <stream_handler_free+0x16>
   2a000:	f7ff ffeb 	bl	29fda <stream_handler_flush>
   2a004:	68e0      	ldr	r0, [r4, #12]
   2a006:	f7ed fe99 	bl	17d3c <nrf_modem_os_free>
   2a00a:	2300      	movs	r3, #0
   2a00c:	60e3      	str	r3, [r4, #12]
   2a00e:	bd10      	pop	{r4, pc}

0002a010 <datagram_handler_free_packet>:
   2a010:	b530      	push	{r4, r5, lr}
   2a012:	4605      	mov	r5, r0
   2a014:	b085      	sub	sp, #20
   2a016:	68c0      	ldr	r0, [r0, #12]
   2a018:	f000 fa34 	bl	2a484 <linked_list_pop>
   2a01c:	4604      	mov	r4, r0
   2a01e:	b170      	cbz	r0, 2a03e <datagram_handler_free_packet+0x2e>
   2a020:	6843      	ldr	r3, [r0, #4]
   2a022:	9300      	str	r3, [sp, #0]
   2a024:	6883      	ldr	r3, [r0, #8]
   2a026:	9301      	str	r3, [sp, #4]
   2a028:	6903      	ldr	r3, [r0, #16]
   2a02a:	9302      	str	r3, [sp, #8]
   2a02c:	68c3      	ldr	r3, [r0, #12]
   2a02e:	4668      	mov	r0, sp
   2a030:	9303      	str	r3, [sp, #12]
   2a032:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2a036:	4798      	blx	r3
   2a038:	4620      	mov	r0, r4
   2a03a:	f7ed fe7f 	bl	17d3c <nrf_modem_os_free>
   2a03e:	b005      	add	sp, #20
   2a040:	bd30      	pop	{r4, r5, pc}

0002a042 <datagram_handler_init>:
   2a042:	b510      	push	{r4, lr}
   2a044:	4604      	mov	r4, r0
   2a046:	200c      	movs	r0, #12
   2a048:	f7ed fe70 	bl	17d2c <nrf_modem_os_alloc>
   2a04c:	60e0      	str	r0, [r4, #12]
   2a04e:	b118      	cbz	r0, 2a058 <datagram_handler_init+0x16>
   2a050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a054:	f000 b9fa 	b.w	2a44c <linked_list_init>
   2a058:	200c      	movs	r0, #12
   2a05a:	bd10      	pop	{r4, pc}

0002a05c <datagram_handler_put>:
   2a05c:	b570      	push	{r4, r5, r6, lr}
   2a05e:	4606      	mov	r6, r0
   2a060:	2014      	movs	r0, #20
   2a062:	460d      	mov	r5, r1
   2a064:	f7ed fe62 	bl	17d2c <nrf_modem_os_alloc>
   2a068:	4604      	mov	r4, r0
   2a06a:	b178      	cbz	r0, 2a08c <datagram_handler_put+0x30>
   2a06c:	682b      	ldr	r3, [r5, #0]
   2a06e:	4601      	mov	r1, r0
   2a070:	6043      	str	r3, [r0, #4]
   2a072:	686b      	ldr	r3, [r5, #4]
   2a074:	6083      	str	r3, [r0, #8]
   2a076:	68eb      	ldr	r3, [r5, #12]
   2a078:	60c3      	str	r3, [r0, #12]
   2a07a:	68ab      	ldr	r3, [r5, #8]
   2a07c:	6103      	str	r3, [r0, #16]
   2a07e:	68f0      	ldr	r0, [r6, #12]
   2a080:	f000 f9ed 	bl	2a45e <linked_list_push>
   2a084:	b128      	cbz	r0, 2a092 <datagram_handler_put+0x36>
   2a086:	4620      	mov	r0, r4
   2a088:	f7ed fe58 	bl	17d3c <nrf_modem_os_free>
   2a08c:	f04f 30ff 	mov.w	r0, #4294967295
   2a090:	e000      	b.n	2a094 <datagram_handler_put+0x38>
   2a092:	6868      	ldr	r0, [r5, #4]
   2a094:	bd70      	pop	{r4, r5, r6, pc}

0002a096 <datagram_handler_get>:
   2a096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a098:	4607      	mov	r7, r0
   2a09a:	68c0      	ldr	r0, [r0, #12]
   2a09c:	460c      	mov	r4, r1
   2a09e:	4616      	mov	r6, r2
   2a0a0:	f000 f9fa 	bl	2a498 <linked_list_peek>
   2a0a4:	4605      	mov	r5, r0
   2a0a6:	b328      	cbz	r0, 2a0f4 <datagram_handler_get+0x5e>
   2a0a8:	6882      	ldr	r2, [r0, #8]
   2a0aa:	6863      	ldr	r3, [r4, #4]
   2a0ac:	6820      	ldr	r0, [r4, #0]
   2a0ae:	429a      	cmp	r2, r3
   2a0b0:	bf28      	it	cs
   2a0b2:	461a      	movcs	r2, r3
   2a0b4:	6062      	str	r2, [r4, #4]
   2a0b6:	b110      	cbz	r0, 2a0be <datagram_handler_get+0x28>
   2a0b8:	6869      	ldr	r1, [r5, #4]
   2a0ba:	f000 fec5 	bl	2ae48 <memcpy>
   2a0be:	68a0      	ldr	r0, [r4, #8]
   2a0c0:	b1a8      	cbz	r0, 2a0ee <datagram_handler_get+0x58>
   2a0c2:	6929      	ldr	r1, [r5, #16]
   2a0c4:	b199      	cbz	r1, 2a0ee <datagram_handler_get+0x58>
   2a0c6:	68eb      	ldr	r3, [r5, #12]
   2a0c8:	b18b      	cbz	r3, 2a0ee <datagram_handler_get+0x58>
   2a0ca:	68e2      	ldr	r2, [r4, #12]
   2a0cc:	429a      	cmp	r2, r3
   2a0ce:	bf28      	it	cs
   2a0d0:	461a      	movcs	r2, r3
   2a0d2:	60e2      	str	r2, [r4, #12]
   2a0d4:	f000 feb8 	bl	2ae48 <memcpy>
   2a0d8:	0732      	lsls	r2, r6, #28
   2a0da:	68ad      	ldr	r5, [r5, #8]
   2a0dc:	d402      	bmi.n	2a0e4 <datagram_handler_get+0x4e>
   2a0de:	4638      	mov	r0, r7
   2a0e0:	f7ff ff96 	bl	2a010 <datagram_handler_free_packet>
   2a0e4:	06b3      	lsls	r3, r6, #26
   2a0e6:	bf4c      	ite	mi
   2a0e8:	4628      	movmi	r0, r5
   2a0ea:	6860      	ldrpl	r0, [r4, #4]
   2a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a0ee:	2300      	movs	r3, #0
   2a0f0:	60e3      	str	r3, [r4, #12]
   2a0f2:	e7f1      	b.n	2a0d8 <datagram_handler_get+0x42>
   2a0f4:	f04f 30ff 	mov.w	r0, #4294967295
   2a0f8:	e7f8      	b.n	2a0ec <datagram_handler_get+0x56>

0002a0fa <datagram_handler_available>:
   2a0fa:	b508      	push	{r3, lr}
   2a0fc:	68c0      	ldr	r0, [r0, #12]
   2a0fe:	f000 f9cb 	bl	2a498 <linked_list_peek>
   2a102:	b108      	cbz	r0, 2a108 <datagram_handler_available+0xe>
   2a104:	6880      	ldr	r0, [r0, #8]
   2a106:	bd08      	pop	{r3, pc}
   2a108:	f04f 30ff 	mov.w	r0, #4294967295
   2a10c:	e7fb      	b.n	2a106 <datagram_handler_available+0xc>

0002a10e <datagram_handler_flush>:
   2a10e:	68c3      	ldr	r3, [r0, #12]
   2a110:	b510      	push	{r4, lr}
   2a112:	4604      	mov	r4, r0
   2a114:	b923      	cbnz	r3, 2a120 <datagram_handler_flush+0x12>
   2a116:	2016      	movs	r0, #22
   2a118:	e007      	b.n	2a12a <datagram_handler_flush+0x1c>
   2a11a:	4620      	mov	r0, r4
   2a11c:	f7ff ff78 	bl	2a010 <datagram_handler_free_packet>
   2a120:	68e0      	ldr	r0, [r4, #12]
   2a122:	f000 f9bf 	bl	2a4a4 <linked_list_size_get>
   2a126:	2800      	cmp	r0, #0
   2a128:	d1f7      	bne.n	2a11a <datagram_handler_flush+0xc>
   2a12a:	bd10      	pop	{r4, pc}

0002a12c <datagram_handler_free>:
   2a12c:	68c3      	ldr	r3, [r0, #12]
   2a12e:	b510      	push	{r4, lr}
   2a130:	4604      	mov	r4, r0
   2a132:	b133      	cbz	r3, 2a142 <datagram_handler_free+0x16>
   2a134:	f7ff ffeb 	bl	2a10e <datagram_handler_flush>
   2a138:	68e0      	ldr	r0, [r4, #12]
   2a13a:	f7ed fdff 	bl	17d3c <nrf_modem_os_free>
   2a13e:	2300      	movs	r3, #0
   2a140:	60e3      	str	r3, [r4, #12]
   2a142:	bd10      	pop	{r4, pc}

0002a144 <packet_handler_delete>:
   2a144:	b510      	push	{r4, lr}
   2a146:	4604      	mov	r4, r0
   2a148:	6803      	ldr	r3, [r0, #0]
   2a14a:	691b      	ldr	r3, [r3, #16]
   2a14c:	4798      	blx	r3
   2a14e:	6823      	ldr	r3, [r4, #0]
   2a150:	4620      	mov	r0, r4
   2a152:	695b      	ldr	r3, [r3, #20]
   2a154:	4798      	blx	r3
   2a156:	4620      	mov	r0, r4
   2a158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a15c:	f7ed bdee 	b.w	17d3c <nrf_modem_os_free>

0002a160 <nrf_modem_platform_error_handler>:
   2a160:	b508      	push	{r3, lr}
   2a162:	f7e8 ff95 	bl	13090 <nrf_modem_recoverable_error_handler>
   2a166:	bd08      	pop	{r3, pc}

0002a168 <unimplemented_method>:
   2a168:	b40f      	push	{r0, r1, r2, r3}
   2a16a:	b508      	push	{r3, lr}
   2a16c:	205f      	movs	r0, #95	; 0x5f
   2a16e:	f7fe fb74 	bl	2885a <nrf_modem_os_errno_set>
   2a172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a176:	f04f 30ff 	mov.w	r0, #4294967295
   2a17a:	b004      	add	sp, #16
   2a17c:	4770      	bx	lr

0002a17e <rpc_transport_ipc_fault_handler>:
   2a17e:	f7ff bfef 	b.w	2a160 <nrf_modem_platform_error_handler>

0002a182 <nrf_modem_platform_init>:
   2a182:	b513      	push	{r0, r1, r4, lr}
   2a184:	4604      	mov	r4, r0
   2a186:	f7ed fded 	bl	17d64 <nrf_modem_os_init>
   2a18a:	6a23      	ldr	r3, [r4, #32]
   2a18c:	4668      	mov	r0, sp
   2a18e:	9400      	str	r4, [sp, #0]
   2a190:	f88d 3004 	strb.w	r3, [sp, #4]
   2a194:	f7f5 fe24 	bl	1fde0 <rpc_transport_ipc_init>
   2a198:	4604      	mov	r4, r0
   2a19a:	b948      	cbnz	r0, 2a1b0 <nrf_modem_platform_init+0x2e>
   2a19c:	f7f5 ff74 	bl	20088 <interface_init>
   2a1a0:	f7f7 fe46 	bl	21e30 <nrf_modem_at_init>
   2a1a4:	4604      	mov	r4, r0
   2a1a6:	b918      	cbnz	r0, 2a1b0 <nrf_modem_platform_init+0x2e>
   2a1a8:	f7f6 f92e 	bl	20408 <ip_interface_init>
   2a1ac:	f7f7 f9e0 	bl	21570 <tls_interface_init>
   2a1b0:	4620      	mov	r0, r4
   2a1b2:	b002      	add	sp, #8
   2a1b4:	bd10      	pop	{r4, pc}

0002a1b6 <nrf_modem_platform_fd_method_table_get>:
   2a1b6:	b510      	push	{r4, lr}
   2a1b8:	f7f6 f838 	bl	2022c <interface_socket_from_handle_get>
   2a1bc:	4604      	mov	r4, r0
   2a1be:	b130      	cbz	r0, 2a1ce <nrf_modem_platform_fd_method_table_get+0x18>
   2a1c0:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   2a1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a1c8:	68c0      	ldr	r0, [r0, #12]
   2a1ca:	f7f8 bd81 	b.w	22cd0 <nrf_modem_platform_af_method_table_get>
   2a1ce:	2009      	movs	r0, #9
   2a1d0:	f7fe fb43 	bl	2885a <nrf_modem_os_errno_set>
   2a1d4:	4620      	mov	r0, r4
   2a1d6:	bd10      	pop	{r4, pc}

0002a1d8 <internal_poll>:
   2a1d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a1dc:	2600      	movs	r6, #0
   2a1de:	4688      	mov	r8, r1
   2a1e0:	4604      	mov	r4, r0
   2a1e2:	4637      	mov	r7, r6
   2a1e4:	4546      	cmp	r6, r8
   2a1e6:	d103      	bne.n	2a1f0 <internal_poll+0x18>
   2a1e8:	4638      	mov	r0, r7
   2a1ea:	b002      	add	sp, #8
   2a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a1f0:	88a5      	ldrh	r5, [r4, #4]
   2a1f2:	6820      	ldr	r0, [r4, #0]
   2a1f4:	a901      	add	r1, sp, #4
   2a1f6:	f7ff fad5 	bl	297a4 <interface_socket_event_get>
   2a1fa:	f005 0503 	and.w	r5, r5, #3
   2a1fe:	9b01      	ldr	r3, [sp, #4]
   2a200:	f045 051c 	orr.w	r5, r5, #28
   2a204:	401d      	ands	r5, r3
   2a206:	6820      	ldr	r0, [r4, #0]
   2a208:	80e5      	strh	r5, [r4, #6]
   2a20a:	f7f6 f80f 	bl	2022c <interface_socket_from_handle_get>
   2a20e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   2a212:	b168      	cbz	r0, 2a230 <internal_poll+0x58>
   2a214:	071a      	lsls	r2, r3, #28
   2a216:	d50b      	bpl.n	2a230 <internal_poll+0x58>
   2a218:	6942      	ldr	r2, [r0, #20]
   2a21a:	2a01      	cmp	r2, #1
   2a21c:	d003      	beq.n	2a226 <internal_poll+0x4e>
   2a21e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   2a222:	2a01      	cmp	r2, #1
   2a224:	d802      	bhi.n	2a22c <internal_poll+0x54>
   2a226:	f043 0301 	orr.w	r3, r3, #1
   2a22a:	80e3      	strh	r3, [r4, #6]
   2a22c:	3701      	adds	r7, #1
   2a22e:	e001      	b.n	2a234 <internal_poll+0x5c>
   2a230:	2b00      	cmp	r3, #0
   2a232:	d1fb      	bne.n	2a22c <internal_poll+0x54>
   2a234:	3601      	adds	r6, #1
   2a236:	3408      	adds	r4, #8
   2a238:	e7d4      	b.n	2a1e4 <internal_poll+0xc>

0002a23a <nrf_modem_platform_getaddrinfo>:
   2a23a:	f7f6 bd91 	b.w	20d60 <ip_interface_getaddrinfo>

0002a23e <nrf_modem_platform_freeaddrinfo>:
   2a23e:	f7f6 be8d 	b.w	20f5c <ip_interface_freeaddrinfo>

0002a242 <nrf_modem_platform_poll>:
   2a242:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a244:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2a248:	2908      	cmp	r1, #8
   2a24a:	4605      	mov	r5, r0
   2a24c:	460e      	mov	r6, r1
   2a24e:	9201      	str	r2, [sp, #4]
   2a250:	d906      	bls.n	2a260 <nrf_modem_platform_poll+0x1e>
   2a252:	2016      	movs	r0, #22
   2a254:	f7fe fb01 	bl	2885a <nrf_modem_os_errno_set>
   2a258:	f04f 30ff 	mov.w	r0, #4294967295
   2a25c:	b002      	add	sp, #8
   2a25e:	bd70      	pop	{r4, r5, r6, pc}
   2a260:	b910      	cbnz	r0, 2a268 <nrf_modem_platform_poll+0x26>
   2a262:	b109      	cbz	r1, 2a268 <nrf_modem_platform_poll+0x26>
   2a264:	200e      	movs	r0, #14
   2a266:	e7f5      	b.n	2a254 <nrf_modem_platform_poll+0x12>
   2a268:	4631      	mov	r1, r6
   2a26a:	4628      	mov	r0, r5
   2a26c:	f7ff ffb4 	bl	2a1d8 <internal_poll>
   2a270:	2400      	movs	r4, #0
   2a272:	2800      	cmp	r0, #0
   2a274:	d1f2      	bne.n	2a25c <nrf_modem_platform_poll+0x1a>
   2a276:	2c00      	cmp	r4, #0
   2a278:	d1f0      	bne.n	2a25c <nrf_modem_platform_poll+0x1a>
   2a27a:	4628      	mov	r0, r5
   2a27c:	a901      	add	r1, sp, #4
   2a27e:	f7ed fc61 	bl	17b44 <nrf_modem_os_timedwait>
   2a282:	4604      	mov	r4, r0
   2a284:	b118      	cbz	r0, 2a28e <nrf_modem_platform_poll+0x4c>
   2a286:	2874      	cmp	r0, #116	; 0x74
   2a288:	d001      	beq.n	2a28e <nrf_modem_platform_poll+0x4c>
   2a28a:	200b      	movs	r0, #11
   2a28c:	e7e2      	b.n	2a254 <nrf_modem_platform_poll+0x12>
   2a28e:	4631      	mov	r1, r6
   2a290:	4628      	mov	r0, r5
   2a292:	f7ff ffa1 	bl	2a1d8 <internal_poll>
   2a296:	e7ec      	b.n	2a272 <nrf_modem_platform_poll+0x30>

0002a298 <nrf_modem_platform_fcntl>:
   2a298:	f7f6 b85a 	b.w	20350 <interface_socket_fcntl>

0002a29c <nrf_socket>:
   2a29c:	b570      	push	{r4, r5, r6, lr}
   2a29e:	4604      	mov	r4, r0
   2a2a0:	460d      	mov	r5, r1
   2a2a2:	4616      	mov	r6, r2
   2a2a4:	f7f8 fd14 	bl	22cd0 <nrf_modem_platform_af_method_table_get>
   2a2a8:	b130      	cbz	r0, 2a2b8 <nrf_socket+0x1c>
   2a2aa:	4632      	mov	r2, r6
   2a2ac:	4629      	mov	r1, r5
   2a2ae:	6803      	ldr	r3, [r0, #0]
   2a2b0:	4620      	mov	r0, r4
   2a2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a2b6:	4718      	bx	r3
   2a2b8:	f04f 30ff 	mov.w	r0, #4294967295
   2a2bc:	bd70      	pop	{r4, r5, r6, pc}

0002a2be <nrf_close>:
   2a2be:	b510      	push	{r4, lr}
   2a2c0:	4604      	mov	r4, r0
   2a2c2:	f7ff ff78 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a2c6:	b120      	cbz	r0, 2a2d2 <nrf_close+0x14>
   2a2c8:	6843      	ldr	r3, [r0, #4]
   2a2ca:	4620      	mov	r0, r4
   2a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a2d0:	4718      	bx	r3
   2a2d2:	f04f 30ff 	mov.w	r0, #4294967295
   2a2d6:	bd10      	pop	{r4, pc}

0002a2d8 <nrf_sendto>:
   2a2d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a2da:	4604      	mov	r4, r0
   2a2dc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2a2e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2a2e4:	9301      	str	r3, [sp, #4]
   2a2e6:	f7ff ff66 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a2ea:	b158      	cbz	r0, 2a304 <nrf_sendto+0x2c>
   2a2ec:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2a2f0:	e9cd 5608 	strd	r5, r6, [sp, #32]
   2a2f4:	6885      	ldr	r5, [r0, #8]
   2a2f6:	4620      	mov	r0, r4
   2a2f8:	46ac      	mov	ip, r5
   2a2fa:	9903      	ldr	r1, [sp, #12]
   2a2fc:	b004      	add	sp, #16
   2a2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a302:	4760      	bx	ip
   2a304:	f04f 30ff 	mov.w	r0, #4294967295
   2a308:	b004      	add	sp, #16
   2a30a:	bd70      	pop	{r4, r5, r6, pc}

0002a30c <nrf_recvfrom>:
   2a30c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a30e:	4604      	mov	r4, r0
   2a310:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2a314:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2a318:	9301      	str	r3, [sp, #4]
   2a31a:	f7ff ff4c 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a31e:	b158      	cbz	r0, 2a338 <nrf_recvfrom+0x2c>
   2a320:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2a324:	e9cd 5608 	strd	r5, r6, [sp, #32]
   2a328:	68c5      	ldr	r5, [r0, #12]
   2a32a:	4620      	mov	r0, r4
   2a32c:	46ac      	mov	ip, r5
   2a32e:	9903      	ldr	r1, [sp, #12]
   2a330:	b004      	add	sp, #16
   2a332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a336:	4760      	bx	ip
   2a338:	f04f 30ff 	mov.w	r0, #4294967295
   2a33c:	b004      	add	sp, #16
   2a33e:	bd70      	pop	{r4, r5, r6, pc}

0002a340 <nrf_connect>:
   2a340:	b513      	push	{r0, r1, r4, lr}
   2a342:	4604      	mov	r4, r0
   2a344:	e9cd 2100 	strd	r2, r1, [sp]
   2a348:	f7ff ff35 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a34c:	b138      	cbz	r0, 2a35e <nrf_connect+0x1e>
   2a34e:	e9dd 2100 	ldrd	r2, r1, [sp]
   2a352:	6943      	ldr	r3, [r0, #20]
   2a354:	4620      	mov	r0, r4
   2a356:	b002      	add	sp, #8
   2a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a35c:	4718      	bx	r3
   2a35e:	f04f 30ff 	mov.w	r0, #4294967295
   2a362:	b002      	add	sp, #8
   2a364:	bd10      	pop	{r4, pc}

0002a366 <nrf_listen>:
   2a366:	b513      	push	{r0, r1, r4, lr}
   2a368:	4604      	mov	r4, r0
   2a36a:	9101      	str	r1, [sp, #4]
   2a36c:	f7ff ff23 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a370:	b130      	cbz	r0, 2a380 <nrf_listen+0x1a>
   2a372:	6983      	ldr	r3, [r0, #24]
   2a374:	4620      	mov	r0, r4
   2a376:	9901      	ldr	r1, [sp, #4]
   2a378:	b002      	add	sp, #8
   2a37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a37e:	4718      	bx	r3
   2a380:	f04f 30ff 	mov.w	r0, #4294967295
   2a384:	b002      	add	sp, #8
   2a386:	bd10      	pop	{r4, pc}

0002a388 <nrf_accept>:
   2a388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a38a:	4604      	mov	r4, r0
   2a38c:	e9cd 2100 	strd	r2, r1, [sp]
   2a390:	f7ff ff11 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a394:	b148      	cbz	r0, 2a3aa <nrf_accept+0x22>
   2a396:	e9dd 2100 	ldrd	r2, r1, [sp]
   2a39a:	69c5      	ldr	r5, [r0, #28]
   2a39c:	2300      	movs	r3, #0
   2a39e:	4620      	mov	r0, r4
   2a3a0:	46ac      	mov	ip, r5
   2a3a2:	b003      	add	sp, #12
   2a3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a3a8:	4760      	bx	ip
   2a3aa:	f04f 30ff 	mov.w	r0, #4294967295
   2a3ae:	b003      	add	sp, #12
   2a3b0:	bd30      	pop	{r4, r5, pc}

0002a3b2 <nrf_bind>:
   2a3b2:	b513      	push	{r0, r1, r4, lr}
   2a3b4:	4604      	mov	r4, r0
   2a3b6:	e9cd 2100 	strd	r2, r1, [sp]
   2a3ba:	f7ff fefc 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a3be:	b138      	cbz	r0, 2a3d0 <nrf_bind+0x1e>
   2a3c0:	e9dd 2100 	ldrd	r2, r1, [sp]
   2a3c4:	6903      	ldr	r3, [r0, #16]
   2a3c6:	4620      	mov	r0, r4
   2a3c8:	b002      	add	sp, #8
   2a3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a3ce:	4718      	bx	r3
   2a3d0:	f04f 30ff 	mov.w	r0, #4294967295
   2a3d4:	b002      	add	sp, #8
   2a3d6:	bd10      	pop	{r4, pc}

0002a3d8 <nrf_setsockopt>:
   2a3d8:	b530      	push	{r4, r5, lr}
   2a3da:	b085      	sub	sp, #20
   2a3dc:	4604      	mov	r4, r0
   2a3de:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2a3e2:	9d08      	ldr	r5, [sp, #32]
   2a3e4:	9301      	str	r3, [sp, #4]
   2a3e6:	f7ff fee6 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a3ea:	b150      	cbz	r0, 2a402 <nrf_setsockopt+0x2a>
   2a3ec:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2a3f0:	9508      	str	r5, [sp, #32]
   2a3f2:	6a05      	ldr	r5, [r0, #32]
   2a3f4:	4620      	mov	r0, r4
   2a3f6:	46ac      	mov	ip, r5
   2a3f8:	9903      	ldr	r1, [sp, #12]
   2a3fa:	b005      	add	sp, #20
   2a3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a400:	4760      	bx	ip
   2a402:	f04f 30ff 	mov.w	r0, #4294967295
   2a406:	b005      	add	sp, #20
   2a408:	bd30      	pop	{r4, r5, pc}

0002a40a <nrf_getsockopt>:
   2a40a:	b530      	push	{r4, r5, lr}
   2a40c:	b085      	sub	sp, #20
   2a40e:	4604      	mov	r4, r0
   2a410:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2a414:	9d08      	ldr	r5, [sp, #32]
   2a416:	9301      	str	r3, [sp, #4]
   2a418:	f7ff fecd 	bl	2a1b6 <nrf_modem_platform_fd_method_table_get>
   2a41c:	b150      	cbz	r0, 2a434 <nrf_getsockopt+0x2a>
   2a41e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2a422:	9508      	str	r5, [sp, #32]
   2a424:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2a426:	4620      	mov	r0, r4
   2a428:	46ac      	mov	ip, r5
   2a42a:	9903      	ldr	r1, [sp, #12]
   2a42c:	b005      	add	sp, #20
   2a42e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a432:	4760      	bx	ip
   2a434:	f04f 30ff 	mov.w	r0, #4294967295
   2a438:	b005      	add	sp, #20
   2a43a:	bd30      	pop	{r4, r5, pc}

0002a43c <nrf_getaddrinfo>:
   2a43c:	f7ff befd 	b.w	2a23a <nrf_modem_platform_getaddrinfo>

0002a440 <nrf_freeaddrinfo>:
   2a440:	f7ff befd 	b.w	2a23e <nrf_modem_platform_freeaddrinfo>

0002a444 <nrf_poll>:
   2a444:	f7ff befd 	b.w	2a242 <nrf_modem_platform_poll>

0002a448 <nrf_fcntl>:
   2a448:	f7ff bf26 	b.w	2a298 <nrf_modem_platform_fcntl>

0002a44c <linked_list_init>:
   2a44c:	b128      	cbz	r0, 2a45a <linked_list_init+0xe>
   2a44e:	2300      	movs	r3, #0
   2a450:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2a454:	6003      	str	r3, [r0, #0]
   2a456:	4618      	mov	r0, r3
   2a458:	4770      	bx	lr
   2a45a:	2016      	movs	r0, #22
   2a45c:	4770      	bx	lr

0002a45e <linked_list_push>:
   2a45e:	6803      	ldr	r3, [r0, #0]
   2a460:	3301      	adds	r3, #1
   2a462:	d00d      	beq.n	2a480 <linked_list_push+0x22>
   2a464:	2300      	movs	r3, #0
   2a466:	600b      	str	r3, [r1, #0]
   2a468:	6803      	ldr	r3, [r0, #0]
   2a46a:	b933      	cbnz	r3, 2a47a <linked_list_push+0x1c>
   2a46c:	6041      	str	r1, [r0, #4]
   2a46e:	6803      	ldr	r3, [r0, #0]
   2a470:	6081      	str	r1, [r0, #8]
   2a472:	3301      	adds	r3, #1
   2a474:	6003      	str	r3, [r0, #0]
   2a476:	2000      	movs	r0, #0
   2a478:	4770      	bx	lr
   2a47a:	6883      	ldr	r3, [r0, #8]
   2a47c:	6019      	str	r1, [r3, #0]
   2a47e:	e7f6      	b.n	2a46e <linked_list_push+0x10>
   2a480:	200c      	movs	r0, #12
   2a482:	4770      	bx	lr

0002a484 <linked_list_pop>:
   2a484:	4603      	mov	r3, r0
   2a486:	6800      	ldr	r0, [r0, #0]
   2a488:	b128      	cbz	r0, 2a496 <linked_list_pop+0x12>
   2a48a:	6858      	ldr	r0, [r3, #4]
   2a48c:	6802      	ldr	r2, [r0, #0]
   2a48e:	605a      	str	r2, [r3, #4]
   2a490:	681a      	ldr	r2, [r3, #0]
   2a492:	3a01      	subs	r2, #1
   2a494:	601a      	str	r2, [r3, #0]
   2a496:	4770      	bx	lr

0002a498 <linked_list_peek>:
   2a498:	6803      	ldr	r3, [r0, #0]
   2a49a:	b10b      	cbz	r3, 2a4a0 <linked_list_peek+0x8>
   2a49c:	6840      	ldr	r0, [r0, #4]
   2a49e:	4770      	bx	lr
   2a4a0:	4618      	mov	r0, r3
   2a4a2:	4770      	bx	lr

0002a4a4 <linked_list_size_get>:
   2a4a4:	6800      	ldr	r0, [r0, #0]
   2a4a6:	4770      	bx	lr

0002a4a8 <linked_list_get_next>:
   2a4a8:	6800      	ldr	r0, [r0, #0]
   2a4aa:	4770      	bx	lr

0002a4ac <z_device_state_init>:
}
   2a4ac:	4770      	bx	lr

0002a4ae <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2a4ae:	b138      	cbz	r0, 2a4c0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2a4b0:	68c3      	ldr	r3, [r0, #12]
   2a4b2:	8818      	ldrh	r0, [r3, #0]
   2a4b4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2a4b8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2a4bc:	4258      	negs	r0, r3
   2a4be:	4158      	adcs	r0, r3
}
   2a4c0:	4770      	bx	lr

0002a4c2 <k_heap_init>:
{
   2a4c2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2a4c4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a4c8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2a4d0:	f7fb bf85 	b.w	263de <sys_heap_init>

0002a4d4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4d8:	b087      	sub	sp, #28
   2a4da:	4604      	mov	r4, r0
   2a4dc:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a4de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2a4e2:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a4e4:	f000 faec 	bl	2aac0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a4e8:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a4ec:	4605      	mov	r5, r0
   2a4ee:	4688      	mov	r8, r1
	__asm__ volatile(
   2a4f0:	f04f 0320 	mov.w	r3, #32
   2a4f4:	f3ef 8b11 	mrs	fp, BASEPRI
   2a4f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4fc:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a500:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2a504:	463a      	mov	r2, r7
   2a506:	4631      	mov	r1, r6
   2a508:	4620      	mov	r0, r4
   2a50a:	f7fb feff 	bl	2630c <sys_heap_aligned_alloc>
   2a50e:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   2a510:	f7f9 fe72 	bl	241f8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2a514:	9b05      	ldr	r3, [sp, #20]
   2a516:	b13b      	cbz	r3, 2a528 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2a518:	f38b 8811 	msr	BASEPRI, fp
   2a51c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2a520:	4618      	mov	r0, r3
   2a522:	b007      	add	sp, #28
   2a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2a528:	1a2a      	subs	r2, r5, r0
   2a52a:	9202      	str	r2, [sp, #8]
   2a52c:	eb68 0201 	sbc.w	r2, r8, r1
   2a530:	9203      	str	r2, [sp, #12]
   2a532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2a536:	2901      	cmp	r1, #1
   2a538:	f172 0200 	sbcs.w	r2, r2, #0
   2a53c:	dbec      	blt.n	2a518 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a53e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2a542:	4659      	mov	r1, fp
   2a544:	e9cd 2300 	strd	r2, r3, [sp]
   2a548:	4648      	mov	r0, r9
   2a54a:	4652      	mov	r2, sl
   2a54c:	f7f9 fb1c 	bl	23b88 <z_pend_curr>
	__asm__ volatile(
   2a550:	f04f 0320 	mov.w	r3, #32
   2a554:	f3ef 8b11 	mrs	fp, BASEPRI
   2a558:	f383 8812 	msr	BASEPRI_MAX, r3
   2a55c:	f3bf 8f6f 	isb	sy
   2a560:	e7d0      	b.n	2a504 <k_heap_aligned_alloc+0x30>

0002a562 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2a562:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   2a564:	e9cd 2300 	strd	r2, r3, [sp]
   2a568:	460a      	mov	r2, r1
   2a56a:	2104      	movs	r1, #4
   2a56c:	f7ff ffb2 	bl	2a4d4 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   2a570:	b003      	add	sp, #12
   2a572:	f85d fb04 	ldr.w	pc, [sp], #4

0002a576 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2a576:	b538      	push	{r3, r4, r5, lr}
   2a578:	4604      	mov	r4, r0
   2a57a:	f04f 0320 	mov.w	r3, #32
   2a57e:	f3ef 8511 	mrs	r5, BASEPRI
   2a582:	f383 8812 	msr	BASEPRI_MAX, r3
   2a586:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2a58a:	f7fb fe85 	bl	26298 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2a58e:	f104 000c 	add.w	r0, r4, #12
   2a592:	f000 fa1d 	bl	2a9d0 <z_unpend_all>
   2a596:	b130      	cbz	r0, 2a5a6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2a598:	4629      	mov	r1, r5
   2a59a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2a59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2a5a2:	f7f9 b979 	b.w	23898 <z_reschedule>
	__asm__ volatile(
   2a5a6:	f385 8811 	msr	BASEPRI, r5
   2a5aa:	f3bf 8f6f 	isb	sy
}
   2a5ae:	bd38      	pop	{r3, r4, r5, pc}

0002a5b0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a5b0:	f3ef 8005 	mrs	r0, IPSR
}
   2a5b4:	3800      	subs	r0, #0
   2a5b6:	bf18      	it	ne
   2a5b8:	2001      	movne	r0, #1
   2a5ba:	4770      	bx	lr

0002a5bc <z_impl_k_thread_name_set>:
}
   2a5bc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2a5c0:	4770      	bx	lr

0002a5c2 <k_thread_name_get>:
}
   2a5c2:	2000      	movs	r0, #0
   2a5c4:	4770      	bx	lr

0002a5c6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a5c6:	f7f9 ba65 	b.w	23a94 <z_sched_start>

0002a5ca <z_pm_save_idle_exit>:
{
   2a5ca:	b508      	push	{r3, lr}
	pm_system_resume();
   2a5cc:	f7eb f90e 	bl	157ec <pm_system_resume>
}
   2a5d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2a5d4:	f7fe b93a 	b.w	2884c <sys_clock_idle_exit>

0002a5d8 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2a5d8:	2300      	movs	r3, #0
   2a5da:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2a5de:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2a5e2:	4618      	mov	r0, r3
   2a5e4:	4770      	bx	lr

0002a5e6 <queue_insert>:
{
   2a5e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a5ea:	4699      	mov	r9, r3
   2a5ec:	4604      	mov	r4, r0
   2a5ee:	460d      	mov	r5, r1
   2a5f0:	4690      	mov	r8, r2
   2a5f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a5f6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2a5fa:	f04f 0220 	mov.w	r2, #32
   2a5fe:	f3ef 8711 	mrs	r7, BASEPRI
   2a602:	f382 8812 	msr	BASEPRI_MAX, r2
   2a606:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2a60a:	b103      	cbz	r3, 2a60e <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2a60c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2a60e:	4630      	mov	r0, r6
   2a610:	f000 f9c6 	bl	2a9a0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2a614:	b158      	cbz	r0, 2a62e <queue_insert+0x48>
   2a616:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a618:	f8c0 8014 	str.w	r8, [r0, #20]
   2a61c:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2a61e:	f000 f960 	bl	2a8e2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2a622:	4630      	mov	r0, r6
   2a624:	4639      	mov	r1, r7
   2a626:	f7f9 f937 	bl	23898 <z_reschedule>
	return 0;
   2a62a:	2000      	movs	r0, #0
   2a62c:	e00c      	b.n	2a648 <queue_insert+0x62>
	if (alloc) {
   2a62e:	f1b9 0f00 	cmp.w	r9, #0
   2a632:	d01b      	beq.n	2a66c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2a634:	2108      	movs	r1, #8
   2a636:	f7f9 fe85 	bl	24344 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2a63a:	b938      	cbnz	r0, 2a64c <queue_insert+0x66>
	__asm__ volatile(
   2a63c:	f387 8811 	msr	BASEPRI, r7
   2a640:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a644:	f06f 000b 	mvn.w	r0, #11
}
   2a648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2a64c:	2301      	movs	r3, #1
		anode->data = data;
   2a64e:	f8c0 8004 	str.w	r8, [r0, #4]
   2a652:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2a654:	6803      	ldr	r3, [r0, #0]
   2a656:	f003 0203 	and.w	r2, r3, #3
   2a65a:	b95d      	cbnz	r5, 2a674 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a65c:	6823      	ldr	r3, [r4, #0]
   2a65e:	4313      	orrs	r3, r2
   2a660:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a662:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2a664:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a666:	b973      	cbnz	r3, 2a686 <queue_insert+0xa0>
	list->tail = node;
   2a668:	6060      	str	r0, [r4, #4]
}
   2a66a:	e00c      	b.n	2a686 <queue_insert+0xa0>
}
   2a66c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2a66e:	f8c8 9000 	str.w	r9, [r8]
}
   2a672:	e7ef      	b.n	2a654 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a674:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2a676:	f033 0303 	bics.w	r3, r3, #3
   2a67a:	d110      	bne.n	2a69e <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a67c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2a67e:	6862      	ldr	r2, [r4, #4]
   2a680:	b93a      	cbnz	r2, 2a692 <queue_insert+0xac>
	list->head = node;
   2a682:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a686:	2104      	movs	r1, #4
   2a688:	f104 0010 	add.w	r0, r4, #16
   2a68c:	f000 fb78 	bl	2ad80 <z_handle_obj_poll_events>
   2a690:	e7c7      	b.n	2a622 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a692:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a694:	f003 0303 	and.w	r3, r3, #3
   2a698:	4303      	orrs	r3, r0
   2a69a:	6013      	str	r3, [r2, #0]
   2a69c:	e7e4      	b.n	2a668 <queue_insert+0x82>
   2a69e:	4313      	orrs	r3, r2
   2a6a0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a6a2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a6a4:	f003 0303 	and.w	r3, r3, #3
   2a6a8:	4303      	orrs	r3, r0
   2a6aa:	602b      	str	r3, [r5, #0]
}
   2a6ac:	e7eb      	b.n	2a686 <queue_insert+0xa0>

0002a6ae <z_queue_node_peek>:
{
   2a6ae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a6b0:	4604      	mov	r4, r0
   2a6b2:	b130      	cbz	r0, 2a6c2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a6b4:	6802      	ldr	r2, [r0, #0]
   2a6b6:	0793      	lsls	r3, r2, #30
   2a6b8:	d003      	beq.n	2a6c2 <z_queue_node_peek+0x14>
		ret = anode->data;
   2a6ba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a6bc:	b109      	cbz	r1, 2a6c2 <z_queue_node_peek+0x14>
			k_free(anode);
   2a6be:	f000 fb80 	bl	2adc2 <k_free>
}
   2a6c2:	4620      	mov	r0, r4
   2a6c4:	bd10      	pop	{r4, pc}

0002a6c6 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2a6c6:	2301      	movs	r3, #1
{
   2a6c8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a6ca:	9300      	str	r3, [sp, #0]
   2a6cc:	2300      	movs	r3, #0
{
   2a6ce:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a6d0:	4619      	mov	r1, r3
   2a6d2:	f7ff ff88 	bl	2a5e6 <queue_insert>
}
   2a6d6:	b003      	add	sp, #12
   2a6d8:	f85d fb04 	ldr.w	pc, [sp], #4

0002a6dc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a6dc:	b15a      	cbz	r2, 2a6f6 <z_impl_k_sem_init+0x1a>
   2a6de:	428a      	cmp	r2, r1
   2a6e0:	d309      	bcc.n	2a6f6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a6e2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a6e6:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2a6ea:	e9c0 0000 	strd	r0, r0, [r0]
   2a6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a6f2:	2000      	movs	r0, #0
   2a6f4:	4770      	bx	lr
		return -EINVAL;
   2a6f6:	f06f 0015 	mvn.w	r0, #21
}
   2a6fa:	4770      	bx	lr

0002a6fc <notify_queue_locked>:
	if (queue != NULL) {
   2a6fc:	b120      	cbz	r0, 2a708 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2a6fe:	2200      	movs	r2, #0
   2a700:	30d0      	adds	r0, #208	; 0xd0
   2a702:	4611      	mov	r1, r2
   2a704:	f000 b974 	b.w	2a9f0 <z_sched_wake>
}
   2a708:	4770      	bx	lr

0002a70a <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2a70a:	68c3      	ldr	r3, [r0, #12]
{
   2a70c:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2a70e:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2a712:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a716:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2a718:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a71a:	d502      	bpl.n	2a722 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2a71c:	3010      	adds	r0, #16
   2a71e:	f000 f984 	bl	2aa2a <z_abort_timeout>
}
   2a722:	4620      	mov	r0, r4
   2a724:	bd10      	pop	{r4, pc}

0002a726 <cancel_async_locked>:
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a726:	68c1      	ldr	r1, [r0, #12]
{
   2a728:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a72a:	078c      	lsls	r4, r1, #30
   2a72c:	f3c1 0240 	ubfx	r2, r1, #1, #1
   2a730:	d416      	bmi.n	2a760 <cancel_async_locked+0x3a>
	*flagp &= ~BIT(bit);
   2a732:	f021 0404 	bic.w	r4, r1, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a736:	0749      	lsls	r1, r1, #29
		queue_remove_locked(work->queue, work);
   2a738:	6883      	ldr	r3, [r0, #8]
	*flagp &= ~BIT(bit);
   2a73a:	60c4      	str	r4, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a73c:	d510      	bpl.n	2a760 <cancel_async_locked+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a73e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   2a742:	b169      	cbz	r1, 2a760 <cancel_async_locked+0x3a>
   2a744:	4288      	cmp	r0, r1
   2a746:	d11e      	bne.n	2a786 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2a748:	6801      	ldr	r1, [r0, #0]
   2a74a:	b9a2      	cbnz	r2, 2a776 <cancel_async_locked+0x50>
   2a74c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
	list->head = node;
   2a750:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   2a754:	4290      	cmp	r0, r2
   2a756:	d101      	bne.n	2a75c <cancel_async_locked+0x36>
	list->tail = node;
   2a758:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	parent->next = child;
   2a75c:	2300      	movs	r3, #0
   2a75e:	6003      	str	r3, [r0, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a760:	68c3      	ldr	r3, [r0, #12]
	if (ret != 0) {
   2a762:	f013 020f 	ands.w	r2, r3, #15
	*flagp |= BIT(bit);
   2a766:	bf1e      	ittt	ne
   2a768:	f043 0302 	orrne.w	r3, r3, #2
	return flags_get(&work->flags) & K_WORK_MASK;
   2a76c:	f003 020f 	andne.w	r2, r3, #15
	*flagp |= BIT(bit);
   2a770:	60c3      	strne	r3, [r0, #12]
}
   2a772:	4610      	mov	r0, r2
   2a774:	bd10      	pop	{r4, pc}
   2a776:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a778:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
   2a77c:	4288      	cmp	r0, r1
	list->tail = node;
   2a77e:	bf08      	it	eq
   2a780:	f8c3 20cc 	streq.w	r2, [r3, #204]	; 0xcc
}
   2a784:	e7ea      	b.n	2a75c <cancel_async_locked+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a786:	460a      	mov	r2, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a788:	6809      	ldr	r1, [r1, #0]
   2a78a:	e7da      	b.n	2a742 <cancel_async_locked+0x1c>

0002a78c <work_timeout>:
{
   2a78c:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   2a78e:	f04f 0320 	mov.w	r3, #32
   2a792:	f3ef 8411 	mrs	r4, BASEPRI
   2a796:	f383 8812 	msr	BASEPRI_MAX, r3
   2a79a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a79e:	2300      	movs	r3, #0
   2a7a0:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   2a7a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   2a7a6:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a7aa:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2a7ac:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a7b0:	d505      	bpl.n	2a7be <work_timeout+0x32>
		queue = dw->queue;
   2a7b2:	6983      	ldr	r3, [r0, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2a7b4:	a901      	add	r1, sp, #4
   2a7b6:	3810      	subs	r0, #16
		queue = dw->queue;
   2a7b8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a7ba:	f7f8 ff31 	bl	23620 <submit_to_queue_locked>
	__asm__ volatile(
   2a7be:	f384 8811 	msr	BASEPRI, r4
   2a7c2:	f3bf 8f6f 	isb	sy
}
   2a7c6:	b002      	add	sp, #8
   2a7c8:	bd10      	pop	{r4, pc}

0002a7ca <k_work_submit_to_queue>:
{
   2a7ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a7cc:	9001      	str	r0, [sp, #4]
   2a7ce:	4608      	mov	r0, r1
	__asm__ volatile(
   2a7d0:	f04f 0320 	mov.w	r3, #32
   2a7d4:	f3ef 8511 	mrs	r5, BASEPRI
   2a7d8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a7dc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a7e0:	a901      	add	r1, sp, #4
   2a7e2:	f7f8 ff1d 	bl	23620 <submit_to_queue_locked>
   2a7e6:	4604      	mov	r4, r0
	__asm__ volatile(
   2a7e8:	f385 8811 	msr	BASEPRI, r5
   2a7ec:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2a7f0:	2800      	cmp	r0, #0
   2a7f2:	dd04      	ble.n	2a7fe <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2a7f4:	f7f9 fb30 	bl	23e58 <z_impl_k_is_preempt_thread>
   2a7f8:	b108      	cbz	r0, 2a7fe <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2a7fa:	f7f9 fa7f 	bl	23cfc <z_impl_k_yield>
}
   2a7fe:	4620      	mov	r0, r4
   2a800:	b003      	add	sp, #12
   2a802:	bd30      	pop	{r4, r5, pc}

0002a804 <k_work_init_delayable>:
{
   2a804:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2a806:	2230      	movs	r2, #48	; 0x30
{
   2a808:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2a80a:	2100      	movs	r1, #0
{
   2a80c:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   2a80e:	f000 fb3b 	bl	2ae88 <memset>
   2a812:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a816:	6065      	str	r5, [r4, #4]
   2a818:	60e3      	str	r3, [r4, #12]
}
   2a81a:	bd38      	pop	{r3, r4, r5, pc}

0002a81c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a81c:	b538      	push	{r3, r4, r5, lr}
   2a81e:	4604      	mov	r4, r0
	__asm__ volatile(
   2a820:	f04f 0320 	mov.w	r3, #32
   2a824:	f3ef 8511 	mrs	r5, BASEPRI
   2a828:	f383 8812 	msr	BASEPRI_MAX, r3
   2a82c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2a830:	f7ff ff6b 	bl	2a70a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a834:	4620      	mov	r0, r4
   2a836:	f7ff ff76 	bl	2a726 <cancel_async_locked>
	__asm__ volatile(
   2a83a:	f385 8811 	msr	BASEPRI, r5
   2a83e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a842:	bd38      	pop	{r3, r4, r5, pc}

0002a844 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2a844:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a848:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a84a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a84c:	2300      	movs	r3, #0
	node->prev = NULL;
   2a84e:	e9c0 3300 	strd	r3, r3, [r0]
}
   2a852:	4770      	bx	lr

0002a854 <unpend_thread_no_timeout>:
{
   2a854:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2a856:	f7ff fff5 	bl	2a844 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a85a:	7b43      	ldrb	r3, [r0, #13]
   2a85c:	f023 0302 	bic.w	r3, r3, #2
   2a860:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2a862:	2300      	movs	r3, #0
   2a864:	6083      	str	r3, [r0, #8]
}
   2a866:	bd08      	pop	{r3, pc}

0002a868 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2a868:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2a86c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2a870:	4283      	cmp	r3, r0
		return b2 - b1;
   2a872:	bf14      	ite	ne
   2a874:	1ac0      	subne	r0, r0, r3
	return 0;
   2a876:	2000      	moveq	r0, #0
}
   2a878:	4770      	bx	lr

0002a87a <z_unpend_thread>:
{
   2a87a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a87c:	f04f 0320 	mov.w	r3, #32
   2a880:	f3ef 8411 	mrs	r4, BASEPRI
   2a884:	f383 8812 	msr	BASEPRI_MAX, r3
   2a888:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2a88c:	f7ff ffe2 	bl	2a854 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a890:	f384 8811 	msr	BASEPRI, r4
   2a894:	f3bf 8f6f 	isb	sy
}
   2a898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a89c:	3018      	adds	r0, #24
   2a89e:	f000 b8c4 	b.w	2aa2a <z_abort_timeout>

0002a8a2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a8a2:	4603      	mov	r3, r0
   2a8a4:	b920      	cbnz	r0, 2a8b0 <z_reschedule_irqlock+0xe>
   2a8a6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2a8aa:	b90a      	cbnz	r2, 2a8b0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2a8ac:	f7eb b96c 	b.w	15b88 <arch_swap>
   2a8b0:	f383 8811 	msr	BASEPRI, r3
   2a8b4:	f3bf 8f6f 	isb	sy
}
   2a8b8:	4770      	bx	lr

0002a8ba <z_reschedule_unlocked>:
	__asm__ volatile(
   2a8ba:	f04f 0320 	mov.w	r3, #32
   2a8be:	f3ef 8011 	mrs	r0, BASEPRI
   2a8c2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a8c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a8ca:	f7ff bfea 	b.w	2a8a2 <z_reschedule_irqlock>

0002a8ce <z_priq_dumb_best>:
	return list->head == list;
   2a8ce:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a8d0:	4298      	cmp	r0, r3
   2a8d2:	d004      	beq.n	2a8de <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2a8d4:	2b00      	cmp	r3, #0
   2a8d6:	bf38      	it	cc
   2a8d8:	2300      	movcc	r3, #0
   2a8da:	4618      	mov	r0, r3
   2a8dc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2a8de:	2000      	movs	r0, #0
}
   2a8e0:	4770      	bx	lr

0002a8e2 <z_ready_thread>:
{
   2a8e2:	b510      	push	{r4, lr}
   2a8e4:	f04f 0320 	mov.w	r3, #32
   2a8e8:	f3ef 8411 	mrs	r4, BASEPRI
   2a8ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2a8f0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2a8f4:	f7f9 f896 	bl	23a24 <ready_thread>
	__asm__ volatile(
   2a8f8:	f384 8811 	msr	BASEPRI, r4
   2a8fc:	f3bf 8f6f 	isb	sy
}
   2a900:	bd10      	pop	{r4, pc}

0002a902 <z_thread_timeout>:
{
   2a902:	4601      	mov	r1, r0
   2a904:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a906:	f04f 0320 	mov.w	r3, #32
   2a90a:	f3ef 8411 	mrs	r4, BASEPRI
   2a90e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a912:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2a916:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2a91a:	f013 0f28 	tst.w	r3, #40	; 0x28
   2a91e:	d10d      	bne.n	2a93c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2a920:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2a924:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2a926:	b10b      	cbz	r3, 2a92c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2a928:	f7ff ff94 	bl	2a854 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2a92c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2a930:	f023 0314 	bic.w	r3, r3, #20
   2a934:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2a938:	f7f9 f874 	bl	23a24 <ready_thread>
	__asm__ volatile(
   2a93c:	f384 8811 	msr	BASEPRI, r4
   2a940:	f3bf 8f6f 	isb	sy
}
   2a944:	bd10      	pop	{r4, pc}

0002a946 <add_to_waitq_locked>:
{
   2a946:	b538      	push	{r3, r4, r5, lr}
   2a948:	4604      	mov	r4, r0
   2a94a:	460d      	mov	r5, r1
	unready_thread(thread);
   2a94c:	f7f9 f8de 	bl	23b0c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a950:	7b63      	ldrb	r3, [r4, #13]
   2a952:	f043 0302 	orr.w	r3, r3, #2
   2a956:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2a958:	b1b5      	cbz	r5, 2a988 <add_to_waitq_locked+0x42>
	return list->head == list;
   2a95a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2a95c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a95e:	429d      	cmp	r5, r3
   2a960:	bf08      	it	eq
   2a962:	2300      	moveq	r3, #0
   2a964:	2b00      	cmp	r3, #0
   2a966:	bf38      	it	cc
   2a968:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a96a:	b19b      	cbz	r3, 2a994 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   2a96c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2a970:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2a974:	4291      	cmp	r1, r2
   2a976:	d008      	beq.n	2a98a <add_to_waitq_locked+0x44>
		return b2 - b1;
   2a978:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a97a:	2a00      	cmp	r2, #0
   2a97c:	dd05      	ble.n	2a98a <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   2a97e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a980:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2a984:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a986:	605c      	str	r4, [r3, #4]
}
   2a988:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2a98a:	686a      	ldr	r2, [r5, #4]
   2a98c:	4293      	cmp	r3, r2
   2a98e:	d001      	beq.n	2a994 <add_to_waitq_locked+0x4e>
   2a990:	681b      	ldr	r3, [r3, #0]
   2a992:	e7ea      	b.n	2a96a <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   2a994:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2a996:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2a99a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a99c:	606c      	str	r4, [r5, #4]
   2a99e:	e7f3      	b.n	2a988 <add_to_waitq_locked+0x42>

0002a9a0 <z_unpend_first_thread>:
{
   2a9a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a9a2:	f04f 0320 	mov.w	r3, #32
   2a9a6:	f3ef 8511 	mrs	r5, BASEPRI
   2a9aa:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9ae:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a9b2:	f7ff ff8c 	bl	2a8ce <z_priq_dumb_best>
		if (thread != NULL) {
   2a9b6:	4604      	mov	r4, r0
   2a9b8:	b120      	cbz	r0, 2a9c4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2a9ba:	f7ff ff4b 	bl	2a854 <unpend_thread_no_timeout>
   2a9be:	3018      	adds	r0, #24
   2a9c0:	f000 f833 	bl	2aa2a <z_abort_timeout>
	__asm__ volatile(
   2a9c4:	f385 8811 	msr	BASEPRI, r5
   2a9c8:	f3bf 8f6f 	isb	sy
}
   2a9cc:	4620      	mov	r0, r4
   2a9ce:	bd38      	pop	{r3, r4, r5, pc}

0002a9d0 <z_unpend_all>:
{
   2a9d0:	b538      	push	{r3, r4, r5, lr}
   2a9d2:	4605      	mov	r5, r0
	int need_sched = 0;
   2a9d4:	2000      	movs	r0, #0
	return list->head == list;
   2a9d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a9d8:	42a5      	cmp	r5, r4
   2a9da:	d000      	beq.n	2a9de <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a9dc:	b904      	cbnz	r4, 2a9e0 <z_unpend_all+0x10>
}
   2a9de:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2a9e0:	4620      	mov	r0, r4
   2a9e2:	f7ff ff4a 	bl	2a87a <z_unpend_thread>
		z_ready_thread(thread);
   2a9e6:	4620      	mov	r0, r4
   2a9e8:	f7ff ff7b 	bl	2a8e2 <z_ready_thread>
		need_sched = 1;
   2a9ec:	2001      	movs	r0, #1
   2a9ee:	e7f2      	b.n	2a9d6 <z_unpend_all+0x6>

0002a9f0 <z_sched_wake>:
{
   2a9f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a9f2:	f04f 0320 	mov.w	r3, #32
   2a9f6:	f3ef 8511 	mrs	r5, BASEPRI
   2a9fa:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9fe:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2aa02:	f7ff ff64 	bl	2a8ce <z_priq_dumb_best>
		if (thread != NULL) {
   2aa06:	4604      	mov	r4, r0
   2aa08:	b150      	cbz	r0, 2aa20 <z_sched_wake+0x30>
   2aa0a:	67c1      	str	r1, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   2aa0c:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2aa0e:	f7ff ff21 	bl	2a854 <unpend_thread_no_timeout>
   2aa12:	3018      	adds	r0, #24
   2aa14:	f000 f809 	bl	2aa2a <z_abort_timeout>
			ready_thread(thread);
   2aa18:	4620      	mov	r0, r4
   2aa1a:	f7f9 f803 	bl	23a24 <ready_thread>
			ret = true;
   2aa1e:	2001      	movs	r0, #1
	__asm__ volatile(
   2aa20:	f385 8811 	msr	BASEPRI, r5
   2aa24:	f3bf 8f6f 	isb	sy
}
   2aa28:	bd38      	pop	{r3, r4, r5, pc}

0002aa2a <z_abort_timeout>:
{
   2aa2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aa2c:	f04f 0220 	mov.w	r2, #32
   2aa30:	f3ef 8411 	mrs	r4, BASEPRI
   2aa34:	f382 8812 	msr	BASEPRI_MAX, r2
   2aa38:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2aa3c:	6803      	ldr	r3, [r0, #0]
   2aa3e:	b13b      	cbz	r3, 2aa50 <z_abort_timeout+0x26>
			remove_timeout(to);
   2aa40:	f7f9 faa2 	bl	23f88 <remove_timeout>
			ret = 0;
   2aa44:	2000      	movs	r0, #0
	__asm__ volatile(
   2aa46:	f384 8811 	msr	BASEPRI, r4
   2aa4a:	f3bf 8f6f 	isb	sy
}
   2aa4e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2aa50:	f06f 0015 	mvn.w	r0, #21
   2aa54:	e7f7      	b.n	2aa46 <z_abort_timeout+0x1c>

0002aa56 <z_get_next_timeout_expiry>:
{
   2aa56:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aa58:	f04f 0320 	mov.w	r3, #32
   2aa5c:	f3ef 8411 	mrs	r4, BASEPRI
   2aa60:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa64:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2aa68:	f7f9 faa8 	bl	23fbc <next_timeout>
	__asm__ volatile(
   2aa6c:	f384 8811 	msr	BASEPRI, r4
   2aa70:	f3bf 8f6f 	isb	sy
}
   2aa74:	bd10      	pop	{r4, pc}

0002aa76 <z_set_timeout_expiry>:
{
   2aa76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2aa78:	4604      	mov	r4, r0
   2aa7a:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   2aa7c:	f04f 0320 	mov.w	r3, #32
   2aa80:	f3ef 8511 	mrs	r5, BASEPRI
   2aa84:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa88:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2aa8c:	f7f9 fa96 	bl	23fbc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2aa90:	2801      	cmp	r0, #1
   2aa92:	dd05      	ble.n	2aaa0 <z_set_timeout_expiry+0x2a>
   2aa94:	42a0      	cmp	r0, r4
   2aa96:	9901      	ldr	r1, [sp, #4]
   2aa98:	db02      	blt.n	2aaa0 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2aa9a:	4620      	mov	r0, r4
   2aa9c:	f7ec ff8c 	bl	179b8 <sys_clock_set_timeout>
	__asm__ volatile(
   2aaa0:	f385 8811 	msr	BASEPRI, r5
   2aaa4:	f3bf 8f6f 	isb	sy
}
   2aaa8:	b003      	add	sp, #12
   2aaaa:	bd30      	pop	{r4, r5, pc}

0002aaac <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2aaac:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2aaae:	f7f9 fba3 	bl	241f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2aab2:	bd08      	pop	{r3, pc}

0002aab4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2aab4:	f7f9 bba0 	b.w	241f8 <sys_clock_tick_get>

0002aab8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2aab8:	b108      	cbz	r0, 2aabe <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2aaba:	f7e9 bd95 	b.w	145e8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2aabe:	4770      	bx	lr

0002aac0 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2aac0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2aac2:	1c4b      	adds	r3, r1, #1
   2aac4:	bf08      	it	eq
   2aac6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2aaca:	4604      	mov	r4, r0
   2aacc:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2aace:	d013      	beq.n	2aaf8 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2aad0:	ea54 0105 	orrs.w	r1, r4, r5
   2aad4:	d103      	bne.n	2aade <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2aad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2aada:	f7f9 bb8d 	b.w	241f8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2aade:	f06f 0101 	mvn.w	r1, #1
   2aae2:	1a0a      	subs	r2, r1, r0
   2aae4:	f04f 31ff 	mov.w	r1, #4294967295
   2aae8:	eb61 0305 	sbc.w	r3, r1, r5
   2aaec:	2a00      	cmp	r2, #0
   2aaee:	f173 0100 	sbcs.w	r1, r3, #0
   2aaf2:	db02      	blt.n	2aafa <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2aaf4:	4610      	mov	r0, r2
   2aaf6:	4619      	mov	r1, r3
}
   2aaf8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2aafa:	f7f9 fb7d 	bl	241f8 <sys_clock_tick_get>
   2aafe:	2c01      	cmp	r4, #1
   2ab00:	f175 0300 	sbcs.w	r3, r5, #0
   2ab04:	bfbc      	itt	lt
   2ab06:	2401      	movlt	r4, #1
   2ab08:	2500      	movlt	r5, #0
   2ab0a:	1820      	adds	r0, r4, r0
   2ab0c:	eb45 0101 	adc.w	r1, r5, r1
   2ab10:	e7f2      	b.n	2aaf8 <sys_clock_timeout_end_calc+0x38>

0002ab12 <clear_event_registrations>:
	while (num_events--) {
   2ab12:	2314      	movs	r3, #20
{
   2ab14:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   2ab16:	2400      	movs	r4, #0
   2ab18:	2601      	movs	r6, #1
   2ab1a:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   2ab1e:	4281      	cmp	r1, r0
   2ab20:	d100      	bne.n	2ab24 <clear_event_registrations+0x12>
}
   2ab22:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2ab24:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2ab28:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2ab2c:	f003 031f 	and.w	r3, r3, #31
   2ab30:	2b08      	cmp	r3, #8
   2ab32:	d80d      	bhi.n	2ab50 <clear_event_registrations+0x3e>
   2ab34:	fa06 f303 	lsl.w	r3, r6, r3
   2ab38:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2ab3c:	d008      	beq.n	2ab50 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2ab3e:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2ab42:	b12b      	cbz	r3, 2ab50 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   2ab44:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   2ab48:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2ab4a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2ab4c:	e941 4405 	strd	r4, r4, [r1, #-20]
   2ab50:	f382 8811 	msr	BASEPRI, r2
   2ab54:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ab58:	f04f 0320 	mov.w	r3, #32
   2ab5c:	f3ef 8211 	mrs	r2, BASEPRI
   2ab60:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab64:	f3bf 8f6f 	isb	sy
   2ab68:	3914      	subs	r1, #20
   2ab6a:	e7d8      	b.n	2ab1e <clear_event_registrations+0xc>

0002ab6c <add_event>:
{
   2ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab6e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ab70:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ab74:	4290      	cmp	r0, r2
   2ab76:	4604      	mov	r4, r0
   2ab78:	460d      	mov	r5, r1
   2ab7a:	d105      	bne.n	2ab88 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2ab7c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2ab7e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2ab82:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ab84:	6065      	str	r5, [r4, #4]
}
   2ab86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2ab88:	2b00      	cmp	r3, #0
   2ab8a:	d0f7      	beq.n	2ab7c <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ab8c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ab8e:	b100      	cbz	r0, 2ab92 <add_event+0x26>
   2ab90:	3860      	subs	r0, #96	; 0x60
   2ab92:	b107      	cbz	r7, 2ab96 <add_event+0x2a>
   2ab94:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ab96:	4639      	mov	r1, r7
   2ab98:	f7ff fe66 	bl	2a868 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ab9c:	2800      	cmp	r0, #0
   2ab9e:	dced      	bgt.n	2ab7c <add_event+0x10>
	return list->head == list;
   2aba0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aba2:	42b4      	cmp	r4, r6
   2aba4:	d0ea      	beq.n	2ab7c <add_event+0x10>
   2aba6:	2e00      	cmp	r6, #0
   2aba8:	bf38      	it	cc
   2abaa:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2abac:	2e00      	cmp	r6, #0
   2abae:	d0e5      	beq.n	2ab7c <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2abb0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2abb2:	b101      	cbz	r1, 2abb6 <add_event+0x4a>
   2abb4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2abb6:	4638      	mov	r0, r7
   2abb8:	f7ff fe56 	bl	2a868 <z_sched_prio_cmp>
   2abbc:	2800      	cmp	r0, #0
   2abbe:	dd05      	ble.n	2abcc <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2abc0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2abc2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2abc6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2abc8:	6075      	str	r5, [r6, #4]
			return;
   2abca:	e7dc      	b.n	2ab86 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2abcc:	6863      	ldr	r3, [r4, #4]
   2abce:	42b3      	cmp	r3, r6
   2abd0:	d0d4      	beq.n	2ab7c <add_event+0x10>
   2abd2:	6836      	ldr	r6, [r6, #0]
   2abd4:	e7ea      	b.n	2abac <add_event+0x40>

0002abd6 <register_events>:
{
   2abd6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2abda:	2500      	movs	r5, #0
{
   2abdc:	468b      	mov	fp, r1
   2abde:	4614      	mov	r4, r2
   2abe0:	461f      	mov	r7, r3
   2abe2:	4682      	mov	sl, r0
	int events_registered = 0;
   2abe4:	462e      	mov	r6, r5
	event->poller = NULL;
   2abe6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2abe8:	455d      	cmp	r5, fp
   2abea:	db02      	blt.n	2abf2 <register_events+0x1c>
}
   2abec:	4630      	mov	r0, r6
   2abee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abf2:	f04f 0320 	mov.w	r3, #32
   2abf6:	f3ef 8911 	mrs	r9, BASEPRI
   2abfa:	f383 8812 	msr	BASEPRI_MAX, r3
   2abfe:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2ac02:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2ac06:	f003 031f 	and.w	r3, r3, #31
   2ac0a:	3b01      	subs	r3, #1
   2ac0c:	2b07      	cmp	r3, #7
   2ac0e:	d80f      	bhi.n	2ac30 <register_events+0x5a>
   2ac10:	e8df f003 	tbb	[pc, r3]
   2ac14:	0a0e041e 	.word	0x0a0e041e
   2ac18:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2ac1c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ac20:	689b      	ldr	r3, [r3, #8]
   2ac22:	b12b      	cbz	r3, 2ac30 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2ac24:	2302      	movs	r3, #2
   2ac26:	e020      	b.n	2ac6a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2ac28:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ac2c:	681b      	ldr	r3, [r3, #0]
   2ac2e:	bb8b      	cbnz	r3, 2ac94 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2ac30:	bb47      	cbnz	r7, 2ac84 <register_events+0xae>
   2ac32:	7823      	ldrb	r3, [r4, #0]
   2ac34:	b333      	cbz	r3, 2ac84 <register_events+0xae>
	switch (event->type) {
   2ac36:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2ac3a:	f003 031f 	and.w	r3, r3, #31
   2ac3e:	3b01      	subs	r3, #1
   2ac40:	2b07      	cmp	r3, #7
   2ac42:	d830      	bhi.n	2aca6 <register_events+0xd0>
   2ac44:	e8df f003 	tbb	[pc, r3]
   2ac48:	282f2833 	.word	0x282f2833
   2ac4c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2ac50:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ac54:	689b      	ldr	r3, [r3, #8]
   2ac56:	2b00      	cmp	r3, #0
   2ac58:	d0ea      	beq.n	2ac30 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2ac5a:	2301      	movs	r3, #1
   2ac5c:	e005      	b.n	2ac6a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2ac5e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ac62:	6a1b      	ldr	r3, [r3, #32]
   2ac64:	2b00      	cmp	r3, #0
   2ac66:	d0e3      	beq.n	2ac30 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2ac68:	2310      	movs	r3, #16
	event->state |= state;
   2ac6a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2ac6e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2ac72:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2ac76:	430b      	orrs	r3, r1
   2ac78:	f363 3252 	bfi	r2, r3, #13, #6
   2ac7c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2ac80:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2ac84:	f389 8811 	msr	BASEPRI, r9
   2ac88:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2ac8c:	3501      	adds	r5, #1
   2ac8e:	f10a 0a14 	add.w	sl, sl, #20
   2ac92:	e7a9      	b.n	2abe8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2ac94:	2304      	movs	r3, #4
   2ac96:	e7e8      	b.n	2ac6a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2ac98:	4622      	mov	r2, r4
   2ac9a:	4651      	mov	r1, sl
   2ac9c:	f8da 0010 	ldr.w	r0, [sl, #16]
   2aca0:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2aca2:	f7ff ff63 	bl	2ab6c <add_event>
	event->poller = poller;
   2aca6:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2acaa:	3601      	adds	r6, #1
   2acac:	e7ea      	b.n	2ac84 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2acae:	4622      	mov	r2, r4
   2acb0:	4651      	mov	r1, sl
   2acb2:	f8da 0010 	ldr.w	r0, [sl, #16]
   2acb6:	e7f4      	b.n	2aca2 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2acb8:	f8da 0010 	ldr.w	r0, [sl, #16]
   2acbc:	4622      	mov	r2, r4
   2acbe:	4651      	mov	r1, sl
   2acc0:	3024      	adds	r0, #36	; 0x24
   2acc2:	e7ee      	b.n	2aca2 <register_events+0xcc>

0002acc4 <signal_poll_event>:
{
   2acc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   2acc8:	6884      	ldr	r4, [r0, #8]
{
   2acca:	4605      	mov	r5, r0
   2accc:	460e      	mov	r6, r1
	if (poller != NULL) {
   2acce:	b144      	cbz	r4, 2ace2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2acd0:	7863      	ldrb	r3, [r4, #1]
   2acd2:	2b01      	cmp	r3, #1
   2acd4:	d139      	bne.n	2ad4a <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   2acd6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2acda:	f013 0302 	ands.w	r3, r3, #2
   2acde:	d10a      	bne.n	2acf6 <signal_poll_event+0x32>
		poller->is_polling = false;
   2ace0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2ace2:	2000      	movs	r0, #0
	event->state |= state;
   2ace4:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2ace6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ace8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2acec:	430e      	orrs	r6, r1
   2acee:	f366 3352 	bfi	r3, r6, #13, #6
   2acf2:	60eb      	str	r3, [r5, #12]
	return retcode;
   2acf4:	e00d      	b.n	2ad12 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2acf6:	f04f 31ff 	mov.w	r1, #4294967295
   2acfa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2acfe:	f06f 0001 	mvn.w	r0, #1
   2ad02:	428b      	cmp	r3, r1
   2ad04:	bf08      	it	eq
   2ad06:	4282      	cmpeq	r2, r0
   2ad08:	d106      	bne.n	2ad18 <signal_poll_event+0x54>
		poller->is_polling = false;
   2ad0a:	2300      	movs	r3, #0
		return -EAGAIN;
   2ad0c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2ad10:	7023      	strb	r3, [r4, #0]
}
   2ad12:	b002      	add	sp, #8
   2ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ad18:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   2ad1c:	9001      	str	r0, [sp, #4]
   2ad1e:	f7ff fdac 	bl	2a87a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2ad22:	2e08      	cmp	r6, #8
   2ad24:	bf0c      	ite	eq
   2ad26:	f06f 0303 	mvneq.w	r3, #3
   2ad2a:	2300      	movne	r3, #0
   2ad2c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ad2e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ad32:	06db      	lsls	r3, r3, #27
   2ad34:	d103      	bne.n	2ad3e <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   2ad36:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2ad3a:	9801      	ldr	r0, [sp, #4]
   2ad3c:	b10f      	cbz	r7, 2ad42 <signal_poll_event+0x7e>
		poller->is_polling = false;
   2ad3e:	2300      	movs	r3, #0
   2ad40:	e7ce      	b.n	2ace0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2ad42:	f7ff fdce 	bl	2a8e2 <z_ready_thread>
		poller->is_polling = false;
   2ad46:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2ad48:	e7cb      	b.n	2ace2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2ad4a:	2b02      	cmp	r3, #2
   2ad4c:	d1f7      	bne.n	2ad3e <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2ad4e:	7823      	ldrb	r3, [r4, #0]
   2ad50:	2b00      	cmp	r3, #0
   2ad52:	d0c6      	beq.n	2ace2 <signal_poll_event+0x1e>
   2ad54:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2ad58:	2f00      	cmp	r7, #0
   2ad5a:	d0f4      	beq.n	2ad46 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2ad5c:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2ad60:	f1a4 0114 	sub.w	r1, r4, #20
   2ad64:	f104 0014 	add.w	r0, r4, #20
   2ad68:	9101      	str	r1, [sp, #4]
   2ad6a:	f7ff fe5e 	bl	2aa2a <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2ad6e:	4638      	mov	r0, r7
   2ad70:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   2ad72:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2ad76:	f7ff fd28 	bl	2a7ca <k_work_submit_to_queue>
		poller->is_polling = false;
   2ad7a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2ad7e:	e7b0      	b.n	2ace2 <signal_poll_event+0x1e>

0002ad80 <z_handle_obj_poll_events>:
{
   2ad80:	4603      	mov	r3, r0
	return list->head == list;
   2ad82:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ad84:	4283      	cmp	r3, r0
   2ad86:	d008      	beq.n	2ad9a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2ad88:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ad8c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ad8e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ad90:	2300      	movs	r3, #0
	node->prev = NULL;
   2ad92:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2ad96:	f7ff bf95 	b.w	2acc4 <signal_poll_event>
}
   2ad9a:	4770      	bx	lr

0002ad9c <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2ad9c:	2304      	movs	r3, #4
   2ad9e:	18d2      	adds	r2, r2, r3
{
   2ada0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2ada2:	4604      	mov	r4, r0
   2ada4:	d207      	bcs.n	2adb6 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2ada6:	2600      	movs	r6, #0
   2ada8:	2700      	movs	r7, #0
   2adaa:	4319      	orrs	r1, r3
   2adac:	e9cd 6700 	strd	r6, r7, [sp]
   2adb0:	f7ff fb90 	bl	2a4d4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2adb4:	b910      	cbnz	r0, 2adbc <z_heap_aligned_alloc+0x20>
		return NULL;
   2adb6:	2000      	movs	r0, #0
}
   2adb8:	b002      	add	sp, #8
   2adba:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2adbc:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2adc0:	e7fa      	b.n	2adb8 <z_heap_aligned_alloc+0x1c>

0002adc2 <k_free>:
	if (ptr != NULL) {
   2adc2:	b120      	cbz	r0, 2adce <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2adc4:	1f01      	subs	r1, r0, #4
   2adc6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2adca:	f7ff bbd4 	b.w	2a576 <k_heap_free>
}
   2adce:	4770      	bx	lr

0002add0 <k_malloc>:
{
   2add0:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2add2:	2004      	movs	r0, #4
   2add4:	f7f9 baae 	b.w	24334 <k_aligned_alloc>

0002add8 <k_calloc>:
{
   2add8:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2adda:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2adde:	b118      	cbz	r0, 2ade8 <k_calloc+0x10>
   2ade0:	fbb2 f0f0 	udiv	r0, r2, r0
   2ade4:	4281      	cmp	r1, r0
   2ade6:	d10c      	bne.n	2ae02 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2ade8:	4610      	mov	r0, r2
   2adea:	9201      	str	r2, [sp, #4]
   2adec:	f7ff fff0 	bl	2add0 <k_malloc>
	if (ret != NULL) {
   2adf0:	4604      	mov	r4, r0
   2adf2:	b118      	cbz	r0, 2adfc <k_calloc+0x24>
   2adf4:	2100      	movs	r1, #0
   2adf6:	9a01      	ldr	r2, [sp, #4]
   2adf8:	f000 f846 	bl	2ae88 <memset>
}
   2adfc:	4620      	mov	r0, r4
   2adfe:	b002      	add	sp, #8
   2ae00:	bd10      	pop	{r4, pc}
		return NULL;
   2ae02:	2400      	movs	r4, #0
   2ae04:	e7fa      	b.n	2adfc <k_calloc+0x24>

0002ae06 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ae06:	4770      	bx	lr

0002ae08 <atoi>:
   2ae08:	220a      	movs	r2, #10
   2ae0a:	2100      	movs	r1, #0
   2ae0c:	f7f9 bff6 	b.w	24dfc <strtol>

0002ae10 <memchr>:
   2ae10:	b2c9      	uxtb	r1, r1
   2ae12:	4402      	add	r2, r0
   2ae14:	b510      	push	{r4, lr}
   2ae16:	4290      	cmp	r0, r2
   2ae18:	4603      	mov	r3, r0
   2ae1a:	d101      	bne.n	2ae20 <memchr+0x10>
   2ae1c:	2300      	movs	r3, #0
   2ae1e:	e003      	b.n	2ae28 <memchr+0x18>
   2ae20:	781c      	ldrb	r4, [r3, #0]
   2ae22:	3001      	adds	r0, #1
   2ae24:	428c      	cmp	r4, r1
   2ae26:	d1f6      	bne.n	2ae16 <memchr+0x6>
   2ae28:	4618      	mov	r0, r3
   2ae2a:	bd10      	pop	{r4, pc}

0002ae2c <memcmp>:
   2ae2c:	b530      	push	{r4, r5, lr}
   2ae2e:	3901      	subs	r1, #1
   2ae30:	2400      	movs	r4, #0
   2ae32:	42a2      	cmp	r2, r4
   2ae34:	d101      	bne.n	2ae3a <memcmp+0xe>
   2ae36:	2000      	movs	r0, #0
   2ae38:	e005      	b.n	2ae46 <memcmp+0x1a>
   2ae3a:	5d03      	ldrb	r3, [r0, r4]
   2ae3c:	3401      	adds	r4, #1
   2ae3e:	5d0d      	ldrb	r5, [r1, r4]
   2ae40:	42ab      	cmp	r3, r5
   2ae42:	d0f6      	beq.n	2ae32 <memcmp+0x6>
   2ae44:	1b58      	subs	r0, r3, r5
   2ae46:	bd30      	pop	{r4, r5, pc}

0002ae48 <memcpy>:
   2ae48:	440a      	add	r2, r1
   2ae4a:	1e43      	subs	r3, r0, #1
   2ae4c:	4291      	cmp	r1, r2
   2ae4e:	d100      	bne.n	2ae52 <memcpy+0xa>
   2ae50:	4770      	bx	lr
   2ae52:	b510      	push	{r4, lr}
   2ae54:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ae58:	4291      	cmp	r1, r2
   2ae5a:	f803 4f01 	strb.w	r4, [r3, #1]!
   2ae5e:	d1f9      	bne.n	2ae54 <memcpy+0xc>
   2ae60:	bd10      	pop	{r4, pc}

0002ae62 <__memcpy_chk>:
   2ae62:	429a      	cmp	r2, r3
   2ae64:	b508      	push	{r3, lr}
   2ae66:	d901      	bls.n	2ae6c <__memcpy_chk+0xa>
   2ae68:	f7eb fbd8 	bl	1661c <__chk_fail>
   2ae6c:	4281      	cmp	r1, r0
   2ae6e:	d804      	bhi.n	2ae7a <__memcpy_chk+0x18>
   2ae70:	188b      	adds	r3, r1, r2
   2ae72:	4298      	cmp	r0, r3
   2ae74:	d3f8      	bcc.n	2ae68 <__memcpy_chk+0x6>
   2ae76:	4281      	cmp	r1, r0
   2ae78:	d102      	bne.n	2ae80 <__memcpy_chk+0x1e>
   2ae7a:	1883      	adds	r3, r0, r2
   2ae7c:	4299      	cmp	r1, r3
   2ae7e:	d3f3      	bcc.n	2ae68 <__memcpy_chk+0x6>
   2ae80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ae84:	f7ff bfe0 	b.w	2ae48 <memcpy>

0002ae88 <memset>:
   2ae88:	4402      	add	r2, r0
   2ae8a:	4603      	mov	r3, r0
   2ae8c:	4293      	cmp	r3, r2
   2ae8e:	d100      	bne.n	2ae92 <memset+0xa>
   2ae90:	4770      	bx	lr
   2ae92:	f803 1b01 	strb.w	r1, [r3], #1
   2ae96:	e7f9      	b.n	2ae8c <memset+0x4>

0002ae98 <__cvt>:
   2ae98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2ae9c:	ec55 4b10 	vmov	r4, r5, d0
   2aea0:	2d00      	cmp	r5, #0
   2aea2:	460e      	mov	r6, r1
   2aea4:	4619      	mov	r1, r3
   2aea6:	462b      	mov	r3, r5
   2aea8:	bfb4      	ite	lt
   2aeaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   2aeae:	2300      	movge	r3, #0
   2aeb0:	4691      	mov	r9, r2
   2aeb2:	bfbf      	itttt	lt
   2aeb4:	4622      	movlt	r2, r4
   2aeb6:	461d      	movlt	r5, r3
   2aeb8:	232d      	movlt	r3, #45	; 0x2d
   2aeba:	4614      	movlt	r4, r2
   2aebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   2aec0:	700b      	strb	r3, [r1, #0]
   2aec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2aec4:	f023 0820 	bic.w	r8, r3, #32
   2aec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2aecc:	d005      	beq.n	2aeda <__cvt+0x42>
   2aece:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   2aed2:	d100      	bne.n	2aed6 <__cvt+0x3e>
   2aed4:	3601      	adds	r6, #1
   2aed6:	2102      	movs	r1, #2
   2aed8:	e000      	b.n	2aedc <__cvt+0x44>
   2aeda:	2103      	movs	r1, #3
   2aedc:	ab03      	add	r3, sp, #12
   2aede:	4632      	mov	r2, r6
   2aee0:	9301      	str	r3, [sp, #4]
   2aee2:	ab02      	add	r3, sp, #8
   2aee4:	ec45 4b10 	vmov	d0, r4, r5
   2aee8:	9300      	str	r3, [sp, #0]
   2aeea:	4653      	mov	r3, sl
   2aeec:	f7e7 f94c 	bl	12188 <_dtoa_r>
   2aef0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2aef4:	4607      	mov	r7, r0
   2aef6:	d102      	bne.n	2aefe <__cvt+0x66>
   2aef8:	f019 0f01 	tst.w	r9, #1
   2aefc:	d022      	beq.n	2af44 <__cvt+0xac>
   2aefe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2af02:	eb07 0906 	add.w	r9, r7, r6
   2af06:	d110      	bne.n	2af2a <__cvt+0x92>
   2af08:	783b      	ldrb	r3, [r7, #0]
   2af0a:	2b30      	cmp	r3, #48	; 0x30
   2af0c:	d10a      	bne.n	2af24 <__cvt+0x8c>
   2af0e:	2200      	movs	r2, #0
   2af10:	2300      	movs	r3, #0
   2af12:	4620      	mov	r0, r4
   2af14:	4629      	mov	r1, r5
   2af16:	f7e5 fdb7 	bl	10a88 <__aeabi_dcmpeq>
   2af1a:	b918      	cbnz	r0, 2af24 <__cvt+0x8c>
   2af1c:	f1c6 0601 	rsb	r6, r6, #1
   2af20:	f8ca 6000 	str.w	r6, [sl]
   2af24:	f8da 3000 	ldr.w	r3, [sl]
   2af28:	4499      	add	r9, r3
   2af2a:	2200      	movs	r2, #0
   2af2c:	2300      	movs	r3, #0
   2af2e:	4620      	mov	r0, r4
   2af30:	4629      	mov	r1, r5
   2af32:	f7e5 fda9 	bl	10a88 <__aeabi_dcmpeq>
   2af36:	b108      	cbz	r0, 2af3c <__cvt+0xa4>
   2af38:	f8cd 900c 	str.w	r9, [sp, #12]
   2af3c:	2230      	movs	r2, #48	; 0x30
   2af3e:	9b03      	ldr	r3, [sp, #12]
   2af40:	454b      	cmp	r3, r9
   2af42:	d307      	bcc.n	2af54 <__cvt+0xbc>
   2af44:	9b03      	ldr	r3, [sp, #12]
   2af46:	4638      	mov	r0, r7
   2af48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2af4a:	1bdb      	subs	r3, r3, r7
   2af4c:	6013      	str	r3, [r2, #0]
   2af4e:	b004      	add	sp, #16
   2af50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2af54:	1c59      	adds	r1, r3, #1
   2af56:	9103      	str	r1, [sp, #12]
   2af58:	701a      	strb	r2, [r3, #0]
   2af5a:	e7f0      	b.n	2af3e <__cvt+0xa6>

0002af5c <__exponent>:
   2af5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2af5e:	2900      	cmp	r1, #0
   2af60:	4603      	mov	r3, r0
   2af62:	bfb8      	it	lt
   2af64:	4249      	neglt	r1, r1
   2af66:	f803 2b02 	strb.w	r2, [r3], #2
   2af6a:	bfb4      	ite	lt
   2af6c:	222d      	movlt	r2, #45	; 0x2d
   2af6e:	222b      	movge	r2, #43	; 0x2b
   2af70:	2909      	cmp	r1, #9
   2af72:	7042      	strb	r2, [r0, #1]
   2af74:	dd2a      	ble.n	2afcc <__exponent+0x70>
   2af76:	f10d 0407 	add.w	r4, sp, #7
   2af7a:	270a      	movs	r7, #10
   2af7c:	46a4      	mov	ip, r4
   2af7e:	460a      	mov	r2, r1
   2af80:	46a6      	mov	lr, r4
   2af82:	3c01      	subs	r4, #1
   2af84:	2a63      	cmp	r2, #99	; 0x63
   2af86:	fb91 f6f7 	sdiv	r6, r1, r7
   2af8a:	fb07 1516 	mls	r5, r7, r6, r1
   2af8e:	4631      	mov	r1, r6
   2af90:	f105 0530 	add.w	r5, r5, #48	; 0x30
   2af94:	f80e 5c01 	strb.w	r5, [lr, #-1]
   2af98:	dcf1      	bgt.n	2af7e <__exponent+0x22>
   2af9a:	3130      	adds	r1, #48	; 0x30
   2af9c:	f1ae 0502 	sub.w	r5, lr, #2
   2afa0:	f804 1c01 	strb.w	r1, [r4, #-1]
   2afa4:	1c44      	adds	r4, r0, #1
   2afa6:	4629      	mov	r1, r5
   2afa8:	4561      	cmp	r1, ip
   2afaa:	d30a      	bcc.n	2afc2 <__exponent+0x66>
   2afac:	f10d 0209 	add.w	r2, sp, #9
   2afb0:	eba2 020e 	sub.w	r2, r2, lr
   2afb4:	4565      	cmp	r5, ip
   2afb6:	bf88      	it	hi
   2afb8:	2200      	movhi	r2, #0
   2afba:	4413      	add	r3, r2
   2afbc:	1a18      	subs	r0, r3, r0
   2afbe:	b003      	add	sp, #12
   2afc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2afc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2afc6:	f804 2f01 	strb.w	r2, [r4, #1]!
   2afca:	e7ed      	b.n	2afa8 <__exponent+0x4c>
   2afcc:	2330      	movs	r3, #48	; 0x30
   2afce:	3130      	adds	r1, #48	; 0x30
   2afd0:	7083      	strb	r3, [r0, #2]
   2afd2:	1d03      	adds	r3, r0, #4
   2afd4:	70c1      	strb	r1, [r0, #3]
   2afd6:	e7f1      	b.n	2afbc <__exponent+0x60>

0002afd8 <_printf_common>:
   2afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2afdc:	4616      	mov	r6, r2
   2afde:	4699      	mov	r9, r3
   2afe0:	688a      	ldr	r2, [r1, #8]
   2afe2:	4607      	mov	r7, r0
   2afe4:	690b      	ldr	r3, [r1, #16]
   2afe6:	460c      	mov	r4, r1
   2afe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2afec:	4293      	cmp	r3, r2
   2afee:	bfb8      	it	lt
   2aff0:	4613      	movlt	r3, r2
   2aff2:	6033      	str	r3, [r6, #0]
   2aff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2aff8:	b10a      	cbz	r2, 2affe <_printf_common+0x26>
   2affa:	3301      	adds	r3, #1
   2affc:	6033      	str	r3, [r6, #0]
   2affe:	6823      	ldr	r3, [r4, #0]
   2b000:	0699      	lsls	r1, r3, #26
   2b002:	bf42      	ittt	mi
   2b004:	6833      	ldrmi	r3, [r6, #0]
   2b006:	3302      	addmi	r3, #2
   2b008:	6033      	strmi	r3, [r6, #0]
   2b00a:	6825      	ldr	r5, [r4, #0]
   2b00c:	f015 0506 	ands.w	r5, r5, #6
   2b010:	d106      	bne.n	2b020 <_printf_common+0x48>
   2b012:	f104 0a19 	add.w	sl, r4, #25
   2b016:	68e3      	ldr	r3, [r4, #12]
   2b018:	6832      	ldr	r2, [r6, #0]
   2b01a:	1a9b      	subs	r3, r3, r2
   2b01c:	42ab      	cmp	r3, r5
   2b01e:	dc29      	bgt.n	2b074 <_printf_common+0x9c>
   2b020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2b024:	1e13      	subs	r3, r2, #0
   2b026:	6822      	ldr	r2, [r4, #0]
   2b028:	bf18      	it	ne
   2b02a:	2301      	movne	r3, #1
   2b02c:	0692      	lsls	r2, r2, #26
   2b02e:	d42e      	bmi.n	2b08e <_printf_common+0xb6>
   2b030:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2b034:	4649      	mov	r1, r9
   2b036:	4638      	mov	r0, r7
   2b038:	47c0      	blx	r8
   2b03a:	3001      	adds	r0, #1
   2b03c:	d021      	beq.n	2b082 <_printf_common+0xaa>
   2b03e:	6823      	ldr	r3, [r4, #0]
   2b040:	341a      	adds	r4, #26
   2b042:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   2b046:	f003 0306 	and.w	r3, r3, #6
   2b04a:	6832      	ldr	r2, [r6, #0]
   2b04c:	2600      	movs	r6, #0
   2b04e:	2b04      	cmp	r3, #4
   2b050:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2b054:	bf08      	it	eq
   2b056:	1aad      	subeq	r5, r5, r2
   2b058:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2b05c:	bf14      	ite	ne
   2b05e:	2500      	movne	r5, #0
   2b060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2b064:	4293      	cmp	r3, r2
   2b066:	bfc4      	itt	gt
   2b068:	1a9b      	subgt	r3, r3, r2
   2b06a:	18ed      	addgt	r5, r5, r3
   2b06c:	42b5      	cmp	r5, r6
   2b06e:	d11a      	bne.n	2b0a6 <_printf_common+0xce>
   2b070:	2000      	movs	r0, #0
   2b072:	e008      	b.n	2b086 <_printf_common+0xae>
   2b074:	2301      	movs	r3, #1
   2b076:	4652      	mov	r2, sl
   2b078:	4649      	mov	r1, r9
   2b07a:	4638      	mov	r0, r7
   2b07c:	47c0      	blx	r8
   2b07e:	3001      	adds	r0, #1
   2b080:	d103      	bne.n	2b08a <_printf_common+0xb2>
   2b082:	f04f 30ff 	mov.w	r0, #4294967295
   2b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b08a:	3501      	adds	r5, #1
   2b08c:	e7c3      	b.n	2b016 <_printf_common+0x3e>
   2b08e:	18e1      	adds	r1, r4, r3
   2b090:	1c5a      	adds	r2, r3, #1
   2b092:	2030      	movs	r0, #48	; 0x30
   2b094:	3302      	adds	r3, #2
   2b096:	4422      	add	r2, r4
   2b098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2b09c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2b0a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2b0a4:	e7c4      	b.n	2b030 <_printf_common+0x58>
   2b0a6:	2301      	movs	r3, #1
   2b0a8:	4622      	mov	r2, r4
   2b0aa:	4649      	mov	r1, r9
   2b0ac:	4638      	mov	r0, r7
   2b0ae:	47c0      	blx	r8
   2b0b0:	3001      	adds	r0, #1
   2b0b2:	d0e6      	beq.n	2b082 <_printf_common+0xaa>
   2b0b4:	3601      	adds	r6, #1
   2b0b6:	e7d9      	b.n	2b06c <_printf_common+0x94>

0002b0b8 <__seofread>:
   2b0b8:	2000      	movs	r0, #0
   2b0ba:	4770      	bx	lr

0002b0bc <strchr>:
   2b0bc:	b2c9      	uxtb	r1, r1
   2b0be:	4603      	mov	r3, r0
   2b0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   2b0c4:	b11a      	cbz	r2, 2b0ce <strchr+0x12>
   2b0c6:	428a      	cmp	r2, r1
   2b0c8:	d1f9      	bne.n	2b0be <strchr+0x2>
   2b0ca:	4618      	mov	r0, r3
   2b0cc:	4770      	bx	lr
   2b0ce:	2900      	cmp	r1, #0
   2b0d0:	bf18      	it	ne
   2b0d2:	2300      	movne	r3, #0
   2b0d4:	e7f9      	b.n	2b0ca <strchr+0xe>

0002b0d6 <strcpy>:
   2b0d6:	4603      	mov	r3, r0
   2b0d8:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b0dc:	f803 2b01 	strb.w	r2, [r3], #1
   2b0e0:	2a00      	cmp	r2, #0
   2b0e2:	d1f9      	bne.n	2b0d8 <strcpy+0x2>
   2b0e4:	4770      	bx	lr

0002b0e6 <strncmp>:
   2b0e6:	b510      	push	{r4, lr}
   2b0e8:	b16a      	cbz	r2, 2b106 <strncmp+0x20>
   2b0ea:	3901      	subs	r1, #1
   2b0ec:	1884      	adds	r4, r0, r2
   2b0ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   2b0f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2b0f6:	4293      	cmp	r3, r2
   2b0f8:	d103      	bne.n	2b102 <strncmp+0x1c>
   2b0fa:	42a0      	cmp	r0, r4
   2b0fc:	d001      	beq.n	2b102 <strncmp+0x1c>
   2b0fe:	2b00      	cmp	r3, #0
   2b100:	d1f5      	bne.n	2b0ee <strncmp+0x8>
   2b102:	1a98      	subs	r0, r3, r2
   2b104:	bd10      	pop	{r4, pc}
   2b106:	4610      	mov	r0, r2
   2b108:	e7fc      	b.n	2b104 <strncmp+0x1e>

0002b10a <strncpy>:
   2b10a:	3901      	subs	r1, #1
   2b10c:	4603      	mov	r3, r0
   2b10e:	b510      	push	{r4, lr}
   2b110:	b132      	cbz	r2, 2b120 <strncpy+0x16>
   2b112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b116:	3a01      	subs	r2, #1
   2b118:	f803 4b01 	strb.w	r4, [r3], #1
   2b11c:	2c00      	cmp	r4, #0
   2b11e:	d1f7      	bne.n	2b110 <strncpy+0x6>
   2b120:	441a      	add	r2, r3
   2b122:	2100      	movs	r1, #0
   2b124:	4293      	cmp	r3, r2
   2b126:	d100      	bne.n	2b12a <strncpy+0x20>
   2b128:	bd10      	pop	{r4, pc}
   2b12a:	f803 1b01 	strb.w	r1, [r3], #1
   2b12e:	e7f9      	b.n	2b124 <strncpy+0x1a>

0002b130 <strnlen>:
   2b130:	4602      	mov	r2, r0
   2b132:	4401      	add	r1, r0
   2b134:	b510      	push	{r4, lr}
   2b136:	428a      	cmp	r2, r1
   2b138:	4613      	mov	r3, r2
   2b13a:	d101      	bne.n	2b140 <strnlen+0x10>
   2b13c:	1a18      	subs	r0, r3, r0
   2b13e:	bd10      	pop	{r4, pc}
   2b140:	781c      	ldrb	r4, [r3, #0]
   2b142:	3201      	adds	r2, #1
   2b144:	2c00      	cmp	r4, #0
   2b146:	d1f6      	bne.n	2b136 <strnlen+0x6>
   2b148:	e7f8      	b.n	2b13c <strnlen+0xc>

0002b14a <strrchr>:
   2b14a:	b538      	push	{r3, r4, r5, lr}
   2b14c:	4603      	mov	r3, r0
   2b14e:	460c      	mov	r4, r1
   2b150:	b969      	cbnz	r1, 2b16e <strrchr+0x24>
   2b152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b156:	f7ff bfb1 	b.w	2b0bc <strchr>
   2b15a:	1c43      	adds	r3, r0, #1
   2b15c:	4605      	mov	r5, r0
   2b15e:	4621      	mov	r1, r4
   2b160:	4618      	mov	r0, r3
   2b162:	f7ff ffab 	bl	2b0bc <strchr>
   2b166:	2800      	cmp	r0, #0
   2b168:	d1f7      	bne.n	2b15a <strrchr+0x10>
   2b16a:	4628      	mov	r0, r5
   2b16c:	bd38      	pop	{r3, r4, r5, pc}
   2b16e:	2500      	movs	r5, #0
   2b170:	e7f5      	b.n	2b15e <strrchr+0x14>

0002b172 <strstr>:
   2b172:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b174:	780c      	ldrb	r4, [r1, #0]
   2b176:	b164      	cbz	r4, 2b192 <strstr+0x20>
   2b178:	4603      	mov	r3, r0
   2b17a:	781a      	ldrb	r2, [r3, #0]
   2b17c:	4618      	mov	r0, r3
   2b17e:	1c5e      	adds	r6, r3, #1
   2b180:	b90a      	cbnz	r2, 2b186 <strstr+0x14>
   2b182:	4610      	mov	r0, r2
   2b184:	e005      	b.n	2b192 <strstr+0x20>
   2b186:	4294      	cmp	r4, r2
   2b188:	d108      	bne.n	2b19c <strstr+0x2a>
   2b18a:	460d      	mov	r5, r1
   2b18c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   2b190:	b902      	cbnz	r2, 2b194 <strstr+0x22>
   2b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b194:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2b198:	4297      	cmp	r7, r2
   2b19a:	d0f7      	beq.n	2b18c <strstr+0x1a>
   2b19c:	4633      	mov	r3, r6
   2b19e:	e7ec      	b.n	2b17a <strstr+0x8>

0002b1a0 <sulp>:
   2b1a0:	b570      	push	{r4, r5, r6, lr}
   2b1a2:	4604      	mov	r4, r0
   2b1a4:	460d      	mov	r5, r1
   2b1a6:	4616      	mov	r6, r2
   2b1a8:	ec45 4b10 	vmov	d0, r4, r5
   2b1ac:	f7fa fa22 	bl	255f4 <__ulp>
   2b1b0:	ec51 0b10 	vmov	r0, r1, d0
   2b1b4:	b17e      	cbz	r6, 2b1d6 <sulp+0x36>
   2b1b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   2b1ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   2b1be:	2b00      	cmp	r3, #0
   2b1c0:	dd09      	ble.n	2b1d6 <sulp+0x36>
   2b1c2:	051b      	lsls	r3, r3, #20
   2b1c4:	2400      	movs	r4, #0
   2b1c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   2b1ca:	4622      	mov	r2, r4
   2b1cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   2b1d0:	462b      	mov	r3, r5
   2b1d2:	f7e5 f9f1 	bl	105b8 <__aeabi_dmul>
   2b1d6:	bd70      	pop	{r4, r5, r6, pc}

0002b1d8 <_strtol_r>:
   2b1d8:	f7f9 bd98 	b.w	24d0c <_strtol_l.isra.0>

0002b1dc <_strtoul_r>:
   2b1dc:	f7f9 beb8 	b.w	24f50 <_strtoul_l.isra.0>

0002b1e0 <_vsniprintf_r>:
   2b1e0:	b530      	push	{r4, r5, lr}
   2b1e2:	1e14      	subs	r4, r2, #0
   2b1e4:	4605      	mov	r5, r0
   2b1e6:	b09b      	sub	sp, #108	; 0x6c
   2b1e8:	4618      	mov	r0, r3
   2b1ea:	da05      	bge.n	2b1f8 <_vsniprintf_r+0x18>
   2b1ec:	238b      	movs	r3, #139	; 0x8b
   2b1ee:	f04f 30ff 	mov.w	r0, #4294967295
   2b1f2:	602b      	str	r3, [r5, #0]
   2b1f4:	b01b      	add	sp, #108	; 0x6c
   2b1f6:	bd30      	pop	{r4, r5, pc}
   2b1f8:	f44f 7302 	mov.w	r3, #520	; 0x208
   2b1fc:	4602      	mov	r2, r0
   2b1fe:	9100      	str	r1, [sp, #0]
   2b200:	4628      	mov	r0, r5
   2b202:	f8ad 300c 	strh.w	r3, [sp, #12]
   2b206:	bf14      	ite	ne
   2b208:	f104 33ff 	addne.w	r3, r4, #4294967295
   2b20c:	4623      	moveq	r3, r4
   2b20e:	9104      	str	r1, [sp, #16]
   2b210:	4669      	mov	r1, sp
   2b212:	9302      	str	r3, [sp, #8]
   2b214:	9305      	str	r3, [sp, #20]
   2b216:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b21a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2b21e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b220:	f7fa fa62 	bl	256e8 <_svfiprintf_r>
   2b224:	1c43      	adds	r3, r0, #1
   2b226:	bfbc      	itt	lt
   2b228:	238b      	movlt	r3, #139	; 0x8b
   2b22a:	602b      	strlt	r3, [r5, #0]
   2b22c:	2c00      	cmp	r4, #0
   2b22e:	d0e1      	beq.n	2b1f4 <_vsniprintf_r+0x14>
   2b230:	9b00      	ldr	r3, [sp, #0]
   2b232:	2200      	movs	r2, #0
   2b234:	701a      	strb	r2, [r3, #0]
   2b236:	e7dd      	b.n	2b1f4 <_vsniprintf_r+0x14>

0002b238 <quorem>:
   2b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b23c:	6903      	ldr	r3, [r0, #16]
   2b23e:	4607      	mov	r7, r0
   2b240:	690c      	ldr	r4, [r1, #16]
   2b242:	42a3      	cmp	r3, r4
   2b244:	f2c0 8085 	blt.w	2b352 <quorem+0x11a>
   2b248:	3c01      	subs	r4, #1
   2b24a:	f100 0514 	add.w	r5, r0, #20
   2b24e:	f101 0814 	add.w	r8, r1, #20
   2b252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2b256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2b25a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   2b25e:	9301      	str	r3, [sp, #4]
   2b260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2b264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2b268:	3301      	adds	r3, #1
   2b26a:	429a      	cmp	r2, r3
   2b26c:	fbb2 f6f3 	udiv	r6, r2, r3
   2b270:	d333      	bcc.n	2b2da <quorem+0xa2>
   2b272:	f04f 0e00 	mov.w	lr, #0
   2b276:	4640      	mov	r0, r8
   2b278:	46ac      	mov	ip, r5
   2b27a:	46f2      	mov	sl, lr
   2b27c:	f850 2b04 	ldr.w	r2, [r0], #4
   2b280:	b293      	uxth	r3, r2
   2b282:	4581      	cmp	r9, r0
   2b284:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b288:	fb06 e303 	mla	r3, r6, r3, lr
   2b28c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   2b290:	b29b      	uxth	r3, r3
   2b292:	fb06 e202 	mla	r2, r6, r2, lr
   2b296:	ebaa 0303 	sub.w	r3, sl, r3
   2b29a:	f8dc a000 	ldr.w	sl, [ip]
   2b29e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2b2a2:	fa1f fa8a 	uxth.w	sl, sl
   2b2a6:	4453      	add	r3, sl
   2b2a8:	fa1f fa82 	uxth.w	sl, r2
   2b2ac:	f8dc 2000 	ldr.w	r2, [ip]
   2b2b0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   2b2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2b2b8:	b29b      	uxth	r3, r3
   2b2ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2b2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b2c2:	f84c 3b04 	str.w	r3, [ip], #4
   2b2c6:	d2d9      	bcs.n	2b27c <quorem+0x44>
   2b2c8:	f855 300b 	ldr.w	r3, [r5, fp]
   2b2cc:	b92b      	cbnz	r3, 2b2da <quorem+0xa2>
   2b2ce:	9b01      	ldr	r3, [sp, #4]
   2b2d0:	3b04      	subs	r3, #4
   2b2d2:	429d      	cmp	r5, r3
   2b2d4:	461a      	mov	r2, r3
   2b2d6:	d330      	bcc.n	2b33a <quorem+0x102>
   2b2d8:	613c      	str	r4, [r7, #16]
   2b2da:	4638      	mov	r0, r7
   2b2dc:	f000 fb90 	bl	2ba00 <__mcmp>
   2b2e0:	2800      	cmp	r0, #0
   2b2e2:	db26      	blt.n	2b332 <quorem+0xfa>
   2b2e4:	3601      	adds	r6, #1
   2b2e6:	4628      	mov	r0, r5
   2b2e8:	f04f 0c00 	mov.w	ip, #0
   2b2ec:	f858 1b04 	ldr.w	r1, [r8], #4
   2b2f0:	f8d0 e000 	ldr.w	lr, [r0]
   2b2f4:	b28b      	uxth	r3, r1
   2b2f6:	45c1      	cmp	r9, r8
   2b2f8:	fa1f f28e 	uxth.w	r2, lr
   2b2fc:	ebac 0303 	sub.w	r3, ip, r3
   2b300:	4413      	add	r3, r2
   2b302:	ea4f 4211 	mov.w	r2, r1, lsr #16
   2b306:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2b30a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2b30e:	b29b      	uxth	r3, r3
   2b310:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2b314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b318:	f840 3b04 	str.w	r3, [r0], #4
   2b31c:	d2e6      	bcs.n	2b2ec <quorem+0xb4>
   2b31e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2b322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2b326:	b922      	cbnz	r2, 2b332 <quorem+0xfa>
   2b328:	3b04      	subs	r3, #4
   2b32a:	429d      	cmp	r5, r3
   2b32c:	461a      	mov	r2, r3
   2b32e:	d30a      	bcc.n	2b346 <quorem+0x10e>
   2b330:	613c      	str	r4, [r7, #16]
   2b332:	4630      	mov	r0, r6
   2b334:	b003      	add	sp, #12
   2b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b33a:	6812      	ldr	r2, [r2, #0]
   2b33c:	3b04      	subs	r3, #4
   2b33e:	2a00      	cmp	r2, #0
   2b340:	d1ca      	bne.n	2b2d8 <quorem+0xa0>
   2b342:	3c01      	subs	r4, #1
   2b344:	e7c5      	b.n	2b2d2 <quorem+0x9a>
   2b346:	6812      	ldr	r2, [r2, #0]
   2b348:	3b04      	subs	r3, #4
   2b34a:	2a00      	cmp	r2, #0
   2b34c:	d1f0      	bne.n	2b330 <quorem+0xf8>
   2b34e:	3c01      	subs	r4, #1
   2b350:	e7eb      	b.n	2b32a <quorem+0xf2>
   2b352:	2000      	movs	r0, #0
   2b354:	e7ee      	b.n	2b334 <quorem+0xfc>

0002b356 <rshift>:
   2b356:	6903      	ldr	r3, [r0, #16]
   2b358:	114a      	asrs	r2, r1, #5
   2b35a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   2b35e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b362:	f100 0414 	add.w	r4, r0, #20
   2b366:	dd45      	ble.n	2b3f4 <rshift+0x9e>
   2b368:	f011 011f 	ands.w	r1, r1, #31
   2b36c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   2b370:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   2b374:	d10c      	bne.n	2b390 <rshift+0x3a>
   2b376:	f100 0710 	add.w	r7, r0, #16
   2b37a:	4629      	mov	r1, r5
   2b37c:	42b1      	cmp	r1, r6
   2b37e:	d334      	bcc.n	2b3ea <rshift+0x94>
   2b380:	1a9b      	subs	r3, r3, r2
   2b382:	1eea      	subs	r2, r5, #3
   2b384:	009b      	lsls	r3, r3, #2
   2b386:	4296      	cmp	r6, r2
   2b388:	bf38      	it	cc
   2b38a:	2300      	movcc	r3, #0
   2b38c:	4423      	add	r3, r4
   2b38e:	e015      	b.n	2b3bc <rshift+0x66>
   2b390:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   2b394:	f1c1 0820 	rsb	r8, r1, #32
   2b398:	f105 0e04 	add.w	lr, r5, #4
   2b39c:	46a1      	mov	r9, r4
   2b39e:	40cf      	lsrs	r7, r1
   2b3a0:	4576      	cmp	r6, lr
   2b3a2:	46f4      	mov	ip, lr
   2b3a4:	d815      	bhi.n	2b3d2 <rshift+0x7c>
   2b3a6:	1a9b      	subs	r3, r3, r2
   2b3a8:	3501      	adds	r5, #1
   2b3aa:	009a      	lsls	r2, r3, #2
   2b3ac:	3a04      	subs	r2, #4
   2b3ae:	42ae      	cmp	r6, r5
   2b3b0:	bf38      	it	cc
   2b3b2:	2200      	movcc	r2, #0
   2b3b4:	18a3      	adds	r3, r4, r2
   2b3b6:	50a7      	str	r7, [r4, r2]
   2b3b8:	b107      	cbz	r7, 2b3bc <rshift+0x66>
   2b3ba:	3304      	adds	r3, #4
   2b3bc:	1b1a      	subs	r2, r3, r4
   2b3be:	42a3      	cmp	r3, r4
   2b3c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2b3c4:	bf08      	it	eq
   2b3c6:	2300      	moveq	r3, #0
   2b3c8:	6102      	str	r2, [r0, #16]
   2b3ca:	bf08      	it	eq
   2b3cc:	6143      	streq	r3, [r0, #20]
   2b3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b3d2:	f8dc c000 	ldr.w	ip, [ip]
   2b3d6:	fa0c fc08 	lsl.w	ip, ip, r8
   2b3da:	ea4c 0707 	orr.w	r7, ip, r7
   2b3de:	f849 7b04 	str.w	r7, [r9], #4
   2b3e2:	f85e 7b04 	ldr.w	r7, [lr], #4
   2b3e6:	40cf      	lsrs	r7, r1
   2b3e8:	e7da      	b.n	2b3a0 <rshift+0x4a>
   2b3ea:	f851 cb04 	ldr.w	ip, [r1], #4
   2b3ee:	f847 cf04 	str.w	ip, [r7, #4]!
   2b3f2:	e7c3      	b.n	2b37c <rshift+0x26>
   2b3f4:	4623      	mov	r3, r4
   2b3f6:	e7e1      	b.n	2b3bc <rshift+0x66>

0002b3f8 <__hexdig_fun>:
   2b3f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2b3fc:	2b09      	cmp	r3, #9
   2b3fe:	d802      	bhi.n	2b406 <__hexdig_fun+0xe>
   2b400:	3820      	subs	r0, #32
   2b402:	b2c0      	uxtb	r0, r0
   2b404:	4770      	bx	lr
   2b406:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2b40a:	2b05      	cmp	r3, #5
   2b40c:	d801      	bhi.n	2b412 <__hexdig_fun+0x1a>
   2b40e:	3847      	subs	r0, #71	; 0x47
   2b410:	e7f7      	b.n	2b402 <__hexdig_fun+0xa>
   2b412:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2b416:	2b05      	cmp	r3, #5
   2b418:	d801      	bhi.n	2b41e <__hexdig_fun+0x26>
   2b41a:	3827      	subs	r0, #39	; 0x27
   2b41c:	e7f1      	b.n	2b402 <__hexdig_fun+0xa>
   2b41e:	2000      	movs	r0, #0
   2b420:	4770      	bx	lr

0002b422 <L_shift>:
   2b422:	f1c2 0208 	rsb	r2, r2, #8
   2b426:	0092      	lsls	r2, r2, #2
   2b428:	b570      	push	{r4, r5, r6, lr}
   2b42a:	f1c2 0620 	rsb	r6, r2, #32
   2b42e:	6843      	ldr	r3, [r0, #4]
   2b430:	6804      	ldr	r4, [r0, #0]
   2b432:	fa03 f506 	lsl.w	r5, r3, r6
   2b436:	40d3      	lsrs	r3, r2
   2b438:	432c      	orrs	r4, r5
   2b43a:	6004      	str	r4, [r0, #0]
   2b43c:	f840 3f04 	str.w	r3, [r0, #4]!
   2b440:	4288      	cmp	r0, r1
   2b442:	d3f4      	bcc.n	2b42e <L_shift+0xc>
   2b444:	bd70      	pop	{r4, r5, r6, pc}

0002b446 <__match>:
   2b446:	6803      	ldr	r3, [r0, #0]
   2b448:	3301      	adds	r3, #1
   2b44a:	b530      	push	{r4, r5, lr}
   2b44c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b450:	b914      	cbnz	r4, 2b458 <__match+0x12>
   2b452:	6003      	str	r3, [r0, #0]
   2b454:	2001      	movs	r0, #1
   2b456:	bd30      	pop	{r4, r5, pc}
   2b458:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b45c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   2b460:	2d19      	cmp	r5, #25
   2b462:	bf98      	it	ls
   2b464:	3220      	addls	r2, #32
   2b466:	42a2      	cmp	r2, r4
   2b468:	d0f0      	beq.n	2b44c <__match+0x6>
   2b46a:	2000      	movs	r0, #0
   2b46c:	e7f3      	b.n	2b456 <__match+0x10>

0002b46e <__hexnan>:
   2b46e:	680b      	ldr	r3, [r1, #0]
   2b470:	6801      	ldr	r1, [r0, #0]
   2b472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b476:	115e      	asrs	r6, r3, #5
   2b478:	f013 031f 	ands.w	r3, r3, #31
   2b47c:	f04f 0500 	mov.w	r5, #0
   2b480:	b087      	sub	sp, #28
   2b482:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   2b486:	4682      	mov	sl, r0
   2b488:	4690      	mov	r8, r2
   2b48a:	46ab      	mov	fp, r5
   2b48c:	bf18      	it	ne
   2b48e:	3604      	addne	r6, #4
   2b490:	9301      	str	r3, [sp, #4]
   2b492:	9502      	str	r5, [sp, #8]
   2b494:	1f37      	subs	r7, r6, #4
   2b496:	f846 5c04 	str.w	r5, [r6, #-4]
   2b49a:	46b9      	mov	r9, r7
   2b49c:	463c      	mov	r4, r7
   2b49e:	1c4b      	adds	r3, r1, #1
   2b4a0:	784a      	ldrb	r2, [r1, #1]
   2b4a2:	9303      	str	r3, [sp, #12]
   2b4a4:	b342      	cbz	r2, 2b4f8 <__hexnan+0x8a>
   2b4a6:	4610      	mov	r0, r2
   2b4a8:	9105      	str	r1, [sp, #20]
   2b4aa:	9204      	str	r2, [sp, #16]
   2b4ac:	f7ff ffa4 	bl	2b3f8 <__hexdig_fun>
   2b4b0:	2800      	cmp	r0, #0
   2b4b2:	d14f      	bne.n	2b554 <__hexnan+0xe6>
   2b4b4:	9a04      	ldr	r2, [sp, #16]
   2b4b6:	9905      	ldr	r1, [sp, #20]
   2b4b8:	2a20      	cmp	r2, #32
   2b4ba:	d818      	bhi.n	2b4ee <__hexnan+0x80>
   2b4bc:	9b02      	ldr	r3, [sp, #8]
   2b4be:	459b      	cmp	fp, r3
   2b4c0:	dd13      	ble.n	2b4ea <__hexnan+0x7c>
   2b4c2:	454c      	cmp	r4, r9
   2b4c4:	d206      	bcs.n	2b4d4 <__hexnan+0x66>
   2b4c6:	2d07      	cmp	r5, #7
   2b4c8:	dc04      	bgt.n	2b4d4 <__hexnan+0x66>
   2b4ca:	462a      	mov	r2, r5
   2b4cc:	4649      	mov	r1, r9
   2b4ce:	4620      	mov	r0, r4
   2b4d0:	f7ff ffa7 	bl	2b422 <L_shift>
   2b4d4:	4544      	cmp	r4, r8
   2b4d6:	d94f      	bls.n	2b578 <__hexnan+0x10a>
   2b4d8:	2300      	movs	r3, #0
   2b4da:	f1a4 0904 	sub.w	r9, r4, #4
   2b4de:	f8cd b008 	str.w	fp, [sp, #8]
   2b4e2:	f844 3c04 	str.w	r3, [r4, #-4]
   2b4e6:	461d      	mov	r5, r3
   2b4e8:	464c      	mov	r4, r9
   2b4ea:	9903      	ldr	r1, [sp, #12]
   2b4ec:	e7d7      	b.n	2b49e <__hexnan+0x30>
   2b4ee:	2a29      	cmp	r2, #41	; 0x29
   2b4f0:	d155      	bne.n	2b59e <__hexnan+0x130>
   2b4f2:	3102      	adds	r1, #2
   2b4f4:	f8ca 1000 	str.w	r1, [sl]
   2b4f8:	f1bb 0f00 	cmp.w	fp, #0
   2b4fc:	d04f      	beq.n	2b59e <__hexnan+0x130>
   2b4fe:	454c      	cmp	r4, r9
   2b500:	d206      	bcs.n	2b510 <__hexnan+0xa2>
   2b502:	2d07      	cmp	r5, #7
   2b504:	dc04      	bgt.n	2b510 <__hexnan+0xa2>
   2b506:	462a      	mov	r2, r5
   2b508:	4649      	mov	r1, r9
   2b50a:	4620      	mov	r0, r4
   2b50c:	f7ff ff89 	bl	2b422 <L_shift>
   2b510:	4544      	cmp	r4, r8
   2b512:	d933      	bls.n	2b57c <__hexnan+0x10e>
   2b514:	f1a8 0204 	sub.w	r2, r8, #4
   2b518:	4623      	mov	r3, r4
   2b51a:	f853 1b04 	ldr.w	r1, [r3], #4
   2b51e:	429f      	cmp	r7, r3
   2b520:	f842 1f04 	str.w	r1, [r2, #4]!
   2b524:	d2f9      	bcs.n	2b51a <__hexnan+0xac>
   2b526:	1b3b      	subs	r3, r7, r4
   2b528:	3e03      	subs	r6, #3
   2b52a:	3401      	adds	r4, #1
   2b52c:	2200      	movs	r2, #0
   2b52e:	f023 0303 	bic.w	r3, r3, #3
   2b532:	3304      	adds	r3, #4
   2b534:	42b4      	cmp	r4, r6
   2b536:	bf88      	it	hi
   2b538:	2304      	movhi	r3, #4
   2b53a:	4443      	add	r3, r8
   2b53c:	f843 2b04 	str.w	r2, [r3], #4
   2b540:	429f      	cmp	r7, r3
   2b542:	d2fb      	bcs.n	2b53c <__hexnan+0xce>
   2b544:	683b      	ldr	r3, [r7, #0]
   2b546:	b91b      	cbnz	r3, 2b550 <__hexnan+0xe2>
   2b548:	4547      	cmp	r7, r8
   2b54a:	d126      	bne.n	2b59a <__hexnan+0x12c>
   2b54c:	2301      	movs	r3, #1
   2b54e:	603b      	str	r3, [r7, #0]
   2b550:	2005      	movs	r0, #5
   2b552:	e025      	b.n	2b5a0 <__hexnan+0x132>
   2b554:	3501      	adds	r5, #1
   2b556:	f10b 0b01 	add.w	fp, fp, #1
   2b55a:	2d08      	cmp	r5, #8
   2b55c:	dd05      	ble.n	2b56a <__hexnan+0xfc>
   2b55e:	4544      	cmp	r4, r8
   2b560:	d9c3      	bls.n	2b4ea <__hexnan+0x7c>
   2b562:	2300      	movs	r3, #0
   2b564:	3c04      	subs	r4, #4
   2b566:	2501      	movs	r5, #1
   2b568:	6023      	str	r3, [r4, #0]
   2b56a:	6822      	ldr	r2, [r4, #0]
   2b56c:	f000 000f 	and.w	r0, r0, #15
   2b570:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   2b574:	6022      	str	r2, [r4, #0]
   2b576:	e7b8      	b.n	2b4ea <__hexnan+0x7c>
   2b578:	2508      	movs	r5, #8
   2b57a:	e7b6      	b.n	2b4ea <__hexnan+0x7c>
   2b57c:	9b01      	ldr	r3, [sp, #4]
   2b57e:	2b00      	cmp	r3, #0
   2b580:	d0e0      	beq.n	2b544 <__hexnan+0xd6>
   2b582:	f04f 32ff 	mov.w	r2, #4294967295
   2b586:	f1c3 0320 	rsb	r3, r3, #32
   2b58a:	fa22 f303 	lsr.w	r3, r2, r3
   2b58e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   2b592:	401a      	ands	r2, r3
   2b594:	f846 2c04 	str.w	r2, [r6, #-4]
   2b598:	e7d4      	b.n	2b544 <__hexnan+0xd6>
   2b59a:	3f04      	subs	r7, #4
   2b59c:	e7d2      	b.n	2b544 <__hexnan+0xd6>
   2b59e:	2004      	movs	r0, #4
   2b5a0:	b007      	add	sp, #28
   2b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b5a6 <__ascii_mbtowc>:
   2b5a6:	b082      	sub	sp, #8
   2b5a8:	b901      	cbnz	r1, 2b5ac <__ascii_mbtowc+0x6>
   2b5aa:	a901      	add	r1, sp, #4
   2b5ac:	b142      	cbz	r2, 2b5c0 <__ascii_mbtowc+0x1a>
   2b5ae:	b14b      	cbz	r3, 2b5c4 <__ascii_mbtowc+0x1e>
   2b5b0:	7813      	ldrb	r3, [r2, #0]
   2b5b2:	600b      	str	r3, [r1, #0]
   2b5b4:	7812      	ldrb	r2, [r2, #0]
   2b5b6:	1e10      	subs	r0, r2, #0
   2b5b8:	bf18      	it	ne
   2b5ba:	2001      	movne	r0, #1
   2b5bc:	b002      	add	sp, #8
   2b5be:	4770      	bx	lr
   2b5c0:	4610      	mov	r0, r2
   2b5c2:	e7fb      	b.n	2b5bc <__ascii_mbtowc+0x16>
   2b5c4:	f06f 0001 	mvn.w	r0, #1
   2b5c8:	e7f8      	b.n	2b5bc <__ascii_mbtowc+0x16>

0002b5ca <_Balloc>:
   2b5ca:	b570      	push	{r4, r5, r6, lr}
   2b5cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2b5ce:	4604      	mov	r4, r0
   2b5d0:	460d      	mov	r5, r1
   2b5d2:	b93e      	cbnz	r6, 2b5e4 <_Balloc+0x1a>
   2b5d4:	2010      	movs	r0, #16
   2b5d6:	f7f8 feff 	bl	243d8 <malloc>
   2b5da:	6260      	str	r0, [r4, #36]	; 0x24
   2b5dc:	6006      	str	r6, [r0, #0]
   2b5de:	60c6      	str	r6, [r0, #12]
   2b5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2b5e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2b5e6:	68f3      	ldr	r3, [r6, #12]
   2b5e8:	b183      	cbz	r3, 2b60c <_Balloc+0x42>
   2b5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b5ec:	68db      	ldr	r3, [r3, #12]
   2b5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2b5f2:	b9b8      	cbnz	r0, 2b624 <_Balloc+0x5a>
   2b5f4:	2101      	movs	r1, #1
   2b5f6:	4620      	mov	r0, r4
   2b5f8:	fa01 f605 	lsl.w	r6, r1, r5
   2b5fc:	1d72      	adds	r2, r6, #5
   2b5fe:	0092      	lsls	r2, r2, #2
   2b600:	f000 fb5e 	bl	2bcc0 <_calloc_r>
   2b604:	b160      	cbz	r0, 2b620 <_Balloc+0x56>
   2b606:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2b60a:	e00e      	b.n	2b62a <_Balloc+0x60>
   2b60c:	2221      	movs	r2, #33	; 0x21
   2b60e:	2104      	movs	r1, #4
   2b610:	4620      	mov	r0, r4
   2b612:	f000 fb55 	bl	2bcc0 <_calloc_r>
   2b616:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b618:	60f0      	str	r0, [r6, #12]
   2b61a:	68db      	ldr	r3, [r3, #12]
   2b61c:	2b00      	cmp	r3, #0
   2b61e:	d1e4      	bne.n	2b5ea <_Balloc+0x20>
   2b620:	2000      	movs	r0, #0
   2b622:	bd70      	pop	{r4, r5, r6, pc}
   2b624:	6802      	ldr	r2, [r0, #0]
   2b626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2b62a:	2300      	movs	r3, #0
   2b62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2b630:	e7f7      	b.n	2b622 <_Balloc+0x58>

0002b632 <_Bfree>:
   2b632:	b570      	push	{r4, r5, r6, lr}
   2b634:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2b636:	4605      	mov	r5, r0
   2b638:	460c      	mov	r4, r1
   2b63a:	b93e      	cbnz	r6, 2b64c <_Bfree+0x1a>
   2b63c:	2010      	movs	r0, #16
   2b63e:	f7f8 fecb 	bl	243d8 <malloc>
   2b642:	6268      	str	r0, [r5, #36]	; 0x24
   2b644:	6006      	str	r6, [r0, #0]
   2b646:	60c6      	str	r6, [r0, #12]
   2b648:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2b64c:	b13c      	cbz	r4, 2b65e <_Bfree+0x2c>
   2b64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b650:	6862      	ldr	r2, [r4, #4]
   2b652:	68db      	ldr	r3, [r3, #12]
   2b654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b658:	6021      	str	r1, [r4, #0]
   2b65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b65e:	bd70      	pop	{r4, r5, r6, pc}

0002b660 <__multadd>:
   2b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b664:	4607      	mov	r7, r0
   2b666:	4698      	mov	r8, r3
   2b668:	460c      	mov	r4, r1
   2b66a:	690e      	ldr	r6, [r1, #16]
   2b66c:	f101 0014 	add.w	r0, r1, #20
   2b670:	2300      	movs	r3, #0
   2b672:	6805      	ldr	r5, [r0, #0]
   2b674:	3301      	adds	r3, #1
   2b676:	b2a9      	uxth	r1, r5
   2b678:	429e      	cmp	r6, r3
   2b67a:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2b67e:	fb02 8101 	mla	r1, r2, r1, r8
   2b682:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   2b686:	b289      	uxth	r1, r1
   2b688:	fb02 c505 	mla	r5, r2, r5, ip
   2b68c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   2b690:	ea4f 4815 	mov.w	r8, r5, lsr #16
   2b694:	f840 1b04 	str.w	r1, [r0], #4
   2b698:	dceb      	bgt.n	2b672 <__multadd+0x12>
   2b69a:	f1b8 0f00 	cmp.w	r8, #0
   2b69e:	d01b      	beq.n	2b6d8 <__multadd+0x78>
   2b6a0:	68a3      	ldr	r3, [r4, #8]
   2b6a2:	42b3      	cmp	r3, r6
   2b6a4:	dc12      	bgt.n	2b6cc <__multadd+0x6c>
   2b6a6:	6861      	ldr	r1, [r4, #4]
   2b6a8:	4638      	mov	r0, r7
   2b6aa:	3101      	adds	r1, #1
   2b6ac:	f7ff ff8d 	bl	2b5ca <_Balloc>
   2b6b0:	6922      	ldr	r2, [r4, #16]
   2b6b2:	4605      	mov	r5, r0
   2b6b4:	f104 010c 	add.w	r1, r4, #12
   2b6b8:	3202      	adds	r2, #2
   2b6ba:	300c      	adds	r0, #12
   2b6bc:	0092      	lsls	r2, r2, #2
   2b6be:	f7ff fbc3 	bl	2ae48 <memcpy>
   2b6c2:	4621      	mov	r1, r4
   2b6c4:	462c      	mov	r4, r5
   2b6c6:	4638      	mov	r0, r7
   2b6c8:	f7ff ffb3 	bl	2b632 <_Bfree>
   2b6cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   2b6d0:	3601      	adds	r6, #1
   2b6d2:	f8c3 8014 	str.w	r8, [r3, #20]
   2b6d6:	6126      	str	r6, [r4, #16]
   2b6d8:	4620      	mov	r0, r4
   2b6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b6de <__s2b>:
   2b6de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b6e2:	4615      	mov	r5, r2
   2b6e4:	461f      	mov	r7, r3
   2b6e6:	2209      	movs	r2, #9
   2b6e8:	3308      	adds	r3, #8
   2b6ea:	460c      	mov	r4, r1
   2b6ec:	4606      	mov	r6, r0
   2b6ee:	2100      	movs	r1, #0
   2b6f0:	fb93 f3f2 	sdiv	r3, r3, r2
   2b6f4:	2201      	movs	r2, #1
   2b6f6:	429a      	cmp	r2, r3
   2b6f8:	db20      	blt.n	2b73c <__s2b+0x5e>
   2b6fa:	4630      	mov	r0, r6
   2b6fc:	f7ff ff65 	bl	2b5ca <_Balloc>
   2b700:	9b08      	ldr	r3, [sp, #32]
   2b702:	2d09      	cmp	r5, #9
   2b704:	6143      	str	r3, [r0, #20]
   2b706:	f04f 0301 	mov.w	r3, #1
   2b70a:	6103      	str	r3, [r0, #16]
   2b70c:	dd19      	ble.n	2b742 <__s2b+0x64>
   2b70e:	f104 0909 	add.w	r9, r4, #9
   2b712:	442c      	add	r4, r5
   2b714:	46c8      	mov	r8, r9
   2b716:	f818 3b01 	ldrb.w	r3, [r8], #1
   2b71a:	4601      	mov	r1, r0
   2b71c:	220a      	movs	r2, #10
   2b71e:	4630      	mov	r0, r6
   2b720:	3b30      	subs	r3, #48	; 0x30
   2b722:	f7ff ff9d 	bl	2b660 <__multadd>
   2b726:	45a0      	cmp	r8, r4
   2b728:	d1f5      	bne.n	2b716 <__s2b+0x38>
   2b72a:	f1a5 0408 	sub.w	r4, r5, #8
   2b72e:	444c      	add	r4, r9
   2b730:	1b2d      	subs	r5, r5, r4
   2b732:	1963      	adds	r3, r4, r5
   2b734:	42bb      	cmp	r3, r7
   2b736:	db07      	blt.n	2b748 <__s2b+0x6a>
   2b738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b73c:	0052      	lsls	r2, r2, #1
   2b73e:	3101      	adds	r1, #1
   2b740:	e7d9      	b.n	2b6f6 <__s2b+0x18>
   2b742:	340a      	adds	r4, #10
   2b744:	2509      	movs	r5, #9
   2b746:	e7f3      	b.n	2b730 <__s2b+0x52>
   2b748:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b74c:	4601      	mov	r1, r0
   2b74e:	220a      	movs	r2, #10
   2b750:	4630      	mov	r0, r6
   2b752:	3b30      	subs	r3, #48	; 0x30
   2b754:	f7ff ff84 	bl	2b660 <__multadd>
   2b758:	e7eb      	b.n	2b732 <__s2b+0x54>

0002b75a <__hi0bits>:
   2b75a:	0c03      	lsrs	r3, r0, #16
   2b75c:	041b      	lsls	r3, r3, #16
   2b75e:	b9d3      	cbnz	r3, 2b796 <__hi0bits+0x3c>
   2b760:	0400      	lsls	r0, r0, #16
   2b762:	2310      	movs	r3, #16
   2b764:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2b768:	bf04      	itt	eq
   2b76a:	0200      	lsleq	r0, r0, #8
   2b76c:	3308      	addeq	r3, #8
   2b76e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2b772:	bf04      	itt	eq
   2b774:	0100      	lsleq	r0, r0, #4
   2b776:	3304      	addeq	r3, #4
   2b778:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2b77c:	bf04      	itt	eq
   2b77e:	0080      	lsleq	r0, r0, #2
   2b780:	3302      	addeq	r3, #2
   2b782:	2800      	cmp	r0, #0
   2b784:	db05      	blt.n	2b792 <__hi0bits+0x38>
   2b786:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2b78a:	f103 0301 	add.w	r3, r3, #1
   2b78e:	bf08      	it	eq
   2b790:	2320      	moveq	r3, #32
   2b792:	4618      	mov	r0, r3
   2b794:	4770      	bx	lr
   2b796:	2300      	movs	r3, #0
   2b798:	e7e4      	b.n	2b764 <__hi0bits+0xa>

0002b79a <__lo0bits>:
   2b79a:	6803      	ldr	r3, [r0, #0]
   2b79c:	4601      	mov	r1, r0
   2b79e:	f013 0207 	ands.w	r2, r3, #7
   2b7a2:	d00b      	beq.n	2b7bc <__lo0bits+0x22>
   2b7a4:	07da      	lsls	r2, r3, #31
   2b7a6:	d424      	bmi.n	2b7f2 <__lo0bits+0x58>
   2b7a8:	0798      	lsls	r0, r3, #30
   2b7aa:	bf47      	ittee	mi
   2b7ac:	085b      	lsrmi	r3, r3, #1
   2b7ae:	2001      	movmi	r0, #1
   2b7b0:	089b      	lsrpl	r3, r3, #2
   2b7b2:	2002      	movpl	r0, #2
   2b7b4:	bf4c      	ite	mi
   2b7b6:	600b      	strmi	r3, [r1, #0]
   2b7b8:	600b      	strpl	r3, [r1, #0]
   2b7ba:	4770      	bx	lr
   2b7bc:	b298      	uxth	r0, r3
   2b7be:	b9b0      	cbnz	r0, 2b7ee <__lo0bits+0x54>
   2b7c0:	0c1b      	lsrs	r3, r3, #16
   2b7c2:	2010      	movs	r0, #16
   2b7c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   2b7c8:	bf04      	itt	eq
   2b7ca:	0a1b      	lsreq	r3, r3, #8
   2b7cc:	3008      	addeq	r0, #8
   2b7ce:	071a      	lsls	r2, r3, #28
   2b7d0:	bf04      	itt	eq
   2b7d2:	091b      	lsreq	r3, r3, #4
   2b7d4:	3004      	addeq	r0, #4
   2b7d6:	079a      	lsls	r2, r3, #30
   2b7d8:	bf04      	itt	eq
   2b7da:	089b      	lsreq	r3, r3, #2
   2b7dc:	3002      	addeq	r0, #2
   2b7de:	07da      	lsls	r2, r3, #31
   2b7e0:	d403      	bmi.n	2b7ea <__lo0bits+0x50>
   2b7e2:	085b      	lsrs	r3, r3, #1
   2b7e4:	f100 0001 	add.w	r0, r0, #1
   2b7e8:	d005      	beq.n	2b7f6 <__lo0bits+0x5c>
   2b7ea:	600b      	str	r3, [r1, #0]
   2b7ec:	4770      	bx	lr
   2b7ee:	4610      	mov	r0, r2
   2b7f0:	e7e8      	b.n	2b7c4 <__lo0bits+0x2a>
   2b7f2:	2000      	movs	r0, #0
   2b7f4:	4770      	bx	lr
   2b7f6:	2020      	movs	r0, #32
   2b7f8:	4770      	bx	lr

0002b7fa <__i2b>:
   2b7fa:	b510      	push	{r4, lr}
   2b7fc:	460c      	mov	r4, r1
   2b7fe:	2101      	movs	r1, #1
   2b800:	f7ff fee3 	bl	2b5ca <_Balloc>
   2b804:	2201      	movs	r2, #1
   2b806:	6144      	str	r4, [r0, #20]
   2b808:	6102      	str	r2, [r0, #16]
   2b80a:	bd10      	pop	{r4, pc}

0002b80c <__multiply>:
   2b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b810:	4615      	mov	r5, r2
   2b812:	690a      	ldr	r2, [r1, #16]
   2b814:	460c      	mov	r4, r1
   2b816:	b085      	sub	sp, #20
   2b818:	692b      	ldr	r3, [r5, #16]
   2b81a:	429a      	cmp	r2, r3
   2b81c:	bfbe      	ittt	lt
   2b81e:	460b      	movlt	r3, r1
   2b820:	462c      	movlt	r4, r5
   2b822:	461d      	movlt	r5, r3
   2b824:	6927      	ldr	r7, [r4, #16]
   2b826:	68a3      	ldr	r3, [r4, #8]
   2b828:	f8d5 9010 	ldr.w	r9, [r5, #16]
   2b82c:	6861      	ldr	r1, [r4, #4]
   2b82e:	eb07 0609 	add.w	r6, r7, r9
   2b832:	42b3      	cmp	r3, r6
   2b834:	bfb8      	it	lt
   2b836:	3101      	addlt	r1, #1
   2b838:	f7ff fec7 	bl	2b5ca <_Balloc>
   2b83c:	f100 0114 	add.w	r1, r0, #20
   2b840:	2200      	movs	r2, #0
   2b842:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   2b846:	460b      	mov	r3, r1
   2b848:	4543      	cmp	r3, r8
   2b84a:	d31d      	bcc.n	2b888 <__multiply+0x7c>
   2b84c:	f104 0314 	add.w	r3, r4, #20
   2b850:	f105 0214 	add.w	r2, r5, #20
   2b854:	f104 0515 	add.w	r5, r4, #21
   2b858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2b85c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   2b860:	9302      	str	r3, [sp, #8]
   2b862:	1b3b      	subs	r3, r7, r4
   2b864:	3b15      	subs	r3, #21
   2b866:	f023 0303 	bic.w	r3, r3, #3
   2b86a:	3304      	adds	r3, #4
   2b86c:	42af      	cmp	r7, r5
   2b86e:	bf38      	it	cc
   2b870:	2304      	movcc	r3, #4
   2b872:	9301      	str	r3, [sp, #4]
   2b874:	9b02      	ldr	r3, [sp, #8]
   2b876:	9203      	str	r2, [sp, #12]
   2b878:	4293      	cmp	r3, r2
   2b87a:	d808      	bhi.n	2b88e <__multiply+0x82>
   2b87c:	2e00      	cmp	r6, #0
   2b87e:	dc5a      	bgt.n	2b936 <__multiply+0x12a>
   2b880:	6106      	str	r6, [r0, #16]
   2b882:	b005      	add	sp, #20
   2b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b888:	f843 2b04 	str.w	r2, [r3], #4
   2b88c:	e7dc      	b.n	2b848 <__multiply+0x3c>
   2b88e:	f8b2 a000 	ldrh.w	sl, [r2]
   2b892:	f1ba 0f00 	cmp.w	sl, #0
   2b896:	d024      	beq.n	2b8e2 <__multiply+0xd6>
   2b898:	f104 0e14 	add.w	lr, r4, #20
   2b89c:	4689      	mov	r9, r1
   2b89e:	f04f 0c00 	mov.w	ip, #0
   2b8a2:	f85e 5b04 	ldr.w	r5, [lr], #4
   2b8a6:	f8d9 b000 	ldr.w	fp, [r9]
   2b8aa:	b2ab      	uxth	r3, r5
   2b8ac:	4577      	cmp	r7, lr
   2b8ae:	fa1f fb8b 	uxth.w	fp, fp
   2b8b2:	fb0a b303 	mla	r3, sl, r3, fp
   2b8b6:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   2b8ba:	f8d9 5000 	ldr.w	r5, [r9]
   2b8be:	4463      	add	r3, ip
   2b8c0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   2b8c4:	fb0a c50b 	mla	r5, sl, fp, ip
   2b8c8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   2b8cc:	b29b      	uxth	r3, r3
   2b8ce:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   2b8d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   2b8d6:	f849 3b04 	str.w	r3, [r9], #4
   2b8da:	d8e2      	bhi.n	2b8a2 <__multiply+0x96>
   2b8dc:	9b01      	ldr	r3, [sp, #4]
   2b8de:	f841 c003 	str.w	ip, [r1, r3]
   2b8e2:	9b03      	ldr	r3, [sp, #12]
   2b8e4:	3204      	adds	r2, #4
   2b8e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2b8ea:	f1b9 0f00 	cmp.w	r9, #0
   2b8ee:	d020      	beq.n	2b932 <__multiply+0x126>
   2b8f0:	680b      	ldr	r3, [r1, #0]
   2b8f2:	f104 0c14 	add.w	ip, r4, #20
   2b8f6:	468e      	mov	lr, r1
   2b8f8:	f04f 0a00 	mov.w	sl, #0
   2b8fc:	f8bc 5000 	ldrh.w	r5, [ip]
   2b900:	b29b      	uxth	r3, r3
   2b902:	f8be b002 	ldrh.w	fp, [lr, #2]
   2b906:	fb09 b505 	mla	r5, r9, r5, fp
   2b90a:	44aa      	add	sl, r5
   2b90c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   2b910:	f84e 3b04 	str.w	r3, [lr], #4
   2b914:	f85c 3b04 	ldr.w	r3, [ip], #4
   2b918:	f8be 5000 	ldrh.w	r5, [lr]
   2b91c:	0c1b      	lsrs	r3, r3, #16
   2b91e:	4567      	cmp	r7, ip
   2b920:	fb09 5303 	mla	r3, r9, r3, r5
   2b924:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   2b928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2b92c:	d8e6      	bhi.n	2b8fc <__multiply+0xf0>
   2b92e:	9d01      	ldr	r5, [sp, #4]
   2b930:	514b      	str	r3, [r1, r5]
   2b932:	3104      	adds	r1, #4
   2b934:	e79e      	b.n	2b874 <__multiply+0x68>
   2b936:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2b93a:	2b00      	cmp	r3, #0
   2b93c:	d1a0      	bne.n	2b880 <__multiply+0x74>
   2b93e:	3e01      	subs	r6, #1
   2b940:	e79c      	b.n	2b87c <__multiply+0x70>

0002b942 <__lshift>:
   2b942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b946:	460c      	mov	r4, r1
   2b948:	4607      	mov	r7, r0
   2b94a:	4691      	mov	r9, r2
   2b94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2b950:	6923      	ldr	r3, [r4, #16]
   2b952:	6849      	ldr	r1, [r1, #4]
   2b954:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2b958:	68a3      	ldr	r3, [r4, #8]
   2b95a:	f108 0601 	add.w	r6, r8, #1
   2b95e:	42b3      	cmp	r3, r6
   2b960:	db3f      	blt.n	2b9e2 <__lshift+0xa0>
   2b962:	4638      	mov	r0, r7
   2b964:	f7ff fe31 	bl	2b5ca <_Balloc>
   2b968:	2300      	movs	r3, #0
   2b96a:	4605      	mov	r5, r0
   2b96c:	f100 0114 	add.w	r1, r0, #20
   2b970:	f100 0210 	add.w	r2, r0, #16
   2b974:	4618      	mov	r0, r3
   2b976:	4553      	cmp	r3, sl
   2b978:	db36      	blt.n	2b9e8 <__lshift+0xa6>
   2b97a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2b97e:	f104 0314 	add.w	r3, r4, #20
   2b982:	6920      	ldr	r0, [r4, #16]
   2b984:	f019 091f 	ands.w	r9, r9, #31
   2b988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2b98c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2b990:	d02e      	beq.n	2b9f0 <__lshift+0xae>
   2b992:	f1c9 0e20 	rsb	lr, r9, #32
   2b996:	468a      	mov	sl, r1
   2b998:	2200      	movs	r2, #0
   2b99a:	6818      	ldr	r0, [r3, #0]
   2b99c:	fa00 f009 	lsl.w	r0, r0, r9
   2b9a0:	4302      	orrs	r2, r0
   2b9a2:	f84a 2b04 	str.w	r2, [sl], #4
   2b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
   2b9aa:	459c      	cmp	ip, r3
   2b9ac:	fa22 f20e 	lsr.w	r2, r2, lr
   2b9b0:	d8f3      	bhi.n	2b99a <__lshift+0x58>
   2b9b2:	ebac 0304 	sub.w	r3, ip, r4
   2b9b6:	f104 0015 	add.w	r0, r4, #21
   2b9ba:	3b15      	subs	r3, #21
   2b9bc:	f023 0303 	bic.w	r3, r3, #3
   2b9c0:	3304      	adds	r3, #4
   2b9c2:	4560      	cmp	r0, ip
   2b9c4:	bf88      	it	hi
   2b9c6:	2304      	movhi	r3, #4
   2b9c8:	50ca      	str	r2, [r1, r3]
   2b9ca:	b10a      	cbz	r2, 2b9d0 <__lshift+0x8e>
   2b9cc:	f108 0602 	add.w	r6, r8, #2
   2b9d0:	3e01      	subs	r6, #1
   2b9d2:	4638      	mov	r0, r7
   2b9d4:	4621      	mov	r1, r4
   2b9d6:	612e      	str	r6, [r5, #16]
   2b9d8:	f7ff fe2b 	bl	2b632 <_Bfree>
   2b9dc:	4628      	mov	r0, r5
   2b9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b9e2:	3101      	adds	r1, #1
   2b9e4:	005b      	lsls	r3, r3, #1
   2b9e6:	e7ba      	b.n	2b95e <__lshift+0x1c>
   2b9e8:	3301      	adds	r3, #1
   2b9ea:	f842 0f04 	str.w	r0, [r2, #4]!
   2b9ee:	e7c2      	b.n	2b976 <__lshift+0x34>
   2b9f0:	3904      	subs	r1, #4
   2b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
   2b9f6:	459c      	cmp	ip, r3
   2b9f8:	f841 2f04 	str.w	r2, [r1, #4]!
   2b9fc:	d8f9      	bhi.n	2b9f2 <__lshift+0xb0>
   2b9fe:	e7e7      	b.n	2b9d0 <__lshift+0x8e>

0002ba00 <__mcmp>:
   2ba00:	6902      	ldr	r2, [r0, #16]
   2ba02:	b530      	push	{r4, r5, lr}
   2ba04:	690c      	ldr	r4, [r1, #16]
   2ba06:	1b12      	subs	r2, r2, r4
   2ba08:	d10e      	bne.n	2ba28 <__mcmp+0x28>
   2ba0a:	f100 0314 	add.w	r3, r0, #20
   2ba0e:	3114      	adds	r1, #20
   2ba10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   2ba14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2ba18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   2ba1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2ba20:	42a5      	cmp	r5, r4
   2ba22:	d003      	beq.n	2ba2c <__mcmp+0x2c>
   2ba24:	d305      	bcc.n	2ba32 <__mcmp+0x32>
   2ba26:	2201      	movs	r2, #1
   2ba28:	4610      	mov	r0, r2
   2ba2a:	bd30      	pop	{r4, r5, pc}
   2ba2c:	4283      	cmp	r3, r0
   2ba2e:	d3f3      	bcc.n	2ba18 <__mcmp+0x18>
   2ba30:	e7fa      	b.n	2ba28 <__mcmp+0x28>
   2ba32:	f04f 32ff 	mov.w	r2, #4294967295
   2ba36:	e7f7      	b.n	2ba28 <__mcmp+0x28>

0002ba38 <__mdiff>:
   2ba38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba3c:	460c      	mov	r4, r1
   2ba3e:	4606      	mov	r6, r0
   2ba40:	4611      	mov	r1, r2
   2ba42:	4692      	mov	sl, r2
   2ba44:	4620      	mov	r0, r4
   2ba46:	f7ff ffdb 	bl	2ba00 <__mcmp>
   2ba4a:	1e05      	subs	r5, r0, #0
   2ba4c:	d108      	bne.n	2ba60 <__mdiff+0x28>
   2ba4e:	4629      	mov	r1, r5
   2ba50:	4630      	mov	r0, r6
   2ba52:	f7ff fdba 	bl	2b5ca <_Balloc>
   2ba56:	2301      	movs	r3, #1
   2ba58:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2ba5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba60:	bfa3      	ittte	ge
   2ba62:	4653      	movge	r3, sl
   2ba64:	46a2      	movge	sl, r4
   2ba66:	2500      	movge	r5, #0
   2ba68:	2501      	movlt	r5, #1
   2ba6a:	bfa8      	it	ge
   2ba6c:	461c      	movge	r4, r3
   2ba6e:	f8da 1004 	ldr.w	r1, [sl, #4]
   2ba72:	4630      	mov	r0, r6
   2ba74:	f7ff fda9 	bl	2b5ca <_Balloc>
   2ba78:	f104 0914 	add.w	r9, r4, #20
   2ba7c:	f8da 7010 	ldr.w	r7, [sl, #16]
   2ba80:	f100 0814 	add.w	r8, r0, #20
   2ba84:	6926      	ldr	r6, [r4, #16]
   2ba86:	f10a 0210 	add.w	r2, sl, #16
   2ba8a:	60c5      	str	r5, [r0, #12]
   2ba8c:	f10a 0514 	add.w	r5, sl, #20
   2ba90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   2ba94:	46c2      	mov	sl, r8
   2ba96:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   2ba9a:	f04f 0c00 	mov.w	ip, #0
   2ba9e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   2baa2:	f859 3b04 	ldr.w	r3, [r9], #4
   2baa6:	fa1f f18b 	uxth.w	r1, fp
   2baaa:	454e      	cmp	r6, r9
   2baac:	4461      	add	r1, ip
   2baae:	fa1f fc83 	uxth.w	ip, r3
   2bab2:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2bab6:	eba1 010c 	sub.w	r1, r1, ip
   2baba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   2babe:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2bac2:	b289      	uxth	r1, r1
   2bac4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   2bac8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2bacc:	f84a 3b04 	str.w	r3, [sl], #4
   2bad0:	d8e5      	bhi.n	2ba9e <__mdiff+0x66>
   2bad2:	1b33      	subs	r3, r6, r4
   2bad4:	3415      	adds	r4, #21
   2bad6:	3b15      	subs	r3, #21
   2bad8:	f023 0303 	bic.w	r3, r3, #3
   2badc:	3304      	adds	r3, #4
   2bade:	42a6      	cmp	r6, r4
   2bae0:	bf38      	it	cc
   2bae2:	2304      	movcc	r3, #4
   2bae4:	441d      	add	r5, r3
   2bae6:	4443      	add	r3, r8
   2bae8:	462c      	mov	r4, r5
   2baea:	461e      	mov	r6, r3
   2baec:	4574      	cmp	r4, lr
   2baee:	d30e      	bcc.n	2bb0e <__mdiff+0xd6>
   2baf0:	f10e 0203 	add.w	r2, lr, #3
   2baf4:	1b52      	subs	r2, r2, r5
   2baf6:	3d03      	subs	r5, #3
   2baf8:	f022 0203 	bic.w	r2, r2, #3
   2bafc:	45ae      	cmp	lr, r5
   2bafe:	bf38      	it	cc
   2bb00:	2200      	movcc	r2, #0
   2bb02:	441a      	add	r2, r3
   2bb04:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2bb08:	b18b      	cbz	r3, 2bb2e <__mdiff+0xf6>
   2bb0a:	6107      	str	r7, [r0, #16]
   2bb0c:	e7a6      	b.n	2ba5c <__mdiff+0x24>
   2bb0e:	f854 8b04 	ldr.w	r8, [r4], #4
   2bb12:	fa1f f288 	uxth.w	r2, r8
   2bb16:	4462      	add	r2, ip
   2bb18:	1411      	asrs	r1, r2, #16
   2bb1a:	b292      	uxth	r2, r2
   2bb1c:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   2bb20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2bb24:	ea4f 4c21 	mov.w	ip, r1, asr #16
   2bb28:	f846 2b04 	str.w	r2, [r6], #4
   2bb2c:	e7de      	b.n	2baec <__mdiff+0xb4>
   2bb2e:	3f01      	subs	r7, #1
   2bb30:	e7e8      	b.n	2bb04 <__mdiff+0xcc>

0002bb32 <__d2b>:
   2bb32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bb36:	ec57 6b10 	vmov	r6, r7, d0
   2bb3a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   2bb3e:	4689      	mov	r9, r1
   2bb40:	2101      	movs	r1, #1
   2bb42:	4690      	mov	r8, r2
   2bb44:	f7ff fd41 	bl	2b5ca <_Balloc>
   2bb48:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2bb4c:	4604      	mov	r4, r0
   2bb4e:	bb35      	cbnz	r5, 2bb9e <__d2b+0x6c>
   2bb50:	2e00      	cmp	r6, #0
   2bb52:	9301      	str	r3, [sp, #4]
   2bb54:	d028      	beq.n	2bba8 <__d2b+0x76>
   2bb56:	4668      	mov	r0, sp
   2bb58:	9600      	str	r6, [sp, #0]
   2bb5a:	f7ff fe1e 	bl	2b79a <__lo0bits>
   2bb5e:	9900      	ldr	r1, [sp, #0]
   2bb60:	b300      	cbz	r0, 2bba4 <__d2b+0x72>
   2bb62:	9a01      	ldr	r2, [sp, #4]
   2bb64:	f1c0 0320 	rsb	r3, r0, #32
   2bb68:	fa02 f303 	lsl.w	r3, r2, r3
   2bb6c:	40c2      	lsrs	r2, r0
   2bb6e:	430b      	orrs	r3, r1
   2bb70:	9201      	str	r2, [sp, #4]
   2bb72:	6163      	str	r3, [r4, #20]
   2bb74:	9b01      	ldr	r3, [sp, #4]
   2bb76:	2b00      	cmp	r3, #0
   2bb78:	61a3      	str	r3, [r4, #24]
   2bb7a:	bf14      	ite	ne
   2bb7c:	2202      	movne	r2, #2
   2bb7e:	2201      	moveq	r2, #1
   2bb80:	6122      	str	r2, [r4, #16]
   2bb82:	b1d5      	cbz	r5, 2bbba <__d2b+0x88>
   2bb84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2bb88:	4405      	add	r5, r0
   2bb8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2bb8e:	f8c9 5000 	str.w	r5, [r9]
   2bb92:	f8c8 0000 	str.w	r0, [r8]
   2bb96:	4620      	mov	r0, r4
   2bb98:	b003      	add	sp, #12
   2bb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2bb9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2bba2:	e7d5      	b.n	2bb50 <__d2b+0x1e>
   2bba4:	6161      	str	r1, [r4, #20]
   2bba6:	e7e5      	b.n	2bb74 <__d2b+0x42>
   2bba8:	a801      	add	r0, sp, #4
   2bbaa:	f7ff fdf6 	bl	2b79a <__lo0bits>
   2bbae:	9b01      	ldr	r3, [sp, #4]
   2bbb0:	2201      	movs	r2, #1
   2bbb2:	3020      	adds	r0, #32
   2bbb4:	6163      	str	r3, [r4, #20]
   2bbb6:	6122      	str	r2, [r4, #16]
   2bbb8:	e7e3      	b.n	2bb82 <__d2b+0x50>
   2bbba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2bbbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2bbc2:	f8c9 0000 	str.w	r0, [r9]
   2bbc6:	6918      	ldr	r0, [r3, #16]
   2bbc8:	f7ff fdc7 	bl	2b75a <__hi0bits>
   2bbcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2bbd0:	e7df      	b.n	2bb92 <__d2b+0x60>

0002bbd2 <__ratio>:
   2bbd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbd6:	4688      	mov	r8, r1
   2bbd8:	4681      	mov	r9, r0
   2bbda:	4669      	mov	r1, sp
   2bbdc:	f7f9 fd34 	bl	25648 <__b2d>
   2bbe0:	a901      	add	r1, sp, #4
   2bbe2:	4640      	mov	r0, r8
   2bbe4:	ec55 4b10 	vmov	r4, r5, d0
   2bbe8:	f7f9 fd2e 	bl	25648 <__b2d>
   2bbec:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2bbf0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   2bbf4:	462f      	mov	r7, r5
   2bbf6:	eba3 0c02 	sub.w	ip, r3, r2
   2bbfa:	e9dd 3200 	ldrd	r3, r2, [sp]
   2bbfe:	ec51 0b10 	vmov	r0, r1, d0
   2bc02:	1a9b      	subs	r3, r3, r2
   2bc04:	468b      	mov	fp, r1
   2bc06:	4620      	mov	r0, r4
   2bc08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   2bc0c:	2b00      	cmp	r3, #0
   2bc0e:	bfd5      	itete	le
   2bc10:	460a      	movle	r2, r1
   2bc12:	462a      	movgt	r2, r5
   2bc14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   2bc18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   2bc1c:	bfd8      	it	le
   2bc1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   2bc22:	ee10 2a10 	vmov	r2, s0
   2bc26:	4639      	mov	r1, r7
   2bc28:	465b      	mov	r3, fp
   2bc2a:	f7e4 fdef 	bl	1080c <__aeabi_ddiv>
   2bc2e:	ec41 0b10 	vmov	d0, r0, r1
   2bc32:	b003      	add	sp, #12
   2bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc38 <__copybits>:
   2bc38:	3901      	subs	r1, #1
   2bc3a:	f102 0314 	add.w	r3, r2, #20
   2bc3e:	1149      	asrs	r1, r1, #5
   2bc40:	b570      	push	{r4, r5, r6, lr}
   2bc42:	3101      	adds	r1, #1
   2bc44:	6914      	ldr	r4, [r2, #16]
   2bc46:	1f05      	subs	r5, r0, #4
   2bc48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2bc4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2bc50:	42a3      	cmp	r3, r4
   2bc52:	d30c      	bcc.n	2bc6e <__copybits+0x36>
   2bc54:	1aa3      	subs	r3, r4, r2
   2bc56:	3211      	adds	r2, #17
   2bc58:	3b11      	subs	r3, #17
   2bc5a:	f023 0303 	bic.w	r3, r3, #3
   2bc5e:	42a2      	cmp	r2, r4
   2bc60:	bf88      	it	hi
   2bc62:	2300      	movhi	r3, #0
   2bc64:	4418      	add	r0, r3
   2bc66:	2300      	movs	r3, #0
   2bc68:	4288      	cmp	r0, r1
   2bc6a:	d305      	bcc.n	2bc78 <__copybits+0x40>
   2bc6c:	bd70      	pop	{r4, r5, r6, pc}
   2bc6e:	f853 6b04 	ldr.w	r6, [r3], #4
   2bc72:	f845 6f04 	str.w	r6, [r5, #4]!
   2bc76:	e7eb      	b.n	2bc50 <__copybits+0x18>
   2bc78:	f840 3b04 	str.w	r3, [r0], #4
   2bc7c:	e7f4      	b.n	2bc68 <__copybits+0x30>

0002bc7e <__any_on>:
   2bc7e:	f100 0214 	add.w	r2, r0, #20
   2bc82:	114b      	asrs	r3, r1, #5
   2bc84:	6900      	ldr	r0, [r0, #16]
   2bc86:	4298      	cmp	r0, r3
   2bc88:	b510      	push	{r4, lr}
   2bc8a:	db11      	blt.n	2bcb0 <__any_on+0x32>
   2bc8c:	dd0a      	ble.n	2bca4 <__any_on+0x26>
   2bc8e:	f011 011f 	ands.w	r1, r1, #31
   2bc92:	d007      	beq.n	2bca4 <__any_on+0x26>
   2bc94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2bc98:	fa24 f001 	lsr.w	r0, r4, r1
   2bc9c:	fa00 f101 	lsl.w	r1, r0, r1
   2bca0:	428c      	cmp	r4, r1
   2bca2:	d10b      	bne.n	2bcbc <__any_on+0x3e>
   2bca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2bca8:	4293      	cmp	r3, r2
   2bcaa:	d803      	bhi.n	2bcb4 <__any_on+0x36>
   2bcac:	2000      	movs	r0, #0
   2bcae:	bd10      	pop	{r4, pc}
   2bcb0:	4603      	mov	r3, r0
   2bcb2:	e7f7      	b.n	2bca4 <__any_on+0x26>
   2bcb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2bcb8:	2900      	cmp	r1, #0
   2bcba:	d0f5      	beq.n	2bca8 <__any_on+0x2a>
   2bcbc:	2001      	movs	r0, #1
   2bcbe:	e7f6      	b.n	2bcae <__any_on+0x30>

0002bcc0 <_calloc_r>:
   2bcc0:	434a      	muls	r2, r1
   2bcc2:	b513      	push	{r0, r1, r4, lr}
   2bcc4:	4611      	mov	r1, r2
   2bcc6:	9201      	str	r2, [sp, #4]
   2bcc8:	f7f8 fbe6 	bl	24498 <_malloc_r>
   2bccc:	4604      	mov	r4, r0
   2bcce:	b118      	cbz	r0, 2bcd8 <_calloc_r+0x18>
   2bcd0:	9a01      	ldr	r2, [sp, #4]
   2bcd2:	2100      	movs	r1, #0
   2bcd4:	f7ff f8d8 	bl	2ae88 <memset>
   2bcd8:	4620      	mov	r0, r4
   2bcda:	b002      	add	sp, #8
   2bcdc:	bd10      	pop	{r4, pc}

0002bcde <_realloc_r>:
   2bcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bce0:	4607      	mov	r7, r0
   2bce2:	4614      	mov	r4, r2
   2bce4:	460e      	mov	r6, r1
   2bce6:	b921      	cbnz	r1, 2bcf2 <_realloc_r+0x14>
   2bce8:	4611      	mov	r1, r2
   2bcea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2bcee:	f7f8 bbd3 	b.w	24498 <_malloc_r>
   2bcf2:	b922      	cbnz	r2, 2bcfe <_realloc_r+0x20>
   2bcf4:	4625      	mov	r5, r4
   2bcf6:	f7f8 fb7f 	bl	243f8 <_free_r>
   2bcfa:	4628      	mov	r0, r5
   2bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bcfe:	f000 f960 	bl	2bfc2 <_malloc_usable_size_r>
   2bd02:	42a0      	cmp	r0, r4
   2bd04:	d20f      	bcs.n	2bd26 <_realloc_r+0x48>
   2bd06:	4621      	mov	r1, r4
   2bd08:	4638      	mov	r0, r7
   2bd0a:	f7f8 fbc5 	bl	24498 <_malloc_r>
   2bd0e:	4605      	mov	r5, r0
   2bd10:	2800      	cmp	r0, #0
   2bd12:	d0f2      	beq.n	2bcfa <_realloc_r+0x1c>
   2bd14:	4631      	mov	r1, r6
   2bd16:	4622      	mov	r2, r4
   2bd18:	f7ff f896 	bl	2ae48 <memcpy>
   2bd1c:	4631      	mov	r1, r6
   2bd1e:	4638      	mov	r0, r7
   2bd20:	f7f8 fb6a 	bl	243f8 <_free_r>
   2bd24:	e7e9      	b.n	2bcfa <_realloc_r+0x1c>
   2bd26:	4635      	mov	r5, r6
   2bd28:	e7e7      	b.n	2bcfa <_realloc_r+0x1c>

0002bd2a <__ssputs_r>:
   2bd2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bd2e:	688e      	ldr	r6, [r1, #8]
   2bd30:	4682      	mov	sl, r0
   2bd32:	460c      	mov	r4, r1
   2bd34:	4690      	mov	r8, r2
   2bd36:	429e      	cmp	r6, r3
   2bd38:	461f      	mov	r7, r3
   2bd3a:	d838      	bhi.n	2bdae <__ssputs_r+0x84>
   2bd3c:	898a      	ldrh	r2, [r1, #12]
   2bd3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2bd42:	d032      	beq.n	2bdaa <__ssputs_r+0x80>
   2bd44:	6825      	ldr	r5, [r4, #0]
   2bd46:	3301      	adds	r3, #1
   2bd48:	6909      	ldr	r1, [r1, #16]
   2bd4a:	eba5 0901 	sub.w	r9, r5, r1
   2bd4e:	6965      	ldr	r5, [r4, #20]
   2bd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2bd54:	444b      	add	r3, r9
   2bd56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2bd5a:	106d      	asrs	r5, r5, #1
   2bd5c:	429d      	cmp	r5, r3
   2bd5e:	bf38      	it	cc
   2bd60:	461d      	movcc	r5, r3
   2bd62:	0553      	lsls	r3, r2, #21
   2bd64:	d531      	bpl.n	2bdca <__ssputs_r+0xa0>
   2bd66:	4629      	mov	r1, r5
   2bd68:	f7f8 fb96 	bl	24498 <_malloc_r>
   2bd6c:	4606      	mov	r6, r0
   2bd6e:	b950      	cbnz	r0, 2bd86 <__ssputs_r+0x5c>
   2bd70:	230c      	movs	r3, #12
   2bd72:	f04f 30ff 	mov.w	r0, #4294967295
   2bd76:	f8ca 3000 	str.w	r3, [sl]
   2bd7a:	89a3      	ldrh	r3, [r4, #12]
   2bd7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bd80:	81a3      	strh	r3, [r4, #12]
   2bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bd86:	464a      	mov	r2, r9
   2bd88:	6921      	ldr	r1, [r4, #16]
   2bd8a:	f7ff f85d 	bl	2ae48 <memcpy>
   2bd8e:	89a3      	ldrh	r3, [r4, #12]
   2bd90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2bd98:	81a3      	strh	r3, [r4, #12]
   2bd9a:	6126      	str	r6, [r4, #16]
   2bd9c:	444e      	add	r6, r9
   2bd9e:	6165      	str	r5, [r4, #20]
   2bda0:	eba5 0509 	sub.w	r5, r5, r9
   2bda4:	6026      	str	r6, [r4, #0]
   2bda6:	463e      	mov	r6, r7
   2bda8:	60a5      	str	r5, [r4, #8]
   2bdaa:	42be      	cmp	r6, r7
   2bdac:	d900      	bls.n	2bdb0 <__ssputs_r+0x86>
   2bdae:	463e      	mov	r6, r7
   2bdb0:	4632      	mov	r2, r6
   2bdb2:	4641      	mov	r1, r8
   2bdb4:	6820      	ldr	r0, [r4, #0]
   2bdb6:	f000 f8ea 	bl	2bf8e <memmove>
   2bdba:	68a3      	ldr	r3, [r4, #8]
   2bdbc:	6822      	ldr	r2, [r4, #0]
   2bdbe:	2000      	movs	r0, #0
   2bdc0:	1b9b      	subs	r3, r3, r6
   2bdc2:	4432      	add	r2, r6
   2bdc4:	60a3      	str	r3, [r4, #8]
   2bdc6:	6022      	str	r2, [r4, #0]
   2bdc8:	e7db      	b.n	2bd82 <__ssputs_r+0x58>
   2bdca:	462a      	mov	r2, r5
   2bdcc:	f7ff ff87 	bl	2bcde <_realloc_r>
   2bdd0:	4606      	mov	r6, r0
   2bdd2:	2800      	cmp	r0, #0
   2bdd4:	d1e1      	bne.n	2bd9a <__ssputs_r+0x70>
   2bdd6:	6921      	ldr	r1, [r4, #16]
   2bdd8:	4650      	mov	r0, sl
   2bdda:	f7f8 fb0d 	bl	243f8 <_free_r>
   2bdde:	e7c7      	b.n	2bd70 <__ssputs_r+0x46>

0002bde0 <_sungetc_r>:
   2bde0:	b538      	push	{r3, r4, r5, lr}
   2bde2:	1c4b      	adds	r3, r1, #1
   2bde4:	4614      	mov	r4, r2
   2bde6:	d103      	bne.n	2bdf0 <_sungetc_r+0x10>
   2bde8:	f04f 35ff 	mov.w	r5, #4294967295
   2bdec:	4628      	mov	r0, r5
   2bdee:	bd38      	pop	{r3, r4, r5, pc}
   2bdf0:	8993      	ldrh	r3, [r2, #12]
   2bdf2:	b2cd      	uxtb	r5, r1
   2bdf4:	f023 0320 	bic.w	r3, r3, #32
   2bdf8:	8193      	strh	r3, [r2, #12]
   2bdfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bdfc:	6852      	ldr	r2, [r2, #4]
   2bdfe:	b18b      	cbz	r3, 2be24 <_sungetc_r+0x44>
   2be00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2be02:	4293      	cmp	r3, r2
   2be04:	dd08      	ble.n	2be18 <_sungetc_r+0x38>
   2be06:	6823      	ldr	r3, [r4, #0]
   2be08:	1e5a      	subs	r2, r3, #1
   2be0a:	6022      	str	r2, [r4, #0]
   2be0c:	f803 5c01 	strb.w	r5, [r3, #-1]
   2be10:	6863      	ldr	r3, [r4, #4]
   2be12:	3301      	adds	r3, #1
   2be14:	6063      	str	r3, [r4, #4]
   2be16:	e7e9      	b.n	2bdec <_sungetc_r+0xc>
   2be18:	4621      	mov	r1, r4
   2be1a:	f000 f874 	bl	2bf06 <__submore>
   2be1e:	2800      	cmp	r0, #0
   2be20:	d0f1      	beq.n	2be06 <_sungetc_r+0x26>
   2be22:	e7e1      	b.n	2bde8 <_sungetc_r+0x8>
   2be24:	6921      	ldr	r1, [r4, #16]
   2be26:	6823      	ldr	r3, [r4, #0]
   2be28:	b151      	cbz	r1, 2be40 <_sungetc_r+0x60>
   2be2a:	4299      	cmp	r1, r3
   2be2c:	d208      	bcs.n	2be40 <_sungetc_r+0x60>
   2be2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2be32:	42a9      	cmp	r1, r5
   2be34:	d104      	bne.n	2be40 <_sungetc_r+0x60>
   2be36:	3b01      	subs	r3, #1
   2be38:	3201      	adds	r2, #1
   2be3a:	6023      	str	r3, [r4, #0]
   2be3c:	6062      	str	r2, [r4, #4]
   2be3e:	e7d5      	b.n	2bdec <_sungetc_r+0xc>
   2be40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2be44:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2be48:	6363      	str	r3, [r4, #52]	; 0x34
   2be4a:	2303      	movs	r3, #3
   2be4c:	63a3      	str	r3, [r4, #56]	; 0x38
   2be4e:	4623      	mov	r3, r4
   2be50:	f803 5f46 	strb.w	r5, [r3, #70]!
   2be54:	6023      	str	r3, [r4, #0]
   2be56:	2301      	movs	r3, #1
   2be58:	e7dc      	b.n	2be14 <_sungetc_r+0x34>

0002be5a <__ssrefill_r>:
   2be5a:	b510      	push	{r4, lr}
   2be5c:	460c      	mov	r4, r1
   2be5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2be60:	b169      	cbz	r1, 2be7e <__ssrefill_r+0x24>
   2be62:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2be66:	4299      	cmp	r1, r3
   2be68:	d001      	beq.n	2be6e <__ssrefill_r+0x14>
   2be6a:	f7f8 fac5 	bl	243f8 <_free_r>
   2be6e:	2000      	movs	r0, #0
   2be70:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2be72:	6360      	str	r0, [r4, #52]	; 0x34
   2be74:	6063      	str	r3, [r4, #4]
   2be76:	b113      	cbz	r3, 2be7e <__ssrefill_r+0x24>
   2be78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2be7a:	6023      	str	r3, [r4, #0]
   2be7c:	bd10      	pop	{r4, pc}
   2be7e:	6923      	ldr	r3, [r4, #16]
   2be80:	f04f 30ff 	mov.w	r0, #4294967295
   2be84:	6023      	str	r3, [r4, #0]
   2be86:	2300      	movs	r3, #0
   2be88:	6063      	str	r3, [r4, #4]
   2be8a:	89a3      	ldrh	r3, [r4, #12]
   2be8c:	f043 0320 	orr.w	r3, r3, #32
   2be90:	81a3      	strh	r3, [r4, #12]
   2be92:	e7f3      	b.n	2be7c <__ssrefill_r+0x22>

0002be94 <__sccl>:
   2be94:	b570      	push	{r4, r5, r6, lr}
   2be96:	780b      	ldrb	r3, [r1, #0]
   2be98:	4604      	mov	r4, r0
   2be9a:	2b5e      	cmp	r3, #94	; 0x5e
   2be9c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2bea0:	bf13      	iteet	ne
   2bea2:	1c48      	addne	r0, r1, #1
   2bea4:	1c88      	addeq	r0, r1, #2
   2bea6:	784b      	ldrbeq	r3, [r1, #1]
   2bea8:	2200      	movne	r2, #0
   2beaa:	bf08      	it	eq
   2beac:	2201      	moveq	r2, #1
   2beae:	1e61      	subs	r1, r4, #1
   2beb0:	f801 2f01 	strb.w	r2, [r1, #1]!
   2beb4:	42a9      	cmp	r1, r5
   2beb6:	d1fb      	bne.n	2beb0 <__sccl+0x1c>
   2beb8:	b90b      	cbnz	r3, 2bebe <__sccl+0x2a>
   2beba:	3801      	subs	r0, #1
   2bebc:	bd70      	pop	{r4, r5, r6, pc}
   2bebe:	f082 0101 	eor.w	r1, r2, #1
   2bec2:	1c42      	adds	r2, r0, #1
   2bec4:	54e1      	strb	r1, [r4, r3]
   2bec6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   2beca:	1e56      	subs	r6, r2, #1
   2becc:	4610      	mov	r0, r2
   2bece:	2d2d      	cmp	r5, #45	; 0x2d
   2bed0:	d006      	beq.n	2bee0 <__sccl+0x4c>
   2bed2:	2d5d      	cmp	r5, #93	; 0x5d
   2bed4:	d0f2      	beq.n	2bebc <__sccl+0x28>
   2bed6:	b90d      	cbnz	r5, 2bedc <__sccl+0x48>
   2bed8:	4630      	mov	r0, r6
   2beda:	e7ef      	b.n	2bebc <__sccl+0x28>
   2bedc:	462b      	mov	r3, r5
   2bede:	e7f0      	b.n	2bec2 <__sccl+0x2e>
   2bee0:	7816      	ldrb	r6, [r2, #0]
   2bee2:	2e5d      	cmp	r6, #93	; 0x5d
   2bee4:	d0fa      	beq.n	2bedc <__sccl+0x48>
   2bee6:	42b3      	cmp	r3, r6
   2bee8:	dcf8      	bgt.n	2bedc <__sccl+0x48>
   2beea:	4618      	mov	r0, r3
   2beec:	3001      	adds	r0, #1
   2beee:	4286      	cmp	r6, r0
   2bef0:	5421      	strb	r1, [r4, r0]
   2bef2:	dcfb      	bgt.n	2beec <__sccl+0x58>
   2bef4:	43d8      	mvns	r0, r3
   2bef6:	1c5d      	adds	r5, r3, #1
   2bef8:	3202      	adds	r2, #2
   2befa:	4430      	add	r0, r6
   2befc:	42b3      	cmp	r3, r6
   2befe:	bfa8      	it	ge
   2bf00:	2000      	movge	r0, #0
   2bf02:	182b      	adds	r3, r5, r0
   2bf04:	e7df      	b.n	2bec6 <__sccl+0x32>

0002bf06 <__submore>:
   2bf06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf0a:	460c      	mov	r4, r1
   2bf0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2bf0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2bf12:	4299      	cmp	r1, r3
   2bf14:	d11a      	bne.n	2bf4c <__submore+0x46>
   2bf16:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bf1a:	f7f8 fabd 	bl	24498 <_malloc_r>
   2bf1e:	b918      	cbnz	r0, 2bf28 <__submore+0x22>
   2bf20:	f04f 30ff 	mov.w	r0, #4294967295
   2bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bf28:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2bf2c:	6360      	str	r0, [r4, #52]	; 0x34
   2bf2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2bf32:	63a3      	str	r3, [r4, #56]	; 0x38
   2bf34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2bf38:	7083      	strb	r3, [r0, #2]
   2bf3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2bf3e:	7043      	strb	r3, [r0, #1]
   2bf40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2bf44:	7003      	strb	r3, [r0, #0]
   2bf46:	6020      	str	r0, [r4, #0]
   2bf48:	2000      	movs	r0, #0
   2bf4a:	e7eb      	b.n	2bf24 <__submore+0x1e>
   2bf4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2bf4e:	0077      	lsls	r7, r6, #1
   2bf50:	463a      	mov	r2, r7
   2bf52:	f7ff fec4 	bl	2bcde <_realloc_r>
   2bf56:	4605      	mov	r5, r0
   2bf58:	2800      	cmp	r0, #0
   2bf5a:	d0e1      	beq.n	2bf20 <__submore+0x1a>
   2bf5c:	eb00 0806 	add.w	r8, r0, r6
   2bf60:	4601      	mov	r1, r0
   2bf62:	4632      	mov	r2, r6
   2bf64:	4640      	mov	r0, r8
   2bf66:	f7fe ff6f 	bl	2ae48 <memcpy>
   2bf6a:	f8c4 8000 	str.w	r8, [r4]
   2bf6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2bf72:	e7e9      	b.n	2bf48 <__submore+0x42>

0002bf74 <__ascii_wctomb>:
   2bf74:	b149      	cbz	r1, 2bf8a <__ascii_wctomb+0x16>
   2bf76:	2aff      	cmp	r2, #255	; 0xff
   2bf78:	bf8d      	iteet	hi
   2bf7a:	238a      	movhi	r3, #138	; 0x8a
   2bf7c:	2001      	movls	r0, #1
   2bf7e:	700a      	strbls	r2, [r1, #0]
   2bf80:	6003      	strhi	r3, [r0, #0]
   2bf82:	bf88      	it	hi
   2bf84:	f04f 30ff 	movhi.w	r0, #4294967295
   2bf88:	4770      	bx	lr
   2bf8a:	4608      	mov	r0, r1
   2bf8c:	4770      	bx	lr

0002bf8e <memmove>:
   2bf8e:	4288      	cmp	r0, r1
   2bf90:	b510      	push	{r4, lr}
   2bf92:	eb01 0402 	add.w	r4, r1, r2
   2bf96:	d902      	bls.n	2bf9e <memmove+0x10>
   2bf98:	4284      	cmp	r4, r0
   2bf9a:	4623      	mov	r3, r4
   2bf9c:	d807      	bhi.n	2bfae <memmove+0x20>
   2bf9e:	1e43      	subs	r3, r0, #1
   2bfa0:	42a1      	cmp	r1, r4
   2bfa2:	d008      	beq.n	2bfb6 <memmove+0x28>
   2bfa4:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bfa8:	f803 2f01 	strb.w	r2, [r3, #1]!
   2bfac:	e7f8      	b.n	2bfa0 <memmove+0x12>
   2bfae:	4402      	add	r2, r0
   2bfb0:	4601      	mov	r1, r0
   2bfb2:	428a      	cmp	r2, r1
   2bfb4:	d100      	bne.n	2bfb8 <memmove+0x2a>
   2bfb6:	bd10      	pop	{r4, pc}
   2bfb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2bfbc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2bfc0:	e7f7      	b.n	2bfb2 <memmove+0x24>

0002bfc2 <_malloc_usable_size_r>:
   2bfc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2bfc6:	1f18      	subs	r0, r3, #4
   2bfc8:	2b00      	cmp	r3, #0
   2bfca:	bfbc      	itt	lt
   2bfcc:	580b      	ldrlt	r3, [r1, r0]
   2bfce:	18c0      	addlt	r0, r0, r3
   2bfd0:	4770      	bx	lr
	...

0002bfd4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2bfd4:	f7f2 bf22 	b.w	1ee1c <SystemInit>
